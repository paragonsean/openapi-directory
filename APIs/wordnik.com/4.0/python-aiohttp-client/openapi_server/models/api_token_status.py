# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiTokenStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_in_millis: int=None, remaining_calls: int=None, resets_in_millis: int=None, token: str=None, total_requests: int=None, valid: bool=None):
        """ApiTokenStatus - a model defined in OpenAPI

        :param expires_in_millis: The expires_in_millis of this ApiTokenStatus.
        :param remaining_calls: The remaining_calls of this ApiTokenStatus.
        :param resets_in_millis: The resets_in_millis of this ApiTokenStatus.
        :param token: The token of this ApiTokenStatus.
        :param total_requests: The total_requests of this ApiTokenStatus.
        :param valid: The valid of this ApiTokenStatus.
        """
        self.openapi_types = {
            'expires_in_millis': int,
            'remaining_calls': int,
            'resets_in_millis': int,
            'token': str,
            'total_requests': int,
            'valid': bool
        }

        self.attribute_map = {
            'expires_in_millis': 'expiresInMillis',
            'remaining_calls': 'remainingCalls',
            'resets_in_millis': 'resetsInMillis',
            'token': 'token',
            'total_requests': 'totalRequests',
            'valid': 'valid'
        }

        self._expires_in_millis = expires_in_millis
        self._remaining_calls = remaining_calls
        self._resets_in_millis = resets_in_millis
        self._token = token
        self._total_requests = total_requests
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiTokenStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiTokenStatus of this ApiTokenStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_in_millis(self):
        """Gets the expires_in_millis of this ApiTokenStatus.


        :return: The expires_in_millis of this ApiTokenStatus.
        :rtype: int
        """
        return self._expires_in_millis

    @expires_in_millis.setter
    def expires_in_millis(self, expires_in_millis):
        """Sets the expires_in_millis of this ApiTokenStatus.


        :param expires_in_millis: The expires_in_millis of this ApiTokenStatus.
        :type expires_in_millis: int
        """

        self._expires_in_millis = expires_in_millis

    @property
    def remaining_calls(self):
        """Gets the remaining_calls of this ApiTokenStatus.


        :return: The remaining_calls of this ApiTokenStatus.
        :rtype: int
        """
        return self._remaining_calls

    @remaining_calls.setter
    def remaining_calls(self, remaining_calls):
        """Sets the remaining_calls of this ApiTokenStatus.


        :param remaining_calls: The remaining_calls of this ApiTokenStatus.
        :type remaining_calls: int
        """

        self._remaining_calls = remaining_calls

    @property
    def resets_in_millis(self):
        """Gets the resets_in_millis of this ApiTokenStatus.


        :return: The resets_in_millis of this ApiTokenStatus.
        :rtype: int
        """
        return self._resets_in_millis

    @resets_in_millis.setter
    def resets_in_millis(self, resets_in_millis):
        """Sets the resets_in_millis of this ApiTokenStatus.


        :param resets_in_millis: The resets_in_millis of this ApiTokenStatus.
        :type resets_in_millis: int
        """

        self._resets_in_millis = resets_in_millis

    @property
    def token(self):
        """Gets the token of this ApiTokenStatus.


        :return: The token of this ApiTokenStatus.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ApiTokenStatus.


        :param token: The token of this ApiTokenStatus.
        :type token: str
        """

        self._token = token

    @property
    def total_requests(self):
        """Gets the total_requests of this ApiTokenStatus.


        :return: The total_requests of this ApiTokenStatus.
        :rtype: int
        """
        return self._total_requests

    @total_requests.setter
    def total_requests(self, total_requests):
        """Sets the total_requests of this ApiTokenStatus.


        :param total_requests: The total_requests of this ApiTokenStatus.
        :type total_requests: int
        """

        self._total_requests = total_requests

    @property
    def valid(self):
        """Gets the valid of this ApiTokenStatus.


        :return: The valid of this ApiTokenStatus.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this ApiTokenStatus.


        :param valid: The valid of this ApiTokenStatus.
        :type valid: bool
        """

        self._valid = valid
