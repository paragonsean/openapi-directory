# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WordSearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, lexicality: float=None, word: str=None):
        """WordSearchResult - a model defined in OpenAPI

        :param count: The count of this WordSearchResult.
        :param lexicality: The lexicality of this WordSearchResult.
        :param word: The word of this WordSearchResult.
        """
        self.openapi_types = {
            'count': int,
            'lexicality': float,
            'word': str
        }

        self.attribute_map = {
            'count': 'count',
            'lexicality': 'lexicality',
            'word': 'word'
        }

        self._count = count
        self._lexicality = lexicality
        self._word = word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WordSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WordSearchResult of this WordSearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this WordSearchResult.


        :return: The count of this WordSearchResult.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this WordSearchResult.


        :param count: The count of this WordSearchResult.
        :type count: int
        """

        self._count = count

    @property
    def lexicality(self):
        """Gets the lexicality of this WordSearchResult.


        :return: The lexicality of this WordSearchResult.
        :rtype: float
        """
        return self._lexicality

    @lexicality.setter
    def lexicality(self, lexicality):
        """Sets the lexicality of this WordSearchResult.


        :param lexicality: The lexicality of this WordSearchResult.
        :type lexicality: float
        """

        self._lexicality = lexicality

    @property
    def word(self):
        """Gets the word of this WordSearchResult.


        :return: The word of this WordSearchResult.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this WordSearchResult.


        :param word: The word of this WordSearchResult.
        :type word: str
        """

        self._word = word
