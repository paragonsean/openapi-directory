# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applies_to: List[str]=None, note_type: str=None, pos: int=None, value: str=None):
        """Note - a model defined in OpenAPI

        :param applies_to: The applies_to of this Note.
        :param note_type: The note_type of this Note.
        :param pos: The pos of this Note.
        :param value: The value of this Note.
        """
        self.openapi_types = {
            'applies_to': List[str],
            'note_type': str,
            'pos': int,
            'value': str
        }

        self.attribute_map = {
            'applies_to': 'appliesTo',
            'note_type': 'noteType',
            'pos': 'pos',
            'value': 'value'
        }

        self._applies_to = applies_to
        self._note_type = note_type
        self._pos = pos
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applies_to(self):
        """Gets the applies_to of this Note.


        :return: The applies_to of this Note.
        :rtype: List[str]
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this Note.


        :param applies_to: The applies_to of this Note.
        :type applies_to: List[str]
        """

        self._applies_to = applies_to

    @property
    def note_type(self):
        """Gets the note_type of this Note.


        :return: The note_type of this Note.
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this Note.


        :param note_type: The note_type of this Note.
        :type note_type: str
        """

        self._note_type = note_type

    @property
    def pos(self):
        """Gets the pos of this Note.


        :return: The pos of this Note.
        :rtype: int
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this Note.


        :param pos: The pos of this Note.
        :type pos: int
        """

        self._pos = pos

    @property
    def value(self):
        """Gets the value of this Note.


        :return: The value of this Note.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Note.


        :param value: The value of this Note.
        :type value: str
        """

        self._value = value
