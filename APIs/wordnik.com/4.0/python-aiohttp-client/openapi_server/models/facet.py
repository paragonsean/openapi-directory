# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Facet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facet_values: List[object]=None, name: str=None):
        """Facet - a model defined in OpenAPI

        :param facet_values: The facet_values of this Facet.
        :param name: The name of this Facet.
        """
        self.openapi_types = {
            'facet_values': List[object],
            'name': str
        }

        self.attribute_map = {
            'facet_values': 'facetValues',
            'name': 'name'
        }

        self._facet_values = facet_values
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Facet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Facet of this Facet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facet_values(self):
        """Gets the facet_values of this Facet.


        :return: The facet_values of this Facet.
        :rtype: List[object]
        """
        return self._facet_values

    @facet_values.setter
    def facet_values(self, facet_values):
        """Sets the facet_values of this Facet.


        :param facet_values: The facet_values of this Facet.
        :type facet_values: List[object]
        """

        self._facet_values = facet_values

    @property
    def name(self):
        """Gets the name of this Facet.


        :return: The name of this Facet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Facet.


        :param name: The name of this Facet.
        :type name: str
        """

        self._name = name
