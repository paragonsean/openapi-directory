# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Related(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gram: str=None, label1: str=None, label2: str=None, label3: str=None, label4: str=None, relationship_type: str=None, words: List[str]=None):
        """Related - a model defined in OpenAPI

        :param gram: The gram of this Related.
        :param label1: The label1 of this Related.
        :param label2: The label2 of this Related.
        :param label3: The label3 of this Related.
        :param label4: The label4 of this Related.
        :param relationship_type: The relationship_type of this Related.
        :param words: The words of this Related.
        """
        self.openapi_types = {
            'gram': str,
            'label1': str,
            'label2': str,
            'label3': str,
            'label4': str,
            'relationship_type': str,
            'words': List[str]
        }

        self.attribute_map = {
            'gram': 'gram',
            'label1': 'label1',
            'label2': 'label2',
            'label3': 'label3',
            'label4': 'label4',
            'relationship_type': 'relationshipType',
            'words': 'words'
        }

        self._gram = gram
        self._label1 = label1
        self._label2 = label2
        self._label3 = label3
        self._label4 = label4
        self._relationship_type = relationship_type
        self._words = words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Related':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Related of this Related.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gram(self):
        """Gets the gram of this Related.


        :return: The gram of this Related.
        :rtype: str
        """
        return self._gram

    @gram.setter
    def gram(self, gram):
        """Sets the gram of this Related.


        :param gram: The gram of this Related.
        :type gram: str
        """

        self._gram = gram

    @property
    def label1(self):
        """Gets the label1 of this Related.


        :return: The label1 of this Related.
        :rtype: str
        """
        return self._label1

    @label1.setter
    def label1(self, label1):
        """Sets the label1 of this Related.


        :param label1: The label1 of this Related.
        :type label1: str
        """

        self._label1 = label1

    @property
    def label2(self):
        """Gets the label2 of this Related.


        :return: The label2 of this Related.
        :rtype: str
        """
        return self._label2

    @label2.setter
    def label2(self, label2):
        """Sets the label2 of this Related.


        :param label2: The label2 of this Related.
        :type label2: str
        """

        self._label2 = label2

    @property
    def label3(self):
        """Gets the label3 of this Related.


        :return: The label3 of this Related.
        :rtype: str
        """
        return self._label3

    @label3.setter
    def label3(self, label3):
        """Sets the label3 of this Related.


        :param label3: The label3 of this Related.
        :type label3: str
        """

        self._label3 = label3

    @property
    def label4(self):
        """Gets the label4 of this Related.


        :return: The label4 of this Related.
        :rtype: str
        """
        return self._label4

    @label4.setter
    def label4(self, label4):
        """Sets the label4 of this Related.


        :param label4: The label4 of this Related.
        :type label4: str
        """

        self._label4 = label4

    @property
    def relationship_type(self):
        """Gets the relationship_type of this Related.


        :return: The relationship_type of this Related.
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this Related.


        :param relationship_type: The relationship_type of this Related.
        :type relationship_type: str
        """

        self._relationship_type = relationship_type

    @property
    def words(self):
        """Gets the words of this Related.


        :return: The words of this Related.
        :rtype: List[str]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this Related.


        :param words: The words of this Related.
        :type words: List[str]
        """

        self._words = words
