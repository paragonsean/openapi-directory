# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimpleDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, note: str=None, part_of_speech: str=None, source: str=None, text: str=None):
        """SimpleDefinition - a model defined in OpenAPI

        :param note: The note of this SimpleDefinition.
        :param part_of_speech: The part_of_speech of this SimpleDefinition.
        :param source: The source of this SimpleDefinition.
        :param text: The text of this SimpleDefinition.
        """
        self.openapi_types = {
            'note': str,
            'part_of_speech': str,
            'source': str,
            'text': str
        }

        self.attribute_map = {
            'note': 'note',
            'part_of_speech': 'partOfSpeech',
            'source': 'source',
            'text': 'text'
        }

        self._note = note
        self._part_of_speech = part_of_speech
        self._source = source
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimpleDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimpleDefinition of this SimpleDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def note(self):
        """Gets the note of this SimpleDefinition.


        :return: The note of this SimpleDefinition.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SimpleDefinition.


        :param note: The note of this SimpleDefinition.
        :type note: str
        """

        self._note = note

    @property
    def part_of_speech(self):
        """Gets the part_of_speech of this SimpleDefinition.


        :return: The part_of_speech of this SimpleDefinition.
        :rtype: str
        """
        return self._part_of_speech

    @part_of_speech.setter
    def part_of_speech(self, part_of_speech):
        """Sets the part_of_speech of this SimpleDefinition.


        :param part_of_speech: The part_of_speech of this SimpleDefinition.
        :type part_of_speech: str
        """

        self._part_of_speech = part_of_speech

    @property
    def source(self):
        """Gets the source of this SimpleDefinition.


        :return: The source of this SimpleDefinition.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SimpleDefinition.


        :param source: The source of this SimpleDefinition.
        :type source: str
        """

        self._source = source

    @property
    def text(self):
        """Gets the text of this SimpleDefinition.


        :return: The text of this SimpleDefinition.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SimpleDefinition.


        :param text: The text of this SimpleDefinition.
        :type text: str
        """

        self._text = text
