# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoredWord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_word_score: float=None, doc_term_count: int=None, id: int=None, lemma: str=None, part_of_speech: str=None, position: int=None, score: float=None, sentence_id: int=None, stopword: bool=None, word: str=None, word_type: str=None):
        """ScoredWord - a model defined in OpenAPI

        :param base_word_score: The base_word_score of this ScoredWord.
        :param doc_term_count: The doc_term_count of this ScoredWord.
        :param id: The id of this ScoredWord.
        :param lemma: The lemma of this ScoredWord.
        :param part_of_speech: The part_of_speech of this ScoredWord.
        :param position: The position of this ScoredWord.
        :param score: The score of this ScoredWord.
        :param sentence_id: The sentence_id of this ScoredWord.
        :param stopword: The stopword of this ScoredWord.
        :param word: The word of this ScoredWord.
        :param word_type: The word_type of this ScoredWord.
        """
        self.openapi_types = {
            'base_word_score': float,
            'doc_term_count': int,
            'id': int,
            'lemma': str,
            'part_of_speech': str,
            'position': int,
            'score': float,
            'sentence_id': int,
            'stopword': bool,
            'word': str,
            'word_type': str
        }

        self.attribute_map = {
            'base_word_score': 'baseWordScore',
            'doc_term_count': 'docTermCount',
            'id': 'id',
            'lemma': 'lemma',
            'part_of_speech': 'partOfSpeech',
            'position': 'position',
            'score': 'score',
            'sentence_id': 'sentenceId',
            'stopword': 'stopword',
            'word': 'word',
            'word_type': 'wordType'
        }

        self._base_word_score = base_word_score
        self._doc_term_count = doc_term_count
        self._id = id
        self._lemma = lemma
        self._part_of_speech = part_of_speech
        self._position = position
        self._score = score
        self._sentence_id = sentence_id
        self._stopword = stopword
        self._word = word
        self._word_type = word_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoredWord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoredWord of this ScoredWord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_word_score(self):
        """Gets the base_word_score of this ScoredWord.


        :return: The base_word_score of this ScoredWord.
        :rtype: float
        """
        return self._base_word_score

    @base_word_score.setter
    def base_word_score(self, base_word_score):
        """Sets the base_word_score of this ScoredWord.


        :param base_word_score: The base_word_score of this ScoredWord.
        :type base_word_score: float
        """

        self._base_word_score = base_word_score

    @property
    def doc_term_count(self):
        """Gets the doc_term_count of this ScoredWord.


        :return: The doc_term_count of this ScoredWord.
        :rtype: int
        """
        return self._doc_term_count

    @doc_term_count.setter
    def doc_term_count(self, doc_term_count):
        """Sets the doc_term_count of this ScoredWord.


        :param doc_term_count: The doc_term_count of this ScoredWord.
        :type doc_term_count: int
        """

        self._doc_term_count = doc_term_count

    @property
    def id(self):
        """Gets the id of this ScoredWord.


        :return: The id of this ScoredWord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoredWord.


        :param id: The id of this ScoredWord.
        :type id: int
        """

        self._id = id

    @property
    def lemma(self):
        """Gets the lemma of this ScoredWord.


        :return: The lemma of this ScoredWord.
        :rtype: str
        """
        return self._lemma

    @lemma.setter
    def lemma(self, lemma):
        """Sets the lemma of this ScoredWord.


        :param lemma: The lemma of this ScoredWord.
        :type lemma: str
        """

        self._lemma = lemma

    @property
    def part_of_speech(self):
        """Gets the part_of_speech of this ScoredWord.


        :return: The part_of_speech of this ScoredWord.
        :rtype: str
        """
        return self._part_of_speech

    @part_of_speech.setter
    def part_of_speech(self, part_of_speech):
        """Sets the part_of_speech of this ScoredWord.


        :param part_of_speech: The part_of_speech of this ScoredWord.
        :type part_of_speech: str
        """

        self._part_of_speech = part_of_speech

    @property
    def position(self):
        """Gets the position of this ScoredWord.


        :return: The position of this ScoredWord.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ScoredWord.


        :param position: The position of this ScoredWord.
        :type position: int
        """

        self._position = position

    @property
    def score(self):
        """Gets the score of this ScoredWord.


        :return: The score of this ScoredWord.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ScoredWord.


        :param score: The score of this ScoredWord.
        :type score: float
        """

        self._score = score

    @property
    def sentence_id(self):
        """Gets the sentence_id of this ScoredWord.


        :return: The sentence_id of this ScoredWord.
        :rtype: int
        """
        return self._sentence_id

    @sentence_id.setter
    def sentence_id(self, sentence_id):
        """Sets the sentence_id of this ScoredWord.


        :param sentence_id: The sentence_id of this ScoredWord.
        :type sentence_id: int
        """

        self._sentence_id = sentence_id

    @property
    def stopword(self):
        """Gets the stopword of this ScoredWord.


        :return: The stopword of this ScoredWord.
        :rtype: bool
        """
        return self._stopword

    @stopword.setter
    def stopword(self, stopword):
        """Sets the stopword of this ScoredWord.


        :param stopword: The stopword of this ScoredWord.
        :type stopword: bool
        """

        self._stopword = stopword

    @property
    def word(self):
        """Gets the word of this ScoredWord.


        :return: The word of this ScoredWord.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this ScoredWord.


        :param word: The word of this ScoredWord.
        :type word: str
        """

        self._word = word

    @property
    def word_type(self):
        """Gets the word_type of this ScoredWord.


        :return: The word_type of this ScoredWord.
        :rtype: str
        """
        return self._word_type

    @word_type.setter
    def word_type(self, word_type):
        """Sets the word_type of this ScoredWord.


        :param word_type: The word_type of this ScoredWord.
        :type word_type: str
        """

        self._word_type = word_type
