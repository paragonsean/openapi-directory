# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Definition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribution_text: str=None, attribution_url: str=None, citations: List[object]=None, example_uses: List[object]=None, extended_text: str=None, labels: List[object]=None, notes: List[object]=None, part_of_speech: str=None, related_words: List[object]=None, score: float=None, seq_string: str=None, sequence: str=None, source_dictionary: str=None, text: str=None, text_prons: List[object]=None, word: str=None):
        """Definition - a model defined in OpenAPI

        :param attribution_text: The attribution_text of this Definition.
        :param attribution_url: The attribution_url of this Definition.
        :param citations: The citations of this Definition.
        :param example_uses: The example_uses of this Definition.
        :param extended_text: The extended_text of this Definition.
        :param labels: The labels of this Definition.
        :param notes: The notes of this Definition.
        :param part_of_speech: The part_of_speech of this Definition.
        :param related_words: The related_words of this Definition.
        :param score: The score of this Definition.
        :param seq_string: The seq_string of this Definition.
        :param sequence: The sequence of this Definition.
        :param source_dictionary: The source_dictionary of this Definition.
        :param text: The text of this Definition.
        :param text_prons: The text_prons of this Definition.
        :param word: The word of this Definition.
        """
        self.openapi_types = {
            'attribution_text': str,
            'attribution_url': str,
            'citations': List[object],
            'example_uses': List[object],
            'extended_text': str,
            'labels': List[object],
            'notes': List[object],
            'part_of_speech': str,
            'related_words': List[object],
            'score': float,
            'seq_string': str,
            'sequence': str,
            'source_dictionary': str,
            'text': str,
            'text_prons': List[object],
            'word': str
        }

        self.attribute_map = {
            'attribution_text': 'attributionText',
            'attribution_url': 'attributionUrl',
            'citations': 'citations',
            'example_uses': 'exampleUses',
            'extended_text': 'extendedText',
            'labels': 'labels',
            'notes': 'notes',
            'part_of_speech': 'partOfSpeech',
            'related_words': 'relatedWords',
            'score': 'score',
            'seq_string': 'seqString',
            'sequence': 'sequence',
            'source_dictionary': 'sourceDictionary',
            'text': 'text',
            'text_prons': 'textProns',
            'word': 'word'
        }

        self._attribution_text = attribution_text
        self._attribution_url = attribution_url
        self._citations = citations
        self._example_uses = example_uses
        self._extended_text = extended_text
        self._labels = labels
        self._notes = notes
        self._part_of_speech = part_of_speech
        self._related_words = related_words
        self._score = score
        self._seq_string = seq_string
        self._sequence = sequence
        self._source_dictionary = source_dictionary
        self._text = text
        self._text_prons = text_prons
        self._word = word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Definition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Definition of this Definition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribution_text(self):
        """Gets the attribution_text of this Definition.


        :return: The attribution_text of this Definition.
        :rtype: str
        """
        return self._attribution_text

    @attribution_text.setter
    def attribution_text(self, attribution_text):
        """Sets the attribution_text of this Definition.


        :param attribution_text: The attribution_text of this Definition.
        :type attribution_text: str
        """

        self._attribution_text = attribution_text

    @property
    def attribution_url(self):
        """Gets the attribution_url of this Definition.


        :return: The attribution_url of this Definition.
        :rtype: str
        """
        return self._attribution_url

    @attribution_url.setter
    def attribution_url(self, attribution_url):
        """Sets the attribution_url of this Definition.


        :param attribution_url: The attribution_url of this Definition.
        :type attribution_url: str
        """

        self._attribution_url = attribution_url

    @property
    def citations(self):
        """Gets the citations of this Definition.


        :return: The citations of this Definition.
        :rtype: List[object]
        """
        return self._citations

    @citations.setter
    def citations(self, citations):
        """Sets the citations of this Definition.


        :param citations: The citations of this Definition.
        :type citations: List[object]
        """

        self._citations = citations

    @property
    def example_uses(self):
        """Gets the example_uses of this Definition.


        :return: The example_uses of this Definition.
        :rtype: List[object]
        """
        return self._example_uses

    @example_uses.setter
    def example_uses(self, example_uses):
        """Sets the example_uses of this Definition.


        :param example_uses: The example_uses of this Definition.
        :type example_uses: List[object]
        """

        self._example_uses = example_uses

    @property
    def extended_text(self):
        """Gets the extended_text of this Definition.


        :return: The extended_text of this Definition.
        :rtype: str
        """
        return self._extended_text

    @extended_text.setter
    def extended_text(self, extended_text):
        """Sets the extended_text of this Definition.


        :param extended_text: The extended_text of this Definition.
        :type extended_text: str
        """

        self._extended_text = extended_text

    @property
    def labels(self):
        """Gets the labels of this Definition.


        :return: The labels of this Definition.
        :rtype: List[object]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Definition.


        :param labels: The labels of this Definition.
        :type labels: List[object]
        """

        self._labels = labels

    @property
    def notes(self):
        """Gets the notes of this Definition.


        :return: The notes of this Definition.
        :rtype: List[object]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Definition.


        :param notes: The notes of this Definition.
        :type notes: List[object]
        """

        self._notes = notes

    @property
    def part_of_speech(self):
        """Gets the part_of_speech of this Definition.


        :return: The part_of_speech of this Definition.
        :rtype: str
        """
        return self._part_of_speech

    @part_of_speech.setter
    def part_of_speech(self, part_of_speech):
        """Sets the part_of_speech of this Definition.


        :param part_of_speech: The part_of_speech of this Definition.
        :type part_of_speech: str
        """

        self._part_of_speech = part_of_speech

    @property
    def related_words(self):
        """Gets the related_words of this Definition.


        :return: The related_words of this Definition.
        :rtype: List[object]
        """
        return self._related_words

    @related_words.setter
    def related_words(self, related_words):
        """Sets the related_words of this Definition.


        :param related_words: The related_words of this Definition.
        :type related_words: List[object]
        """

        self._related_words = related_words

    @property
    def score(self):
        """Gets the score of this Definition.


        :return: The score of this Definition.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Definition.


        :param score: The score of this Definition.
        :type score: float
        """

        self._score = score

    @property
    def seq_string(self):
        """Gets the seq_string of this Definition.


        :return: The seq_string of this Definition.
        :rtype: str
        """
        return self._seq_string

    @seq_string.setter
    def seq_string(self, seq_string):
        """Sets the seq_string of this Definition.


        :param seq_string: The seq_string of this Definition.
        :type seq_string: str
        """

        self._seq_string = seq_string

    @property
    def sequence(self):
        """Gets the sequence of this Definition.


        :return: The sequence of this Definition.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Definition.


        :param sequence: The sequence of this Definition.
        :type sequence: str
        """

        self._sequence = sequence

    @property
    def source_dictionary(self):
        """Gets the source_dictionary of this Definition.


        :return: The source_dictionary of this Definition.
        :rtype: str
        """
        return self._source_dictionary

    @source_dictionary.setter
    def source_dictionary(self, source_dictionary):
        """Sets the source_dictionary of this Definition.


        :param source_dictionary: The source_dictionary of this Definition.
        :type source_dictionary: str
        """

        self._source_dictionary = source_dictionary

    @property
    def text(self):
        """Gets the text of this Definition.


        :return: The text of this Definition.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Definition.


        :param text: The text of this Definition.
        :type text: str
        """

        self._text = text

    @property
    def text_prons(self):
        """Gets the text_prons of this Definition.


        :return: The text_prons of this Definition.
        :rtype: List[object]
        """
        return self._text_prons

    @text_prons.setter
    def text_prons(self, text_prons):
        """Sets the text_prons of this Definition.


        :param text_prons: The text_prons of this Definition.
        :type text_prons: List[object]
        """

        self._text_prons = text_prons

    @property
    def word(self):
        """Gets the word of this Definition.


        :return: The word of this Definition.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this Definition.


        :param word: The word of this Definition.
        :type word: str
        """

        self._word = word
