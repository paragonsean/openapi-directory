# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_provider import ContentProvider
from openapi_server import util


class WordOfTheDay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, content_provider: ContentProvider=None, created_at: date=None, created_by: str=None, definitions: List[object]=None, examples: List[object]=None, html_extra: str=None, id: int=None, note: str=None, parent_id: str=None, publish_date: date=None, word: str=None):
        """WordOfTheDay - a model defined in OpenAPI

        :param category: The category of this WordOfTheDay.
        :param content_provider: The content_provider of this WordOfTheDay.
        :param created_at: The created_at of this WordOfTheDay.
        :param created_by: The created_by of this WordOfTheDay.
        :param definitions: The definitions of this WordOfTheDay.
        :param examples: The examples of this WordOfTheDay.
        :param html_extra: The html_extra of this WordOfTheDay.
        :param id: The id of this WordOfTheDay.
        :param note: The note of this WordOfTheDay.
        :param parent_id: The parent_id of this WordOfTheDay.
        :param publish_date: The publish_date of this WordOfTheDay.
        :param word: The word of this WordOfTheDay.
        """
        self.openapi_types = {
            'category': str,
            'content_provider': ContentProvider,
            'created_at': date,
            'created_by': str,
            'definitions': List[object],
            'examples': List[object],
            'html_extra': str,
            'id': int,
            'note': str,
            'parent_id': str,
            'publish_date': date,
            'word': str
        }

        self.attribute_map = {
            'category': 'category',
            'content_provider': 'contentProvider',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'definitions': 'definitions',
            'examples': 'examples',
            'html_extra': 'htmlExtra',
            'id': 'id',
            'note': 'note',
            'parent_id': 'parentId',
            'publish_date': 'publishDate',
            'word': 'word'
        }

        self._category = category
        self._content_provider = content_provider
        self._created_at = created_at
        self._created_by = created_by
        self._definitions = definitions
        self._examples = examples
        self._html_extra = html_extra
        self._id = id
        self._note = note
        self._parent_id = parent_id
        self._publish_date = publish_date
        self._word = word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WordOfTheDay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WordOfTheDay of this WordOfTheDay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this WordOfTheDay.


        :return: The category of this WordOfTheDay.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this WordOfTheDay.


        :param category: The category of this WordOfTheDay.
        :type category: str
        """

        self._category = category

    @property
    def content_provider(self):
        """Gets the content_provider of this WordOfTheDay.


        :return: The content_provider of this WordOfTheDay.
        :rtype: ContentProvider
        """
        return self._content_provider

    @content_provider.setter
    def content_provider(self, content_provider):
        """Sets the content_provider of this WordOfTheDay.


        :param content_provider: The content_provider of this WordOfTheDay.
        :type content_provider: ContentProvider
        """

        self._content_provider = content_provider

    @property
    def created_at(self):
        """Gets the created_at of this WordOfTheDay.


        :return: The created_at of this WordOfTheDay.
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WordOfTheDay.


        :param created_at: The created_at of this WordOfTheDay.
        :type created_at: date
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this WordOfTheDay.


        :return: The created_by of this WordOfTheDay.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WordOfTheDay.


        :param created_by: The created_by of this WordOfTheDay.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def definitions(self):
        """Gets the definitions of this WordOfTheDay.


        :return: The definitions of this WordOfTheDay.
        :rtype: List[object]
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this WordOfTheDay.


        :param definitions: The definitions of this WordOfTheDay.
        :type definitions: List[object]
        """

        self._definitions = definitions

    @property
    def examples(self):
        """Gets the examples of this WordOfTheDay.


        :return: The examples of this WordOfTheDay.
        :rtype: List[object]
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this WordOfTheDay.


        :param examples: The examples of this WordOfTheDay.
        :type examples: List[object]
        """

        self._examples = examples

    @property
    def html_extra(self):
        """Gets the html_extra of this WordOfTheDay.


        :return: The html_extra of this WordOfTheDay.
        :rtype: str
        """
        return self._html_extra

    @html_extra.setter
    def html_extra(self, html_extra):
        """Sets the html_extra of this WordOfTheDay.


        :param html_extra: The html_extra of this WordOfTheDay.
        :type html_extra: str
        """

        self._html_extra = html_extra

    @property
    def id(self):
        """Gets the id of this WordOfTheDay.


        :return: The id of this WordOfTheDay.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WordOfTheDay.


        :param id: The id of this WordOfTheDay.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def note(self):
        """Gets the note of this WordOfTheDay.


        :return: The note of this WordOfTheDay.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this WordOfTheDay.


        :param note: The note of this WordOfTheDay.
        :type note: str
        """

        self._note = note

    @property
    def parent_id(self):
        """Gets the parent_id of this WordOfTheDay.


        :return: The parent_id of this WordOfTheDay.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this WordOfTheDay.


        :param parent_id: The parent_id of this WordOfTheDay.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def publish_date(self):
        """Gets the publish_date of this WordOfTheDay.


        :return: The publish_date of this WordOfTheDay.
        :rtype: date
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this WordOfTheDay.


        :param publish_date: The publish_date of this WordOfTheDay.
        :type publish_date: date
        """

        self._publish_date = publish_date

    @property
    def word(self):
        """Gets the word of this WordOfTheDay.


        :return: The word of this WordOfTheDay.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this WordOfTheDay.


        :param word: The word of this WordOfTheDay.
        :type word: str
        """

        self._word = word
