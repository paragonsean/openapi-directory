# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrequencySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: List[object]=None, frequency_string: str=None, total_count: int=None, unknown_year_count: int=None, word: str=None):
        """FrequencySummary - a model defined in OpenAPI

        :param frequency: The frequency of this FrequencySummary.
        :param frequency_string: The frequency_string of this FrequencySummary.
        :param total_count: The total_count of this FrequencySummary.
        :param unknown_year_count: The unknown_year_count of this FrequencySummary.
        :param word: The word of this FrequencySummary.
        """
        self.openapi_types = {
            'frequency': List[object],
            'frequency_string': str,
            'total_count': int,
            'unknown_year_count': int,
            'word': str
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'frequency_string': 'frequencyString',
            'total_count': 'totalCount',
            'unknown_year_count': 'unknownYearCount',
            'word': 'word'
        }

        self._frequency = frequency
        self._frequency_string = frequency_string
        self._total_count = total_count
        self._unknown_year_count = unknown_year_count
        self._word = word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrequencySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrequencySummary of this FrequencySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this FrequencySummary.


        :return: The frequency of this FrequencySummary.
        :rtype: List[object]
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this FrequencySummary.


        :param frequency: The frequency of this FrequencySummary.
        :type frequency: List[object]
        """

        self._frequency = frequency

    @property
    def frequency_string(self):
        """Gets the frequency_string of this FrequencySummary.


        :return: The frequency_string of this FrequencySummary.
        :rtype: str
        """
        return self._frequency_string

    @frequency_string.setter
    def frequency_string(self, frequency_string):
        """Sets the frequency_string of this FrequencySummary.


        :param frequency_string: The frequency_string of this FrequencySummary.
        :type frequency_string: str
        """

        self._frequency_string = frequency_string

    @property
    def total_count(self):
        """Gets the total_count of this FrequencySummary.


        :return: The total_count of this FrequencySummary.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this FrequencySummary.


        :param total_count: The total_count of this FrequencySummary.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def unknown_year_count(self):
        """Gets the unknown_year_count of this FrequencySummary.


        :return: The unknown_year_count of this FrequencySummary.
        :rtype: int
        """
        return self._unknown_year_count

    @unknown_year_count.setter
    def unknown_year_count(self, unknown_year_count):
        """Sets the unknown_year_count of this FrequencySummary.


        :param unknown_year_count: The unknown_year_count of this FrequencySummary.
        :type unknown_year_count: int
        """

        self._unknown_year_count = unknown_year_count

    @property
    def word(self):
        """Gets the word of this FrequencySummary.


        :return: The word of this FrequencySummary.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this FrequencySummary.


        :param word: The word of this FrequencySummary.
        :type word: str
        """

        self._word = word
