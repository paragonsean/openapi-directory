# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WordObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonical_form: str=None, id: int=None, original_word: str=None, suggestions: List[str]=None, vulgar: str=None, word: str=None):
        """WordObject - a model defined in OpenAPI

        :param canonical_form: The canonical_form of this WordObject.
        :param id: The id of this WordObject.
        :param original_word: The original_word of this WordObject.
        :param suggestions: The suggestions of this WordObject.
        :param vulgar: The vulgar of this WordObject.
        :param word: The word of this WordObject.
        """
        self.openapi_types = {
            'canonical_form': str,
            'id': int,
            'original_word': str,
            'suggestions': List[str],
            'vulgar': str,
            'word': str
        }

        self.attribute_map = {
            'canonical_form': 'canonicalForm',
            'id': 'id',
            'original_word': 'originalWord',
            'suggestions': 'suggestions',
            'vulgar': 'vulgar',
            'word': 'word'
        }

        self._canonical_form = canonical_form
        self._id = id
        self._original_word = original_word
        self._suggestions = suggestions
        self._vulgar = vulgar
        self._word = word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WordObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WordObject of this WordObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonical_form(self):
        """Gets the canonical_form of this WordObject.


        :return: The canonical_form of this WordObject.
        :rtype: str
        """
        return self._canonical_form

    @canonical_form.setter
    def canonical_form(self, canonical_form):
        """Sets the canonical_form of this WordObject.


        :param canonical_form: The canonical_form of this WordObject.
        :type canonical_form: str
        """

        self._canonical_form = canonical_form

    @property
    def id(self):
        """Gets the id of this WordObject.


        :return: The id of this WordObject.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WordObject.


        :param id: The id of this WordObject.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def original_word(self):
        """Gets the original_word of this WordObject.


        :return: The original_word of this WordObject.
        :rtype: str
        """
        return self._original_word

    @original_word.setter
    def original_word(self, original_word):
        """Sets the original_word of this WordObject.


        :param original_word: The original_word of this WordObject.
        :type original_word: str
        """

        self._original_word = original_word

    @property
    def suggestions(self):
        """Gets the suggestions of this WordObject.


        :return: The suggestions of this WordObject.
        :rtype: List[str]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this WordObject.


        :param suggestions: The suggestions of this WordObject.
        :type suggestions: List[str]
        """

        self._suggestions = suggestions

    @property
    def vulgar(self):
        """Gets the vulgar of this WordObject.


        :return: The vulgar of this WordObject.
        :rtype: str
        """
        return self._vulgar

    @vulgar.setter
    def vulgar(self, vulgar):
        """Sets the vulgar of this WordObject.


        :param vulgar: The vulgar of this WordObject.
        :type vulgar: str
        """

        self._vulgar = vulgar

    @property
    def word(self):
        """Gets the word of this WordObject.


        :return: The word of this WordObject.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this WordObject.


        :param word: The word of this WordObject.
        :type word: str
        """

        self._word = word
