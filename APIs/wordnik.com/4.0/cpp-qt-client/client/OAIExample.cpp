/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExample.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExample::OAIExample(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExample::OAIExample() {
    this->initializeModel();
}

OAIExample::~OAIExample() {}

void OAIExample::initializeModel() {

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_example_id_isSet = false;
    m_example_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_sentence_isSet = false;
    m_sentence_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIExample::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExample::fromJsonObject(QJsonObject json) {

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_example_id_isValid = ::OpenAPI::fromJsonValue(m_example_id, json[QString("exampleId")]);
    m_example_id_isSet = !json[QString("exampleId")].isNull() && m_example_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_sentence_isValid = ::OpenAPI::fromJsonValue(m_sentence, json[QString("sentence")]);
    m_sentence_isSet = !json[QString("sentence")].isNull() && m_sentence_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIExample::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExample::asJsonObject() const {
    QJsonObject obj;
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_example_id_isSet) {
        obj.insert(QString("exampleId"), ::OpenAPI::toJsonValue(m_example_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_score.isSet()) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_sentence.isSet()) {
        obj.insert(QString("sentence"), ::OpenAPI::toJsonValue(m_sentence));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint64 OAIExample::getDocumentId() const {
    return m_document_id;
}
void OAIExample::setDocumentId(const qint64 &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIExample::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIExample::is_document_id_Valid() const{
    return m_document_id_isValid;
}

qint64 OAIExample::getExampleId() const {
    return m_example_id;
}
void OAIExample::setExampleId(const qint64 &example_id) {
    m_example_id = example_id;
    m_example_id_isSet = true;
}

bool OAIExample::is_example_id_Set() const{
    return m_example_id_isSet;
}

bool OAIExample::is_example_id_Valid() const{
    return m_example_id_isValid;
}

qint64 OAIExample::getId() const {
    return m_id;
}
void OAIExample::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExample::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExample::is_id_Valid() const{
    return m_id_isValid;
}

OAIContentProvider OAIExample::getProvider() const {
    return m_provider;
}
void OAIExample::setProvider(const OAIContentProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIExample::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIExample::is_provider_Valid() const{
    return m_provider_isValid;
}

float OAIExample::getRating() const {
    return m_rating;
}
void OAIExample::setRating(const float &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIExample::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIExample::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIScoredWord OAIExample::getScore() const {
    return m_score;
}
void OAIExample::setScore(const OAIScoredWord &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIExample::is_score_Set() const{
    return m_score_isSet;
}

bool OAIExample::is_score_Valid() const{
    return m_score_isValid;
}

OAISentence OAIExample::getSentence() const {
    return m_sentence;
}
void OAIExample::setSentence(const OAISentence &sentence) {
    m_sentence = sentence;
    m_sentence_isSet = true;
}

bool OAIExample::is_sentence_Set() const{
    return m_sentence_isSet;
}

bool OAIExample::is_sentence_Valid() const{
    return m_sentence_isValid;
}

QString OAIExample::getText() const {
    return m_text;
}
void OAIExample::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIExample::is_text_Set() const{
    return m_text_isSet;
}

bool OAIExample::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIExample::getTitle() const {
    return m_title;
}
void OAIExample::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIExample::is_title_Set() const{
    return m_title_isSet;
}

bool OAIExample::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIExample::getUrl() const {
    return m_url;
}
void OAIExample::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIExample::is_url_Set() const{
    return m_url_isSet;
}

bool OAIExample::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIExample::getWord() const {
    return m_word;
}
void OAIExample::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIExample::is_word_Set() const{
    return m_word_isSet;
}

bool OAIExample::is_word_Valid() const{
    return m_word_isValid;
}

qint32 OAIExample::getYear() const {
    return m_year;
}
void OAIExample::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIExample::is_year_Set() const{
    return m_year_isSet;
}

bool OAIExample::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIExample::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExample::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
