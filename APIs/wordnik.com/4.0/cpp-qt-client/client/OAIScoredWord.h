/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScoredWord.h
 *
 * 
 */

#ifndef OAIScoredWord_H
#define OAIScoredWord_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScoredWord : public OAIObject {
public:
    OAIScoredWord();
    OAIScoredWord(QString json);
    ~OAIScoredWord() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBaseWordScore() const;
    void setBaseWordScore(const double &base_word_score);
    bool is_base_word_score_Set() const;
    bool is_base_word_score_Valid() const;

    qint32 getDocTermCount() const;
    void setDocTermCount(const qint32 &doc_term_count);
    bool is_doc_term_count_Set() const;
    bool is_doc_term_count_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLemma() const;
    void setLemma(const QString &lemma);
    bool is_lemma_Set() const;
    bool is_lemma_Valid() const;

    QString getPartOfSpeech() const;
    void setPartOfSpeech(const QString &part_of_speech);
    bool is_part_of_speech_Set() const;
    bool is_part_of_speech_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    float getScore() const;
    void setScore(const float &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    qint64 getSentenceId() const;
    void setSentenceId(const qint64 &sentence_id);
    bool is_sentence_id_Set() const;
    bool is_sentence_id_Valid() const;

    bool isStopword() const;
    void setStopword(const bool &stopword);
    bool is_stopword_Set() const;
    bool is_stopword_Valid() const;

    QString getWord() const;
    void setWord(const QString &word);
    bool is_word_Set() const;
    bool is_word_Valid() const;

    QString getWordType() const;
    void setWordType(const QString &word_type);
    bool is_word_type_Set() const;
    bool is_word_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_base_word_score;
    bool m_base_word_score_isSet;
    bool m_base_word_score_isValid;

    qint32 m_doc_term_count;
    bool m_doc_term_count_isSet;
    bool m_doc_term_count_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_lemma;
    bool m_lemma_isSet;
    bool m_lemma_isValid;

    QString m_part_of_speech;
    bool m_part_of_speech_isSet;
    bool m_part_of_speech_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    float m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    qint64 m_sentence_id;
    bool m_sentence_id_isSet;
    bool m_sentence_id_isValid;

    bool m_stopword;
    bool m_stopword_isSet;
    bool m_stopword_isValid;

    QString m_word;
    bool m_word_isSet;
    bool m_word_isValid;

    QString m_word_type;
    bool m_word_type_isSet;
    bool m_word_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScoredWord)

#endif // OAIScoredWord_H
