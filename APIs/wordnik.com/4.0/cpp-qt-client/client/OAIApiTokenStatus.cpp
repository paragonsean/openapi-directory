/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiTokenStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiTokenStatus::OAIApiTokenStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiTokenStatus::OAIApiTokenStatus() {
    this->initializeModel();
}

OAIApiTokenStatus::~OAIApiTokenStatus() {}

void OAIApiTokenStatus::initializeModel() {

    m_expires_in_millis_isSet = false;
    m_expires_in_millis_isValid = false;

    m_remaining_calls_isSet = false;
    m_remaining_calls_isValid = false;

    m_resets_in_millis_isSet = false;
    m_resets_in_millis_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_total_requests_isSet = false;
    m_total_requests_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIApiTokenStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiTokenStatus::fromJsonObject(QJsonObject json) {

    m_expires_in_millis_isValid = ::OpenAPI::fromJsonValue(m_expires_in_millis, json[QString("expiresInMillis")]);
    m_expires_in_millis_isSet = !json[QString("expiresInMillis")].isNull() && m_expires_in_millis_isValid;

    m_remaining_calls_isValid = ::OpenAPI::fromJsonValue(m_remaining_calls, json[QString("remainingCalls")]);
    m_remaining_calls_isSet = !json[QString("remainingCalls")].isNull() && m_remaining_calls_isValid;

    m_resets_in_millis_isValid = ::OpenAPI::fromJsonValue(m_resets_in_millis, json[QString("resetsInMillis")]);
    m_resets_in_millis_isSet = !json[QString("resetsInMillis")].isNull() && m_resets_in_millis_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_total_requests_isValid = ::OpenAPI::fromJsonValue(m_total_requests, json[QString("totalRequests")]);
    m_total_requests_isSet = !json[QString("totalRequests")].isNull() && m_total_requests_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIApiTokenStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiTokenStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_in_millis_isSet) {
        obj.insert(QString("expiresInMillis"), ::OpenAPI::toJsonValue(m_expires_in_millis));
    }
    if (m_remaining_calls_isSet) {
        obj.insert(QString("remainingCalls"), ::OpenAPI::toJsonValue(m_remaining_calls));
    }
    if (m_resets_in_millis_isSet) {
        obj.insert(QString("resetsInMillis"), ::OpenAPI::toJsonValue(m_resets_in_millis));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_total_requests_isSet) {
        obj.insert(QString("totalRequests"), ::OpenAPI::toJsonValue(m_total_requests));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

qint64 OAIApiTokenStatus::getExpiresInMillis() const {
    return m_expires_in_millis;
}
void OAIApiTokenStatus::setExpiresInMillis(const qint64 &expires_in_millis) {
    m_expires_in_millis = expires_in_millis;
    m_expires_in_millis_isSet = true;
}

bool OAIApiTokenStatus::is_expires_in_millis_Set() const{
    return m_expires_in_millis_isSet;
}

bool OAIApiTokenStatus::is_expires_in_millis_Valid() const{
    return m_expires_in_millis_isValid;
}

qint64 OAIApiTokenStatus::getRemainingCalls() const {
    return m_remaining_calls;
}
void OAIApiTokenStatus::setRemainingCalls(const qint64 &remaining_calls) {
    m_remaining_calls = remaining_calls;
    m_remaining_calls_isSet = true;
}

bool OAIApiTokenStatus::is_remaining_calls_Set() const{
    return m_remaining_calls_isSet;
}

bool OAIApiTokenStatus::is_remaining_calls_Valid() const{
    return m_remaining_calls_isValid;
}

qint64 OAIApiTokenStatus::getResetsInMillis() const {
    return m_resets_in_millis;
}
void OAIApiTokenStatus::setResetsInMillis(const qint64 &resets_in_millis) {
    m_resets_in_millis = resets_in_millis;
    m_resets_in_millis_isSet = true;
}

bool OAIApiTokenStatus::is_resets_in_millis_Set() const{
    return m_resets_in_millis_isSet;
}

bool OAIApiTokenStatus::is_resets_in_millis_Valid() const{
    return m_resets_in_millis_isValid;
}

QString OAIApiTokenStatus::getToken() const {
    return m_token;
}
void OAIApiTokenStatus::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIApiTokenStatus::is_token_Set() const{
    return m_token_isSet;
}

bool OAIApiTokenStatus::is_token_Valid() const{
    return m_token_isValid;
}

qint64 OAIApiTokenStatus::getTotalRequests() const {
    return m_total_requests;
}
void OAIApiTokenStatus::setTotalRequests(const qint64 &total_requests) {
    m_total_requests = total_requests;
    m_total_requests_isSet = true;
}

bool OAIApiTokenStatus::is_total_requests_Set() const{
    return m_total_requests_isSet;
}

bool OAIApiTokenStatus::is_total_requests_Valid() const{
    return m_total_requests_isValid;
}

bool OAIApiTokenStatus::isRValid() const {
    return m_r_valid;
}
void OAIApiTokenStatus::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIApiTokenStatus::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIApiTokenStatus::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIApiTokenStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resets_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiTokenStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
