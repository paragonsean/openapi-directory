/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWordApi_H
#define OAI_OAIWordApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAudioFile.h"
#include "OAIBigram.h"
#include "OAIDefinition.h"
#include "OAIExample.h"
#include "OAIExampleSearchResults.h"
#include "OAIFrequencySummary.h"
#include "OAIRelated.h"
#include "OAISyllable.h"
#include "OAITextPron.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWordApi : public QObject {
    Q_OBJECT

public:
    OAIWordApi(const int timeOut = 0);
    ~OAIWordApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  word QString [required]
    * @param[in]  use_canonical QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getAudio(const QString &word, const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  part_of_speech QString [optional]
    * @param[in]  include_related QString [optional]
    * @param[in]  source_dictionaries QList<QString> [optional]
    * @param[in]  use_canonical QString [optional]
    * @param[in]  include_tags QString [optional]
    */
    virtual void getDefinitions(const QString &word, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_related = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_dictionaries = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_tags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  use_canonical QString [optional]
    */
    virtual void getEtymologies(const QString &word, const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  include_duplicates QString [optional]
    * @param[in]  use_canonical QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getExamples(const QString &word, const ::OpenAPI::OptionalParam<QString> &include_duplicates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  use_canonical QString [optional]
    * @param[in]  source_dictionary QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getHyphenation(const QString &word, const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_dictionary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  wlmi qint32 [optional]
    * @param[in]  use_canonical QString [optional]
    */
    virtual void getPhrases(const QString &word, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &wlmi = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  use_canonical QString [optional]
    * @param[in]  relationship_types QString [optional]
    * @param[in]  limit_per_relationship_type qint32 [optional]
    */
    virtual void getRelatedWords(const QString &word, const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &relationship_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit_per_relationship_type = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  word QString [required]
    */
    virtual void getScrabbleScore(const QString &word);

    /**
    * @param[in]  word QString [required]
    * @param[in]  use_canonical QString [optional]
    * @param[in]  source_dictionary QString [optional]
    * @param[in]  type_format QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getTextPronunciations(const QString &word, const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_dictionary = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  use_canonical QString [optional]
    */
    virtual void getTopExample(const QString &word, const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  use_canonical QString [optional]
    * @param[in]  start_year qint32 [optional]
    * @param[in]  end_year qint32 [optional]
    */
    virtual void getWordFrequency(const QString &word, const ::OpenAPI::OptionalParam<QString> &use_canonical = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &end_year = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAudioCallback(OAIHttpRequestWorker *worker);
    void getDefinitionsCallback(OAIHttpRequestWorker *worker);
    void getEtymologiesCallback(OAIHttpRequestWorker *worker);
    void getExamplesCallback(OAIHttpRequestWorker *worker);
    void getHyphenationCallback(OAIHttpRequestWorker *worker);
    void getPhrasesCallback(OAIHttpRequestWorker *worker);
    void getRelatedWordsCallback(OAIHttpRequestWorker *worker);
    void getScrabbleScoreCallback(OAIHttpRequestWorker *worker);
    void getTextPronunciationsCallback(OAIHttpRequestWorker *worker);
    void getTopExampleCallback(OAIHttpRequestWorker *worker);
    void getWordFrequencyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAudioSignal(QList<OAIAudioFile> summary);
    void getDefinitionsSignal(QList<OAIDefinition> summary);
    void getEtymologiesSignal(QList<QString> summary);
    void getExamplesSignal(OAIExampleSearchResults summary);
    void getHyphenationSignal(QList<OAISyllable> summary);
    void getPhrasesSignal(QList<OAIBigram> summary);
    void getRelatedWordsSignal(QList<OAIRelated> summary);
    void getScrabbleScoreSignal(qint64 summary);
    void getTextPronunciationsSignal(QList<OAITextPron> summary);
    void getTopExampleSignal(OAIExample summary);
    void getWordFrequencySignal(OAIFrequencySummary summary);


    void getAudioSignalFull(OAIHttpRequestWorker *worker, QList<OAIAudioFile> summary);
    void getDefinitionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDefinition> summary);
    void getEtymologiesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getExamplesSignalFull(OAIHttpRequestWorker *worker, OAIExampleSearchResults summary);
    void getHyphenationSignalFull(OAIHttpRequestWorker *worker, QList<OAISyllable> summary);
    void getPhrasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBigram> summary);
    void getRelatedWordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRelated> summary);
    void getScrabbleScoreSignalFull(OAIHttpRequestWorker *worker, qint64 summary);
    void getTextPronunciationsSignalFull(OAIHttpRequestWorker *worker, QList<OAITextPron> summary);
    void getTopExampleSignalFull(OAIHttpRequestWorker *worker, OAIExample summary);
    void getWordFrequencySignalFull(OAIHttpRequestWorker *worker, OAIFrequencySummary summary);

    Q_DECL_DEPRECATED_X("Use getAudioSignalError() instead")
    void getAudioSignalE(QList<OAIAudioFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAudioSignalError(QList<OAIAudioFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefinitionsSignalError() instead")
    void getDefinitionsSignalE(QList<OAIDefinition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefinitionsSignalError(QList<OAIDefinition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEtymologiesSignalError() instead")
    void getEtymologiesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEtymologiesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExamplesSignalError() instead")
    void getExamplesSignalE(OAIExampleSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExamplesSignalError(OAIExampleSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHyphenationSignalError() instead")
    void getHyphenationSignalE(QList<OAISyllable> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHyphenationSignalError(QList<OAISyllable> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhrasesSignalError() instead")
    void getPhrasesSignalE(QList<OAIBigram> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhrasesSignalError(QList<OAIBigram> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelatedWordsSignalError() instead")
    void getRelatedWordsSignalE(QList<OAIRelated> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelatedWordsSignalError(QList<OAIRelated> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrabbleScoreSignalError() instead")
    void getScrabbleScoreSignalE(qint64 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrabbleScoreSignalError(qint64 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextPronunciationsSignalError() instead")
    void getTextPronunciationsSignalE(QList<OAITextPron> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextPronunciationsSignalError(QList<OAITextPron> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopExampleSignalError() instead")
    void getTopExampleSignalE(OAIExample summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopExampleSignalError(OAIExample summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWordFrequencySignalError() instead")
    void getWordFrequencySignalE(OAIFrequencySummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWordFrequencySignalError(OAIFrequencySummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAudioSignalErrorFull() instead")
    void getAudioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAudioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefinitionsSignalErrorFull() instead")
    void getDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEtymologiesSignalErrorFull() instead")
    void getEtymologiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEtymologiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExamplesSignalErrorFull() instead")
    void getExamplesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExamplesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHyphenationSignalErrorFull() instead")
    void getHyphenationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHyphenationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhrasesSignalErrorFull() instead")
    void getPhrasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhrasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRelatedWordsSignalErrorFull() instead")
    void getRelatedWordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRelatedWordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScrabbleScoreSignalErrorFull() instead")
    void getScrabbleScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScrabbleScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextPronunciationsSignalErrorFull() instead")
    void getTextPronunciationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextPronunciationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopExampleSignalErrorFull() instead")
    void getTopExampleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopExampleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWordFrequencySignalErrorFull() instead")
    void getWordFrequencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWordFrequencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
