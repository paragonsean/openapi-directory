/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWordsApi_H
#define OAI_OAIWordsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefinitionSearchResults.h"
#include "OAIWordObject.h"
#include "OAIWordOfTheDay.h"
#include "OAIWordSearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWordsApi : public QObject {
    Q_OBJECT

public:
    OAIWordsApi(const int timeOut = 0);
    ~OAIWordsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  has_dictionary_def QString [optional]
    * @param[in]  include_part_of_speech QString [optional]
    * @param[in]  exclude_part_of_speech QString [optional]
    * @param[in]  min_corpus_count qint32 [optional]
    * @param[in]  max_corpus_count qint32 [optional]
    * @param[in]  min_dictionary_count qint32 [optional]
    * @param[in]  max_dictionary_count qint32 [optional]
    * @param[in]  min_length qint32 [optional]
    * @param[in]  max_length qint32 [optional]
    */
    virtual void getRandomWord(const ::OpenAPI::OptionalParam<QString> &has_dictionary_def = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_dictionary_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_dictionary_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  has_dictionary_def QString [optional]
    * @param[in]  include_part_of_speech QString [optional]
    * @param[in]  exclude_part_of_speech QString [optional]
    * @param[in]  min_corpus_count qint32 [optional]
    * @param[in]  max_corpus_count qint32 [optional]
    * @param[in]  min_dictionary_count qint32 [optional]
    * @param[in]  max_dictionary_count qint32 [optional]
    * @param[in]  min_length qint32 [optional]
    * @param[in]  max_length qint32 [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getRandomWords(const ::OpenAPI::OptionalParam<QString> &has_dictionary_def = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_dictionary_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_dictionary_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  date QString [optional]
    */
    virtual void getWordOfTheDay(const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  find_sense_for_word QString [optional]
    * @param[in]  include_source_dictionaries QString [optional]
    * @param[in]  exclude_source_dictionaries QString [optional]
    * @param[in]  include_part_of_speech QString [optional]
    * @param[in]  exclude_part_of_speech QString [optional]
    * @param[in]  min_corpus_count qint32 [optional]
    * @param[in]  max_corpus_count qint32 [optional]
    * @param[in]  min_length qint32 [optional]
    * @param[in]  max_length qint32 [optional]
    * @param[in]  expand_terms QString [optional]
    * @param[in]  include_tags QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  skip QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void reverseDictionary(const QString &query, const ::OpenAPI::OptionalParam<QString> &find_sense_for_word = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_source_dictionaries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_source_dictionaries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &expand_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  allow_regex QString [optional]
    * @param[in]  case_sensitive QString [optional]
    * @param[in]  include_part_of_speech QString [optional]
    * @param[in]  exclude_part_of_speech QString [optional]
    * @param[in]  min_corpus_count qint32 [optional]
    * @param[in]  max_corpus_count qint32 [optional]
    * @param[in]  min_dictionary_count qint32 [optional]
    * @param[in]  max_dictionary_count qint32 [optional]
    * @param[in]  min_length qint32 [optional]
    * @param[in]  max_length qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void searchWords(const QString &query, const ::OpenAPI::OptionalParam<QString> &allow_regex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &case_sensitive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_part_of_speech = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_corpus_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_dictionary_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_dictionary_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getRandomWordCallback(OAIHttpRequestWorker *worker);
    void getRandomWordsCallback(OAIHttpRequestWorker *worker);
    void getWordOfTheDayCallback(OAIHttpRequestWorker *worker);
    void reverseDictionaryCallback(OAIHttpRequestWorker *worker);
    void searchWordsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getRandomWordSignal(OAIWordObject summary);
    void getRandomWordsSignal(QList<OAIWordObject> summary);
    void getWordOfTheDaySignal(OAIWordOfTheDay summary);
    void reverseDictionarySignal(OAIDefinitionSearchResults summary);
    void searchWordsSignal(OAIWordSearchResults summary);


    void getRandomWordSignalFull(OAIHttpRequestWorker *worker, OAIWordObject summary);
    void getRandomWordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIWordObject> summary);
    void getWordOfTheDaySignalFull(OAIHttpRequestWorker *worker, OAIWordOfTheDay summary);
    void reverseDictionarySignalFull(OAIHttpRequestWorker *worker, OAIDefinitionSearchResults summary);
    void searchWordsSignalFull(OAIHttpRequestWorker *worker, OAIWordSearchResults summary);

    Q_DECL_DEPRECATED_X("Use getRandomWordSignalError() instead")
    void getRandomWordSignalE(OAIWordObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRandomWordSignalError(OAIWordObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRandomWordsSignalError() instead")
    void getRandomWordsSignalE(QList<OAIWordObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRandomWordsSignalError(QList<OAIWordObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWordOfTheDaySignalError() instead")
    void getWordOfTheDaySignalE(OAIWordOfTheDay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWordOfTheDaySignalError(OAIWordOfTheDay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reverseDictionarySignalError() instead")
    void reverseDictionarySignalE(OAIDefinitionSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reverseDictionarySignalError(OAIDefinitionSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWordsSignalError() instead")
    void searchWordsSignalE(OAIWordSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWordsSignalError(OAIWordSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getRandomWordSignalErrorFull() instead")
    void getRandomWordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRandomWordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRandomWordsSignalErrorFull() instead")
    void getRandomWordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRandomWordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWordOfTheDaySignalErrorFull() instead")
    void getWordOfTheDaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWordOfTheDaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reverseDictionarySignalErrorFull() instead")
    void reverseDictionarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reverseDictionarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWordsSignalErrorFull() instead")
    void searchWordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
