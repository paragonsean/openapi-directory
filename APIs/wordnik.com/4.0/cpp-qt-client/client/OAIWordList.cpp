/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordList::OAIWordList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordList::OAIWordList() {
    this->initializeModel();
}

OAIWordList::~OAIWordList() {}

void OAIWordList::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_activity_at_isSet = false;
    m_last_activity_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_words_in_list_isSet = false;
    m_number_words_in_list_isValid = false;

    m_permalink_isSet = false;
    m_permalink_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIWordList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordList::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_activity_at_isValid = ::OpenAPI::fromJsonValue(m_last_activity_at, json[QString("lastActivityAt")]);
    m_last_activity_at_isSet = !json[QString("lastActivityAt")].isNull() && m_last_activity_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_words_in_list_isValid = ::OpenAPI::fromJsonValue(m_number_words_in_list, json[QString("numberWordsInList")]);
    m_number_words_in_list_isSet = !json[QString("numberWordsInList")].isNull() && m_number_words_in_list_isValid;

    m_permalink_isValid = ::OpenAPI::fromJsonValue(m_permalink, json[QString("permalink")]);
    m_permalink_isSet = !json[QString("permalink")].isNull() && m_permalink_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIWordList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordList::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_activity_at_isSet) {
        obj.insert(QString("lastActivityAt"), ::OpenAPI::toJsonValue(m_last_activity_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_words_in_list_isSet) {
        obj.insert(QString("numberWordsInList"), ::OpenAPI::toJsonValue(m_number_words_in_list));
    }
    if (m_permalink_isSet) {
        obj.insert(QString("permalink"), ::OpenAPI::toJsonValue(m_permalink));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QDate OAIWordList::getCreatedAt() const {
    return m_created_at;
}
void OAIWordList::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWordList::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWordList::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIWordList::getDescription() const {
    return m_description;
}
void OAIWordList::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWordList::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWordList::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIWordList::getId() const {
    return m_id;
}
void OAIWordList::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWordList::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWordList::is_id_Valid() const{
    return m_id_isValid;
}

QDate OAIWordList::getLastActivityAt() const {
    return m_last_activity_at;
}
void OAIWordList::setLastActivityAt(const QDate &last_activity_at) {
    m_last_activity_at = last_activity_at;
    m_last_activity_at_isSet = true;
}

bool OAIWordList::is_last_activity_at_Set() const{
    return m_last_activity_at_isSet;
}

bool OAIWordList::is_last_activity_at_Valid() const{
    return m_last_activity_at_isValid;
}

QString OAIWordList::getName() const {
    return m_name;
}
void OAIWordList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWordList::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWordList::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIWordList::getNumberWordsInList() const {
    return m_number_words_in_list;
}
void OAIWordList::setNumberWordsInList(const qint64 &number_words_in_list) {
    m_number_words_in_list = number_words_in_list;
    m_number_words_in_list_isSet = true;
}

bool OAIWordList::is_number_words_in_list_Set() const{
    return m_number_words_in_list_isSet;
}

bool OAIWordList::is_number_words_in_list_Valid() const{
    return m_number_words_in_list_isValid;
}

QString OAIWordList::getPermalink() const {
    return m_permalink;
}
void OAIWordList::setPermalink(const QString &permalink) {
    m_permalink = permalink;
    m_permalink_isSet = true;
}

bool OAIWordList::is_permalink_Set() const{
    return m_permalink_isSet;
}

bool OAIWordList::is_permalink_Valid() const{
    return m_permalink_isValid;
}

QString OAIWordList::getType() const {
    return m_type;
}
void OAIWordList::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWordList::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWordList::is_type_Valid() const{
    return m_type_isValid;
}

QDate OAIWordList::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWordList::setUpdatedAt(const QDate &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWordList::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWordList::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint64 OAIWordList::getUserId() const {
    return m_user_id;
}
void OAIWordList::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIWordList::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIWordList::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIWordList::getUsername() const {
    return m_username;
}
void OAIWordList::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWordList::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWordList::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIWordList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_words_in_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permalink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
