/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefinition::OAIDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefinition::OAIDefinition() {
    this->initializeModel();
}

OAIDefinition::~OAIDefinition() {}

void OAIDefinition::initializeModel() {

    m_attribution_text_isSet = false;
    m_attribution_text_isValid = false;

    m_attribution_url_isSet = false;
    m_attribution_url_isValid = false;

    m_citations_isSet = false;
    m_citations_isValid = false;

    m_example_uses_isSet = false;
    m_example_uses_isValid = false;

    m_extended_text_isSet = false;
    m_extended_text_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_part_of_speech_isSet = false;
    m_part_of_speech_isValid = false;

    m_related_words_isSet = false;
    m_related_words_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_seq_string_isSet = false;
    m_seq_string_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_source_dictionary_isSet = false;
    m_source_dictionary_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_prons_isSet = false;
    m_text_prons_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefinition::fromJsonObject(QJsonObject json) {

    m_attribution_text_isValid = ::OpenAPI::fromJsonValue(m_attribution_text, json[QString("attributionText")]);
    m_attribution_text_isSet = !json[QString("attributionText")].isNull() && m_attribution_text_isValid;

    m_attribution_url_isValid = ::OpenAPI::fromJsonValue(m_attribution_url, json[QString("attributionUrl")]);
    m_attribution_url_isSet = !json[QString("attributionUrl")].isNull() && m_attribution_url_isValid;

    m_citations_isValid = ::OpenAPI::fromJsonValue(m_citations, json[QString("citations")]);
    m_citations_isSet = !json[QString("citations")].isNull() && m_citations_isValid;

    m_example_uses_isValid = ::OpenAPI::fromJsonValue(m_example_uses, json[QString("exampleUses")]);
    m_example_uses_isSet = !json[QString("exampleUses")].isNull() && m_example_uses_isValid;

    m_extended_text_isValid = ::OpenAPI::fromJsonValue(m_extended_text, json[QString("extendedText")]);
    m_extended_text_isSet = !json[QString("extendedText")].isNull() && m_extended_text_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_part_of_speech_isValid = ::OpenAPI::fromJsonValue(m_part_of_speech, json[QString("partOfSpeech")]);
    m_part_of_speech_isSet = !json[QString("partOfSpeech")].isNull() && m_part_of_speech_isValid;

    m_related_words_isValid = ::OpenAPI::fromJsonValue(m_related_words, json[QString("relatedWords")]);
    m_related_words_isSet = !json[QString("relatedWords")].isNull() && m_related_words_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_seq_string_isValid = ::OpenAPI::fromJsonValue(m_seq_string, json[QString("seqString")]);
    m_seq_string_isSet = !json[QString("seqString")].isNull() && m_seq_string_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_source_dictionary_isValid = ::OpenAPI::fromJsonValue(m_source_dictionary, json[QString("sourceDictionary")]);
    m_source_dictionary_isSet = !json[QString("sourceDictionary")].isNull() && m_source_dictionary_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_text_prons_isValid = ::OpenAPI::fromJsonValue(m_text_prons, json[QString("textProns")]);
    m_text_prons_isSet = !json[QString("textProns")].isNull() && m_text_prons_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_text_isSet) {
        obj.insert(QString("attributionText"), ::OpenAPI::toJsonValue(m_attribution_text));
    }
    if (m_attribution_url_isSet) {
        obj.insert(QString("attributionUrl"), ::OpenAPI::toJsonValue(m_attribution_url));
    }
    if (m_citations.size() > 0) {
        obj.insert(QString("citations"), ::OpenAPI::toJsonValue(m_citations));
    }
    if (m_example_uses.size() > 0) {
        obj.insert(QString("exampleUses"), ::OpenAPI::toJsonValue(m_example_uses));
    }
    if (m_extended_text_isSet) {
        obj.insert(QString("extendedText"), ::OpenAPI::toJsonValue(m_extended_text));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_part_of_speech_isSet) {
        obj.insert(QString("partOfSpeech"), ::OpenAPI::toJsonValue(m_part_of_speech));
    }
    if (m_related_words.size() > 0) {
        obj.insert(QString("relatedWords"), ::OpenAPI::toJsonValue(m_related_words));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_seq_string_isSet) {
        obj.insert(QString("seqString"), ::OpenAPI::toJsonValue(m_seq_string));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_source_dictionary_isSet) {
        obj.insert(QString("sourceDictionary"), ::OpenAPI::toJsonValue(m_source_dictionary));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_prons.size() > 0) {
        obj.insert(QString("textProns"), ::OpenAPI::toJsonValue(m_text_prons));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

QString OAIDefinition::getAttributionText() const {
    return m_attribution_text;
}
void OAIDefinition::setAttributionText(const QString &attribution_text) {
    m_attribution_text = attribution_text;
    m_attribution_text_isSet = true;
}

bool OAIDefinition::is_attribution_text_Set() const{
    return m_attribution_text_isSet;
}

bool OAIDefinition::is_attribution_text_Valid() const{
    return m_attribution_text_isValid;
}

QString OAIDefinition::getAttributionUrl() const {
    return m_attribution_url;
}
void OAIDefinition::setAttributionUrl(const QString &attribution_url) {
    m_attribution_url = attribution_url;
    m_attribution_url_isSet = true;
}

bool OAIDefinition::is_attribution_url_Set() const{
    return m_attribution_url_isSet;
}

bool OAIDefinition::is_attribution_url_Valid() const{
    return m_attribution_url_isValid;
}

QList<QJsonValue> OAIDefinition::getCitations() const {
    return m_citations;
}
void OAIDefinition::setCitations(const QList<QJsonValue> &citations) {
    m_citations = citations;
    m_citations_isSet = true;
}

bool OAIDefinition::is_citations_Set() const{
    return m_citations_isSet;
}

bool OAIDefinition::is_citations_Valid() const{
    return m_citations_isValid;
}

QList<QJsonValue> OAIDefinition::getExampleUses() const {
    return m_example_uses;
}
void OAIDefinition::setExampleUses(const QList<QJsonValue> &example_uses) {
    m_example_uses = example_uses;
    m_example_uses_isSet = true;
}

bool OAIDefinition::is_example_uses_Set() const{
    return m_example_uses_isSet;
}

bool OAIDefinition::is_example_uses_Valid() const{
    return m_example_uses_isValid;
}

QString OAIDefinition::getExtendedText() const {
    return m_extended_text;
}
void OAIDefinition::setExtendedText(const QString &extended_text) {
    m_extended_text = extended_text;
    m_extended_text_isSet = true;
}

bool OAIDefinition::is_extended_text_Set() const{
    return m_extended_text_isSet;
}

bool OAIDefinition::is_extended_text_Valid() const{
    return m_extended_text_isValid;
}

QList<QJsonValue> OAIDefinition::getLabels() const {
    return m_labels;
}
void OAIDefinition::setLabels(const QList<QJsonValue> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDefinition::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDefinition::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QJsonValue> OAIDefinition::getNotes() const {
    return m_notes;
}
void OAIDefinition::setNotes(const QList<QJsonValue> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIDefinition::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIDefinition::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIDefinition::getPartOfSpeech() const {
    return m_part_of_speech;
}
void OAIDefinition::setPartOfSpeech(const QString &part_of_speech) {
    m_part_of_speech = part_of_speech;
    m_part_of_speech_isSet = true;
}

bool OAIDefinition::is_part_of_speech_Set() const{
    return m_part_of_speech_isSet;
}

bool OAIDefinition::is_part_of_speech_Valid() const{
    return m_part_of_speech_isValid;
}

QList<QJsonValue> OAIDefinition::getRelatedWords() const {
    return m_related_words;
}
void OAIDefinition::setRelatedWords(const QList<QJsonValue> &related_words) {
    m_related_words = related_words;
    m_related_words_isSet = true;
}

bool OAIDefinition::is_related_words_Set() const{
    return m_related_words_isSet;
}

bool OAIDefinition::is_related_words_Valid() const{
    return m_related_words_isValid;
}

float OAIDefinition::getScore() const {
    return m_score;
}
void OAIDefinition::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDefinition::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDefinition::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIDefinition::getSeqString() const {
    return m_seq_string;
}
void OAIDefinition::setSeqString(const QString &seq_string) {
    m_seq_string = seq_string;
    m_seq_string_isSet = true;
}

bool OAIDefinition::is_seq_string_Set() const{
    return m_seq_string_isSet;
}

bool OAIDefinition::is_seq_string_Valid() const{
    return m_seq_string_isValid;
}

QString OAIDefinition::getSequence() const {
    return m_sequence;
}
void OAIDefinition::setSequence(const QString &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIDefinition::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIDefinition::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIDefinition::getSourceDictionary() const {
    return m_source_dictionary;
}
void OAIDefinition::setSourceDictionary(const QString &source_dictionary) {
    m_source_dictionary = source_dictionary;
    m_source_dictionary_isSet = true;
}

bool OAIDefinition::is_source_dictionary_Set() const{
    return m_source_dictionary_isSet;
}

bool OAIDefinition::is_source_dictionary_Valid() const{
    return m_source_dictionary_isValid;
}

QString OAIDefinition::getText() const {
    return m_text;
}
void OAIDefinition::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDefinition::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDefinition::is_text_Valid() const{
    return m_text_isValid;
}

QList<QJsonValue> OAIDefinition::getTextProns() const {
    return m_text_prons;
}
void OAIDefinition::setTextProns(const QList<QJsonValue> &text_prons) {
    m_text_prons = text_prons;
    m_text_prons_isSet = true;
}

bool OAIDefinition::is_text_prons_Set() const{
    return m_text_prons_isSet;
}

bool OAIDefinition::is_text_prons_Valid() const{
    return m_text_prons_isValid;
}

QString OAIDefinition::getWord() const {
    return m_word;
}
void OAIDefinition::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIDefinition::is_word_Set() const{
    return m_word_isSet;
}

bool OAIDefinition::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_citations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_uses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_of_speech_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seq_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_dictionary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_prons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
