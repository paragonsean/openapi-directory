/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINote::OAINote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINote::OAINote() {
    this->initializeModel();
}

OAINote::~OAINote() {}

void OAINote::initializeModel() {

    m_applies_to_isSet = false;
    m_applies_to_isValid = false;

    m_note_type_isSet = false;
    m_note_type_isValid = false;

    m_pos_isSet = false;
    m_pos_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAINote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINote::fromJsonObject(QJsonObject json) {

    m_applies_to_isValid = ::OpenAPI::fromJsonValue(m_applies_to, json[QString("appliesTo")]);
    m_applies_to_isSet = !json[QString("appliesTo")].isNull() && m_applies_to_isValid;

    m_note_type_isValid = ::OpenAPI::fromJsonValue(m_note_type, json[QString("noteType")]);
    m_note_type_isSet = !json[QString("noteType")].isNull() && m_note_type_isValid;

    m_pos_isValid = ::OpenAPI::fromJsonValue(m_pos, json[QString("pos")]);
    m_pos_isSet = !json[QString("pos")].isNull() && m_pos_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAINote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINote::asJsonObject() const {
    QJsonObject obj;
    if (m_applies_to.size() > 0) {
        obj.insert(QString("appliesTo"), ::OpenAPI::toJsonValue(m_applies_to));
    }
    if (m_note_type_isSet) {
        obj.insert(QString("noteType"), ::OpenAPI::toJsonValue(m_note_type));
    }
    if (m_pos_isSet) {
        obj.insert(QString("pos"), ::OpenAPI::toJsonValue(m_pos));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<QString> OAINote::getAppliesTo() const {
    return m_applies_to;
}
void OAINote::setAppliesTo(const QList<QString> &applies_to) {
    m_applies_to = applies_to;
    m_applies_to_isSet = true;
}

bool OAINote::is_applies_to_Set() const{
    return m_applies_to_isSet;
}

bool OAINote::is_applies_to_Valid() const{
    return m_applies_to_isValid;
}

QString OAINote::getNoteType() const {
    return m_note_type;
}
void OAINote::setNoteType(const QString &note_type) {
    m_note_type = note_type;
    m_note_type_isSet = true;
}

bool OAINote::is_note_type_Set() const{
    return m_note_type_isSet;
}

bool OAINote::is_note_type_Valid() const{
    return m_note_type_isValid;
}

qint32 OAINote::getPos() const {
    return m_pos;
}
void OAINote::setPos(const qint32 &pos) {
    m_pos = pos;
    m_pos_isSet = true;
}

bool OAINote::is_pos_Set() const{
    return m_pos_isSet;
}

bool OAINote::is_pos_Valid() const{
    return m_pos_isValid;
}

QString OAINote::getValue() const {
    return m_value;
}
void OAINote::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAINote::is_value_Set() const{
    return m_value_isSet;
}

bool OAINote::is_value_Valid() const{
    return m_value_isValid;
}

bool OAINote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applies_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
