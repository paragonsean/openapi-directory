/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDefinition.h
 *
 * 
 */

#ifndef OAIDefinition_H
#define OAIDefinition_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDefinition : public OAIObject {
public:
    OAIDefinition();
    OAIDefinition(QString json);
    ~OAIDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttributionText() const;
    void setAttributionText(const QString &attribution_text);
    bool is_attribution_text_Set() const;
    bool is_attribution_text_Valid() const;

    QString getAttributionUrl() const;
    void setAttributionUrl(const QString &attribution_url);
    bool is_attribution_url_Set() const;
    bool is_attribution_url_Valid() const;

    QList<QJsonValue> getCitations() const;
    void setCitations(const QList<QJsonValue> &citations);
    bool is_citations_Set() const;
    bool is_citations_Valid() const;

    QList<QJsonValue> getExampleUses() const;
    void setExampleUses(const QList<QJsonValue> &example_uses);
    bool is_example_uses_Set() const;
    bool is_example_uses_Valid() const;

    QString getExtendedText() const;
    void setExtendedText(const QString &extended_text);
    bool is_extended_text_Set() const;
    bool is_extended_text_Valid() const;

    QList<QJsonValue> getLabels() const;
    void setLabels(const QList<QJsonValue> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList<QJsonValue> getNotes() const;
    void setNotes(const QList<QJsonValue> &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getPartOfSpeech() const;
    void setPartOfSpeech(const QString &part_of_speech);
    bool is_part_of_speech_Set() const;
    bool is_part_of_speech_Valid() const;

    QList<QJsonValue> getRelatedWords() const;
    void setRelatedWords(const QList<QJsonValue> &related_words);
    bool is_related_words_Set() const;
    bool is_related_words_Valid() const;

    float getScore() const;
    void setScore(const float &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getSeqString() const;
    void setSeqString(const QString &seq_string);
    bool is_seq_string_Set() const;
    bool is_seq_string_Valid() const;

    QString getSequence() const;
    void setSequence(const QString &sequence);
    bool is_sequence_Set() const;
    bool is_sequence_Valid() const;

    QString getSourceDictionary() const;
    void setSourceDictionary(const QString &source_dictionary);
    bool is_source_dictionary_Set() const;
    bool is_source_dictionary_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QList<QJsonValue> getTextProns() const;
    void setTextProns(const QList<QJsonValue> &text_prons);
    bool is_text_prons_Set() const;
    bool is_text_prons_Valid() const;

    QString getWord() const;
    void setWord(const QString &word);
    bool is_word_Set() const;
    bool is_word_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attribution_text;
    bool m_attribution_text_isSet;
    bool m_attribution_text_isValid;

    QString m_attribution_url;
    bool m_attribution_url_isSet;
    bool m_attribution_url_isValid;

    QList<QJsonValue> m_citations;
    bool m_citations_isSet;
    bool m_citations_isValid;

    QList<QJsonValue> m_example_uses;
    bool m_example_uses_isSet;
    bool m_example_uses_isValid;

    QString m_extended_text;
    bool m_extended_text_isSet;
    bool m_extended_text_isValid;

    QList<QJsonValue> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList<QJsonValue> m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_part_of_speech;
    bool m_part_of_speech_isSet;
    bool m_part_of_speech_isValid;

    QList<QJsonValue> m_related_words;
    bool m_related_words_isSet;
    bool m_related_words_isValid;

    float m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_seq_string;
    bool m_seq_string_isSet;
    bool m_seq_string_isValid;

    QString m_sequence;
    bool m_sequence_isSet;
    bool m_sequence_isValid;

    QString m_source_dictionary;
    bool m_source_dictionary_isSet;
    bool m_source_dictionary_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QList<QJsonValue> m_text_prons;
    bool m_text_prons_isSet;
    bool m_text_prons_isValid;

    QString m_word;
    bool m_word_isSet;
    bool m_word_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDefinition)

#endif // OAIDefinition_H
