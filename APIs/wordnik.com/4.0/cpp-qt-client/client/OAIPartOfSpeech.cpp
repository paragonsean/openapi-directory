/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartOfSpeech.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartOfSpeech::OAIPartOfSpeech(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartOfSpeech::OAIPartOfSpeech() {
    this->initializeModel();
}

OAIPartOfSpeech::~OAIPartOfSpeech() {}

void OAIPartOfSpeech::initializeModel() {

    m_all_categories_isSet = false;
    m_all_categories_isValid = false;

    m_roots_isSet = false;
    m_roots_isValid = false;

    m_storage_abbr_isSet = false;
    m_storage_abbr_isValid = false;
}

void OAIPartOfSpeech::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartOfSpeech::fromJsonObject(QJsonObject json) {

    m_all_categories_isValid = ::OpenAPI::fromJsonValue(m_all_categories, json[QString("allCategories")]);
    m_all_categories_isSet = !json[QString("allCategories")].isNull() && m_all_categories_isValid;

    m_roots_isValid = ::OpenAPI::fromJsonValue(m_roots, json[QString("roots")]);
    m_roots_isSet = !json[QString("roots")].isNull() && m_roots_isValid;

    m_storage_abbr_isValid = ::OpenAPI::fromJsonValue(m_storage_abbr, json[QString("storageAbbr")]);
    m_storage_abbr_isSet = !json[QString("storageAbbr")].isNull() && m_storage_abbr_isValid;
}

QString OAIPartOfSpeech::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartOfSpeech::asJsonObject() const {
    QJsonObject obj;
    if (m_all_categories.size() > 0) {
        obj.insert(QString("allCategories"), ::OpenAPI::toJsonValue(m_all_categories));
    }
    if (m_roots.size() > 0) {
        obj.insert(QString("roots"), ::OpenAPI::toJsonValue(m_roots));
    }
    if (m_storage_abbr.size() > 0) {
        obj.insert(QString("storageAbbr"), ::OpenAPI::toJsonValue(m_storage_abbr));
    }
    return obj;
}

QList<QJsonValue> OAIPartOfSpeech::getAllCategories() const {
    return m_all_categories;
}
void OAIPartOfSpeech::setAllCategories(const QList<QJsonValue> &all_categories) {
    m_all_categories = all_categories;
    m_all_categories_isSet = true;
}

bool OAIPartOfSpeech::is_all_categories_Set() const{
    return m_all_categories_isSet;
}

bool OAIPartOfSpeech::is_all_categories_Valid() const{
    return m_all_categories_isValid;
}

QList<QJsonValue> OAIPartOfSpeech::getRoots() const {
    return m_roots;
}
void OAIPartOfSpeech::setRoots(const QList<QJsonValue> &roots) {
    m_roots = roots;
    m_roots_isSet = true;
}

bool OAIPartOfSpeech::is_roots_Set() const{
    return m_roots_isSet;
}

bool OAIPartOfSpeech::is_roots_Valid() const{
    return m_roots_isValid;
}

QList<QString> OAIPartOfSpeech::getStorageAbbr() const {
    return m_storage_abbr;
}
void OAIPartOfSpeech::setStorageAbbr(const QList<QString> &storage_abbr) {
    m_storage_abbr = storage_abbr;
    m_storage_abbr_isSet = true;
}

bool OAIPartOfSpeech::is_storage_abbr_Set() const{
    return m_storage_abbr_isSet;
}

bool OAIPartOfSpeech::is_storage_abbr_Valid() const{
    return m_storage_abbr_isValid;
}

bool OAIPartOfSpeech::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_roots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_abbr.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartOfSpeech::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
