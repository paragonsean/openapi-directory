/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrequencySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrequencySummary::OAIFrequencySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrequencySummary::OAIFrequencySummary() {
    this->initializeModel();
}

OAIFrequencySummary::~OAIFrequencySummary() {}

void OAIFrequencySummary::initializeModel() {

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_frequency_string_isSet = false;
    m_frequency_string_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_unknown_year_count_isSet = false;
    m_unknown_year_count_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIFrequencySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrequencySummary::fromJsonObject(QJsonObject json) {

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_frequency_string_isValid = ::OpenAPI::fromJsonValue(m_frequency_string, json[QString("frequencyString")]);
    m_frequency_string_isSet = !json[QString("frequencyString")].isNull() && m_frequency_string_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;

    m_unknown_year_count_isValid = ::OpenAPI::fromJsonValue(m_unknown_year_count, json[QString("unknownYearCount")]);
    m_unknown_year_count_isSet = !json[QString("unknownYearCount")].isNull() && m_unknown_year_count_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIFrequencySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrequencySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency.size() > 0) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_frequency_string_isSet) {
        obj.insert(QString("frequencyString"), ::OpenAPI::toJsonValue(m_frequency_string));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_unknown_year_count_isSet) {
        obj.insert(QString("unknownYearCount"), ::OpenAPI::toJsonValue(m_unknown_year_count));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

QList<QJsonValue> OAIFrequencySummary::getFrequency() const {
    return m_frequency;
}
void OAIFrequencySummary::setFrequency(const QList<QJsonValue> &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIFrequencySummary::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIFrequencySummary::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIFrequencySummary::getFrequencyString() const {
    return m_frequency_string;
}
void OAIFrequencySummary::setFrequencyString(const QString &frequency_string) {
    m_frequency_string = frequency_string;
    m_frequency_string_isSet = true;
}

bool OAIFrequencySummary::is_frequency_string_Set() const{
    return m_frequency_string_isSet;
}

bool OAIFrequencySummary::is_frequency_string_Valid() const{
    return m_frequency_string_isValid;
}

qint64 OAIFrequencySummary::getTotalCount() const {
    return m_total_count;
}
void OAIFrequencySummary::setTotalCount(const qint64 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIFrequencySummary::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIFrequencySummary::is_total_count_Valid() const{
    return m_total_count_isValid;
}

qint32 OAIFrequencySummary::getUnknownYearCount() const {
    return m_unknown_year_count;
}
void OAIFrequencySummary::setUnknownYearCount(const qint32 &unknown_year_count) {
    m_unknown_year_count = unknown_year_count;
    m_unknown_year_count_isSet = true;
}

bool OAIFrequencySummary::is_unknown_year_count_Set() const{
    return m_unknown_year_count_isSet;
}

bool OAIFrequencySummary::is_unknown_year_count_Valid() const{
    return m_unknown_year_count_isValid;
}

QString OAIFrequencySummary::getWord() const {
    return m_word;
}
void OAIFrequencySummary::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIFrequencySummary::is_word_Set() const{
    return m_word_isSet;
}

bool OAIFrequencySummary::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIFrequencySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_year_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrequencySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
