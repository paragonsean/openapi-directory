/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioFile::OAIAudioFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioFile::OAIAudioFile() {
    this->initializeModel();
}

OAIAudioFile::~OAIAudioFile() {}

void OAIAudioFile::initializeModel() {

    m_attribution_text_isSet = false;
    m_attribution_text_isValid = false;

    m_attribution_url_isSet = false;
    m_attribution_url_isValid = false;

    m_audio_type_isSet = false;
    m_audio_type_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_file_url_isSet = false;
    m_file_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_vote_average_isSet = false;
    m_vote_average_isValid = false;

    m_vote_count_isSet = false;
    m_vote_count_isValid = false;

    m_vote_weighted_average_isSet = false;
    m_vote_weighted_average_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIAudioFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioFile::fromJsonObject(QJsonObject json) {

    m_attribution_text_isValid = ::OpenAPI::fromJsonValue(m_attribution_text, json[QString("attributionText")]);
    m_attribution_text_isSet = !json[QString("attributionText")].isNull() && m_attribution_text_isValid;

    m_attribution_url_isValid = ::OpenAPI::fromJsonValue(m_attribution_url, json[QString("attributionUrl")]);
    m_attribution_url_isSet = !json[QString("attributionUrl")].isNull() && m_attribution_url_isValid;

    m_audio_type_isValid = ::OpenAPI::fromJsonValue(m_audio_type, json[QString("audioType")]);
    m_audio_type_isSet = !json[QString("audioType")].isNull() && m_audio_type_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_file_url_isValid = ::OpenAPI::fromJsonValue(m_file_url, json[QString("fileUrl")]);
    m_file_url_isSet = !json[QString("fileUrl")].isNull() && m_file_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_vote_average_isValid = ::OpenAPI::fromJsonValue(m_vote_average, json[QString("voteAverage")]);
    m_vote_average_isSet = !json[QString("voteAverage")].isNull() && m_vote_average_isValid;

    m_vote_count_isValid = ::OpenAPI::fromJsonValue(m_vote_count, json[QString("voteCount")]);
    m_vote_count_isSet = !json[QString("voteCount")].isNull() && m_vote_count_isValid;

    m_vote_weighted_average_isValid = ::OpenAPI::fromJsonValue(m_vote_weighted_average, json[QString("voteWeightedAverage")]);
    m_vote_weighted_average_isSet = !json[QString("voteWeightedAverage")].isNull() && m_vote_weighted_average_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIAudioFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioFile::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_text_isSet) {
        obj.insert(QString("attributionText"), ::OpenAPI::toJsonValue(m_attribution_text));
    }
    if (m_attribution_url_isSet) {
        obj.insert(QString("attributionUrl"), ::OpenAPI::toJsonValue(m_attribution_url));
    }
    if (m_audio_type_isSet) {
        obj.insert(QString("audioType"), ::OpenAPI::toJsonValue(m_audio_type));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_file_url_isSet) {
        obj.insert(QString("fileUrl"), ::OpenAPI::toJsonValue(m_file_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_vote_average_isSet) {
        obj.insert(QString("voteAverage"), ::OpenAPI::toJsonValue(m_vote_average));
    }
    if (m_vote_count_isSet) {
        obj.insert(QString("voteCount"), ::OpenAPI::toJsonValue(m_vote_count));
    }
    if (m_vote_weighted_average_isSet) {
        obj.insert(QString("voteWeightedAverage"), ::OpenAPI::toJsonValue(m_vote_weighted_average));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

QString OAIAudioFile::getAttributionText() const {
    return m_attribution_text;
}
void OAIAudioFile::setAttributionText(const QString &attribution_text) {
    m_attribution_text = attribution_text;
    m_attribution_text_isSet = true;
}

bool OAIAudioFile::is_attribution_text_Set() const{
    return m_attribution_text_isSet;
}

bool OAIAudioFile::is_attribution_text_Valid() const{
    return m_attribution_text_isValid;
}

QString OAIAudioFile::getAttributionUrl() const {
    return m_attribution_url;
}
void OAIAudioFile::setAttributionUrl(const QString &attribution_url) {
    m_attribution_url = attribution_url;
    m_attribution_url_isSet = true;
}

bool OAIAudioFile::is_attribution_url_Set() const{
    return m_attribution_url_isSet;
}

bool OAIAudioFile::is_attribution_url_Valid() const{
    return m_attribution_url_isValid;
}

QString OAIAudioFile::getAudioType() const {
    return m_audio_type;
}
void OAIAudioFile::setAudioType(const QString &audio_type) {
    m_audio_type = audio_type;
    m_audio_type_isSet = true;
}

bool OAIAudioFile::is_audio_type_Set() const{
    return m_audio_type_isSet;
}

bool OAIAudioFile::is_audio_type_Valid() const{
    return m_audio_type_isValid;
}

qint32 OAIAudioFile::getCommentCount() const {
    return m_comment_count;
}
void OAIAudioFile::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIAudioFile::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIAudioFile::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

QDate OAIAudioFile::getCreatedAt() const {
    return m_created_at;
}
void OAIAudioFile::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAudioFile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAudioFile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAudioFile::getCreatedBy() const {
    return m_created_by;
}
void OAIAudioFile::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIAudioFile::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIAudioFile::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIAudioFile::getDescription() const {
    return m_description;
}
void OAIAudioFile::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAudioFile::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAudioFile::is_description_Valid() const{
    return m_description_isValid;
}

double OAIAudioFile::getDuration() const {
    return m_duration;
}
void OAIAudioFile::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAudioFile::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAudioFile::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIAudioFile::getFileUrl() const {
    return m_file_url;
}
void OAIAudioFile::setFileUrl(const QString &file_url) {
    m_file_url = file_url;
    m_file_url_isSet = true;
}

bool OAIAudioFile::is_file_url_Set() const{
    return m_file_url_isSet;
}

bool OAIAudioFile::is_file_url_Valid() const{
    return m_file_url_isValid;
}

qint64 OAIAudioFile::getId() const {
    return m_id;
}
void OAIAudioFile::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAudioFile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAudioFile::is_id_Valid() const{
    return m_id_isValid;
}

float OAIAudioFile::getVoteAverage() const {
    return m_vote_average;
}
void OAIAudioFile::setVoteAverage(const float &vote_average) {
    m_vote_average = vote_average;
    m_vote_average_isSet = true;
}

bool OAIAudioFile::is_vote_average_Set() const{
    return m_vote_average_isSet;
}

bool OAIAudioFile::is_vote_average_Valid() const{
    return m_vote_average_isValid;
}

qint32 OAIAudioFile::getVoteCount() const {
    return m_vote_count;
}
void OAIAudioFile::setVoteCount(const qint32 &vote_count) {
    m_vote_count = vote_count;
    m_vote_count_isSet = true;
}

bool OAIAudioFile::is_vote_count_Set() const{
    return m_vote_count_isSet;
}

bool OAIAudioFile::is_vote_count_Valid() const{
    return m_vote_count_isValid;
}

float OAIAudioFile::getVoteWeightedAverage() const {
    return m_vote_weighted_average;
}
void OAIAudioFile::setVoteWeightedAverage(const float &vote_weighted_average) {
    m_vote_weighted_average = vote_weighted_average;
    m_vote_weighted_average_isSet = true;
}

bool OAIAudioFile::is_vote_weighted_average_Set() const{
    return m_vote_weighted_average_isSet;
}

bool OAIAudioFile::is_vote_weighted_average_Valid() const{
    return m_vote_weighted_average_isValid;
}

QString OAIAudioFile::getWord() const {
    return m_word;
}
void OAIAudioFile::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIAudioFile::is_word_Set() const{
    return m_word_isSet;
}

bool OAIAudioFile::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIAudioFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote_weighted_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
