/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextPron.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextPron::OAITextPron(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextPron::OAITextPron() {
    this->initializeModel();
}

OAITextPron::~OAITextPron() {}

void OAITextPron::initializeModel() {

    m_raw_isSet = false;
    m_raw_isValid = false;

    m_raw_type_isSet = false;
    m_raw_type_isValid = false;

    m_seq_isSet = false;
    m_seq_isValid = false;
}

void OAITextPron::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextPron::fromJsonObject(QJsonObject json) {

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;

    m_raw_type_isValid = ::OpenAPI::fromJsonValue(m_raw_type, json[QString("rawType")]);
    m_raw_type_isSet = !json[QString("rawType")].isNull() && m_raw_type_isValid;

    m_seq_isValid = ::OpenAPI::fromJsonValue(m_seq, json[QString("seq")]);
    m_seq_isSet = !json[QString("seq")].isNull() && m_seq_isValid;
}

QString OAITextPron::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextPron::asJsonObject() const {
    QJsonObject obj;
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    if (m_raw_type_isSet) {
        obj.insert(QString("rawType"), ::OpenAPI::toJsonValue(m_raw_type));
    }
    if (m_seq_isSet) {
        obj.insert(QString("seq"), ::OpenAPI::toJsonValue(m_seq));
    }
    return obj;
}

QString OAITextPron::getRaw() const {
    return m_raw;
}
void OAITextPron::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAITextPron::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAITextPron::is_raw_Valid() const{
    return m_raw_isValid;
}

QString OAITextPron::getRawType() const {
    return m_raw_type;
}
void OAITextPron::setRawType(const QString &raw_type) {
    m_raw_type = raw_type;
    m_raw_type_isSet = true;
}

bool OAITextPron::is_raw_type_Set() const{
    return m_raw_type_isSet;
}

bool OAITextPron::is_raw_type_Valid() const{
    return m_raw_type_isValid;
}

qint32 OAITextPron::getSeq() const {
    return m_seq;
}
void OAITextPron::setSeq(const qint32 &seq) {
    m_seq = seq;
    m_seq_isSet = true;
}

bool OAITextPron::is_seq_Set() const{
    return m_seq_isSet;
}

bool OAITextPron::is_seq_Valid() const{
    return m_seq_isValid;
}

bool OAITextPron::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seq_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextPron::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
