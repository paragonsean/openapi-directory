/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyllable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyllable::OAISyllable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyllable::OAISyllable() {
    this->initializeModel();
}

OAISyllable::~OAISyllable() {}

void OAISyllable::initializeModel() {

    m_seq_isSet = false;
    m_seq_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISyllable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyllable::fromJsonObject(QJsonObject json) {

    m_seq_isValid = ::OpenAPI::fromJsonValue(m_seq, json[QString("seq")]);
    m_seq_isSet = !json[QString("seq")].isNull() && m_seq_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISyllable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyllable::asJsonObject() const {
    QJsonObject obj;
    if (m_seq_isSet) {
        obj.insert(QString("seq"), ::OpenAPI::toJsonValue(m_seq));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAISyllable::getSeq() const {
    return m_seq;
}
void OAISyllable::setSeq(const qint32 &seq) {
    m_seq = seq;
    m_seq_isSet = true;
}

bool OAISyllable::is_seq_Set() const{
    return m_seq_isSet;
}

bool OAISyllable::is_seq_Valid() const{
    return m_seq_isValid;
}

QString OAISyllable::getText() const {
    return m_text;
}
void OAISyllable::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISyllable::is_text_Set() const{
    return m_text_isSet;
}

bool OAISyllable::is_text_Valid() const{
    return m_text_isValid;
}

QString OAISyllable::getType() const {
    return m_type;
}
void OAISyllable::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISyllable::is_type_Set() const{
    return m_type_isSet;
}

bool OAISyllable::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISyllable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_seq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyllable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
