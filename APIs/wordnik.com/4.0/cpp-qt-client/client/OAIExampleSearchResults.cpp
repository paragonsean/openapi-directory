/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExampleSearchResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExampleSearchResults::OAIExampleSearchResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExampleSearchResults::OAIExampleSearchResults() {
    this->initializeModel();
}

OAIExampleSearchResults::~OAIExampleSearchResults() {}

void OAIExampleSearchResults::initializeModel() {

    m_examples_isSet = false;
    m_examples_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;
}

void OAIExampleSearchResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExampleSearchResults::fromJsonObject(QJsonObject json) {

    m_examples_isValid = ::OpenAPI::fromJsonValue(m_examples, json[QString("examples")]);
    m_examples_isSet = !json[QString("examples")].isNull() && m_examples_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;
}

QString OAIExampleSearchResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExampleSearchResults::asJsonObject() const {
    QJsonObject obj;
    if (m_examples.size() > 0) {
        obj.insert(QString("examples"), ::OpenAPI::toJsonValue(m_examples));
    }
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    return obj;
}

QList<QJsonValue> OAIExampleSearchResults::getExamples() const {
    return m_examples;
}
void OAIExampleSearchResults::setExamples(const QList<QJsonValue> &examples) {
    m_examples = examples;
    m_examples_isSet = true;
}

bool OAIExampleSearchResults::is_examples_Set() const{
    return m_examples_isSet;
}

bool OAIExampleSearchResults::is_examples_Valid() const{
    return m_examples_isValid;
}

QList<QJsonValue> OAIExampleSearchResults::getFacets() const {
    return m_facets;
}
void OAIExampleSearchResults::setFacets(const QList<QJsonValue> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIExampleSearchResults::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIExampleSearchResults::is_facets_Valid() const{
    return m_facets_isValid;
}

bool OAIExampleSearchResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_examples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExampleSearchResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
