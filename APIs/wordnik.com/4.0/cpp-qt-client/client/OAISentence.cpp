/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentence::OAISentence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentence::OAISentence() {
    this->initializeModel();
}

OAISentence::~OAISentence() {}

void OAISentence::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_document_metadata_id_isSet = false;
    m_document_metadata_id_isValid = false;

    m_has_scored_words_isSet = false;
    m_has_scored_words_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_scored_words_isSet = false;
    m_scored_words_isValid = false;
}

void OAISentence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentence::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_document_metadata_id_isValid = ::OpenAPI::fromJsonValue(m_document_metadata_id, json[QString("documentMetadataId")]);
    m_document_metadata_id_isSet = !json[QString("documentMetadataId")].isNull() && m_document_metadata_id_isValid;

    m_has_scored_words_isValid = ::OpenAPI::fromJsonValue(m_has_scored_words, json[QString("hasScoredWords")]);
    m_has_scored_words_isSet = !json[QString("hasScoredWords")].isNull() && m_has_scored_words_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_scored_words_isValid = ::OpenAPI::fromJsonValue(m_scored_words, json[QString("scoredWords")]);
    m_scored_words_isSet = !json[QString("scoredWords")].isNull() && m_scored_words_isValid;
}

QString OAISentence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentence::asJsonObject() const {
    QJsonObject obj;
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_document_metadata_id_isSet) {
        obj.insert(QString("documentMetadataId"), ::OpenAPI::toJsonValue(m_document_metadata_id));
    }
    if (m_has_scored_words_isSet) {
        obj.insert(QString("hasScoredWords"), ::OpenAPI::toJsonValue(m_has_scored_words));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_scored_words.size() > 0) {
        obj.insert(QString("scoredWords"), ::OpenAPI::toJsonValue(m_scored_words));
    }
    return obj;
}

QString OAISentence::getDisplay() const {
    return m_display;
}
void OAISentence::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAISentence::is_display_Set() const{
    return m_display_isSet;
}

bool OAISentence::is_display_Valid() const{
    return m_display_isValid;
}

qint64 OAISentence::getDocumentMetadataId() const {
    return m_document_metadata_id;
}
void OAISentence::setDocumentMetadataId(const qint64 &document_metadata_id) {
    m_document_metadata_id = document_metadata_id;
    m_document_metadata_id_isSet = true;
}

bool OAISentence::is_document_metadata_id_Set() const{
    return m_document_metadata_id_isSet;
}

bool OAISentence::is_document_metadata_id_Valid() const{
    return m_document_metadata_id_isValid;
}

bool OAISentence::isHasScoredWords() const {
    return m_has_scored_words;
}
void OAISentence::setHasScoredWords(const bool &has_scored_words) {
    m_has_scored_words = has_scored_words;
    m_has_scored_words_isSet = true;
}

bool OAISentence::is_has_scored_words_Set() const{
    return m_has_scored_words_isSet;
}

bool OAISentence::is_has_scored_words_Valid() const{
    return m_has_scored_words_isValid;
}

qint64 OAISentence::getId() const {
    return m_id;
}
void OAISentence::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISentence::is_id_Set() const{
    return m_id_isSet;
}

bool OAISentence::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISentence::getRating() const {
    return m_rating;
}
void OAISentence::setRating(const qint32 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAISentence::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAISentence::is_rating_Valid() const{
    return m_rating_isValid;
}

QList<QJsonValue> OAISentence::getScoredWords() const {
    return m_scored_words;
}
void OAISentence::setScoredWords(const QList<QJsonValue> &scored_words) {
    m_scored_words = scored_words;
    m_scored_words_isSet = true;
}

bool OAISentence::is_scored_words_Set() const{
    return m_scored_words_isSet;
}

bool OAISentence::is_scored_words_Valid() const{
    return m_scored_words_isValid;
}

bool OAISentence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_metadata_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_scored_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scored_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
