/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordListWord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordListWord::OAIWordListWord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordListWord::OAIWordListWord() {
    this->initializeModel();
}

OAIWordListWord::~OAIWordListWord() {}

void OAIWordListWord::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_comments_on_word_isSet = false;
    m_number_comments_on_word_isValid = false;

    m_number_lists_isSet = false;
    m_number_lists_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIWordListWord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordListWord::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_comments_on_word_isValid = ::OpenAPI::fromJsonValue(m_number_comments_on_word, json[QString("numberCommentsOnWord")]);
    m_number_comments_on_word_isSet = !json[QString("numberCommentsOnWord")].isNull() && m_number_comments_on_word_isValid;

    m_number_lists_isValid = ::OpenAPI::fromJsonValue(m_number_lists, json[QString("numberLists")]);
    m_number_lists_isSet = !json[QString("numberLists")].isNull() && m_number_lists_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIWordListWord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordListWord::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_comments_on_word_isSet) {
        obj.insert(QString("numberCommentsOnWord"), ::OpenAPI::toJsonValue(m_number_comments_on_word));
    }
    if (m_number_lists_isSet) {
        obj.insert(QString("numberLists"), ::OpenAPI::toJsonValue(m_number_lists));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

QDate OAIWordListWord::getCreatedAt() const {
    return m_created_at;
}
void OAIWordListWord::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWordListWord::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWordListWord::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAIWordListWord::getId() const {
    return m_id;
}
void OAIWordListWord::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWordListWord::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWordListWord::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIWordListWord::getNumberCommentsOnWord() const {
    return m_number_comments_on_word;
}
void OAIWordListWord::setNumberCommentsOnWord(const qint64 &number_comments_on_word) {
    m_number_comments_on_word = number_comments_on_word;
    m_number_comments_on_word_isSet = true;
}

bool OAIWordListWord::is_number_comments_on_word_Set() const{
    return m_number_comments_on_word_isSet;
}

bool OAIWordListWord::is_number_comments_on_word_Valid() const{
    return m_number_comments_on_word_isValid;
}

qint64 OAIWordListWord::getNumberLists() const {
    return m_number_lists;
}
void OAIWordListWord::setNumberLists(const qint64 &number_lists) {
    m_number_lists = number_lists;
    m_number_lists_isSet = true;
}

bool OAIWordListWord::is_number_lists_Set() const{
    return m_number_lists_isSet;
}

bool OAIWordListWord::is_number_lists_Valid() const{
    return m_number_lists_isValid;
}

qint64 OAIWordListWord::getUserId() const {
    return m_user_id;
}
void OAIWordListWord::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIWordListWord::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIWordListWord::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIWordListWord::getUsername() const {
    return m_username;
}
void OAIWordListWord::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWordListWord::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWordListWord::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIWordListWord::getWord() const {
    return m_word;
}
void OAIWordListWord::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIWordListWord::is_word_Set() const{
    return m_word_isSet;
}

bool OAIWordListWord::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIWordListWord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_comments_on_word_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_lists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordListWord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
