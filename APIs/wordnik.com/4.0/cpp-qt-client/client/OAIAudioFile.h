/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioFile.h
 *
 * 
 */

#ifndef OAIAudioFile_H
#define OAIAudioFile_H

#include <QJsonObject>

#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAudioFile : public OAIObject {
public:
    OAIAudioFile();
    OAIAudioFile(QString json);
    ~OAIAudioFile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttributionText() const;
    void setAttributionText(const QString &attribution_text);
    bool is_attribution_text_Set() const;
    bool is_attribution_text_Valid() const;

    QString getAttributionUrl() const;
    void setAttributionUrl(const QString &attribution_url);
    bool is_attribution_url_Set() const;
    bool is_attribution_url_Valid() const;

    QString getAudioType() const;
    void setAudioType(const QString &audio_type);
    bool is_audio_type_Set() const;
    bool is_audio_type_Valid() const;

    qint32 getCommentCount() const;
    void setCommentCount(const qint32 &comment_count);
    bool is_comment_count_Set() const;
    bool is_comment_count_Valid() const;

    QDate getCreatedAt() const;
    void setCreatedAt(const QDate &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getFileUrl() const;
    void setFileUrl(const QString &file_url);
    bool is_file_url_Set() const;
    bool is_file_url_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    float getVoteAverage() const;
    void setVoteAverage(const float &vote_average);
    bool is_vote_average_Set() const;
    bool is_vote_average_Valid() const;

    qint32 getVoteCount() const;
    void setVoteCount(const qint32 &vote_count);
    bool is_vote_count_Set() const;
    bool is_vote_count_Valid() const;

    float getVoteWeightedAverage() const;
    void setVoteWeightedAverage(const float &vote_weighted_average);
    bool is_vote_weighted_average_Set() const;
    bool is_vote_weighted_average_Valid() const;

    QString getWord() const;
    void setWord(const QString &word);
    bool is_word_Set() const;
    bool is_word_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attribution_text;
    bool m_attribution_text_isSet;
    bool m_attribution_text_isValid;

    QString m_attribution_url;
    bool m_attribution_url_isSet;
    bool m_attribution_url_isValid;

    QString m_audio_type;
    bool m_audio_type_isSet;
    bool m_audio_type_isValid;

    qint32 m_comment_count;
    bool m_comment_count_isSet;
    bool m_comment_count_isValid;

    QDate m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_file_url;
    bool m_file_url_isSet;
    bool m_file_url_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    float m_vote_average;
    bool m_vote_average_isSet;
    bool m_vote_average_isValid;

    qint32 m_vote_count;
    bool m_vote_count_isSet;
    bool m_vote_count_isValid;

    float m_vote_weighted_average;
    bool m_vote_weighted_average_isSet;
    bool m_vote_weighted_average_isValid;

    QString m_word;
    bool m_word_isSet;
    bool m_word_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioFile)

#endif // OAIAudioFile_H
