/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordOfTheDay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordOfTheDay::OAIWordOfTheDay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordOfTheDay::OAIWordOfTheDay() {
    this->initializeModel();
}

OAIWordOfTheDay::~OAIWordOfTheDay() {}

void OAIWordOfTheDay::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_content_provider_isSet = false;
    m_content_provider_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_definitions_isSet = false;
    m_definitions_isValid = false;

    m_examples_isSet = false;
    m_examples_isValid = false;

    m_html_extra_isSet = false;
    m_html_extra_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_publish_date_isSet = false;
    m_publish_date_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIWordOfTheDay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordOfTheDay::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_content_provider_isValid = ::OpenAPI::fromJsonValue(m_content_provider, json[QString("contentProvider")]);
    m_content_provider_isSet = !json[QString("contentProvider")].isNull() && m_content_provider_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_definitions_isValid = ::OpenAPI::fromJsonValue(m_definitions, json[QString("definitions")]);
    m_definitions_isSet = !json[QString("definitions")].isNull() && m_definitions_isValid;

    m_examples_isValid = ::OpenAPI::fromJsonValue(m_examples, json[QString("examples")]);
    m_examples_isSet = !json[QString("examples")].isNull() && m_examples_isValid;

    m_html_extra_isValid = ::OpenAPI::fromJsonValue(m_html_extra, json[QString("htmlExtra")]);
    m_html_extra_isSet = !json[QString("htmlExtra")].isNull() && m_html_extra_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_publish_date_isValid = ::OpenAPI::fromJsonValue(m_publish_date, json[QString("publishDate")]);
    m_publish_date_isSet = !json[QString("publishDate")].isNull() && m_publish_date_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIWordOfTheDay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordOfTheDay::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_content_provider.isSet()) {
        obj.insert(QString("contentProvider"), ::OpenAPI::toJsonValue(m_content_provider));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_definitions.size() > 0) {
        obj.insert(QString("definitions"), ::OpenAPI::toJsonValue(m_definitions));
    }
    if (m_examples.size() > 0) {
        obj.insert(QString("examples"), ::OpenAPI::toJsonValue(m_examples));
    }
    if (m_html_extra_isSet) {
        obj.insert(QString("htmlExtra"), ::OpenAPI::toJsonValue(m_html_extra));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_publish_date_isSet) {
        obj.insert(QString("publishDate"), ::OpenAPI::toJsonValue(m_publish_date));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

QString OAIWordOfTheDay::getCategory() const {
    return m_category;
}
void OAIWordOfTheDay::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIWordOfTheDay::is_category_Set() const{
    return m_category_isSet;
}

bool OAIWordOfTheDay::is_category_Valid() const{
    return m_category_isValid;
}

OAIContentProvider OAIWordOfTheDay::getContentProvider() const {
    return m_content_provider;
}
void OAIWordOfTheDay::setContentProvider(const OAIContentProvider &content_provider) {
    m_content_provider = content_provider;
    m_content_provider_isSet = true;
}

bool OAIWordOfTheDay::is_content_provider_Set() const{
    return m_content_provider_isSet;
}

bool OAIWordOfTheDay::is_content_provider_Valid() const{
    return m_content_provider_isValid;
}

QDate OAIWordOfTheDay::getCreatedAt() const {
    return m_created_at;
}
void OAIWordOfTheDay::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWordOfTheDay::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWordOfTheDay::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIWordOfTheDay::getCreatedBy() const {
    return m_created_by;
}
void OAIWordOfTheDay::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIWordOfTheDay::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIWordOfTheDay::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QList<QJsonValue> OAIWordOfTheDay::getDefinitions() const {
    return m_definitions;
}
void OAIWordOfTheDay::setDefinitions(const QList<QJsonValue> &definitions) {
    m_definitions = definitions;
    m_definitions_isSet = true;
}

bool OAIWordOfTheDay::is_definitions_Set() const{
    return m_definitions_isSet;
}

bool OAIWordOfTheDay::is_definitions_Valid() const{
    return m_definitions_isValid;
}

QList<QJsonValue> OAIWordOfTheDay::getExamples() const {
    return m_examples;
}
void OAIWordOfTheDay::setExamples(const QList<QJsonValue> &examples) {
    m_examples = examples;
    m_examples_isSet = true;
}

bool OAIWordOfTheDay::is_examples_Set() const{
    return m_examples_isSet;
}

bool OAIWordOfTheDay::is_examples_Valid() const{
    return m_examples_isValid;
}

QString OAIWordOfTheDay::getHtmlExtra() const {
    return m_html_extra;
}
void OAIWordOfTheDay::setHtmlExtra(const QString &html_extra) {
    m_html_extra = html_extra;
    m_html_extra_isSet = true;
}

bool OAIWordOfTheDay::is_html_extra_Set() const{
    return m_html_extra_isSet;
}

bool OAIWordOfTheDay::is_html_extra_Valid() const{
    return m_html_extra_isValid;
}

qint64 OAIWordOfTheDay::getId() const {
    return m_id;
}
void OAIWordOfTheDay::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWordOfTheDay::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWordOfTheDay::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWordOfTheDay::getNote() const {
    return m_note;
}
void OAIWordOfTheDay::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIWordOfTheDay::is_note_Set() const{
    return m_note_isSet;
}

bool OAIWordOfTheDay::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIWordOfTheDay::getParentId() const {
    return m_parent_id;
}
void OAIWordOfTheDay::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIWordOfTheDay::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIWordOfTheDay::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QDate OAIWordOfTheDay::getPublishDate() const {
    return m_publish_date;
}
void OAIWordOfTheDay::setPublishDate(const QDate &publish_date) {
    m_publish_date = publish_date;
    m_publish_date_isSet = true;
}

bool OAIWordOfTheDay::is_publish_date_Set() const{
    return m_publish_date_isSet;
}

bool OAIWordOfTheDay::is_publish_date_Valid() const{
    return m_publish_date_isValid;
}

QString OAIWordOfTheDay::getWord() const {
    return m_word;
}
void OAIWordOfTheDay::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIWordOfTheDay::is_word_Set() const{
    return m_word_isSet;
}

bool OAIWordOfTheDay::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIWordOfTheDay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_examples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordOfTheDay::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
