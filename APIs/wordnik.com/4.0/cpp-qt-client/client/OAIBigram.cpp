/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBigram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBigram::OAIBigram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBigram::OAIBigram() {
    this->initializeModel();
}

OAIBigram::~OAIBigram() {}

void OAIBigram::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_gram1_isSet = false;
    m_gram1_isValid = false;

    m_gram2_isSet = false;
    m_gram2_isValid = false;

    m_mi_isSet = false;
    m_mi_isValid = false;

    m_wlmi_isSet = false;
    m_wlmi_isValid = false;
}

void OAIBigram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBigram::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_gram1_isValid = ::OpenAPI::fromJsonValue(m_gram1, json[QString("gram1")]);
    m_gram1_isSet = !json[QString("gram1")].isNull() && m_gram1_isValid;

    m_gram2_isValid = ::OpenAPI::fromJsonValue(m_gram2, json[QString("gram2")]);
    m_gram2_isSet = !json[QString("gram2")].isNull() && m_gram2_isValid;

    m_mi_isValid = ::OpenAPI::fromJsonValue(m_mi, json[QString("mi")]);
    m_mi_isSet = !json[QString("mi")].isNull() && m_mi_isValid;

    m_wlmi_isValid = ::OpenAPI::fromJsonValue(m_wlmi, json[QString("wlmi")]);
    m_wlmi_isSet = !json[QString("wlmi")].isNull() && m_wlmi_isValid;
}

QString OAIBigram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBigram::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_gram1_isSet) {
        obj.insert(QString("gram1"), ::OpenAPI::toJsonValue(m_gram1));
    }
    if (m_gram2_isSet) {
        obj.insert(QString("gram2"), ::OpenAPI::toJsonValue(m_gram2));
    }
    if (m_mi_isSet) {
        obj.insert(QString("mi"), ::OpenAPI::toJsonValue(m_mi));
    }
    if (m_wlmi_isSet) {
        obj.insert(QString("wlmi"), ::OpenAPI::toJsonValue(m_wlmi));
    }
    return obj;
}

qint64 OAIBigram::getCount() const {
    return m_count;
}
void OAIBigram::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIBigram::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBigram::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIBigram::getGram1() const {
    return m_gram1;
}
void OAIBigram::setGram1(const QString &gram1) {
    m_gram1 = gram1;
    m_gram1_isSet = true;
}

bool OAIBigram::is_gram1_Set() const{
    return m_gram1_isSet;
}

bool OAIBigram::is_gram1_Valid() const{
    return m_gram1_isValid;
}

QString OAIBigram::getGram2() const {
    return m_gram2;
}
void OAIBigram::setGram2(const QString &gram2) {
    m_gram2 = gram2;
    m_gram2_isSet = true;
}

bool OAIBigram::is_gram2_Set() const{
    return m_gram2_isSet;
}

bool OAIBigram::is_gram2_Valid() const{
    return m_gram2_isValid;
}

double OAIBigram::getMi() const {
    return m_mi;
}
void OAIBigram::setMi(const double &mi) {
    m_mi = mi;
    m_mi_isSet = true;
}

bool OAIBigram::is_mi_Set() const{
    return m_mi_isSet;
}

bool OAIBigram::is_mi_Valid() const{
    return m_mi_isValid;
}

double OAIBigram::getWlmi() const {
    return m_wlmi;
}
void OAIBigram::setWlmi(const double &wlmi) {
    m_wlmi = wlmi;
    m_wlmi_isSet = true;
}

bool OAIBigram::is_wlmi_Set() const{
    return m_wlmi_isSet;
}

bool OAIBigram::is_wlmi_Valid() const{
    return m_wlmi_isValid;
}

bool OAIBigram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gram1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gram2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wlmi_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBigram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
