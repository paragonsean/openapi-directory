/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationToken::OAIAuthenticationToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationToken::OAIAuthenticationToken() {
    this->initializeModel();
}

OAIAuthenticationToken::~OAIAuthenticationToken() {}

void OAIAuthenticationToken::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_signature_isSet = false;
    m_user_signature_isValid = false;
}

void OAIAuthenticationToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationToken::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_signature_isValid = ::OpenAPI::fromJsonValue(m_user_signature, json[QString("userSignature")]);
    m_user_signature_isSet = !json[QString("userSignature")].isNull() && m_user_signature_isValid;
}

QString OAIAuthenticationToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationToken::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_signature_isSet) {
        obj.insert(QString("userSignature"), ::OpenAPI::toJsonValue(m_user_signature));
    }
    return obj;
}

QString OAIAuthenticationToken::getToken() const {
    return m_token;
}
void OAIAuthenticationToken::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAuthenticationToken::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAuthenticationToken::is_token_Valid() const{
    return m_token_isValid;
}

qint64 OAIAuthenticationToken::getUserId() const {
    return m_user_id;
}
void OAIAuthenticationToken::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuthenticationToken::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuthenticationToken::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIAuthenticationToken::getUserSignature() const {
    return m_user_signature;
}
void OAIAuthenticationToken::setUserSignature(const QString &user_signature) {
    m_user_signature = user_signature;
    m_user_signature_isSet = true;
}

bool OAIAuthenticationToken::is_user_signature_Set() const{
    return m_user_signature_isSet;
}

bool OAIAuthenticationToken::is_user_signature_Valid() const{
    return m_user_signature_isValid;
}

bool OAIAuthenticationToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
