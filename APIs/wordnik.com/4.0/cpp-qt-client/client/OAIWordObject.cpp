/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWordObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWordObject::OAIWordObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWordObject::OAIWordObject() {
    this->initializeModel();
}

OAIWordObject::~OAIWordObject() {}

void OAIWordObject::initializeModel() {

    m_canonical_form_isSet = false;
    m_canonical_form_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_word_isSet = false;
    m_original_word_isValid = false;

    m_suggestions_isSet = false;
    m_suggestions_isValid = false;

    m_vulgar_isSet = false;
    m_vulgar_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIWordObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWordObject::fromJsonObject(QJsonObject json) {

    m_canonical_form_isValid = ::OpenAPI::fromJsonValue(m_canonical_form, json[QString("canonicalForm")]);
    m_canonical_form_isSet = !json[QString("canonicalForm")].isNull() && m_canonical_form_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_word_isValid = ::OpenAPI::fromJsonValue(m_original_word, json[QString("originalWord")]);
    m_original_word_isSet = !json[QString("originalWord")].isNull() && m_original_word_isValid;

    m_suggestions_isValid = ::OpenAPI::fromJsonValue(m_suggestions, json[QString("suggestions")]);
    m_suggestions_isSet = !json[QString("suggestions")].isNull() && m_suggestions_isValid;

    m_vulgar_isValid = ::OpenAPI::fromJsonValue(m_vulgar, json[QString("vulgar")]);
    m_vulgar_isSet = !json[QString("vulgar")].isNull() && m_vulgar_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIWordObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWordObject::asJsonObject() const {
    QJsonObject obj;
    if (m_canonical_form_isSet) {
        obj.insert(QString("canonicalForm"), ::OpenAPI::toJsonValue(m_canonical_form));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_word_isSet) {
        obj.insert(QString("originalWord"), ::OpenAPI::toJsonValue(m_original_word));
    }
    if (m_suggestions.size() > 0) {
        obj.insert(QString("suggestions"), ::OpenAPI::toJsonValue(m_suggestions));
    }
    if (m_vulgar_isSet) {
        obj.insert(QString("vulgar"), ::OpenAPI::toJsonValue(m_vulgar));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

QString OAIWordObject::getCanonicalForm() const {
    return m_canonical_form;
}
void OAIWordObject::setCanonicalForm(const QString &canonical_form) {
    m_canonical_form = canonical_form;
    m_canonical_form_isSet = true;
}

bool OAIWordObject::is_canonical_form_Set() const{
    return m_canonical_form_isSet;
}

bool OAIWordObject::is_canonical_form_Valid() const{
    return m_canonical_form_isValid;
}

qint64 OAIWordObject::getId() const {
    return m_id;
}
void OAIWordObject::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWordObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWordObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWordObject::getOriginalWord() const {
    return m_original_word;
}
void OAIWordObject::setOriginalWord(const QString &original_word) {
    m_original_word = original_word;
    m_original_word_isSet = true;
}

bool OAIWordObject::is_original_word_Set() const{
    return m_original_word_isSet;
}

bool OAIWordObject::is_original_word_Valid() const{
    return m_original_word_isValid;
}

QList<QString> OAIWordObject::getSuggestions() const {
    return m_suggestions;
}
void OAIWordObject::setSuggestions(const QList<QString> &suggestions) {
    m_suggestions = suggestions;
    m_suggestions_isSet = true;
}

bool OAIWordObject::is_suggestions_Set() const{
    return m_suggestions_isSet;
}

bool OAIWordObject::is_suggestions_Valid() const{
    return m_suggestions_isValid;
}

QString OAIWordObject::getVulgar() const {
    return m_vulgar;
}
void OAIWordObject::setVulgar(const QString &vulgar) {
    m_vulgar = vulgar;
    m_vulgar_isSet = true;
}

bool OAIWordObject::is_vulgar_Set() const{
    return m_vulgar_isSet;
}

bool OAIWordObject::is_vulgar_Valid() const{
    return m_vulgar_isValid;
}

QString OAIWordObject::getWord() const {
    return m_word;
}
void OAIWordObject::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIWordObject::is_word_Set() const{
    return m_word_isSet;
}

bool OAIWordObject::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIWordObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canonical_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_word_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulgar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWordObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
