/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AudioFile;
import org.openapitools.client.model.Bigram;
import org.openapitools.client.model.Definition;
import org.openapitools.client.model.Example;
import org.openapitools.client.model.ExampleSearchResults;
import org.openapitools.client.model.FrequencySummary;
import org.openapitools.client.model.Related;
import org.openapitools.client.model.Syllable;
import org.openapitools.client.model.TextPron;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WordApi
 */
@Disabled
public class WordApiTest {

    private final WordApi api = new WordApi();

    /**
     * Fetches audio metadata for a word.
     *
     * The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAudioTest() throws ApiException {
        String word = null;
        String useCanonical = null;
        Integer limit = null;
        List<AudioFile> response = api.getAudio(word, useCanonical, limit);
        // TODO: test validations
    }

    /**
     * Return definitions for a word
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefinitionsTest() throws ApiException {
        String word = null;
        Integer limit = null;
        String partOfSpeech = null;
        String includeRelated = null;
        List<String> sourceDictionaries = null;
        String useCanonical = null;
        String includeTags = null;
        List<Definition> response = api.getDefinitions(word, limit, partOfSpeech, includeRelated, sourceDictionaries, useCanonical, includeTags);
        // TODO: test validations
    }

    /**
     * Fetches etymology data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEtymologiesTest() throws ApiException {
        String word = null;
        String useCanonical = null;
        List<String> response = api.getEtymologies(word, useCanonical);
        // TODO: test validations
    }

    /**
     * Returns examples for a word
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExamplesTest() throws ApiException {
        String word = null;
        String includeDuplicates = null;
        String useCanonical = null;
        Integer skip = null;
        Integer limit = null;
        ExampleSearchResults response = api.getExamples(word, includeDuplicates, useCanonical, skip, limit);
        // TODO: test validations
    }

    /**
     * Returns syllable information for a word
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyphenationTest() throws ApiException {
        String word = null;
        String useCanonical = null;
        String sourceDictionary = null;
        Integer limit = null;
        List<Syllable> response = api.getHyphenation(word, useCanonical, sourceDictionary, limit);
        // TODO: test validations
    }

    /**
     * Fetches bi-gram phrases for a word
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhrasesTest() throws ApiException {
        String word = null;
        Integer limit = null;
        Integer wlmi = null;
        String useCanonical = null;
        List<Bigram> response = api.getPhrases(word, limit, wlmi, useCanonical);
        // TODO: test validations
    }

    /**
     * Given a word as a string, returns relationships from the Word Graph
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelatedWordsTest() throws ApiException {
        String word = null;
        String useCanonical = null;
        String relationshipTypes = null;
        Integer limitPerRelationshipType = null;
        List<Related> response = api.getRelatedWords(word, useCanonical, relationshipTypes, limitPerRelationshipType);
        // TODO: test validations
    }

    /**
     * Returns the Scrabble score for a word
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScrabbleScoreTest() throws ApiException {
        String word = null;
        Long response = api.getScrabbleScore(word);
        // TODO: test validations
    }

    /**
     * Returns text pronunciations for a given word
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTextPronunciationsTest() throws ApiException {
        String word = null;
        String useCanonical = null;
        String sourceDictionary = null;
        String typeFormat = null;
        Integer limit = null;
        List<TextPron> response = api.getTextPronunciations(word, useCanonical, sourceDictionary, typeFormat, limit);
        // TODO: test validations
    }

    /**
     * Returns a top example for a word
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopExampleTest() throws ApiException {
        String word = null;
        String useCanonical = null;
        Example response = api.getTopExample(word, useCanonical);
        // TODO: test validations
    }

    /**
     * Returns word usage over time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWordFrequencyTest() throws ApiException {
        String word = null;
        String useCanonical = null;
        Integer startYear = null;
        Integer endYear = null;
        FrequencySummary response = api.getWordFrequency(word, useCanonical, startYear, endYear);
        // TODO: test validations
    }

}
