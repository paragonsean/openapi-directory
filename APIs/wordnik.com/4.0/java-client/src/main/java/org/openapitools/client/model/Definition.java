/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:56.537092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Definition {
  public static final String SERIALIZED_NAME_ATTRIBUTION_TEXT = "attributionText";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_TEXT)
  private String attributionText;

  public static final String SERIALIZED_NAME_ATTRIBUTION_URL = "attributionUrl";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_URL)
  private String attributionUrl;

  public static final String SERIALIZED_NAME_CITATIONS = "citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private List<Object> citations = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXAMPLE_USES = "exampleUses";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_USES)
  private List<Object> exampleUses = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENDED_TEXT = "extendedText";
  @SerializedName(SERIALIZED_NAME_EXTENDED_TEXT)
  private String extendedText;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<Object> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<Object> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PART_OF_SPEECH = "partOfSpeech";
  @SerializedName(SERIALIZED_NAME_PART_OF_SPEECH)
  private String partOfSpeech;

  public static final String SERIALIZED_NAME_RELATED_WORDS = "relatedWords";
  @SerializedName(SERIALIZED_NAME_RELATED_WORDS)
  private List<Object> relatedWords = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SEQ_STRING = "seqString";
  @SerializedName(SERIALIZED_NAME_SEQ_STRING)
  private String seqString;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private String sequence;

  public static final String SERIALIZED_NAME_SOURCE_DICTIONARY = "sourceDictionary";
  @SerializedName(SERIALIZED_NAME_SOURCE_DICTIONARY)
  private String sourceDictionary;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_PRONS = "textProns";
  @SerializedName(SERIALIZED_NAME_TEXT_PRONS)
  private List<Object> textProns = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORD = "word";
  @SerializedName(SERIALIZED_NAME_WORD)
  private String word;

  public Definition() {
  }

  public Definition attributionText(String attributionText) {
    this.attributionText = attributionText;
    return this;
  }

  /**
   * Get attributionText
   * @return attributionText
   */
  @javax.annotation.Nullable
  public String getAttributionText() {
    return attributionText;
  }

  public void setAttributionText(String attributionText) {
    this.attributionText = attributionText;
  }


  public Definition attributionUrl(String attributionUrl) {
    this.attributionUrl = attributionUrl;
    return this;
  }

  /**
   * Get attributionUrl
   * @return attributionUrl
   */
  @javax.annotation.Nullable
  public String getAttributionUrl() {
    return attributionUrl;
  }

  public void setAttributionUrl(String attributionUrl) {
    this.attributionUrl = attributionUrl;
  }


  public Definition citations(List<Object> citations) {
    this.citations = citations;
    return this;
  }

  public Definition addCitationsItem(Object citationsItem) {
    if (this.citations == null) {
      this.citations = new ArrayList<>();
    }
    this.citations.add(citationsItem);
    return this;
  }

  /**
   * Get citations
   * @return citations
   */
  @javax.annotation.Nullable
  public List<Object> getCitations() {
    return citations;
  }

  public void setCitations(List<Object> citations) {
    this.citations = citations;
  }


  public Definition exampleUses(List<Object> exampleUses) {
    this.exampleUses = exampleUses;
    return this;
  }

  public Definition addExampleUsesItem(Object exampleUsesItem) {
    if (this.exampleUses == null) {
      this.exampleUses = new ArrayList<>();
    }
    this.exampleUses.add(exampleUsesItem);
    return this;
  }

  /**
   * Get exampleUses
   * @return exampleUses
   */
  @javax.annotation.Nullable
  public List<Object> getExampleUses() {
    return exampleUses;
  }

  public void setExampleUses(List<Object> exampleUses) {
    this.exampleUses = exampleUses;
  }


  public Definition extendedText(String extendedText) {
    this.extendedText = extendedText;
    return this;
  }

  /**
   * Get extendedText
   * @return extendedText
   */
  @javax.annotation.Nullable
  public String getExtendedText() {
    return extendedText;
  }

  public void setExtendedText(String extendedText) {
    this.extendedText = extendedText;
  }


  public Definition labels(List<Object> labels) {
    this.labels = labels;
    return this;
  }

  public Definition addLabelsItem(Object labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<Object> getLabels() {
    return labels;
  }

  public void setLabels(List<Object> labels) {
    this.labels = labels;
  }


  public Definition notes(List<Object> notes) {
    this.notes = notes;
    return this;
  }

  public Definition addNotesItem(Object notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public List<Object> getNotes() {
    return notes;
  }

  public void setNotes(List<Object> notes) {
    this.notes = notes;
  }


  public Definition partOfSpeech(String partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
    return this;
  }

  /**
   * Get partOfSpeech
   * @return partOfSpeech
   */
  @javax.annotation.Nullable
  public String getPartOfSpeech() {
    return partOfSpeech;
  }

  public void setPartOfSpeech(String partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
  }


  public Definition relatedWords(List<Object> relatedWords) {
    this.relatedWords = relatedWords;
    return this;
  }

  public Definition addRelatedWordsItem(Object relatedWordsItem) {
    if (this.relatedWords == null) {
      this.relatedWords = new ArrayList<>();
    }
    this.relatedWords.add(relatedWordsItem);
    return this;
  }

  /**
   * Get relatedWords
   * @return relatedWords
   */
  @javax.annotation.Nullable
  public List<Object> getRelatedWords() {
    return relatedWords;
  }

  public void setRelatedWords(List<Object> relatedWords) {
    this.relatedWords = relatedWords;
  }


  public Definition score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public Definition seqString(String seqString) {
    this.seqString = seqString;
    return this;
  }

  /**
   * Get seqString
   * @return seqString
   */
  @javax.annotation.Nullable
  public String getSeqString() {
    return seqString;
  }

  public void setSeqString(String seqString) {
    this.seqString = seqString;
  }


  public Definition sequence(String sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public String getSequence() {
    return sequence;
  }

  public void setSequence(String sequence) {
    this.sequence = sequence;
  }


  public Definition sourceDictionary(String sourceDictionary) {
    this.sourceDictionary = sourceDictionary;
    return this;
  }

  /**
   * Get sourceDictionary
   * @return sourceDictionary
   */
  @javax.annotation.Nullable
  public String getSourceDictionary() {
    return sourceDictionary;
  }

  public void setSourceDictionary(String sourceDictionary) {
    this.sourceDictionary = sourceDictionary;
  }


  public Definition text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public Definition textProns(List<Object> textProns) {
    this.textProns = textProns;
    return this;
  }

  public Definition addTextPronsItem(Object textPronsItem) {
    if (this.textProns == null) {
      this.textProns = new ArrayList<>();
    }
    this.textProns.add(textPronsItem);
    return this;
  }

  /**
   * Get textProns
   * @return textProns
   */
  @javax.annotation.Nullable
  public List<Object> getTextProns() {
    return textProns;
  }

  public void setTextProns(List<Object> textProns) {
    this.textProns = textProns;
  }


  public Definition word(String word) {
    this.word = word;
    return this;
  }

  /**
   * Get word
   * @return word
   */
  @javax.annotation.Nullable
  public String getWord() {
    return word;
  }

  public void setWord(String word) {
    this.word = word;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Definition definition = (Definition) o;
    return Objects.equals(this.attributionText, definition.attributionText) &&
        Objects.equals(this.attributionUrl, definition.attributionUrl) &&
        Objects.equals(this.citations, definition.citations) &&
        Objects.equals(this.exampleUses, definition.exampleUses) &&
        Objects.equals(this.extendedText, definition.extendedText) &&
        Objects.equals(this.labels, definition.labels) &&
        Objects.equals(this.notes, definition.notes) &&
        Objects.equals(this.partOfSpeech, definition.partOfSpeech) &&
        Objects.equals(this.relatedWords, definition.relatedWords) &&
        Objects.equals(this.score, definition.score) &&
        Objects.equals(this.seqString, definition.seqString) &&
        Objects.equals(this.sequence, definition.sequence) &&
        Objects.equals(this.sourceDictionary, definition.sourceDictionary) &&
        Objects.equals(this.text, definition.text) &&
        Objects.equals(this.textProns, definition.textProns) &&
        Objects.equals(this.word, definition.word);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributionText, attributionUrl, citations, exampleUses, extendedText, labels, notes, partOfSpeech, relatedWords, score, seqString, sequence, sourceDictionary, text, textProns, word);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Definition {\n");
    sb.append("    attributionText: ").append(toIndentedString(attributionText)).append("\n");
    sb.append("    attributionUrl: ").append(toIndentedString(attributionUrl)).append("\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    exampleUses: ").append(toIndentedString(exampleUses)).append("\n");
    sb.append("    extendedText: ").append(toIndentedString(extendedText)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    partOfSpeech: ").append(toIndentedString(partOfSpeech)).append("\n");
    sb.append("    relatedWords: ").append(toIndentedString(relatedWords)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    seqString: ").append(toIndentedString(seqString)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    sourceDictionary: ").append(toIndentedString(sourceDictionary)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textProns: ").append(toIndentedString(textProns)).append("\n");
    sb.append("    word: ").append(toIndentedString(word)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributionText");
    openapiFields.add("attributionUrl");
    openapiFields.add("citations");
    openapiFields.add("exampleUses");
    openapiFields.add("extendedText");
    openapiFields.add("labels");
    openapiFields.add("notes");
    openapiFields.add("partOfSpeech");
    openapiFields.add("relatedWords");
    openapiFields.add("score");
    openapiFields.add("seqString");
    openapiFields.add("sequence");
    openapiFields.add("sourceDictionary");
    openapiFields.add("text");
    openapiFields.add("textProns");
    openapiFields.add("word");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Definition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Definition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Definition is not found in the empty JSON string", Definition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Definition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Definition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attributionText") != null && !jsonObj.get("attributionText").isJsonNull()) && !jsonObj.get("attributionText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributionText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributionText").toString()));
      }
      if ((jsonObj.get("attributionUrl") != null && !jsonObj.get("attributionUrl").isJsonNull()) && !jsonObj.get("attributionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributionUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("citations") != null && !jsonObj.get("citations").isJsonNull() && !jsonObj.get("citations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `citations` to be an array in the JSON string but got `%s`", jsonObj.get("citations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exampleUses") != null && !jsonObj.get("exampleUses").isJsonNull() && !jsonObj.get("exampleUses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exampleUses` to be an array in the JSON string but got `%s`", jsonObj.get("exampleUses").toString()));
      }
      if ((jsonObj.get("extendedText") != null && !jsonObj.get("extendedText").isJsonNull()) && !jsonObj.get("extendedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extendedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extendedText").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull() && !jsonObj.get("notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("partOfSpeech") != null && !jsonObj.get("partOfSpeech").isJsonNull()) && !jsonObj.get("partOfSpeech").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partOfSpeech` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partOfSpeech").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relatedWords") != null && !jsonObj.get("relatedWords").isJsonNull() && !jsonObj.get("relatedWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedWords` to be an array in the JSON string but got `%s`", jsonObj.get("relatedWords").toString()));
      }
      if ((jsonObj.get("seqString") != null && !jsonObj.get("seqString").isJsonNull()) && !jsonObj.get("seqString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seqString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seqString").toString()));
      }
      if ((jsonObj.get("sequence") != null && !jsonObj.get("sequence").isJsonNull()) && !jsonObj.get("sequence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequence").toString()));
      }
      if ((jsonObj.get("sourceDictionary") != null && !jsonObj.get("sourceDictionary").isJsonNull()) && !jsonObj.get("sourceDictionary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDictionary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDictionary").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("textProns") != null && !jsonObj.get("textProns").isJsonNull() && !jsonObj.get("textProns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `textProns` to be an array in the JSON string but got `%s`", jsonObj.get("textProns").toString()));
      }
      if ((jsonObj.get("word") != null && !jsonObj.get("word").isJsonNull()) && !jsonObj.get("word").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Definition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Definition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Definition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Definition.class));

       return (TypeAdapter<T>) new TypeAdapter<Definition>() {
           @Override
           public void write(JsonWriter out, Definition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Definition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Definition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Definition
   * @throws IOException if the JSON string is invalid with respect to Definition
   */
  public static Definition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Definition.class);
  }

  /**
   * Convert an instance of Definition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

