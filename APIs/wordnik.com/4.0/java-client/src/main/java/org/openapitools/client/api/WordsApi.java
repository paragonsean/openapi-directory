/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefinitionSearchResults;
import org.openapitools.client.model.WordObject;
import org.openapitools.client.model.WordOfTheDay;
import org.openapitools.client.model.WordSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WordsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WordsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRandomWord
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRandomWordCall(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/words.json/randomWord";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasDictionaryDef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasDictionaryDef", hasDictionaryDef));
        }

        if (includePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePartOfSpeech", includePartOfSpeech));
        }

        if (excludePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludePartOfSpeech", excludePartOfSpeech));
        }

        if (minCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCorpusCount", minCorpusCount));
        }

        if (maxCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCorpusCount", maxCorpusCount));
        }

        if (minDictionaryCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDictionaryCount", minDictionaryCount));
        }

        if (maxDictionaryCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDictionaryCount", maxDictionaryCount));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minLength", minLength));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLength", maxLength));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomWordValidateBeforeCall(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, final ApiCallback _callback) throws ApiException {
        return getRandomWordCall(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, _callback);

    }

    /**
     * Returns a single random WordObject
     * 
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @return WordObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public WordObject getRandomWord(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength) throws ApiException {
        ApiResponse<WordObject> localVarResp = getRandomWordWithHttpInfo(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength);
        return localVarResp.getData();
    }

    /**
     * Returns a single random WordObject
     * 
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @return ApiResponse&lt;WordObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WordObject> getRandomWordWithHttpInfo(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength) throws ApiException {
        okhttp3.Call localVarCall = getRandomWordValidateBeforeCall(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, null);
        Type localVarReturnType = new TypeToken<WordObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single random WordObject (asynchronously)
     * 
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRandomWordAsync(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, final ApiCallback<WordObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomWordValidateBeforeCall(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, _callback);
        Type localVarReturnType = new TypeToken<WordObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRandomWords
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRandomWordsCall(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, String sortBy, String sortOrder, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/words.json/randomWords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasDictionaryDef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasDictionaryDef", hasDictionaryDef));
        }

        if (includePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePartOfSpeech", includePartOfSpeech));
        }

        if (excludePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludePartOfSpeech", excludePartOfSpeech));
        }

        if (minCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCorpusCount", minCorpusCount));
        }

        if (maxCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCorpusCount", maxCorpusCount));
        }

        if (minDictionaryCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDictionaryCount", minDictionaryCount));
        }

        if (maxDictionaryCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDictionaryCount", maxDictionaryCount));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minLength", minLength));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLength", maxLength));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomWordsValidateBeforeCall(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, String sortBy, String sortOrder, Integer limit, final ApiCallback _callback) throws ApiException {
        return getRandomWordsCall(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, sortBy, sortOrder, limit, _callback);

    }

    /**
     * Returns an array of random WordObjects
     * 
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @return List&lt;WordObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<WordObject> getRandomWords(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, String sortBy, String sortOrder, Integer limit) throws ApiException {
        ApiResponse<List<WordObject>> localVarResp = getRandomWordsWithHttpInfo(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, sortBy, sortOrder, limit);
        return localVarResp.getData();
    }

    /**
     * Returns an array of random WordObjects
     * 
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @return ApiResponse&lt;List&lt;WordObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WordObject>> getRandomWordsWithHttpInfo(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, String sortBy, String sortOrder, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRandomWordsValidateBeforeCall(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, sortBy, sortOrder, limit, null);
        Type localVarReturnType = new TypeToken<List<WordObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an array of random WordObjects (asynchronously)
     * 
     * @param hasDictionaryDef Only return words with dictionary definitions (optional, default to true)
     * @param includePartOfSpeech CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 0)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum dictionary count (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 5)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRandomWordsAsync(String hasDictionaryDef, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, String sortBy, String sortOrder, Integer limit, final ApiCallback<List<WordObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomWordsValidateBeforeCall(hasDictionaryDef, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, sortBy, sortOrder, limit, _callback);
        Type localVarReturnType = new TypeToken<List<WordObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWordOfTheDay
     * @param date Fetches by date in yyyy-MM-dd (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWordOfTheDayCall(String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/words.json/wordOfTheDay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWordOfTheDayValidateBeforeCall(String date, final ApiCallback _callback) throws ApiException {
        return getWordOfTheDayCall(date, _callback);

    }

    /**
     * Returns a specific WordOfTheDay
     * 
     * @param date Fetches by date in yyyy-MM-dd (optional)
     * @return WordOfTheDay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public WordOfTheDay getWordOfTheDay(String date) throws ApiException {
        ApiResponse<WordOfTheDay> localVarResp = getWordOfTheDayWithHttpInfo(date);
        return localVarResp.getData();
    }

    /**
     * Returns a specific WordOfTheDay
     * 
     * @param date Fetches by date in yyyy-MM-dd (optional)
     * @return ApiResponse&lt;WordOfTheDay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WordOfTheDay> getWordOfTheDayWithHttpInfo(String date) throws ApiException {
        okhttp3.Call localVarCall = getWordOfTheDayValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<WordOfTheDay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a specific WordOfTheDay (asynchronously)
     * 
     * @param date Fetches by date in yyyy-MM-dd (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWordOfTheDayAsync(String date, final ApiCallback<WordOfTheDay> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWordOfTheDayValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<WordOfTheDay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reverseDictionary
     * @param query Search term (required)
     * @param findSenseForWord Restricts words and finds closest sense (optional)
     * @param includeSourceDictionaries Only include these comma-delimited source dictionaries (optional)
     * @param excludeSourceDictionaries Exclude these comma-delimited source dictionaries (optional)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param expandTerms Expand terms (optional)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseDictionaryCall(String query, String findSenseForWord, String includeSourceDictionaries, String excludeSourceDictionaries, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minLength, Integer maxLength, String expandTerms, String includeTags, String sortBy, String sortOrder, String skip, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/words.json/reverseDictionary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (findSenseForWord != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("findSenseForWord", findSenseForWord));
        }

        if (includeSourceDictionaries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSourceDictionaries", includeSourceDictionaries));
        }

        if (excludeSourceDictionaries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeSourceDictionaries", excludeSourceDictionaries));
        }

        if (includePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePartOfSpeech", includePartOfSpeech));
        }

        if (excludePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludePartOfSpeech", excludePartOfSpeech));
        }

        if (minCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCorpusCount", minCorpusCount));
        }

        if (maxCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCorpusCount", maxCorpusCount));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minLength", minLength));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLength", maxLength));
        }

        if (expandTerms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandTerms", expandTerms));
        }

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTags", includeTags));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reverseDictionaryValidateBeforeCall(String query, String findSenseForWord, String includeSourceDictionaries, String excludeSourceDictionaries, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minLength, Integer maxLength, String expandTerms, String includeTags, String sortBy, String sortOrder, String skip, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling reverseDictionary(Async)");
        }

        return reverseDictionaryCall(query, findSenseForWord, includeSourceDictionaries, excludeSourceDictionaries, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minLength, maxLength, expandTerms, includeTags, sortBy, sortOrder, skip, limit, _callback);

    }

    /**
     * Reverse dictionary search
     * 
     * @param query Search term (required)
     * @param findSenseForWord Restricts words and finds closest sense (optional)
     * @param includeSourceDictionaries Only include these comma-delimited source dictionaries (optional)
     * @param excludeSourceDictionaries Exclude these comma-delimited source dictionaries (optional)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param expandTerms Expand terms (optional)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @return DefinitionSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public DefinitionSearchResults reverseDictionary(String query, String findSenseForWord, String includeSourceDictionaries, String excludeSourceDictionaries, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minLength, Integer maxLength, String expandTerms, String includeTags, String sortBy, String sortOrder, String skip, Integer limit) throws ApiException {
        ApiResponse<DefinitionSearchResults> localVarResp = reverseDictionaryWithHttpInfo(query, findSenseForWord, includeSourceDictionaries, excludeSourceDictionaries, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minLength, maxLength, expandTerms, includeTags, sortBy, sortOrder, skip, limit);
        return localVarResp.getData();
    }

    /**
     * Reverse dictionary search
     * 
     * @param query Search term (required)
     * @param findSenseForWord Restricts words and finds closest sense (optional)
     * @param includeSourceDictionaries Only include these comma-delimited source dictionaries (optional)
     * @param excludeSourceDictionaries Exclude these comma-delimited source dictionaries (optional)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param expandTerms Expand terms (optional)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @return ApiResponse&lt;DefinitionSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefinitionSearchResults> reverseDictionaryWithHttpInfo(String query, String findSenseForWord, String includeSourceDictionaries, String excludeSourceDictionaries, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minLength, Integer maxLength, String expandTerms, String includeTags, String sortBy, String sortOrder, String skip, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = reverseDictionaryValidateBeforeCall(query, findSenseForWord, includeSourceDictionaries, excludeSourceDictionaries, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minLength, maxLength, expandTerms, includeTags, sortBy, sortOrder, skip, limit, null);
        Type localVarReturnType = new TypeToken<DefinitionSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reverse dictionary search (asynchronously)
     * 
     * @param query Search term (required)
     * @param findSenseForWord Restricts words and finds closest sense (optional)
     * @param includeSourceDictionaries Only include these comma-delimited source dictionaries (optional)
     * @param excludeSourceDictionaries Exclude these comma-delimited source dictionaries (optional)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param expandTerms Expand terms (optional)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @param sortBy Attribute to sort by (optional)
     * @param sortOrder Sort direction (optional)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseDictionaryAsync(String query, String findSenseForWord, String includeSourceDictionaries, String excludeSourceDictionaries, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minLength, Integer maxLength, String expandTerms, String includeTags, String sortBy, String sortOrder, String skip, Integer limit, final ApiCallback<DefinitionSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = reverseDictionaryValidateBeforeCall(query, findSenseForWord, includeSourceDictionaries, excludeSourceDictionaries, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minLength, maxLength, expandTerms, includeTags, sortBy, sortOrder, skip, limit, _callback);
        Type localVarReturnType = new TypeToken<DefinitionSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchWords
     * @param query Search query (required)
     * @param allowRegex Search term is a Regular Expression (optional, default to false)
     * @param caseSensitive Search case sensitive (optional, default to true)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum number of dictionary entries for words returned (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary definition count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchWordsCall(String query, String allowRegex, String caseSensitive, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/words.json/search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowRegex", allowRegex));
        }

        if (caseSensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSensitive", caseSensitive));
        }

        if (includePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePartOfSpeech", includePartOfSpeech));
        }

        if (excludePartOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludePartOfSpeech", excludePartOfSpeech));
        }

        if (minCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCorpusCount", minCorpusCount));
        }

        if (maxCorpusCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCorpusCount", maxCorpusCount));
        }

        if (minDictionaryCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDictionaryCount", minDictionaryCount));
        }

        if (maxDictionaryCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDictionaryCount", maxDictionaryCount));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minLength", minLength));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLength", maxLength));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchWordsValidateBeforeCall(String query, String allowRegex, String caseSensitive, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchWords(Async)");
        }

        return searchWordsCall(query, allowRegex, caseSensitive, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, skip, limit, _callback);

    }

    /**
     * Searches words
     * 
     * @param query Search query (required)
     * @param allowRegex Search term is a Regular Expression (optional, default to false)
     * @param caseSensitive Search case sensitive (optional, default to true)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum number of dictionary entries for words returned (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary definition count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @return WordSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public WordSearchResults searchWords(String query, String allowRegex, String caseSensitive, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, Integer skip, Integer limit) throws ApiException {
        ApiResponse<WordSearchResults> localVarResp = searchWordsWithHttpInfo(query, allowRegex, caseSensitive, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, skip, limit);
        return localVarResp.getData();
    }

    /**
     * Searches words
     * 
     * @param query Search query (required)
     * @param allowRegex Search term is a Regular Expression (optional, default to false)
     * @param caseSensitive Search case sensitive (optional, default to true)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum number of dictionary entries for words returned (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary definition count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @return ApiResponse&lt;WordSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WordSearchResults> searchWordsWithHttpInfo(String query, String allowRegex, String caseSensitive, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, Integer skip, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = searchWordsValidateBeforeCall(query, allowRegex, caseSensitive, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, skip, limit, null);
        Type localVarReturnType = new TypeToken<WordSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches words (asynchronously)
     * 
     * @param query Search query (required)
     * @param allowRegex Search term is a Regular Expression (optional, default to false)
     * @param caseSensitive Search case sensitive (optional, default to true)
     * @param includePartOfSpeech Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param excludePartOfSpeech Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) (optional)
     * @param minCorpusCount Minimum corpus frequency for terms (optional, default to 5)
     * @param maxCorpusCount Maximum corpus frequency for terms (optional, default to -1)
     * @param minDictionaryCount Minimum number of dictionary entries for words returned (optional, default to 1)
     * @param maxDictionaryCount Maximum dictionary definition count (optional, default to -1)
     * @param minLength Minimum word length (optional, default to 1)
     * @param maxLength Maximum word length (optional, default to -1)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchWordsAsync(String query, String allowRegex, String caseSensitive, String includePartOfSpeech, String excludePartOfSpeech, Integer minCorpusCount, Integer maxCorpusCount, Integer minDictionaryCount, Integer maxDictionaryCount, Integer minLength, Integer maxLength, Integer skip, Integer limit, final ApiCallback<WordSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchWordsValidateBeforeCall(query, allowRegex, caseSensitive, includePartOfSpeech, excludePartOfSpeech, minCorpusCount, maxCorpusCount, minDictionaryCount, maxDictionaryCount, minLength, maxLength, skip, limit, _callback);
        Type localVarReturnType = new TypeToken<WordSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
