/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AudioFile;
import org.openapitools.client.model.Bigram;
import org.openapitools.client.model.Definition;
import org.openapitools.client.model.Example;
import org.openapitools.client.model.ExampleSearchResults;
import org.openapitools.client.model.FrequencySummary;
import org.openapitools.client.model.Related;
import org.openapitools.client.model.Syllable;
import org.openapitools.client.model.TextPron;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WordApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WordApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WordApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAudio
     * @param word Word to get audio for. (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioCall(String word, String useCanonical, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/audio"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioValidateBeforeCall(String word, String useCanonical, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getAudio(Async)");
        }

        return getAudioCall(word, useCanonical, limit, _callback);

    }

    /**
     * Fetches audio metadata for a word.
     * The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
     * @param word Word to get audio for. (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @return List&lt;AudioFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<AudioFile> getAudio(String word, String useCanonical, Integer limit) throws ApiException {
        ApiResponse<List<AudioFile>> localVarResp = getAudioWithHttpInfo(word, useCanonical, limit);
        return localVarResp.getData();
    }

    /**
     * Fetches audio metadata for a word.
     * The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
     * @param word Word to get audio for. (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @return ApiResponse&lt;List&lt;AudioFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AudioFile>> getAudioWithHttpInfo(String word, String useCanonical, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAudioValidateBeforeCall(word, useCanonical, limit, null);
        Type localVarReturnType = new TypeToken<List<AudioFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches audio metadata for a word. (asynchronously)
     * The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
     * @param word Word to get audio for. (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioAsync(String word, String useCanonical, Integer limit, final ApiCallback<List<AudioFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioValidateBeforeCall(word, useCanonical, limit, _callback);
        Type localVarReturnType = new TypeToken<List<AudioFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDefinitions
     * @param word Word to return definitions for (required)
     * @param limit Maximum number of results to return (optional, default to 200)
     * @param partOfSpeech CSV list of part-of-speech types (optional)
     * @param includeRelated Return related words with definitions (optional, default to false)
     * @param sourceDictionaries Source dictionary to return definitions from.  If &#39;all&#39; is received, results are returned from all sources. If multiple values are received (e.g. &#39;century,wiktionary&#39;), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet (optional)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefinitionsCall(String word, Integer limit, String partOfSpeech, String includeRelated, List<String> sourceDictionaries, String useCanonical, String includeTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/definitions"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (partOfSpeech != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partOfSpeech", partOfSpeech));
        }

        if (includeRelated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRelated", includeRelated));
        }

        if (sourceDictionaries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sourceDictionaries", sourceDictionaries));
        }

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTags", includeTags));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefinitionsValidateBeforeCall(String word, Integer limit, String partOfSpeech, String includeRelated, List<String> sourceDictionaries, String useCanonical, String includeTags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getDefinitions(Async)");
        }

        return getDefinitionsCall(word, limit, partOfSpeech, includeRelated, sourceDictionaries, useCanonical, includeTags, _callback);

    }

    /**
     * Return definitions for a word
     * 
     * @param word Word to return definitions for (required)
     * @param limit Maximum number of results to return (optional, default to 200)
     * @param partOfSpeech CSV list of part-of-speech types (optional)
     * @param includeRelated Return related words with definitions (optional, default to false)
     * @param sourceDictionaries Source dictionary to return definitions from.  If &#39;all&#39; is received, results are returned from all sources. If multiple values are received (e.g. &#39;century,wiktionary&#39;), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet (optional)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @return List&lt;Definition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<Definition> getDefinitions(String word, Integer limit, String partOfSpeech, String includeRelated, List<String> sourceDictionaries, String useCanonical, String includeTags) throws ApiException {
        ApiResponse<List<Definition>> localVarResp = getDefinitionsWithHttpInfo(word, limit, partOfSpeech, includeRelated, sourceDictionaries, useCanonical, includeTags);
        return localVarResp.getData();
    }

    /**
     * Return definitions for a word
     * 
     * @param word Word to return definitions for (required)
     * @param limit Maximum number of results to return (optional, default to 200)
     * @param partOfSpeech CSV list of part-of-speech types (optional)
     * @param includeRelated Return related words with definitions (optional, default to false)
     * @param sourceDictionaries Source dictionary to return definitions from.  If &#39;all&#39; is received, results are returned from all sources. If multiple values are received (e.g. &#39;century,wiktionary&#39;), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet (optional)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @return ApiResponse&lt;List&lt;Definition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Definition>> getDefinitionsWithHttpInfo(String word, Integer limit, String partOfSpeech, String includeRelated, List<String> sourceDictionaries, String useCanonical, String includeTags) throws ApiException {
        okhttp3.Call localVarCall = getDefinitionsValidateBeforeCall(word, limit, partOfSpeech, includeRelated, sourceDictionaries, useCanonical, includeTags, null);
        Type localVarReturnType = new TypeToken<List<Definition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return definitions for a word (asynchronously)
     * 
     * @param word Word to return definitions for (required)
     * @param limit Maximum number of results to return (optional, default to 200)
     * @param partOfSpeech CSV list of part-of-speech types (optional)
     * @param includeRelated Return related words with definitions (optional, default to false)
     * @param sourceDictionaries Source dictionary to return definitions from.  If &#39;all&#39; is received, results are returned from all sources. If multiple values are received (e.g. &#39;century,wiktionary&#39;), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet (optional)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param includeTags Return a closed set of XML tags in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefinitionsAsync(String word, Integer limit, String partOfSpeech, String includeRelated, List<String> sourceDictionaries, String useCanonical, String includeTags, final ApiCallback<List<Definition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefinitionsValidateBeforeCall(word, limit, partOfSpeech, includeRelated, sourceDictionaries, useCanonical, includeTags, _callback);
        Type localVarReturnType = new TypeToken<List<Definition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEtymologies
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEtymologiesCall(String word, String useCanonical, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/etymologies"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEtymologiesValidateBeforeCall(String word, String useCanonical, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getEtymologies(Async)");
        }

        return getEtymologiesCall(word, useCanonical, _callback);

    }

    /**
     * Fetches etymology data
     * 
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getEtymologies(String word, String useCanonical) throws ApiException {
        ApiResponse<List<String>> localVarResp = getEtymologiesWithHttpInfo(word, useCanonical);
        return localVarResp.getData();
    }

    /**
     * Fetches etymology data
     * 
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getEtymologiesWithHttpInfo(String word, String useCanonical) throws ApiException {
        okhttp3.Call localVarCall = getEtymologiesValidateBeforeCall(word, useCanonical, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches etymology data (asynchronously)
     * 
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEtymologiesAsync(String word, String useCanonical, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEtymologiesValidateBeforeCall(word, useCanonical, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExamples
     * @param word Word to return examples for (required)
     * @param includeDuplicates Show duplicate examples from different sources (optional, default to false)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesCall(String word, String includeDuplicates, String useCanonical, Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/examples"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDuplicates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDuplicates", includeDuplicates));
        }

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExamplesValidateBeforeCall(String word, String includeDuplicates, String useCanonical, Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getExamples(Async)");
        }

        return getExamplesCall(word, includeDuplicates, useCanonical, skip, limit, _callback);

    }

    /**
     * Returns examples for a word
     * 
     * @param word Word to return examples for (required)
     * @param includeDuplicates Show duplicate examples from different sources (optional, default to false)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @return ExampleSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ExampleSearchResults getExamples(String word, String includeDuplicates, String useCanonical, Integer skip, Integer limit) throws ApiException {
        ApiResponse<ExampleSearchResults> localVarResp = getExamplesWithHttpInfo(word, includeDuplicates, useCanonical, skip, limit);
        return localVarResp.getData();
    }

    /**
     * Returns examples for a word
     * 
     * @param word Word to return examples for (required)
     * @param includeDuplicates Show duplicate examples from different sources (optional, default to false)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @return ApiResponse&lt;ExampleSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExampleSearchResults> getExamplesWithHttpInfo(String word, String includeDuplicates, String useCanonical, Integer skip, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getExamplesValidateBeforeCall(word, includeDuplicates, useCanonical, skip, limit, null);
        Type localVarReturnType = new TypeToken<ExampleSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns examples for a word (asynchronously)
     * 
     * @param word Word to return examples for (required)
     * @param includeDuplicates Show duplicate examples from different sources (optional, default to false)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesAsync(String word, String includeDuplicates, String useCanonical, Integer skip, Integer limit, final ApiCallback<ExampleSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExamplesValidateBeforeCall(word, includeDuplicates, useCanonical, skip, limit, _callback);
        Type localVarReturnType = new TypeToken<ExampleSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyphenation
     * @param word Word to get syllables for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet. (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyphenationCall(String word, String useCanonical, String sourceDictionary, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/hyphenation"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        if (sourceDictionary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceDictionary", sourceDictionary));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyphenationValidateBeforeCall(String word, String useCanonical, String sourceDictionary, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getHyphenation(Async)");
        }

        return getHyphenationCall(word, useCanonical, sourceDictionary, limit, _callback);

    }

    /**
     * Returns syllable information for a word
     * 
     * @param word Word to get syllables for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet. (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @return List&lt;Syllable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<Syllable> getHyphenation(String word, String useCanonical, String sourceDictionary, Integer limit) throws ApiException {
        ApiResponse<List<Syllable>> localVarResp = getHyphenationWithHttpInfo(word, useCanonical, sourceDictionary, limit);
        return localVarResp.getData();
    }

    /**
     * Returns syllable information for a word
     * 
     * @param word Word to get syllables for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet. (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @return ApiResponse&lt;List&lt;Syllable&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Syllable>> getHyphenationWithHttpInfo(String word, String useCanonical, String sourceDictionary, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getHyphenationValidateBeforeCall(word, useCanonical, sourceDictionary, limit, null);
        Type localVarReturnType = new TypeToken<List<Syllable>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns syllable information for a word (asynchronously)
     * 
     * @param word Word to get syllables for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet. (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyphenationAsync(String word, String useCanonical, String sourceDictionary, Integer limit, final ApiCallback<List<Syllable>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyphenationValidateBeforeCall(word, useCanonical, sourceDictionary, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Syllable>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhrases
     * @param word Word to fetch phrases for (required)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @param wlmi Minimum WLMI for the phrase (optional, default to 0)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhrasesCall(String word, Integer limit, Integer wlmi, String useCanonical, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/phrases"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (wlmi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wlmi", wlmi));
        }

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhrasesValidateBeforeCall(String word, Integer limit, Integer wlmi, String useCanonical, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getPhrases(Async)");
        }

        return getPhrasesCall(word, limit, wlmi, useCanonical, _callback);

    }

    /**
     * Fetches bi-gram phrases for a word
     * 
     * @param word Word to fetch phrases for (required)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @param wlmi Minimum WLMI for the phrase (optional, default to 0)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @return List&lt;Bigram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<Bigram> getPhrases(String word, Integer limit, Integer wlmi, String useCanonical) throws ApiException {
        ApiResponse<List<Bigram>> localVarResp = getPhrasesWithHttpInfo(word, limit, wlmi, useCanonical);
        return localVarResp.getData();
    }

    /**
     * Fetches bi-gram phrases for a word
     * 
     * @param word Word to fetch phrases for (required)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @param wlmi Minimum WLMI for the phrase (optional, default to 0)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @return ApiResponse&lt;List&lt;Bigram&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Bigram>> getPhrasesWithHttpInfo(String word, Integer limit, Integer wlmi, String useCanonical) throws ApiException {
        okhttp3.Call localVarCall = getPhrasesValidateBeforeCall(word, limit, wlmi, useCanonical, null);
        Type localVarReturnType = new TypeToken<List<Bigram>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches bi-gram phrases for a word (asynchronously)
     * 
     * @param word Word to fetch phrases for (required)
     * @param limit Maximum number of results to return (optional, default to 5)
     * @param wlmi Minimum WLMI for the phrase (optional, default to 0)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhrasesAsync(String word, Integer limit, Integer wlmi, String useCanonical, final ApiCallback<List<Bigram>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhrasesValidateBeforeCall(word, limit, wlmi, useCanonical, _callback);
        Type localVarReturnType = new TypeToken<List<Bigram>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelatedWords
     * @param word Word to fetch relationships for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param relationshipTypes Limits the total results per type of relationship type (optional)
     * @param limitPerRelationshipType Restrict to the supplied relationship types (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelatedWordsCall(String word, String useCanonical, String relationshipTypes, Integer limitPerRelationshipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/relatedWords"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        if (relationshipTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationshipTypes", relationshipTypes));
        }

        if (limitPerRelationshipType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerRelationshipType", limitPerRelationshipType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelatedWordsValidateBeforeCall(String word, String useCanonical, String relationshipTypes, Integer limitPerRelationshipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getRelatedWords(Async)");
        }

        return getRelatedWordsCall(word, useCanonical, relationshipTypes, limitPerRelationshipType, _callback);

    }

    /**
     * Given a word as a string, returns relationships from the Word Graph
     * 
     * @param word Word to fetch relationships for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param relationshipTypes Limits the total results per type of relationship type (optional)
     * @param limitPerRelationshipType Restrict to the supplied relationship types (optional, default to 10)
     * @return List&lt;Related&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<Related> getRelatedWords(String word, String useCanonical, String relationshipTypes, Integer limitPerRelationshipType) throws ApiException {
        ApiResponse<List<Related>> localVarResp = getRelatedWordsWithHttpInfo(word, useCanonical, relationshipTypes, limitPerRelationshipType);
        return localVarResp.getData();
    }

    /**
     * Given a word as a string, returns relationships from the Word Graph
     * 
     * @param word Word to fetch relationships for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param relationshipTypes Limits the total results per type of relationship type (optional)
     * @param limitPerRelationshipType Restrict to the supplied relationship types (optional, default to 10)
     * @return ApiResponse&lt;List&lt;Related&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Related>> getRelatedWordsWithHttpInfo(String word, String useCanonical, String relationshipTypes, Integer limitPerRelationshipType) throws ApiException {
        okhttp3.Call localVarCall = getRelatedWordsValidateBeforeCall(word, useCanonical, relationshipTypes, limitPerRelationshipType, null);
        Type localVarReturnType = new TypeToken<List<Related>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Given a word as a string, returns relationships from the Word Graph (asynchronously)
     * 
     * @param word Word to fetch relationships for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param relationshipTypes Limits the total results per type of relationship type (optional)
     * @param limitPerRelationshipType Restrict to the supplied relationship types (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelatedWordsAsync(String word, String useCanonical, String relationshipTypes, Integer limitPerRelationshipType, final ApiCallback<List<Related>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelatedWordsValidateBeforeCall(word, useCanonical, relationshipTypes, limitPerRelationshipType, _callback);
        Type localVarReturnType = new TypeToken<List<Related>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScrabbleScore
     * @param word Word to get scrabble score for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrabbleScoreCall(String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/scrabbleScore"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScrabbleScoreValidateBeforeCall(String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getScrabbleScore(Async)");
        }

        return getScrabbleScoreCall(word, _callback);

    }

    /**
     * Returns the Scrabble score for a word
     * 
     * @param word Word to get scrabble score for. (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public Long getScrabbleScore(String word) throws ApiException {
        ApiResponse<Long> localVarResp = getScrabbleScoreWithHttpInfo(word);
        return localVarResp.getData();
    }

    /**
     * Returns the Scrabble score for a word
     * 
     * @param word Word to get scrabble score for. (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> getScrabbleScoreWithHttpInfo(String word) throws ApiException {
        okhttp3.Call localVarCall = getScrabbleScoreValidateBeforeCall(word, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the Scrabble score for a word (asynchronously)
     * 
     * @param word Word to get scrabble score for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScrabbleScoreAsync(String word, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScrabbleScoreValidateBeforeCall(word, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTextPronunciations
     * @param word Word to get pronunciations for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary (optional)
     * @param typeFormat Text pronunciation type (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextPronunciationsCall(String word, String useCanonical, String sourceDictionary, String typeFormat, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/pronunciations"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        if (sourceDictionary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceDictionary", sourceDictionary));
        }

        if (typeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeFormat", typeFormat));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTextPronunciationsValidateBeforeCall(String word, String useCanonical, String sourceDictionary, String typeFormat, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getTextPronunciations(Async)");
        }

        return getTextPronunciationsCall(word, useCanonical, sourceDictionary, typeFormat, limit, _callback);

    }

    /**
     * Returns text pronunciations for a given word
     * 
     * @param word Word to get pronunciations for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary (optional)
     * @param typeFormat Text pronunciation type (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @return List&lt;TextPron&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public List<TextPron> getTextPronunciations(String word, String useCanonical, String sourceDictionary, String typeFormat, Integer limit) throws ApiException {
        ApiResponse<List<TextPron>> localVarResp = getTextPronunciationsWithHttpInfo(word, useCanonical, sourceDictionary, typeFormat, limit);
        return localVarResp.getData();
    }

    /**
     * Returns text pronunciations for a given word
     * 
     * @param word Word to get pronunciations for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary (optional)
     * @param typeFormat Text pronunciation type (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @return ApiResponse&lt;List&lt;TextPron&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TextPron>> getTextPronunciationsWithHttpInfo(String word, String useCanonical, String sourceDictionary, String typeFormat, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getTextPronunciationsValidateBeforeCall(word, useCanonical, sourceDictionary, typeFormat, limit, null);
        Type localVarReturnType = new TypeToken<List<TextPron>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns text pronunciations for a given word (asynchronously)
     * 
     * @param word Word to get pronunciations for (required)
     * @param useCanonical If true will try to return a correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param sourceDictionary Get from a single dictionary (optional)
     * @param typeFormat Text pronunciation type (optional)
     * @param limit Maximum number of results to return (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextPronunciationsAsync(String word, String useCanonical, String sourceDictionary, String typeFormat, Integer limit, final ApiCallback<List<TextPron>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTextPronunciationsValidateBeforeCall(word, useCanonical, sourceDictionary, typeFormat, limit, _callback);
        Type localVarReturnType = new TypeToken<List<TextPron>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopExample
     * @param word Word to fetch examples for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopExampleCall(String word, String useCanonical, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/topExample"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopExampleValidateBeforeCall(String word, String useCanonical, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getTopExample(Async)");
        }

        return getTopExampleCall(word, useCanonical, _callback);

    }

    /**
     * Returns a top example for a word
     * 
     * @param word Word to fetch examples for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @return Example
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public Example getTopExample(String word, String useCanonical) throws ApiException {
        ApiResponse<Example> localVarResp = getTopExampleWithHttpInfo(word, useCanonical);
        return localVarResp.getData();
    }

    /**
     * Returns a top example for a word
     * 
     * @param word Word to fetch examples for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @return ApiResponse&lt;Example&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example> getTopExampleWithHttpInfo(String word, String useCanonical) throws ApiException {
        okhttp3.Call localVarCall = getTopExampleValidateBeforeCall(word, useCanonical, null);
        Type localVarReturnType = new TypeToken<Example>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a top example for a word (asynchronously)
     * 
     * @param word Word to fetch examples for (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopExampleAsync(String word, String useCanonical, final ApiCallback<Example> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopExampleValidateBeforeCall(word, useCanonical, _callback);
        Type localVarReturnType = new TypeToken<Example>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWordFrequency
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param startYear Starting Year (optional, default to 1800)
     * @param endYear Ending Year (optional, default to 2012)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWordFrequencyCall(String word, String useCanonical, Integer startYear, Integer endYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/word.json/{word}/frequency"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCanonical != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCanonical", useCanonical));
        }

        if (startYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startYear", startYear));
        }

        if (endYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endYear", endYear));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWordFrequencyValidateBeforeCall(String word, String useCanonical, Integer startYear, Integer endYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getWordFrequency(Async)");
        }

        return getWordFrequencyCall(word, useCanonical, startYear, endYear, _callback);

    }

    /**
     * Returns word usage over time
     * 
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param startYear Starting Year (optional, default to 1800)
     * @param endYear Ending Year (optional, default to 2012)
     * @return FrequencySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public FrequencySummary getWordFrequency(String word, String useCanonical, Integer startYear, Integer endYear) throws ApiException {
        ApiResponse<FrequencySummary> localVarResp = getWordFrequencyWithHttpInfo(word, useCanonical, startYear, endYear);
        return localVarResp.getData();
    }

    /**
     * Returns word usage over time
     * 
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param startYear Starting Year (optional, default to 1800)
     * @param endYear Ending Year (optional, default to 2012)
     * @return ApiResponse&lt;FrequencySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrequencySummary> getWordFrequencyWithHttpInfo(String word, String useCanonical, Integer startYear, Integer endYear) throws ApiException {
        okhttp3.Call localVarCall = getWordFrequencyValidateBeforeCall(word, useCanonical, startYear, endYear, null);
        Type localVarReturnType = new TypeToken<FrequencySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns word usage over time (asynchronously)
     * 
     * @param word Word to return (required)
     * @param useCanonical If true will try to return the correct word root (&#39;cats&#39; -&gt; &#39;cat&#39;). If false returns exactly what was requested. (optional, default to false)
     * @param startYear Starting Year (optional, default to 1800)
     * @param endYear Ending Year (optional, default to 2012)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWordFrequencyAsync(String word, String useCanonical, Integer startYear, Integer endYear, final ApiCallback<FrequencySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWordFrequencyValidateBeforeCall(word, useCanonical, startYear, endYear, _callback);
        Type localVarReturnType = new TypeToken<FrequencySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
