/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentProvider;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WordOfTheDay
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:56.537092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WordOfTheDay {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CONTENT_PROVIDER = "contentProvider";
  @SerializedName(SERIALIZED_NAME_CONTENT_PROVIDER)
  private ContentProvider contentProvider;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private List<Object> definitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXAMPLES = "examples";
  @SerializedName(SERIALIZED_NAME_EXAMPLES)
  private List<Object> examples = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTML_EXTRA = "htmlExtra";
  @SerializedName(SERIALIZED_NAME_HTML_EXTRA)
  private String htmlExtra;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "publishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private LocalDate publishDate;

  public static final String SERIALIZED_NAME_WORD = "word";
  @SerializedName(SERIALIZED_NAME_WORD)
  private String word;

  public WordOfTheDay() {
  }

  public WordOfTheDay category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public WordOfTheDay contentProvider(ContentProvider contentProvider) {
    this.contentProvider = contentProvider;
    return this;
  }

  /**
   * Get contentProvider
   * @return contentProvider
   */
  @javax.annotation.Nullable
  public ContentProvider getContentProvider() {
    return contentProvider;
  }

  public void setContentProvider(ContentProvider contentProvider) {
    this.contentProvider = contentProvider;
  }


  public WordOfTheDay createdAt(LocalDate createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public LocalDate getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDate createdAt) {
    this.createdAt = createdAt;
  }


  public WordOfTheDay createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public WordOfTheDay definitions(List<Object> definitions) {
    this.definitions = definitions;
    return this;
  }

  public WordOfTheDay addDefinitionsItem(Object definitionsItem) {
    if (this.definitions == null) {
      this.definitions = new ArrayList<>();
    }
    this.definitions.add(definitionsItem);
    return this;
  }

  /**
   * Get definitions
   * @return definitions
   */
  @javax.annotation.Nullable
  public List<Object> getDefinitions() {
    return definitions;
  }

  public void setDefinitions(List<Object> definitions) {
    this.definitions = definitions;
  }


  public WordOfTheDay examples(List<Object> examples) {
    this.examples = examples;
    return this;
  }

  public WordOfTheDay addExamplesItem(Object examplesItem) {
    if (this.examples == null) {
      this.examples = new ArrayList<>();
    }
    this.examples.add(examplesItem);
    return this;
  }

  /**
   * Get examples
   * @return examples
   */
  @javax.annotation.Nullable
  public List<Object> getExamples() {
    return examples;
  }

  public void setExamples(List<Object> examples) {
    this.examples = examples;
  }


  public WordOfTheDay htmlExtra(String htmlExtra) {
    this.htmlExtra = htmlExtra;
    return this;
  }

  /**
   * Get htmlExtra
   * @return htmlExtra
   */
  @javax.annotation.Nullable
  public String getHtmlExtra() {
    return htmlExtra;
  }

  public void setHtmlExtra(String htmlExtra) {
    this.htmlExtra = htmlExtra;
  }


  public WordOfTheDay id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public WordOfTheDay note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public WordOfTheDay parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public WordOfTheDay publishDate(LocalDate publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * Get publishDate
   * @return publishDate
   */
  @javax.annotation.Nullable
  public LocalDate getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(LocalDate publishDate) {
    this.publishDate = publishDate;
  }


  public WordOfTheDay word(String word) {
    this.word = word;
    return this;
  }

  /**
   * Get word
   * @return word
   */
  @javax.annotation.Nullable
  public String getWord() {
    return word;
  }

  public void setWord(String word) {
    this.word = word;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WordOfTheDay wordOfTheDay = (WordOfTheDay) o;
    return Objects.equals(this.category, wordOfTheDay.category) &&
        Objects.equals(this.contentProvider, wordOfTheDay.contentProvider) &&
        Objects.equals(this.createdAt, wordOfTheDay.createdAt) &&
        Objects.equals(this.createdBy, wordOfTheDay.createdBy) &&
        Objects.equals(this.definitions, wordOfTheDay.definitions) &&
        Objects.equals(this.examples, wordOfTheDay.examples) &&
        Objects.equals(this.htmlExtra, wordOfTheDay.htmlExtra) &&
        Objects.equals(this.id, wordOfTheDay.id) &&
        Objects.equals(this.note, wordOfTheDay.note) &&
        Objects.equals(this.parentId, wordOfTheDay.parentId) &&
        Objects.equals(this.publishDate, wordOfTheDay.publishDate) &&
        Objects.equals(this.word, wordOfTheDay.word);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, contentProvider, createdAt, createdBy, definitions, examples, htmlExtra, id, note, parentId, publishDate, word);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WordOfTheDay {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    contentProvider: ").append(toIndentedString(contentProvider)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    htmlExtra: ").append(toIndentedString(htmlExtra)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("    word: ").append(toIndentedString(word)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("contentProvider");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("definitions");
    openapiFields.add("examples");
    openapiFields.add("htmlExtra");
    openapiFields.add("id");
    openapiFields.add("note");
    openapiFields.add("parentId");
    openapiFields.add("publishDate");
    openapiFields.add("word");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WordOfTheDay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WordOfTheDay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WordOfTheDay is not found in the empty JSON string", WordOfTheDay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WordOfTheDay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WordOfTheDay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WordOfTheDay.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `contentProvider`
      if (jsonObj.get("contentProvider") != null && !jsonObj.get("contentProvider").isJsonNull()) {
        ContentProvider.validateJsonElement(jsonObj.get("contentProvider"));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("definitions") != null && !jsonObj.get("definitions").isJsonNull() && !jsonObj.get("definitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitions` to be an array in the JSON string but got `%s`", jsonObj.get("definitions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("examples") != null && !jsonObj.get("examples").isJsonNull() && !jsonObj.get("examples").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `examples` to be an array in the JSON string but got `%s`", jsonObj.get("examples").toString()));
      }
      if ((jsonObj.get("htmlExtra") != null && !jsonObj.get("htmlExtra").isJsonNull()) && !jsonObj.get("htmlExtra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlExtra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlExtra").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonNull()) && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if ((jsonObj.get("word") != null && !jsonObj.get("word").isJsonNull()) && !jsonObj.get("word").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WordOfTheDay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WordOfTheDay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WordOfTheDay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WordOfTheDay.class));

       return (TypeAdapter<T>) new TypeAdapter<WordOfTheDay>() {
           @Override
           public void write(JsonWriter out, WordOfTheDay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WordOfTheDay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WordOfTheDay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WordOfTheDay
   * @throws IOException if the JSON string is invalid with respect to WordOfTheDay
   */
  public static WordOfTheDay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WordOfTheDay.class);
  }

  /**
   * Convert an instance of WordOfTheDay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

