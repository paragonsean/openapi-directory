/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScoredWord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:56.537092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoredWord {
  public static final String SERIALIZED_NAME_BASE_WORD_SCORE = "baseWordScore";
  @SerializedName(SERIALIZED_NAME_BASE_WORD_SCORE)
  private Double baseWordScore;

  public static final String SERIALIZED_NAME_DOC_TERM_COUNT = "docTermCount";
  @SerializedName(SERIALIZED_NAME_DOC_TERM_COUNT)
  private Integer docTermCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LEMMA = "lemma";
  @SerializedName(SERIALIZED_NAME_LEMMA)
  private String lemma;

  public static final String SERIALIZED_NAME_PART_OF_SPEECH = "partOfSpeech";
  @SerializedName(SERIALIZED_NAME_PART_OF_SPEECH)
  private String partOfSpeech;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SENTENCE_ID = "sentenceId";
  @SerializedName(SERIALIZED_NAME_SENTENCE_ID)
  private Long sentenceId;

  public static final String SERIALIZED_NAME_STOPWORD = "stopword";
  @SerializedName(SERIALIZED_NAME_STOPWORD)
  private Boolean stopword;

  public static final String SERIALIZED_NAME_WORD = "word";
  @SerializedName(SERIALIZED_NAME_WORD)
  private String word;

  public static final String SERIALIZED_NAME_WORD_TYPE = "wordType";
  @SerializedName(SERIALIZED_NAME_WORD_TYPE)
  private String wordType;

  public ScoredWord() {
  }

  public ScoredWord baseWordScore(Double baseWordScore) {
    this.baseWordScore = baseWordScore;
    return this;
  }

  /**
   * Get baseWordScore
   * @return baseWordScore
   */
  @javax.annotation.Nullable
  public Double getBaseWordScore() {
    return baseWordScore;
  }

  public void setBaseWordScore(Double baseWordScore) {
    this.baseWordScore = baseWordScore;
  }


  public ScoredWord docTermCount(Integer docTermCount) {
    this.docTermCount = docTermCount;
    return this;
  }

  /**
   * Get docTermCount
   * @return docTermCount
   */
  @javax.annotation.Nullable
  public Integer getDocTermCount() {
    return docTermCount;
  }

  public void setDocTermCount(Integer docTermCount) {
    this.docTermCount = docTermCount;
  }


  public ScoredWord id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ScoredWord lemma(String lemma) {
    this.lemma = lemma;
    return this;
  }

  /**
   * Get lemma
   * @return lemma
   */
  @javax.annotation.Nullable
  public String getLemma() {
    return lemma;
  }

  public void setLemma(String lemma) {
    this.lemma = lemma;
  }


  public ScoredWord partOfSpeech(String partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
    return this;
  }

  /**
   * Get partOfSpeech
   * @return partOfSpeech
   */
  @javax.annotation.Nullable
  public String getPartOfSpeech() {
    return partOfSpeech;
  }

  public void setPartOfSpeech(String partOfSpeech) {
    this.partOfSpeech = partOfSpeech;
  }


  public ScoredWord position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public ScoredWord score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public ScoredWord sentenceId(Long sentenceId) {
    this.sentenceId = sentenceId;
    return this;
  }

  /**
   * Get sentenceId
   * @return sentenceId
   */
  @javax.annotation.Nullable
  public Long getSentenceId() {
    return sentenceId;
  }

  public void setSentenceId(Long sentenceId) {
    this.sentenceId = sentenceId;
  }


  public ScoredWord stopword(Boolean stopword) {
    this.stopword = stopword;
    return this;
  }

  /**
   * Get stopword
   * @return stopword
   */
  @javax.annotation.Nullable
  public Boolean getStopword() {
    return stopword;
  }

  public void setStopword(Boolean stopword) {
    this.stopword = stopword;
  }


  public ScoredWord word(String word) {
    this.word = word;
    return this;
  }

  /**
   * Get word
   * @return word
   */
  @javax.annotation.Nullable
  public String getWord() {
    return word;
  }

  public void setWord(String word) {
    this.word = word;
  }


  public ScoredWord wordType(String wordType) {
    this.wordType = wordType;
    return this;
  }

  /**
   * Get wordType
   * @return wordType
   */
  @javax.annotation.Nullable
  public String getWordType() {
    return wordType;
  }

  public void setWordType(String wordType) {
    this.wordType = wordType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoredWord scoredWord = (ScoredWord) o;
    return Objects.equals(this.baseWordScore, scoredWord.baseWordScore) &&
        Objects.equals(this.docTermCount, scoredWord.docTermCount) &&
        Objects.equals(this.id, scoredWord.id) &&
        Objects.equals(this.lemma, scoredWord.lemma) &&
        Objects.equals(this.partOfSpeech, scoredWord.partOfSpeech) &&
        Objects.equals(this.position, scoredWord.position) &&
        Objects.equals(this.score, scoredWord.score) &&
        Objects.equals(this.sentenceId, scoredWord.sentenceId) &&
        Objects.equals(this.stopword, scoredWord.stopword) &&
        Objects.equals(this.word, scoredWord.word) &&
        Objects.equals(this.wordType, scoredWord.wordType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseWordScore, docTermCount, id, lemma, partOfSpeech, position, score, sentenceId, stopword, word, wordType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoredWord {\n");
    sb.append("    baseWordScore: ").append(toIndentedString(baseWordScore)).append("\n");
    sb.append("    docTermCount: ").append(toIndentedString(docTermCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lemma: ").append(toIndentedString(lemma)).append("\n");
    sb.append("    partOfSpeech: ").append(toIndentedString(partOfSpeech)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sentenceId: ").append(toIndentedString(sentenceId)).append("\n");
    sb.append("    stopword: ").append(toIndentedString(stopword)).append("\n");
    sb.append("    word: ").append(toIndentedString(word)).append("\n");
    sb.append("    wordType: ").append(toIndentedString(wordType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseWordScore");
    openapiFields.add("docTermCount");
    openapiFields.add("id");
    openapiFields.add("lemma");
    openapiFields.add("partOfSpeech");
    openapiFields.add("position");
    openapiFields.add("score");
    openapiFields.add("sentenceId");
    openapiFields.add("stopword");
    openapiFields.add("word");
    openapiFields.add("wordType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoredWord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoredWord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoredWord is not found in the empty JSON string", ScoredWord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoredWord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoredWord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lemma") != null && !jsonObj.get("lemma").isJsonNull()) && !jsonObj.get("lemma").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lemma` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lemma").toString()));
      }
      if ((jsonObj.get("partOfSpeech") != null && !jsonObj.get("partOfSpeech").isJsonNull()) && !jsonObj.get("partOfSpeech").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partOfSpeech` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partOfSpeech").toString()));
      }
      if ((jsonObj.get("word") != null && !jsonObj.get("word").isJsonNull()) && !jsonObj.get("word").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word").toString()));
      }
      if ((jsonObj.get("wordType") != null && !jsonObj.get("wordType").isJsonNull()) && !jsonObj.get("wordType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wordType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wordType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoredWord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoredWord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoredWord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoredWord.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoredWord>() {
           @Override
           public void write(JsonWriter out, ScoredWord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoredWord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoredWord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoredWord
   * @throws IOException if the JSON string is invalid with respect to ScoredWord
   */
  public static ScoredWord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoredWord.class);
  }

  /**
   * Convert an instance of ScoredWord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

