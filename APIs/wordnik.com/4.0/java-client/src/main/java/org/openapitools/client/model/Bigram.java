/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bigram
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:56.537092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bigram {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_GRAM1 = "gram1";
  @SerializedName(SERIALIZED_NAME_GRAM1)
  private String gram1;

  public static final String SERIALIZED_NAME_GRAM2 = "gram2";
  @SerializedName(SERIALIZED_NAME_GRAM2)
  private String gram2;

  public static final String SERIALIZED_NAME_MI = "mi";
  @SerializedName(SERIALIZED_NAME_MI)
  private Double mi;

  public static final String SERIALIZED_NAME_WLMI = "wlmi";
  @SerializedName(SERIALIZED_NAME_WLMI)
  private Double wlmi;

  public Bigram() {
  }

  public Bigram count(Long count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public Bigram gram1(String gram1) {
    this.gram1 = gram1;
    return this;
  }

  /**
   * Get gram1
   * @return gram1
   */
  @javax.annotation.Nullable
  public String getGram1() {
    return gram1;
  }

  public void setGram1(String gram1) {
    this.gram1 = gram1;
  }


  public Bigram gram2(String gram2) {
    this.gram2 = gram2;
    return this;
  }

  /**
   * Get gram2
   * @return gram2
   */
  @javax.annotation.Nullable
  public String getGram2() {
    return gram2;
  }

  public void setGram2(String gram2) {
    this.gram2 = gram2;
  }


  public Bigram mi(Double mi) {
    this.mi = mi;
    return this;
  }

  /**
   * Get mi
   * @return mi
   */
  @javax.annotation.Nullable
  public Double getMi() {
    return mi;
  }

  public void setMi(Double mi) {
    this.mi = mi;
  }


  public Bigram wlmi(Double wlmi) {
    this.wlmi = wlmi;
    return this;
  }

  /**
   * Get wlmi
   * @return wlmi
   */
  @javax.annotation.Nullable
  public Double getWlmi() {
    return wlmi;
  }

  public void setWlmi(Double wlmi) {
    this.wlmi = wlmi;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bigram bigram = (Bigram) o;
    return Objects.equals(this.count, bigram.count) &&
        Objects.equals(this.gram1, bigram.gram1) &&
        Objects.equals(this.gram2, bigram.gram2) &&
        Objects.equals(this.mi, bigram.mi) &&
        Objects.equals(this.wlmi, bigram.wlmi);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, gram1, gram2, mi, wlmi);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bigram {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    gram1: ").append(toIndentedString(gram1)).append("\n");
    sb.append("    gram2: ").append(toIndentedString(gram2)).append("\n");
    sb.append("    mi: ").append(toIndentedString(mi)).append("\n");
    sb.append("    wlmi: ").append(toIndentedString(wlmi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("gram1");
    openapiFields.add("gram2");
    openapiFields.add("mi");
    openapiFields.add("wlmi");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bigram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bigram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bigram is not found in the empty JSON string", Bigram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bigram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bigram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gram1") != null && !jsonObj.get("gram1").isJsonNull()) && !jsonObj.get("gram1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gram1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gram1").toString()));
      }
      if ((jsonObj.get("gram2") != null && !jsonObj.get("gram2").isJsonNull()) && !jsonObj.get("gram2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gram2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gram2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bigram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bigram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bigram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bigram.class));

       return (TypeAdapter<T>) new TypeAdapter<Bigram>() {
           @Override
           public void write(JsonWriter out, Bigram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bigram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bigram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bigram
   * @throws IOException if the JSON string is invalid with respect to Bigram
   */
  public static Bigram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bigram.class);
  }

  /**
   * Convert an instance of Bigram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

