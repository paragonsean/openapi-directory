/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WordObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:56.537092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WordObject {
  public static final String SERIALIZED_NAME_CANONICAL_FORM = "canonicalForm";
  @SerializedName(SERIALIZED_NAME_CANONICAL_FORM)
  private String canonicalForm;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ORIGINAL_WORD = "originalWord";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_WORD)
  private String originalWord;

  public static final String SERIALIZED_NAME_SUGGESTIONS = "suggestions";
  @SerializedName(SERIALIZED_NAME_SUGGESTIONS)
  private List<String> suggestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VULGAR = "vulgar";
  @SerializedName(SERIALIZED_NAME_VULGAR)
  private String vulgar;

  public static final String SERIALIZED_NAME_WORD = "word";
  @SerializedName(SERIALIZED_NAME_WORD)
  private String word;

  public WordObject() {
  }

  public WordObject canonicalForm(String canonicalForm) {
    this.canonicalForm = canonicalForm;
    return this;
  }

  /**
   * Get canonicalForm
   * @return canonicalForm
   */
  @javax.annotation.Nullable
  public String getCanonicalForm() {
    return canonicalForm;
  }

  public void setCanonicalForm(String canonicalForm) {
    this.canonicalForm = canonicalForm;
  }


  public WordObject id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public WordObject originalWord(String originalWord) {
    this.originalWord = originalWord;
    return this;
  }

  /**
   * Get originalWord
   * @return originalWord
   */
  @javax.annotation.Nullable
  public String getOriginalWord() {
    return originalWord;
  }

  public void setOriginalWord(String originalWord) {
    this.originalWord = originalWord;
  }


  public WordObject suggestions(List<String> suggestions) {
    this.suggestions = suggestions;
    return this;
  }

  public WordObject addSuggestionsItem(String suggestionsItem) {
    if (this.suggestions == null) {
      this.suggestions = new ArrayList<>();
    }
    this.suggestions.add(suggestionsItem);
    return this;
  }

  /**
   * Get suggestions
   * @return suggestions
   */
  @javax.annotation.Nullable
  public List<String> getSuggestions() {
    return suggestions;
  }

  public void setSuggestions(List<String> suggestions) {
    this.suggestions = suggestions;
  }


  public WordObject vulgar(String vulgar) {
    this.vulgar = vulgar;
    return this;
  }

  /**
   * Get vulgar
   * @return vulgar
   */
  @javax.annotation.Nullable
  public String getVulgar() {
    return vulgar;
  }

  public void setVulgar(String vulgar) {
    this.vulgar = vulgar;
  }


  public WordObject word(String word) {
    this.word = word;
    return this;
  }

  /**
   * Get word
   * @return word
   */
  @javax.annotation.Nullable
  public String getWord() {
    return word;
  }

  public void setWord(String word) {
    this.word = word;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WordObject wordObject = (WordObject) o;
    return Objects.equals(this.canonicalForm, wordObject.canonicalForm) &&
        Objects.equals(this.id, wordObject.id) &&
        Objects.equals(this.originalWord, wordObject.originalWord) &&
        Objects.equals(this.suggestions, wordObject.suggestions) &&
        Objects.equals(this.vulgar, wordObject.vulgar) &&
        Objects.equals(this.word, wordObject.word);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canonicalForm, id, originalWord, suggestions, vulgar, word);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WordObject {\n");
    sb.append("    canonicalForm: ").append(toIndentedString(canonicalForm)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    originalWord: ").append(toIndentedString(originalWord)).append("\n");
    sb.append("    suggestions: ").append(toIndentedString(suggestions)).append("\n");
    sb.append("    vulgar: ").append(toIndentedString(vulgar)).append("\n");
    sb.append("    word: ").append(toIndentedString(word)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canonicalForm");
    openapiFields.add("id");
    openapiFields.add("originalWord");
    openapiFields.add("suggestions");
    openapiFields.add("vulgar");
    openapiFields.add("word");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WordObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WordObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WordObject is not found in the empty JSON string", WordObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WordObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WordObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WordObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("canonicalForm") != null && !jsonObj.get("canonicalForm").isJsonNull()) && !jsonObj.get("canonicalForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalForm").toString()));
      }
      if ((jsonObj.get("originalWord") != null && !jsonObj.get("originalWord").isJsonNull()) && !jsonObj.get("originalWord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalWord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalWord").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suggestions") != null && !jsonObj.get("suggestions").isJsonNull() && !jsonObj.get("suggestions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestions` to be an array in the JSON string but got `%s`", jsonObj.get("suggestions").toString()));
      }
      if ((jsonObj.get("vulgar") != null && !jsonObj.get("vulgar").isJsonNull()) && !jsonObj.get("vulgar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulgar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vulgar").toString()));
      }
      if ((jsonObj.get("word") != null && !jsonObj.get("word").isJsonNull()) && !jsonObj.get("word").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WordObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WordObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WordObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WordObject.class));

       return (TypeAdapter<T>) new TypeAdapter<WordObject>() {
           @Override
           public void write(JsonWriter out, WordObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WordObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WordObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WordObject
   * @throws IOException if the JSON string is invalid with respect to WordObject
   */
  public static WordObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WordObject.class);
  }

  /**
   * Convert an instance of WordObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

