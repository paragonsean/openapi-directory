/*
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sentence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:56.537092-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sentence {
  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_DOCUMENT_METADATA_ID = "documentMetadataId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_METADATA_ID)
  private Long documentMetadataId;

  public static final String SERIALIZED_NAME_HAS_SCORED_WORDS = "hasScoredWords";
  @SerializedName(SERIALIZED_NAME_HAS_SCORED_WORDS)
  private Boolean hasScoredWords;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Integer rating;

  public static final String SERIALIZED_NAME_SCORED_WORDS = "scoredWords";
  @SerializedName(SERIALIZED_NAME_SCORED_WORDS)
  private List<Object> scoredWords = new ArrayList<>();

  public Sentence() {
  }

  public Sentence display(String display) {
    this.display = display;
    return this;
  }

  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }


  public Sentence documentMetadataId(Long documentMetadataId) {
    this.documentMetadataId = documentMetadataId;
    return this;
  }

  /**
   * Get documentMetadataId
   * @return documentMetadataId
   */
  @javax.annotation.Nullable
  public Long getDocumentMetadataId() {
    return documentMetadataId;
  }

  public void setDocumentMetadataId(Long documentMetadataId) {
    this.documentMetadataId = documentMetadataId;
  }


  public Sentence hasScoredWords(Boolean hasScoredWords) {
    this.hasScoredWords = hasScoredWords;
    return this;
  }

  /**
   * Get hasScoredWords
   * @return hasScoredWords
   */
  @javax.annotation.Nullable
  public Boolean getHasScoredWords() {
    return hasScoredWords;
  }

  public void setHasScoredWords(Boolean hasScoredWords) {
    this.hasScoredWords = hasScoredWords;
  }


  public Sentence id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Sentence rating(Integer rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public Integer getRating() {
    return rating;
  }

  public void setRating(Integer rating) {
    this.rating = rating;
  }


  public Sentence scoredWords(List<Object> scoredWords) {
    this.scoredWords = scoredWords;
    return this;
  }

  public Sentence addScoredWordsItem(Object scoredWordsItem) {
    if (this.scoredWords == null) {
      this.scoredWords = new ArrayList<>();
    }
    this.scoredWords.add(scoredWordsItem);
    return this;
  }

  /**
   * Get scoredWords
   * @return scoredWords
   */
  @javax.annotation.Nullable
  public List<Object> getScoredWords() {
    return scoredWords;
  }

  public void setScoredWords(List<Object> scoredWords) {
    this.scoredWords = scoredWords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sentence sentence = (Sentence) o;
    return Objects.equals(this.display, sentence.display) &&
        Objects.equals(this.documentMetadataId, sentence.documentMetadataId) &&
        Objects.equals(this.hasScoredWords, sentence.hasScoredWords) &&
        Objects.equals(this.id, sentence.id) &&
        Objects.equals(this.rating, sentence.rating) &&
        Objects.equals(this.scoredWords, sentence.scoredWords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(display, documentMetadataId, hasScoredWords, id, rating, scoredWords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sentence {\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    documentMetadataId: ").append(toIndentedString(documentMetadataId)).append("\n");
    sb.append("    hasScoredWords: ").append(toIndentedString(hasScoredWords)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    scoredWords: ").append(toIndentedString(scoredWords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display");
    openapiFields.add("documentMetadataId");
    openapiFields.add("hasScoredWords");
    openapiFields.add("id");
    openapiFields.add("rating");
    openapiFields.add("scoredWords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sentence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sentence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sentence is not found in the empty JSON string", Sentence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sentence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sentence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scoredWords") != null && !jsonObj.get("scoredWords").isJsonNull() && !jsonObj.get("scoredWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoredWords` to be an array in the JSON string but got `%s`", jsonObj.get("scoredWords").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sentence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sentence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sentence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sentence.class));

       return (TypeAdapter<T>) new TypeAdapter<Sentence>() {
           @Override
           public void write(JsonWriter out, Sentence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sentence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sentence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sentence
   * @throws IOException if the JSON string is invalid with respect to Sentence
   */
  public static Sentence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sentence.class);
  }

  /**
   * Convert an instance of Sentence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

