# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.news_get200_response_br import NewsGet200ResponseBr
from openapi_server.models.news_get200_response_common import NewsGet200ResponseCommon
from openapi_server import util


class NewsGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, br: NewsGet200ResponseBr=None, common: NewsGet200ResponseCommon=None, loginmessage: NewsGet200ResponseCommon=None, survivalmessage: NewsGet200ResponseCommon=None):
        """NewsGet200Response - a model defined in OpenAPI

        :param br: The br of this NewsGet200Response.
        :param common: The common of this NewsGet200Response.
        :param loginmessage: The loginmessage of this NewsGet200Response.
        :param survivalmessage: The survivalmessage of this NewsGet200Response.
        """
        self.openapi_types = {
            'br': NewsGet200ResponseBr,
            'common': NewsGet200ResponseCommon,
            'loginmessage': NewsGet200ResponseCommon,
            'survivalmessage': NewsGet200ResponseCommon
        }

        self.attribute_map = {
            'br': 'br',
            'common': 'common',
            'loginmessage': 'loginmessage',
            'survivalmessage': 'survivalmessage'
        }

        self._br = br
        self._common = common
        self._loginmessage = loginmessage
        self._survivalmessage = survivalmessage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewsGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _news_get_200_response of this NewsGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def br(self):
        """Gets the br of this NewsGet200Response.


        :return: The br of this NewsGet200Response.
        :rtype: NewsGet200ResponseBr
        """
        return self._br

    @br.setter
    def br(self, br):
        """Sets the br of this NewsGet200Response.


        :param br: The br of this NewsGet200Response.
        :type br: NewsGet200ResponseBr
        """

        self._br = br

    @property
    def common(self):
        """Gets the common of this NewsGet200Response.


        :return: The common of this NewsGet200Response.
        :rtype: NewsGet200ResponseCommon
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this NewsGet200Response.


        :param common: The common of this NewsGet200Response.
        :type common: NewsGet200ResponseCommon
        """

        self._common = common

    @property
    def loginmessage(self):
        """Gets the loginmessage of this NewsGet200Response.


        :return: The loginmessage of this NewsGet200Response.
        :rtype: NewsGet200ResponseCommon
        """
        return self._loginmessage

    @loginmessage.setter
    def loginmessage(self, loginmessage):
        """Sets the loginmessage of this NewsGet200Response.


        :param loginmessage: The loginmessage of this NewsGet200Response.
        :type loginmessage: NewsGet200ResponseCommon
        """

        self._loginmessage = loginmessage

    @property
    def survivalmessage(self):
        """Gets the survivalmessage of this NewsGet200Response.


        :return: The survivalmessage of this NewsGet200Response.
        :rtype: NewsGet200ResponseCommon
        """
        return self._survivalmessage

    @survivalmessage.setter
    def survivalmessage(self, survivalmessage):
        """Sets the survivalmessage of this NewsGet200Response.


        :param survivalmessage: The survivalmessage of this NewsGet200Response.
        :type survivalmessage: NewsGet200ResponseCommon
        """

        self._survivalmessage = survivalmessage
