/**
 * FORTNITE REST API
 * REST API about Fortnite game
 *
 * The version of the OpenAPI document: 3.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_stats_id__plateform___id__get_200_response_group_duo.h
 *
 * 
 */

#ifndef OAI_stats_id__plateform___id__get_200_response_group_duo_H
#define OAI_stats_id__plateform___id__get_200_response_group_duo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_stats_id__plateform___id__get_200_response_group_duo : public OAIObject {
public:
    OAI_stats_id__plateform___id__get_200_response_group_duo();
    OAI_stats_id__plateform___id__get_200_response_group_duo(QString json);
    ~OAI_stats_id__plateform___id__get_200_response_group_duo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getKD() const;
    void setKD(const double &k_d);
    bool is_k_d_Set() const;
    bool is_k_d_Valid() const;

    qint32 getKills() const;
    void setKills(const qint32 &kills);
    bool is_kills_Set() const;
    bool is_kills_Valid() const;

    QString getKillsPerMatch() const;
    void setKillsPerMatch(const QString &kills_per_match);
    bool is_kills_per_match_Set() const;
    bool is_kills_per_match_Valid() const;

    QString getKillsPerMin() const;
    void setKillsPerMin(const QString &kills_per_min);
    bool is_kills_per_min_Set() const;
    bool is_kills_per_min_Valid() const;

    qint32 getScore() const;
    void setScore(const qint32 &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getTimePlayed() const;
    void setTimePlayed(const QString &time_played);
    bool is_time_played_Set() const;
    bool is_time_played_Valid() const;

    qint32 getTop10() const;
    void setTop10(const qint32 &top10);
    bool is_top10_Set() const;
    bool is_top10_Valid() const;

    qint32 getTop12() const;
    void setTop12(const qint32 &top12);
    bool is_top12_Set() const;
    bool is_top12_Valid() const;

    qint32 getTop25() const;
    void setTop25(const qint32 &top25);
    bool is_top25_Set() const;
    bool is_top25_Valid() const;

    qint32 getTop3() const;
    void setTop3(const qint32 &top3);
    bool is_top3_Set() const;
    bool is_top3_Valid() const;

    qint32 getTop5() const;
    void setTop5(const qint32 &top5);
    bool is_top5_Set() const;
    bool is_top5_Valid() const;

    qint32 getTop6() const;
    void setTop6(const qint32 &top6);
    bool is_top6_Set() const;
    bool is_top6_Valid() const;

    double getWin() const;
    void setWin(const double &win);
    bool is_win_Set() const;
    bool is_win_Valid() const;

    qint32 getWins() const;
    void setWins(const qint32 &wins);
    bool is_wins_Set() const;
    bool is_wins_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_k_d;
    bool m_k_d_isSet;
    bool m_k_d_isValid;

    qint32 m_kills;
    bool m_kills_isSet;
    bool m_kills_isValid;

    QString m_kills_per_match;
    bool m_kills_per_match_isSet;
    bool m_kills_per_match_isValid;

    QString m_kills_per_min;
    bool m_kills_per_min_isSet;
    bool m_kills_per_min_isValid;

    qint32 m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_time_played;
    bool m_time_played_isSet;
    bool m_time_played_isValid;

    qint32 m_top10;
    bool m_top10_isSet;
    bool m_top10_isValid;

    qint32 m_top12;
    bool m_top12_isSet;
    bool m_top12_isValid;

    qint32 m_top25;
    bool m_top25_isSet;
    bool m_top25_isValid;

    qint32 m_top3;
    bool m_top3_isSet;
    bool m_top3_isValid;

    qint32 m_top5;
    bool m_top5_isSet;
    bool m_top5_isValid;

    qint32 m_top6;
    bool m_top6_isSet;
    bool m_top6_isValid;

    double m_win;
    bool m_win_isSet;
    bool m_win_isValid;

    qint32 m_wins;
    bool m_wins_isSet;
    bool m_wins_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_stats_id__plateform___id__get_200_response_group_duo)

#endif // OAI_stats_id__plateform___id__get_200_response_group_duo_H
