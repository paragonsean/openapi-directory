/**
 * FORTNITE REST API
 * REST API about Fortnite game
 *
 * The version of the OpenAPI document: 3.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_stats_id__plateform___id__get_200_response_group_duo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_stats_id__plateform___id__get_200_response_group_duo::OAI_stats_id__plateform___id__get_200_response_group_duo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_stats_id__plateform___id__get_200_response_group_duo::OAI_stats_id__plateform___id__get_200_response_group_duo() {
    this->initializeModel();
}

OAI_stats_id__plateform___id__get_200_response_group_duo::~OAI_stats_id__plateform___id__get_200_response_group_duo() {}

void OAI_stats_id__plateform___id__get_200_response_group_duo::initializeModel() {

    m_k_d_isSet = false;
    m_k_d_isValid = false;

    m_kills_isSet = false;
    m_kills_isValid = false;

    m_kills_per_match_isSet = false;
    m_kills_per_match_isValid = false;

    m_kills_per_min_isSet = false;
    m_kills_per_min_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_time_played_isSet = false;
    m_time_played_isValid = false;

    m_top10_isSet = false;
    m_top10_isValid = false;

    m_top12_isSet = false;
    m_top12_isValid = false;

    m_top25_isSet = false;
    m_top25_isValid = false;

    m_top3_isSet = false;
    m_top3_isValid = false;

    m_top5_isSet = false;
    m_top5_isValid = false;

    m_top6_isSet = false;
    m_top6_isValid = false;

    m_win_isSet = false;
    m_win_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAI_stats_id__plateform___id__get_200_response_group_duo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_stats_id__plateform___id__get_200_response_group_duo::fromJsonObject(QJsonObject json) {

    m_k_d_isValid = ::OpenAPI::fromJsonValue(m_k_d, json[QString("k/d")]);
    m_k_d_isSet = !json[QString("k/d")].isNull() && m_k_d_isValid;

    m_kills_isValid = ::OpenAPI::fromJsonValue(m_kills, json[QString("kills")]);
    m_kills_isSet = !json[QString("kills")].isNull() && m_kills_isValid;

    m_kills_per_match_isValid = ::OpenAPI::fromJsonValue(m_kills_per_match, json[QString("killsPerMatch")]);
    m_kills_per_match_isSet = !json[QString("killsPerMatch")].isNull() && m_kills_per_match_isValid;

    m_kills_per_min_isValid = ::OpenAPI::fromJsonValue(m_kills_per_min, json[QString("killsPerMin")]);
    m_kills_per_min_isSet = !json[QString("killsPerMin")].isNull() && m_kills_per_min_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_time_played_isValid = ::OpenAPI::fromJsonValue(m_time_played, json[QString("timePlayed")]);
    m_time_played_isSet = !json[QString("timePlayed")].isNull() && m_time_played_isValid;

    m_top10_isValid = ::OpenAPI::fromJsonValue(m_top10, json[QString("top10")]);
    m_top10_isSet = !json[QString("top10")].isNull() && m_top10_isValid;

    m_top12_isValid = ::OpenAPI::fromJsonValue(m_top12, json[QString("top12")]);
    m_top12_isSet = !json[QString("top12")].isNull() && m_top12_isValid;

    m_top25_isValid = ::OpenAPI::fromJsonValue(m_top25, json[QString("top25")]);
    m_top25_isSet = !json[QString("top25")].isNull() && m_top25_isValid;

    m_top3_isValid = ::OpenAPI::fromJsonValue(m_top3, json[QString("top3")]);
    m_top3_isSet = !json[QString("top3")].isNull() && m_top3_isValid;

    m_top5_isValid = ::OpenAPI::fromJsonValue(m_top5, json[QString("top5")]);
    m_top5_isSet = !json[QString("top5")].isNull() && m_top5_isValid;

    m_top6_isValid = ::OpenAPI::fromJsonValue(m_top6, json[QString("top6")]);
    m_top6_isSet = !json[QString("top6")].isNull() && m_top6_isValid;

    m_win_isValid = ::OpenAPI::fromJsonValue(m_win, json[QString("win%")]);
    m_win_isSet = !json[QString("win%")].isNull() && m_win_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("wins")]);
    m_wins_isSet = !json[QString("wins")].isNull() && m_wins_isValid;
}

QString OAI_stats_id__plateform___id__get_200_response_group_duo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_stats_id__plateform___id__get_200_response_group_duo::asJsonObject() const {
    QJsonObject obj;
    if (m_k_d_isSet) {
        obj.insert(QString("k/d"), ::OpenAPI::toJsonValue(m_k_d));
    }
    if (m_kills_isSet) {
        obj.insert(QString("kills"), ::OpenAPI::toJsonValue(m_kills));
    }
    if (m_kills_per_match_isSet) {
        obj.insert(QString("killsPerMatch"), ::OpenAPI::toJsonValue(m_kills_per_match));
    }
    if (m_kills_per_min_isSet) {
        obj.insert(QString("killsPerMin"), ::OpenAPI::toJsonValue(m_kills_per_min));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_time_played_isSet) {
        obj.insert(QString("timePlayed"), ::OpenAPI::toJsonValue(m_time_played));
    }
    if (m_top10_isSet) {
        obj.insert(QString("top10"), ::OpenAPI::toJsonValue(m_top10));
    }
    if (m_top12_isSet) {
        obj.insert(QString("top12"), ::OpenAPI::toJsonValue(m_top12));
    }
    if (m_top25_isSet) {
        obj.insert(QString("top25"), ::OpenAPI::toJsonValue(m_top25));
    }
    if (m_top3_isSet) {
        obj.insert(QString("top3"), ::OpenAPI::toJsonValue(m_top3));
    }
    if (m_top5_isSet) {
        obj.insert(QString("top5"), ::OpenAPI::toJsonValue(m_top5));
    }
    if (m_top6_isSet) {
        obj.insert(QString("top6"), ::OpenAPI::toJsonValue(m_top6));
    }
    if (m_win_isSet) {
        obj.insert(QString("win%"), ::OpenAPI::toJsonValue(m_win));
    }
    if (m_wins_isSet) {
        obj.insert(QString("wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

double OAI_stats_id__plateform___id__get_200_response_group_duo::getKD() const {
    return m_k_d;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setKD(const double &k_d) {
    m_k_d = k_d;
    m_k_d_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_k_d_Set() const{
    return m_k_d_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_k_d_Valid() const{
    return m_k_d_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getKills() const {
    return m_kills;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setKills(const qint32 &kills) {
    m_kills = kills;
    m_kills_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_kills_Set() const{
    return m_kills_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_kills_Valid() const{
    return m_kills_isValid;
}

QString OAI_stats_id__plateform___id__get_200_response_group_duo::getKillsPerMatch() const {
    return m_kills_per_match;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setKillsPerMatch(const QString &kills_per_match) {
    m_kills_per_match = kills_per_match;
    m_kills_per_match_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_kills_per_match_Set() const{
    return m_kills_per_match_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_kills_per_match_Valid() const{
    return m_kills_per_match_isValid;
}

QString OAI_stats_id__plateform___id__get_200_response_group_duo::getKillsPerMin() const {
    return m_kills_per_min;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setKillsPerMin(const QString &kills_per_min) {
    m_kills_per_min = kills_per_min;
    m_kills_per_min_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_kills_per_min_Set() const{
    return m_kills_per_min_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_kills_per_min_Valid() const{
    return m_kills_per_min_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getScore() const {
    return m_score;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_score_Set() const{
    return m_score_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_score_Valid() const{
    return m_score_isValid;
}

QString OAI_stats_id__plateform___id__get_200_response_group_duo::getTimePlayed() const {
    return m_time_played;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setTimePlayed(const QString &time_played) {
    m_time_played = time_played;
    m_time_played_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_time_played_Set() const{
    return m_time_played_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_time_played_Valid() const{
    return m_time_played_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getTop10() const {
    return m_top10;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setTop10(const qint32 &top10) {
    m_top10 = top10;
    m_top10_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top10_Set() const{
    return m_top10_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top10_Valid() const{
    return m_top10_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getTop12() const {
    return m_top12;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setTop12(const qint32 &top12) {
    m_top12 = top12;
    m_top12_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top12_Set() const{
    return m_top12_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top12_Valid() const{
    return m_top12_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getTop25() const {
    return m_top25;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setTop25(const qint32 &top25) {
    m_top25 = top25;
    m_top25_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top25_Set() const{
    return m_top25_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top25_Valid() const{
    return m_top25_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getTop3() const {
    return m_top3;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setTop3(const qint32 &top3) {
    m_top3 = top3;
    m_top3_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top3_Set() const{
    return m_top3_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top3_Valid() const{
    return m_top3_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getTop5() const {
    return m_top5;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setTop5(const qint32 &top5) {
    m_top5 = top5;
    m_top5_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top5_Set() const{
    return m_top5_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top5_Valid() const{
    return m_top5_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getTop6() const {
    return m_top6;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setTop6(const qint32 &top6) {
    m_top6 = top6;
    m_top6_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top6_Set() const{
    return m_top6_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_top6_Valid() const{
    return m_top6_isValid;
}

double OAI_stats_id__plateform___id__get_200_response_group_duo::getWin() const {
    return m_win;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setWin(const double &win) {
    m_win = win;
    m_win_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_win_Set() const{
    return m_win_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_win_Valid() const{
    return m_win_isValid;
}

qint32 OAI_stats_id__plateform___id__get_200_response_group_duo::getWins() const {
    return m_wins;
}
void OAI_stats_id__plateform___id__get_200_response_group_duo::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_k_d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_per_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kills_per_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top12_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top25_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_win_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_stats_id__plateform___id__get_200_response_group_duo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
