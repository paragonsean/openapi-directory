/**
 * FORTNITE REST API
 * REST API about Fortnite game
 *
 * The version of the OpenAPI document: 3.1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_news_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_news_get_200_response::OAI_news_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_news_get_200_response::OAI_news_get_200_response() {
    this->initializeModel();
}

OAI_news_get_200_response::~OAI_news_get_200_response() {}

void OAI_news_get_200_response::initializeModel() {

    m_br_isSet = false;
    m_br_isValid = false;

    m_common_isSet = false;
    m_common_isValid = false;

    m_loginmessage_isSet = false;
    m_loginmessage_isValid = false;

    m_survivalmessage_isSet = false;
    m_survivalmessage_isValid = false;
}

void OAI_news_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_news_get_200_response::fromJsonObject(QJsonObject json) {

    m_br_isValid = ::OpenAPI::fromJsonValue(m_br, json[QString("br")]);
    m_br_isSet = !json[QString("br")].isNull() && m_br_isValid;

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_loginmessage_isValid = ::OpenAPI::fromJsonValue(m_loginmessage, json[QString("loginmessage")]);
    m_loginmessage_isSet = !json[QString("loginmessage")].isNull() && m_loginmessage_isValid;

    m_survivalmessage_isValid = ::OpenAPI::fromJsonValue(m_survivalmessage, json[QString("survivalmessage")]);
    m_survivalmessage_isSet = !json[QString("survivalmessage")].isNull() && m_survivalmessage_isValid;
}

QString OAI_news_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_news_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_br.isSet()) {
        obj.insert(QString("br"), ::OpenAPI::toJsonValue(m_br));
    }
    if (m_common.isSet()) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_loginmessage.isSet()) {
        obj.insert(QString("loginmessage"), ::OpenAPI::toJsonValue(m_loginmessage));
    }
    if (m_survivalmessage.isSet()) {
        obj.insert(QString("survivalmessage"), ::OpenAPI::toJsonValue(m_survivalmessage));
    }
    return obj;
}

OAI_news_get_200_response_br OAI_news_get_200_response::getBr() const {
    return m_br;
}
void OAI_news_get_200_response::setBr(const OAI_news_get_200_response_br &br) {
    m_br = br;
    m_br_isSet = true;
}

bool OAI_news_get_200_response::is_br_Set() const{
    return m_br_isSet;
}

bool OAI_news_get_200_response::is_br_Valid() const{
    return m_br_isValid;
}

OAI_news_get_200_response_common OAI_news_get_200_response::getCommon() const {
    return m_common;
}
void OAI_news_get_200_response::setCommon(const OAI_news_get_200_response_common &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAI_news_get_200_response::is_common_Set() const{
    return m_common_isSet;
}

bool OAI_news_get_200_response::is_common_Valid() const{
    return m_common_isValid;
}

OAI_news_get_200_response_common OAI_news_get_200_response::getLoginmessage() const {
    return m_loginmessage;
}
void OAI_news_get_200_response::setLoginmessage(const OAI_news_get_200_response_common &loginmessage) {
    m_loginmessage = loginmessage;
    m_loginmessage_isSet = true;
}

bool OAI_news_get_200_response::is_loginmessage_Set() const{
    return m_loginmessage_isSet;
}

bool OAI_news_get_200_response::is_loginmessage_Valid() const{
    return m_loginmessage_isValid;
}

OAI_news_get_200_response_common OAI_news_get_200_response::getSurvivalmessage() const {
    return m_survivalmessage;
}
void OAI_news_get_200_response::setSurvivalmessage(const OAI_news_get_200_response_common &survivalmessage) {
    m_survivalmessage = survivalmessage;
    m_survivalmessage_isSet = true;
}

bool OAI_news_get_200_response::is_survivalmessage_Set() const{
    return m_survivalmessage_isSet;
}

bool OAI_news_get_200_response::is_survivalmessage_Valid() const{
    return m_survivalmessage_isValid;
}

bool OAI_news_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_br.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_common.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loginmessage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_survivalmessage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_news_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
