/**
 * Airports API v2
 * Returns all airports
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirportDetailsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirportDetailsDto::OAIAirportDetailsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirportDetailsDto::OAIAirportDetailsDto() {
    this->initializeModel();
}

OAIAirportDetailsDto::~OAIAirportDetailsDto() {}

void OAIAirportDetailsDto::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_geo_coordinates_isSet = false;
    m_geo_coordinates_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inbound_routes_isSet = false;
    m_inbound_routes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outbound_routes_isSet = false;
    m_outbound_routes_isValid = false;
}

void OAIAirportDetailsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirportDetailsDto::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_geo_coordinates_isValid = ::OpenAPI::fromJsonValue(m_geo_coordinates, json[QString("geoCoordinates")]);
    m_geo_coordinates_isSet = !json[QString("geoCoordinates")].isNull() && m_geo_coordinates_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inbound_routes_isValid = ::OpenAPI::fromJsonValue(m_inbound_routes, json[QString("inboundRoutes")]);
    m_inbound_routes_isSet = !json[QString("inboundRoutes")].isNull() && m_inbound_routes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outbound_routes_isValid = ::OpenAPI::fromJsonValue(m_outbound_routes, json[QString("outboundRoutes")]);
    m_outbound_routes_isSet = !json[QString("outboundRoutes")].isNull() && m_outbound_routes_isValid;
}

QString OAIAirportDetailsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirportDetailsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_geo_coordinates.isSet()) {
        obj.insert(QString("geoCoordinates"), ::OpenAPI::toJsonValue(m_geo_coordinates));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inbound_routes.isSet()) {
        obj.insert(QString("inboundRoutes"), ::OpenAPI::toJsonValue(m_inbound_routes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outbound_routes.isSet()) {
        obj.insert(QString("outboundRoutes"), ::OpenAPI::toJsonValue(m_outbound_routes));
    }
    return obj;
}

QString OAIAirportDetailsDto::getCity() const {
    return m_city;
}
void OAIAirportDetailsDto::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAirportDetailsDto::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAirportDetailsDto::is_city_Valid() const{
    return m_city_isValid;
}

OAICountry OAIAirportDetailsDto::getCountry() const {
    return m_country;
}
void OAIAirportDetailsDto::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAirportDetailsDto::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAirportDetailsDto::is_country_Valid() const{
    return m_country_isValid;
}

OAIGeoCoordinates OAIAirportDetailsDto::getGeoCoordinates() const {
    return m_geo_coordinates;
}
void OAIAirportDetailsDto::setGeoCoordinates(const OAIGeoCoordinates &geo_coordinates) {
    m_geo_coordinates = geo_coordinates;
    m_geo_coordinates_isSet = true;
}

bool OAIAirportDetailsDto::is_geo_coordinates_Set() const{
    return m_geo_coordinates_isSet;
}

bool OAIAirportDetailsDto::is_geo_coordinates_Valid() const{
    return m_geo_coordinates_isValid;
}

QString OAIAirportDetailsDto::getId() const {
    return m_id;
}
void OAIAirportDetailsDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAirportDetailsDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAirportDetailsDto::is_id_Valid() const{
    return m_id_isValid;
}

OAILink OAIAirportDetailsDto::getInboundRoutes() const {
    return m_inbound_routes;
}
void OAIAirportDetailsDto::setInboundRoutes(const OAILink &inbound_routes) {
    m_inbound_routes = inbound_routes;
    m_inbound_routes_isSet = true;
}

bool OAIAirportDetailsDto::is_inbound_routes_Set() const{
    return m_inbound_routes_isSet;
}

bool OAIAirportDetailsDto::is_inbound_routes_Valid() const{
    return m_inbound_routes_isValid;
}

QString OAIAirportDetailsDto::getName() const {
    return m_name;
}
void OAIAirportDetailsDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAirportDetailsDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAirportDetailsDto::is_name_Valid() const{
    return m_name_isValid;
}

OAILink OAIAirportDetailsDto::getOutboundRoutes() const {
    return m_outbound_routes;
}
void OAIAirportDetailsDto::setOutboundRoutes(const OAILink &outbound_routes) {
    m_outbound_routes = outbound_routes;
    m_outbound_routes_isSet = true;
}

bool OAIAirportDetailsDto::is_outbound_routes_Set() const{
    return m_outbound_routes_isSet;
}

bool OAIAirportDetailsDto::is_outbound_routes_Valid() const{
    return m_outbound_routes_isValid;
}

bool OAIAirportDetailsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_routes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_routes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirportDetailsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
