/**
 * Airports API v2
 * Returns all airports
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAirportDetailsDto.h"
#include "OAIAirportDto.h"
#include "OAIBadRequestResponse.h"
#include "OAIInternalServerErrorResponse.h"
#include "OAINearestAirportDto.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void 58d8bcb7a9e6240e200cff24();

    /**
    * @param[in]  id QString [required]
    */
    virtual void 58d8bcb7a9e6240e200cff25(const QString &id);

    /**
    * @param[in]  country_code QString [required]
    */
    virtual void 58d8bcb8a9e6240e200cff26(const QString &country_code);

    /**
    * @param[in]  latitude QString [optional]
    * @param[in]  longitude QString [optional]
    * @param[in]  max_distance_in_km QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void 58d8bcb8a9e6240e200cff27(const ::OpenAPI::OptionalParam<QString> &latitude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &longitude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_distance_in_km = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_distance_in_km QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void 58d8bcb8a9e6240e200cff28(const QString &id, const ::OpenAPI::OptionalParam<QString> &max_distance_in_km = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void 58d8bcb7a9e6240e200cff24Callback(OAIHttpRequestWorker *worker);
    void 58d8bcb7a9e6240e200cff25Callback(OAIHttpRequestWorker *worker);
    void 58d8bcb8a9e6240e200cff26Callback(OAIHttpRequestWorker *worker);
    void 58d8bcb8a9e6240e200cff27Callback(OAIHttpRequestWorker *worker);
    void 58d8bcb8a9e6240e200cff28Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void 58d8bcb7a9e6240e200cff24Signal(QList<OAIAirportDto> summary);
    void 58d8bcb7a9e6240e200cff25Signal(OAIAirportDetailsDto summary);
    void 58d8bcb8a9e6240e200cff26Signal(QList<OAIAirportDto> summary);
    void 58d8bcb8a9e6240e200cff27Signal(QList<OAINearestAirportDto> summary);
    void 58d8bcb8a9e6240e200cff28Signal(QList<OAINearestAirportDto> summary);


    void 58d8bcb7a9e6240e200cff24SignalFull(OAIHttpRequestWorker *worker, QList<OAIAirportDto> summary);
    void 58d8bcb7a9e6240e200cff25SignalFull(OAIHttpRequestWorker *worker, OAIAirportDetailsDto summary);
    void 58d8bcb8a9e6240e200cff26SignalFull(OAIHttpRequestWorker *worker, QList<OAIAirportDto> summary);
    void 58d8bcb8a9e6240e200cff27SignalFull(OAIHttpRequestWorker *worker, QList<OAINearestAirportDto> summary);
    void 58d8bcb8a9e6240e200cff28SignalFull(OAIHttpRequestWorker *worker, QList<OAINearestAirportDto> summary);

    Q_DECL_DEPRECATED_X("Use 58d8bcb7a9e6240e200cff24SignalError() instead")
    void 58d8bcb7a9e6240e200cff24SignalE(QList<OAIAirportDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb7a9e6240e200cff24SignalError(QList<OAIAirportDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb7a9e6240e200cff25SignalError() instead")
    void 58d8bcb7a9e6240e200cff25SignalE(OAIAirportDetailsDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb7a9e6240e200cff25SignalError(OAIAirportDetailsDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb8a9e6240e200cff26SignalError() instead")
    void 58d8bcb8a9e6240e200cff26SignalE(QList<OAIAirportDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb8a9e6240e200cff26SignalError(QList<OAIAirportDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb8a9e6240e200cff27SignalError() instead")
    void 58d8bcb8a9e6240e200cff27SignalE(QList<OAINearestAirportDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb8a9e6240e200cff27SignalError(QList<OAINearestAirportDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb8a9e6240e200cff28SignalError() instead")
    void 58d8bcb8a9e6240e200cff28SignalE(QList<OAINearestAirportDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb8a9e6240e200cff28SignalError(QList<OAINearestAirportDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use 58d8bcb7a9e6240e200cff24SignalErrorFull() instead")
    void 58d8bcb7a9e6240e200cff24SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb7a9e6240e200cff24SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb7a9e6240e200cff25SignalErrorFull() instead")
    void 58d8bcb7a9e6240e200cff25SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb7a9e6240e200cff25SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb8a9e6240e200cff26SignalErrorFull() instead")
    void 58d8bcb8a9e6240e200cff26SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb8a9e6240e200cff26SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb8a9e6240e200cff27SignalErrorFull() instead")
    void 58d8bcb8a9e6240e200cff27SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb8a9e6240e200cff27SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 58d8bcb8a9e6240e200cff28SignalErrorFull() instead")
    void 58d8bcb8a9e6240e200cff28SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 58d8bcb8a9e6240e200cff28SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
