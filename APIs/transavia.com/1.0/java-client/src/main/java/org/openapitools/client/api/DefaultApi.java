/*
 * Airports API v2
 * Returns all airports
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AirportDetailsDto;
import org.openapitools.client.model.AirportDto;
import org.openapitools.client.model.BadRequestResponse;
import org.openapitools.client.model.InternalServerErrorResponse;
import org.openapitools.client.model.NearestAirportDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for call58d8bcb7a9e6240e200cff24
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb7a9e6240e200cff24Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call58d8bcb7a9e6240e200cff24ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return call58d8bcb7a9e6240e200cff24Call(_callback);

    }

    /**
     * All airports
     * Retrieve all airports.
     * @return List&lt;AirportDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public List<AirportDto> call58d8bcb7a9e6240e200cff24() throws ApiException {
        ApiResponse<List<AirportDto>> localVarResp = call58d8bcb7a9e6240e200cff24WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * All airports
     * Retrieve all airports.
     * @return ApiResponse&lt;List&lt;AirportDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AirportDto>> call58d8bcb7a9e6240e200cff24WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = call58d8bcb7a9e6240e200cff24ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AirportDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All airports (asynchronously)
     * Retrieve all airports.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb7a9e6240e200cff24Async(final ApiCallback<List<AirportDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = call58d8bcb7a9e6240e200cff24ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AirportDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call58d8bcb7a9e6240e200cff25
     * @param id Airport code (3-character IATA code). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb7a9e6240e200cff25Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call58d8bcb7a9e6240e200cff25ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling call58d8bcb7a9e6240e200cff25(Async)");
        }

        return call58d8bcb7a9e6240e200cff25Call(id, _callback);

    }

    /**
     * Airport by id.
     * Retrieve airport by id.
     * @param id Airport code (3-character IATA code). (required)
     * @return AirportDetailsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public AirportDetailsDto call58d8bcb7a9e6240e200cff25(String id) throws ApiException {
        ApiResponse<AirportDetailsDto> localVarResp = call58d8bcb7a9e6240e200cff25WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Airport by id.
     * Retrieve airport by id.
     * @param id Airport code (3-character IATA code). (required)
     * @return ApiResponse&lt;AirportDetailsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirportDetailsDto> call58d8bcb7a9e6240e200cff25WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = call58d8bcb7a9e6240e200cff25ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AirportDetailsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Airport by id. (asynchronously)
     * Retrieve airport by id.
     * @param id Airport code (3-character IATA code). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb7a9e6240e200cff25Async(String id, final ApiCallback<AirportDetailsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = call58d8bcb7a9e6240e200cff25ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AirportDetailsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call58d8bcb8a9e6240e200cff26
     * @param countryCode Comma-separated list of country codes (2-character ISO 3166-1). More than 3 country codes is not allowed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb8a9e6240e200cff26Call(String countryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countrycode/{countryCode}"
            .replace("{" + "countryCode" + "}", localVarApiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call58d8bcb8a9e6240e200cff26ValidateBeforeCall(String countryCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling call58d8bcb8a9e6240e200cff26(Async)");
        }

        return call58d8bcb8a9e6240e200cff26Call(countryCode, _callback);

    }

    /**
     * Airport(s) by country code.
     * Retrieve airports by country code.
     * @param countryCode Comma-separated list of country codes (2-character ISO 3166-1). More than 3 country codes is not allowed. (required)
     * @return List&lt;AirportDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public List<AirportDto> call58d8bcb8a9e6240e200cff26(String countryCode) throws ApiException {
        ApiResponse<List<AirportDto>> localVarResp = call58d8bcb8a9e6240e200cff26WithHttpInfo(countryCode);
        return localVarResp.getData();
    }

    /**
     * Airport(s) by country code.
     * Retrieve airports by country code.
     * @param countryCode Comma-separated list of country codes (2-character ISO 3166-1). More than 3 country codes is not allowed. (required)
     * @return ApiResponse&lt;List&lt;AirportDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AirportDto>> call58d8bcb8a9e6240e200cff26WithHttpInfo(String countryCode) throws ApiException {
        okhttp3.Call localVarCall = call58d8bcb8a9e6240e200cff26ValidateBeforeCall(countryCode, null);
        Type localVarReturnType = new TypeToken<List<AirportDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Airport(s) by country code. (asynchronously)
     * Retrieve airports by country code.
     * @param countryCode Comma-separated list of country codes (2-character ISO 3166-1). More than 3 country codes is not allowed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb8a9e6240e200cff26Async(String countryCode, final ApiCallback<List<AirportDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = call58d8bcb8a9e6240e200cff26ValidateBeforeCall(countryCode, _callback);
        Type localVarReturnType = new TypeToken<List<AirportDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call58d8bcb8a9e6240e200cff27
     * @param latitude Latitude in decimals, lower than -90.0 and higher than 90.0 is not allowed. (optional)
     * @param longitude Longitude in decimals, lower than -180.0 and higher than 180.0 is not allowed. (optional)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb8a9e6240e200cff27Call(String latitude, String longitude, String maxDistanceInKm, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nearest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (maxDistanceInKm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistanceInKm", maxDistanceInKm));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call58d8bcb8a9e6240e200cff27ValidateBeforeCall(String latitude, String longitude, String maxDistanceInKm, String limit, final ApiCallback _callback) throws ApiException {
        return call58d8bcb8a9e6240e200cff27Call(latitude, longitude, maxDistanceInKm, limit, _callback);

    }

    /**
     * Nearest airport(s) by geo coordinates.
     * Retrieve nearest airports by geo coordinates (latitude/longitude).
     * @param latitude Latitude in decimals, lower than -90.0 and higher than 90.0 is not allowed. (optional)
     * @param longitude Longitude in decimals, lower than -180.0 and higher than 180.0 is not allowed. (optional)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @return List&lt;NearestAirportDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public List<NearestAirportDto> call58d8bcb8a9e6240e200cff27(String latitude, String longitude, String maxDistanceInKm, String limit) throws ApiException {
        ApiResponse<List<NearestAirportDto>> localVarResp = call58d8bcb8a9e6240e200cff27WithHttpInfo(latitude, longitude, maxDistanceInKm, limit);
        return localVarResp.getData();
    }

    /**
     * Nearest airport(s) by geo coordinates.
     * Retrieve nearest airports by geo coordinates (latitude/longitude).
     * @param latitude Latitude in decimals, lower than -90.0 and higher than 90.0 is not allowed. (optional)
     * @param longitude Longitude in decimals, lower than -180.0 and higher than 180.0 is not allowed. (optional)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @return ApiResponse&lt;List&lt;NearestAirportDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NearestAirportDto>> call58d8bcb8a9e6240e200cff27WithHttpInfo(String latitude, String longitude, String maxDistanceInKm, String limit) throws ApiException {
        okhttp3.Call localVarCall = call58d8bcb8a9e6240e200cff27ValidateBeforeCall(latitude, longitude, maxDistanceInKm, limit, null);
        Type localVarReturnType = new TypeToken<List<NearestAirportDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Nearest airport(s) by geo coordinates. (asynchronously)
     * Retrieve nearest airports by geo coordinates (latitude/longitude).
     * @param latitude Latitude in decimals, lower than -90.0 and higher than 90.0 is not allowed. (optional)
     * @param longitude Longitude in decimals, lower than -180.0 and higher than 180.0 is not allowed. (optional)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb8a9e6240e200cff27Async(String latitude, String longitude, String maxDistanceInKm, String limit, final ApiCallback<List<NearestAirportDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = call58d8bcb8a9e6240e200cff27ValidateBeforeCall(latitude, longitude, maxDistanceInKm, limit, _callback);
        Type localVarReturnType = new TypeToken<List<NearestAirportDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call58d8bcb8a9e6240e200cff28
     * @param id Airport (IATA code) to search nearest airports for. (required)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb8a9e6240e200cff28Call(String id, String maxDistanceInKm, String limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nearest/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxDistanceInKm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistanceInKm", maxDistanceInKm));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call58d8bcb8a9e6240e200cff28ValidateBeforeCall(String id, String maxDistanceInKm, String limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling call58d8bcb8a9e6240e200cff28(Async)");
        }

        return call58d8bcb8a9e6240e200cff28Call(id, maxDistanceInKm, limit, _callback);

    }

    /**
     * Nearest airport(s) by airport id.
     * Retrieve nearest airports by station id.
     * @param id Airport (IATA code) to search nearest airports for. (required)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @return List&lt;NearestAirportDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public List<NearestAirportDto> call58d8bcb8a9e6240e200cff28(String id, String maxDistanceInKm, String limit) throws ApiException {
        ApiResponse<List<NearestAirportDto>> localVarResp = call58d8bcb8a9e6240e200cff28WithHttpInfo(id, maxDistanceInKm, limit);
        return localVarResp.getData();
    }

    /**
     * Nearest airport(s) by airport id.
     * Retrieve nearest airports by station id.
     * @param id Airport (IATA code) to search nearest airports for. (required)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @return ApiResponse&lt;List&lt;NearestAirportDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NearestAirportDto>> call58d8bcb8a9e6240e200cff28WithHttpInfo(String id, String maxDistanceInKm, String limit) throws ApiException {
        okhttp3.Call localVarCall = call58d8bcb8a9e6240e200cff28ValidateBeforeCall(id, maxDistanceInKm, limit, null);
        Type localVarReturnType = new TypeToken<List<NearestAirportDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Nearest airport(s) by airport id. (asynchronously)
     * Retrieve nearest airports by station id.
     * @param id Airport (IATA code) to search nearest airports for. (required)
     * @param maxDistanceInKm Maximum distance in kilometers, lower than 1 and higher than 500 is not allowed. If not set, max value is applied. (optional)
     * @param limit Limits the result, lower than 0 is not allowed. If not set, the result is not limited. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call58d8bcb8a9e6240e200cff28Async(String id, String maxDistanceInKm, String limit, final ApiCallback<List<NearestAirportDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = call58d8bcb8a9e6240e200cff28ValidateBeforeCall(id, maxDistanceInKm, limit, _callback);
        Type localVarReturnType = new TypeToken<List<NearestAirportDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
