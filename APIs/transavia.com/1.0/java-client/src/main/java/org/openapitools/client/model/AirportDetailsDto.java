/*
 * Airports API v2
 * Returns all airports
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.GeoCoordinates;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AirportDetailsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:16.902204-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirportDetailsDto {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_GEO_COORDINATES = "geoCoordinates";
  @SerializedName(SERIALIZED_NAME_GEO_COORDINATES)
  private GeoCoordinates geoCoordinates;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INBOUND_ROUTES = "inboundRoutes";
  @SerializedName(SERIALIZED_NAME_INBOUND_ROUTES)
  private Link inboundRoutes;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTBOUND_ROUTES = "outboundRoutes";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_ROUTES)
  private Link outboundRoutes;

  public AirportDetailsDto() {
  }

  public AirportDetailsDto city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City where the airport is located.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public AirportDetailsDto country(Country country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public Country getCountry() {
    return country;
  }

  public void setCountry(Country country) {
    this.country = country;
  }


  public AirportDetailsDto geoCoordinates(GeoCoordinates geoCoordinates) {
    this.geoCoordinates = geoCoordinates;
    return this;
  }

  /**
   * Get geoCoordinates
   * @return geoCoordinates
   */
  @javax.annotation.Nullable
  public GeoCoordinates getGeoCoordinates() {
    return geoCoordinates;
  }

  public void setGeoCoordinates(GeoCoordinates geoCoordinates) {
    this.geoCoordinates = geoCoordinates;
  }


  public AirportDetailsDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AirportDetailsDto inboundRoutes(Link inboundRoutes) {
    this.inboundRoutes = inboundRoutes;
    return this;
  }

  /**
   * Get inboundRoutes
   * @return inboundRoutes
   */
  @javax.annotation.Nullable
  public Link getInboundRoutes() {
    return inboundRoutes;
  }

  public void setInboundRoutes(Link inboundRoutes) {
    this.inboundRoutes = inboundRoutes;
  }


  public AirportDetailsDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the airport.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AirportDetailsDto outboundRoutes(Link outboundRoutes) {
    this.outboundRoutes = outboundRoutes;
    return this;
  }

  /**
   * Get outboundRoutes
   * @return outboundRoutes
   */
  @javax.annotation.Nullable
  public Link getOutboundRoutes() {
    return outboundRoutes;
  }

  public void setOutboundRoutes(Link outboundRoutes) {
    this.outboundRoutes = outboundRoutes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirportDetailsDto airportDetailsDto = (AirportDetailsDto) o;
    return Objects.equals(this.city, airportDetailsDto.city) &&
        Objects.equals(this.country, airportDetailsDto.country) &&
        Objects.equals(this.geoCoordinates, airportDetailsDto.geoCoordinates) &&
        Objects.equals(this.id, airportDetailsDto.id) &&
        Objects.equals(this.inboundRoutes, airportDetailsDto.inboundRoutes) &&
        Objects.equals(this.name, airportDetailsDto.name) &&
        Objects.equals(this.outboundRoutes, airportDetailsDto.outboundRoutes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, geoCoordinates, id, inboundRoutes, name, outboundRoutes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirportDetailsDto {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    geoCoordinates: ").append(toIndentedString(geoCoordinates)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inboundRoutes: ").append(toIndentedString(inboundRoutes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outboundRoutes: ").append(toIndentedString(outboundRoutes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("geoCoordinates");
    openapiFields.add("id");
    openapiFields.add("inboundRoutes");
    openapiFields.add("name");
    openapiFields.add("outboundRoutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirportDetailsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirportDetailsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirportDetailsDto is not found in the empty JSON string", AirportDetailsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirportDetailsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirportDetailsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        Country.validateJsonElement(jsonObj.get("country"));
      }
      // validate the optional field `geoCoordinates`
      if (jsonObj.get("geoCoordinates") != null && !jsonObj.get("geoCoordinates").isJsonNull()) {
        GeoCoordinates.validateJsonElement(jsonObj.get("geoCoordinates"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `inboundRoutes`
      if (jsonObj.get("inboundRoutes") != null && !jsonObj.get("inboundRoutes").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("inboundRoutes"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `outboundRoutes`
      if (jsonObj.get("outboundRoutes") != null && !jsonObj.get("outboundRoutes").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("outboundRoutes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirportDetailsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirportDetailsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirportDetailsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirportDetailsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AirportDetailsDto>() {
           @Override
           public void write(JsonWriter out, AirportDetailsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirportDetailsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirportDetailsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirportDetailsDto
   * @throws IOException if the JSON string is invalid with respect to AirportDetailsDto
   */
  public static AirportDetailsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirportDetailsDto.class);
  }

  /**
   * Convert an instance of AirportDetailsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

