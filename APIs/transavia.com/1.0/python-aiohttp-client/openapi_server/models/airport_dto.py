# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server.models.geo_coordinates import GeoCoordinates
from openapi_server.models.link import Link
from openapi_server import util


class AirportDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: Country=None, geo_coordinates: GeoCoordinates=None, id: str=None, name: str=None, _self: Link=None):
        """AirportDto - a model defined in OpenAPI

        :param city: The city of this AirportDto.
        :param country: The country of this AirportDto.
        :param geo_coordinates: The geo_coordinates of this AirportDto.
        :param id: The id of this AirportDto.
        :param name: The name of this AirportDto.
        :param _self: The _self of this AirportDto.
        """
        self.openapi_types = {
            'city': str,
            'country': Country,
            'geo_coordinates': GeoCoordinates,
            'id': str,
            'name': str,
            '_self': Link
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'geo_coordinates': 'geoCoordinates',
            'id': 'id',
            'name': 'name',
            '_self': 'self'
        }

        self._city = city
        self._country = country
        self._geo_coordinates = geo_coordinates
        self._id = id
        self._name = name
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirportDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AirportDto of this AirportDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this AirportDto.

        City where the airport is located.

        :return: The city of this AirportDto.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AirportDto.

        City where the airport is located.

        :param city: The city of this AirportDto.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this AirportDto.


        :return: The country of this AirportDto.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AirportDto.


        :param country: The country of this AirportDto.
        :type country: Country
        """

        self._country = country

    @property
    def geo_coordinates(self):
        """Gets the geo_coordinates of this AirportDto.


        :return: The geo_coordinates of this AirportDto.
        :rtype: GeoCoordinates
        """
        return self._geo_coordinates

    @geo_coordinates.setter
    def geo_coordinates(self, geo_coordinates):
        """Sets the geo_coordinates of this AirportDto.


        :param geo_coordinates: The geo_coordinates of this AirportDto.
        :type geo_coordinates: GeoCoordinates
        """

        self._geo_coordinates = geo_coordinates

    @property
    def id(self):
        """Gets the id of this AirportDto.

        Unique identifier.

        :return: The id of this AirportDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AirportDto.

        Unique identifier.

        :param id: The id of this AirportDto.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AirportDto.

        Name of the airport.

        :return: The name of this AirportDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AirportDto.

        Name of the airport.

        :param name: The name of this AirportDto.
        :type name: str
        """

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this AirportDto.


        :return: The _self of this AirportDto.
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AirportDto.


        :param _self: The _self of this AirportDto.
        :type _self: Link
        """

        self.__self = _self
