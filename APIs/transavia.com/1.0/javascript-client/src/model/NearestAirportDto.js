/**
 * Airports API v2
 * Returns all airports
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';
import GeoCoordinates from './GeoCoordinates';
import Link from './Link';

/**
 * The NearestAirportDto model module.
 * @module model/NearestAirportDto
 * @version 1.0
 */
class NearestAirportDto {
    /**
     * Constructs a new <code>NearestAirportDto</code>.
     * 
     * @alias module:model/NearestAirportDto
     */
    constructor() { 
        
        NearestAirportDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NearestAirportDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NearestAirportDto} obj Optional instance to populate.
     * @return {module:model/NearestAirportDto} The populated <code>NearestAirportDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NearestAirportDto();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('distanceInKm')) {
                obj['distanceInKm'] = ApiClient.convertToType(data['distanceInKm'], 'Number');
            }
            if (data.hasOwnProperty('geoCoordinates')) {
                obj['geoCoordinates'] = GeoCoordinates.constructFromObject(data['geoCoordinates']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = Link.constructFromObject(data['self']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NearestAirportDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NearestAirportDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          Country.validateJSON(data['country']);
        }
        // validate the optional field `geoCoordinates`
        if (data['geoCoordinates']) { // data not null
          GeoCoordinates.validateJSON(data['geoCoordinates']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `self`
        if (data['self']) { // data not null
          Link.validateJSON(data['self']);
        }

        return true;
    }


}



/**
 * City where the airport is located.
 * @member {String} city
 */
NearestAirportDto.prototype['city'] = undefined;

/**
 * @member {module:model/Country} country
 */
NearestAirportDto.prototype['country'] = undefined;

/**
 * Distance in kilometers.
 * @member {Number} distanceInKm
 */
NearestAirportDto.prototype['distanceInKm'] = undefined;

/**
 * @member {module:model/GeoCoordinates} geoCoordinates
 */
NearestAirportDto.prototype['geoCoordinates'] = undefined;

/**
 * Unique identifier.
 * @member {String} id
 */
NearestAirportDto.prototype['id'] = undefined;

/**
 * Name of the airport.
 * @member {String} name
 */
NearestAirportDto.prototype['name'] = undefined;

/**
 * @member {module:model/Link} self
 */
NearestAirportDto.prototype['self'] = undefined;






export default NearestAirportDto;

