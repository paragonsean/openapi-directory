/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeAccount from './MeAccount';
import MeToken from './MeToken';
import MeUser from './MeUser';

/**
 * The Me model module.
 * @module model/Me
 * @version 1.0.14
 */
class Me {
    /**
     * Constructs a new <code>Me</code>.
     * @alias module:model/Me
     */
    constructor() { 
        
        Me.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Me</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Me} obj Optional instance to populate.
     * @return {module:model/Me} The populated <code>Me</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Me();

            if (data.hasOwnProperty('account')) {
                obj['account'] = MeAccount.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = MeToken.constructFromObject(data['token']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = MeUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Me</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Me</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account`
        if (data['account']) { // data not null
          MeAccount.validateJSON(data['account']);
        }
        // validate the optional field `token`
        if (data['token']) { // data not null
          MeToken.validateJSON(data['token']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          MeUser.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/MeAccount} account
 */
Me.prototype['account'] = undefined;

/**
 * @member {module:model/MeToken} token
 */
Me.prototype['token'] = undefined;

/**
 * @member {module:model/MeUser} user
 */
Me.prototype['user'] = undefined;






export default Me;

