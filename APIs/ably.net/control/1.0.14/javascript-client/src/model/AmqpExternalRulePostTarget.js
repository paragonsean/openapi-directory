/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmqpExternalRulePatchTargetHeadersInner from './AmqpExternalRulePatchTargetHeadersInner';

/**
 * The AmqpExternalRulePostTarget model module.
 * @module model/AmqpExternalRulePostTarget
 * @version 1.0.14
 */
class AmqpExternalRulePostTarget {
    /**
     * Constructs a new <code>AmqpExternalRulePostTarget</code>.
     * @alias module:model/AmqpExternalRulePostTarget
     * @param mandatoryRoute {Boolean} Reject delivery of the message if the route does not exist, otherwise fail silently.
     * @param persistentMessages {Boolean} Marks the message as persistent, instructing the broker to write it to disk if it is in a durable queue.
     * @param routingKey {String} The AMQP routing key. See this <a href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\">Ably knowledge base article</a> for details.
     * @param url {String} 
     */
    constructor(mandatoryRoute, persistentMessages, routingKey, url) { 
        
        AmqpExternalRulePostTarget.initialize(this, mandatoryRoute, persistentMessages, routingKey, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mandatoryRoute, persistentMessages, routingKey, url) { 
        obj['mandatoryRoute'] = mandatoryRoute;
        obj['persistentMessages'] = persistentMessages;
        obj['routingKey'] = routingKey;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>AmqpExternalRulePostTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmqpExternalRulePostTarget} obj Optional instance to populate.
     * @return {module:model/AmqpExternalRulePostTarget} The populated <code>AmqpExternalRulePostTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmqpExternalRulePostTarget();

            if (data.hasOwnProperty('enveloped')) {
                obj['enveloped'] = ApiClient.convertToType(data['enveloped'], 'Boolean');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [AmqpExternalRulePatchTargetHeadersInner]);
            }
            if (data.hasOwnProperty('mandatoryRoute')) {
                obj['mandatoryRoute'] = ApiClient.convertToType(data['mandatoryRoute'], 'Boolean');
            }
            if (data.hasOwnProperty('messageTtl')) {
                obj['messageTtl'] = ApiClient.convertToType(data['messageTtl'], 'Number');
            }
            if (data.hasOwnProperty('persistentMessages')) {
                obj['persistentMessages'] = ApiClient.convertToType(data['persistentMessages'], 'Boolean');
            }
            if (data.hasOwnProperty('routingKey')) {
                obj['routingKey'] = ApiClient.convertToType(data['routingKey'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmqpExternalRulePostTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmqpExternalRulePostTarget</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AmqpExternalRulePostTarget.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                AmqpExternalRulePatchTargetHeadersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['routingKey'] && !(typeof data['routingKey'] === 'string' || data['routingKey'] instanceof String)) {
            throw new Error("Expected the field `routingKey` to be a primitive type in the JSON string but got " + data['routingKey']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

AmqpExternalRulePostTarget.RequiredProperties = ["mandatoryRoute", "persistentMessages", "routingKey", "url"];

/**
 * Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.
 * @member {Boolean} enveloped
 */
AmqpExternalRulePostTarget.prototype['enveloped'] = undefined;

/**
 * @member {String} format
 */
AmqpExternalRulePostTarget.prototype['format'] = undefined;

/**
 * If you have additional information to send, you'll need to include the relevant headers.
 * @member {Array.<module:model/AmqpExternalRulePatchTargetHeadersInner>} headers
 */
AmqpExternalRulePostTarget.prototype['headers'] = undefined;

/**
 * Reject delivery of the message if the route does not exist, otherwise fail silently.
 * @member {Boolean} mandatoryRoute
 */
AmqpExternalRulePostTarget.prototype['mandatoryRoute'] = undefined;

/**
 * You can optionally override the default TTL on a queue and specify a TTL in minutes for messages to be persisted. It is unusual to change the default TTL, so if this field is left empty, the default TTL for the queue will be used.
 * @member {Number} messageTtl
 */
AmqpExternalRulePostTarget.prototype['messageTtl'] = undefined;

/**
 * Marks the message as persistent, instructing the broker to write it to disk if it is in a durable queue.
 * @member {Boolean} persistentMessages
 */
AmqpExternalRulePostTarget.prototype['persistentMessages'] = undefined;

/**
 * The AMQP routing key. See this <a href=\"https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\">Ably knowledge base article</a> for details.
 * @member {String} routingKey
 */
AmqpExternalRulePostTarget.prototype['routingKey'] = undefined;

/**
 * @member {String} url
 */
AmqpExternalRulePostTarget.prototype['url'] = undefined;






export default AmqpExternalRulePostTarget;

