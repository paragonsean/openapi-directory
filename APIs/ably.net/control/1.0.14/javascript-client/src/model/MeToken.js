/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MeToken model module.
 * @module model/MeToken
 * @version 1.0.14
 */
class MeToken {
    /**
     * Constructs a new <code>MeToken</code>.
     * @alias module:model/MeToken
     * @param capabilities {Array.<String>} An array containing the access capabilities associated with the access token.
     * @param id {Number} The token ID. This is a UUID.
     * @param name {String} The friendly name for the token.
     */
    constructor(capabilities, id, name) { 
        
        MeToken.initialize(this, capabilities, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, capabilities, id, name) { 
        obj['capabilities'] = capabilities;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>MeToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeToken} obj Optional instance to populate.
     * @return {module:model/MeToken} The populated <code>MeToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeToken();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MeToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['capabilities'])) {
            throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

MeToken.RequiredProperties = ["capabilities", "id", "name"];

/**
 * An array containing the access capabilities associated with the access token.
 * @member {Array.<String>} capabilities
 */
MeToken.prototype['capabilities'] = undefined;

/**
 * The token ID. This is a UUID.
 * @member {Number} id
 */
MeToken.prototype['id'] = undefined;

/**
 * The friendly name for the token.
 * @member {String} name
 */
MeToken.prototype['name'] = undefined;






export default MeToken;

