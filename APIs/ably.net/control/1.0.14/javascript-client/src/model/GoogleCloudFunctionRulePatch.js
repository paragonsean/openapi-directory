/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudFunctionRulePatchTarget from './GoogleCloudFunctionRulePatchTarget';
import RuleSource from './RuleSource';

/**
 * The GoogleCloudFunctionRulePatch model module.
 * @module model/GoogleCloudFunctionRulePatch
 * @version 1.0.14
 */
class GoogleCloudFunctionRulePatch {
    /**
     * Constructs a new <code>GoogleCloudFunctionRulePatch</code>.
     * @alias module:model/GoogleCloudFunctionRulePatch
     */
    constructor() { 
        
        GoogleCloudFunctionRulePatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudFunctionRulePatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudFunctionRulePatch} obj Optional instance to populate.
     * @return {module:model/GoogleCloudFunctionRulePatch} The populated <code>GoogleCloudFunctionRulePatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudFunctionRulePatch();

            if (data.hasOwnProperty('requestMode')) {
                obj['requestMode'] = ApiClient.convertToType(data['requestMode'], 'String');
            }
            if (data.hasOwnProperty('ruleType')) {
                obj['ruleType'] = ApiClient.convertToType(data['ruleType'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = RuleSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = GoogleCloudFunctionRulePatchTarget.constructFromObject(data['target']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudFunctionRulePatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudFunctionRulePatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requestMode'] && !(typeof data['requestMode'] === 'string' || data['requestMode'] instanceof String)) {
            throw new Error("Expected the field `requestMode` to be a primitive type in the JSON string but got " + data['requestMode']);
        }
        // ensure the json data is a string
        if (data['ruleType'] && !(typeof data['ruleType'] === 'string' || data['ruleType'] instanceof String)) {
            throw new Error("Expected the field `ruleType` to be a primitive type in the JSON string but got " + data['ruleType']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          RuleSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          GoogleCloudFunctionRulePatchTarget.validateJSON(data['target']);
        }

        return true;
    }


}



/**
 * This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably <a href=\"https://ably.com/documentation/general/events#batching\">documentation</a>.
 * @member {module:model/GoogleCloudFunctionRulePatch.RequestModeEnum} requestMode
 */
GoogleCloudFunctionRulePatch.prototype['requestMode'] = undefined;

/**
 * The type of rule. In this case Google Cloud Function. See the <a href=\"https://ably.com/integrations\">documentation</a> for further information.
 * @member {module:model/GoogleCloudFunctionRulePatch.RuleTypeEnum} ruleType
 */
GoogleCloudFunctionRulePatch.prototype['ruleType'] = undefined;

/**
 * @member {module:model/RuleSource} source
 */
GoogleCloudFunctionRulePatch.prototype['source'] = undefined;

/**
 * The status of the rule. Rules can be enabled or disabled.
 * @member {module:model/GoogleCloudFunctionRulePatch.StatusEnum} status
 */
GoogleCloudFunctionRulePatch.prototype['status'] = undefined;

/**
 * @member {module:model/GoogleCloudFunctionRulePatchTarget} target
 */
GoogleCloudFunctionRulePatch.prototype['target'] = undefined;





/**
 * Allowed values for the <code>requestMode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudFunctionRulePatch['RequestModeEnum'] = {

    /**
     * value: "single"
     * @const
     */
    "single": "single",

    /**
     * value: "batch"
     * @const
     */
    "batch": "batch"
};


/**
 * Allowed values for the <code>ruleType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudFunctionRulePatch['RuleTypeEnum'] = {

    /**
     * value: "http/google-cloud-function"
     * @const
     */
    "http/google-cloud-function": "http/google-cloud-function"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudFunctionRulePatch['StatusEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};



export default GoogleCloudFunctionRulePatch;

