/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmqpExternalRulePost from './AmqpExternalRulePost';
import AmqpRulePost from './AmqpRulePost';
import AwsKinesisRulePost from './AwsKinesisRulePost';
import AwsLambdaRulePost from './AwsLambdaRulePost';
import AwsSqsRulePost from './AwsSqsRulePost';
import AzureFunctionRulePost from './AzureFunctionRulePost';
import CloudflareWorkerRulePost from './CloudflareWorkerRulePost';
import GoogleCloudFunctionRulePost from './GoogleCloudFunctionRulePost';
import HttpRulePost from './HttpRulePost';
import IftttRulePost from './IftttRulePost';
import RuleSource from './RuleSource';
import UnsupportedRuleResponse from './UnsupportedRuleResponse';
import UnsupportedRuleResponseTarget from './UnsupportedRuleResponseTarget';
import ZapierRulePost from './ZapierRulePost';

/**
 * The RulePost model module.
 * @module model/RulePost
 * @version 1.0.14
 */
class RulePost {
    /**
     * Constructs a new <code>RulePost</code>.
     * @alias module:model/RulePost
     * @param {(module:model/AmqpExternalRulePost|module:model/AmqpRulePost|module:model/AwsKinesisRulePost|module:model/AwsLambdaRulePost|module:model/AwsSqsRulePost|module:model/AzureFunctionRulePost|module:model/CloudflareWorkerRulePost|module:model/GoogleCloudFunctionRulePost|module:model/HttpRulePost|module:model/IftttRulePost|module:model/UnsupportedRuleResponse|module:model/ZapierRulePost)} instance The actual instance to initialize RulePost.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "HttpRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HttpRulePost.validateJSON(instance); // throw an exception if no match
                // create HttpRulePost from JS object
                this.actualInstance = HttpRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HttpRulePost
            errorMessages.push("Failed to construct HttpRulePost: " + err)
        }

        try {
            if (typeof instance === "IftttRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                IftttRulePost.validateJSON(instance); // throw an exception if no match
                // create IftttRulePost from JS object
                this.actualInstance = IftttRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into IftttRulePost
            errorMessages.push("Failed to construct IftttRulePost: " + err)
        }

        try {
            if (typeof instance === "ZapierRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ZapierRulePost.validateJSON(instance); // throw an exception if no match
                // create ZapierRulePost from JS object
                this.actualInstance = ZapierRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ZapierRulePost
            errorMessages.push("Failed to construct ZapierRulePost: " + err)
        }

        try {
            if (typeof instance === "CloudflareWorkerRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CloudflareWorkerRulePost.validateJSON(instance); // throw an exception if no match
                // create CloudflareWorkerRulePost from JS object
                this.actualInstance = CloudflareWorkerRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CloudflareWorkerRulePost
            errorMessages.push("Failed to construct CloudflareWorkerRulePost: " + err)
        }

        try {
            if (typeof instance === "AzureFunctionRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AzureFunctionRulePost.validateJSON(instance); // throw an exception if no match
                // create AzureFunctionRulePost from JS object
                this.actualInstance = AzureFunctionRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AzureFunctionRulePost
            errorMessages.push("Failed to construct AzureFunctionRulePost: " + err)
        }

        try {
            if (typeof instance === "GoogleCloudFunctionRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GoogleCloudFunctionRulePost.validateJSON(instance); // throw an exception if no match
                // create GoogleCloudFunctionRulePost from JS object
                this.actualInstance = GoogleCloudFunctionRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GoogleCloudFunctionRulePost
            errorMessages.push("Failed to construct GoogleCloudFunctionRulePost: " + err)
        }

        try {
            if (typeof instance === "AwsLambdaRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AwsLambdaRulePost.validateJSON(instance); // throw an exception if no match
                // create AwsLambdaRulePost from JS object
                this.actualInstance = AwsLambdaRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AwsLambdaRulePost
            errorMessages.push("Failed to construct AwsLambdaRulePost: " + err)
        }

        try {
            if (typeof instance === "AwsKinesisRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AwsKinesisRulePost.validateJSON(instance); // throw an exception if no match
                // create AwsKinesisRulePost from JS object
                this.actualInstance = AwsKinesisRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AwsKinesisRulePost
            errorMessages.push("Failed to construct AwsKinesisRulePost: " + err)
        }

        try {
            if (typeof instance === "AwsSqsRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AwsSqsRulePost.validateJSON(instance); // throw an exception if no match
                // create AwsSqsRulePost from JS object
                this.actualInstance = AwsSqsRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AwsSqsRulePost
            errorMessages.push("Failed to construct AwsSqsRulePost: " + err)
        }

        try {
            if (typeof instance === "AmqpRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AmqpRulePost.validateJSON(instance); // throw an exception if no match
                // create AmqpRulePost from JS object
                this.actualInstance = AmqpRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AmqpRulePost
            errorMessages.push("Failed to construct AmqpRulePost: " + err)
        }

        try {
            if (typeof instance === "AmqpExternalRulePost") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AmqpExternalRulePost.validateJSON(instance); // throw an exception if no match
                // create AmqpExternalRulePost from JS object
                this.actualInstance = AmqpExternalRulePost.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AmqpExternalRulePost
            errorMessages.push("Failed to construct AmqpExternalRulePost: " + err)
        }

        try {
            if (typeof instance === "UnsupportedRuleResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UnsupportedRuleResponse.validateJSON(instance); // throw an exception if no match
                // create UnsupportedRuleResponse from JS object
                this.actualInstance = UnsupportedRuleResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UnsupportedRuleResponse
            errorMessages.push("Failed to construct UnsupportedRuleResponse: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `RulePost` with oneOf schemas AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, UnsupportedRuleResponse, ZapierRulePost. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `RulePost` with oneOf schemas AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, UnsupportedRuleResponse, ZapierRulePost. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>RulePost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RulePost} obj Optional instance to populate.
     * @return {module:model/RulePost} The populated <code>RulePost</code> instance.
     */
    static constructFromObject(data, obj) {
        return new RulePost(data);
    }

    /**
     * Gets the actual instance, which can be <code>AmqpExternalRulePost</code>, <code>AmqpRulePost</code>, <code>AwsKinesisRulePost</code>, <code>AwsLambdaRulePost</code>, <code>AwsSqsRulePost</code>, <code>AzureFunctionRulePost</code>, <code>CloudflareWorkerRulePost</code>, <code>GoogleCloudFunctionRulePost</code>, <code>HttpRulePost</code>, <code>IftttRulePost</code>, <code>UnsupportedRuleResponse</code>, <code>ZapierRulePost</code>.
     * @return {(module:model/AmqpExternalRulePost|module:model/AmqpRulePost|module:model/AwsKinesisRulePost|module:model/AwsLambdaRulePost|module:model/AwsSqsRulePost|module:model/AzureFunctionRulePost|module:model/CloudflareWorkerRulePost|module:model/GoogleCloudFunctionRulePost|module:model/HttpRulePost|module:model/IftttRulePost|module:model/UnsupportedRuleResponse|module:model/ZapierRulePost)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AmqpExternalRulePost</code>, <code>AmqpRulePost</code>, <code>AwsKinesisRulePost</code>, <code>AwsLambdaRulePost</code>, <code>AwsSqsRulePost</code>, <code>AzureFunctionRulePost</code>, <code>CloudflareWorkerRulePost</code>, <code>GoogleCloudFunctionRulePost</code>, <code>HttpRulePost</code>, <code>IftttRulePost</code>, <code>UnsupportedRuleResponse</code>, <code>ZapierRulePost</code>.
     * @param {(module:model/AmqpExternalRulePost|module:model/AmqpRulePost|module:model/AwsKinesisRulePost|module:model/AwsLambdaRulePost|module:model/AwsSqsRulePost|module:model/AzureFunctionRulePost|module:model/CloudflareWorkerRulePost|module:model/GoogleCloudFunctionRulePost|module:model/HttpRulePost|module:model/IftttRulePost|module:model/UnsupportedRuleResponse|module:model/ZapierRulePost)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = RulePost.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of RulePost from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/RulePost} An instance of RulePost.
     */
    static fromJSON = function(json_string){
        return RulePost.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably <a href=\"https://ably.com/documentation/general/events#batching\">documentation</a>.
 * @member {module:model/RulePost.RequestModeEnum} requestMode
 */
RulePost.prototype['requestMode'] = undefined;

/**
 * This rule type is currently unsupported.
 * @member {module:model/RulePost.RuleTypeEnum} ruleType
 */
RulePost.prototype['ruleType'] = undefined;

/**
 * @member {module:model/RuleSource} source
 */
RulePost.prototype['source'] = undefined;

/**
 * The status of the rule. Rules can be enabled or disabled.
 * @member {module:model/RulePost.StatusEnum} status
 */
RulePost.prototype['status'] = undefined;

/**
 * @member {module:model/UnsupportedRuleResponseTarget} target
 */
RulePost.prototype['target'] = undefined;

/**
 * @member {Object} _links
 */
RulePost.prototype['_links'] = undefined;

/**
 * The Ably application ID.
 * @member {String} appId
 */
RulePost.prototype['appId'] = undefined;

/**
 * Unix timestamp representing the date and time of creation of the rule.
 * @member {Number} created
 */
RulePost.prototype['created'] = undefined;

/**
 * The rule ID.
 * @member {String} id
 */
RulePost.prototype['id'] = undefined;

/**
 * Unix timestamp representing the date and time of last modification of the rule.
 * @member {Number} modified
 */
RulePost.prototype['modified'] = undefined;

/**
 * API version. Events and the format of their payloads are versioned. Please see the <a href=\"https://ably.com/documentation/general/events\">Events documentation</a>.
 * @member {String} version
 */
RulePost.prototype['version'] = undefined;


RulePost.OneOf = ["AmqpExternalRulePost", "AmqpRulePost", "AwsKinesisRulePost", "AwsLambdaRulePost", "AwsSqsRulePost", "AzureFunctionRulePost", "CloudflareWorkerRulePost", "GoogleCloudFunctionRulePost", "HttpRulePost", "IftttRulePost", "UnsupportedRuleResponse", "ZapierRulePost"];

export default RulePost;

