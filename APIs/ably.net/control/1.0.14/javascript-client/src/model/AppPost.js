/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppPost model module.
 * @module model/AppPost
 * @version 1.0.14
 */
class AppPost {
    /**
     * Constructs a new <code>AppPost</code>.
     * @alias module:model/AppPost
     * @param name {String} The name of the application for your reference only.
     */
    constructor(name) { 
        
        AppPost.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>AppPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppPost} obj Optional instance to populate.
     * @return {module:model/AppPost} The populated <code>AppPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppPost();

            if (data.hasOwnProperty('apnsCertificate')) {
                obj['apnsCertificate'] = ApiClient.convertToType(data['apnsCertificate'], 'String');
            }
            if (data.hasOwnProperty('apnsPrivateKey')) {
                obj['apnsPrivateKey'] = ApiClient.convertToType(data['apnsPrivateKey'], 'String');
            }
            if (data.hasOwnProperty('apnsUseSandboxEndpoint')) {
                obj['apnsUseSandboxEndpoint'] = ApiClient.convertToType(data['apnsUseSandboxEndpoint'], 'Boolean');
            }
            if (data.hasOwnProperty('fcmKey')) {
                obj['fcmKey'] = ApiClient.convertToType(data['fcmKey'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tlsOnly')) {
                obj['tlsOnly'] = ApiClient.convertToType(data['tlsOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppPost</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppPost.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apnsCertificate'] && !(typeof data['apnsCertificate'] === 'string' || data['apnsCertificate'] instanceof String)) {
            throw new Error("Expected the field `apnsCertificate` to be a primitive type in the JSON string but got " + data['apnsCertificate']);
        }
        // ensure the json data is a string
        if (data['apnsPrivateKey'] && !(typeof data['apnsPrivateKey'] === 'string' || data['apnsPrivateKey'] instanceof String)) {
            throw new Error("Expected the field `apnsPrivateKey` to be a primitive type in the JSON string but got " + data['apnsPrivateKey']);
        }
        // ensure the json data is a string
        if (data['fcmKey'] && !(typeof data['fcmKey'] === 'string' || data['fcmKey'] instanceof String)) {
            throw new Error("Expected the field `fcmKey` to be a primitive type in the JSON string but got " + data['fcmKey']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

AppPost.RequiredProperties = ["name"];

/**
 * The Apple Push Notification service certificate.
 * @member {String} apnsCertificate
 */
AppPost.prototype['apnsCertificate'] = undefined;

/**
 * The Apple Push Notification service private key.
 * @member {String} apnsPrivateKey
 */
AppPost.prototype['apnsPrivateKey'] = undefined;

/**
 * The Apple Push Notification service sandbox endpoint.
 * @member {Boolean} apnsUseSandboxEndpoint
 */
AppPost.prototype['apnsUseSandboxEndpoint'] = undefined;

/**
 * The Firebase Cloud Messaging key.
 * @member {String} fcmKey
 */
AppPost.prototype['fcmKey'] = undefined;

/**
 * The name of the application for your reference only.
 * @member {String} name
 */
AppPost.prototype['name'] = undefined;

/**
 * The status of the application. Can be `enabled` or `disabled`. Enabled means available to accept inbound connections and all services are available.
 * @member {module:model/AppPost.StatusEnum} status
 */
AppPost.prototype['status'] = undefined;

/**
 * Enforce TLS for all connections.
 * @member {Boolean} tlsOnly
 */
AppPost.prototype['tlsOnly'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AppPost['StatusEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};



export default AppPost;

