/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmqpExternalRulePatchTargetHeadersInner from './AmqpExternalRulePatchTargetHeadersInner';

/**
 * The GoogleCloudFunctionRulePatchTarget model module.
 * @module model/GoogleCloudFunctionRulePatchTarget
 * @version 1.0.14
 */
class GoogleCloudFunctionRulePatchTarget {
    /**
     * Constructs a new <code>GoogleCloudFunctionRulePatchTarget</code>.
     * @alias module:model/GoogleCloudFunctionRulePatchTarget
     */
    constructor() { 
        
        GoogleCloudFunctionRulePatchTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudFunctionRulePatchTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudFunctionRulePatchTarget} obj Optional instance to populate.
     * @return {module:model/GoogleCloudFunctionRulePatchTarget} The populated <code>GoogleCloudFunctionRulePatchTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudFunctionRulePatchTarget();

            if (data.hasOwnProperty('enveloped')) {
                obj['enveloped'] = ApiClient.convertToType(data['enveloped'], 'Boolean');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('functionName')) {
                obj['functionName'] = ApiClient.convertToType(data['functionName'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [AmqpExternalRulePatchTargetHeadersInner]);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('signingKeyId')) {
                obj['signingKeyId'] = ApiClient.convertToType(data['signingKeyId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudFunctionRulePatchTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudFunctionRulePatchTarget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['functionName'] && !(typeof data['functionName'] === 'string' || data['functionName'] instanceof String)) {
            throw new Error("Expected the field `functionName` to be a primitive type in the JSON string but got " + data['functionName']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                AmqpExternalRulePatchTargetHeadersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['signingKeyId'] && !(typeof data['signingKeyId'] === 'string' || data['signingKeyId'] instanceof String)) {
            throw new Error("Expected the field `signingKeyId` to be a primitive type in the JSON string but got " + data['signingKeyId']);
        }

        return true;
    }


}



/**
 * Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.
 * @member {Boolean} enveloped
 */
GoogleCloudFunctionRulePatchTarget.prototype['enveloped'] = undefined;

/**
 * JSON provides a text-based encoding.
 * @member {module:model/GoogleCloudFunctionRulePatchTarget.FormatEnum} format
 */
GoogleCloudFunctionRulePatchTarget.prototype['format'] = undefined;

/**
 * The name of your Google Cloud Function.
 * @member {String} functionName
 */
GoogleCloudFunctionRulePatchTarget.prototype['functionName'] = undefined;

/**
 * If you have additional information to send, you'll need to include the relevant headers.
 * @member {Array.<module:model/AmqpExternalRulePatchTargetHeadersInner>} headers
 */
GoogleCloudFunctionRulePatchTarget.prototype['headers'] = undefined;

/**
 * The project ID for your Google Cloud Project that was generated when you created your project.
 * @member {String} projectId
 */
GoogleCloudFunctionRulePatchTarget.prototype['projectId'] = undefined;

/**
 * The region in which your Google Cloud Function is hosted. See the <a href=\"https://cloud.google.com/compute/docs/regions-zones/\">Google documentation</a> for more details.
 * @member {String} region
 */
GoogleCloudFunctionRulePatchTarget.prototype['region'] = undefined;

/**
 * The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the <a href=\"https://ably.com/documentation/general/events#security\">webhook security docs</a> for more information.
 * @member {String} signingKeyId
 */
GoogleCloudFunctionRulePatchTarget.prototype['signingKeyId'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudFunctionRulePatchTarget['FormatEnum'] = {

    /**
     * value: "json"
     * @const
     */
    "json": "json"
};



export default GoogleCloudFunctionRulePatchTarget;

