/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NamespacePost model module.
 * @module model/NamespacePost
 * @version 1.0.14
 */
class NamespacePost {
    /**
     * Constructs a new <code>NamespacePost</code>.
     * @alias module:model/NamespacePost
     * @param id {String} The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`.
     */
    constructor(id) { 
        
        NamespacePost.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['authenticated'] = false;
        obj['id'] = id;
        obj['persistLast'] = false;
        obj['persisted'] = false;
        obj['pushEnabled'] = false;
        obj['tlsOnly'] = false;
    }

    /**
     * Constructs a <code>NamespacePost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamespacePost} obj Optional instance to populate.
     * @return {module:model/NamespacePost} The populated <code>NamespacePost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamespacePost();

            if (data.hasOwnProperty('authenticated')) {
                obj['authenticated'] = ApiClient.convertToType(data['authenticated'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('persistLast')) {
                obj['persistLast'] = ApiClient.convertToType(data['persistLast'], 'Boolean');
            }
            if (data.hasOwnProperty('persisted')) {
                obj['persisted'] = ApiClient.convertToType(data['persisted'], 'Boolean');
            }
            if (data.hasOwnProperty('pushEnabled')) {
                obj['pushEnabled'] = ApiClient.convertToType(data['pushEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('tlsOnly')) {
                obj['tlsOnly'] = ApiClient.convertToType(data['tlsOnly'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamespacePost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamespacePost</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NamespacePost.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

NamespacePost.RequiredProperties = ["id"];

/**
 * If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\">Ably Knowledge base</a> for more details.
 * @member {Boolean} authenticated
 * @default false
 */
NamespacePost.prototype['authenticated'] = false;

/**
 * The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`.
 * @member {String} id
 */
NamespacePost.prototype['id'] = undefined;

/**
 * If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.
 * @member {Boolean} persistLast
 * @default false
 */
NamespacePost.prototype['persistLast'] = false;

/**
 * If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.
 * @member {Boolean} persisted
 * @default false
 */
NamespacePost.prototype['persisted'] = false;

/**
 * If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.
 * @member {Boolean} pushEnabled
 * @default false
 */
NamespacePost.prototype['pushEnabled'] = false;

/**
 * If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.
 * @member {Boolean} tlsOnly
 * @default false
 */
NamespacePost.prototype['tlsOnly'] = false;






export default NamespacePost;

