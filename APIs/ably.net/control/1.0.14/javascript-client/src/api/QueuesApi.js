/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Queue from '../model/Queue';
import QueueResponse from '../model/QueueResponse';

/**
* Queues service.
* @module api/QueuesApi
* @version 1.0.14
*/
export default class QueuesApi {

    /**
    * Constructs a new QueuesApi. 
    * @alias module:api/QueuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAppIdQueuesGet operation.
     * @callback module:api/QueuesApi~appsAppIdQueuesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QueueResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists queues
     * Lists the queues associated with the specified application ID.
     * @param {String} appId The application ID.
     * @param {module:api/QueuesApi~appsAppIdQueuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QueueResponse>}
     */
    appsAppIdQueuesGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdQueuesGet");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QueueResponse];
      return this.apiClient.callApi(
        '/apps/{app_id}/queues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdQueuesPost operation.
     * @callback module:api/QueuesApi~appsAppIdQueuesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a queue
     * Creates a queue for the application specified by application ID. The properties for the queue to be created are specified in the request body.
     * @param {String} appId The application ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/Queue} [queue] 
     * @param {module:api/QueuesApi~appsAppIdQueuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueResponse}
     */
    appsAppIdQueuesPost(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts['queue'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdQueuesPost");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueueResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/queues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdQueuesQueueIdDelete operation.
     * @callback module:api/QueuesApi~appsAppIdQueuesQueueIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a queue
     * Delete the queue with the specified queue name, from the application with the specified application ID.
     * @param {String} appId The application ID.
     * @param {String} queueId The queue ID.
     * @param {module:api/QueuesApi~appsAppIdQueuesQueueIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdQueuesQueueIdDelete(appId, queueId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdQueuesQueueIdDelete");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling appsAppIdQueuesQueueIdDelete");
      }

      let pathParams = {
        'app_id': appId,
        'queue_id': queueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{app_id}/queues/{queue_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
