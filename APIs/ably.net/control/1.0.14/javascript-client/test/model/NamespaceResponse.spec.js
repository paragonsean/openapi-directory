/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ControlApiV1);
  }
}(this, function(expect, ControlApiV1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ControlApiV1.NamespaceResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NamespaceResponse', function() {
    it('should create an instance of NamespaceResponse', function() {
      // uncomment below and update the code to test NamespaceResponse
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be.a(ControlApiV1.NamespaceResponse);
    });

    it('should have the property authenticated (base name: "authenticated")', function() {
      // uncomment below and update the code to test the property authenticated
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

    it('should have the property persistLast (base name: "persistLast")', function() {
      // uncomment below and update the code to test the property persistLast
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

    it('should have the property persisted (base name: "persisted")', function() {
      // uncomment below and update the code to test the property persisted
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

    it('should have the property pushEnabled (base name: "pushEnabled")', function() {
      // uncomment below and update the code to test the property pushEnabled
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

    it('should have the property tlsOnly (base name: "tlsOnly")', function() {
      // uncomment below and update the code to test the property tlsOnly
      //var instance = new ControlApiV1.NamespaceResponse();
      //expect(instance).to.be();
    });

  });

}));
