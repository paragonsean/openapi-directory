/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAws_assume_role.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAws_assume_role::OAIAws_assume_role(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAws_assume_role::OAIAws_assume_role() {
    this->initializeModel();
}

OAIAws_assume_role::~OAIAws_assume_role() {}

void OAIAws_assume_role::initializeModel() {

    m_assume_role_arn_isSet = false;
    m_assume_role_arn_isValid = false;

    m_authentication_mode_isSet = false;
    m_authentication_mode_isValid = false;
}

void OAIAws_assume_role::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAws_assume_role::fromJsonObject(QJsonObject json) {

    m_assume_role_arn_isValid = ::OpenAPI::fromJsonValue(m_assume_role_arn, json[QString("assumeRoleArn")]);
    m_assume_role_arn_isSet = !json[QString("assumeRoleArn")].isNull() && m_assume_role_arn_isValid;

    m_authentication_mode_isValid = ::OpenAPI::fromJsonValue(m_authentication_mode, json[QString("authenticationMode")]);
    m_authentication_mode_isSet = !json[QString("authenticationMode")].isNull() && m_authentication_mode_isValid;
}

QString OAIAws_assume_role::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAws_assume_role::asJsonObject() const {
    QJsonObject obj;
    if (m_assume_role_arn_isSet) {
        obj.insert(QString("assumeRoleArn"), ::OpenAPI::toJsonValue(m_assume_role_arn));
    }
    if (m_authentication_mode_isSet) {
        obj.insert(QString("authenticationMode"), ::OpenAPI::toJsonValue(m_authentication_mode));
    }
    return obj;
}

QString OAIAws_assume_role::getAssumeRoleArn() const {
    return m_assume_role_arn;
}
void OAIAws_assume_role::setAssumeRoleArn(const QString &assume_role_arn) {
    m_assume_role_arn = assume_role_arn;
    m_assume_role_arn_isSet = true;
}

bool OAIAws_assume_role::is_assume_role_arn_Set() const{
    return m_assume_role_arn_isSet;
}

bool OAIAws_assume_role::is_assume_role_arn_Valid() const{
    return m_assume_role_arn_isValid;
}

QString OAIAws_assume_role::getAuthenticationMode() const {
    return m_authentication_mode;
}
void OAIAws_assume_role::setAuthenticationMode(const QString &authentication_mode) {
    m_authentication_mode = authentication_mode;
    m_authentication_mode_isSet = true;
}

bool OAIAws_assume_role::is_authentication_mode_Set() const{
    return m_authentication_mode_isSet;
}

bool OAIAws_assume_role::is_authentication_mode_Valid() const{
    return m_authentication_mode_isValid;
}

bool OAIAws_assume_role::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assume_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAws_assume_role::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assume_role_arn_isValid && true;
}

} // namespace OpenAPI
