/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule_source_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule_source_patch::OAIRule_source_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule_source_patch::OAIRule_source_patch() {
    this->initializeModel();
}

OAIRule_source_patch::~OAIRule_source_patch() {}

void OAIRule_source_patch::initializeModel() {

    m_channel_filter_isSet = false;
    m_channel_filter_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRule_source_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule_source_patch::fromJsonObject(QJsonObject json) {

    m_channel_filter_isValid = ::OpenAPI::fromJsonValue(m_channel_filter, json[QString("channelFilter")]);
    m_channel_filter_isSet = !json[QString("channelFilter")].isNull() && m_channel_filter_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRule_source_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule_source_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_filter_isSet) {
        obj.insert(QString("channelFilter"), ::OpenAPI::toJsonValue(m_channel_filter));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRule_source_patch::getChannelFilter() const {
    return m_channel_filter;
}
void OAIRule_source_patch::setChannelFilter(const QString &channel_filter) {
    m_channel_filter = channel_filter;
    m_channel_filter_isSet = true;
}

bool OAIRule_source_patch::is_channel_filter_Set() const{
    return m_channel_filter_isSet;
}

bool OAIRule_source_patch::is_channel_filter_Valid() const{
    return m_channel_filter_isValid;
}

QString OAIRule_source_patch::getType() const {
    return m_type;
}
void OAIRule_source_patch::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRule_source_patch::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRule_source_patch::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRule_source_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule_source_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
