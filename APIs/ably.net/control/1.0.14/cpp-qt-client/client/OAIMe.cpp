/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMe::OAIMe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMe::OAIMe() {
    this->initializeModel();
}

OAIMe::~OAIMe() {}

void OAIMe::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIMe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMe::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIMe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMe::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_token.isSet()) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIMe_account OAIMe::getAccount() const {
    return m_account;
}
void OAIMe::setAccount(const OAIMe_account &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIMe::is_account_Set() const{
    return m_account_isSet;
}

bool OAIMe::is_account_Valid() const{
    return m_account_isValid;
}

OAIMe_token OAIMe::getToken() const {
    return m_token;
}
void OAIMe::setToken(const OAIMe_token &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIMe::is_token_Set() const{
    return m_token_isSet;
}

bool OAIMe::is_token_Valid() const{
    return m_token_isValid;
}

OAIMe_user OAIMe::getUser() const {
    return m_user;
}
void OAIMe::setUser(const OAIMe_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIMe::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMe::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIMe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
