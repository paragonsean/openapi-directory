/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRulesApi_H
#define OAI_OAIRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIRule_patch.h"
#include "OAIRule_post.h"
#include "OAIRule_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRulesApi : public QObject {
    Q_OBJECT

public:
    OAIRulesApi(const int timeOut = 0);
    ~OAIRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void appsAppIdRulesGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_rule_post OAIRule_post [optional]
    */
    virtual void appsAppIdRulesPost(const QString &app_id, const ::OpenAPI::OptionalParam<OAIRule_post> &oai_rule_post = ::OpenAPI::OptionalParam<OAIRule_post>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void appsAppIdRulesRuleIdDelete(const QString &app_id, const QString &rule_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void appsAppIdRulesRuleIdGet(const QString &app_id, const QString &rule_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  oai_rule_patch OAIRule_patch [optional]
    */
    virtual void appsAppIdRulesRuleIdPatch(const QString &app_id, const QString &rule_id, const ::OpenAPI::OptionalParam<OAIRule_patch> &oai_rule_patch = ::OpenAPI::OptionalParam<OAIRule_patch>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appsAppIdRulesGetCallback(OAIHttpRequestWorker *worker);
    void appsAppIdRulesPostCallback(OAIHttpRequestWorker *worker);
    void appsAppIdRulesRuleIdDeleteCallback(OAIHttpRequestWorker *worker);
    void appsAppIdRulesRuleIdGetCallback(OAIHttpRequestWorker *worker);
    void appsAppIdRulesRuleIdPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appsAppIdRulesGetSignal(QList<OAIRule_response> summary);
    void appsAppIdRulesPostSignal(OAIRule_response summary);
    void appsAppIdRulesRuleIdDeleteSignal();
    void appsAppIdRulesRuleIdGetSignal(OAIRule_response summary);
    void appsAppIdRulesRuleIdPatchSignal(OAIRule_response summary);


    void appsAppIdRulesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRule_response> summary);
    void appsAppIdRulesPostSignalFull(OAIHttpRequestWorker *worker, OAIRule_response summary);
    void appsAppIdRulesRuleIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appsAppIdRulesRuleIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRule_response summary);
    void appsAppIdRulesRuleIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIRule_response summary);

    Q_DECL_DEPRECATED_X("Use appsAppIdRulesGetSignalError() instead")
    void appsAppIdRulesGetSignalE(QList<OAIRule_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesGetSignalError(QList<OAIRule_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesPostSignalError() instead")
    void appsAppIdRulesPostSignalE(OAIRule_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesPostSignalError(OAIRule_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesRuleIdDeleteSignalError() instead")
    void appsAppIdRulesRuleIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesRuleIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesRuleIdGetSignalError() instead")
    void appsAppIdRulesRuleIdGetSignalE(OAIRule_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesRuleIdGetSignalError(OAIRule_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesRuleIdPatchSignalError() instead")
    void appsAppIdRulesRuleIdPatchSignalE(OAIRule_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesRuleIdPatchSignalError(OAIRule_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appsAppIdRulesGetSignalErrorFull() instead")
    void appsAppIdRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesPostSignalErrorFull() instead")
    void appsAppIdRulesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesRuleIdDeleteSignalErrorFull() instead")
    void appsAppIdRulesRuleIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesRuleIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesRuleIdGetSignalErrorFull() instead")
    void appsAppIdRulesRuleIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesRuleIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAppIdRulesRuleIdPatchSignalErrorFull() instead")
    void appsAppIdRulesRuleIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAppIdRulesRuleIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
