/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueue_response_messages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueue_response_messages::OAIQueue_response_messages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueue_response_messages::OAIQueue_response_messages() {
    this->initializeModel();
}

OAIQueue_response_messages::~OAIQueue_response_messages() {}

void OAIQueue_response_messages::initializeModel() {

    m_ready_isSet = false;
    m_ready_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_unacknowledged_isSet = false;
    m_unacknowledged_isValid = false;
}

void OAIQueue_response_messages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueue_response_messages::fromJsonObject(QJsonObject json) {

    m_ready_isValid = ::OpenAPI::fromJsonValue(m_ready, json[QString("ready")]);
    m_ready_isSet = !json[QString("ready")].isNull() && m_ready_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_unacknowledged_isValid = ::OpenAPI::fromJsonValue(m_unacknowledged, json[QString("unacknowledged")]);
    m_unacknowledged_isSet = !json[QString("unacknowledged")].isNull() && m_unacknowledged_isValid;
}

QString OAIQueue_response_messages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueue_response_messages::asJsonObject() const {
    QJsonObject obj;
    if (m_ready_isSet) {
        obj.insert(QString("ready"), ::OpenAPI::toJsonValue(m_ready));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_unacknowledged_isSet) {
        obj.insert(QString("unacknowledged"), ::OpenAPI::toJsonValue(m_unacknowledged));
    }
    return obj;
}

qint32 OAIQueue_response_messages::getReady() const {
    return m_ready;
}
void OAIQueue_response_messages::setReady(const qint32 &ready) {
    m_ready = ready;
    m_ready_isSet = true;
}

bool OAIQueue_response_messages::is_ready_Set() const{
    return m_ready_isSet;
}

bool OAIQueue_response_messages::is_ready_Valid() const{
    return m_ready_isValid;
}

qint32 OAIQueue_response_messages::getTotal() const {
    return m_total;
}
void OAIQueue_response_messages::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIQueue_response_messages::is_total_Set() const{
    return m_total_isSet;
}

bool OAIQueue_response_messages::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAIQueue_response_messages::getUnacknowledged() const {
    return m_unacknowledged;
}
void OAIQueue_response_messages::setUnacknowledged(const qint32 &unacknowledged) {
    m_unacknowledged = unacknowledged;
    m_unacknowledged_isSet = true;
}

bool OAIQueue_response_messages::is_unacknowledged_Set() const{
    return m_unacknowledged_isSet;
}

bool OAIQueue_response_messages::is_unacknowledged_Valid() const{
    return m_unacknowledged_isValid;
}

bool OAIQueue_response_messages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ready_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unacknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueue_response_messages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
