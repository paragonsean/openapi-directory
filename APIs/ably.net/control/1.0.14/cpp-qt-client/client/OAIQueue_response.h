/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueue_response.h
 *
 * 
 */

#ifndef OAIQueue_response_H
#define OAIQueue_response_H

#include <QJsonObject>

#include "OAIQueue_response_amqp.h"
#include "OAIQueue_response_messages.h"
#include "OAIQueue_response_stats.h"
#include "OAIQueue_response_stomp.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQueue_response_amqp;
class OAIQueue_response_messages;
class OAIQueue_response_stats;
class OAIQueue_response_stomp;

class OAIQueue_response : public OAIObject {
public:
    OAIQueue_response();
    OAIQueue_response(QString json);
    ~OAIQueue_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIQueue_response_amqp getAmqp() const;
    void setAmqp(const OAIQueue_response_amqp &amqp);
    bool is_amqp_Set() const;
    bool is_amqp_Valid() const;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    bool isDeadletter() const;
    void setDeadletter(const bool &deadletter);
    bool is_deadletter_Set() const;
    bool is_deadletter_Valid() const;

    QString getDeadletterId() const;
    void setDeadletterId(const QString &deadletter_id);
    bool is_deadletter_id_Set() const;
    bool is_deadletter_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getMaxLength() const;
    void setMaxLength(const qint32 &max_length);
    bool is_max_length_Set() const;
    bool is_max_length_Valid() const;

    OAIQueue_response_messages getMessages() const;
    void setMessages(const OAIQueue_response_messages &messages);
    bool is_messages_Set() const;
    bool is_messages_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIQueue_response_stats getStats() const;
    void setStats(const OAIQueue_response_stats &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    OAIQueue_response_stomp getStomp() const;
    void setStomp(const OAIQueue_response_stomp &stomp);
    bool is_stomp_Set() const;
    bool is_stomp_Valid() const;

    qint32 getTtl() const;
    void setTtl(const qint32 &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIQueue_response_amqp m_amqp;
    bool m_amqp_isSet;
    bool m_amqp_isValid;

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    bool m_deadletter;
    bool m_deadletter_isSet;
    bool m_deadletter_isValid;

    QString m_deadletter_id;
    bool m_deadletter_id_isSet;
    bool m_deadletter_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_max_length;
    bool m_max_length_isSet;
    bool m_max_length_isValid;

    OAIQueue_response_messages m_messages;
    bool m_messages_isSet;
    bool m_messages_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIQueue_response_stats m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;

    OAIQueue_response_stomp m_stomp;
    bool m_stomp_isSet;
    bool m_stomp_isValid;

    qint32 m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueue_response)

#endif // OAIQueue_response_H
