/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRule_patch.h
 *
 * 
 */

#ifndef OAIRule_patch_H
#define OAIRule_patch_H

#include <QJsonObject>

#include "OAIAmqp_external_rule_patch.h"
#include "OAIAmqp_external_rule_patch_target.h"
#include "OAIAmqp_rule_patch.h"
#include "OAIAws_kinesis_rule_patch.h"
#include "OAIAws_lambda_rule_patch.h"
#include "OAIAws_sqs_rule_patch.h"
#include "OAIAzure_function_rule_patch.h"
#include "OAICloudflare_worker_rule_patch.h"
#include "OAIGoogle_cloud_function_rule_patch.h"
#include "OAIHttp_rule_patch.h"
#include "OAIRule_source.h"
#include "OAIZapier_rule_patch.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRule_source;
class OAIAmqp_external_rule_patch_target;

class OAIRule_patch : public OAIObject {
public:
    OAIRule_patch();
    OAIRule_patch(QString json);
    ~OAIRule_patch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRequestMode() const;
    void setRequestMode(const QString &request_mode);
    bool is_request_mode_Set() const;
    bool is_request_mode_Valid() const;

    QString getRuleType() const;
    void setRuleType(const QString &rule_type);
    bool is_rule_type_Set() const;
    bool is_rule_type_Valid() const;

    OAIRule_source getSource() const;
    void setSource(const OAIRule_source &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIAmqp_external_rule_patch_target getTarget() const;
    void setTarget(const OAIAmqp_external_rule_patch_target &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_request_mode;
    bool m_request_mode_isSet;
    bool m_request_mode_isValid;

    QString m_rule_type;
    bool m_rule_type_isSet;
    bool m_rule_type_isValid;

    OAIRule_source m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIAmqp_external_rule_patch_target m_target;
    bool m_target_isSet;
    bool m_target_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRule_patch)

#endif // OAIRule_patch_H
