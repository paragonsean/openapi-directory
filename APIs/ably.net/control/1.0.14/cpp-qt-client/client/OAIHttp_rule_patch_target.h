/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttp_rule_patch_target.h
 *
 * 
 */

#ifndef OAIHttp_rule_patch_target_H
#define OAIHttp_rule_patch_target_H

#include <QJsonObject>

#include "OAIAmqp_external_rule_patch_target_headers_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmqp_external_rule_patch_target_headers_inner;

class OAIHttp_rule_patch_target : public OAIObject {
public:
    OAIHttp_rule_patch_target();
    OAIHttp_rule_patch_target(QString json);
    ~OAIHttp_rule_patch_target() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnveloped() const;
    void setEnveloped(const bool &enveloped);
    bool is_enveloped_Set() const;
    bool is_enveloped_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    QList<OAIAmqp_external_rule_patch_target_headers_inner> getHeaders() const;
    void setHeaders(const QList<OAIAmqp_external_rule_patch_target_headers_inner> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    QString getSigningKeyId() const;
    void setSigningKeyId(const QString &signing_key_id);
    bool is_signing_key_id_Set() const;
    bool is_signing_key_id_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enveloped;
    bool m_enveloped_isSet;
    bool m_enveloped_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    QList<OAIAmqp_external_rule_patch_target_headers_inner> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    QString m_signing_key_id;
    bool m_signing_key_id_isSet;
    bool m_signing_key_id_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttp_rule_patch_target)

#endif // OAIHttp_rule_patch_target_H
