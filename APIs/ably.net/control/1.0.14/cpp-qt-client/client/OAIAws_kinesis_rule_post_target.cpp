/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAws_kinesis_rule_post_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAws_kinesis_rule_post_target::OAIAws_kinesis_rule_post_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAws_kinesis_rule_post_target::OAIAws_kinesis_rule_post_target() {
    this->initializeModel();
}

OAIAws_kinesis_rule_post_target::~OAIAws_kinesis_rule_post_target() {}

void OAIAws_kinesis_rule_post_target::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_enveloped_isSet = false;
    m_enveloped_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_partition_key_isSet = false;
    m_partition_key_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;
}

void OAIAws_kinesis_rule_post_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAws_kinesis_rule_post_target::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_enveloped_isValid = ::OpenAPI::fromJsonValue(m_enveloped, json[QString("enveloped")]);
    m_enveloped_isSet = !json[QString("enveloped")].isNull() && m_enveloped_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_partition_key_isValid = ::OpenAPI::fromJsonValue(m_partition_key, json[QString("partitionKey")]);
    m_partition_key_isSet = !json[QString("partitionKey")].isNull() && m_partition_key_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("streamName")]);
    m_stream_name_isSet = !json[QString("streamName")].isNull() && m_stream_name_isValid;
}

QString OAIAws_kinesis_rule_post_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAws_kinesis_rule_post_target::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_enveloped_isSet) {
        obj.insert(QString("enveloped"), ::OpenAPI::toJsonValue(m_enveloped));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_partition_key_isSet) {
        obj.insert(QString("partitionKey"), ::OpenAPI::toJsonValue(m_partition_key));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("streamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    return obj;
}

OAIAws_kinesis_rule_patch_target_authentication OAIAws_kinesis_rule_post_target::getAuthentication() const {
    return m_authentication;
}
void OAIAws_kinesis_rule_post_target::setAuthentication(const OAIAws_kinesis_rule_patch_target_authentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIAws_kinesis_rule_post_target::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIAws_kinesis_rule_post_target::is_authentication_Valid() const{
    return m_authentication_isValid;
}

bool OAIAws_kinesis_rule_post_target::isEnveloped() const {
    return m_enveloped;
}
void OAIAws_kinesis_rule_post_target::setEnveloped(const bool &enveloped) {
    m_enveloped = enveloped;
    m_enveloped_isSet = true;
}

bool OAIAws_kinesis_rule_post_target::is_enveloped_Set() const{
    return m_enveloped_isSet;
}

bool OAIAws_kinesis_rule_post_target::is_enveloped_Valid() const{
    return m_enveloped_isValid;
}

QString OAIAws_kinesis_rule_post_target::getFormat() const {
    return m_format;
}
void OAIAws_kinesis_rule_post_target::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIAws_kinesis_rule_post_target::is_format_Set() const{
    return m_format_isSet;
}

bool OAIAws_kinesis_rule_post_target::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIAws_kinesis_rule_post_target::getPartitionKey() const {
    return m_partition_key;
}
void OAIAws_kinesis_rule_post_target::setPartitionKey(const QString &partition_key) {
    m_partition_key = partition_key;
    m_partition_key_isSet = true;
}

bool OAIAws_kinesis_rule_post_target::is_partition_key_Set() const{
    return m_partition_key_isSet;
}

bool OAIAws_kinesis_rule_post_target::is_partition_key_Valid() const{
    return m_partition_key_isValid;
}

QString OAIAws_kinesis_rule_post_target::getRegion() const {
    return m_region;
}
void OAIAws_kinesis_rule_post_target::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAws_kinesis_rule_post_target::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAws_kinesis_rule_post_target::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIAws_kinesis_rule_post_target::getStreamName() const {
    return m_stream_name;
}
void OAIAws_kinesis_rule_post_target::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIAws_kinesis_rule_post_target::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIAws_kinesis_rule_post_target::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

bool OAIAws_kinesis_rule_post_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enveloped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAws_kinesis_rule_post_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_isValid && m_format_isValid && m_partition_key_isValid && m_region_isValid && m_stream_name_isValid && true;
}

} // namespace OpenAPI
