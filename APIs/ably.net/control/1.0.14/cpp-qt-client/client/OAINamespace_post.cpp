/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespace_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespace_post::OAINamespace_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespace_post::OAINamespace_post() {
    this->initializeModel();
}

OAINamespace_post::~OAINamespace_post() {}

void OAINamespace_post::initializeModel() {

    m_authenticated_isSet = false;
    m_authenticated_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_persist_last_isSet = false;
    m_persist_last_isValid = false;

    m_persisted_isSet = false;
    m_persisted_isValid = false;

    m_push_enabled_isSet = false;
    m_push_enabled_isValid = false;

    m_tls_only_isSet = false;
    m_tls_only_isValid = false;
}

void OAINamespace_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespace_post::fromJsonObject(QJsonObject json) {

    m_authenticated_isValid = ::OpenAPI::fromJsonValue(m_authenticated, json[QString("authenticated")]);
    m_authenticated_isSet = !json[QString("authenticated")].isNull() && m_authenticated_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_persist_last_isValid = ::OpenAPI::fromJsonValue(m_persist_last, json[QString("persistLast")]);
    m_persist_last_isSet = !json[QString("persistLast")].isNull() && m_persist_last_isValid;

    m_persisted_isValid = ::OpenAPI::fromJsonValue(m_persisted, json[QString("persisted")]);
    m_persisted_isSet = !json[QString("persisted")].isNull() && m_persisted_isValid;

    m_push_enabled_isValid = ::OpenAPI::fromJsonValue(m_push_enabled, json[QString("pushEnabled")]);
    m_push_enabled_isSet = !json[QString("pushEnabled")].isNull() && m_push_enabled_isValid;

    m_tls_only_isValid = ::OpenAPI::fromJsonValue(m_tls_only, json[QString("tlsOnly")]);
    m_tls_only_isSet = !json[QString("tlsOnly")].isNull() && m_tls_only_isValid;
}

QString OAINamespace_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespace_post::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticated_isSet) {
        obj.insert(QString("authenticated"), ::OpenAPI::toJsonValue(m_authenticated));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_persist_last_isSet) {
        obj.insert(QString("persistLast"), ::OpenAPI::toJsonValue(m_persist_last));
    }
    if (m_persisted_isSet) {
        obj.insert(QString("persisted"), ::OpenAPI::toJsonValue(m_persisted));
    }
    if (m_push_enabled_isSet) {
        obj.insert(QString("pushEnabled"), ::OpenAPI::toJsonValue(m_push_enabled));
    }
    if (m_tls_only_isSet) {
        obj.insert(QString("tlsOnly"), ::OpenAPI::toJsonValue(m_tls_only));
    }
    return obj;
}

bool OAINamespace_post::isAuthenticated() const {
    return m_authenticated;
}
void OAINamespace_post::setAuthenticated(const bool &authenticated) {
    m_authenticated = authenticated;
    m_authenticated_isSet = true;
}

bool OAINamespace_post::is_authenticated_Set() const{
    return m_authenticated_isSet;
}

bool OAINamespace_post::is_authenticated_Valid() const{
    return m_authenticated_isValid;
}

QString OAINamespace_post::getId() const {
    return m_id;
}
void OAINamespace_post::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINamespace_post::is_id_Set() const{
    return m_id_isSet;
}

bool OAINamespace_post::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINamespace_post::isPersistLast() const {
    return m_persist_last;
}
void OAINamespace_post::setPersistLast(const bool &persist_last) {
    m_persist_last = persist_last;
    m_persist_last_isSet = true;
}

bool OAINamespace_post::is_persist_last_Set() const{
    return m_persist_last_isSet;
}

bool OAINamespace_post::is_persist_last_Valid() const{
    return m_persist_last_isValid;
}

bool OAINamespace_post::isPersisted() const {
    return m_persisted;
}
void OAINamespace_post::setPersisted(const bool &persisted) {
    m_persisted = persisted;
    m_persisted_isSet = true;
}

bool OAINamespace_post::is_persisted_Set() const{
    return m_persisted_isSet;
}

bool OAINamespace_post::is_persisted_Valid() const{
    return m_persisted_isValid;
}

bool OAINamespace_post::isPushEnabled() const {
    return m_push_enabled;
}
void OAINamespace_post::setPushEnabled(const bool &push_enabled) {
    m_push_enabled = push_enabled;
    m_push_enabled_isSet = true;
}

bool OAINamespace_post::is_push_enabled_Set() const{
    return m_push_enabled_isSet;
}

bool OAINamespace_post::is_push_enabled_Valid() const{
    return m_push_enabled_isValid;
}

bool OAINamespace_post::isTlsOnly() const {
    return m_tls_only;
}
void OAINamespace_post::setTlsOnly(const bool &tls_only) {
    m_tls_only = tls_only;
    m_tls_only_isSet = true;
}

bool OAINamespace_post::is_tls_only_Set() const{
    return m_tls_only_isSet;
}

bool OAINamespace_post::is_tls_only_Valid() const{
    return m_tls_only_isValid;
}

bool OAINamespace_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persist_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persisted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespace_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
