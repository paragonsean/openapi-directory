/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueue_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueue_response::OAIQueue_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueue_response::OAIQueue_response() {
    this->initializeModel();
}

OAIQueue_response::~OAIQueue_response() {}

void OAIQueue_response::initializeModel() {

    m_amqp_isSet = false;
    m_amqp_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_deadletter_isSet = false;
    m_deadletter_isValid = false;

    m_deadletter_id_isSet = false;
    m_deadletter_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_stomp_isSet = false;
    m_stomp_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIQueue_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueue_response::fromJsonObject(QJsonObject json) {

    m_amqp_isValid = ::OpenAPI::fromJsonValue(m_amqp, json[QString("amqp")]);
    m_amqp_isSet = !json[QString("amqp")].isNull() && m_amqp_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_deadletter_isValid = ::OpenAPI::fromJsonValue(m_deadletter, json[QString("deadletter")]);
    m_deadletter_isSet = !json[QString("deadletter")].isNull() && m_deadletter_isValid;

    m_deadletter_id_isValid = ::OpenAPI::fromJsonValue(m_deadletter_id, json[QString("deadletterId")]);
    m_deadletter_id_isSet = !json[QString("deadletterId")].isNull() && m_deadletter_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_stomp_isValid = ::OpenAPI::fromJsonValue(m_stomp, json[QString("stomp")]);
    m_stomp_isSet = !json[QString("stomp")].isNull() && m_stomp_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIQueue_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueue_response::asJsonObject() const {
    QJsonObject obj;
    if (m_amqp.isSet()) {
        obj.insert(QString("amqp"), ::OpenAPI::toJsonValue(m_amqp));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_deadletter_isSet) {
        obj.insert(QString("deadletter"), ::OpenAPI::toJsonValue(m_deadletter));
    }
    if (m_deadletter_id_isSet) {
        obj.insert(QString("deadletterId"), ::OpenAPI::toJsonValue(m_deadletter_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_messages.isSet()) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_stomp.isSet()) {
        obj.insert(QString("stomp"), ::OpenAPI::toJsonValue(m_stomp));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

OAIQueue_response_amqp OAIQueue_response::getAmqp() const {
    return m_amqp;
}
void OAIQueue_response::setAmqp(const OAIQueue_response_amqp &amqp) {
    m_amqp = amqp;
    m_amqp_isSet = true;
}

bool OAIQueue_response::is_amqp_Set() const{
    return m_amqp_isSet;
}

bool OAIQueue_response::is_amqp_Valid() const{
    return m_amqp_isValid;
}

QString OAIQueue_response::getAppId() const {
    return m_app_id;
}
void OAIQueue_response::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIQueue_response::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIQueue_response::is_app_id_Valid() const{
    return m_app_id_isValid;
}

bool OAIQueue_response::isDeadletter() const {
    return m_deadletter;
}
void OAIQueue_response::setDeadletter(const bool &deadletter) {
    m_deadletter = deadletter;
    m_deadletter_isSet = true;
}

bool OAIQueue_response::is_deadletter_Set() const{
    return m_deadletter_isSet;
}

bool OAIQueue_response::is_deadletter_Valid() const{
    return m_deadletter_isValid;
}

QString OAIQueue_response::getDeadletterId() const {
    return m_deadletter_id;
}
void OAIQueue_response::setDeadletterId(const QString &deadletter_id) {
    m_deadletter_id = deadletter_id;
    m_deadletter_id_isSet = true;
}

bool OAIQueue_response::is_deadletter_id_Set() const{
    return m_deadletter_id_isSet;
}

bool OAIQueue_response::is_deadletter_id_Valid() const{
    return m_deadletter_id_isValid;
}

QString OAIQueue_response::getId() const {
    return m_id;
}
void OAIQueue_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQueue_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQueue_response::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIQueue_response::getMaxLength() const {
    return m_max_length;
}
void OAIQueue_response::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIQueue_response::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIQueue_response::is_max_length_Valid() const{
    return m_max_length_isValid;
}

OAIQueue_response_messages OAIQueue_response::getMessages() const {
    return m_messages;
}
void OAIQueue_response::setMessages(const OAIQueue_response_messages &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIQueue_response::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIQueue_response::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIQueue_response::getName() const {
    return m_name;
}
void OAIQueue_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQueue_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQueue_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQueue_response::getRegion() const {
    return m_region;
}
void OAIQueue_response::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIQueue_response::is_region_Set() const{
    return m_region_isSet;
}

bool OAIQueue_response::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIQueue_response::getState() const {
    return m_state;
}
void OAIQueue_response::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIQueue_response::is_state_Set() const{
    return m_state_isSet;
}

bool OAIQueue_response::is_state_Valid() const{
    return m_state_isValid;
}

OAIQueue_response_stats OAIQueue_response::getStats() const {
    return m_stats;
}
void OAIQueue_response::setStats(const OAIQueue_response_stats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIQueue_response::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIQueue_response::is_stats_Valid() const{
    return m_stats_isValid;
}

OAIQueue_response_stomp OAIQueue_response::getStomp() const {
    return m_stomp;
}
void OAIQueue_response::setStomp(const OAIQueue_response_stomp &stomp) {
    m_stomp = stomp;
    m_stomp_isSet = true;
}

bool OAIQueue_response::is_stomp_Set() const{
    return m_stomp_isSet;
}

bool OAIQueue_response::is_stomp_Valid() const{
    return m_stomp_isValid;
}

qint32 OAIQueue_response::getTtl() const {
    return m_ttl;
}
void OAIQueue_response::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIQueue_response::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIQueue_response::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIQueue_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amqp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadletter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadletter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stomp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueue_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
