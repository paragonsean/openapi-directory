/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKey_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKey_response::OAIKey_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKey_response::OAIKey_response() {
    this->initializeModel();
}

OAIKey_response::~OAIKey_response() {}

void OAIKey_response::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIKey_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKey_response::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    if(json["capability"].isObject()){
        auto varmap = json["capability"].toObject().toVariantMap();
        m_capability_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_capability_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_capability_isSet &= !jval.isNull() && m_capability_isValid;
                m_capability.insert(m_capability.end(), val, item);
            }
        }
    }

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIKey_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKey_response::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_capability.size() > 0) {
        
        obj.insert(QString("capability"), toJsonValue(m_capability));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIKey_response::getAppId() const {
    return m_app_id;
}
void OAIKey_response::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIKey_response::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIKey_response::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QMap<QString, QList<QString>> OAIKey_response::getCapability() const {
    return m_capability;
}
void OAIKey_response::setCapability(const QMap<QString, QList<QString>> &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAIKey_response::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAIKey_response::is_capability_Valid() const{
    return m_capability_isValid;
}

qint32 OAIKey_response::getCreated() const {
    return m_created;
}
void OAIKey_response::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIKey_response::is_created_Set() const{
    return m_created_isSet;
}

bool OAIKey_response::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIKey_response::getId() const {
    return m_id;
}
void OAIKey_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIKey_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIKey_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIKey_response::getKey() const {
    return m_key;
}
void OAIKey_response::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIKey_response::is_key_Set() const{
    return m_key_isSet;
}

bool OAIKey_response::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIKey_response::getModified() const {
    return m_modified;
}
void OAIKey_response::setModified(const qint32 &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIKey_response::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIKey_response::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIKey_response::getName() const {
    return m_name;
}
void OAIKey_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIKey_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIKey_response::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIKey_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKey_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
