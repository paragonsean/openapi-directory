/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule_attributes::OAIRule_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule_attributes::OAIRule_attributes() {
    this->initializeModel();
}

OAIRule_attributes::~OAIRule_attributes() {}

void OAIRule_attributes::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRule_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule_attributes::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIRule_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIRule_attributes::getAppId() const {
    return m_app_id;
}
void OAIRule_attributes::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIRule_attributes::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIRule_attributes::is_app_id_Valid() const{
    return m_app_id_isValid;
}

double OAIRule_attributes::getCreated() const {
    return m_created;
}
void OAIRule_attributes::setCreated(const double &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRule_attributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRule_attributes::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIRule_attributes::getId() const {
    return m_id;
}
void OAIRule_attributes::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRule_attributes::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRule_attributes::is_id_Valid() const{
    return m_id_isValid;
}

double OAIRule_attributes::getModified() const {
    return m_modified;
}
void OAIRule_attributes::setModified(const double &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIRule_attributes::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIRule_attributes::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIRule_attributes::getStatus() const {
    return m_status;
}
void OAIRule_attributes::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRule_attributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRule_attributes::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRule_attributes::getVersion() const {
    return m_version;
}
void OAIRule_attributes::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRule_attributes::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRule_attributes::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRule_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
