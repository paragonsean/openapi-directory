/**
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIfttt_rule_post_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIfttt_rule_post_target::OAIIfttt_rule_post_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIfttt_rule_post_target::OAIIfttt_rule_post_target() {
    this->initializeModel();
}

OAIIfttt_rule_post_target::~OAIIfttt_rule_post_target() {}

void OAIIfttt_rule_post_target::initializeModel() {

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_webhook_key_isSet = false;
    m_webhook_key_isValid = false;
}

void OAIIfttt_rule_post_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIfttt_rule_post_target::fromJsonObject(QJsonObject json) {

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_webhook_key_isValid = ::OpenAPI::fromJsonValue(m_webhook_key, json[QString("webhookKey")]);
    m_webhook_key_isSet = !json[QString("webhookKey")].isNull() && m_webhook_key_isValid;
}

QString OAIIfttt_rule_post_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIfttt_rule_post_target::asJsonObject() const {
    QJsonObject obj;
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_webhook_key_isSet) {
        obj.insert(QString("webhookKey"), ::OpenAPI::toJsonValue(m_webhook_key));
    }
    return obj;
}

QString OAIIfttt_rule_post_target::getEventName() const {
    return m_event_name;
}
void OAIIfttt_rule_post_target::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIIfttt_rule_post_target::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIIfttt_rule_post_target::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIIfttt_rule_post_target::getWebhookKey() const {
    return m_webhook_key;
}
void OAIIfttt_rule_post_target::setWebhookKey(const QString &webhook_key) {
    m_webhook_key = webhook_key;
    m_webhook_key_isSet = true;
}

bool OAIIfttt_rule_post_target::is_webhook_key_Set() const{
    return m_webhook_key_isSet;
}

bool OAIIfttt_rule_post_target::is_webhook_key_Valid() const{
    return m_webhook_key_isValid;
}

bool OAIIfttt_rule_post_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIfttt_rule_post_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_name_isValid && m_webhook_key_isValid && true;
}

} // namespace OpenAPI
