# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: object=None, account_id: str=None, apns_use_sandbox_endpoint: bool=None, id: str=None, name: str=None, status: str=None, tls_only: bool=None):
        """AppResponse - a model defined in OpenAPI

        :param links: The links of this AppResponse.
        :param account_id: The account_id of this AppResponse.
        :param apns_use_sandbox_endpoint: The apns_use_sandbox_endpoint of this AppResponse.
        :param id: The id of this AppResponse.
        :param name: The name of this AppResponse.
        :param status: The status of this AppResponse.
        :param tls_only: The tls_only of this AppResponse.
        """
        self.openapi_types = {
            'links': object,
            'account_id': str,
            'apns_use_sandbox_endpoint': bool,
            'id': str,
            'name': str,
            'status': str,
            'tls_only': bool
        }

        self.attribute_map = {
            'links': '_links',
            'account_id': 'accountId',
            'apns_use_sandbox_endpoint': 'apnsUseSandboxEndpoint',
            'id': 'id',
            'name': 'name',
            'status': 'status',
            'tls_only': 'tlsOnly'
        }

        self._links = links
        self._account_id = account_id
        self._apns_use_sandbox_endpoint = apns_use_sandbox_endpoint
        self._id = id
        self._name = name
        self._status = status
        self._tls_only = tls_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The app_response of this AppResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AppResponse.

        A link self-referencing the app that has been created.

        :return: The links of this AppResponse.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AppResponse.

        A link self-referencing the app that has been created.

        :param links: The links of this AppResponse.
        :type links: object
        """

        self._links = links

    @property
    def account_id(self):
        """Gets the account_id of this AppResponse.

        The ID of your Ably account.

        :return: The account_id of this AppResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AppResponse.

        The ID of your Ably account.

        :param account_id: The account_id of this AppResponse.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def apns_use_sandbox_endpoint(self):
        """Gets the apns_use_sandbox_endpoint of this AppResponse.

        Apple Push Notification service endpoint.

        :return: The apns_use_sandbox_endpoint of this AppResponse.
        :rtype: bool
        """
        return self._apns_use_sandbox_endpoint

    @apns_use_sandbox_endpoint.setter
    def apns_use_sandbox_endpoint(self, apns_use_sandbox_endpoint):
        """Sets the apns_use_sandbox_endpoint of this AppResponse.

        Apple Push Notification service endpoint.

        :param apns_use_sandbox_endpoint: The apns_use_sandbox_endpoint of this AppResponse.
        :type apns_use_sandbox_endpoint: bool
        """

        self._apns_use_sandbox_endpoint = apns_use_sandbox_endpoint

    @property
    def id(self):
        """Gets the id of this AppResponse.

        The application ID.

        :return: The id of this AppResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppResponse.

        The application ID.

        :param id: The id of this AppResponse.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AppResponse.

        The application name.

        :return: The name of this AppResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppResponse.

        The application name.

        :param name: The name of this AppResponse.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this AppResponse.

        The application status. Disabled applications will not accept new connections and will return an error to all clients.

        :return: The status of this AppResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppResponse.

        The application status. Disabled applications will not accept new connections and will return an error to all clients.

        :param status: The status of this AppResponse.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tls_only(self):
        """Gets the tls_only of this AppResponse.

        Enforce TLS for all connections. This setting overrides any channel setting.

        :return: The tls_only of this AppResponse.
        :rtype: bool
        """
        return self._tls_only

    @tls_only.setter
    def tls_only(self, tls_only):
        """Sets the tls_only of this AppResponse.

        Enforce TLS for all connections. This setting overrides any channel setting.

        :param tls_only: The tls_only of this AppResponse.
        :type tls_only: bool
        """

        self._tls_only = tls_only
