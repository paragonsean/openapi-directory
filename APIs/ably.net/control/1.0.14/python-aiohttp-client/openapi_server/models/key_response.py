# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, capability: Dict[str, List[str]]=None, created: int=None, id: str=None, key: str=None, modified: int=None, name: str=None):
        """KeyResponse - a model defined in OpenAPI

        :param app_id: The app_id of this KeyResponse.
        :param capability: The capability of this KeyResponse.
        :param created: The created of this KeyResponse.
        :param id: The id of this KeyResponse.
        :param key: The key of this KeyResponse.
        :param modified: The modified of this KeyResponse.
        :param name: The name of this KeyResponse.
        """
        self.openapi_types = {
            'app_id': str,
            'capability': Dict[str, List[str]],
            'created': int,
            'id': str,
            'key': str,
            'modified': int,
            'name': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'capability': 'capability',
            'created': 'created',
            'id': 'id',
            'key': 'key',
            'modified': 'modified',
            'name': 'name'
        }

        self._app_id = app_id
        self._capability = capability
        self._created = created
        self._id = id
        self._key = key
        self._modified = modified
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The key_response of this KeyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this KeyResponse.

        The Ably application ID which this key is associated with.

        :return: The app_id of this KeyResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this KeyResponse.

        The Ably application ID which this key is associated with.

        :param app_id: The app_id of this KeyResponse.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def capability(self):
        """Gets the capability of this KeyResponse.

        The capabilities that this key has. More information on capabilities can be found in the <a href=\"https://ably.com/documentation/core-features/authentication#capabilities-explained\">Ably documentation</a>.

        :return: The capability of this KeyResponse.
        :rtype: Dict[str, List[str]]
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this KeyResponse.

        The capabilities that this key has. More information on capabilities can be found in the <a href=\"https://ably.com/documentation/core-features/authentication#capabilities-explained\">Ably documentation</a>.

        :param capability: The capability of this KeyResponse.
        :type capability: Dict[str, List[str]]
        """
        allowed_values = [publish, subscribe, history, presence, channel-metadata, push-admin, push-subscribe, statistics]  # noqa: E501
        if not set(capability.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `capability` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(capability.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._capability = capability

    @property
    def created(self):
        """Gets the created of this KeyResponse.

        Unix timestamp representing the date and time of creation of the key.

        :return: The created of this KeyResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this KeyResponse.

        Unix timestamp representing the date and time of creation of the key.

        :param created: The created of this KeyResponse.
        :type created: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this KeyResponse.

        The key ID.

        :return: The id of this KeyResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KeyResponse.

        The key ID.

        :param id: The id of this KeyResponse.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this KeyResponse.

        The complete API key including API secret.

        :return: The key of this KeyResponse.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeyResponse.

        The complete API key including API secret.

        :param key: The key of this KeyResponse.
        :type key: str
        """

        self._key = key

    @property
    def modified(self):
        """Gets the modified of this KeyResponse.

        Unix timestamp representing the date and time of the last modification of the key.

        :return: The modified of this KeyResponse.
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this KeyResponse.

        Unix timestamp representing the date and time of the last modification of the key.

        :param modified: The modified of this KeyResponse.
        :type modified: int
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this KeyResponse.

        The name of the application this key is associated with.

        :return: The name of this KeyResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeyResponse.

        The name of the application this key is associated with.

        :param name: The name of this KeyResponse.
        :type name: str
        """

        self._name = name
