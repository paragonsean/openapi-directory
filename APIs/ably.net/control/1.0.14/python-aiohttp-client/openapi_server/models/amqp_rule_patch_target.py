# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amqp_external_rule_patch_target_headers_inner import AmqpExternalRulePatchTargetHeadersInner
from openapi_server import util


class AmqpRulePatchTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enveloped: bool=None, format: str=None, headers: List[AmqpExternalRulePatchTargetHeadersInner]=None, queue_id: str=None):
        """AmqpRulePatchTarget - a model defined in OpenAPI

        :param enveloped: The enveloped of this AmqpRulePatchTarget.
        :param format: The format of this AmqpRulePatchTarget.
        :param headers: The headers of this AmqpRulePatchTarget.
        :param queue_id: The queue_id of this AmqpRulePatchTarget.
        """
        self.openapi_types = {
            'enveloped': bool,
            'format': str,
            'headers': List[AmqpExternalRulePatchTargetHeadersInner],
            'queue_id': str
        }

        self.attribute_map = {
            'enveloped': 'enveloped',
            'format': 'format',
            'headers': 'headers',
            'queue_id': 'queueId'
        }

        self._enveloped = enveloped
        self._format = format
        self._headers = headers
        self._queue_id = queue_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmqpRulePatchTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The amqp_rule_patch_target of this AmqpRulePatchTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enveloped(self):
        """Gets the enveloped of this AmqpRulePatchTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :return: The enveloped of this AmqpRulePatchTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this AmqpRulePatchTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :param enveloped: The enveloped of this AmqpRulePatchTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this AmqpRulePatchTarget.


        :return: The format of this AmqpRulePatchTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AmqpRulePatchTarget.


        :param format: The format of this AmqpRulePatchTarget.
        :type format: str
        """

        self._format = format

    @property
    def headers(self):
        """Gets the headers of this AmqpRulePatchTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :return: The headers of this AmqpRulePatchTarget.
        :rtype: List[AmqpExternalRulePatchTargetHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this AmqpRulePatchTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :param headers: The headers of this AmqpRulePatchTarget.
        :type headers: List[AmqpExternalRulePatchTargetHeadersInner]
        """

        self._headers = headers

    @property
    def queue_id(self):
        """Gets the queue_id of this AmqpRulePatchTarget.


        :return: The queue_id of this AmqpRulePatchTarget.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this AmqpRulePatchTarget.


        :param queue_id: The queue_id of this AmqpRulePatchTarget.
        :type queue_id: str
        """

        self._queue_id = queue_id
