# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuleAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, created: float=None, id: str=None, modified: float=None, status: str=None, version: str=None):
        """RuleAttributes - a model defined in OpenAPI

        :param app_id: The app_id of this RuleAttributes.
        :param created: The created of this RuleAttributes.
        :param id: The id of this RuleAttributes.
        :param modified: The modified of this RuleAttributes.
        :param status: The status of this RuleAttributes.
        :param version: The version of this RuleAttributes.
        """
        self.openapi_types = {
            'app_id': str,
            'created': float,
            'id': str,
            'modified': float,
            'status': str,
            'version': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'created': 'created',
            'id': 'id',
            'modified': 'modified',
            'status': 'status',
            'version': 'version'
        }

        self._app_id = app_id
        self._created = created
        self._id = id
        self._modified = modified
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule_attributes of this RuleAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this RuleAttributes.

        The Ably application ID.

        :return: The app_id of this RuleAttributes.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this RuleAttributes.

        The Ably application ID.

        :param app_id: The app_id of this RuleAttributes.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def created(self):
        """Gets the created of this RuleAttributes.

        Unix timestamp representing the date and time of creation of the rule.

        :return: The created of this RuleAttributes.
        :rtype: float
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RuleAttributes.

        Unix timestamp representing the date and time of creation of the rule.

        :param created: The created of this RuleAttributes.
        :type created: float
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this RuleAttributes.

        The rule ID.

        :return: The id of this RuleAttributes.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleAttributes.

        The rule ID.

        :param id: The id of this RuleAttributes.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this RuleAttributes.

        Unix timestamp representing the date and time of last modification of the rule.

        :return: The modified of this RuleAttributes.
        :rtype: float
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this RuleAttributes.

        Unix timestamp representing the date and time of last modification of the rule.

        :param modified: The modified of this RuleAttributes.
        :type modified: float
        """

        self._modified = modified

    @property
    def status(self):
        """Gets the status of this RuleAttributes.

        The status of the rule. Rules can be enabled or disabled.

        :return: The status of this RuleAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RuleAttributes.

        The status of the rule. Rules can be enabled or disabled.

        :param status: The status of this RuleAttributes.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """Gets the version of this RuleAttributes.

        API version. Events and the format of their payloads are versioned. Please see the <a href=\"https://ably.com/documentation/general/events\">Events documentation</a>.

        :return: The version of this RuleAttributes.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RuleAttributes.

        API version. Events and the format of their payloads are versioned. Please see the <a href=\"https://ably.com/documentation/general/events\">Events documentation</a>.

        :param version: The version of this RuleAttributes.
        :type version: str
        """

        self._version = version
