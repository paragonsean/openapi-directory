# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloudflare_worker_rule_post_target import CloudflareWorkerRulePostTarget
from openapi_server.models.rule_source import RuleSource
from openapi_server import util


class CloudflareWorkerRuleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: object=None, app_id: str=None, created: float=None, id: str=None, modified: float=None, request_mode: str=None, rule_type: str=None, source: RuleSource=None, status: str=None, target: CloudflareWorkerRulePostTarget=None, version: str=None):
        """CloudflareWorkerRuleResponse - a model defined in OpenAPI

        :param links: The links of this CloudflareWorkerRuleResponse.
        :param app_id: The app_id of this CloudflareWorkerRuleResponse.
        :param created: The created of this CloudflareWorkerRuleResponse.
        :param id: The id of this CloudflareWorkerRuleResponse.
        :param modified: The modified of this CloudflareWorkerRuleResponse.
        :param request_mode: The request_mode of this CloudflareWorkerRuleResponse.
        :param rule_type: The rule_type of this CloudflareWorkerRuleResponse.
        :param source: The source of this CloudflareWorkerRuleResponse.
        :param status: The status of this CloudflareWorkerRuleResponse.
        :param target: The target of this CloudflareWorkerRuleResponse.
        :param version: The version of this CloudflareWorkerRuleResponse.
        """
        self.openapi_types = {
            'links': object,
            'app_id': str,
            'created': float,
            'id': str,
            'modified': float,
            'request_mode': str,
            'rule_type': str,
            'source': RuleSource,
            'status': str,
            'target': CloudflareWorkerRulePostTarget,
            'version': str
        }

        self.attribute_map = {
            'links': '_links',
            'app_id': 'appId',
            'created': 'created',
            'id': 'id',
            'modified': 'modified',
            'request_mode': 'requestMode',
            'rule_type': 'ruleType',
            'source': 'source',
            'status': 'status',
            'target': 'target',
            'version': 'version'
        }

        self._links = links
        self._app_id = app_id
        self._created = created
        self._id = id
        self._modified = modified
        self._request_mode = request_mode
        self._rule_type = rule_type
        self._source = source
        self._status = status
        self._target = target
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudflareWorkerRuleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cloudflare_worker_rule_response of this CloudflareWorkerRuleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CloudflareWorkerRuleResponse.


        :return: The links of this CloudflareWorkerRuleResponse.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CloudflareWorkerRuleResponse.


        :param links: The links of this CloudflareWorkerRuleResponse.
        :type links: object
        """

        self._links = links

    @property
    def app_id(self):
        """Gets the app_id of this CloudflareWorkerRuleResponse.

        The Ably application ID.

        :return: The app_id of this CloudflareWorkerRuleResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CloudflareWorkerRuleResponse.

        The Ably application ID.

        :param app_id: The app_id of this CloudflareWorkerRuleResponse.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def created(self):
        """Gets the created of this CloudflareWorkerRuleResponse.

        Unix timestamp representing the date and time of creation of the rule.

        :return: The created of this CloudflareWorkerRuleResponse.
        :rtype: float
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CloudflareWorkerRuleResponse.

        Unix timestamp representing the date and time of creation of the rule.

        :param created: The created of this CloudflareWorkerRuleResponse.
        :type created: float
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this CloudflareWorkerRuleResponse.

        The rule ID.

        :return: The id of this CloudflareWorkerRuleResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudflareWorkerRuleResponse.

        The rule ID.

        :param id: The id of this CloudflareWorkerRuleResponse.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this CloudflareWorkerRuleResponse.

        Unix timestamp representing the date and time of last modification of the rule.

        :return: The modified of this CloudflareWorkerRuleResponse.
        :rtype: float
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this CloudflareWorkerRuleResponse.

        Unix timestamp representing the date and time of last modification of the rule.

        :param modified: The modified of this CloudflareWorkerRuleResponse.
        :type modified: float
        """

        self._modified = modified

    @property
    def request_mode(self):
        """Gets the request_mode of this CloudflareWorkerRuleResponse.

        This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably <a href=\"https://ably.com/documentation/general/events#batching\">documentation</a>.

        :return: The request_mode of this CloudflareWorkerRuleResponse.
        :rtype: str
        """
        return self._request_mode

    @request_mode.setter
    def request_mode(self, request_mode):
        """Sets the request_mode of this CloudflareWorkerRuleResponse.

        This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably <a href=\"https://ably.com/documentation/general/events#batching\">documentation</a>.

        :param request_mode: The request_mode of this CloudflareWorkerRuleResponse.
        :type request_mode: str
        """
        allowed_values = ["single", "batch"]  # noqa: E501
        if request_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `request_mode` ({0}), must be one of {1}"
                .format(request_mode, allowed_values)
            )

        self._request_mode = request_mode

    @property
    def rule_type(self):
        """Gets the rule_type of this CloudflareWorkerRuleResponse.

        The type of rule. In this case Cloudflare Worker. See the <a href=\"https://ably.com/integrations\">documentation</a> for further information.

        :return: The rule_type of this CloudflareWorkerRuleResponse.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this CloudflareWorkerRuleResponse.

        The type of rule. In this case Cloudflare Worker. See the <a href=\"https://ably.com/integrations\">documentation</a> for further information.

        :param rule_type: The rule_type of this CloudflareWorkerRuleResponse.
        :type rule_type: str
        """
        allowed_values = ["http/cloudflare-worker"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    @property
    def source(self):
        """Gets the source of this CloudflareWorkerRuleResponse.


        :return: The source of this CloudflareWorkerRuleResponse.
        :rtype: RuleSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CloudflareWorkerRuleResponse.


        :param source: The source of this CloudflareWorkerRuleResponse.
        :type source: RuleSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def status(self):
        """Gets the status of this CloudflareWorkerRuleResponse.

        The status of the rule. Rules can be enabled or disabled.

        :return: The status of this CloudflareWorkerRuleResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CloudflareWorkerRuleResponse.

        The status of the rule. Rules can be enabled or disabled.

        :param status: The status of this CloudflareWorkerRuleResponse.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target(self):
        """Gets the target of this CloudflareWorkerRuleResponse.


        :return: The target of this CloudflareWorkerRuleResponse.
        :rtype: CloudflareWorkerRulePostTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CloudflareWorkerRuleResponse.


        :param target: The target of this CloudflareWorkerRuleResponse.
        :type target: CloudflareWorkerRulePostTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def version(self):
        """Gets the version of this CloudflareWorkerRuleResponse.

        API version. Events and the format of their payloads are versioned. Please see the <a href=\"https://ably.com/documentation/general/events\">Events documentation</a>.

        :return: The version of this CloudflareWorkerRuleResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CloudflareWorkerRuleResponse.

        API version. Events and the format of their payloads are versioned. Please see the <a href=\"https://ably.com/documentation/general/events\">Events documentation</a>.

        :param version: The version of this CloudflareWorkerRuleResponse.
        :type version: str
        """

        self._version = version
