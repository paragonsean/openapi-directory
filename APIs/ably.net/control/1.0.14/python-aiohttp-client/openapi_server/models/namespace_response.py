# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespaceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticated: bool=False, created: int=None, id: str=None, modified: int=None, persist_last: bool=False, persisted: bool=False, push_enabled: bool=False, tls_only: bool=False):
        """NamespaceResponse - a model defined in OpenAPI

        :param authenticated: The authenticated of this NamespaceResponse.
        :param created: The created of this NamespaceResponse.
        :param id: The id of this NamespaceResponse.
        :param modified: The modified of this NamespaceResponse.
        :param persist_last: The persist_last of this NamespaceResponse.
        :param persisted: The persisted of this NamespaceResponse.
        :param push_enabled: The push_enabled of this NamespaceResponse.
        :param tls_only: The tls_only of this NamespaceResponse.
        """
        self.openapi_types = {
            'authenticated': bool,
            'created': int,
            'id': str,
            'modified': int,
            'persist_last': bool,
            'persisted': bool,
            'push_enabled': bool,
            'tls_only': bool
        }

        self.attribute_map = {
            'authenticated': 'authenticated',
            'created': 'created',
            'id': 'id',
            'modified': 'modified',
            'persist_last': 'persistLast',
            'persisted': 'persisted',
            'push_enabled': 'pushEnabled',
            'tls_only': 'tlsOnly'
        }

        self._authenticated = authenticated
        self._created = created
        self._id = id
        self._modified = modified
        self._persist_last = persist_last
        self._persisted = persisted
        self._push_enabled = push_enabled
        self._tls_only = tls_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespaceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The namespace_response of this NamespaceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticated(self):
        """Gets the authenticated of this NamespaceResponse.

        If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\">Ably knowledge base</a> for more details.

        :return: The authenticated of this NamespaceResponse.
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this NamespaceResponse.

        If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\">Ably knowledge base</a> for more details.

        :param authenticated: The authenticated of this NamespaceResponse.
        :type authenticated: bool
        """

        self._authenticated = authenticated

    @property
    def created(self):
        """Gets the created of this NamespaceResponse.

        Unix timestamp representing the date and time of creation of the namespace.

        :return: The created of this NamespaceResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NamespaceResponse.

        Unix timestamp representing the date and time of creation of the namespace.

        :param created: The created of this NamespaceResponse.
        :type created: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this NamespaceResponse.

        The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`.

        :return: The id of this NamespaceResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NamespaceResponse.

        The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`.

        :param id: The id of this NamespaceResponse.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this NamespaceResponse.

        Unix timestamp representing the date and time of last modification of the namespace.

        :return: The modified of this NamespaceResponse.
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this NamespaceResponse.

        Unix timestamp representing the date and time of last modification of the namespace.

        :param modified: The modified of this NamespaceResponse.
        :type modified: int
        """

        self._modified = modified

    @property
    def persist_last(self):
        """Gets the persist_last of this NamespaceResponse.

        If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :return: The persist_last of this NamespaceResponse.
        :rtype: bool
        """
        return self._persist_last

    @persist_last.setter
    def persist_last(self, persist_last):
        """Sets the persist_last of this NamespaceResponse.

        If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :param persist_last: The persist_last of this NamespaceResponse.
        :type persist_last: bool
        """

        self._persist_last = persist_last

    @property
    def persisted(self):
        """Gets the persisted of this NamespaceResponse.

        If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :return: The persisted of this NamespaceResponse.
        :rtype: bool
        """
        return self._persisted

    @persisted.setter
    def persisted(self, persisted):
        """Sets the persisted of this NamespaceResponse.

        If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :param persisted: The persisted of this NamespaceResponse.
        :type persisted: bool
        """

        self._persisted = persisted

    @property
    def push_enabled(self):
        """Gets the push_enabled of this NamespaceResponse.

        If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.

        :return: The push_enabled of this NamespaceResponse.
        :rtype: bool
        """
        return self._push_enabled

    @push_enabled.setter
    def push_enabled(self, push_enabled):
        """Sets the push_enabled of this NamespaceResponse.

        If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.

        :param push_enabled: The push_enabled of this NamespaceResponse.
        :type push_enabled: bool
        """

        self._push_enabled = push_enabled

    @property
    def tls_only(self):
        """Gets the tls_only of this NamespaceResponse.

        If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.

        :return: The tls_only of this NamespaceResponse.
        :rtype: bool
        """
        return self._tls_only

    @tls_only.setter
    def tls_only(self, tls_only):
        """Sets the tls_only of this NamespaceResponse.

        If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.

        :param tls_only: The tls_only of this NamespaceResponse.
        :type tls_only: bool
        """

        self._tls_only = tls_only
