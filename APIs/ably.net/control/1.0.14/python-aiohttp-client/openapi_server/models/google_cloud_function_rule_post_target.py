# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amqp_external_rule_patch_target_headers_inner import AmqpExternalRulePatchTargetHeadersInner
from openapi_server import util


class GoogleCloudFunctionRulePostTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enveloped: bool=None, format: str=None, function_name: str=None, headers: List[AmqpExternalRulePatchTargetHeadersInner]=None, project_id: str=None, region: str=None, signing_key_id: str=None):
        """GoogleCloudFunctionRulePostTarget - a model defined in OpenAPI

        :param enveloped: The enveloped of this GoogleCloudFunctionRulePostTarget.
        :param format: The format of this GoogleCloudFunctionRulePostTarget.
        :param function_name: The function_name of this GoogleCloudFunctionRulePostTarget.
        :param headers: The headers of this GoogleCloudFunctionRulePostTarget.
        :param project_id: The project_id of this GoogleCloudFunctionRulePostTarget.
        :param region: The region of this GoogleCloudFunctionRulePostTarget.
        :param signing_key_id: The signing_key_id of this GoogleCloudFunctionRulePostTarget.
        """
        self.openapi_types = {
            'enveloped': bool,
            'format': str,
            'function_name': str,
            'headers': List[AmqpExternalRulePatchTargetHeadersInner],
            'project_id': str,
            'region': str,
            'signing_key_id': str
        }

        self.attribute_map = {
            'enveloped': 'enveloped',
            'format': 'format',
            'function_name': 'functionName',
            'headers': 'headers',
            'project_id': 'projectId',
            'region': 'region',
            'signing_key_id': 'signingKeyId'
        }

        self._enveloped = enveloped
        self._format = format
        self._function_name = function_name
        self._headers = headers
        self._project_id = project_id
        self._region = region
        self._signing_key_id = signing_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudFunctionRulePostTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The google_cloud_function_rule_post_target of this GoogleCloudFunctionRulePostTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enveloped(self):
        """Gets the enveloped of this GoogleCloudFunctionRulePostTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :return: The enveloped of this GoogleCloudFunctionRulePostTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this GoogleCloudFunctionRulePostTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :param enveloped: The enveloped of this GoogleCloudFunctionRulePostTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this GoogleCloudFunctionRulePostTarget.

        JSON provides a text-based encoding.

        :return: The format of this GoogleCloudFunctionRulePostTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GoogleCloudFunctionRulePostTarget.

        JSON provides a text-based encoding.

        :param format: The format of this GoogleCloudFunctionRulePostTarget.
        :type format: str
        """
        allowed_values = ["json"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def function_name(self):
        """Gets the function_name of this GoogleCloudFunctionRulePostTarget.

        The name of your Google Cloud Function.

        :return: The function_name of this GoogleCloudFunctionRulePostTarget.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this GoogleCloudFunctionRulePostTarget.

        The name of your Google Cloud Function.

        :param function_name: The function_name of this GoogleCloudFunctionRulePostTarget.
        :type function_name: str
        """
        if function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")

        self._function_name = function_name

    @property
    def headers(self):
        """Gets the headers of this GoogleCloudFunctionRulePostTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :return: The headers of this GoogleCloudFunctionRulePostTarget.
        :rtype: List[AmqpExternalRulePatchTargetHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this GoogleCloudFunctionRulePostTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :param headers: The headers of this GoogleCloudFunctionRulePostTarget.
        :type headers: List[AmqpExternalRulePatchTargetHeadersInner]
        """

        self._headers = headers

    @property
    def project_id(self):
        """Gets the project_id of this GoogleCloudFunctionRulePostTarget.

        The project ID for your Google Cloud Project that was generated when you created your project.

        :return: The project_id of this GoogleCloudFunctionRulePostTarget.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GoogleCloudFunctionRulePostTarget.

        The project ID for your Google Cloud Project that was generated when you created your project.

        :param project_id: The project_id of this GoogleCloudFunctionRulePostTarget.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def region(self):
        """Gets the region of this GoogleCloudFunctionRulePostTarget.

        The region in which your Google Cloud Function is hosted. See the <a href=\"https://cloud.google.com/compute/docs/regions-zones/\">Google documentation</a> for more details.

        :return: The region of this GoogleCloudFunctionRulePostTarget.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this GoogleCloudFunctionRulePostTarget.

        The region in which your Google Cloud Function is hosted. See the <a href=\"https://cloud.google.com/compute/docs/regions-zones/\">Google documentation</a> for more details.

        :param region: The region of this GoogleCloudFunctionRulePostTarget.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def signing_key_id(self):
        """Gets the signing_key_id of this GoogleCloudFunctionRulePostTarget.

        The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the <a href=\"https://ably.com/documentation/general/events#security\">webhook security docs</a> for more information.

        :return: The signing_key_id of this GoogleCloudFunctionRulePostTarget.
        :rtype: str
        """
        return self._signing_key_id

    @signing_key_id.setter
    def signing_key_id(self, signing_key_id):
        """Sets the signing_key_id of this GoogleCloudFunctionRulePostTarget.

        The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the <a href=\"https://ably.com/documentation/general/events#security\">webhook security docs</a> for more information.

        :param signing_key_id: The signing_key_id of this GoogleCloudFunctionRulePostTarget.
        :type signing_key_id: str
        """

        self._signing_key_id = signing_key_id
