# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, details: object=None, href: str=None, message: str=None, status_code: int=None):
        """Error - a model defined in OpenAPI

        :param code: The code of this Error.
        :param details: The details of this Error.
        :param href: The href of this Error.
        :param message: The message of this Error.
        :param status_code: The status_code of this Error.
        """
        self.openapi_types = {
            'code': int,
            'details': object,
            'href': str,
            'message': str,
            'status_code': int
        }

        self.attribute_map = {
            'code': 'code',
            'details': 'details',
            'href': 'href',
            'message': 'message',
            'status_code': 'statusCode'
        }

        self._code = code
        self._details = details
        self._href = href
        self._message = message
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Error.

        The HTTP status code returned.

        :return: The code of this Error.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        The HTTP status code returned.

        :param code: The code of this Error.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def details(self):
        """Gets the details of this Error.

        Any additional details about the error message.

        :return: The details of this Error.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Error.

        Any additional details about the error message.

        :param details: The details of this Error.
        :type details: object
        """

        self._details = details

    @property
    def href(self):
        """Gets the href of this Error.

        The URL to documentation about the error code.

        :return: The href of this Error.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Error.

        The URL to documentation about the error code.

        :param href: The href of this Error.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def message(self):
        """Gets the message of this Error.

        The error message.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        The error message.

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def status_code(self):
        """Gets the status_code of this Error.

        The Ably error code.

        :return: The status_code of this Error.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Error.

        The Ably error code.

        :param status_code: The status_code of this Error.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code
