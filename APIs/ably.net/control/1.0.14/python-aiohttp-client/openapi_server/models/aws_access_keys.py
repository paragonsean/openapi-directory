# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AwsAccessKeys(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key_id: str=None, authentication_mode: str=None, secret_access_key: str=None):
        """AwsAccessKeys - a model defined in OpenAPI

        :param access_key_id: The access_key_id of this AwsAccessKeys.
        :param authentication_mode: The authentication_mode of this AwsAccessKeys.
        :param secret_access_key: The secret_access_key of this AwsAccessKeys.
        """
        self.openapi_types = {
            'access_key_id': str,
            'authentication_mode': str,
            'secret_access_key': str
        }

        self.attribute_map = {
            'access_key_id': 'accessKeyId',
            'authentication_mode': 'authenticationMode',
            'secret_access_key': 'secretAccessKey'
        }

        self._access_key_id = access_key_id
        self._authentication_mode = authentication_mode
        self._secret_access_key = secret_access_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsAccessKeys':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aws_access_keys of this AwsAccessKeys.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key_id(self):
        """Gets the access_key_id of this AwsAccessKeys.

        The AWS key ID for the AWS IAM user. See this <a href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\">Ably knowledge base article</a> for details.

        :return: The access_key_id of this AwsAccessKeys.
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this AwsAccessKeys.

        The AWS key ID for the AWS IAM user. See this <a href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\">Ably knowledge base article</a> for details.

        :param access_key_id: The access_key_id of this AwsAccessKeys.
        :type access_key_id: str
        """
        if access_key_id is None:
            raise ValueError("Invalid value for `access_key_id`, must not be `None`")

        self._access_key_id = access_key_id

    @property
    def authentication_mode(self):
        """Gets the authentication_mode of this AwsAccessKeys.

        Authentication method is using AWS credentials (AWS key ID and secret key).

        :return: The authentication_mode of this AwsAccessKeys.
        :rtype: str
        """
        return self._authentication_mode

    @authentication_mode.setter
    def authentication_mode(self, authentication_mode):
        """Sets the authentication_mode of this AwsAccessKeys.

        Authentication method is using AWS credentials (AWS key ID and secret key).

        :param authentication_mode: The authentication_mode of this AwsAccessKeys.
        :type authentication_mode: str
        """
        allowed_values = ["credentials"]  # noqa: E501
        if authentication_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_mode` ({0}), must be one of {1}"
                .format(authentication_mode, allowed_values)
            )

        self._authentication_mode = authentication_mode

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this AwsAccessKeys.

        The AWS secret key for the AWS IAM user. See this <a href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\">Ably knowledge base article</a> for details.

        :return: The secret_access_key of this AwsAccessKeys.
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this AwsAccessKeys.

        The AWS secret key for the AWS IAM user. See this <a href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\">Ably knowledge base article</a> for details.

        :param secret_access_key: The secret_access_key of this AwsAccessKeys.
        :type secret_access_key: str
        """
        if secret_access_key is None:
            raise ValueError("Invalid value for `secret_access_key`, must not be `None`")

        self._secret_access_key = secret_access_key
