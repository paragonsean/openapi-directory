# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amqp_external_rule_patch_target_headers_inner import AmqpExternalRulePatchTargetHeadersInner
from openapi_server import util


class HttpRulePostTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enveloped: bool=None, format: str=None, headers: List[AmqpExternalRulePatchTargetHeadersInner]=None, signing_key_id: str=None, url: str=None):
        """HttpRulePostTarget - a model defined in OpenAPI

        :param enveloped: The enveloped of this HttpRulePostTarget.
        :param format: The format of this HttpRulePostTarget.
        :param headers: The headers of this HttpRulePostTarget.
        :param signing_key_id: The signing_key_id of this HttpRulePostTarget.
        :param url: The url of this HttpRulePostTarget.
        """
        self.openapi_types = {
            'enveloped': bool,
            'format': str,
            'headers': List[AmqpExternalRulePatchTargetHeadersInner],
            'signing_key_id': str,
            'url': str
        }

        self.attribute_map = {
            'enveloped': 'enveloped',
            'format': 'format',
            'headers': 'headers',
            'signing_key_id': 'signingKeyId',
            'url': 'url'
        }

        self._enveloped = enveloped
        self._format = format
        self._headers = headers
        self._signing_key_id = signing_key_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRulePostTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The http_rule_post_target of this HttpRulePostTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enveloped(self):
        """Gets the enveloped of this HttpRulePostTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :return: The enveloped of this HttpRulePostTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this HttpRulePostTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :param enveloped: The enveloped of this HttpRulePostTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this HttpRulePostTarget.

        JSON provides a simpler text-based encoding, whereas MsgPack provides a more efficient binary encoding.

        :return: The format of this HttpRulePostTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this HttpRulePostTarget.

        JSON provides a simpler text-based encoding, whereas MsgPack provides a more efficient binary encoding.

        :param format: The format of this HttpRulePostTarget.
        :type format: str
        """
        allowed_values = ["json", "msgpack"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def headers(self):
        """Gets the headers of this HttpRulePostTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :return: The headers of this HttpRulePostTarget.
        :rtype: List[AmqpExternalRulePatchTargetHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRulePostTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :param headers: The headers of this HttpRulePostTarget.
        :type headers: List[AmqpExternalRulePatchTargetHeadersInner]
        """

        self._headers = headers

    @property
    def signing_key_id(self):
        """Gets the signing_key_id of this HttpRulePostTarget.

        The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the <a href=\"https://ably.com/documentation/general/events#security\">webhook security docs</a> for more information.

        :return: The signing_key_id of this HttpRulePostTarget.
        :rtype: str
        """
        return self._signing_key_id

    @signing_key_id.setter
    def signing_key_id(self, signing_key_id):
        """Sets the signing_key_id of this HttpRulePostTarget.

        The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the <a href=\"https://ably.com/documentation/general/events#security\">webhook security docs</a> for more information.

        :param signing_key_id: The signing_key_id of this HttpRulePostTarget.
        :type signing_key_id: str
        """

        self._signing_key_id = signing_key_id

    @property
    def url(self):
        """Gets the url of this HttpRulePostTarget.

        The URL of the endpoint that is invoked when events occur on Ably.

        :return: The url of this HttpRulePostTarget.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HttpRulePostTarget.

        The URL of the endpoint that is invoked when events occur on Ably.

        :param url: The url of this HttpRulePostTarget.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
