# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespacePatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticated: bool=False, persist_last: bool=False, persisted: bool=False, push_enabled: bool=False, tls_only: bool=False):
        """NamespacePatch - a model defined in OpenAPI

        :param authenticated: The authenticated of this NamespacePatch.
        :param persist_last: The persist_last of this NamespacePatch.
        :param persisted: The persisted of this NamespacePatch.
        :param push_enabled: The push_enabled of this NamespacePatch.
        :param tls_only: The tls_only of this NamespacePatch.
        """
        self.openapi_types = {
            'authenticated': bool,
            'persist_last': bool,
            'persisted': bool,
            'push_enabled': bool,
            'tls_only': bool
        }

        self.attribute_map = {
            'authenticated': 'authenticated',
            'persist_last': 'persistLast',
            'persisted': 'persisted',
            'push_enabled': 'pushEnabled',
            'tls_only': 'tlsOnly'
        }

        self._authenticated = authenticated
        self._persist_last = persist_last
        self._persisted = persisted
        self._push_enabled = push_enabled
        self._tls_only = tls_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespacePatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The namespace_patch of this NamespacePatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticated(self):
        """Gets the authenticated of this NamespacePatch.

        If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\">Ably knowledge base/a> for more details.

        :return: The authenticated of this NamespacePatch.
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this NamespacePatch.

        If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\">Ably knowledge base/a> for more details.

        :param authenticated: The authenticated of this NamespacePatch.
        :type authenticated: bool
        """

        self._authenticated = authenticated

    @property
    def persist_last(self):
        """Gets the persist_last of this NamespacePatch.

        If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :return: The persist_last of this NamespacePatch.
        :rtype: bool
        """
        return self._persist_last

    @persist_last.setter
    def persist_last(self, persist_last):
        """Sets the persist_last of this NamespacePatch.

        If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :param persist_last: The persist_last of this NamespacePatch.
        :type persist_last: bool
        """

        self._persist_last = persist_last

    @property
    def persisted(self):
        """Gets the persisted of this NamespacePatch.

        If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :return: The persisted of this NamespacePatch.
        :rtype: bool
        """
        return self._persisted

    @persisted.setter
    def persisted(self, persisted):
        """Sets the persisted of this NamespacePatch.

        If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.

        :param persisted: The persisted of this NamespacePatch.
        :type persisted: bool
        """

        self._persisted = persisted

    @property
    def push_enabled(self):
        """Gets the push_enabled of this NamespacePatch.

        If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.

        :return: The push_enabled of this NamespacePatch.
        :rtype: bool
        """
        return self._push_enabled

    @push_enabled.setter
    def push_enabled(self, push_enabled):
        """Sets the push_enabled of this NamespacePatch.

        If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.

        :param push_enabled: The push_enabled of this NamespacePatch.
        :type push_enabled: bool
        """

        self._push_enabled = push_enabled

    @property
    def tls_only(self):
        """Gets the tls_only of this NamespacePatch.

        If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.

        :return: The tls_only of this NamespacePatch.
        :rtype: bool
        """
        return self._tls_only

    @tls_only.setter
    def tls_only(self, tls_only):
        """Sets the tls_only of this NamespacePatch.

        If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.

        :param tls_only: The tls_only of this NamespacePatch.
        :type tls_only: bool
        """

        self._tls_only = tls_only
