# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apns_certificate: str=None, apns_private_key: str=None, apns_use_sandbox_endpoint: bool=None, fcm_key: str=None, name: str=None, status: str=None, tls_only: bool=None):
        """AppPatch - a model defined in OpenAPI

        :param apns_certificate: The apns_certificate of this AppPatch.
        :param apns_private_key: The apns_private_key of this AppPatch.
        :param apns_use_sandbox_endpoint: The apns_use_sandbox_endpoint of this AppPatch.
        :param fcm_key: The fcm_key of this AppPatch.
        :param name: The name of this AppPatch.
        :param status: The status of this AppPatch.
        :param tls_only: The tls_only of this AppPatch.
        """
        self.openapi_types = {
            'apns_certificate': str,
            'apns_private_key': str,
            'apns_use_sandbox_endpoint': bool,
            'fcm_key': str,
            'name': str,
            'status': str,
            'tls_only': bool
        }

        self.attribute_map = {
            'apns_certificate': 'apnsCertificate',
            'apns_private_key': 'apnsPrivateKey',
            'apns_use_sandbox_endpoint': 'apnsUseSandboxEndpoint',
            'fcm_key': 'fcmKey',
            'name': 'name',
            'status': 'status',
            'tls_only': 'tlsOnly'
        }

        self._apns_certificate = apns_certificate
        self._apns_private_key = apns_private_key
        self._apns_use_sandbox_endpoint = apns_use_sandbox_endpoint
        self._fcm_key = fcm_key
        self._name = name
        self._status = status
        self._tls_only = tls_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The app_patch of this AppPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apns_certificate(self):
        """Gets the apns_certificate of this AppPatch.

        The Apple Push Notification service certificate.

        :return: The apns_certificate of this AppPatch.
        :rtype: str
        """
        return self._apns_certificate

    @apns_certificate.setter
    def apns_certificate(self, apns_certificate):
        """Sets the apns_certificate of this AppPatch.

        The Apple Push Notification service certificate.

        :param apns_certificate: The apns_certificate of this AppPatch.
        :type apns_certificate: str
        """

        self._apns_certificate = apns_certificate

    @property
    def apns_private_key(self):
        """Gets the apns_private_key of this AppPatch.

        The Apple Push Notification service private key.

        :return: The apns_private_key of this AppPatch.
        :rtype: str
        """
        return self._apns_private_key

    @apns_private_key.setter
    def apns_private_key(self, apns_private_key):
        """Sets the apns_private_key of this AppPatch.

        The Apple Push Notification service private key.

        :param apns_private_key: The apns_private_key of this AppPatch.
        :type apns_private_key: str
        """

        self._apns_private_key = apns_private_key

    @property
    def apns_use_sandbox_endpoint(self):
        """Gets the apns_use_sandbox_endpoint of this AppPatch.

        The Apple Push Notification service sandbox endpoint.

        :return: The apns_use_sandbox_endpoint of this AppPatch.
        :rtype: bool
        """
        return self._apns_use_sandbox_endpoint

    @apns_use_sandbox_endpoint.setter
    def apns_use_sandbox_endpoint(self, apns_use_sandbox_endpoint):
        """Sets the apns_use_sandbox_endpoint of this AppPatch.

        The Apple Push Notification service sandbox endpoint.

        :param apns_use_sandbox_endpoint: The apns_use_sandbox_endpoint of this AppPatch.
        :type apns_use_sandbox_endpoint: bool
        """

        self._apns_use_sandbox_endpoint = apns_use_sandbox_endpoint

    @property
    def fcm_key(self):
        """Gets the fcm_key of this AppPatch.

        The Firebase Cloud Messaging key.

        :return: The fcm_key of this AppPatch.
        :rtype: str
        """
        return self._fcm_key

    @fcm_key.setter
    def fcm_key(self, fcm_key):
        """Sets the fcm_key of this AppPatch.

        The Firebase Cloud Messaging key.

        :param fcm_key: The fcm_key of this AppPatch.
        :type fcm_key: str
        """

        self._fcm_key = fcm_key

    @property
    def name(self):
        """Gets the name of this AppPatch.

        The name of the application for your reference only.

        :return: The name of this AppPatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppPatch.

        The name of the application for your reference only.

        :param name: The name of this AppPatch.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this AppPatch.

        The status of the application. Can be `enabled` or `disabled`. Enabled means available to accept inbound connections and all services are available.

        :return: The status of this AppPatch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppPatch.

        The status of the application. Can be `enabled` or `disabled`. Enabled means available to accept inbound connections and all services are available.

        :param status: The status of this AppPatch.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tls_only(self):
        """Gets the tls_only of this AppPatch.

        Enforce TLS for all connections.

        :return: The tls_only of this AppPatch.
        :rtype: bool
        """
        return self._tls_only

    @tls_only.setter
    def tls_only(self, tls_only):
        """Sets the tls_only of this AppPatch.

        Enforce TLS for all connections.

        :param tls_only: The tls_only of this AppPatch.
        :type tls_only: bool
        """

        self._tls_only = tls_only
