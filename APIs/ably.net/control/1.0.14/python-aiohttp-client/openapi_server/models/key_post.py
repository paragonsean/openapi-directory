# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[str]=None, channels: str=None, name: str=None):
        """KeyPost - a model defined in OpenAPI

        :param capabilities: The capabilities of this KeyPost.
        :param channels: The channels of this KeyPost.
        :param name: The name of this KeyPost.
        """
        self.openapi_types = {
            'capabilities': List[str],
            'channels': str,
            'name': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'channels': 'channels',
            'name': 'name'
        }

        self._capabilities = capabilities
        self._channels = channels
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The key_post of this KeyPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this KeyPost.

        The capabilities that this key has. More information on capabilities can be found in the <a href=\"https://ably.com/documentation/core-features/authentication#capabilities-explained\">Ably documentation</a>.

        :return: The capabilities of this KeyPost.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this KeyPost.

        The capabilities that this key has. More information on capabilities can be found in the <a href=\"https://ably.com/documentation/core-features/authentication#capabilities-explained\">Ably documentation</a>.

        :param capabilities: The capabilities of this KeyPost.
        :type capabilities: List[str]
        """
        allowed_values = ["publish", "subscribe", "history", "presence", "channel-metadata", "push-admin", "push-subscribe", "statistics"]  # noqa: E501
        if not set(capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `capabilities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(capabilities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._capabilities = capabilities

    @property
    def channels(self):
        """Gets the channels of this KeyPost.

        Specify the channels and queues that this key can be used with.

        :return: The channels of this KeyPost.
        :rtype: str
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this KeyPost.

        Specify the channels and queues that this key can be used with.

        :param channels: The channels of this KeyPost.
        :type channels: str
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def name(self):
        """Gets the name of this KeyPost.

        The name for your API key. This is a friendly name for your reference.

        :return: The name of this KeyPost.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeyPost.

        The name for your API key. This is a friendly name for your reference.

        :param name: The name of this KeyPost.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
