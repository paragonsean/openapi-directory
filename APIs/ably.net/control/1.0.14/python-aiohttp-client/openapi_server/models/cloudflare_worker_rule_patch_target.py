# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amqp_external_rule_patch_target_headers_inner import AmqpExternalRulePatchTargetHeadersInner
from openapi_server import util


class CloudflareWorkerRulePatchTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: List[AmqpExternalRulePatchTargetHeadersInner]=None, signing_key_id: str=None, url: str=None):
        """CloudflareWorkerRulePatchTarget - a model defined in OpenAPI

        :param headers: The headers of this CloudflareWorkerRulePatchTarget.
        :param signing_key_id: The signing_key_id of this CloudflareWorkerRulePatchTarget.
        :param url: The url of this CloudflareWorkerRulePatchTarget.
        """
        self.openapi_types = {
            'headers': List[AmqpExternalRulePatchTargetHeadersInner],
            'signing_key_id': str,
            'url': str
        }

        self.attribute_map = {
            'headers': 'headers',
            'signing_key_id': 'signingKeyId',
            'url': 'url'
        }

        self._headers = headers
        self._signing_key_id = signing_key_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudflareWorkerRulePatchTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cloudflare_worker_rule_patch_target of this CloudflareWorkerRulePatchTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this CloudflareWorkerRulePatchTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :return: The headers of this CloudflareWorkerRulePatchTarget.
        :rtype: List[AmqpExternalRulePatchTargetHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this CloudflareWorkerRulePatchTarget.

        If you have additional information to send, you'll need to include the relevant headers.

        :param headers: The headers of this CloudflareWorkerRulePatchTarget.
        :type headers: List[AmqpExternalRulePatchTargetHeadersInner]
        """

        self._headers = headers

    @property
    def signing_key_id(self):
        """Gets the signing_key_id of this CloudflareWorkerRulePatchTarget.

        The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the <a href=\"https://ably.com/documentation/general/events#security\">webhook security docs</a> for more information.

        :return: The signing_key_id of this CloudflareWorkerRulePatchTarget.
        :rtype: str
        """
        return self._signing_key_id

    @signing_key_id.setter
    def signing_key_id(self, signing_key_id):
        """Sets the signing_key_id of this CloudflareWorkerRulePatchTarget.

        The signing key ID for use in `batch` mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the <a href=\"https://ably.com/documentation/general/events#security\">webhook security docs</a> for more information.

        :param signing_key_id: The signing_key_id of this CloudflareWorkerRulePatchTarget.
        :type signing_key_id: str
        """

        self._signing_key_id = signing_key_id

    @property
    def url(self):
        """Gets the url of this CloudflareWorkerRulePatchTarget.


        :return: The url of this CloudflareWorkerRulePatchTarget.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudflareWorkerRulePatchTarget.


        :param url: The url of this CloudflareWorkerRulePatchTarget.
        :type url: str
        """

        self._url = url
