# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws_kinesis_rule_patch_target_authentication import AwsKinesisRulePatchTargetAuthentication
from openapi_server import util


class AwsSqsRulePostTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: AwsKinesisRulePatchTargetAuthentication=None, aws_account_id: str=None, enveloped: bool=None, format: str=None, queue_name: str=None, region: str=None):
        """AwsSqsRulePostTarget - a model defined in OpenAPI

        :param authentication: The authentication of this AwsSqsRulePostTarget.
        :param aws_account_id: The aws_account_id of this AwsSqsRulePostTarget.
        :param enveloped: The enveloped of this AwsSqsRulePostTarget.
        :param format: The format of this AwsSqsRulePostTarget.
        :param queue_name: The queue_name of this AwsSqsRulePostTarget.
        :param region: The region of this AwsSqsRulePostTarget.
        """
        self.openapi_types = {
            'authentication': AwsKinesisRulePatchTargetAuthentication,
            'aws_account_id': str,
            'enveloped': bool,
            'format': str,
            'queue_name': str,
            'region': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'aws_account_id': 'awsAccountId',
            'enveloped': 'enveloped',
            'format': 'format',
            'queue_name': 'queueName',
            'region': 'region'
        }

        self._authentication = authentication
        self._aws_account_id = aws_account_id
        self._enveloped = enveloped
        self._format = format
        self._queue_name = queue_name
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsSqsRulePostTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aws_sqs_rule_post_target of this AwsSqsRulePostTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this AwsSqsRulePostTarget.


        :return: The authentication of this AwsSqsRulePostTarget.
        :rtype: AwsKinesisRulePatchTargetAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this AwsSqsRulePostTarget.


        :param authentication: The authentication of this AwsSqsRulePostTarget.
        :type authentication: AwsKinesisRulePatchTargetAuthentication
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")

        self._authentication = authentication

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this AwsSqsRulePostTarget.

        Your AWS account ID.

        :return: The aws_account_id of this AwsSqsRulePostTarget.
        :rtype: str
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this AwsSqsRulePostTarget.

        Your AWS account ID.

        :param aws_account_id: The aws_account_id of this AwsSqsRulePostTarget.
        :type aws_account_id: str
        """
        if aws_account_id is None:
            raise ValueError("Invalid value for `aws_account_id`, must not be `None`")

        self._aws_account_id = aws_account_id

    @property
    def enveloped(self):
        """Gets the enveloped of this AwsSqsRulePostTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :return: The enveloped of this AwsSqsRulePostTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this AwsSqsRulePostTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :param enveloped: The enveloped of this AwsSqsRulePostTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this AwsSqsRulePostTarget.


        :return: The format of this AwsSqsRulePostTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AwsSqsRulePostTarget.


        :param format: The format of this AwsSqsRulePostTarget.
        :type format: str
        """

        self._format = format

    @property
    def queue_name(self):
        """Gets the queue_name of this AwsSqsRulePostTarget.

        The AWS SQS queue name.

        :return: The queue_name of this AwsSqsRulePostTarget.
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this AwsSqsRulePostTarget.

        The AWS SQS queue name.

        :param queue_name: The queue_name of this AwsSqsRulePostTarget.
        :type queue_name: str
        """
        if queue_name is None:
            raise ValueError("Invalid value for `queue_name`, must not be `None`")

        self._queue_name = queue_name

    @property
    def region(self):
        """Gets the region of this AwsSqsRulePostTarget.

        The region is which AWS SQS is hosted. See the <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\">AWS documentation</a> for more detail.

        :return: The region of this AwsSqsRulePostTarget.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AwsSqsRulePostTarget.

        The region is which AWS SQS is hosted. See the <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\">AWS documentation</a> for more detail.

        :param region: The region of this AwsSqsRulePostTarget.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region
