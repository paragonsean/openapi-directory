# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws_kinesis_rule_patch_target_authentication import AwsKinesisRulePatchTargetAuthentication
from openapi_server import util


class AwsLambdaRulePatchTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: AwsKinesisRulePatchTargetAuthentication=None, enveloped: bool=None, function_name: str=None, region: str=None):
        """AwsLambdaRulePatchTarget - a model defined in OpenAPI

        :param authentication: The authentication of this AwsLambdaRulePatchTarget.
        :param enveloped: The enveloped of this AwsLambdaRulePatchTarget.
        :param function_name: The function_name of this AwsLambdaRulePatchTarget.
        :param region: The region of this AwsLambdaRulePatchTarget.
        """
        self.openapi_types = {
            'authentication': AwsKinesisRulePatchTargetAuthentication,
            'enveloped': bool,
            'function_name': str,
            'region': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'enveloped': 'enveloped',
            'function_name': 'functionName',
            'region': 'region'
        }

        self._authentication = authentication
        self._enveloped = enveloped
        self._function_name = function_name
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsLambdaRulePatchTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aws_lambda_rule_patch_target of this AwsLambdaRulePatchTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this AwsLambdaRulePatchTarget.


        :return: The authentication of this AwsLambdaRulePatchTarget.
        :rtype: AwsKinesisRulePatchTargetAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this AwsLambdaRulePatchTarget.


        :param authentication: The authentication of this AwsLambdaRulePatchTarget.
        :type authentication: AwsKinesisRulePatchTargetAuthentication
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")

        self._authentication = authentication

    @property
    def enveloped(self):
        """Gets the enveloped of this AwsLambdaRulePatchTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :return: The enveloped of this AwsLambdaRulePatchTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this AwsLambdaRulePatchTarget.

        Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \"Enveloped\" when setting up the rule.

        :param enveloped: The enveloped of this AwsLambdaRulePatchTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def function_name(self):
        """Gets the function_name of this AwsLambdaRulePatchTarget.

        The name of your AWS Lambda Function.

        :return: The function_name of this AwsLambdaRulePatchTarget.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this AwsLambdaRulePatchTarget.

        The name of your AWS Lambda Function.

        :param function_name: The function_name of this AwsLambdaRulePatchTarget.
        :type function_name: str
        """
        if function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")

        self._function_name = function_name

    @property
    def region(self):
        """Gets the region of this AwsLambdaRulePatchTarget.

        The region is which your AWS Lambda Function is hosted. See the <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\">AWS documentation</a> for more detail.

        :return: The region of this AwsLambdaRulePatchTarget.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AwsLambdaRulePatchTarget.

        The region is which your AWS Lambda Function is hosted. See the <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\">AWS documentation</a> for more detail.

        :param region: The region of this AwsLambdaRulePatchTarget.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region
