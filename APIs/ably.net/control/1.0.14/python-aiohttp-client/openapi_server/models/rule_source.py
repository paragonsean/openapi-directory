# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuleSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_filter: str=None, type: str=None):
        """RuleSource - a model defined in OpenAPI

        :param channel_filter: The channel_filter of this RuleSource.
        :param type: The type of this RuleSource.
        """
        self.openapi_types = {
            'channel_filter': str,
            'type': str
        }

        self.attribute_map = {
            'channel_filter': 'channelFilter',
            'type': 'type'
        }

        self._channel_filter = channel_filter
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule_source of this RuleSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_filter(self):
        """Gets the channel_filter of this RuleSource.

        This field allows you to filter your rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the rule to apply to all channels.

        :return: The channel_filter of this RuleSource.
        :rtype: str
        """
        return self._channel_filter

    @channel_filter.setter
    def channel_filter(self, channel_filter):
        """Sets the channel_filter of this RuleSource.

        This field allows you to filter your rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the rule to apply to all channels.

        :param channel_filter: The channel_filter of this RuleSource.
        :type channel_filter: str
        """
        if channel_filter is None:
            raise ValueError("Invalid value for `channel_filter`, must not be `None`")

        self._channel_filter = channel_filter

    @property
    def type(self):
        """Gets the type of this RuleSource.

        The type `channel.message` delivers all messages published on a channel. The type `channel.presence` delivers all enter, update and leave events for members present on a channel. The type `channel.lifecycle` events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature. The type `channel.occupancy` delivers all occupancy events for the channel.

        :return: The type of this RuleSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RuleSource.

        The type `channel.message` delivers all messages published on a channel. The type `channel.presence` delivers all enter, update and leave events for members present on a channel. The type `channel.lifecycle` events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature. The type `channel.occupancy` delivers all occupancy events for the channel.

        :param type: The type of this RuleSource.
        :type type: str
        """
        allowed_values = ["channel.message", "channel.presence", "channel.lifecycle", "channel.occupancy"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
