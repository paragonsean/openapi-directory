# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_rule_post_target import HttpRulePostTarget
from openapi_server.models.rule_source import RuleSource
from openapi_server import util


class HttpRulePost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_mode: str=None, rule_type: str=None, source: RuleSource=None, status: str=None, target: HttpRulePostTarget=None):
        """HttpRulePost - a model defined in OpenAPI

        :param request_mode: The request_mode of this HttpRulePost.
        :param rule_type: The rule_type of this HttpRulePost.
        :param source: The source of this HttpRulePost.
        :param status: The status of this HttpRulePost.
        :param target: The target of this HttpRulePost.
        """
        self.openapi_types = {
            'request_mode': str,
            'rule_type': str,
            'source': RuleSource,
            'status': str,
            'target': HttpRulePostTarget
        }

        self.attribute_map = {
            'request_mode': 'requestMode',
            'rule_type': 'ruleType',
            'source': 'source',
            'status': 'status',
            'target': 'target'
        }

        self._request_mode = request_mode
        self._rule_type = rule_type
        self._source = source
        self._status = status
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRulePost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The http_rule_post of this HttpRulePost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_mode(self):
        """Gets the request_mode of this HttpRulePost.

        This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably <a href=\"https://ably.com/documentation/general/events#batching\">documentation</a>.

        :return: The request_mode of this HttpRulePost.
        :rtype: str
        """
        return self._request_mode

    @request_mode.setter
    def request_mode(self, request_mode):
        """Sets the request_mode of this HttpRulePost.

        This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably <a href=\"https://ably.com/documentation/general/events#batching\">documentation</a>.

        :param request_mode: The request_mode of this HttpRulePost.
        :type request_mode: str
        """
        allowed_values = ["single", "batch"]  # noqa: E501
        if request_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `request_mode` ({0}), must be one of {1}"
                .format(request_mode, allowed_values)
            )

        self._request_mode = request_mode

    @property
    def rule_type(self):
        """Gets the rule_type of this HttpRulePost.

        The type of rule. See the <a href=\"https://ably.com/integrations\">documentation</a> for further information.

        :return: The rule_type of this HttpRulePost.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this HttpRulePost.

        The type of rule. See the <a href=\"https://ably.com/integrations\">documentation</a> for further information.

        :param rule_type: The rule_type of this HttpRulePost.
        :type rule_type: str
        """
        allowed_values = ["http"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    @property
    def source(self):
        """Gets the source of this HttpRulePost.


        :return: The source of this HttpRulePost.
        :rtype: RuleSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this HttpRulePost.


        :param source: The source of this HttpRulePost.
        :type source: RuleSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def status(self):
        """Gets the status of this HttpRulePost.

        The status of the rule. Rules can be enabled or disabled.

        :return: The status of this HttpRulePost.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HttpRulePost.

        The status of the rule. Rules can be enabled or disabled.

        :param status: The status of this HttpRulePost.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target(self):
        """Gets the target of this HttpRulePost.


        :return: The target of this HttpRulePost.
        :rtype: HttpRulePostTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this HttpRulePost.


        :param target: The target of this HttpRulePost.
        :type target: HttpRulePostTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
