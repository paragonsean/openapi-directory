/*
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AmqpExternalRulePatchTargetHeadersInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AmqpExternalRulePostTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:58.065790-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmqpExternalRulePostTarget {
  public static final String SERIALIZED_NAME_ENVELOPED = "enveloped";
  @SerializedName(SERIALIZED_NAME_ENVELOPED)
  private Boolean enveloped;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<AmqpExternalRulePatchTargetHeadersInner> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANDATORY_ROUTE = "mandatoryRoute";
  @SerializedName(SERIALIZED_NAME_MANDATORY_ROUTE)
  private Boolean mandatoryRoute;

  public static final String SERIALIZED_NAME_MESSAGE_TTL = "messageTtl";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TTL)
  private Integer messageTtl;

  public static final String SERIALIZED_NAME_PERSISTENT_MESSAGES = "persistentMessages";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_MESSAGES)
  private Boolean persistentMessages;

  public static final String SERIALIZED_NAME_ROUTING_KEY = "routingKey";
  @SerializedName(SERIALIZED_NAME_ROUTING_KEY)
  private String routingKey;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public AmqpExternalRulePostTarget() {
  }

  public AmqpExternalRulePostTarget enveloped(Boolean enveloped) {
    this.enveloped = enveloped;
    return this;
  }

  /**
   * Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \&quot;Enveloped\&quot; when setting up the rule.
   * @return enveloped
   */
  @javax.annotation.Nullable
  public Boolean getEnveloped() {
    return enveloped;
  }

  public void setEnveloped(Boolean enveloped) {
    this.enveloped = enveloped;
  }


  public AmqpExternalRulePostTarget format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public AmqpExternalRulePostTarget headers(List<AmqpExternalRulePatchTargetHeadersInner> headers) {
    this.headers = headers;
    return this;
  }

  public AmqpExternalRulePostTarget addHeadersItem(AmqpExternalRulePatchTargetHeadersInner headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * If you have additional information to send, you&#39;ll need to include the relevant headers.
   * @return headers
   */
  @javax.annotation.Nullable
  public List<AmqpExternalRulePatchTargetHeadersInner> getHeaders() {
    return headers;
  }

  public void setHeaders(List<AmqpExternalRulePatchTargetHeadersInner> headers) {
    this.headers = headers;
  }


  public AmqpExternalRulePostTarget mandatoryRoute(Boolean mandatoryRoute) {
    this.mandatoryRoute = mandatoryRoute;
    return this;
  }

  /**
   * Reject delivery of the message if the route does not exist, otherwise fail silently.
   * @return mandatoryRoute
   */
  @javax.annotation.Nonnull
  public Boolean getMandatoryRoute() {
    return mandatoryRoute;
  }

  public void setMandatoryRoute(Boolean mandatoryRoute) {
    this.mandatoryRoute = mandatoryRoute;
  }


  public AmqpExternalRulePostTarget messageTtl(Integer messageTtl) {
    this.messageTtl = messageTtl;
    return this;
  }

  /**
   * You can optionally override the default TTL on a queue and specify a TTL in minutes for messages to be persisted. It is unusual to change the default TTL, so if this field is left empty, the default TTL for the queue will be used.
   * @return messageTtl
   */
  @javax.annotation.Nullable
  public Integer getMessageTtl() {
    return messageTtl;
  }

  public void setMessageTtl(Integer messageTtl) {
    this.messageTtl = messageTtl;
  }


  public AmqpExternalRulePostTarget persistentMessages(Boolean persistentMessages) {
    this.persistentMessages = persistentMessages;
    return this;
  }

  /**
   * Marks the message as persistent, instructing the broker to write it to disk if it is in a durable queue.
   * @return persistentMessages
   */
  @javax.annotation.Nonnull
  public Boolean getPersistentMessages() {
    return persistentMessages;
  }

  public void setPersistentMessages(Boolean persistentMessages) {
    this.persistentMessages = persistentMessages;
  }


  public AmqpExternalRulePostTarget routingKey(String routingKey) {
    this.routingKey = routingKey;
    return this;
  }

  /**
   * The AMQP routing key. See this &lt;a href&#x3D;\&quot;https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule\&quot;&gt;Ably knowledge base article&lt;/a&gt; for details.
   * @return routingKey
   */
  @javax.annotation.Nonnull
  public String getRoutingKey() {
    return routingKey;
  }

  public void setRoutingKey(String routingKey) {
    this.routingKey = routingKey;
  }


  public AmqpExternalRulePostTarget url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmqpExternalRulePostTarget amqpExternalRulePostTarget = (AmqpExternalRulePostTarget) o;
    return Objects.equals(this.enveloped, amqpExternalRulePostTarget.enveloped) &&
        Objects.equals(this.format, amqpExternalRulePostTarget.format) &&
        Objects.equals(this.headers, amqpExternalRulePostTarget.headers) &&
        Objects.equals(this.mandatoryRoute, amqpExternalRulePostTarget.mandatoryRoute) &&
        Objects.equals(this.messageTtl, amqpExternalRulePostTarget.messageTtl) &&
        Objects.equals(this.persistentMessages, amqpExternalRulePostTarget.persistentMessages) &&
        Objects.equals(this.routingKey, amqpExternalRulePostTarget.routingKey) &&
        Objects.equals(this.url, amqpExternalRulePostTarget.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enveloped, format, headers, mandatoryRoute, messageTtl, persistentMessages, routingKey, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmqpExternalRulePostTarget {\n");
    sb.append("    enveloped: ").append(toIndentedString(enveloped)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    mandatoryRoute: ").append(toIndentedString(mandatoryRoute)).append("\n");
    sb.append("    messageTtl: ").append(toIndentedString(messageTtl)).append("\n");
    sb.append("    persistentMessages: ").append(toIndentedString(persistentMessages)).append("\n");
    sb.append("    routingKey: ").append(toIndentedString(routingKey)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enveloped");
    openapiFields.add("format");
    openapiFields.add("headers");
    openapiFields.add("mandatoryRoute");
    openapiFields.add("messageTtl");
    openapiFields.add("persistentMessages");
    openapiFields.add("routingKey");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mandatoryRoute");
    openapiRequiredFields.add("persistentMessages");
    openapiRequiredFields.add("routingKey");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmqpExternalRulePostTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmqpExternalRulePostTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmqpExternalRulePostTarget is not found in the empty JSON string", AmqpExternalRulePostTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmqpExternalRulePostTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmqpExternalRulePostTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AmqpExternalRulePostTarget.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            AmqpExternalRulePatchTargetHeadersInner.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if (!jsonObj.get("routingKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingKey").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmqpExternalRulePostTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmqpExternalRulePostTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmqpExternalRulePostTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmqpExternalRulePostTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<AmqpExternalRulePostTarget>() {
           @Override
           public void write(JsonWriter out, AmqpExternalRulePostTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmqpExternalRulePostTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmqpExternalRulePostTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmqpExternalRulePostTarget
   * @throws IOException if the JSON string is invalid with respect to AmqpExternalRulePostTarget
   */
  public static AmqpExternalRulePostTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmqpExternalRulePostTarget.class);
  }

  /**
   * Convert an instance of AmqpExternalRulePostTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

