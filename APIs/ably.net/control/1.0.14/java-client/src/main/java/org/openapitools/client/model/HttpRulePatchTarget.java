/*
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AmqpExternalRulePatchTargetHeadersInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HttpRulePatchTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:58.065790-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRulePatchTarget {
  public static final String SERIALIZED_NAME_ENVELOPED = "enveloped";
  @SerializedName(SERIALIZED_NAME_ENVELOPED)
  private Boolean enveloped;

  /**
   * JSON provides a simpler text-based encoding, whereas MsgPack provides a more efficient binary encoding.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    JSON("json"),
    
    MSGPACK("msgpack");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<AmqpExternalRulePatchTargetHeadersInner> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNING_KEY_ID = "signingKeyId";
  @SerializedName(SERIALIZED_NAME_SIGNING_KEY_ID)
  private String signingKeyId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public HttpRulePatchTarget() {
  }

  public HttpRulePatchTarget enveloped(Boolean enveloped) {
    this.enveloped = enveloped;
    return this;
  }

  /**
   * Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking \&quot;Enveloped\&quot; when setting up the rule.
   * @return enveloped
   */
  @javax.annotation.Nullable
  public Boolean getEnveloped() {
    return enveloped;
  }

  public void setEnveloped(Boolean enveloped) {
    this.enveloped = enveloped;
  }


  public HttpRulePatchTarget format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * JSON provides a simpler text-based encoding, whereas MsgPack provides a more efficient binary encoding.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public HttpRulePatchTarget headers(List<AmqpExternalRulePatchTargetHeadersInner> headers) {
    this.headers = headers;
    return this;
  }

  public HttpRulePatchTarget addHeadersItem(AmqpExternalRulePatchTargetHeadersInner headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * If you have additional information to send, you&#39;ll need to include the relevant headers.
   * @return headers
   */
  @javax.annotation.Nullable
  public List<AmqpExternalRulePatchTargetHeadersInner> getHeaders() {
    return headers;
  }

  public void setHeaders(List<AmqpExternalRulePatchTargetHeadersInner> headers) {
    this.headers = headers;
  }


  public HttpRulePatchTarget signingKeyId(String signingKeyId) {
    this.signingKeyId = signingKeyId;
    return this;
  }

  /**
   * The signing key ID for use in &#x60;batch&#x60; mode. Ably will optionally sign the payload using an API key ensuring your servers can validate the payload using the private API key. See the &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/events#security\&quot;&gt;webhook security docs&lt;/a&gt; for more information.
   * @return signingKeyId
   */
  @javax.annotation.Nullable
  public String getSigningKeyId() {
    return signingKeyId;
  }

  public void setSigningKeyId(String signingKeyId) {
    this.signingKeyId = signingKeyId;
  }


  public HttpRulePatchTarget url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRulePatchTarget httpRulePatchTarget = (HttpRulePatchTarget) o;
    return Objects.equals(this.enveloped, httpRulePatchTarget.enveloped) &&
        Objects.equals(this.format, httpRulePatchTarget.format) &&
        Objects.equals(this.headers, httpRulePatchTarget.headers) &&
        Objects.equals(this.signingKeyId, httpRulePatchTarget.signingKeyId) &&
        Objects.equals(this.url, httpRulePatchTarget.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enveloped, format, headers, signingKeyId, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRulePatchTarget {\n");
    sb.append("    enveloped: ").append(toIndentedString(enveloped)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    signingKeyId: ").append(toIndentedString(signingKeyId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enveloped");
    openapiFields.add("format");
    openapiFields.add("headers");
    openapiFields.add("signingKeyId");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRulePatchTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRulePatchTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRulePatchTarget is not found in the empty JSON string", HttpRulePatchTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRulePatchTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRulePatchTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            AmqpExternalRulePatchTargetHeadersInner.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if ((jsonObj.get("signingKeyId") != null && !jsonObj.get("signingKeyId").isJsonNull()) && !jsonObj.get("signingKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingKeyId").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRulePatchTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRulePatchTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRulePatchTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRulePatchTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRulePatchTarget>() {
           @Override
           public void write(JsonWriter out, HttpRulePatchTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRulePatchTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRulePatchTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRulePatchTarget
   * @throws IOException if the JSON string is invalid with respect to HttpRulePatchTarget
   */
  public static HttpRulePatchTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRulePatchTarget.class);
  }

  /**
   * Convert an instance of HttpRulePatchTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

