/*
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.QueueResponseAmqp;
import org.openapitools.client.model.QueueResponseMessages;
import org.openapitools.client.model.QueueResponseStats;
import org.openapitools.client.model.QueueResponseStomp;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueueResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:58.065790-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueueResponse {
  public static final String SERIALIZED_NAME_AMQP = "amqp";
  @SerializedName(SERIALIZED_NAME_AMQP)
  private QueueResponseAmqp amqp;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_DEADLETTER = "deadletter";
  @SerializedName(SERIALIZED_NAME_DEADLETTER)
  private Boolean deadletter;

  public static final String SERIALIZED_NAME_DEADLETTER_ID = "deadletterId";
  @SerializedName(SERIALIZED_NAME_DEADLETTER_ID)
  private String deadletterId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "maxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private Integer maxLength;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private QueueResponseMessages messages;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private QueueResponseStats stats;

  public static final String SERIALIZED_NAME_STOMP = "stomp";
  @SerializedName(SERIALIZED_NAME_STOMP)
  private QueueResponseStomp stomp;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public QueueResponse() {
  }

  public QueueResponse amqp(QueueResponseAmqp amqp) {
    this.amqp = amqp;
    return this;
  }

  /**
   * Get amqp
   * @return amqp
   */
  @javax.annotation.Nullable
  public QueueResponseAmqp getAmqp() {
    return amqp;
  }

  public void setAmqp(QueueResponseAmqp amqp) {
    this.amqp = amqp;
  }


  public QueueResponse appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The Ably application ID.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public QueueResponse deadletter(Boolean deadletter) {
    this.deadletter = deadletter;
    return this;
  }

  /**
   * A boolean that indicates whether this is a dead letter queue or not.
   * @return deadletter
   */
  @javax.annotation.Nullable
  public Boolean getDeadletter() {
    return deadletter;
  }

  public void setDeadletter(Boolean deadletter) {
    this.deadletter = deadletter;
  }


  public QueueResponse deadletterId(String deadletterId) {
    this.deadletterId = deadletterId;
    return this;
  }

  /**
   * Get deadletterId
   * @return deadletterId
   */
  @javax.annotation.Nullable
  public String getDeadletterId() {
    return deadletterId;
  }

  public void setDeadletterId(String deadletterId) {
    this.deadletterId = deadletterId;
  }


  public QueueResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the Ably queue
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public QueueResponse maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Message limit in number of messages.
   * @return maxLength
   */
  @javax.annotation.Nullable
  public Integer getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public QueueResponse messages(QueueResponseMessages messages) {
    this.messages = messages;
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public QueueResponseMessages getMessages() {
    return messages;
  }

  public void setMessages(QueueResponseMessages messages) {
    this.messages = messages;
  }


  public QueueResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The friendly name of the queue.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public QueueResponse region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The data center region for the queue.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public QueueResponse state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the queue.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public QueueResponse stats(QueueResponseStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public QueueResponseStats getStats() {
    return stats;
  }

  public void setStats(QueueResponseStats stats) {
    this.stats = stats;
  }


  public QueueResponse stomp(QueueResponseStomp stomp) {
    this.stomp = stomp;
    return this;
  }

  /**
   * Get stomp
   * @return stomp
   */
  @javax.annotation.Nullable
  public QueueResponseStomp getStomp() {
    return stomp;
  }

  public void setStomp(QueueResponseStomp stomp) {
    this.stomp = stomp;
  }


  public QueueResponse ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * TTL in minutes.
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueueResponse queueResponse = (QueueResponse) o;
    return Objects.equals(this.amqp, queueResponse.amqp) &&
        Objects.equals(this.appId, queueResponse.appId) &&
        Objects.equals(this.deadletter, queueResponse.deadletter) &&
        Objects.equals(this.deadletterId, queueResponse.deadletterId) &&
        Objects.equals(this.id, queueResponse.id) &&
        Objects.equals(this.maxLength, queueResponse.maxLength) &&
        Objects.equals(this.messages, queueResponse.messages) &&
        Objects.equals(this.name, queueResponse.name) &&
        Objects.equals(this.region, queueResponse.region) &&
        Objects.equals(this.state, queueResponse.state) &&
        Objects.equals(this.stats, queueResponse.stats) &&
        Objects.equals(this.stomp, queueResponse.stomp) &&
        Objects.equals(this.ttl, queueResponse.ttl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amqp, appId, deadletter, deadletterId, id, maxLength, messages, name, region, state, stats, stomp, ttl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueueResponse {\n");
    sb.append("    amqp: ").append(toIndentedString(amqp)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    deadletter: ").append(toIndentedString(deadletter)).append("\n");
    sb.append("    deadletterId: ").append(toIndentedString(deadletterId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    stomp: ").append(toIndentedString(stomp)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amqp");
    openapiFields.add("appId");
    openapiFields.add("deadletter");
    openapiFields.add("deadletterId");
    openapiFields.add("id");
    openapiFields.add("maxLength");
    openapiFields.add("messages");
    openapiFields.add("name");
    openapiFields.add("region");
    openapiFields.add("state");
    openapiFields.add("stats");
    openapiFields.add("stomp");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueueResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueueResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueueResponse is not found in the empty JSON string", QueueResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueueResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueueResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amqp`
      if (jsonObj.get("amqp") != null && !jsonObj.get("amqp").isJsonNull()) {
        QueueResponseAmqp.validateJsonElement(jsonObj.get("amqp"));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("deadletterId") != null && !jsonObj.get("deadletterId").isJsonNull()) && !jsonObj.get("deadletterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deadletterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deadletterId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `messages`
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        QueueResponseMessages.validateJsonElement(jsonObj.get("messages"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        QueueResponseStats.validateJsonElement(jsonObj.get("stats"));
      }
      // validate the optional field `stomp`
      if (jsonObj.get("stomp") != null && !jsonObj.get("stomp").isJsonNull()) {
        QueueResponseStomp.validateJsonElement(jsonObj.get("stomp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueueResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueueResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueueResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueueResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueueResponse>() {
           @Override
           public void write(JsonWriter out, QueueResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueueResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueueResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueueResponse
   * @throws IOException if the JSON string is invalid with respect to QueueResponse
   */
  public static QueueResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueueResponse.class);
  }

  /**
   * Convert an instance of QueueResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

