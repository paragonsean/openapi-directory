/*
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AzureFunctionRulePostTarget;
import org.openapitools.client.model.RuleSource;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AzureFunctionRuleResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:58.065790-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureFunctionRuleResponse {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private BigDecimal created;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private BigDecimal modified;

  /**
   * This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/events#batching\&quot;&gt;documentation&lt;/a&gt;.
   */
  @JsonAdapter(RequestModeEnum.Adapter.class)
  public enum RequestModeEnum {
    SINGLE("single"),
    
    BATCH("batch");

    private String value;

    RequestModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestModeEnum fromValue(String value) {
      for (RequestModeEnum b : RequestModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_MODE = "requestMode";
  @SerializedName(SERIALIZED_NAME_REQUEST_MODE)
  private RequestModeEnum requestMode;

  /**
   * The type of rule. In this case Microsoft Azure Function. See the &lt;a href&#x3D;\&quot;https://ably.com/integrations\&quot;&gt;documentation&lt;/a&gt; for further information.
   */
  @JsonAdapter(RuleTypeEnum.Adapter.class)
  public enum RuleTypeEnum {
    HTTP_AZURE_FUNCTION("http/azure-function");

    private String value;

    RuleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleTypeEnum fromValue(String value) {
      for (RuleTypeEnum b : RuleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_TYPE = "ruleType";
  @SerializedName(SERIALIZED_NAME_RULE_TYPE)
  private RuleTypeEnum ruleType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private RuleSource source;

  /**
   * The status of the rule. Rules can be enabled or disabled.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("enabled"),
    
    DISABLED("disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private AzureFunctionRulePostTarget target;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public AzureFunctionRuleResponse() {
  }

  public AzureFunctionRuleResponse links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public AzureFunctionRuleResponse appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The Ably application ID.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public AzureFunctionRuleResponse created(BigDecimal created) {
    this.created = created;
    return this;
  }

  /**
   * Unix timestamp representing the date and time of creation of the rule.
   * @return created
   */
  @javax.annotation.Nullable
  public BigDecimal getCreated() {
    return created;
  }

  public void setCreated(BigDecimal created) {
    this.created = created;
  }


  public AzureFunctionRuleResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The rule ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AzureFunctionRuleResponse modified(BigDecimal modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Unix timestamp representing the date and time of last modification of the rule.
   * @return modified
   */
  @javax.annotation.Nullable
  public BigDecimal getModified() {
    return modified;
  }

  public void setModified(BigDecimal modified) {
    this.modified = modified;
  }


  public AzureFunctionRuleResponse requestMode(RequestModeEnum requestMode) {
    this.requestMode = requestMode;
    return this;
  }

  /**
   * This is Single Request mode or Batch Request mode. Single Request mode sends each event separately to the endpoint specified by the rule. Batch Request mode rolls up multiple events into the same request. You can read more about the difference between single and batched events in the Ably &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/events#batching\&quot;&gt;documentation&lt;/a&gt;.
   * @return requestMode
   */
  @javax.annotation.Nonnull
  public RequestModeEnum getRequestMode() {
    return requestMode;
  }

  public void setRequestMode(RequestModeEnum requestMode) {
    this.requestMode = requestMode;
  }


  public AzureFunctionRuleResponse ruleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
    return this;
  }

  /**
   * The type of rule. In this case Microsoft Azure Function. See the &lt;a href&#x3D;\&quot;https://ably.com/integrations\&quot;&gt;documentation&lt;/a&gt; for further information.
   * @return ruleType
   */
  @javax.annotation.Nonnull
  public RuleTypeEnum getRuleType() {
    return ruleType;
  }

  public void setRuleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
  }


  public AzureFunctionRuleResponse source(RuleSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public RuleSource getSource() {
    return source;
  }

  public void setSource(RuleSource source) {
    this.source = source;
  }


  public AzureFunctionRuleResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the rule. Rules can be enabled or disabled.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AzureFunctionRuleResponse target(AzureFunctionRulePostTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nonnull
  public AzureFunctionRulePostTarget getTarget() {
    return target;
  }

  public void setTarget(AzureFunctionRulePostTarget target) {
    this.target = target;
  }


  public AzureFunctionRuleResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * API version. Events and the format of their payloads are versioned. Please see the &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/events\&quot;&gt;Events documentation&lt;/a&gt;.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureFunctionRuleResponse azureFunctionRuleResponse = (AzureFunctionRuleResponse) o;
    return Objects.equals(this.links, azureFunctionRuleResponse.links) &&
        Objects.equals(this.appId, azureFunctionRuleResponse.appId) &&
        Objects.equals(this.created, azureFunctionRuleResponse.created) &&
        Objects.equals(this.id, azureFunctionRuleResponse.id) &&
        Objects.equals(this.modified, azureFunctionRuleResponse.modified) &&
        Objects.equals(this.requestMode, azureFunctionRuleResponse.requestMode) &&
        Objects.equals(this.ruleType, azureFunctionRuleResponse.ruleType) &&
        Objects.equals(this.source, azureFunctionRuleResponse.source) &&
        Objects.equals(this.status, azureFunctionRuleResponse.status) &&
        Objects.equals(this.target, azureFunctionRuleResponse.target) &&
        Objects.equals(this.version, azureFunctionRuleResponse.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, appId, created, id, modified, requestMode, ruleType, source, status, target, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureFunctionRuleResponse {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    requestMode: ").append(toIndentedString(requestMode)).append("\n");
    sb.append("    ruleType: ").append(toIndentedString(ruleType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("appId");
    openapiFields.add("created");
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("requestMode");
    openapiFields.add("ruleType");
    openapiFields.add("source");
    openapiFields.add("status");
    openapiFields.add("target");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestMode");
    openapiRequiredFields.add("ruleType");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureFunctionRuleResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureFunctionRuleResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureFunctionRuleResponse is not found in the empty JSON string", AzureFunctionRuleResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureFunctionRuleResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureFunctionRuleResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AzureFunctionRuleResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("requestMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestMode").toString()));
      }
      // validate the required field `requestMode`
      RequestModeEnum.validateJsonElement(jsonObj.get("requestMode"));
      if (!jsonObj.get("ruleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleType").toString()));
      }
      // validate the required field `ruleType`
      RuleTypeEnum.validateJsonElement(jsonObj.get("ruleType"));
      // validate the required field `source`
      RuleSource.validateJsonElement(jsonObj.get("source"));
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the required field `target`
      AzureFunctionRulePostTarget.validateJsonElement(jsonObj.get("target"));
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureFunctionRuleResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureFunctionRuleResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureFunctionRuleResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureFunctionRuleResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureFunctionRuleResponse>() {
           @Override
           public void write(JsonWriter out, AzureFunctionRuleResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureFunctionRuleResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureFunctionRuleResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureFunctionRuleResponse
   * @throws IOException if the JSON string is invalid with respect to AzureFunctionRuleResponse
   */
  public static AzureFunctionRuleResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureFunctionRuleResponse.class);
  }

  /**
   * Convert an instance of AzureFunctionRuleResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

