/*
 * Control API v1
 * Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">developer documentation</a>.  Control API is currently in Beta. 
 *
 * The version of the OpenAPI document: 1.0.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.RulePatch;
import org.openapitools.client.model.RulePost;
import org.openapitools.client.model.RuleResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RulesApi
 */
@Disabled
public class RulesApiTest {

    private final RulesApi api = new RulesApi();

    /**
     * Lists Reactor rules
     *
     * Lists the rules for the application specified by the application ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdRulesGetTest() throws ApiException {
        String appId = null;
        List<RuleResponse> response = api.appsAppIdRulesGet(appId);
        // TODO: test validations
    }

    /**
     * Creates a Reactor rule
     *
     * Creates a rule for the application with the specified application ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdRulesPostTest() throws ApiException {
        String appId = null;
        RulePost rulePost = null;
        RuleResponse response = api.appsAppIdRulesPost(appId, rulePost);
        // TODO: test validations
    }

    /**
     * Deletes a Reactor rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdRulesRuleIdDeleteTest() throws ApiException {
        String appId = null;
        String ruleId = null;
        api.appsAppIdRulesRuleIdDelete(appId, ruleId);
        // TODO: test validations
    }

    /**
     * Gets a reactor rule by rule ID
     *
     * Returns the rule specified by the rule ID, for the application specified by application ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdRulesRuleIdGetTest() throws ApiException {
        String appId = null;
        String ruleId = null;
        RuleResponse response = api.appsAppIdRulesRuleIdGet(appId, ruleId);
        // TODO: test validations
    }

    /**
     * Updates a Reactor rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAppIdRulesRuleIdPatchTest() throws ApiException {
        String appId = null;
        String ruleId = null;
        RulePatch rulePatch = null;
        RuleResponse response = api.appsAppIdRulesRuleIdPatch(appId, ruleId, rulePatch);
        // TODO: test validations
    }

}
