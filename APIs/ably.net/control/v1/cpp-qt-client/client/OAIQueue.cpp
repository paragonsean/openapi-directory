/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueue::OAIQueue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueue::OAIQueue() {
    this->initializeModel();
}

OAIQueue::~OAIQueue() {}

void OAIQueue::initializeModel() {

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIQueue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueue::fromJsonObject(QJsonObject json) {

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIQueue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueue::asJsonObject() const {
    QJsonObject obj;
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

qint32 OAIQueue::getMaxLength() const {
    return m_max_length;
}
void OAIQueue::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIQueue::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIQueue::is_max_length_Valid() const{
    return m_max_length_isValid;
}

QString OAIQueue::getName() const {
    return m_name;
}
void OAIQueue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQueue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQueue::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQueue::getRegion() const {
    return m_region;
}
void OAIQueue::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIQueue::is_region_Set() const{
    return m_region_isSet;
}

bool OAIQueue::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAIQueue::getTtl() const {
    return m_ttl;
}
void OAIQueue::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIQueue::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIQueue::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIQueue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_length_isValid && m_name_isValid && m_region_isValid && m_ttl_isValid && true;
}

} // namespace OpenAPI
