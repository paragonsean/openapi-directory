/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKey_patch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKey_patch::OAIKey_patch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKey_patch::OAIKey_patch() {
    this->initializeModel();
}

OAIKey_patch::~OAIKey_patch() {}

void OAIKey_patch::initializeModel() {

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIKey_patch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKey_patch::fromJsonObject(QJsonObject json) {

    if(json["capability"].isObject()){
        auto varmap = json["capability"].toObject().toVariantMap();
        m_capability_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_capability_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_capability_isSet &= !jval.isNull() && m_capability_isValid;
                m_capability.insert(m_capability.end(), val, item);
            }
        }
    }

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIKey_patch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKey_patch::asJsonObject() const {
    QJsonObject obj;
    if (m_capability.size() > 0) {
        
        obj.insert(QString("capability"), toJsonValue(m_capability));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QMap<QString, QList<QString>> OAIKey_patch::getCapability() const {
    return m_capability;
}
void OAIKey_patch::setCapability(const QMap<QString, QList<QString>> &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAIKey_patch::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAIKey_patch::is_capability_Valid() const{
    return m_capability_isValid;
}

QString OAIKey_patch::getName() const {
    return m_name;
}
void OAIKey_patch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIKey_patch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIKey_patch::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIKey_patch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKey_patch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
