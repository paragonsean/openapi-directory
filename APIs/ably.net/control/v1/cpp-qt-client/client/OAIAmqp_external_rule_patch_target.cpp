/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmqp_external_rule_patch_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmqp_external_rule_patch_target::OAIAmqp_external_rule_patch_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmqp_external_rule_patch_target::OAIAmqp_external_rule_patch_target() {
    this->initializeModel();
}

OAIAmqp_external_rule_patch_target::~OAIAmqp_external_rule_patch_target() {}

void OAIAmqp_external_rule_patch_target::initializeModel() {

    m_enveloped_isSet = false;
    m_enveloped_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_mandatory_route_isSet = false;
    m_mandatory_route_isValid = false;

    m_message_ttl_isSet = false;
    m_message_ttl_isValid = false;

    m_persistent_messages_isSet = false;
    m_persistent_messages_isValid = false;

    m_routing_key_isSet = false;
    m_routing_key_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAmqp_external_rule_patch_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmqp_external_rule_patch_target::fromJsonObject(QJsonObject json) {

    m_enveloped_isValid = ::OpenAPI::fromJsonValue(m_enveloped, json[QString("enveloped")]);
    m_enveloped_isSet = !json[QString("enveloped")].isNull() && m_enveloped_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_mandatory_route_isValid = ::OpenAPI::fromJsonValue(m_mandatory_route, json[QString("mandatoryRoute")]);
    m_mandatory_route_isSet = !json[QString("mandatoryRoute")].isNull() && m_mandatory_route_isValid;

    m_message_ttl_isValid = ::OpenAPI::fromJsonValue(m_message_ttl, json[QString("messageTtl")]);
    m_message_ttl_isSet = !json[QString("messageTtl")].isNull() && m_message_ttl_isValid;

    m_persistent_messages_isValid = ::OpenAPI::fromJsonValue(m_persistent_messages, json[QString("persistentMessages")]);
    m_persistent_messages_isSet = !json[QString("persistentMessages")].isNull() && m_persistent_messages_isValid;

    m_routing_key_isValid = ::OpenAPI::fromJsonValue(m_routing_key, json[QString("routingKey")]);
    m_routing_key_isSet = !json[QString("routingKey")].isNull() && m_routing_key_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAmqp_external_rule_patch_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmqp_external_rule_patch_target::asJsonObject() const {
    QJsonObject obj;
    if (m_enveloped_isSet) {
        obj.insert(QString("enveloped"), ::OpenAPI::toJsonValue(m_enveloped));
    }
    if (m_exchange_isSet) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_mandatory_route_isSet) {
        obj.insert(QString("mandatoryRoute"), ::OpenAPI::toJsonValue(m_mandatory_route));
    }
    if (m_message_ttl_isSet) {
        obj.insert(QString("messageTtl"), ::OpenAPI::toJsonValue(m_message_ttl));
    }
    if (m_persistent_messages_isSet) {
        obj.insert(QString("persistentMessages"), ::OpenAPI::toJsonValue(m_persistent_messages));
    }
    if (m_routing_key_isSet) {
        obj.insert(QString("routingKey"), ::OpenAPI::toJsonValue(m_routing_key));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIAmqp_external_rule_patch_target::isEnveloped() const {
    return m_enveloped;
}
void OAIAmqp_external_rule_patch_target::setEnveloped(const bool &enveloped) {
    m_enveloped = enveloped;
    m_enveloped_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_enveloped_Set() const{
    return m_enveloped_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_enveloped_Valid() const{
    return m_enveloped_isValid;
}

QString OAIAmqp_external_rule_patch_target::getExchange() const {
    return m_exchange;
}
void OAIAmqp_external_rule_patch_target::setExchange(const QString &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QString OAIAmqp_external_rule_patch_target::getFormat() const {
    return m_format;
}
void OAIAmqp_external_rule_patch_target::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_format_Set() const{
    return m_format_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_format_Valid() const{
    return m_format_isValid;
}

QList<OAIAmqp_external_rule_patch_target_headers_inner> OAIAmqp_external_rule_patch_target::getHeaders() const {
    return m_headers;
}
void OAIAmqp_external_rule_patch_target::setHeaders(const QList<OAIAmqp_external_rule_patch_target_headers_inner> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIAmqp_external_rule_patch_target::isMandatoryRoute() const {
    return m_mandatory_route;
}
void OAIAmqp_external_rule_patch_target::setMandatoryRoute(const bool &mandatory_route) {
    m_mandatory_route = mandatory_route;
    m_mandatory_route_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_mandatory_route_Set() const{
    return m_mandatory_route_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_mandatory_route_Valid() const{
    return m_mandatory_route_isValid;
}

qint32 OAIAmqp_external_rule_patch_target::getMessageTtl() const {
    return m_message_ttl;
}
void OAIAmqp_external_rule_patch_target::setMessageTtl(const qint32 &message_ttl) {
    m_message_ttl = message_ttl;
    m_message_ttl_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_message_ttl_Set() const{
    return m_message_ttl_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_message_ttl_Valid() const{
    return m_message_ttl_isValid;
}

bool OAIAmqp_external_rule_patch_target::isPersistentMessages() const {
    return m_persistent_messages;
}
void OAIAmqp_external_rule_patch_target::setPersistentMessages(const bool &persistent_messages) {
    m_persistent_messages = persistent_messages;
    m_persistent_messages_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_persistent_messages_Set() const{
    return m_persistent_messages_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_persistent_messages_Valid() const{
    return m_persistent_messages_isValid;
}

QString OAIAmqp_external_rule_patch_target::getRoutingKey() const {
    return m_routing_key;
}
void OAIAmqp_external_rule_patch_target::setRoutingKey(const QString &routing_key) {
    m_routing_key = routing_key;
    m_routing_key_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_routing_key_Set() const{
    return m_routing_key_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_routing_key_Valid() const{
    return m_routing_key_isValid;
}

QString OAIAmqp_external_rule_patch_target::getUrl() const {
    return m_url;
}
void OAIAmqp_external_rule_patch_target::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAmqp_external_rule_patch_target::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAmqp_external_rule_patch_target::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAmqp_external_rule_patch_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enveloped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_route_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmqp_external_rule_patch_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
