/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPulsar_rule_patch_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPulsar_rule_patch_target::OAIPulsar_rule_patch_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPulsar_rule_patch_target::OAIPulsar_rule_patch_target() {
    this->initializeModel();
}

OAIPulsar_rule_patch_target::~OAIPulsar_rule_patch_target() {}

void OAIPulsar_rule_patch_target::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_enveloped_isSet = false;
    m_enveloped_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_routing_key_isSet = false;
    m_routing_key_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;

    m_tls_trust_certs_isSet = false;
    m_tls_trust_certs_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIPulsar_rule_patch_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPulsar_rule_patch_target::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_enveloped_isValid = ::OpenAPI::fromJsonValue(m_enveloped, json[QString("enveloped")]);
    m_enveloped_isSet = !json[QString("enveloped")].isNull() && m_enveloped_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_routing_key_isValid = ::OpenAPI::fromJsonValue(m_routing_key, json[QString("routingKey")]);
    m_routing_key_isSet = !json[QString("routingKey")].isNull() && m_routing_key_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("serviceUrl")]);
    m_service_url_isSet = !json[QString("serviceUrl")].isNull() && m_service_url_isValid;

    m_tls_trust_certs_isValid = ::OpenAPI::fromJsonValue(m_tls_trust_certs, json[QString("tlsTrustCerts")]);
    m_tls_trust_certs_isSet = !json[QString("tlsTrustCerts")].isNull() && m_tls_trust_certs_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIPulsar_rule_patch_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPulsar_rule_patch_target::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_enveloped_isSet) {
        obj.insert(QString("enveloped"), ::OpenAPI::toJsonValue(m_enveloped));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_routing_key_isSet) {
        obj.insert(QString("routingKey"), ::OpenAPI::toJsonValue(m_routing_key));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("serviceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    if (m_tls_trust_certs.size() > 0) {
        obj.insert(QString("tlsTrustCerts"), ::OpenAPI::toJsonValue(m_tls_trust_certs));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

OAIPulsar_rule_patch_target_authentication OAIPulsar_rule_patch_target::getAuthentication() const {
    return m_authentication;
}
void OAIPulsar_rule_patch_target::setAuthentication(const OAIPulsar_rule_patch_target_authentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIPulsar_rule_patch_target::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIPulsar_rule_patch_target::is_authentication_Valid() const{
    return m_authentication_isValid;
}

bool OAIPulsar_rule_patch_target::isEnveloped() const {
    return m_enveloped;
}
void OAIPulsar_rule_patch_target::setEnveloped(const bool &enveloped) {
    m_enveloped = enveloped;
    m_enveloped_isSet = true;
}

bool OAIPulsar_rule_patch_target::is_enveloped_Set() const{
    return m_enveloped_isSet;
}

bool OAIPulsar_rule_patch_target::is_enveloped_Valid() const{
    return m_enveloped_isValid;
}

QString OAIPulsar_rule_patch_target::getFormat() const {
    return m_format;
}
void OAIPulsar_rule_patch_target::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPulsar_rule_patch_target::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPulsar_rule_patch_target::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIPulsar_rule_patch_target::getRoutingKey() const {
    return m_routing_key;
}
void OAIPulsar_rule_patch_target::setRoutingKey(const QString &routing_key) {
    m_routing_key = routing_key;
    m_routing_key_isSet = true;
}

bool OAIPulsar_rule_patch_target::is_routing_key_Set() const{
    return m_routing_key_isSet;
}

bool OAIPulsar_rule_patch_target::is_routing_key_Valid() const{
    return m_routing_key_isValid;
}

QString OAIPulsar_rule_patch_target::getServiceUrl() const {
    return m_service_url;
}
void OAIPulsar_rule_patch_target::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAIPulsar_rule_patch_target::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAIPulsar_rule_patch_target::is_service_url_Valid() const{
    return m_service_url_isValid;
}

QList<QString> OAIPulsar_rule_patch_target::getTlsTrustCerts() const {
    return m_tls_trust_certs;
}
void OAIPulsar_rule_patch_target::setTlsTrustCerts(const QList<QString> &tls_trust_certs) {
    m_tls_trust_certs = tls_trust_certs;
    m_tls_trust_certs_isSet = true;
}

bool OAIPulsar_rule_patch_target::is_tls_trust_certs_Set() const{
    return m_tls_trust_certs_isSet;
}

bool OAIPulsar_rule_patch_target::is_tls_trust_certs_Valid() const{
    return m_tls_trust_certs_isValid;
}

QString OAIPulsar_rule_patch_target::getTopic() const {
    return m_topic;
}
void OAIPulsar_rule_patch_target::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIPulsar_rule_patch_target::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIPulsar_rule_patch_target::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIPulsar_rule_patch_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enveloped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_trust_certs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPulsar_rule_patch_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
