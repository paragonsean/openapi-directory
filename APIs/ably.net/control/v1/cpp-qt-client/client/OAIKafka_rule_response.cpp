/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKafka_rule_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKafka_rule_response::OAIKafka_rule_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKafka_rule_response::OAIKafka_rule_response() {
    this->initializeModel();
}

OAIKafka_rule_response::~OAIKafka_rule_response() {}

void OAIKafka_rule_response::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_request_mode_isSet = false;
    m_request_mode_isValid = false;

    m_rule_type_isSet = false;
    m_rule_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIKafka_rule_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKafka_rule_response::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_request_mode_isValid = ::OpenAPI::fromJsonValue(m_request_mode, json[QString("requestMode")]);
    m_request_mode_isSet = !json[QString("requestMode")].isNull() && m_request_mode_isValid;

    m_rule_type_isValid = ::OpenAPI::fromJsonValue(m_rule_type, json[QString("ruleType")]);
    m_rule_type_isSet = !json[QString("ruleType")].isNull() && m_rule_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIKafka_rule_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKafka_rule_response::asJsonObject() const {
    QJsonObject obj;
    if (m__links_isSet) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_request_mode_isSet) {
        obj.insert(QString("requestMode"), ::OpenAPI::toJsonValue(m_request_mode));
    }
    if (m_rule_type_isSet) {
        obj.insert(QString("ruleType"), ::OpenAPI::toJsonValue(m_rule_type));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIObject OAIKafka_rule_response::getLinks() const {
    return m__links;
}
void OAIKafka_rule_response::setLinks(const OAIObject &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIKafka_rule_response::is__links_Set() const{
    return m__links_isSet;
}

bool OAIKafka_rule_response::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIKafka_rule_response::getAppId() const {
    return m_app_id;
}
void OAIKafka_rule_response::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIKafka_rule_response::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIKafka_rule_response::is_app_id_Valid() const{
    return m_app_id_isValid;
}

double OAIKafka_rule_response::getCreated() const {
    return m_created;
}
void OAIKafka_rule_response::setCreated(const double &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIKafka_rule_response::is_created_Set() const{
    return m_created_isSet;
}

bool OAIKafka_rule_response::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIKafka_rule_response::getId() const {
    return m_id;
}
void OAIKafka_rule_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIKafka_rule_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIKafka_rule_response::is_id_Valid() const{
    return m_id_isValid;
}

double OAIKafka_rule_response::getModified() const {
    return m_modified;
}
void OAIKafka_rule_response::setModified(const double &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIKafka_rule_response::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIKafka_rule_response::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIKafka_rule_response::getRequestMode() const {
    return m_request_mode;
}
void OAIKafka_rule_response::setRequestMode(const QString &request_mode) {
    m_request_mode = request_mode;
    m_request_mode_isSet = true;
}

bool OAIKafka_rule_response::is_request_mode_Set() const{
    return m_request_mode_isSet;
}

bool OAIKafka_rule_response::is_request_mode_Valid() const{
    return m_request_mode_isValid;
}

QString OAIKafka_rule_response::getRuleType() const {
    return m_rule_type;
}
void OAIKafka_rule_response::setRuleType(const QString &rule_type) {
    m_rule_type = rule_type;
    m_rule_type_isSet = true;
}

bool OAIKafka_rule_response::is_rule_type_Set() const{
    return m_rule_type_isSet;
}

bool OAIKafka_rule_response::is_rule_type_Valid() const{
    return m_rule_type_isValid;
}

OAIRule_source OAIKafka_rule_response::getSource() const {
    return m_source;
}
void OAIKafka_rule_response::setSource(const OAIRule_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIKafka_rule_response::is_source_Set() const{
    return m_source_isSet;
}

bool OAIKafka_rule_response::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIKafka_rule_response::getStatus() const {
    return m_status;
}
void OAIKafka_rule_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIKafka_rule_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIKafka_rule_response::is_status_Valid() const{
    return m_status_isValid;
}

OAIKafka_rule_post_target OAIKafka_rule_response::getTarget() const {
    return m_target;
}
void OAIKafka_rule_response::setTarget(const OAIKafka_rule_post_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIKafka_rule_response::is_target_Set() const{
    return m_target_isSet;
}

bool OAIKafka_rule_response::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIKafka_rule_response::getVersion() const {
    return m_version;
}
void OAIKafka_rule_response::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIKafka_rule_response::is_version_Set() const{
    return m_version_isSet;
}

bool OAIKafka_rule_response::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIKafka_rule_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKafka_rule_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_mode_isValid && m_rule_type_isValid && m_source_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
