/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPulsar_token_auth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPulsar_token_auth::OAIPulsar_token_auth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPulsar_token_auth::OAIPulsar_token_auth() {
    this->initializeModel();
}

OAIPulsar_token_auth::~OAIPulsar_token_auth() {}

void OAIPulsar_token_auth::initializeModel() {

    m_authentication_mode_isSet = false;
    m_authentication_mode_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIPulsar_token_auth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPulsar_token_auth::fromJsonObject(QJsonObject json) {

    m_authentication_mode_isValid = ::OpenAPI::fromJsonValue(m_authentication_mode, json[QString("authenticationMode")]);
    m_authentication_mode_isSet = !json[QString("authenticationMode")].isNull() && m_authentication_mode_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIPulsar_token_auth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPulsar_token_auth::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_mode_isSet) {
        obj.insert(QString("authenticationMode"), ::OpenAPI::toJsonValue(m_authentication_mode));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIPulsar_token_auth::getAuthenticationMode() const {
    return m_authentication_mode;
}
void OAIPulsar_token_auth::setAuthenticationMode(const QString &authentication_mode) {
    m_authentication_mode = authentication_mode;
    m_authentication_mode_isSet = true;
}

bool OAIPulsar_token_auth::is_authentication_mode_Set() const{
    return m_authentication_mode_isSet;
}

bool OAIPulsar_token_auth::is_authentication_mode_Valid() const{
    return m_authentication_mode_isValid;
}

QString OAIPulsar_token_auth::getToken() const {
    return m_token;
}
void OAIPulsar_token_auth::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIPulsar_token_auth::is_token_Set() const{
    return m_token_isSet;
}

bool OAIPulsar_token_auth::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIPulsar_token_auth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPulsar_token_auth::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_mode_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
