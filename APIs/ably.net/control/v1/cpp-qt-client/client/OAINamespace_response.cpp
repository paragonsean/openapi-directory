/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespace_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespace_response::OAINamespace_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespace_response::OAINamespace_response() {
    this->initializeModel();
}

OAINamespace_response::~OAINamespace_response() {}

void OAINamespace_response::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_authenticated_isSet = false;
    m_authenticated_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_expose_timeserial_isSet = false;
    m_expose_timeserial_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_persist_last_isSet = false;
    m_persist_last_isValid = false;

    m_persisted_isSet = false;
    m_persisted_isValid = false;

    m_push_enabled_isSet = false;
    m_push_enabled_isValid = false;

    m_tls_only_isSet = false;
    m_tls_only_isValid = false;
}

void OAINamespace_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespace_response::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_authenticated_isValid = ::OpenAPI::fromJsonValue(m_authenticated, json[QString("authenticated")]);
    m_authenticated_isSet = !json[QString("authenticated")].isNull() && m_authenticated_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_expose_timeserial_isValid = ::OpenAPI::fromJsonValue(m_expose_timeserial, json[QString("exposeTimeserial")]);
    m_expose_timeserial_isSet = !json[QString("exposeTimeserial")].isNull() && m_expose_timeserial_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_persist_last_isValid = ::OpenAPI::fromJsonValue(m_persist_last, json[QString("persistLast")]);
    m_persist_last_isSet = !json[QString("persistLast")].isNull() && m_persist_last_isValid;

    m_persisted_isValid = ::OpenAPI::fromJsonValue(m_persisted, json[QString("persisted")]);
    m_persisted_isSet = !json[QString("persisted")].isNull() && m_persisted_isValid;

    m_push_enabled_isValid = ::OpenAPI::fromJsonValue(m_push_enabled, json[QString("pushEnabled")]);
    m_push_enabled_isSet = !json[QString("pushEnabled")].isNull() && m_push_enabled_isValid;

    m_tls_only_isValid = ::OpenAPI::fromJsonValue(m_tls_only, json[QString("tlsOnly")]);
    m_tls_only_isSet = !json[QString("tlsOnly")].isNull() && m_tls_only_isValid;
}

QString OAINamespace_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespace_response::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_authenticated_isSet) {
        obj.insert(QString("authenticated"), ::OpenAPI::toJsonValue(m_authenticated));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_expose_timeserial_isSet) {
        obj.insert(QString("exposeTimeserial"), ::OpenAPI::toJsonValue(m_expose_timeserial));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_persist_last_isSet) {
        obj.insert(QString("persistLast"), ::OpenAPI::toJsonValue(m_persist_last));
    }
    if (m_persisted_isSet) {
        obj.insert(QString("persisted"), ::OpenAPI::toJsonValue(m_persisted));
    }
    if (m_push_enabled_isSet) {
        obj.insert(QString("pushEnabled"), ::OpenAPI::toJsonValue(m_push_enabled));
    }
    if (m_tls_only_isSet) {
        obj.insert(QString("tlsOnly"), ::OpenAPI::toJsonValue(m_tls_only));
    }
    return obj;
}

QString OAINamespace_response::getAppId() const {
    return m_app_id;
}
void OAINamespace_response::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAINamespace_response::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAINamespace_response::is_app_id_Valid() const{
    return m_app_id_isValid;
}

bool OAINamespace_response::isAuthenticated() const {
    return m_authenticated;
}
void OAINamespace_response::setAuthenticated(const bool &authenticated) {
    m_authenticated = authenticated;
    m_authenticated_isSet = true;
}

bool OAINamespace_response::is_authenticated_Set() const{
    return m_authenticated_isSet;
}

bool OAINamespace_response::is_authenticated_Valid() const{
    return m_authenticated_isValid;
}

qint32 OAINamespace_response::getCreated() const {
    return m_created;
}
void OAINamespace_response::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAINamespace_response::is_created_Set() const{
    return m_created_isSet;
}

bool OAINamespace_response::is_created_Valid() const{
    return m_created_isValid;
}

bool OAINamespace_response::isExposeTimeserial() const {
    return m_expose_timeserial;
}
void OAINamespace_response::setExposeTimeserial(const bool &expose_timeserial) {
    m_expose_timeserial = expose_timeserial;
    m_expose_timeserial_isSet = true;
}

bool OAINamespace_response::is_expose_timeserial_Set() const{
    return m_expose_timeserial_isSet;
}

bool OAINamespace_response::is_expose_timeserial_Valid() const{
    return m_expose_timeserial_isValid;
}

QString OAINamespace_response::getId() const {
    return m_id;
}
void OAINamespace_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINamespace_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAINamespace_response::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAINamespace_response::getModified() const {
    return m_modified;
}
void OAINamespace_response::setModified(const qint32 &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAINamespace_response::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAINamespace_response::is_modified_Valid() const{
    return m_modified_isValid;
}

bool OAINamespace_response::isPersistLast() const {
    return m_persist_last;
}
void OAINamespace_response::setPersistLast(const bool &persist_last) {
    m_persist_last = persist_last;
    m_persist_last_isSet = true;
}

bool OAINamespace_response::is_persist_last_Set() const{
    return m_persist_last_isSet;
}

bool OAINamespace_response::is_persist_last_Valid() const{
    return m_persist_last_isValid;
}

bool OAINamespace_response::isPersisted() const {
    return m_persisted;
}
void OAINamespace_response::setPersisted(const bool &persisted) {
    m_persisted = persisted;
    m_persisted_isSet = true;
}

bool OAINamespace_response::is_persisted_Set() const{
    return m_persisted_isSet;
}

bool OAINamespace_response::is_persisted_Valid() const{
    return m_persisted_isValid;
}

bool OAINamespace_response::isPushEnabled() const {
    return m_push_enabled;
}
void OAINamespace_response::setPushEnabled(const bool &push_enabled) {
    m_push_enabled = push_enabled;
    m_push_enabled_isSet = true;
}

bool OAINamespace_response::is_push_enabled_Set() const{
    return m_push_enabled_isSet;
}

bool OAINamespace_response::is_push_enabled_Valid() const{
    return m_push_enabled_isValid;
}

bool OAINamespace_response::isTlsOnly() const {
    return m_tls_only;
}
void OAINamespace_response::setTlsOnly(const bool &tls_only) {
    m_tls_only = tls_only;
    m_tls_only_isSet = true;
}

bool OAINamespace_response::is_tls_only_Set() const{
    return m_tls_only_isSet;
}

bool OAINamespace_response::is_tls_only_Valid() const{
    return m_tls_only_isValid;
}

bool OAINamespace_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_timeserial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persist_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persisted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespace_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
