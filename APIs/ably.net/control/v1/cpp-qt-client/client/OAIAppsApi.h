/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppsApi_H
#define OAI_OAIAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApp_patch.h"
#include "OAIApp_post.h"
#include "OAIApp_response.h"
#include "OAIError.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppsApi : public QObject {
    Q_OBJECT

public:
    OAIAppsApi(const int timeOut = 0);
    ~OAIAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QString [required]
    */
    virtual void accountsAccountIdAppsGet(const QString &account_id);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_app_post OAIApp_post [optional]
    */
    virtual void accountsAccountIdAppsPost(const QString &account_id, const ::OpenAPI::OptionalParam<OAIApp_post> &oai_app_post = ::OpenAPI::OptionalParam<OAIApp_post>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void appsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_app_patch OAIApp_patch [optional]
    */
    virtual void appsIdPatch(const QString &id, const ::OpenAPI::OptionalParam<OAIApp_patch> &oai_app_patch = ::OpenAPI::OptionalParam<OAIApp_patch>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  p12_file OAIHttpFileElement [required]
    * @param[in]  p12_pass QString [required]
    */
    virtual void appsIdPkcs12Post(const QString &id, const OAIHttpFileElement &p12_file, const QString &p12_pass);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsAccountIdAppsGetCallback(OAIHttpRequestWorker *worker);
    void accountsAccountIdAppsPostCallback(OAIHttpRequestWorker *worker);
    void appsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void appsIdPatchCallback(OAIHttpRequestWorker *worker);
    void appsIdPkcs12PostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsAccountIdAppsGetSignal(QList<OAIApp_response> summary);
    void accountsAccountIdAppsPostSignal(OAIApp_response summary);
    void appsIdDeleteSignal();
    void appsIdPatchSignal(OAIApp_response summary);
    void appsIdPkcs12PostSignal(OAIApp_response summary);


    void accountsAccountIdAppsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIApp_response> summary);
    void accountsAccountIdAppsPostSignalFull(OAIHttpRequestWorker *worker, OAIApp_response summary);
    void appsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIApp_response summary);
    void appsIdPkcs12PostSignalFull(OAIHttpRequestWorker *worker, OAIApp_response summary);

    Q_DECL_DEPRECATED_X("Use accountsAccountIdAppsGetSignalError() instead")
    void accountsAccountIdAppsGetSignalE(QList<OAIApp_response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountIdAppsGetSignalError(QList<OAIApp_response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountIdAppsPostSignalError() instead")
    void accountsAccountIdAppsPostSignalE(OAIApp_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountIdAppsPostSignalError(OAIApp_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsIdDeleteSignalError() instead")
    void appsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsIdPatchSignalError() instead")
    void appsIdPatchSignalE(OAIApp_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsIdPatchSignalError(OAIApp_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsIdPkcs12PostSignalError() instead")
    void appsIdPkcs12PostSignalE(OAIApp_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsIdPkcs12PostSignalError(OAIApp_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsAccountIdAppsGetSignalErrorFull() instead")
    void accountsAccountIdAppsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountIdAppsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsAccountIdAppsPostSignalErrorFull() instead")
    void accountsAccountIdAppsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsAccountIdAppsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsIdDeleteSignalErrorFull() instead")
    void appsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsIdPatchSignalErrorFull() instead")
    void appsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsIdPkcs12PostSignalErrorFull() instead")
    void appsIdPkcs12PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsIdPkcs12PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
