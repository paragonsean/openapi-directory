/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKafka_rule_patch_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKafka_rule_patch_target::OAIKafka_rule_patch_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKafka_rule_patch_target::OAIKafka_rule_patch_target() {
    this->initializeModel();
}

OAIKafka_rule_patch_target::~OAIKafka_rule_patch_target() {}

void OAIKafka_rule_patch_target::initializeModel() {

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_brokers_isSet = false;
    m_brokers_isValid = false;

    m_enveloped_isSet = false;
    m_enveloped_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_routing_key_isSet = false;
    m_routing_key_isValid = false;
}

void OAIKafka_rule_patch_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKafka_rule_patch_target::fromJsonObject(QJsonObject json) {

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_brokers_isValid = ::OpenAPI::fromJsonValue(m_brokers, json[QString("brokers")]);
    m_brokers_isSet = !json[QString("brokers")].isNull() && m_brokers_isValid;

    m_enveloped_isValid = ::OpenAPI::fromJsonValue(m_enveloped, json[QString("enveloped")]);
    m_enveloped_isSet = !json[QString("enveloped")].isNull() && m_enveloped_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_routing_key_isValid = ::OpenAPI::fromJsonValue(m_routing_key, json[QString("routingKey")]);
    m_routing_key_isSet = !json[QString("routingKey")].isNull() && m_routing_key_isValid;
}

QString OAIKafka_rule_patch_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKafka_rule_patch_target::asJsonObject() const {
    QJsonObject obj;
    if (m_auth.isSet()) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_brokers.size() > 0) {
        obj.insert(QString("brokers"), ::OpenAPI::toJsonValue(m_brokers));
    }
    if (m_enveloped_isSet) {
        obj.insert(QString("enveloped"), ::OpenAPI::toJsonValue(m_enveloped));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_routing_key_isSet) {
        obj.insert(QString("routingKey"), ::OpenAPI::toJsonValue(m_routing_key));
    }
    return obj;
}

OAIKafka_rule_patch_target_auth OAIKafka_rule_patch_target::getAuth() const {
    return m_auth;
}
void OAIKafka_rule_patch_target::setAuth(const OAIKafka_rule_patch_target_auth &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIKafka_rule_patch_target::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIKafka_rule_patch_target::is_auth_Valid() const{
    return m_auth_isValid;
}

QList<QString> OAIKafka_rule_patch_target::getBrokers() const {
    return m_brokers;
}
void OAIKafka_rule_patch_target::setBrokers(const QList<QString> &brokers) {
    m_brokers = brokers;
    m_brokers_isSet = true;
}

bool OAIKafka_rule_patch_target::is_brokers_Set() const{
    return m_brokers_isSet;
}

bool OAIKafka_rule_patch_target::is_brokers_Valid() const{
    return m_brokers_isValid;
}

bool OAIKafka_rule_patch_target::isEnveloped() const {
    return m_enveloped;
}
void OAIKafka_rule_patch_target::setEnveloped(const bool &enveloped) {
    m_enveloped = enveloped;
    m_enveloped_isSet = true;
}

bool OAIKafka_rule_patch_target::is_enveloped_Set() const{
    return m_enveloped_isSet;
}

bool OAIKafka_rule_patch_target::is_enveloped_Valid() const{
    return m_enveloped_isValid;
}

QString OAIKafka_rule_patch_target::getFormat() const {
    return m_format;
}
void OAIKafka_rule_patch_target::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIKafka_rule_patch_target::is_format_Set() const{
    return m_format_isSet;
}

bool OAIKafka_rule_patch_target::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIKafka_rule_patch_target::getRoutingKey() const {
    return m_routing_key;
}
void OAIKafka_rule_patch_target::setRoutingKey(const QString &routing_key) {
    m_routing_key = routing_key;
    m_routing_key_isSet = true;
}

bool OAIKafka_rule_patch_target::is_routing_key_Set() const{
    return m_routing_key_isSet;
}

bool OAIKafka_rule_patch_target::is_routing_key_Valid() const{
    return m_routing_key_isValid;
}

bool OAIKafka_rule_patch_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brokers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enveloped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKafka_rule_patch_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
