/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzure_function_rule_post_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzure_function_rule_post_target::OAIAzure_function_rule_post_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzure_function_rule_post_target::OAIAzure_function_rule_post_target() {
    this->initializeModel();
}

OAIAzure_function_rule_post_target::~OAIAzure_function_rule_post_target() {}

void OAIAzure_function_rule_post_target::initializeModel() {

    m_azure_app_id_isSet = false;
    m_azure_app_id_isValid = false;

    m_azure_function_name_isSet = false;
    m_azure_function_name_isValid = false;

    m_enveloped_isSet = false;
    m_enveloped_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_signing_key_id_isSet = false;
    m_signing_key_id_isValid = false;
}

void OAIAzure_function_rule_post_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzure_function_rule_post_target::fromJsonObject(QJsonObject json) {

    m_azure_app_id_isValid = ::OpenAPI::fromJsonValue(m_azure_app_id, json[QString("azureAppId")]);
    m_azure_app_id_isSet = !json[QString("azureAppId")].isNull() && m_azure_app_id_isValid;

    m_azure_function_name_isValid = ::OpenAPI::fromJsonValue(m_azure_function_name, json[QString("azureFunctionName")]);
    m_azure_function_name_isSet = !json[QString("azureFunctionName")].isNull() && m_azure_function_name_isValid;

    m_enveloped_isValid = ::OpenAPI::fromJsonValue(m_enveloped, json[QString("enveloped")]);
    m_enveloped_isSet = !json[QString("enveloped")].isNull() && m_enveloped_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_signing_key_id_isValid = ::OpenAPI::fromJsonValue(m_signing_key_id, json[QString("signingKeyId")]);
    m_signing_key_id_isSet = !json[QString("signingKeyId")].isNull() && m_signing_key_id_isValid;
}

QString OAIAzure_function_rule_post_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzure_function_rule_post_target::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_app_id_isSet) {
        obj.insert(QString("azureAppId"), ::OpenAPI::toJsonValue(m_azure_app_id));
    }
    if (m_azure_function_name_isSet) {
        obj.insert(QString("azureFunctionName"), ::OpenAPI::toJsonValue(m_azure_function_name));
    }
    if (m_enveloped_isSet) {
        obj.insert(QString("enveloped"), ::OpenAPI::toJsonValue(m_enveloped));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_signing_key_id_isSet) {
        obj.insert(QString("signingKeyId"), ::OpenAPI::toJsonValue(m_signing_key_id));
    }
    return obj;
}

QString OAIAzure_function_rule_post_target::getAzureAppId() const {
    return m_azure_app_id;
}
void OAIAzure_function_rule_post_target::setAzureAppId(const QString &azure_app_id) {
    m_azure_app_id = azure_app_id;
    m_azure_app_id_isSet = true;
}

bool OAIAzure_function_rule_post_target::is_azure_app_id_Set() const{
    return m_azure_app_id_isSet;
}

bool OAIAzure_function_rule_post_target::is_azure_app_id_Valid() const{
    return m_azure_app_id_isValid;
}

QString OAIAzure_function_rule_post_target::getAzureFunctionName() const {
    return m_azure_function_name;
}
void OAIAzure_function_rule_post_target::setAzureFunctionName(const QString &azure_function_name) {
    m_azure_function_name = azure_function_name;
    m_azure_function_name_isSet = true;
}

bool OAIAzure_function_rule_post_target::is_azure_function_name_Set() const{
    return m_azure_function_name_isSet;
}

bool OAIAzure_function_rule_post_target::is_azure_function_name_Valid() const{
    return m_azure_function_name_isValid;
}

bool OAIAzure_function_rule_post_target::isEnveloped() const {
    return m_enveloped;
}
void OAIAzure_function_rule_post_target::setEnveloped(const bool &enveloped) {
    m_enveloped = enveloped;
    m_enveloped_isSet = true;
}

bool OAIAzure_function_rule_post_target::is_enveloped_Set() const{
    return m_enveloped_isSet;
}

bool OAIAzure_function_rule_post_target::is_enveloped_Valid() const{
    return m_enveloped_isValid;
}

QString OAIAzure_function_rule_post_target::getFormat() const {
    return m_format;
}
void OAIAzure_function_rule_post_target::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIAzure_function_rule_post_target::is_format_Set() const{
    return m_format_isSet;
}

bool OAIAzure_function_rule_post_target::is_format_Valid() const{
    return m_format_isValid;
}

QList<OAIAmqp_external_rule_patch_target_headers_inner> OAIAzure_function_rule_post_target::getHeaders() const {
    return m_headers;
}
void OAIAzure_function_rule_post_target::setHeaders(const QList<OAIAmqp_external_rule_patch_target_headers_inner> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIAzure_function_rule_post_target::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIAzure_function_rule_post_target::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIAzure_function_rule_post_target::getSigningKeyId() const {
    return m_signing_key_id;
}
void OAIAzure_function_rule_post_target::setSigningKeyId(const QString &signing_key_id) {
    m_signing_key_id = signing_key_id;
    m_signing_key_id_isSet = true;
}

bool OAIAzure_function_rule_post_target::is_signing_key_id_Set() const{
    return m_signing_key_id_isSet;
}

bool OAIAzure_function_rule_post_target::is_signing_key_id_Valid() const{
    return m_signing_key_id_isValid;
}

bool OAIAzure_function_rule_post_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enveloped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzure_function_rule_post_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azure_app_id_isValid && m_azure_function_name_isValid && true;
}

} // namespace OpenAPI
