/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_post.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_post::OAIApp_post(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_post::OAIApp_post() {
    this->initializeModel();
}

OAIApp_post::~OAIApp_post() {}

void OAIApp_post::initializeModel() {

    m_apns_certificate_isSet = false;
    m_apns_certificate_isValid = false;

    m_apns_private_key_isSet = false;
    m_apns_private_key_isValid = false;

    m_apns_use_sandbox_endpoint_isSet = false;
    m_apns_use_sandbox_endpoint_isValid = false;

    m_fcm_key_isSet = false;
    m_fcm_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tls_only_isSet = false;
    m_tls_only_isValid = false;
}

void OAIApp_post::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_post::fromJsonObject(QJsonObject json) {

    m_apns_certificate_isValid = ::OpenAPI::fromJsonValue(m_apns_certificate, json[QString("apnsCertificate")]);
    m_apns_certificate_isSet = !json[QString("apnsCertificate")].isNull() && m_apns_certificate_isValid;

    m_apns_private_key_isValid = ::OpenAPI::fromJsonValue(m_apns_private_key, json[QString("apnsPrivateKey")]);
    m_apns_private_key_isSet = !json[QString("apnsPrivateKey")].isNull() && m_apns_private_key_isValid;

    m_apns_use_sandbox_endpoint_isValid = ::OpenAPI::fromJsonValue(m_apns_use_sandbox_endpoint, json[QString("apnsUseSandboxEndpoint")]);
    m_apns_use_sandbox_endpoint_isSet = !json[QString("apnsUseSandboxEndpoint")].isNull() && m_apns_use_sandbox_endpoint_isValid;

    m_fcm_key_isValid = ::OpenAPI::fromJsonValue(m_fcm_key, json[QString("fcmKey")]);
    m_fcm_key_isSet = !json[QString("fcmKey")].isNull() && m_fcm_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tls_only_isValid = ::OpenAPI::fromJsonValue(m_tls_only, json[QString("tlsOnly")]);
    m_tls_only_isSet = !json[QString("tlsOnly")].isNull() && m_tls_only_isValid;
}

QString OAIApp_post::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_post::asJsonObject() const {
    QJsonObject obj;
    if (m_apns_certificate_isSet) {
        obj.insert(QString("apnsCertificate"), ::OpenAPI::toJsonValue(m_apns_certificate));
    }
    if (m_apns_private_key_isSet) {
        obj.insert(QString("apnsPrivateKey"), ::OpenAPI::toJsonValue(m_apns_private_key));
    }
    if (m_apns_use_sandbox_endpoint_isSet) {
        obj.insert(QString("apnsUseSandboxEndpoint"), ::OpenAPI::toJsonValue(m_apns_use_sandbox_endpoint));
    }
    if (m_fcm_key_isSet) {
        obj.insert(QString("fcmKey"), ::OpenAPI::toJsonValue(m_fcm_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tls_only_isSet) {
        obj.insert(QString("tlsOnly"), ::OpenAPI::toJsonValue(m_tls_only));
    }
    return obj;
}

QString OAIApp_post::getApnsCertificate() const {
    return m_apns_certificate;
}
void OAIApp_post::setApnsCertificate(const QString &apns_certificate) {
    m_apns_certificate = apns_certificate;
    m_apns_certificate_isSet = true;
}

bool OAIApp_post::is_apns_certificate_Set() const{
    return m_apns_certificate_isSet;
}

bool OAIApp_post::is_apns_certificate_Valid() const{
    return m_apns_certificate_isValid;
}

QString OAIApp_post::getApnsPrivateKey() const {
    return m_apns_private_key;
}
void OAIApp_post::setApnsPrivateKey(const QString &apns_private_key) {
    m_apns_private_key = apns_private_key;
    m_apns_private_key_isSet = true;
}

bool OAIApp_post::is_apns_private_key_Set() const{
    return m_apns_private_key_isSet;
}

bool OAIApp_post::is_apns_private_key_Valid() const{
    return m_apns_private_key_isValid;
}

bool OAIApp_post::isApnsUseSandboxEndpoint() const {
    return m_apns_use_sandbox_endpoint;
}
void OAIApp_post::setApnsUseSandboxEndpoint(const bool &apns_use_sandbox_endpoint) {
    m_apns_use_sandbox_endpoint = apns_use_sandbox_endpoint;
    m_apns_use_sandbox_endpoint_isSet = true;
}

bool OAIApp_post::is_apns_use_sandbox_endpoint_Set() const{
    return m_apns_use_sandbox_endpoint_isSet;
}

bool OAIApp_post::is_apns_use_sandbox_endpoint_Valid() const{
    return m_apns_use_sandbox_endpoint_isValid;
}

QString OAIApp_post::getFcmKey() const {
    return m_fcm_key;
}
void OAIApp_post::setFcmKey(const QString &fcm_key) {
    m_fcm_key = fcm_key;
    m_fcm_key_isSet = true;
}

bool OAIApp_post::is_fcm_key_Set() const{
    return m_fcm_key_isSet;
}

bool OAIApp_post::is_fcm_key_Valid() const{
    return m_fcm_key_isValid;
}

QString OAIApp_post::getName() const {
    return m_name;
}
void OAIApp_post::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApp_post::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApp_post::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApp_post::getStatus() const {
    return m_status;
}
void OAIApp_post::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApp_post::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApp_post::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIApp_post::isTlsOnly() const {
    return m_tls_only;
}
void OAIApp_post::setTlsOnly(const bool &tls_only) {
    m_tls_only = tls_only;
    m_tls_only_isSet = true;
}

bool OAIApp_post::is_tls_only_Set() const{
    return m_tls_only_isSet;
}

bool OAIApp_post::is_tls_only_Valid() const{
    return m_tls_only_isValid;
}

bool OAIApp_post::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apns_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apns_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apns_use_sandbox_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fcm_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_post::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
