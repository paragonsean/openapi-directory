/*
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AmqpExternalRulePost;
import org.openapitools.client.model.AmqpRulePost;
import org.openapitools.client.model.AwsKinesisRulePost;
import org.openapitools.client.model.AwsLambdaRulePost;
import org.openapitools.client.model.AwsSqsRulePost;
import org.openapitools.client.model.AzureFunctionRulePost;
import org.openapitools.client.model.CloudflareWorkerRulePost;
import org.openapitools.client.model.GoogleCloudFunctionRulePost;
import org.openapitools.client.model.HttpRulePost;
import org.openapitools.client.model.IftttRulePost;
import org.openapitools.client.model.KafkaRulePost;
import org.openapitools.client.model.PulsarRulePost;
import org.openapitools.client.model.PulsarRulePostTarget;
import org.openapitools.client.model.RuleSource;
import org.openapitools.client.model.ZapierRulePost;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:01.140542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RulePost extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RulePost.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RulePost.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RulePost' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<HttpRulePost> adapterHttpRulePost = gson.getDelegateAdapter(this, TypeToken.get(HttpRulePost.class));
            final TypeAdapter<IftttRulePost> adapterIftttRulePost = gson.getDelegateAdapter(this, TypeToken.get(IftttRulePost.class));
            final TypeAdapter<ZapierRulePost> adapterZapierRulePost = gson.getDelegateAdapter(this, TypeToken.get(ZapierRulePost.class));
            final TypeAdapter<CloudflareWorkerRulePost> adapterCloudflareWorkerRulePost = gson.getDelegateAdapter(this, TypeToken.get(CloudflareWorkerRulePost.class));
            final TypeAdapter<AzureFunctionRulePost> adapterAzureFunctionRulePost = gson.getDelegateAdapter(this, TypeToken.get(AzureFunctionRulePost.class));
            final TypeAdapter<GoogleCloudFunctionRulePost> adapterGoogleCloudFunctionRulePost = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudFunctionRulePost.class));
            final TypeAdapter<AwsLambdaRulePost> adapterAwsLambdaRulePost = gson.getDelegateAdapter(this, TypeToken.get(AwsLambdaRulePost.class));
            final TypeAdapter<AwsKinesisRulePost> adapterAwsKinesisRulePost = gson.getDelegateAdapter(this, TypeToken.get(AwsKinesisRulePost.class));
            final TypeAdapter<AwsSqsRulePost> adapterAwsSqsRulePost = gson.getDelegateAdapter(this, TypeToken.get(AwsSqsRulePost.class));
            final TypeAdapter<AmqpRulePost> adapterAmqpRulePost = gson.getDelegateAdapter(this, TypeToken.get(AmqpRulePost.class));
            final TypeAdapter<AmqpExternalRulePost> adapterAmqpExternalRulePost = gson.getDelegateAdapter(this, TypeToken.get(AmqpExternalRulePost.class));
            final TypeAdapter<KafkaRulePost> adapterKafkaRulePost = gson.getDelegateAdapter(this, TypeToken.get(KafkaRulePost.class));
            final TypeAdapter<PulsarRulePost> adapterPulsarRulePost = gson.getDelegateAdapter(this, TypeToken.get(PulsarRulePost.class));

            return (TypeAdapter<T>) new TypeAdapter<RulePost>() {
                @Override
                public void write(JsonWriter out, RulePost value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `HttpRulePost`
                    if (value.getActualInstance() instanceof HttpRulePost) {
                        JsonElement element = adapterHttpRulePost.toJsonTree((HttpRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IftttRulePost`
                    if (value.getActualInstance() instanceof IftttRulePost) {
                        JsonElement element = adapterIftttRulePost.toJsonTree((IftttRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZapierRulePost`
                    if (value.getActualInstance() instanceof ZapierRulePost) {
                        JsonElement element = adapterZapierRulePost.toJsonTree((ZapierRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudflareWorkerRulePost`
                    if (value.getActualInstance() instanceof CloudflareWorkerRulePost) {
                        JsonElement element = adapterCloudflareWorkerRulePost.toJsonTree((CloudflareWorkerRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureFunctionRulePost`
                    if (value.getActualInstance() instanceof AzureFunctionRulePost) {
                        JsonElement element = adapterAzureFunctionRulePost.toJsonTree((AzureFunctionRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleCloudFunctionRulePost`
                    if (value.getActualInstance() instanceof GoogleCloudFunctionRulePost) {
                        JsonElement element = adapterGoogleCloudFunctionRulePost.toJsonTree((GoogleCloudFunctionRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsLambdaRulePost`
                    if (value.getActualInstance() instanceof AwsLambdaRulePost) {
                        JsonElement element = adapterAwsLambdaRulePost.toJsonTree((AwsLambdaRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsKinesisRulePost`
                    if (value.getActualInstance() instanceof AwsKinesisRulePost) {
                        JsonElement element = adapterAwsKinesisRulePost.toJsonTree((AwsKinesisRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsSqsRulePost`
                    if (value.getActualInstance() instanceof AwsSqsRulePost) {
                        JsonElement element = adapterAwsSqsRulePost.toJsonTree((AwsSqsRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AmqpRulePost`
                    if (value.getActualInstance() instanceof AmqpRulePost) {
                        JsonElement element = adapterAmqpRulePost.toJsonTree((AmqpRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AmqpExternalRulePost`
                    if (value.getActualInstance() instanceof AmqpExternalRulePost) {
                        JsonElement element = adapterAmqpExternalRulePost.toJsonTree((AmqpExternalRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `KafkaRulePost`
                    if (value.getActualInstance() instanceof KafkaRulePost) {
                        JsonElement element = adapterKafkaRulePost.toJsonTree((KafkaRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PulsarRulePost`
                    if (value.getActualInstance() instanceof PulsarRulePost) {
                        JsonElement element = adapterPulsarRulePost.toJsonTree((PulsarRulePost)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, KafkaRulePost, PulsarRulePost, ZapierRulePost");
                }

                @Override
                public RulePost read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize HttpRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HttpRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterHttpRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HttpRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HttpRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HttpRulePost'", e);
                    }
                    // deserialize IftttRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IftttRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterIftttRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IftttRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IftttRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IftttRulePost'", e);
                    }
                    // deserialize ZapierRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZapierRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterZapierRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZapierRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZapierRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZapierRulePost'", e);
                    }
                    // deserialize CloudflareWorkerRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudflareWorkerRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudflareWorkerRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudflareWorkerRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudflareWorkerRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudflareWorkerRulePost'", e);
                    }
                    // deserialize AzureFunctionRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureFunctionRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureFunctionRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureFunctionRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureFunctionRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureFunctionRulePost'", e);
                    }
                    // deserialize GoogleCloudFunctionRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleCloudFunctionRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleCloudFunctionRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GoogleCloudFunctionRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleCloudFunctionRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleCloudFunctionRulePost'", e);
                    }
                    // deserialize AwsLambdaRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsLambdaRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsLambdaRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsLambdaRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsLambdaRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsLambdaRulePost'", e);
                    }
                    // deserialize AwsKinesisRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsKinesisRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsKinesisRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsKinesisRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsKinesisRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsKinesisRulePost'", e);
                    }
                    // deserialize AwsSqsRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsSqsRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsSqsRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsSqsRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsSqsRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsSqsRulePost'", e);
                    }
                    // deserialize AmqpRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AmqpRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterAmqpRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AmqpRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AmqpRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AmqpRulePost'", e);
                    }
                    // deserialize AmqpExternalRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AmqpExternalRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterAmqpExternalRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AmqpExternalRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AmqpExternalRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AmqpExternalRulePost'", e);
                    }
                    // deserialize KafkaRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KafkaRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterKafkaRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KafkaRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KafkaRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KafkaRulePost'", e);
                    }
                    // deserialize PulsarRulePost
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PulsarRulePost.validateJsonElement(jsonElement);
                        actualAdapter = adapterPulsarRulePost;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PulsarRulePost'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PulsarRulePost failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PulsarRulePost'", e);
                    }

                    if (match == 1) {
                        RulePost ret = new RulePost();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RulePost: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RulePost() {
        super("oneOf", Boolean.FALSE);
    }

    public RulePost(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("HttpRulePost", HttpRulePost.class);
        schemas.put("IftttRulePost", IftttRulePost.class);
        schemas.put("ZapierRulePost", ZapierRulePost.class);
        schemas.put("CloudflareWorkerRulePost", CloudflareWorkerRulePost.class);
        schemas.put("AzureFunctionRulePost", AzureFunctionRulePost.class);
        schemas.put("GoogleCloudFunctionRulePost", GoogleCloudFunctionRulePost.class);
        schemas.put("AwsLambdaRulePost", AwsLambdaRulePost.class);
        schemas.put("AwsKinesisRulePost", AwsKinesisRulePost.class);
        schemas.put("AwsSqsRulePost", AwsSqsRulePost.class);
        schemas.put("AmqpRulePost", AmqpRulePost.class);
        schemas.put("AmqpExternalRulePost", AmqpExternalRulePost.class);
        schemas.put("KafkaRulePost", KafkaRulePost.class);
        schemas.put("PulsarRulePost", PulsarRulePost.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RulePost.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, KafkaRulePost, PulsarRulePost, ZapierRulePost
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof HttpRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IftttRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZapierRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudflareWorkerRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureFunctionRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleCloudFunctionRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsLambdaRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsKinesisRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsSqsRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmqpRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmqpExternalRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KafkaRulePost) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PulsarRulePost) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, KafkaRulePost, PulsarRulePost, ZapierRulePost");
    }

    /**
     * Get the actual instance, which can be the following:
     * AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, KafkaRulePost, PulsarRulePost, ZapierRulePost
     *
     * @return The actual instance (AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, KafkaRulePost, PulsarRulePost, ZapierRulePost)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `HttpRulePost`. If the actual instance is not `HttpRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HttpRulePost`
     * @throws ClassCastException if the instance is not `HttpRulePost`
     */
    public HttpRulePost getHttpRulePost() throws ClassCastException {
        return (HttpRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IftttRulePost`. If the actual instance is not `IftttRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IftttRulePost`
     * @throws ClassCastException if the instance is not `IftttRulePost`
     */
    public IftttRulePost getIftttRulePost() throws ClassCastException {
        return (IftttRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZapierRulePost`. If the actual instance is not `ZapierRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZapierRulePost`
     * @throws ClassCastException if the instance is not `ZapierRulePost`
     */
    public ZapierRulePost getZapierRulePost() throws ClassCastException {
        return (ZapierRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudflareWorkerRulePost`. If the actual instance is not `CloudflareWorkerRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudflareWorkerRulePost`
     * @throws ClassCastException if the instance is not `CloudflareWorkerRulePost`
     */
    public CloudflareWorkerRulePost getCloudflareWorkerRulePost() throws ClassCastException {
        return (CloudflareWorkerRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AzureFunctionRulePost`. If the actual instance is not `AzureFunctionRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureFunctionRulePost`
     * @throws ClassCastException if the instance is not `AzureFunctionRulePost`
     */
    public AzureFunctionRulePost getAzureFunctionRulePost() throws ClassCastException {
        return (AzureFunctionRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleCloudFunctionRulePost`. If the actual instance is not `GoogleCloudFunctionRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleCloudFunctionRulePost`
     * @throws ClassCastException if the instance is not `GoogleCloudFunctionRulePost`
     */
    public GoogleCloudFunctionRulePost getGoogleCloudFunctionRulePost() throws ClassCastException {
        return (GoogleCloudFunctionRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsLambdaRulePost`. If the actual instance is not `AwsLambdaRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsLambdaRulePost`
     * @throws ClassCastException if the instance is not `AwsLambdaRulePost`
     */
    public AwsLambdaRulePost getAwsLambdaRulePost() throws ClassCastException {
        return (AwsLambdaRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsKinesisRulePost`. If the actual instance is not `AwsKinesisRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsKinesisRulePost`
     * @throws ClassCastException if the instance is not `AwsKinesisRulePost`
     */
    public AwsKinesisRulePost getAwsKinesisRulePost() throws ClassCastException {
        return (AwsKinesisRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsSqsRulePost`. If the actual instance is not `AwsSqsRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsSqsRulePost`
     * @throws ClassCastException if the instance is not `AwsSqsRulePost`
     */
    public AwsSqsRulePost getAwsSqsRulePost() throws ClassCastException {
        return (AwsSqsRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AmqpRulePost`. If the actual instance is not `AmqpRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmqpRulePost`
     * @throws ClassCastException if the instance is not `AmqpRulePost`
     */
    public AmqpRulePost getAmqpRulePost() throws ClassCastException {
        return (AmqpRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AmqpExternalRulePost`. If the actual instance is not `AmqpExternalRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmqpExternalRulePost`
     * @throws ClassCastException if the instance is not `AmqpExternalRulePost`
     */
    public AmqpExternalRulePost getAmqpExternalRulePost() throws ClassCastException {
        return (AmqpExternalRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `KafkaRulePost`. If the actual instance is not `KafkaRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KafkaRulePost`
     * @throws ClassCastException if the instance is not `KafkaRulePost`
     */
    public KafkaRulePost getKafkaRulePost() throws ClassCastException {
        return (KafkaRulePost)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PulsarRulePost`. If the actual instance is not `PulsarRulePost`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PulsarRulePost`
     * @throws ClassCastException if the instance is not `PulsarRulePost`
     */
    public PulsarRulePost getPulsarRulePost() throws ClassCastException {
        return (PulsarRulePost)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RulePost
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with HttpRulePost
        try {
            HttpRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HttpRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IftttRulePost
        try {
            IftttRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IftttRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZapierRulePost
        try {
            ZapierRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZapierRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudflareWorkerRulePost
        try {
            CloudflareWorkerRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudflareWorkerRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureFunctionRulePost
        try {
            AzureFunctionRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureFunctionRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleCloudFunctionRulePost
        try {
            GoogleCloudFunctionRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleCloudFunctionRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsLambdaRulePost
        try {
            AwsLambdaRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsLambdaRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsKinesisRulePost
        try {
            AwsKinesisRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsKinesisRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsSqsRulePost
        try {
            AwsSqsRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsSqsRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AmqpRulePost
        try {
            AmqpRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AmqpRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AmqpExternalRulePost
        try {
            AmqpExternalRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AmqpExternalRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with KafkaRulePost
        try {
            KafkaRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for KafkaRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PulsarRulePost
        try {
            PulsarRulePost.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PulsarRulePost failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RulePost with oneOf schemas: AmqpExternalRulePost, AmqpRulePost, AwsKinesisRulePost, AwsLambdaRulePost, AwsSqsRulePost, AzureFunctionRulePost, CloudflareWorkerRulePost, GoogleCloudFunctionRulePost, HttpRulePost, IftttRulePost, KafkaRulePost, PulsarRulePost, ZapierRulePost. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RulePost given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RulePost
     * @throws IOException if the JSON string is invalid with respect to RulePost
     */
    public static RulePost fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RulePost.class);
    }

    /**
     * Convert an instance of RulePost to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

