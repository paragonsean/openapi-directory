/*
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AmqpExternalRulePatch;
import org.openapitools.client.model.AmqpRulePatch;
import org.openapitools.client.model.AwsKinesisRulePatch;
import org.openapitools.client.model.AwsLambdaRulePatch;
import org.openapitools.client.model.AwsSqsRulePatch;
import org.openapitools.client.model.AzureFunctionRulePatch;
import org.openapitools.client.model.CloudflareWorkerRulePatch;
import org.openapitools.client.model.GoogleCloudFunctionRulePatch;
import org.openapitools.client.model.HttpRulePatch;
import org.openapitools.client.model.IftttRulePatch;
import org.openapitools.client.model.KafkaRulePatch;
import org.openapitools.client.model.PulsarRulePatch;
import org.openapitools.client.model.PulsarRulePatchTarget;
import org.openapitools.client.model.RuleSourcePatch;
import org.openapitools.client.model.ZapierRulePatch;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:01.140542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RulePatch extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RulePatch.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RulePatch.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RulePatch' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<HttpRulePatch> adapterHttpRulePatch = gson.getDelegateAdapter(this, TypeToken.get(HttpRulePatch.class));
            final TypeAdapter<IftttRulePatch> adapterIftttRulePatch = gson.getDelegateAdapter(this, TypeToken.get(IftttRulePatch.class));
            final TypeAdapter<ZapierRulePatch> adapterZapierRulePatch = gson.getDelegateAdapter(this, TypeToken.get(ZapierRulePatch.class));
            final TypeAdapter<CloudflareWorkerRulePatch> adapterCloudflareWorkerRulePatch = gson.getDelegateAdapter(this, TypeToken.get(CloudflareWorkerRulePatch.class));
            final TypeAdapter<AzureFunctionRulePatch> adapterAzureFunctionRulePatch = gson.getDelegateAdapter(this, TypeToken.get(AzureFunctionRulePatch.class));
            final TypeAdapter<GoogleCloudFunctionRulePatch> adapterGoogleCloudFunctionRulePatch = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudFunctionRulePatch.class));
            final TypeAdapter<AwsLambdaRulePatch> adapterAwsLambdaRulePatch = gson.getDelegateAdapter(this, TypeToken.get(AwsLambdaRulePatch.class));
            final TypeAdapter<AwsKinesisRulePatch> adapterAwsKinesisRulePatch = gson.getDelegateAdapter(this, TypeToken.get(AwsKinesisRulePatch.class));
            final TypeAdapter<AwsSqsRulePatch> adapterAwsSqsRulePatch = gson.getDelegateAdapter(this, TypeToken.get(AwsSqsRulePatch.class));
            final TypeAdapter<AmqpRulePatch> adapterAmqpRulePatch = gson.getDelegateAdapter(this, TypeToken.get(AmqpRulePatch.class));
            final TypeAdapter<AmqpExternalRulePatch> adapterAmqpExternalRulePatch = gson.getDelegateAdapter(this, TypeToken.get(AmqpExternalRulePatch.class));
            final TypeAdapter<KafkaRulePatch> adapterKafkaRulePatch = gson.getDelegateAdapter(this, TypeToken.get(KafkaRulePatch.class));
            final TypeAdapter<PulsarRulePatch> adapterPulsarRulePatch = gson.getDelegateAdapter(this, TypeToken.get(PulsarRulePatch.class));

            return (TypeAdapter<T>) new TypeAdapter<RulePatch>() {
                @Override
                public void write(JsonWriter out, RulePatch value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `HttpRulePatch`
                    if (value.getActualInstance() instanceof HttpRulePatch) {
                        JsonElement element = adapterHttpRulePatch.toJsonTree((HttpRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IftttRulePatch`
                    if (value.getActualInstance() instanceof IftttRulePatch) {
                        JsonElement element = adapterIftttRulePatch.toJsonTree((IftttRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZapierRulePatch`
                    if (value.getActualInstance() instanceof ZapierRulePatch) {
                        JsonElement element = adapterZapierRulePatch.toJsonTree((ZapierRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudflareWorkerRulePatch`
                    if (value.getActualInstance() instanceof CloudflareWorkerRulePatch) {
                        JsonElement element = adapterCloudflareWorkerRulePatch.toJsonTree((CloudflareWorkerRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureFunctionRulePatch`
                    if (value.getActualInstance() instanceof AzureFunctionRulePatch) {
                        JsonElement element = adapterAzureFunctionRulePatch.toJsonTree((AzureFunctionRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleCloudFunctionRulePatch`
                    if (value.getActualInstance() instanceof GoogleCloudFunctionRulePatch) {
                        JsonElement element = adapterGoogleCloudFunctionRulePatch.toJsonTree((GoogleCloudFunctionRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsLambdaRulePatch`
                    if (value.getActualInstance() instanceof AwsLambdaRulePatch) {
                        JsonElement element = adapterAwsLambdaRulePatch.toJsonTree((AwsLambdaRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsKinesisRulePatch`
                    if (value.getActualInstance() instanceof AwsKinesisRulePatch) {
                        JsonElement element = adapterAwsKinesisRulePatch.toJsonTree((AwsKinesisRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsSqsRulePatch`
                    if (value.getActualInstance() instanceof AwsSqsRulePatch) {
                        JsonElement element = adapterAwsSqsRulePatch.toJsonTree((AwsSqsRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AmqpRulePatch`
                    if (value.getActualInstance() instanceof AmqpRulePatch) {
                        JsonElement element = adapterAmqpRulePatch.toJsonTree((AmqpRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AmqpExternalRulePatch`
                    if (value.getActualInstance() instanceof AmqpExternalRulePatch) {
                        JsonElement element = adapterAmqpExternalRulePatch.toJsonTree((AmqpExternalRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `KafkaRulePatch`
                    if (value.getActualInstance() instanceof KafkaRulePatch) {
                        JsonElement element = adapterKafkaRulePatch.toJsonTree((KafkaRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PulsarRulePatch`
                    if (value.getActualInstance() instanceof PulsarRulePatch) {
                        JsonElement element = adapterPulsarRulePatch.toJsonTree((PulsarRulePatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AmqpExternalRulePatch, AmqpRulePatch, AwsKinesisRulePatch, AwsLambdaRulePatch, AwsSqsRulePatch, AzureFunctionRulePatch, CloudflareWorkerRulePatch, GoogleCloudFunctionRulePatch, HttpRulePatch, IftttRulePatch, KafkaRulePatch, PulsarRulePatch, ZapierRulePatch");
                }

                @Override
                public RulePatch read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize HttpRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HttpRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterHttpRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HttpRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HttpRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HttpRulePatch'", e);
                    }
                    // deserialize IftttRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IftttRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterIftttRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IftttRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IftttRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IftttRulePatch'", e);
                    }
                    // deserialize ZapierRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZapierRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterZapierRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZapierRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZapierRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZapierRulePatch'", e);
                    }
                    // deserialize CloudflareWorkerRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudflareWorkerRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudflareWorkerRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudflareWorkerRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudflareWorkerRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudflareWorkerRulePatch'", e);
                    }
                    // deserialize AzureFunctionRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureFunctionRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureFunctionRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureFunctionRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureFunctionRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureFunctionRulePatch'", e);
                    }
                    // deserialize GoogleCloudFunctionRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleCloudFunctionRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleCloudFunctionRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GoogleCloudFunctionRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleCloudFunctionRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleCloudFunctionRulePatch'", e);
                    }
                    // deserialize AwsLambdaRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsLambdaRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsLambdaRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsLambdaRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsLambdaRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsLambdaRulePatch'", e);
                    }
                    // deserialize AwsKinesisRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsKinesisRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsKinesisRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsKinesisRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsKinesisRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsKinesisRulePatch'", e);
                    }
                    // deserialize AwsSqsRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsSqsRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsSqsRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsSqsRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsSqsRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsSqsRulePatch'", e);
                    }
                    // deserialize AmqpRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AmqpRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterAmqpRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AmqpRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AmqpRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AmqpRulePatch'", e);
                    }
                    // deserialize AmqpExternalRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AmqpExternalRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterAmqpExternalRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AmqpExternalRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AmqpExternalRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AmqpExternalRulePatch'", e);
                    }
                    // deserialize KafkaRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KafkaRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterKafkaRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KafkaRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KafkaRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KafkaRulePatch'", e);
                    }
                    // deserialize PulsarRulePatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PulsarRulePatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterPulsarRulePatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PulsarRulePatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PulsarRulePatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PulsarRulePatch'", e);
                    }

                    if (match == 1) {
                        RulePatch ret = new RulePatch();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RulePatch: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RulePatch() {
        super("oneOf", Boolean.FALSE);
    }

    public RulePatch(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("HttpRulePatch", HttpRulePatch.class);
        schemas.put("IftttRulePatch", IftttRulePatch.class);
        schemas.put("ZapierRulePatch", ZapierRulePatch.class);
        schemas.put("CloudflareWorkerRulePatch", CloudflareWorkerRulePatch.class);
        schemas.put("AzureFunctionRulePatch", AzureFunctionRulePatch.class);
        schemas.put("GoogleCloudFunctionRulePatch", GoogleCloudFunctionRulePatch.class);
        schemas.put("AwsLambdaRulePatch", AwsLambdaRulePatch.class);
        schemas.put("AwsKinesisRulePatch", AwsKinesisRulePatch.class);
        schemas.put("AwsSqsRulePatch", AwsSqsRulePatch.class);
        schemas.put("AmqpRulePatch", AmqpRulePatch.class);
        schemas.put("AmqpExternalRulePatch", AmqpExternalRulePatch.class);
        schemas.put("KafkaRulePatch", KafkaRulePatch.class);
        schemas.put("PulsarRulePatch", PulsarRulePatch.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RulePatch.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AmqpExternalRulePatch, AmqpRulePatch, AwsKinesisRulePatch, AwsLambdaRulePatch, AwsSqsRulePatch, AzureFunctionRulePatch, CloudflareWorkerRulePatch, GoogleCloudFunctionRulePatch, HttpRulePatch, IftttRulePatch, KafkaRulePatch, PulsarRulePatch, ZapierRulePatch
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof HttpRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IftttRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZapierRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudflareWorkerRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureFunctionRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleCloudFunctionRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsLambdaRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsKinesisRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsSqsRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmqpRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmqpExternalRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KafkaRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PulsarRulePatch) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AmqpExternalRulePatch, AmqpRulePatch, AwsKinesisRulePatch, AwsLambdaRulePatch, AwsSqsRulePatch, AzureFunctionRulePatch, CloudflareWorkerRulePatch, GoogleCloudFunctionRulePatch, HttpRulePatch, IftttRulePatch, KafkaRulePatch, PulsarRulePatch, ZapierRulePatch");
    }

    /**
     * Get the actual instance, which can be the following:
     * AmqpExternalRulePatch, AmqpRulePatch, AwsKinesisRulePatch, AwsLambdaRulePatch, AwsSqsRulePatch, AzureFunctionRulePatch, CloudflareWorkerRulePatch, GoogleCloudFunctionRulePatch, HttpRulePatch, IftttRulePatch, KafkaRulePatch, PulsarRulePatch, ZapierRulePatch
     *
     * @return The actual instance (AmqpExternalRulePatch, AmqpRulePatch, AwsKinesisRulePatch, AwsLambdaRulePatch, AwsSqsRulePatch, AzureFunctionRulePatch, CloudflareWorkerRulePatch, GoogleCloudFunctionRulePatch, HttpRulePatch, IftttRulePatch, KafkaRulePatch, PulsarRulePatch, ZapierRulePatch)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `HttpRulePatch`. If the actual instance is not `HttpRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HttpRulePatch`
     * @throws ClassCastException if the instance is not `HttpRulePatch`
     */
    public HttpRulePatch getHttpRulePatch() throws ClassCastException {
        return (HttpRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IftttRulePatch`. If the actual instance is not `IftttRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IftttRulePatch`
     * @throws ClassCastException if the instance is not `IftttRulePatch`
     */
    public IftttRulePatch getIftttRulePatch() throws ClassCastException {
        return (IftttRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZapierRulePatch`. If the actual instance is not `ZapierRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZapierRulePatch`
     * @throws ClassCastException if the instance is not `ZapierRulePatch`
     */
    public ZapierRulePatch getZapierRulePatch() throws ClassCastException {
        return (ZapierRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudflareWorkerRulePatch`. If the actual instance is not `CloudflareWorkerRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudflareWorkerRulePatch`
     * @throws ClassCastException if the instance is not `CloudflareWorkerRulePatch`
     */
    public CloudflareWorkerRulePatch getCloudflareWorkerRulePatch() throws ClassCastException {
        return (CloudflareWorkerRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AzureFunctionRulePatch`. If the actual instance is not `AzureFunctionRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureFunctionRulePatch`
     * @throws ClassCastException if the instance is not `AzureFunctionRulePatch`
     */
    public AzureFunctionRulePatch getAzureFunctionRulePatch() throws ClassCastException {
        return (AzureFunctionRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleCloudFunctionRulePatch`. If the actual instance is not `GoogleCloudFunctionRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleCloudFunctionRulePatch`
     * @throws ClassCastException if the instance is not `GoogleCloudFunctionRulePatch`
     */
    public GoogleCloudFunctionRulePatch getGoogleCloudFunctionRulePatch() throws ClassCastException {
        return (GoogleCloudFunctionRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsLambdaRulePatch`. If the actual instance is not `AwsLambdaRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsLambdaRulePatch`
     * @throws ClassCastException if the instance is not `AwsLambdaRulePatch`
     */
    public AwsLambdaRulePatch getAwsLambdaRulePatch() throws ClassCastException {
        return (AwsLambdaRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsKinesisRulePatch`. If the actual instance is not `AwsKinesisRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsKinesisRulePatch`
     * @throws ClassCastException if the instance is not `AwsKinesisRulePatch`
     */
    public AwsKinesisRulePatch getAwsKinesisRulePatch() throws ClassCastException {
        return (AwsKinesisRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsSqsRulePatch`. If the actual instance is not `AwsSqsRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsSqsRulePatch`
     * @throws ClassCastException if the instance is not `AwsSqsRulePatch`
     */
    public AwsSqsRulePatch getAwsSqsRulePatch() throws ClassCastException {
        return (AwsSqsRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AmqpRulePatch`. If the actual instance is not `AmqpRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmqpRulePatch`
     * @throws ClassCastException if the instance is not `AmqpRulePatch`
     */
    public AmqpRulePatch getAmqpRulePatch() throws ClassCastException {
        return (AmqpRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AmqpExternalRulePatch`. If the actual instance is not `AmqpExternalRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmqpExternalRulePatch`
     * @throws ClassCastException if the instance is not `AmqpExternalRulePatch`
     */
    public AmqpExternalRulePatch getAmqpExternalRulePatch() throws ClassCastException {
        return (AmqpExternalRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `KafkaRulePatch`. If the actual instance is not `KafkaRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KafkaRulePatch`
     * @throws ClassCastException if the instance is not `KafkaRulePatch`
     */
    public KafkaRulePatch getKafkaRulePatch() throws ClassCastException {
        return (KafkaRulePatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PulsarRulePatch`. If the actual instance is not `PulsarRulePatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PulsarRulePatch`
     * @throws ClassCastException if the instance is not `PulsarRulePatch`
     */
    public PulsarRulePatch getPulsarRulePatch() throws ClassCastException {
        return (PulsarRulePatch)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RulePatch
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with HttpRulePatch
        try {
            HttpRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HttpRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IftttRulePatch
        try {
            IftttRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IftttRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZapierRulePatch
        try {
            ZapierRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZapierRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudflareWorkerRulePatch
        try {
            CloudflareWorkerRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudflareWorkerRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureFunctionRulePatch
        try {
            AzureFunctionRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureFunctionRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleCloudFunctionRulePatch
        try {
            GoogleCloudFunctionRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleCloudFunctionRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsLambdaRulePatch
        try {
            AwsLambdaRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsLambdaRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsKinesisRulePatch
        try {
            AwsKinesisRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsKinesisRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsSqsRulePatch
        try {
            AwsSqsRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsSqsRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AmqpRulePatch
        try {
            AmqpRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AmqpRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AmqpExternalRulePatch
        try {
            AmqpExternalRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AmqpExternalRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with KafkaRulePatch
        try {
            KafkaRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for KafkaRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PulsarRulePatch
        try {
            PulsarRulePatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PulsarRulePatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RulePatch with oneOf schemas: AmqpExternalRulePatch, AmqpRulePatch, AwsKinesisRulePatch, AwsLambdaRulePatch, AwsSqsRulePatch, AzureFunctionRulePatch, CloudflareWorkerRulePatch, GoogleCloudFunctionRulePatch, HttpRulePatch, IftttRulePatch, KafkaRulePatch, PulsarRulePatch, ZapierRulePatch. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RulePatch given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RulePatch
     * @throws IOException if the JSON string is invalid with respect to RulePatch
     */
    public static RulePatch fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RulePatch.class);
    }

    /**
     * Convert an instance of RulePatch to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

