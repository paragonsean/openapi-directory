/*
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppPost
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:01.140542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppPost {
  public static final String SERIALIZED_NAME_APNS_CERTIFICATE = "apnsCertificate";
  @SerializedName(SERIALIZED_NAME_APNS_CERTIFICATE)
  private String apnsCertificate;

  public static final String SERIALIZED_NAME_APNS_PRIVATE_KEY = "apnsPrivateKey";
  @SerializedName(SERIALIZED_NAME_APNS_PRIVATE_KEY)
  private String apnsPrivateKey;

  public static final String SERIALIZED_NAME_APNS_USE_SANDBOX_ENDPOINT = "apnsUseSandboxEndpoint";
  @SerializedName(SERIALIZED_NAME_APNS_USE_SANDBOX_ENDPOINT)
  private Boolean apnsUseSandboxEndpoint;

  public static final String SERIALIZED_NAME_FCM_KEY = "fcmKey";
  @SerializedName(SERIALIZED_NAME_FCM_KEY)
  private String fcmKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TLS_ONLY = "tlsOnly";
  @SerializedName(SERIALIZED_NAME_TLS_ONLY)
  private Boolean tlsOnly;

  public AppPost() {
  }

  public AppPost apnsCertificate(String apnsCertificate) {
    this.apnsCertificate = apnsCertificate;
    return this;
  }

  /**
   * Get apnsCertificate
   * @return apnsCertificate
   */
  @javax.annotation.Nullable
  public String getApnsCertificate() {
    return apnsCertificate;
  }

  public void setApnsCertificate(String apnsCertificate) {
    this.apnsCertificate = apnsCertificate;
  }


  public AppPost apnsPrivateKey(String apnsPrivateKey) {
    this.apnsPrivateKey = apnsPrivateKey;
    return this;
  }

  /**
   * Get apnsPrivateKey
   * @return apnsPrivateKey
   */
  @javax.annotation.Nullable
  public String getApnsPrivateKey() {
    return apnsPrivateKey;
  }

  public void setApnsPrivateKey(String apnsPrivateKey) {
    this.apnsPrivateKey = apnsPrivateKey;
  }


  public AppPost apnsUseSandboxEndpoint(Boolean apnsUseSandboxEndpoint) {
    this.apnsUseSandboxEndpoint = apnsUseSandboxEndpoint;
    return this;
  }

  /**
   * Get apnsUseSandboxEndpoint
   * @return apnsUseSandboxEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getApnsUseSandboxEndpoint() {
    return apnsUseSandboxEndpoint;
  }

  public void setApnsUseSandboxEndpoint(Boolean apnsUseSandboxEndpoint) {
    this.apnsUseSandboxEndpoint = apnsUseSandboxEndpoint;
  }


  public AppPost fcmKey(String fcmKey) {
    this.fcmKey = fcmKey;
    return this;
  }

  /**
   * Get fcmKey
   * @return fcmKey
   */
  @javax.annotation.Nullable
  public String getFcmKey() {
    return fcmKey;
  }

  public void setFcmKey(String fcmKey) {
    this.fcmKey = fcmKey;
  }


  public AppPost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public AppPost status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  @Deprecated
  public void setStatus(String status) {
    this.status = status;
  }


  public AppPost tlsOnly(Boolean tlsOnly) {
    this.tlsOnly = tlsOnly;
    return this;
  }

  /**
   * Get tlsOnly
   * @return tlsOnly
   */
  @javax.annotation.Nullable
  public Boolean getTlsOnly() {
    return tlsOnly;
  }

  public void setTlsOnly(Boolean tlsOnly) {
    this.tlsOnly = tlsOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPost appPost = (AppPost) o;
    return Objects.equals(this.apnsCertificate, appPost.apnsCertificate) &&
        Objects.equals(this.apnsPrivateKey, appPost.apnsPrivateKey) &&
        Objects.equals(this.apnsUseSandboxEndpoint, appPost.apnsUseSandboxEndpoint) &&
        Objects.equals(this.fcmKey, appPost.fcmKey) &&
        Objects.equals(this.name, appPost.name) &&
        Objects.equals(this.status, appPost.status) &&
        Objects.equals(this.tlsOnly, appPost.tlsOnly);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(apnsCertificate, apnsPrivateKey, apnsUseSandboxEndpoint, fcmKey, name, status, tlsOnly);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPost {\n");
    sb.append("    apnsCertificate: ").append(toIndentedString(apnsCertificate)).append("\n");
    sb.append("    apnsPrivateKey: ").append(toIndentedString(apnsPrivateKey)).append("\n");
    sb.append("    apnsUseSandboxEndpoint: ").append(toIndentedString(apnsUseSandboxEndpoint)).append("\n");
    sb.append("    fcmKey: ").append(toIndentedString(fcmKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tlsOnly: ").append(toIndentedString(tlsOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apnsCertificate");
    openapiFields.add("apnsPrivateKey");
    openapiFields.add("apnsUseSandboxEndpoint");
    openapiFields.add("fcmKey");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("tlsOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppPost is not found in the empty JSON string", AppPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppPost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apnsCertificate") != null && !jsonObj.get("apnsCertificate").isJsonNull()) && !jsonObj.get("apnsCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apnsCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apnsCertificate").toString()));
      }
      if ((jsonObj.get("apnsPrivateKey") != null && !jsonObj.get("apnsPrivateKey").isJsonNull()) && !jsonObj.get("apnsPrivateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apnsPrivateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apnsPrivateKey").toString()));
      }
      if ((jsonObj.get("fcmKey") != null && !jsonObj.get("fcmKey").isJsonNull()) && !jsonObj.get("fcmKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fcmKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fcmKey").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppPost.class));

       return (TypeAdapter<T>) new TypeAdapter<AppPost>() {
           @Override
           public void write(JsonWriter out, AppPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppPost
   * @throws IOException if the JSON string is invalid with respect to AppPost
   */
  public static AppPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppPost.class);
  }

  /**
   * Convert an instance of AppPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

