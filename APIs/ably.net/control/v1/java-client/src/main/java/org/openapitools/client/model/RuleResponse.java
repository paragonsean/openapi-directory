/*
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AmqpExternalRuleResponse;
import org.openapitools.client.model.AmqpRuleResponse;
import org.openapitools.client.model.AwsKinesisRuleResponse;
import org.openapitools.client.model.AwsLambdaRuleResponse;
import org.openapitools.client.model.AwsSqsRuleResponse;
import org.openapitools.client.model.AzureFunctionRuleResponse;
import org.openapitools.client.model.CloudflareWorkerRuleResponse;
import org.openapitools.client.model.GoogleCloudFunctionRuleResponse;
import org.openapitools.client.model.HttpRuleResponse;
import org.openapitools.client.model.IftttRuleResponse;
import org.openapitools.client.model.KafkaRuleResponse;
import org.openapitools.client.model.PulsarRuleResponse;
import org.openapitools.client.model.RuleSource;
import org.openapitools.client.model.UnsupportedRuleResponse;
import org.openapitools.client.model.UnsupportedRuleResponseTarget;
import org.openapitools.client.model.ZapierRuleResponse;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:01.140542-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleResponse extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RuleResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RuleResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RuleResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<HttpRuleResponse> adapterHttpRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(HttpRuleResponse.class));
            final TypeAdapter<IftttRuleResponse> adapterIftttRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(IftttRuleResponse.class));
            final TypeAdapter<ZapierRuleResponse> adapterZapierRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(ZapierRuleResponse.class));
            final TypeAdapter<CloudflareWorkerRuleResponse> adapterCloudflareWorkerRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(CloudflareWorkerRuleResponse.class));
            final TypeAdapter<AzureFunctionRuleResponse> adapterAzureFunctionRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(AzureFunctionRuleResponse.class));
            final TypeAdapter<GoogleCloudFunctionRuleResponse> adapterGoogleCloudFunctionRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudFunctionRuleResponse.class));
            final TypeAdapter<AwsLambdaRuleResponse> adapterAwsLambdaRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(AwsLambdaRuleResponse.class));
            final TypeAdapter<AwsKinesisRuleResponse> adapterAwsKinesisRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(AwsKinesisRuleResponse.class));
            final TypeAdapter<AwsSqsRuleResponse> adapterAwsSqsRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(AwsSqsRuleResponse.class));
            final TypeAdapter<AmqpRuleResponse> adapterAmqpRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(AmqpRuleResponse.class));
            final TypeAdapter<AmqpExternalRuleResponse> adapterAmqpExternalRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(AmqpExternalRuleResponse.class));
            final TypeAdapter<KafkaRuleResponse> adapterKafkaRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(KafkaRuleResponse.class));
            final TypeAdapter<PulsarRuleResponse> adapterPulsarRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(PulsarRuleResponse.class));
            final TypeAdapter<UnsupportedRuleResponse> adapterUnsupportedRuleResponse = gson.getDelegateAdapter(this, TypeToken.get(UnsupportedRuleResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<RuleResponse>() {
                @Override
                public void write(JsonWriter out, RuleResponse value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `HttpRuleResponse`
                    if (value.getActualInstance() instanceof HttpRuleResponse) {
                        JsonElement element = adapterHttpRuleResponse.toJsonTree((HttpRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IftttRuleResponse`
                    if (value.getActualInstance() instanceof IftttRuleResponse) {
                        JsonElement element = adapterIftttRuleResponse.toJsonTree((IftttRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZapierRuleResponse`
                    if (value.getActualInstance() instanceof ZapierRuleResponse) {
                        JsonElement element = adapterZapierRuleResponse.toJsonTree((ZapierRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudflareWorkerRuleResponse`
                    if (value.getActualInstance() instanceof CloudflareWorkerRuleResponse) {
                        JsonElement element = adapterCloudflareWorkerRuleResponse.toJsonTree((CloudflareWorkerRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureFunctionRuleResponse`
                    if (value.getActualInstance() instanceof AzureFunctionRuleResponse) {
                        JsonElement element = adapterAzureFunctionRuleResponse.toJsonTree((AzureFunctionRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleCloudFunctionRuleResponse`
                    if (value.getActualInstance() instanceof GoogleCloudFunctionRuleResponse) {
                        JsonElement element = adapterGoogleCloudFunctionRuleResponse.toJsonTree((GoogleCloudFunctionRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsLambdaRuleResponse`
                    if (value.getActualInstance() instanceof AwsLambdaRuleResponse) {
                        JsonElement element = adapterAwsLambdaRuleResponse.toJsonTree((AwsLambdaRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsKinesisRuleResponse`
                    if (value.getActualInstance() instanceof AwsKinesisRuleResponse) {
                        JsonElement element = adapterAwsKinesisRuleResponse.toJsonTree((AwsKinesisRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsSqsRuleResponse`
                    if (value.getActualInstance() instanceof AwsSqsRuleResponse) {
                        JsonElement element = adapterAwsSqsRuleResponse.toJsonTree((AwsSqsRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AmqpRuleResponse`
                    if (value.getActualInstance() instanceof AmqpRuleResponse) {
                        JsonElement element = adapterAmqpRuleResponse.toJsonTree((AmqpRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AmqpExternalRuleResponse`
                    if (value.getActualInstance() instanceof AmqpExternalRuleResponse) {
                        JsonElement element = adapterAmqpExternalRuleResponse.toJsonTree((AmqpExternalRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `KafkaRuleResponse`
                    if (value.getActualInstance() instanceof KafkaRuleResponse) {
                        JsonElement element = adapterKafkaRuleResponse.toJsonTree((KafkaRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PulsarRuleResponse`
                    if (value.getActualInstance() instanceof PulsarRuleResponse) {
                        JsonElement element = adapterPulsarRuleResponse.toJsonTree((PulsarRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UnsupportedRuleResponse`
                    if (value.getActualInstance() instanceof UnsupportedRuleResponse) {
                        JsonElement element = adapterUnsupportedRuleResponse.toJsonTree((UnsupportedRuleResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AmqpExternalRuleResponse, AmqpRuleResponse, AwsKinesisRuleResponse, AwsLambdaRuleResponse, AwsSqsRuleResponse, AzureFunctionRuleResponse, CloudflareWorkerRuleResponse, GoogleCloudFunctionRuleResponse, HttpRuleResponse, IftttRuleResponse, KafkaRuleResponse, PulsarRuleResponse, UnsupportedRuleResponse, ZapierRuleResponse");
                }

                @Override
                public RuleResponse read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize HttpRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HttpRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterHttpRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HttpRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HttpRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HttpRuleResponse'", e);
                    }
                    // deserialize IftttRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IftttRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterIftttRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IftttRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IftttRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IftttRuleResponse'", e);
                    }
                    // deserialize ZapierRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZapierRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterZapierRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZapierRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZapierRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZapierRuleResponse'", e);
                    }
                    // deserialize CloudflareWorkerRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudflareWorkerRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudflareWorkerRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudflareWorkerRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudflareWorkerRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudflareWorkerRuleResponse'", e);
                    }
                    // deserialize AzureFunctionRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureFunctionRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureFunctionRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureFunctionRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureFunctionRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureFunctionRuleResponse'", e);
                    }
                    // deserialize GoogleCloudFunctionRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleCloudFunctionRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleCloudFunctionRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GoogleCloudFunctionRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleCloudFunctionRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleCloudFunctionRuleResponse'", e);
                    }
                    // deserialize AwsLambdaRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsLambdaRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsLambdaRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsLambdaRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsLambdaRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsLambdaRuleResponse'", e);
                    }
                    // deserialize AwsKinesisRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsKinesisRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsKinesisRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsKinesisRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsKinesisRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsKinesisRuleResponse'", e);
                    }
                    // deserialize AwsSqsRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsSqsRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsSqsRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsSqsRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsSqsRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsSqsRuleResponse'", e);
                    }
                    // deserialize AmqpRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AmqpRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterAmqpRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AmqpRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AmqpRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AmqpRuleResponse'", e);
                    }
                    // deserialize AmqpExternalRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AmqpExternalRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterAmqpExternalRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AmqpExternalRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AmqpExternalRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AmqpExternalRuleResponse'", e);
                    }
                    // deserialize KafkaRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KafkaRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterKafkaRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KafkaRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KafkaRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KafkaRuleResponse'", e);
                    }
                    // deserialize PulsarRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PulsarRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterPulsarRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PulsarRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PulsarRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PulsarRuleResponse'", e);
                    }
                    // deserialize UnsupportedRuleResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UnsupportedRuleResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterUnsupportedRuleResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UnsupportedRuleResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UnsupportedRuleResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UnsupportedRuleResponse'", e);
                    }

                    if (match == 1) {
                        RuleResponse ret = new RuleResponse();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RuleResponse: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RuleResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public RuleResponse(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("HttpRuleResponse", HttpRuleResponse.class);
        schemas.put("IftttRuleResponse", IftttRuleResponse.class);
        schemas.put("ZapierRuleResponse", ZapierRuleResponse.class);
        schemas.put("CloudflareWorkerRuleResponse", CloudflareWorkerRuleResponse.class);
        schemas.put("AzureFunctionRuleResponse", AzureFunctionRuleResponse.class);
        schemas.put("GoogleCloudFunctionRuleResponse", GoogleCloudFunctionRuleResponse.class);
        schemas.put("AwsLambdaRuleResponse", AwsLambdaRuleResponse.class);
        schemas.put("AwsKinesisRuleResponse", AwsKinesisRuleResponse.class);
        schemas.put("AwsSqsRuleResponse", AwsSqsRuleResponse.class);
        schemas.put("AmqpRuleResponse", AmqpRuleResponse.class);
        schemas.put("AmqpExternalRuleResponse", AmqpExternalRuleResponse.class);
        schemas.put("KafkaRuleResponse", KafkaRuleResponse.class);
        schemas.put("PulsarRuleResponse", PulsarRuleResponse.class);
        schemas.put("UnsupportedRuleResponse", UnsupportedRuleResponse.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RuleResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AmqpExternalRuleResponse, AmqpRuleResponse, AwsKinesisRuleResponse, AwsLambdaRuleResponse, AwsSqsRuleResponse, AzureFunctionRuleResponse, CloudflareWorkerRuleResponse, GoogleCloudFunctionRuleResponse, HttpRuleResponse, IftttRuleResponse, KafkaRuleResponse, PulsarRuleResponse, UnsupportedRuleResponse, ZapierRuleResponse
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof HttpRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IftttRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZapierRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudflareWorkerRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureFunctionRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleCloudFunctionRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsLambdaRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsKinesisRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsSqsRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmqpRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmqpExternalRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KafkaRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PulsarRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UnsupportedRuleResponse) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AmqpExternalRuleResponse, AmqpRuleResponse, AwsKinesisRuleResponse, AwsLambdaRuleResponse, AwsSqsRuleResponse, AzureFunctionRuleResponse, CloudflareWorkerRuleResponse, GoogleCloudFunctionRuleResponse, HttpRuleResponse, IftttRuleResponse, KafkaRuleResponse, PulsarRuleResponse, UnsupportedRuleResponse, ZapierRuleResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * AmqpExternalRuleResponse, AmqpRuleResponse, AwsKinesisRuleResponse, AwsLambdaRuleResponse, AwsSqsRuleResponse, AzureFunctionRuleResponse, CloudflareWorkerRuleResponse, GoogleCloudFunctionRuleResponse, HttpRuleResponse, IftttRuleResponse, KafkaRuleResponse, PulsarRuleResponse, UnsupportedRuleResponse, ZapierRuleResponse
     *
     * @return The actual instance (AmqpExternalRuleResponse, AmqpRuleResponse, AwsKinesisRuleResponse, AwsLambdaRuleResponse, AwsSqsRuleResponse, AzureFunctionRuleResponse, CloudflareWorkerRuleResponse, GoogleCloudFunctionRuleResponse, HttpRuleResponse, IftttRuleResponse, KafkaRuleResponse, PulsarRuleResponse, UnsupportedRuleResponse, ZapierRuleResponse)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `HttpRuleResponse`. If the actual instance is not `HttpRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HttpRuleResponse`
     * @throws ClassCastException if the instance is not `HttpRuleResponse`
     */
    public HttpRuleResponse getHttpRuleResponse() throws ClassCastException {
        return (HttpRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IftttRuleResponse`. If the actual instance is not `IftttRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IftttRuleResponse`
     * @throws ClassCastException if the instance is not `IftttRuleResponse`
     */
    public IftttRuleResponse getIftttRuleResponse() throws ClassCastException {
        return (IftttRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZapierRuleResponse`. If the actual instance is not `ZapierRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZapierRuleResponse`
     * @throws ClassCastException if the instance is not `ZapierRuleResponse`
     */
    public ZapierRuleResponse getZapierRuleResponse() throws ClassCastException {
        return (ZapierRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudflareWorkerRuleResponse`. If the actual instance is not `CloudflareWorkerRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudflareWorkerRuleResponse`
     * @throws ClassCastException if the instance is not `CloudflareWorkerRuleResponse`
     */
    public CloudflareWorkerRuleResponse getCloudflareWorkerRuleResponse() throws ClassCastException {
        return (CloudflareWorkerRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AzureFunctionRuleResponse`. If the actual instance is not `AzureFunctionRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureFunctionRuleResponse`
     * @throws ClassCastException if the instance is not `AzureFunctionRuleResponse`
     */
    public AzureFunctionRuleResponse getAzureFunctionRuleResponse() throws ClassCastException {
        return (AzureFunctionRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GoogleCloudFunctionRuleResponse`. If the actual instance is not `GoogleCloudFunctionRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleCloudFunctionRuleResponse`
     * @throws ClassCastException if the instance is not `GoogleCloudFunctionRuleResponse`
     */
    public GoogleCloudFunctionRuleResponse getGoogleCloudFunctionRuleResponse() throws ClassCastException {
        return (GoogleCloudFunctionRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsLambdaRuleResponse`. If the actual instance is not `AwsLambdaRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsLambdaRuleResponse`
     * @throws ClassCastException if the instance is not `AwsLambdaRuleResponse`
     */
    public AwsLambdaRuleResponse getAwsLambdaRuleResponse() throws ClassCastException {
        return (AwsLambdaRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsKinesisRuleResponse`. If the actual instance is not `AwsKinesisRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsKinesisRuleResponse`
     * @throws ClassCastException if the instance is not `AwsKinesisRuleResponse`
     */
    public AwsKinesisRuleResponse getAwsKinesisRuleResponse() throws ClassCastException {
        return (AwsKinesisRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AwsSqsRuleResponse`. If the actual instance is not `AwsSqsRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsSqsRuleResponse`
     * @throws ClassCastException if the instance is not `AwsSqsRuleResponse`
     */
    public AwsSqsRuleResponse getAwsSqsRuleResponse() throws ClassCastException {
        return (AwsSqsRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AmqpRuleResponse`. If the actual instance is not `AmqpRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmqpRuleResponse`
     * @throws ClassCastException if the instance is not `AmqpRuleResponse`
     */
    public AmqpRuleResponse getAmqpRuleResponse() throws ClassCastException {
        return (AmqpRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AmqpExternalRuleResponse`. If the actual instance is not `AmqpExternalRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmqpExternalRuleResponse`
     * @throws ClassCastException if the instance is not `AmqpExternalRuleResponse`
     */
    public AmqpExternalRuleResponse getAmqpExternalRuleResponse() throws ClassCastException {
        return (AmqpExternalRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `KafkaRuleResponse`. If the actual instance is not `KafkaRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KafkaRuleResponse`
     * @throws ClassCastException if the instance is not `KafkaRuleResponse`
     */
    public KafkaRuleResponse getKafkaRuleResponse() throws ClassCastException {
        return (KafkaRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PulsarRuleResponse`. If the actual instance is not `PulsarRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PulsarRuleResponse`
     * @throws ClassCastException if the instance is not `PulsarRuleResponse`
     */
    public PulsarRuleResponse getPulsarRuleResponse() throws ClassCastException {
        return (PulsarRuleResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UnsupportedRuleResponse`. If the actual instance is not `UnsupportedRuleResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UnsupportedRuleResponse`
     * @throws ClassCastException if the instance is not `UnsupportedRuleResponse`
     */
    public UnsupportedRuleResponse getUnsupportedRuleResponse() throws ClassCastException {
        return (UnsupportedRuleResponse)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RuleResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with HttpRuleResponse
        try {
            HttpRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HttpRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IftttRuleResponse
        try {
            IftttRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IftttRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZapierRuleResponse
        try {
            ZapierRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZapierRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudflareWorkerRuleResponse
        try {
            CloudflareWorkerRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudflareWorkerRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureFunctionRuleResponse
        try {
            AzureFunctionRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureFunctionRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleCloudFunctionRuleResponse
        try {
            GoogleCloudFunctionRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleCloudFunctionRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsLambdaRuleResponse
        try {
            AwsLambdaRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsLambdaRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsKinesisRuleResponse
        try {
            AwsKinesisRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsKinesisRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsSqsRuleResponse
        try {
            AwsSqsRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsSqsRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AmqpRuleResponse
        try {
            AmqpRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AmqpRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AmqpExternalRuleResponse
        try {
            AmqpExternalRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AmqpExternalRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with KafkaRuleResponse
        try {
            KafkaRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for KafkaRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PulsarRuleResponse
        try {
            PulsarRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PulsarRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UnsupportedRuleResponse
        try {
            UnsupportedRuleResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UnsupportedRuleResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RuleResponse with oneOf schemas: AmqpExternalRuleResponse, AmqpRuleResponse, AwsKinesisRuleResponse, AwsLambdaRuleResponse, AwsSqsRuleResponse, AzureFunctionRuleResponse, CloudflareWorkerRuleResponse, GoogleCloudFunctionRuleResponse, HttpRuleResponse, IftttRuleResponse, KafkaRuleResponse, PulsarRuleResponse, UnsupportedRuleResponse, ZapierRuleResponse. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RuleResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RuleResponse
     * @throws IOException if the JSON string is invalid with respect to RuleResponse
     */
    public static RuleResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RuleResponse.class);
    }

    /**
     * Convert an instance of RuleResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

