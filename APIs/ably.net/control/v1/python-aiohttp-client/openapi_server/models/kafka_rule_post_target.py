# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kafka_rule_patch_target_auth import KafkaRulePatchTargetAuth
from openapi_server import util


class KafkaRulePostTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth: KafkaRulePatchTargetAuth=None, brokers: List[str]=None, enveloped: bool=None, format: str=None, routing_key: str=None):
        """KafkaRulePostTarget - a model defined in OpenAPI

        :param auth: The auth of this KafkaRulePostTarget.
        :param brokers: The brokers of this KafkaRulePostTarget.
        :param enveloped: The enveloped of this KafkaRulePostTarget.
        :param format: The format of this KafkaRulePostTarget.
        :param routing_key: The routing_key of this KafkaRulePostTarget.
        """
        self.openapi_types = {
            'auth': KafkaRulePatchTargetAuth,
            'brokers': List[str],
            'enveloped': bool,
            'format': str,
            'routing_key': str
        }

        self.attribute_map = {
            'auth': 'auth',
            'brokers': 'brokers',
            'enveloped': 'enveloped',
            'format': 'format',
            'routing_key': 'routingKey'
        }

        self._auth = auth
        self._brokers = brokers
        self._enveloped = enveloped
        self._format = format
        self._routing_key = routing_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KafkaRulePostTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The kafka_rule_post_target of this KafkaRulePostTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth(self):
        """Gets the auth of this KafkaRulePostTarget.


        :return: The auth of this KafkaRulePostTarget.
        :rtype: KafkaRulePatchTargetAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this KafkaRulePostTarget.


        :param auth: The auth of this KafkaRulePostTarget.
        :type auth: KafkaRulePatchTargetAuth
        """
        if auth is None:
            raise ValueError("Invalid value for `auth`, must not be `None`")

        self._auth = auth

    @property
    def brokers(self):
        """Gets the brokers of this KafkaRulePostTarget.


        :return: The brokers of this KafkaRulePostTarget.
        :rtype: List[str]
        """
        return self._brokers

    @brokers.setter
    def brokers(self, brokers):
        """Sets the brokers of this KafkaRulePostTarget.


        :param brokers: The brokers of this KafkaRulePostTarget.
        :type brokers: List[str]
        """
        if brokers is None:
            raise ValueError("Invalid value for `brokers`, must not be `None`")

        self._brokers = brokers

    @property
    def enveloped(self):
        """Gets the enveloped of this KafkaRulePostTarget.


        :return: The enveloped of this KafkaRulePostTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this KafkaRulePostTarget.


        :param enveloped: The enveloped of this KafkaRulePostTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this KafkaRulePostTarget.


        :return: The format of this KafkaRulePostTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this KafkaRulePostTarget.


        :param format: The format of this KafkaRulePostTarget.
        :type format: str
        """

        self._format = format

    @property
    def routing_key(self):
        """Gets the routing_key of this KafkaRulePostTarget.


        :return: The routing_key of this KafkaRulePostTarget.
        :rtype: str
        """
        return self._routing_key

    @routing_key.setter
    def routing_key(self, routing_key):
        """Sets the routing_key of this KafkaRulePostTarget.


        :param routing_key: The routing_key of this KafkaRulePostTarget.
        :type routing_key: str
        """
        if routing_key is None:
            raise ValueError("Invalid value for `routing_key`, must not be `None`")

        self._routing_key = routing_key
