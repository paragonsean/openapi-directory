# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pulsar_token_auth import PulsarTokenAuth
from openapi_server import util


class PulsarRulePatchTargetAuthentication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_mode: str=None, token: str=None):
        """PulsarRulePatchTargetAuthentication - a model defined in OpenAPI

        :param authentication_mode: The authentication_mode of this PulsarRulePatchTargetAuthentication.
        :param token: The token of this PulsarRulePatchTargetAuthentication.
        """
        self.openapi_types = {
            'authentication_mode': str,
            'token': str
        }

        self.attribute_map = {
            'authentication_mode': 'authenticationMode',
            'token': 'token'
        }

        self._authentication_mode = authentication_mode
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PulsarRulePatchTargetAuthentication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pulsar_rule_patch_target_authentication of this PulsarRulePatchTargetAuthentication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_mode(self):
        """Gets the authentication_mode of this PulsarRulePatchTargetAuthentication.


        :return: The authentication_mode of this PulsarRulePatchTargetAuthentication.
        :rtype: str
        """
        return self._authentication_mode

    @authentication_mode.setter
    def authentication_mode(self, authentication_mode):
        """Sets the authentication_mode of this PulsarRulePatchTargetAuthentication.


        :param authentication_mode: The authentication_mode of this PulsarRulePatchTargetAuthentication.
        :type authentication_mode: str
        """
        allowed_values = ["token"]  # noqa: E501
        if authentication_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_mode` ({0}), must be one of {1}"
                .format(authentication_mode, allowed_values)
            )

        self._authentication_mode = authentication_mode

    @property
    def token(self):
        """Gets the token of this PulsarRulePatchTargetAuthentication.


        :return: The token of this PulsarRulePatchTargetAuthentication.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PulsarRulePatchTargetAuthentication.


        :param token: The token of this PulsarRulePatchTargetAuthentication.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
