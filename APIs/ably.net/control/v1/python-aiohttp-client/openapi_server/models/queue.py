# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Queue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_length: int=None, name: str=None, region: str=None, ttl: int=None):
        """Queue - a model defined in OpenAPI

        :param max_length: The max_length of this Queue.
        :param name: The name of this Queue.
        :param region: The region of this Queue.
        :param ttl: The ttl of this Queue.
        """
        self.openapi_types = {
            'max_length': int,
            'name': str,
            'region': str,
            'ttl': int
        }

        self.attribute_map = {
            'max_length': 'maxLength',
            'name': 'name',
            'region': 'region',
            'ttl': 'ttl'
        }

        self._max_length = max_length
        self._name = name
        self._region = region
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Queue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The queue of this Queue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_length(self):
        """Gets the max_length of this Queue.


        :return: The max_length of this Queue.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this Queue.


        :param max_length: The max_length of this Queue.
        :type max_length: int
        """
        if max_length is None:
            raise ValueError("Invalid value for `max_length`, must not be `None`")

        self._max_length = max_length

    @property
    def name(self):
        """Gets the name of this Queue.


        :return: The name of this Queue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Queue.


        :param name: The name of this Queue.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def region(self):
        """Gets the region of this Queue.


        :return: The region of this Queue.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Queue.


        :param region: The region of this Queue.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def ttl(self):
        """Gets the ttl of this Queue.


        :return: The ttl of this Queue.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Queue.


        :param ttl: The ttl of this Queue.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")

        self._ttl = ttl
