# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amqp_external_rule_patch_target_headers_inner import AmqpExternalRulePatchTargetHeadersInner
from openapi_server import util


class AzureFunctionRulePostTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_app_id: str=None, azure_function_name: str=None, enveloped: bool=None, format: str=None, headers: List[AmqpExternalRulePatchTargetHeadersInner]=None, signing_key_id: str=None):
        """AzureFunctionRulePostTarget - a model defined in OpenAPI

        :param azure_app_id: The azure_app_id of this AzureFunctionRulePostTarget.
        :param azure_function_name: The azure_function_name of this AzureFunctionRulePostTarget.
        :param enveloped: The enveloped of this AzureFunctionRulePostTarget.
        :param format: The format of this AzureFunctionRulePostTarget.
        :param headers: The headers of this AzureFunctionRulePostTarget.
        :param signing_key_id: The signing_key_id of this AzureFunctionRulePostTarget.
        """
        self.openapi_types = {
            'azure_app_id': str,
            'azure_function_name': str,
            'enveloped': bool,
            'format': str,
            'headers': List[AmqpExternalRulePatchTargetHeadersInner],
            'signing_key_id': str
        }

        self.attribute_map = {
            'azure_app_id': 'azureAppId',
            'azure_function_name': 'azureFunctionName',
            'enveloped': 'enveloped',
            'format': 'format',
            'headers': 'headers',
            'signing_key_id': 'signingKeyId'
        }

        self._azure_app_id = azure_app_id
        self._azure_function_name = azure_function_name
        self._enveloped = enveloped
        self._format = format
        self._headers = headers
        self._signing_key_id = signing_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureFunctionRulePostTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The azure_function_rule_post_target of this AzureFunctionRulePostTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_app_id(self):
        """Gets the azure_app_id of this AzureFunctionRulePostTarget.


        :return: The azure_app_id of this AzureFunctionRulePostTarget.
        :rtype: str
        """
        return self._azure_app_id

    @azure_app_id.setter
    def azure_app_id(self, azure_app_id):
        """Sets the azure_app_id of this AzureFunctionRulePostTarget.


        :param azure_app_id: The azure_app_id of this AzureFunctionRulePostTarget.
        :type azure_app_id: str
        """
        if azure_app_id is None:
            raise ValueError("Invalid value for `azure_app_id`, must not be `None`")

        self._azure_app_id = azure_app_id

    @property
    def azure_function_name(self):
        """Gets the azure_function_name of this AzureFunctionRulePostTarget.


        :return: The azure_function_name of this AzureFunctionRulePostTarget.
        :rtype: str
        """
        return self._azure_function_name

    @azure_function_name.setter
    def azure_function_name(self, azure_function_name):
        """Sets the azure_function_name of this AzureFunctionRulePostTarget.


        :param azure_function_name: The azure_function_name of this AzureFunctionRulePostTarget.
        :type azure_function_name: str
        """
        if azure_function_name is None:
            raise ValueError("Invalid value for `azure_function_name`, must not be `None`")

        self._azure_function_name = azure_function_name

    @property
    def enveloped(self):
        """Gets the enveloped of this AzureFunctionRulePostTarget.


        :return: The enveloped of this AzureFunctionRulePostTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this AzureFunctionRulePostTarget.


        :param enveloped: The enveloped of this AzureFunctionRulePostTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this AzureFunctionRulePostTarget.


        :return: The format of this AzureFunctionRulePostTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AzureFunctionRulePostTarget.


        :param format: The format of this AzureFunctionRulePostTarget.
        :type format: str
        """

        self._format = format

    @property
    def headers(self):
        """Gets the headers of this AzureFunctionRulePostTarget.


        :return: The headers of this AzureFunctionRulePostTarget.
        :rtype: List[AmqpExternalRulePatchTargetHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this AzureFunctionRulePostTarget.


        :param headers: The headers of this AzureFunctionRulePostTarget.
        :type headers: List[AmqpExternalRulePatchTargetHeadersInner]
        """

        self._headers = headers

    @property
    def signing_key_id(self):
        """Gets the signing_key_id of this AzureFunctionRulePostTarget.


        :return: The signing_key_id of this AzureFunctionRulePostTarget.
        :rtype: str
        """
        return self._signing_key_id

    @signing_key_id.setter
    def signing_key_id(self, signing_key_id):
        """Sets the signing_key_id of this AzureFunctionRulePostTarget.


        :param signing_key_id: The signing_key_id of this AzureFunctionRulePostTarget.
        :type signing_key_id: str
        """

        self._signing_key_id = signing_key_id
