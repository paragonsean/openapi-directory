# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amqp_external_rule_patch_target_headers_inner import AmqpExternalRulePatchTargetHeadersInner
from openapi_server import util


class HttpRulePostTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enveloped: bool=None, format: str=None, headers: List[AmqpExternalRulePatchTargetHeadersInner]=None, signing_key_id: str=None, url: str=None):
        """HttpRulePostTarget - a model defined in OpenAPI

        :param enveloped: The enveloped of this HttpRulePostTarget.
        :param format: The format of this HttpRulePostTarget.
        :param headers: The headers of this HttpRulePostTarget.
        :param signing_key_id: The signing_key_id of this HttpRulePostTarget.
        :param url: The url of this HttpRulePostTarget.
        """
        self.openapi_types = {
            'enveloped': bool,
            'format': str,
            'headers': List[AmqpExternalRulePatchTargetHeadersInner],
            'signing_key_id': str,
            'url': str
        }

        self.attribute_map = {
            'enveloped': 'enveloped',
            'format': 'format',
            'headers': 'headers',
            'signing_key_id': 'signingKeyId',
            'url': 'url'
        }

        self._enveloped = enveloped
        self._format = format
        self._headers = headers
        self._signing_key_id = signing_key_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRulePostTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The http_rule_post_target of this HttpRulePostTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enveloped(self):
        """Gets the enveloped of this HttpRulePostTarget.


        :return: The enveloped of this HttpRulePostTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this HttpRulePostTarget.


        :param enveloped: The enveloped of this HttpRulePostTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this HttpRulePostTarget.


        :return: The format of this HttpRulePostTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this HttpRulePostTarget.


        :param format: The format of this HttpRulePostTarget.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def headers(self):
        """Gets the headers of this HttpRulePostTarget.


        :return: The headers of this HttpRulePostTarget.
        :rtype: List[AmqpExternalRulePatchTargetHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRulePostTarget.


        :param headers: The headers of this HttpRulePostTarget.
        :type headers: List[AmqpExternalRulePatchTargetHeadersInner]
        """

        self._headers = headers

    @property
    def signing_key_id(self):
        """Gets the signing_key_id of this HttpRulePostTarget.


        :return: The signing_key_id of this HttpRulePostTarget.
        :rtype: str
        """
        return self._signing_key_id

    @signing_key_id.setter
    def signing_key_id(self, signing_key_id):
        """Sets the signing_key_id of this HttpRulePostTarget.


        :param signing_key_id: The signing_key_id of this HttpRulePostTarget.
        :type signing_key_id: str
        """

        self._signing_key_id = signing_key_id

    @property
    def url(self):
        """Gets the url of this HttpRulePostTarget.


        :return: The url of this HttpRulePostTarget.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HttpRulePostTarget.


        :param url: The url of this HttpRulePostTarget.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
