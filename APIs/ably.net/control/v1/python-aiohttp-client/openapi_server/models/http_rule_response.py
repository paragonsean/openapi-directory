# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_rule_post_target import HttpRulePostTarget
from openapi_server.models.rule_source import RuleSource
from openapi_server import util


class HttpRuleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: object=None, app_id: str=None, created: float=None, id: str=None, modified: float=None, request_mode: str=None, rule_type: str=None, source: RuleSource=None, status: str=None, target: HttpRulePostTarget=None, version: str=None):
        """HttpRuleResponse - a model defined in OpenAPI

        :param links: The links of this HttpRuleResponse.
        :param app_id: The app_id of this HttpRuleResponse.
        :param created: The created of this HttpRuleResponse.
        :param id: The id of this HttpRuleResponse.
        :param modified: The modified of this HttpRuleResponse.
        :param request_mode: The request_mode of this HttpRuleResponse.
        :param rule_type: The rule_type of this HttpRuleResponse.
        :param source: The source of this HttpRuleResponse.
        :param status: The status of this HttpRuleResponse.
        :param target: The target of this HttpRuleResponse.
        :param version: The version of this HttpRuleResponse.
        """
        self.openapi_types = {
            'links': object,
            'app_id': str,
            'created': float,
            'id': str,
            'modified': float,
            'request_mode': str,
            'rule_type': str,
            'source': RuleSource,
            'status': str,
            'target': HttpRulePostTarget,
            'version': str
        }

        self.attribute_map = {
            'links': '_links',
            'app_id': 'appId',
            'created': 'created',
            'id': 'id',
            'modified': 'modified',
            'request_mode': 'requestMode',
            'rule_type': 'ruleType',
            'source': 'source',
            'status': 'status',
            'target': 'target',
            'version': 'version'
        }

        self._links = links
        self._app_id = app_id
        self._created = created
        self._id = id
        self._modified = modified
        self._request_mode = request_mode
        self._rule_type = rule_type
        self._source = source
        self._status = status
        self._target = target
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRuleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The http_rule_response of this HttpRuleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this HttpRuleResponse.


        :return: The links of this HttpRuleResponse.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this HttpRuleResponse.


        :param links: The links of this HttpRuleResponse.
        :type links: object
        """

        self._links = links

    @property
    def app_id(self):
        """Gets the app_id of this HttpRuleResponse.


        :return: The app_id of this HttpRuleResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this HttpRuleResponse.


        :param app_id: The app_id of this HttpRuleResponse.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def created(self):
        """Gets the created of this HttpRuleResponse.


        :return: The created of this HttpRuleResponse.
        :rtype: float
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this HttpRuleResponse.


        :param created: The created of this HttpRuleResponse.
        :type created: float
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this HttpRuleResponse.


        :return: The id of this HttpRuleResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HttpRuleResponse.


        :param id: The id of this HttpRuleResponse.
        :type id: str
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this HttpRuleResponse.


        :return: The modified of this HttpRuleResponse.
        :rtype: float
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this HttpRuleResponse.


        :param modified: The modified of this HttpRuleResponse.
        :type modified: float
        """

        self._modified = modified

    @property
    def request_mode(self):
        """Gets the request_mode of this HttpRuleResponse.


        :return: The request_mode of this HttpRuleResponse.
        :rtype: str
        """
        return self._request_mode

    @request_mode.setter
    def request_mode(self, request_mode):
        """Sets the request_mode of this HttpRuleResponse.


        :param request_mode: The request_mode of this HttpRuleResponse.
        :type request_mode: str
        """
        if request_mode is None:
            raise ValueError("Invalid value for `request_mode`, must not be `None`")

        self._request_mode = request_mode

    @property
    def rule_type(self):
        """Gets the rule_type of this HttpRuleResponse.


        :return: The rule_type of this HttpRuleResponse.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this HttpRuleResponse.


        :param rule_type: The rule_type of this HttpRuleResponse.
        :type rule_type: str
        """
        allowed_values = ["http"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type

    @property
    def source(self):
        """Gets the source of this HttpRuleResponse.


        :return: The source of this HttpRuleResponse.
        :rtype: RuleSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this HttpRuleResponse.


        :param source: The source of this HttpRuleResponse.
        :type source: RuleSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def status(self):
        """Gets the status of this HttpRuleResponse.


        :return: The status of this HttpRuleResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HttpRuleResponse.


        :param status: The status of this HttpRuleResponse.
        :type status: str
        """

        self._status = status

    @property
    def target(self):
        """Gets the target of this HttpRuleResponse.


        :return: The target of this HttpRuleResponse.
        :rtype: HttpRulePostTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this HttpRuleResponse.


        :param target: The target of this HttpRuleResponse.
        :type target: HttpRulePostTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def version(self):
        """Gets the version of this HttpRuleResponse.


        :return: The version of this HttpRuleResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HttpRuleResponse.


        :param version: The version of this HttpRuleResponse.
        :type version: str
        """

        self._version = version
