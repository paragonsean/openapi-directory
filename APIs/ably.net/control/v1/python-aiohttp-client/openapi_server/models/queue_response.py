# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.queue_response_amqp import QueueResponseAmqp
from openapi_server.models.queue_response_messages import QueueResponseMessages
from openapi_server.models.queue_response_stats import QueueResponseStats
from openapi_server.models.queue_response_stomp import QueueResponseStomp
from openapi_server import util


class QueueResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amqp: QueueResponseAmqp=None, app_id: str=None, deadletter: bool=None, deadletter_id: str=None, id: str=None, max_length: int=None, messages: QueueResponseMessages=None, name: str=None, region: str=None, state: str=None, stats: QueueResponseStats=None, stomp: QueueResponseStomp=None, ttl: int=None):
        """QueueResponse - a model defined in OpenAPI

        :param amqp: The amqp of this QueueResponse.
        :param app_id: The app_id of this QueueResponse.
        :param deadletter: The deadletter of this QueueResponse.
        :param deadletter_id: The deadletter_id of this QueueResponse.
        :param id: The id of this QueueResponse.
        :param max_length: The max_length of this QueueResponse.
        :param messages: The messages of this QueueResponse.
        :param name: The name of this QueueResponse.
        :param region: The region of this QueueResponse.
        :param state: The state of this QueueResponse.
        :param stats: The stats of this QueueResponse.
        :param stomp: The stomp of this QueueResponse.
        :param ttl: The ttl of this QueueResponse.
        """
        self.openapi_types = {
            'amqp': QueueResponseAmqp,
            'app_id': str,
            'deadletter': bool,
            'deadletter_id': str,
            'id': str,
            'max_length': int,
            'messages': QueueResponseMessages,
            'name': str,
            'region': str,
            'state': str,
            'stats': QueueResponseStats,
            'stomp': QueueResponseStomp,
            'ttl': int
        }

        self.attribute_map = {
            'amqp': 'amqp',
            'app_id': 'appId',
            'deadletter': 'deadletter',
            'deadletter_id': 'deadletterId',
            'id': 'id',
            'max_length': 'maxLength',
            'messages': 'messages',
            'name': 'name',
            'region': 'region',
            'state': 'state',
            'stats': 'stats',
            'stomp': 'stomp',
            'ttl': 'ttl'
        }

        self._amqp = amqp
        self._app_id = app_id
        self._deadletter = deadletter
        self._deadletter_id = deadletter_id
        self._id = id
        self._max_length = max_length
        self._messages = messages
        self._name = name
        self._region = region
        self._state = state
        self._stats = stats
        self._stomp = stomp
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueueResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The queue_response of this QueueResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amqp(self):
        """Gets the amqp of this QueueResponse.


        :return: The amqp of this QueueResponse.
        :rtype: QueueResponseAmqp
        """
        return self._amqp

    @amqp.setter
    def amqp(self, amqp):
        """Sets the amqp of this QueueResponse.


        :param amqp: The amqp of this QueueResponse.
        :type amqp: QueueResponseAmqp
        """

        self._amqp = amqp

    @property
    def app_id(self):
        """Gets the app_id of this QueueResponse.


        :return: The app_id of this QueueResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this QueueResponse.


        :param app_id: The app_id of this QueueResponse.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def deadletter(self):
        """Gets the deadletter of this QueueResponse.


        :return: The deadletter of this QueueResponse.
        :rtype: bool
        """
        return self._deadletter

    @deadletter.setter
    def deadletter(self, deadletter):
        """Sets the deadletter of this QueueResponse.


        :param deadletter: The deadletter of this QueueResponse.
        :type deadletter: bool
        """

        self._deadletter = deadletter

    @property
    def deadletter_id(self):
        """Gets the deadletter_id of this QueueResponse.


        :return: The deadletter_id of this QueueResponse.
        :rtype: str
        """
        return self._deadletter_id

    @deadletter_id.setter
    def deadletter_id(self, deadletter_id):
        """Sets the deadletter_id of this QueueResponse.


        :param deadletter_id: The deadletter_id of this QueueResponse.
        :type deadletter_id: str
        """

        self._deadletter_id = deadletter_id

    @property
    def id(self):
        """Gets the id of this QueueResponse.


        :return: The id of this QueueResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueResponse.


        :param id: The id of this QueueResponse.
        :type id: str
        """

        self._id = id

    @property
    def max_length(self):
        """Gets the max_length of this QueueResponse.


        :return: The max_length of this QueueResponse.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this QueueResponse.


        :param max_length: The max_length of this QueueResponse.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def messages(self):
        """Gets the messages of this QueueResponse.


        :return: The messages of this QueueResponse.
        :rtype: QueueResponseMessages
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this QueueResponse.


        :param messages: The messages of this QueueResponse.
        :type messages: QueueResponseMessages
        """

        self._messages = messages

    @property
    def name(self):
        """Gets the name of this QueueResponse.


        :return: The name of this QueueResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueueResponse.


        :param name: The name of this QueueResponse.
        :type name: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this QueueResponse.


        :return: The region of this QueueResponse.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this QueueResponse.


        :param region: The region of this QueueResponse.
        :type region: str
        """

        self._region = region

    @property
    def state(self):
        """Gets the state of this QueueResponse.


        :return: The state of this QueueResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this QueueResponse.


        :param state: The state of this QueueResponse.
        :type state: str
        """

        self._state = state

    @property
    def stats(self):
        """Gets the stats of this QueueResponse.


        :return: The stats of this QueueResponse.
        :rtype: QueueResponseStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this QueueResponse.


        :param stats: The stats of this QueueResponse.
        :type stats: QueueResponseStats
        """

        self._stats = stats

    @property
    def stomp(self):
        """Gets the stomp of this QueueResponse.


        :return: The stomp of this QueueResponse.
        :rtype: QueueResponseStomp
        """
        return self._stomp

    @stomp.setter
    def stomp(self, stomp):
        """Sets the stomp of this QueueResponse.


        :param stomp: The stomp of this QueueResponse.
        :type stomp: QueueResponseStomp
        """

        self._stomp = stomp

    @property
    def ttl(self):
        """Gets the ttl of this QueueResponse.


        :return: The ttl of this QueueResponse.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this QueueResponse.


        :param ttl: The ttl of this QueueResponse.
        :type ttl: int
        """

        self._ttl = ttl
