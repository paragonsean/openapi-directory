# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws_kinesis_rule_response_target_authentication import AwsKinesisRuleResponseTargetAuthentication
from openapi_server import util


class AwsLambdaRuleResponseTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: AwsKinesisRuleResponseTargetAuthentication=None, enveloped: bool=None, format: str=None, function_name: str=None, region: str=None):
        """AwsLambdaRuleResponseTarget - a model defined in OpenAPI

        :param authentication: The authentication of this AwsLambdaRuleResponseTarget.
        :param enveloped: The enveloped of this AwsLambdaRuleResponseTarget.
        :param format: The format of this AwsLambdaRuleResponseTarget.
        :param function_name: The function_name of this AwsLambdaRuleResponseTarget.
        :param region: The region of this AwsLambdaRuleResponseTarget.
        """
        self.openapi_types = {
            'authentication': AwsKinesisRuleResponseTargetAuthentication,
            'enveloped': bool,
            'format': str,
            'function_name': str,
            'region': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'enveloped': 'enveloped',
            'format': 'format',
            'function_name': 'functionName',
            'region': 'region'
        }

        self._authentication = authentication
        self._enveloped = enveloped
        self._format = format
        self._function_name = function_name
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsLambdaRuleResponseTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aws_lambda_rule_response_target of this AwsLambdaRuleResponseTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this AwsLambdaRuleResponseTarget.


        :return: The authentication of this AwsLambdaRuleResponseTarget.
        :rtype: AwsKinesisRuleResponseTargetAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this AwsLambdaRuleResponseTarget.


        :param authentication: The authentication of this AwsLambdaRuleResponseTarget.
        :type authentication: AwsKinesisRuleResponseTargetAuthentication
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")

        self._authentication = authentication

    @property
    def enveloped(self):
        """Gets the enveloped of this AwsLambdaRuleResponseTarget.


        :return: The enveloped of this AwsLambdaRuleResponseTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this AwsLambdaRuleResponseTarget.


        :param enveloped: The enveloped of this AwsLambdaRuleResponseTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this AwsLambdaRuleResponseTarget.


        :return: The format of this AwsLambdaRuleResponseTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AwsLambdaRuleResponseTarget.


        :param format: The format of this AwsLambdaRuleResponseTarget.
        :type format: str
        """

        self._format = format

    @property
    def function_name(self):
        """Gets the function_name of this AwsLambdaRuleResponseTarget.


        :return: The function_name of this AwsLambdaRuleResponseTarget.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this AwsLambdaRuleResponseTarget.


        :param function_name: The function_name of this AwsLambdaRuleResponseTarget.
        :type function_name: str
        """
        if function_name is None:
            raise ValueError("Invalid value for `function_name`, must not be `None`")

        self._function_name = function_name

    @property
    def region(self):
        """Gets the region of this AwsLambdaRuleResponseTarget.


        :return: The region of this AwsLambdaRuleResponseTarget.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AwsLambdaRuleResponseTarget.


        :param region: The region of this AwsLambdaRuleResponseTarget.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region
