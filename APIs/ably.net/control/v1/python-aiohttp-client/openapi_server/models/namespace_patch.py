# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespacePatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticated: bool=None, expose_timeserial: bool=None, persist_last: bool=None, persisted: bool=None, push_enabled: bool=None, tls_only: bool=None):
        """NamespacePatch - a model defined in OpenAPI

        :param authenticated: The authenticated of this NamespacePatch.
        :param expose_timeserial: The expose_timeserial of this NamespacePatch.
        :param persist_last: The persist_last of this NamespacePatch.
        :param persisted: The persisted of this NamespacePatch.
        :param push_enabled: The push_enabled of this NamespacePatch.
        :param tls_only: The tls_only of this NamespacePatch.
        """
        self.openapi_types = {
            'authenticated': bool,
            'expose_timeserial': bool,
            'persist_last': bool,
            'persisted': bool,
            'push_enabled': bool,
            'tls_only': bool
        }

        self.attribute_map = {
            'authenticated': 'authenticated',
            'expose_timeserial': 'exposeTimeserial',
            'persist_last': 'persistLast',
            'persisted': 'persisted',
            'push_enabled': 'pushEnabled',
            'tls_only': 'tlsOnly'
        }

        self._authenticated = authenticated
        self._expose_timeserial = expose_timeserial
        self._persist_last = persist_last
        self._persisted = persisted
        self._push_enabled = push_enabled
        self._tls_only = tls_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespacePatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The namespace_patch of this NamespacePatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticated(self):
        """Gets the authenticated of this NamespacePatch.


        :return: The authenticated of this NamespacePatch.
        :rtype: bool
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this NamespacePatch.


        :param authenticated: The authenticated of this NamespacePatch.
        :type authenticated: bool
        """

        self._authenticated = authenticated

    @property
    def expose_timeserial(self):
        """Gets the expose_timeserial of this NamespacePatch.


        :return: The expose_timeserial of this NamespacePatch.
        :rtype: bool
        """
        return self._expose_timeserial

    @expose_timeserial.setter
    def expose_timeserial(self, expose_timeserial):
        """Sets the expose_timeserial of this NamespacePatch.


        :param expose_timeserial: The expose_timeserial of this NamespacePatch.
        :type expose_timeserial: bool
        """

        self._expose_timeserial = expose_timeserial

    @property
    def persist_last(self):
        """Gets the persist_last of this NamespacePatch.


        :return: The persist_last of this NamespacePatch.
        :rtype: bool
        """
        return self._persist_last

    @persist_last.setter
    def persist_last(self, persist_last):
        """Sets the persist_last of this NamespacePatch.


        :param persist_last: The persist_last of this NamespacePatch.
        :type persist_last: bool
        """

        self._persist_last = persist_last

    @property
    def persisted(self):
        """Gets the persisted of this NamespacePatch.


        :return: The persisted of this NamespacePatch.
        :rtype: bool
        """
        return self._persisted

    @persisted.setter
    def persisted(self, persisted):
        """Sets the persisted of this NamespacePatch.


        :param persisted: The persisted of this NamespacePatch.
        :type persisted: bool
        """

        self._persisted = persisted

    @property
    def push_enabled(self):
        """Gets the push_enabled of this NamespacePatch.


        :return: The push_enabled of this NamespacePatch.
        :rtype: bool
        """
        return self._push_enabled

    @push_enabled.setter
    def push_enabled(self, push_enabled):
        """Sets the push_enabled of this NamespacePatch.


        :param push_enabled: The push_enabled of this NamespacePatch.
        :type push_enabled: bool
        """

        self._push_enabled = push_enabled

    @property
    def tls_only(self):
        """Gets the tls_only of this NamespacePatch.


        :return: The tls_only of this NamespacePatch.
        :rtype: bool
        """
        return self._tls_only

    @tls_only.setter
    def tls_only(self, tls_only):
        """Sets the tls_only of this NamespacePatch.


        :param tls_only: The tls_only of this NamespacePatch.
        :type tls_only: bool
        """

        self._tls_only = tls_only
