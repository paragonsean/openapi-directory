# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws_kinesis_rule_patch_target_authentication import AwsKinesisRulePatchTargetAuthentication
from openapi_server import util


class AwsKinesisRulePostTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: AwsKinesisRulePatchTargetAuthentication=None, enveloped: bool=None, format: str=None, partition_key: str=None, region: str=None, stream_name: str=None):
        """AwsKinesisRulePostTarget - a model defined in OpenAPI

        :param authentication: The authentication of this AwsKinesisRulePostTarget.
        :param enveloped: The enveloped of this AwsKinesisRulePostTarget.
        :param format: The format of this AwsKinesisRulePostTarget.
        :param partition_key: The partition_key of this AwsKinesisRulePostTarget.
        :param region: The region of this AwsKinesisRulePostTarget.
        :param stream_name: The stream_name of this AwsKinesisRulePostTarget.
        """
        self.openapi_types = {
            'authentication': AwsKinesisRulePatchTargetAuthentication,
            'enveloped': bool,
            'format': str,
            'partition_key': str,
            'region': str,
            'stream_name': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'enveloped': 'enveloped',
            'format': 'format',
            'partition_key': 'partitionKey',
            'region': 'region',
            'stream_name': 'streamName'
        }

        self._authentication = authentication
        self._enveloped = enveloped
        self._format = format
        self._partition_key = partition_key
        self._region = region
        self._stream_name = stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsKinesisRulePostTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aws_kinesis_rule_post_target of this AwsKinesisRulePostTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this AwsKinesisRulePostTarget.


        :return: The authentication of this AwsKinesisRulePostTarget.
        :rtype: AwsKinesisRulePatchTargetAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this AwsKinesisRulePostTarget.


        :param authentication: The authentication of this AwsKinesisRulePostTarget.
        :type authentication: AwsKinesisRulePatchTargetAuthentication
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")

        self._authentication = authentication

    @property
    def enveloped(self):
        """Gets the enveloped of this AwsKinesisRulePostTarget.


        :return: The enveloped of this AwsKinesisRulePostTarget.
        :rtype: bool
        """
        return self._enveloped

    @enveloped.setter
    def enveloped(self, enveloped):
        """Sets the enveloped of this AwsKinesisRulePostTarget.


        :param enveloped: The enveloped of this AwsKinesisRulePostTarget.
        :type enveloped: bool
        """

        self._enveloped = enveloped

    @property
    def format(self):
        """Gets the format of this AwsKinesisRulePostTarget.


        :return: The format of this AwsKinesisRulePostTarget.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AwsKinesisRulePostTarget.


        :param format: The format of this AwsKinesisRulePostTarget.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def partition_key(self):
        """Gets the partition_key of this AwsKinesisRulePostTarget.


        :return: The partition_key of this AwsKinesisRulePostTarget.
        :rtype: str
        """
        return self._partition_key

    @partition_key.setter
    def partition_key(self, partition_key):
        """Sets the partition_key of this AwsKinesisRulePostTarget.


        :param partition_key: The partition_key of this AwsKinesisRulePostTarget.
        :type partition_key: str
        """
        if partition_key is None:
            raise ValueError("Invalid value for `partition_key`, must not be `None`")

        self._partition_key = partition_key

    @property
    def region(self):
        """Gets the region of this AwsKinesisRulePostTarget.


        :return: The region of this AwsKinesisRulePostTarget.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AwsKinesisRulePostTarget.


        :param region: The region of this AwsKinesisRulePostTarget.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def stream_name(self):
        """Gets the stream_name of this AwsKinesisRulePostTarget.


        :return: The stream_name of this AwsKinesisRulePostTarget.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this AwsKinesisRulePostTarget.


        :param stream_name: The stream_name of this AwsKinesisRulePostTarget.
        :type stream_name: str
        """
        if stream_name is None:
            raise ValueError("Invalid value for `stream_name`, must not be `None`")

        self._stream_name = stream_name
