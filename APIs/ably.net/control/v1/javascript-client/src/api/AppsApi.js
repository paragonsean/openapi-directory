/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppPatch from '../model/AppPatch';
import AppPost from '../model/AppPost';
import AppResponse from '../model/AppResponse';
import Error from '../model/Error';

/**
* Apps service.
* @module api/AppsApi
* @version v1
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsAccountIdAppsGet operation.
     * @callback module:api/AppsApi~accountsAccountIdAppsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists account apps
     * @param {String} accountId 
     * @param {module:api/AppsApi~accountsAccountIdAppsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppResponse>}
     */
    accountsAccountIdAppsGet(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsAccountIdAppsGet");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppResponse];
      return this.apiClient.callApi(
        '/accounts/{account_id}/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsAccountIdAppsPost operation.
     * @callback module:api/AppsApi~accountsAccountIdAppsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an app
     * @param {String} accountId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AppPost} [appPost] 
     * @param {module:api/AppsApi~accountsAccountIdAppsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    accountsAccountIdAppsPost(accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appPost'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountsAccountIdAppsPost");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/accounts/{account_id}/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsIdDelete operation.
     * @callback module:api/AppsApi~appsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an app
     * @param {String} id 
     * @param {module:api/AppsApi~appsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsIdPatch operation.
     * @callback module:api/AppsApi~appsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an app
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/AppPatch} [appPatch] 
     * @param {module:api/AppsApi~appsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    appsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['appPatch'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/apps/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsIdPkcs12Post operation.
     * @callback module:api/AppsApi~appsIdPkcs12PostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates app's APNS info from a .p12 file
     * @param {String} id 
     * @param {File} p12File 
     * @param {String} p12Pass 
     * @param {module:api/AppsApi~appsIdPkcs12PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    appsIdPkcs12Post(id, p12File, p12Pass, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling appsIdPkcs12Post");
      }
      // verify the required parameter 'p12File' is set
      if (p12File === undefined || p12File === null) {
        throw new Error("Missing the required parameter 'p12File' when calling appsIdPkcs12Post");
      }
      // verify the required parameter 'p12Pass' is set
      if (p12Pass === undefined || p12Pass === null) {
        throw new Error("Missing the required parameter 'p12Pass' when calling appsIdPkcs12Post");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'p12File': p12File,
        'p12Pass': p12Pass
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/apps/{id}/pkcs12', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
