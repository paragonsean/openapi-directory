/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import RulePatch from '../model/RulePatch';
import RulePost from '../model/RulePost';
import RuleResponse from '../model/RuleResponse';

/**
* Rules service.
* @module api/RulesApi
* @version v1
*/
export default class RulesApi {

    /**
    * Constructs a new RulesApi. 
    * @alias module:api/RulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAppIdRulesGet operation.
     * @callback module:api/RulesApi~appsAppIdRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Integration rules
     * @param {String} appId 
     * @param {module:api/RulesApi~appsAppIdRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleResponse>}
     */
    appsAppIdRulesGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdRulesGet");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleResponse];
      return this.apiClient.callApi(
        '/apps/{app_id}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdRulesPost operation.
     * @callback module:api/RulesApi~appsAppIdRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Integration Rule
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RulePost} [rulePost] 
     * @param {module:api/RulesApi~appsAppIdRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleResponse}
     */
    appsAppIdRulesPost(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rulePost'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdRulesPost");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdRulesRuleIdDelete operation.
     * @callback module:api/RulesApi~appsAppIdRulesRuleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Integration Rule
     * @param {String} appId 
     * @param {String} ruleId 
     * @param {module:api/RulesApi~appsAppIdRulesRuleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdRulesRuleIdDelete(appId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdRulesRuleIdDelete");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling appsAppIdRulesRuleIdDelete");
      }

      let pathParams = {
        'app_id': appId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{app_id}/rules/{rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdRulesRuleIdGet operation.
     * @callback module:api/RulesApi~appsAppIdRulesRuleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Integration Rule by ID
     * @param {String} appId 
     * @param {String} ruleId 
     * @param {module:api/RulesApi~appsAppIdRulesRuleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleResponse}
     */
    appsAppIdRulesRuleIdGet(appId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdRulesRuleIdGet");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling appsAppIdRulesRuleIdGet");
      }

      let pathParams = {
        'app_id': appId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/rules/{rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdRulesRuleIdPatch operation.
     * @callback module:api/RulesApi~appsAppIdRulesRuleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Integration Rule
     * @param {String} appId 
     * @param {String} ruleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RulePatch} [rulePatch] 
     * @param {module:api/RulesApi~appsAppIdRulesRuleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleResponse}
     */
    appsAppIdRulesRuleIdPatch(appId, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['rulePatch'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdRulesRuleIdPatch");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling appsAppIdRulesRuleIdPatch");
      }

      let pathParams = {
        'app_id': appId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/rules/{rule_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
