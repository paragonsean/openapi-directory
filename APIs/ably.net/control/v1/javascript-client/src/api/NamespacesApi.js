/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import NamespacePatch from '../model/NamespacePatch';
import NamespacePost from '../model/NamespacePost';
import NamespaceResponse from '../model/NamespaceResponse';

/**
* Namespaces service.
* @module api/NamespacesApi
* @version v1
*/
export default class NamespacesApi {

    /**
    * Constructs a new NamespacesApi. 
    * @alias module:api/NamespacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAppIdNamespacesGet operation.
     * @callback module:api/NamespacesApi~appsAppIdNamespacesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NamespaceResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists namespaces
     * @param {String} appId 
     * @param {module:api/NamespacesApi~appsAppIdNamespacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NamespaceResponse>}
     */
    appsAppIdNamespacesGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdNamespacesGet");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NamespaceResponse];
      return this.apiClient.callApi(
        '/apps/{app_id}/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdNamespacesNamespaceIdDelete operation.
     * @callback module:api/NamespacesApi~appsAppIdNamespacesNamespaceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a namespace
     * @param {String} appId 
     * @param {String} namespaceId 
     * @param {module:api/NamespacesApi~appsAppIdNamespacesNamespaceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdNamespacesNamespaceIdDelete(appId, namespaceId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdNamespacesNamespaceIdDelete");
      }
      // verify the required parameter 'namespaceId' is set
      if (namespaceId === undefined || namespaceId === null) {
        throw new Error("Missing the required parameter 'namespaceId' when calling appsAppIdNamespacesNamespaceIdDelete");
      }

      let pathParams = {
        'app_id': appId,
        'namespace_id': namespaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{app_id}/namespaces/{namespace_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdNamespacesNamespaceIdPatch operation.
     * @callback module:api/NamespacesApi~appsAppIdNamespacesNamespaceIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a namespace
     * @param {String} appId 
     * @param {String} namespaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/NamespacePatch} [namespacePatch] 
     * @param {module:api/NamespacesApi~appsAppIdNamespacesNamespaceIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamespaceResponse}
     */
    appsAppIdNamespacesNamespaceIdPatch(appId, namespaceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['namespacePatch'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdNamespacesNamespaceIdPatch");
      }
      // verify the required parameter 'namespaceId' is set
      if (namespaceId === undefined || namespaceId === null) {
        throw new Error("Missing the required parameter 'namespaceId' when calling appsAppIdNamespacesNamespaceIdPatch");
      }

      let pathParams = {
        'app_id': appId,
        'namespace_id': namespaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NamespaceResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/namespaces/{namespace_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdNamespacesPost operation.
     * @callback module:api/NamespacesApi~appsAppIdNamespacesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a namespace
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:model/NamespacePost} [namespacePost] 
     * @param {module:api/NamespacesApi~appsAppIdNamespacesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamespaceResponse}
     */
    appsAppIdNamespacesPost(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts['namespacePost'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdNamespacesPost");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NamespaceResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/namespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
