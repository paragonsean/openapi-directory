/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import KeyPatch from '../model/KeyPatch';
import KeyPost from '../model/KeyPost';
import KeyResponse from '../model/KeyResponse';

/**
* Keys service.
* @module api/KeysApi
* @version v1
*/
export default class KeysApi {

    /**
    * Constructs a new KeysApi. 
    * @alias module:api/KeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAppIdKeysGet operation.
     * @callback module:api/KeysApi~appsAppIdKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KeyResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists app keys
     * @param {String} appId 
     * @param {module:api/KeysApi~appsAppIdKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KeyResponse>}
     */
    appsAppIdKeysGet(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdKeysGet");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeyResponse];
      return this.apiClient.callApi(
        '/apps/{app_id}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdKeysKeyIdPatch operation.
     * @callback module:api/KeysApi~appsAppIdKeysKeyIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a key
     * @param {String} appId 
     * @param {String} keyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyPatch} [keyPatch] 
     * @param {module:api/KeysApi~appsAppIdKeysKeyIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyResponse}
     */
    appsAppIdKeysKeyIdPatch(appId, keyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['keyPatch'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdKeysKeyIdPatch");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling appsAppIdKeysKeyIdPatch");
      }

      let pathParams = {
        'app_id': appId,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/keys/{key_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdKeysKeyIdRevokePost operation.
     * @callback module:api/KeysApi~appsAppIdKeysKeyIdRevokePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes a key
     * @param {String} appId 
     * @param {String} keyId 
     * @param {module:api/KeysApi~appsAppIdKeysKeyIdRevokePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAppIdKeysKeyIdRevokePost(appId, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdKeysKeyIdRevokePost");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling appsAppIdKeysKeyIdRevokePost");
      }

      let pathParams = {
        'app_id': appId,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{app_id}/keys/{key_id}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAppIdKeysPost operation.
     * @callback module:api/KeysApi~appsAppIdKeysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a key
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyPost} [keyPost] 
     * @param {module:api/KeysApi~appsAppIdKeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyResponse}
     */
    appsAppIdKeysPost(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts['keyPost'];
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsAppIdKeysPost");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
