/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Requests_PermissionPatchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Requests_PermissionPatchRequest::OAIApi_Core_Requests_PermissionPatchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Requests_PermissionPatchRequest::OAIApi_Core_Requests_PermissionPatchRequest() {
    this->initializeModel();
}

OAIApi_Core_Requests_PermissionPatchRequest::~OAIApi_Core_Requests_PermissionPatchRequest() {}

void OAIApi_Core_Requests_PermissionPatchRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;
}

void OAIApi_Core_Requests_PermissionPatchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Requests_PermissionPatchRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("Verb")]);
    m_verb_isSet = !json[QString("Verb")].isNull() && m_verb_isValid;
}

QString OAIApi_Core_Requests_PermissionPatchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Requests_PermissionPatchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_verb_isSet) {
        obj.insert(QString("Verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    return obj;
}

QString OAIApi_Core_Requests_PermissionPatchRequest::getAction() const {
    return m_action;
}
void OAIApi_Core_Requests_PermissionPatchRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::is_action_Valid() const{
    return m_action_isValid;
}

qint64 OAIApi_Core_Requests_PermissionPatchRequest::getId() const {
    return m_id;
}
void OAIApi_Core_Requests_PermissionPatchRequest::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApi_Core_Requests_PermissionPatchRequest::getVerb() const {
    return m_verb;
}
void OAIApi_Core_Requests_PermissionPatchRequest::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::is_verb_Valid() const{
    return m_verb_isValid;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Requests_PermissionPatchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
