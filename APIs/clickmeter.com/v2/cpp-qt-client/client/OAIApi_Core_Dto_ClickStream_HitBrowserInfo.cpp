/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_ClickStream_HitBrowserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_ClickStream_HitBrowserInfo::OAIApi_Core_Dto_ClickStream_HitBrowserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_ClickStream_HitBrowserInfo::OAIApi_Core_Dto_ClickStream_HitBrowserInfo() {
    this->initializeModel();
}

OAIApi_Core_Dto_ClickStream_HitBrowserInfo::~OAIApi_Core_Dto_ClickStream_HitBrowserInfo() {}

void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::initializeModel() {

    m_browser_type_isSet = false;
    m_browser_type_isValid = false;

    m_family_id_isSet = false;
    m_family_id_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::fromJsonObject(QJsonObject json) {

    m_browser_type_isValid = ::OpenAPI::fromJsonValue(m_browser_type, json[QString("browserType")]);
    m_browser_type_isSet = !json[QString("browserType")].isNull() && m_browser_type_isValid;

    m_family_id_isValid = ::OpenAPI::fromJsonValue(m_family_id, json[QString("familyId")]);
    m_family_id_isSet = !json[QString("familyId")].isNull() && m_family_id_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("familyName")]);
    m_family_name_isSet = !json[QString("familyName")].isNull() && m_family_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitBrowserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_ClickStream_HitBrowserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_type_isSet) {
        obj.insert(QString("browserType"), ::OpenAPI::toJsonValue(m_browser_type));
    }
    if (m_family_id_isSet) {
        obj.insert(QString("familyId"), ::OpenAPI::toJsonValue(m_family_id));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("familyName"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIApi_Core_Dto_ClickStream_HitBrowserInfo::getBrowserType() const {
    return m_browser_type;
}
void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::setBrowserType(const QString &browser_type) {
    m_browser_type = browser_type;
    m_browser_type_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_browser_type_Set() const{
    return m_browser_type_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_browser_type_Valid() const{
    return m_browser_type_isValid;
}

qint64 OAIApi_Core_Dto_ClickStream_HitBrowserInfo::getFamilyId() const {
    return m_family_id;
}
void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::setFamilyId(const qint64 &family_id) {
    m_family_id = family_id;
    m_family_id_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_family_id_Set() const{
    return m_family_id_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_family_id_Valid() const{
    return m_family_id_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitBrowserInfo::getFamilyName() const {
    return m_family_name;
}
void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_family_name_Valid() const{
    return m_family_name_isValid;
}

qint64 OAIApi_Core_Dto_ClickStream_HitBrowserInfo::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitBrowserInfo::getName() const {
    return m_name;
}
void OAIApi_Core_Dto_ClickStream_HitBrowserInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_ClickStream_HitBrowserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
