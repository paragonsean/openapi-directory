/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Aggregated_AggregatedResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Aggregated_AggregatedResult::OAIApi_Core_Dto_Aggregated_AggregatedResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Aggregated_AggregatedResult::OAIApi_Core_Dto_Aggregated_AggregatedResult() {
    this->initializeModel();
}

OAIApi_Core_Dto_Aggregated_AggregatedResult::~OAIApi_Core_Dto_Aggregated_AggregatedResult() {}

void OAIApi_Core_Dto_Aggregated_AggregatedResult::initializeModel() {

    m_activity_day_isSet = false;
    m_activity_day_isValid = false;

    m_commissions_cost_isSet = false;
    m_commissions_cost_isValid = false;

    m_conversions_cost_isSet = false;
    m_conversions_cost_isValid = false;

    m_conversions_value_isSet = false;
    m_conversions_value_isValid = false;

    m_converted_clicks_isSet = false;
    m_converted_clicks_isValid = false;

    m_entity_data_isSet = false;
    m_entity_data_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_from_day_isSet = false;
    m_from_day_isValid = false;

    m_hourly_break_down_isSet = false;
    m_hourly_break_down_isValid = false;

    m_last_hit_date_isSet = false;
    m_last_hit_date_isValid = false;

    m_spider_hits_count_isSet = false;
    m_spider_hits_count_isValid = false;

    m_to_day_isSet = false;
    m_to_day_isValid = false;

    m_total_clicks_isSet = false;
    m_total_clicks_isValid = false;

    m_total_views_isSet = false;
    m_total_views_isValid = false;

    m_unique_clicks_isSet = false;
    m_unique_clicks_isValid = false;

    m_unique_conversions_isSet = false;
    m_unique_conversions_isValid = false;

    m_unique_views_isSet = false;
    m_unique_views_isValid = false;
}

void OAIApi_Core_Dto_Aggregated_AggregatedResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Aggregated_AggregatedResult::fromJsonObject(QJsonObject json) {

    m_activity_day_isValid = ::OpenAPI::fromJsonValue(m_activity_day, json[QString("activityDay")]);
    m_activity_day_isSet = !json[QString("activityDay")].isNull() && m_activity_day_isValid;

    m_commissions_cost_isValid = ::OpenAPI::fromJsonValue(m_commissions_cost, json[QString("commissionsCost")]);
    m_commissions_cost_isSet = !json[QString("commissionsCost")].isNull() && m_commissions_cost_isValid;

    m_conversions_cost_isValid = ::OpenAPI::fromJsonValue(m_conversions_cost, json[QString("conversionsCost")]);
    m_conversions_cost_isSet = !json[QString("conversionsCost")].isNull() && m_conversions_cost_isValid;

    m_conversions_value_isValid = ::OpenAPI::fromJsonValue(m_conversions_value, json[QString("conversionsValue")]);
    m_conversions_value_isSet = !json[QString("conversionsValue")].isNull() && m_conversions_value_isValid;

    m_converted_clicks_isValid = ::OpenAPI::fromJsonValue(m_converted_clicks, json[QString("convertedClicks")]);
    m_converted_clicks_isSet = !json[QString("convertedClicks")].isNull() && m_converted_clicks_isValid;

    m_entity_data_isValid = ::OpenAPI::fromJsonValue(m_entity_data, json[QString("entityData")]);
    m_entity_data_isSet = !json[QString("entityData")].isNull() && m_entity_data_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_from_day_isValid = ::OpenAPI::fromJsonValue(m_from_day, json[QString("fromDay")]);
    m_from_day_isSet = !json[QString("fromDay")].isNull() && m_from_day_isValid;

    m_hourly_break_down_isValid = ::OpenAPI::fromJsonValue(m_hourly_break_down, json[QString("hourlyBreakDown")]);
    m_hourly_break_down_isSet = !json[QString("hourlyBreakDown")].isNull() && m_hourly_break_down_isValid;

    m_last_hit_date_isValid = ::OpenAPI::fromJsonValue(m_last_hit_date, json[QString("lastHitDate")]);
    m_last_hit_date_isSet = !json[QString("lastHitDate")].isNull() && m_last_hit_date_isValid;

    m_spider_hits_count_isValid = ::OpenAPI::fromJsonValue(m_spider_hits_count, json[QString("spiderHitsCount")]);
    m_spider_hits_count_isSet = !json[QString("spiderHitsCount")].isNull() && m_spider_hits_count_isValid;

    m_to_day_isValid = ::OpenAPI::fromJsonValue(m_to_day, json[QString("toDay")]);
    m_to_day_isSet = !json[QString("toDay")].isNull() && m_to_day_isValid;

    m_total_clicks_isValid = ::OpenAPI::fromJsonValue(m_total_clicks, json[QString("totalClicks")]);
    m_total_clicks_isSet = !json[QString("totalClicks")].isNull() && m_total_clicks_isValid;

    m_total_views_isValid = ::OpenAPI::fromJsonValue(m_total_views, json[QString("totalViews")]);
    m_total_views_isSet = !json[QString("totalViews")].isNull() && m_total_views_isValid;

    m_unique_clicks_isValid = ::OpenAPI::fromJsonValue(m_unique_clicks, json[QString("uniqueClicks")]);
    m_unique_clicks_isSet = !json[QString("uniqueClicks")].isNull() && m_unique_clicks_isValid;

    m_unique_conversions_isValid = ::OpenAPI::fromJsonValue(m_unique_conversions, json[QString("uniqueConversions")]);
    m_unique_conversions_isSet = !json[QString("uniqueConversions")].isNull() && m_unique_conversions_isValid;

    m_unique_views_isValid = ::OpenAPI::fromJsonValue(m_unique_views, json[QString("uniqueViews")]);
    m_unique_views_isSet = !json[QString("uniqueViews")].isNull() && m_unique_views_isValid;
}

QString OAIApi_Core_Dto_Aggregated_AggregatedResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Aggregated_AggregatedResult::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_day_isSet) {
        obj.insert(QString("activityDay"), ::OpenAPI::toJsonValue(m_activity_day));
    }
    if (m_commissions_cost_isSet) {
        obj.insert(QString("commissionsCost"), ::OpenAPI::toJsonValue(m_commissions_cost));
    }
    if (m_conversions_cost_isSet) {
        obj.insert(QString("conversionsCost"), ::OpenAPI::toJsonValue(m_conversions_cost));
    }
    if (m_conversions_value_isSet) {
        obj.insert(QString("conversionsValue"), ::OpenAPI::toJsonValue(m_conversions_value));
    }
    if (m_converted_clicks_isSet) {
        obj.insert(QString("convertedClicks"), ::OpenAPI::toJsonValue(m_converted_clicks));
    }
    if (m_entity_data_isSet) {
        obj.insert(QString("entityData"), ::OpenAPI::toJsonValue(m_entity_data));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_from_day_isSet) {
        obj.insert(QString("fromDay"), ::OpenAPI::toJsonValue(m_from_day));
    }
    if (m_hourly_break_down.size() > 0) {
        obj.insert(QString("hourlyBreakDown"), ::OpenAPI::toJsonValue(m_hourly_break_down));
    }
    if (m_last_hit_date_isSet) {
        obj.insert(QString("lastHitDate"), ::OpenAPI::toJsonValue(m_last_hit_date));
    }
    if (m_spider_hits_count_isSet) {
        obj.insert(QString("spiderHitsCount"), ::OpenAPI::toJsonValue(m_spider_hits_count));
    }
    if (m_to_day_isSet) {
        obj.insert(QString("toDay"), ::OpenAPI::toJsonValue(m_to_day));
    }
    if (m_total_clicks_isSet) {
        obj.insert(QString("totalClicks"), ::OpenAPI::toJsonValue(m_total_clicks));
    }
    if (m_total_views_isSet) {
        obj.insert(QString("totalViews"), ::OpenAPI::toJsonValue(m_total_views));
    }
    if (m_unique_clicks_isSet) {
        obj.insert(QString("uniqueClicks"), ::OpenAPI::toJsonValue(m_unique_clicks));
    }
    if (m_unique_conversions_isSet) {
        obj.insert(QString("uniqueConversions"), ::OpenAPI::toJsonValue(m_unique_conversions));
    }
    if (m_unique_views_isSet) {
        obj.insert(QString("uniqueViews"), ::OpenAPI::toJsonValue(m_unique_views));
    }
    return obj;
}

QString OAIApi_Core_Dto_Aggregated_AggregatedResult::getActivityDay() const {
    return m_activity_day;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setActivityDay(const QString &activity_day) {
    m_activity_day = activity_day;
    m_activity_day_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_activity_day_Set() const{
    return m_activity_day_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_activity_day_Valid() const{
    return m_activity_day_isValid;
}

double OAIApi_Core_Dto_Aggregated_AggregatedResult::getCommissionsCost() const {
    return m_commissions_cost;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setCommissionsCost(const double &commissions_cost) {
    m_commissions_cost = commissions_cost;
    m_commissions_cost_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_commissions_cost_Set() const{
    return m_commissions_cost_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_commissions_cost_Valid() const{
    return m_commissions_cost_isValid;
}

double OAIApi_Core_Dto_Aggregated_AggregatedResult::getConversionsCost() const {
    return m_conversions_cost;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setConversionsCost(const double &conversions_cost) {
    m_conversions_cost = conversions_cost;
    m_conversions_cost_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_conversions_cost_Set() const{
    return m_conversions_cost_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_conversions_cost_Valid() const{
    return m_conversions_cost_isValid;
}

double OAIApi_Core_Dto_Aggregated_AggregatedResult::getConversionsValue() const {
    return m_conversions_value;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setConversionsValue(const double &conversions_value) {
    m_conversions_value = conversions_value;
    m_conversions_value_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_conversions_value_Set() const{
    return m_conversions_value_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_conversions_value_Valid() const{
    return m_conversions_value_isValid;
}

qint64 OAIApi_Core_Dto_Aggregated_AggregatedResult::getConvertedClicks() const {
    return m_converted_clicks;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setConvertedClicks(const qint64 &converted_clicks) {
    m_converted_clicks = converted_clicks;
    m_converted_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_converted_clicks_Set() const{
    return m_converted_clicks_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_converted_clicks_Valid() const{
    return m_converted_clicks_isValid;
}

OAIObject OAIApi_Core_Dto_Aggregated_AggregatedResult::getEntityData() const {
    return m_entity_data;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setEntityData(const OAIObject &entity_data) {
    m_entity_data = entity_data;
    m_entity_data_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_entity_data_Set() const{
    return m_entity_data_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_entity_data_Valid() const{
    return m_entity_data_isValid;
}

QString OAIApi_Core_Dto_Aggregated_AggregatedResult::getEntityId() const {
    return m_entity_id;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIApi_Core_Dto_Aggregated_AggregatedResult::getFromDay() const {
    return m_from_day;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setFromDay(const QString &from_day) {
    m_from_day = from_day;
    m_from_day_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_from_day_Set() const{
    return m_from_day_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_from_day_Valid() const{
    return m_from_day_isValid;
}

QMap<QString, OAIApi_Core_Dto_Aggregated_AggregatedResult> OAIApi_Core_Dto_Aggregated_AggregatedResult::getHourlyBreakDown() const {
    return m_hourly_break_down;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setHourlyBreakDown(const QMap<QString, OAIApi_Core_Dto_Aggregated_AggregatedResult> &hourly_break_down) {
    m_hourly_break_down = hourly_break_down;
    m_hourly_break_down_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_hourly_break_down_Set() const{
    return m_hourly_break_down_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_hourly_break_down_Valid() const{
    return m_hourly_break_down_isValid;
}

QString OAIApi_Core_Dto_Aggregated_AggregatedResult::getLastHitDate() const {
    return m_last_hit_date;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setLastHitDate(const QString &last_hit_date) {
    m_last_hit_date = last_hit_date;
    m_last_hit_date_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_last_hit_date_Set() const{
    return m_last_hit_date_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_last_hit_date_Valid() const{
    return m_last_hit_date_isValid;
}

qint64 OAIApi_Core_Dto_Aggregated_AggregatedResult::getSpiderHitsCount() const {
    return m_spider_hits_count;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setSpiderHitsCount(const qint64 &spider_hits_count) {
    m_spider_hits_count = spider_hits_count;
    m_spider_hits_count_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_spider_hits_count_Set() const{
    return m_spider_hits_count_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_spider_hits_count_Valid() const{
    return m_spider_hits_count_isValid;
}

QString OAIApi_Core_Dto_Aggregated_AggregatedResult::getToDay() const {
    return m_to_day;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setToDay(const QString &to_day) {
    m_to_day = to_day;
    m_to_day_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_to_day_Set() const{
    return m_to_day_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_to_day_Valid() const{
    return m_to_day_isValid;
}

qint64 OAIApi_Core_Dto_Aggregated_AggregatedResult::getTotalClicks() const {
    return m_total_clicks;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setTotalClicks(const qint64 &total_clicks) {
    m_total_clicks = total_clicks;
    m_total_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_total_clicks_Set() const{
    return m_total_clicks_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_total_clicks_Valid() const{
    return m_total_clicks_isValid;
}

qint64 OAIApi_Core_Dto_Aggregated_AggregatedResult::getTotalViews() const {
    return m_total_views;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setTotalViews(const qint64 &total_views) {
    m_total_views = total_views;
    m_total_views_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_total_views_Set() const{
    return m_total_views_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_total_views_Valid() const{
    return m_total_views_isValid;
}

qint64 OAIApi_Core_Dto_Aggregated_AggregatedResult::getUniqueClicks() const {
    return m_unique_clicks;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setUniqueClicks(const qint64 &unique_clicks) {
    m_unique_clicks = unique_clicks;
    m_unique_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_unique_clicks_Set() const{
    return m_unique_clicks_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_unique_clicks_Valid() const{
    return m_unique_clicks_isValid;
}

qint64 OAIApi_Core_Dto_Aggregated_AggregatedResult::getUniqueConversions() const {
    return m_unique_conversions;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setUniqueConversions(const qint64 &unique_conversions) {
    m_unique_conversions = unique_conversions;
    m_unique_conversions_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_unique_conversions_Set() const{
    return m_unique_conversions_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_unique_conversions_Valid() const{
    return m_unique_conversions_isValid;
}

qint64 OAIApi_Core_Dto_Aggregated_AggregatedResult::getUniqueViews() const {
    return m_unique_views;
}
void OAIApi_Core_Dto_Aggregated_AggregatedResult::setUniqueViews(const qint64 &unique_views) {
    m_unique_views = unique_views;
    m_unique_views_isSet = true;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_unique_views_Set() const{
    return m_unique_views_isSet;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::is_unique_views_Valid() const{
    return m_unique_views_isValid;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commissions_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversions_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversions_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_converted_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_break_down.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_hit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spider_hits_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_views_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Aggregated_AggregatedResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
