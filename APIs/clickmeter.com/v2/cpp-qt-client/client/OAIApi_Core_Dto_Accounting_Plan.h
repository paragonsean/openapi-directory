/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApi_Core_Dto_Accounting_Plan.h
 *
 * 
 */

#ifndef OAIApi_Core_Dto_Accounting_Plan_H
#define OAIApi_Core_Dto_Accounting_Plan_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApi_Core_Dto_Accounting_Plan : public OAIObject {
public:
    OAIApi_Core_Dto_Accounting_Plan();
    OAIApi_Core_Dto_Accounting_Plan(QString json);
    ~OAIApi_Core_Dto_Accounting_Plan() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAllowedPersonalDomains() const;
    void setAllowedPersonalDomains(const qint32 &allowed_personal_domains);
    bool is_allowed_personal_domains_Set() const;
    bool is_allowed_personal_domains_Valid() const;

    qint32 getAllowedPersonalUrls() const;
    void setAllowedPersonalUrls(const qint32 &allowed_personal_urls);
    bool is_allowed_personal_urls_Set() const;
    bool is_allowed_personal_urls_Valid() const;

    QString getBillingPeriodEnd() const;
    void setBillingPeriodEnd(const QString &billing_period_end);
    bool is_billing_period_end_Set() const;
    bool is_billing_period_end_Valid() const;

    QString getBillingPeriodStart() const;
    void setBillingPeriodStart(const QString &billing_period_start);
    bool is_billing_period_start_Set() const;
    bool is_billing_period_start_Valid() const;

    qint64 getBonusMonthlyEvents() const;
    void setBonusMonthlyEvents(const qint64 &bonus_monthly_events);
    bool is_bonus_monthly_events_Set() const;
    bool is_bonus_monthly_events_Valid() const;

    qint64 getMaximumDatapoints() const;
    void setMaximumDatapoints(const qint64 &maximum_datapoints);
    bool is_maximum_datapoints_Set() const;
    bool is_maximum_datapoints_Valid() const;

    qint64 getMaximumGuests() const;
    void setMaximumGuests(const qint64 &maximum_guests);
    bool is_maximum_guests_Set() const;
    bool is_maximum_guests_Valid() const;

    qint64 getMonthlyEvents() const;
    void setMonthlyEvents(const qint64 &monthly_events);
    bool is_monthly_events_Set() const;
    bool is_monthly_events_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    qint64 getProfileId() const;
    void setProfileId(const qint64 &profile_id);
    bool is_profile_id_Set() const;
    bool is_profile_id_Valid() const;

    bool isRecurring() const;
    void setRecurring(const bool &recurring);
    bool is_recurring_Set() const;
    bool is_recurring_Valid() const;

    qint32 getRecurringPeriod() const;
    void setRecurringPeriod(const qint32 &recurring_period);
    bool is_recurring_period_Set() const;
    bool is_recurring_period_Valid() const;

    qint64 getUsedDatapoints() const;
    void setUsedDatapoints(const qint64 &used_datapoints);
    bool is_used_datapoints_Set() const;
    bool is_used_datapoints_Valid() const;

    qint64 getUsedMonthlyEvents() const;
    void setUsedMonthlyEvents(const qint64 &used_monthly_events);
    bool is_used_monthly_events_Set() const;
    bool is_used_monthly_events_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_allowed_personal_domains;
    bool m_allowed_personal_domains_isSet;
    bool m_allowed_personal_domains_isValid;

    qint32 m_allowed_personal_urls;
    bool m_allowed_personal_urls_isSet;
    bool m_allowed_personal_urls_isValid;

    QString m_billing_period_end;
    bool m_billing_period_end_isSet;
    bool m_billing_period_end_isValid;

    QString m_billing_period_start;
    bool m_billing_period_start_isSet;
    bool m_billing_period_start_isValid;

    qint64 m_bonus_monthly_events;
    bool m_bonus_monthly_events_isSet;
    bool m_bonus_monthly_events_isValid;

    qint64 m_maximum_datapoints;
    bool m_maximum_datapoints_isSet;
    bool m_maximum_datapoints_isValid;

    qint64 m_maximum_guests;
    bool m_maximum_guests_isSet;
    bool m_maximum_guests_isValid;

    qint64 m_monthly_events;
    bool m_monthly_events_isSet;
    bool m_monthly_events_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    qint64 m_profile_id;
    bool m_profile_id_isSet;
    bool m_profile_id_isValid;

    bool m_recurring;
    bool m_recurring_isSet;
    bool m_recurring_isValid;

    qint32 m_recurring_period;
    bool m_recurring_period_isSet;
    bool m_recurring_period_isValid;

    qint64 m_used_datapoints;
    bool m_used_datapoints_isSet;
    bool m_used_datapoints_isValid;

    qint64 m_used_monthly_events;
    bool m_used_monthly_events_isSet;
    bool m_used_monthly_events_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApi_Core_Dto_Accounting_Plan)

#endif // OAIApi_Core_Dto_Accounting_Plan_H
