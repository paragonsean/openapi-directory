/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Groups_Group.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Groups_Group::OAIApi_Core_Dto_Groups_Group(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Groups_Group::OAIApi_Core_Dto_Groups_Group() {
    this->initializeModel();
}

OAIApi_Core_Dto_Groups_Group::~OAIApi_Core_Dto_Groups_Group() {}

void OAIApi_Core_Dto_Groups_Group::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_redirect_only_isSet = false;
    m_redirect_only_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_write_permited_isSet = false;
    m_write_permited_isValid = false;
}

void OAIApi_Core_Dto_Groups_Group::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Groups_Group::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_redirect_only_isValid = ::OpenAPI::fromJsonValue(m_redirect_only, json[QString("redirectOnly")]);
    m_redirect_only_isSet = !json[QString("redirectOnly")].isNull() && m_redirect_only_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_write_permited_isValid = ::OpenAPI::fromJsonValue(m_write_permited, json[QString("writePermited")]);
    m_write_permited_isSet = !json[QString("writePermited")].isNull() && m_write_permited_isValid;
}

QString OAIApi_Core_Dto_Groups_Group::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Groups_Group::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_redirect_only_isSet) {
        obj.insert(QString("redirectOnly"), ::OpenAPI::toJsonValue(m_redirect_only));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_write_permited_isSet) {
        obj.insert(QString("writePermited"), ::OpenAPI::toJsonValue(m_write_permited));
    }
    return obj;
}

QString OAIApi_Core_Dto_Groups_Group::getCreationDate() const {
    return m_creation_date;
}
void OAIApi_Core_Dto_Groups_Group::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIApi_Core_Dto_Groups_Group::isDeleted() const {
    return m_deleted;
}
void OAIApi_Core_Dto_Groups_Group::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint64 OAIApi_Core_Dto_Groups_Group::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_Groups_Group::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIApi_Core_Dto_Groups_Group::isIsPublic() const {
    return m_is_public;
}
void OAIApi_Core_Dto_Groups_Group::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_is_public_Valid() const{
    return m_is_public_isValid;
}

QString OAIApi_Core_Dto_Groups_Group::getName() const {
    return m_name;
}
void OAIApi_Core_Dto_Groups_Group::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApi_Core_Dto_Groups_Group::getNotes() const {
    return m_notes;
}
void OAIApi_Core_Dto_Groups_Group::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIApi_Core_Dto_Groups_Group::isPreferred() const {
    return m_preferred;
}
void OAIApi_Core_Dto_Groups_Group::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_preferred_Valid() const{
    return m_preferred_isValid;
}

bool OAIApi_Core_Dto_Groups_Group::isRedirectOnly() const {
    return m_redirect_only;
}
void OAIApi_Core_Dto_Groups_Group::setRedirectOnly(const bool &redirect_only) {
    m_redirect_only = redirect_only;
    m_redirect_only_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_redirect_only_Set() const{
    return m_redirect_only_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_redirect_only_Valid() const{
    return m_redirect_only_isValid;
}

QList<OAIApi_Core_Dto_Tags_Tag> OAIApi_Core_Dto_Groups_Group::getTags() const {
    return m_tags;
}
void OAIApi_Core_Dto_Groups_Group::setTags(const QList<OAIApi_Core_Dto_Tags_Tag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIApi_Core_Dto_Groups_Group::isWritePermited() const {
    return m_write_permited;
}
void OAIApi_Core_Dto_Groups_Group::setWritePermited(const bool &write_permited) {
    m_write_permited = write_permited;
    m_write_permited_isSet = true;
}

bool OAIApi_Core_Dto_Groups_Group::is_write_permited_Set() const{
    return m_write_permited_isSet;
}

bool OAIApi_Core_Dto_Groups_Group::is_write_permited_Valid() const{
    return m_write_permited_isValid;
}

bool OAIApi_Core_Dto_Groups_Group::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_permited_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Groups_Group::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
