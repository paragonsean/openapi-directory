/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Accounting_IpBlacklistEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Accounting_IpBlacklistEntry::OAIApi_Core_Dto_Accounting_IpBlacklistEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Accounting_IpBlacklistEntry::OAIApi_Core_Dto_Accounting_IpBlacklistEntry() {
    this->initializeModel();
}

OAIApi_Core_Dto_Accounting_IpBlacklistEntry::~OAIApi_Core_Dto_Accounting_IpBlacklistEntry() {}

void OAIApi_Core_Dto_Accounting_IpBlacklistEntry::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;
}

void OAIApi_Core_Dto_Accounting_IpBlacklistEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Accounting_IpBlacklistEntry::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;
}

QString OAIApi_Core_Dto_Accounting_IpBlacklistEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Accounting_IpBlacklistEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    return obj;
}

QString OAIApi_Core_Dto_Accounting_IpBlacklistEntry::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_Accounting_IpBlacklistEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_IpBlacklistEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_Accounting_IpBlacklistEntry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApi_Core_Dto_Accounting_IpBlacklistEntry::getIp() const {
    return m_ip;
}
void OAIApi_Core_Dto_Accounting_IpBlacklistEntry::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_IpBlacklistEntry::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIApi_Core_Dto_Accounting_IpBlacklistEntry::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIApi_Core_Dto_Accounting_IpBlacklistEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Accounting_IpBlacklistEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
