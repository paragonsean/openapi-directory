/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAggregatedApi_H
#define OAI_OAIAggregatedApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Aggregated_AggregatedResult.h"
#include "OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAggregatedApi : public QObject {
    Q_OBJECT

public:
    OAIAggregatedApi(const int timeOut = 0);
    ~OAIAggregatedApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  text_search QString [optional]
    */
    virtual void aggregatedGetConversionsSummary(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  type QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  group_id qint64 [optional]
    * @param[in]  text_search QString [optional]
    */
    virtual void aggregatedGetDatapointsSummary(const QString &time_frame, const QString &type, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &group_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  text_search QString [optional]
    */
    virtual void aggregatedGetGroupsSummary(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void aggregatedGetStatisticsList(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  hourly bool [optional]
    * @param[in]  only_favorites QString [optional]
    */
    virtual void aggregatedGetStatisticsSingle(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hourly = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &only_favorites = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aggregatedGetConversionsSummaryCallback(OAIHttpRequestWorker *worker);
    void aggregatedGetDatapointsSummaryCallback(OAIHttpRequestWorker *worker);
    void aggregatedGetGroupsSummaryCallback(OAIHttpRequestWorker *worker);
    void aggregatedGetStatisticsListCallback(OAIHttpRequestWorker *worker);
    void aggregatedGetStatisticsSingleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aggregatedGetConversionsSummarySignal(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void aggregatedGetDatapointsSummarySignal(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void aggregatedGetGroupsSummarySignal(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void aggregatedGetStatisticsListSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void aggregatedGetStatisticsSingleSignal(OAIApi_Core_Dto_Aggregated_AggregatedResult summary);


    void aggregatedGetConversionsSummarySignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void aggregatedGetDatapointsSummarySignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void aggregatedGetGroupsSummarySignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void aggregatedGetStatisticsListSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void aggregatedGetStatisticsSingleSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedResult summary);

    Q_DECL_DEPRECATED_X("Use aggregatedGetConversionsSummarySignalError() instead")
    void aggregatedGetConversionsSummarySignalE(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetConversionsSummarySignalError(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetDatapointsSummarySignalError() instead")
    void aggregatedGetDatapointsSummarySignalE(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetDatapointsSummarySignalError(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetGroupsSummarySignalError() instead")
    void aggregatedGetGroupsSummarySignalE(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetGroupsSummarySignalError(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetStatisticsListSignalError() instead")
    void aggregatedGetStatisticsListSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetStatisticsListSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetStatisticsSingleSignalError() instead")
    void aggregatedGetStatisticsSingleSignalE(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetStatisticsSingleSignalError(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aggregatedGetConversionsSummarySignalErrorFull() instead")
    void aggregatedGetConversionsSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetConversionsSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetDatapointsSummarySignalErrorFull() instead")
    void aggregatedGetDatapointsSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetDatapointsSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetGroupsSummarySignalErrorFull() instead")
    void aggregatedGetGroupsSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetGroupsSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetStatisticsListSignalErrorFull() instead")
    void aggregatedGetStatisticsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetStatisticsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregatedGetStatisticsSingleSignalErrorFull() instead")
    void aggregatedGetStatisticsSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregatedGetStatisticsSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
