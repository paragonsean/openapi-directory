/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRetargetingApi_H
#define OAI_OAIRetargetingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Retargeting_RetargetingScript.h"
#include "OAIApi_Core_Responses_CountResponce.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_EntityUri_System_Int64_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRetargetingApi : public QObject {
    Q_OBJECT

public:
    OAIRetargetingApi(const int timeOut = 0);
    ~OAIRetargetingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void retargetingCount();

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void retargetingDelete(const qint64 &id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void retargetingGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  only_favorites bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void retargetingGetDatapoints(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_favorites = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  only_favorites bool [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void retargetingGetDatapointsCount(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_favorites = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void retargetingIdGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_api_core_dto_retargeting_retargeting_script OAIApi_Core_Dto_Retargeting_RetargetingScript [required]
    */
    virtual void retargetingPost(const qint64 &id, const OAIApi_Core_Dto_Retargeting_RetargetingScript &oai_api_core_dto_retargeting_retargeting_script);

    /**
    * @param[in]  oai_api_core_dto_retargeting_retargeting_script OAIApi_Core_Dto_Retargeting_RetargetingScript [required]
    */
    virtual void retargetingPut(const OAIApi_Core_Dto_Retargeting_RetargetingScript &oai_api_core_dto_retargeting_retargeting_script);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void retargetingCountCallback(OAIHttpRequestWorker *worker);
    void retargetingDeleteCallback(OAIHttpRequestWorker *worker);
    void retargetingGetCallback(OAIHttpRequestWorker *worker);
    void retargetingGetDatapointsCallback(OAIHttpRequestWorker *worker);
    void retargetingGetDatapointsCountCallback(OAIHttpRequestWorker *worker);
    void retargetingIdGetCallback(OAIHttpRequestWorker *worker);
    void retargetingPostCallback(OAIHttpRequestWorker *worker);
    void retargetingPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void retargetingCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void retargetingDeleteSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingGetSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingGetDatapointsSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingGetDatapointsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void retargetingIdGetSignal(OAIApi_Core_Dto_Retargeting_RetargetingScript summary);
    void retargetingPostSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingPutSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);


    void retargetingCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void retargetingDeleteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingGetDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingGetDatapointsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void retargetingIdGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Retargeting_RetargetingScript summary);
    void retargetingPostSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void retargetingPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);

    Q_DECL_DEPRECATED_X("Use retargetingCountSignalError() instead")
    void retargetingCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingDeleteSignalError() instead")
    void retargetingDeleteSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingDeleteSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingGetSignalError() instead")
    void retargetingGetSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingGetSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingGetDatapointsSignalError() instead")
    void retargetingGetDatapointsSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingGetDatapointsSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingGetDatapointsCountSignalError() instead")
    void retargetingGetDatapointsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingGetDatapointsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingIdGetSignalError() instead")
    void retargetingIdGetSignalE(OAIApi_Core_Dto_Retargeting_RetargetingScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingIdGetSignalError(OAIApi_Core_Dto_Retargeting_RetargetingScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingPostSignalError() instead")
    void retargetingPostSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingPostSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingPutSignalError() instead")
    void retargetingPutSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingPutSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use retargetingCountSignalErrorFull() instead")
    void retargetingCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingDeleteSignalErrorFull() instead")
    void retargetingDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingGetSignalErrorFull() instead")
    void retargetingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingGetDatapointsSignalErrorFull() instead")
    void retargetingGetDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingGetDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingGetDatapointsCountSignalErrorFull() instead")
    void retargetingGetDatapointsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingGetDatapointsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingIdGetSignalErrorFull() instead")
    void retargetingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingPostSignalErrorFull() instead")
    void retargetingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retargetingPutSignalErrorFull() instead")
    void retargetingPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retargetingPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
