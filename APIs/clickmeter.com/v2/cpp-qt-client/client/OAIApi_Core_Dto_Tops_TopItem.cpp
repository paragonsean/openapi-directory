/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Tops_TopItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Tops_TopItem::OAIApi_Core_Dto_Tops_TopItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Tops_TopItem::OAIApi_Core_Dto_Tops_TopItem() {
    this->initializeModel();
}

OAIApi_Core_Dto_Tops_TopItem::~OAIApi_Core_Dto_Tops_TopItem() {}

void OAIApi_Core_Dto_Tops_TopItem::initializeModel() {

    m_entity_data_isSet = false;
    m_entity_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_hit_date_isSet = false;
    m_last_hit_date_isValid = false;

    m_spider_clicks_isSet = false;
    m_spider_clicks_isValid = false;

    m_spider_hits_isSet = false;
    m_spider_hits_isValid = false;

    m_spider_views_isSet = false;
    m_spider_views_isValid = false;

    m_total_clicks_isSet = false;
    m_total_clicks_isValid = false;

    m_total_commissions_cost_isSet = false;
    m_total_commissions_cost_isValid = false;

    m_total_conversions_isSet = false;
    m_total_conversions_isValid = false;

    m_total_conversions_cost_isSet = false;
    m_total_conversions_cost_isValid = false;

    m_total_conversions_value_isSet = false;
    m_total_conversions_value_isValid = false;

    m_total_hits_isSet = false;
    m_total_hits_isValid = false;

    m_total_views_isSet = false;
    m_total_views_isValid = false;

    m_unique_clicks_isSet = false;
    m_unique_clicks_isValid = false;

    m_unique_hits_isSet = false;
    m_unique_hits_isValid = false;

    m_unique_views_isSet = false;
    m_unique_views_isValid = false;
}

void OAIApi_Core_Dto_Tops_TopItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Tops_TopItem::fromJsonObject(QJsonObject json) {

    m_entity_data_isValid = ::OpenAPI::fromJsonValue(m_entity_data, json[QString("entityData")]);
    m_entity_data_isSet = !json[QString("entityData")].isNull() && m_entity_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_hit_date_isValid = ::OpenAPI::fromJsonValue(m_last_hit_date, json[QString("lastHitDate")]);
    m_last_hit_date_isSet = !json[QString("lastHitDate")].isNull() && m_last_hit_date_isValid;

    m_spider_clicks_isValid = ::OpenAPI::fromJsonValue(m_spider_clicks, json[QString("spiderClicks")]);
    m_spider_clicks_isSet = !json[QString("spiderClicks")].isNull() && m_spider_clicks_isValid;

    m_spider_hits_isValid = ::OpenAPI::fromJsonValue(m_spider_hits, json[QString("spiderHits")]);
    m_spider_hits_isSet = !json[QString("spiderHits")].isNull() && m_spider_hits_isValid;

    m_spider_views_isValid = ::OpenAPI::fromJsonValue(m_spider_views, json[QString("spiderViews")]);
    m_spider_views_isSet = !json[QString("spiderViews")].isNull() && m_spider_views_isValid;

    m_total_clicks_isValid = ::OpenAPI::fromJsonValue(m_total_clicks, json[QString("totalClicks")]);
    m_total_clicks_isSet = !json[QString("totalClicks")].isNull() && m_total_clicks_isValid;

    m_total_commissions_cost_isValid = ::OpenAPI::fromJsonValue(m_total_commissions_cost, json[QString("totalCommissionsCost")]);
    m_total_commissions_cost_isSet = !json[QString("totalCommissionsCost")].isNull() && m_total_commissions_cost_isValid;

    m_total_conversions_isValid = ::OpenAPI::fromJsonValue(m_total_conversions, json[QString("totalConversions")]);
    m_total_conversions_isSet = !json[QString("totalConversions")].isNull() && m_total_conversions_isValid;

    m_total_conversions_cost_isValid = ::OpenAPI::fromJsonValue(m_total_conversions_cost, json[QString("totalConversionsCost")]);
    m_total_conversions_cost_isSet = !json[QString("totalConversionsCost")].isNull() && m_total_conversions_cost_isValid;

    m_total_conversions_value_isValid = ::OpenAPI::fromJsonValue(m_total_conversions_value, json[QString("totalConversionsValue")]);
    m_total_conversions_value_isSet = !json[QString("totalConversionsValue")].isNull() && m_total_conversions_value_isValid;

    m_total_hits_isValid = ::OpenAPI::fromJsonValue(m_total_hits, json[QString("totalHits")]);
    m_total_hits_isSet = !json[QString("totalHits")].isNull() && m_total_hits_isValid;

    m_total_views_isValid = ::OpenAPI::fromJsonValue(m_total_views, json[QString("totalViews")]);
    m_total_views_isSet = !json[QString("totalViews")].isNull() && m_total_views_isValid;

    m_unique_clicks_isValid = ::OpenAPI::fromJsonValue(m_unique_clicks, json[QString("uniqueClicks")]);
    m_unique_clicks_isSet = !json[QString("uniqueClicks")].isNull() && m_unique_clicks_isValid;

    m_unique_hits_isValid = ::OpenAPI::fromJsonValue(m_unique_hits, json[QString("uniqueHits")]);
    m_unique_hits_isSet = !json[QString("uniqueHits")].isNull() && m_unique_hits_isValid;

    m_unique_views_isValid = ::OpenAPI::fromJsonValue(m_unique_views, json[QString("uniqueViews")]);
    m_unique_views_isSet = !json[QString("uniqueViews")].isNull() && m_unique_views_isValid;
}

QString OAIApi_Core_Dto_Tops_TopItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Tops_TopItem::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_data_isSet) {
        obj.insert(QString("entityData"), ::OpenAPI::toJsonValue(m_entity_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_hit_date_isSet) {
        obj.insert(QString("lastHitDate"), ::OpenAPI::toJsonValue(m_last_hit_date));
    }
    if (m_spider_clicks_isSet) {
        obj.insert(QString("spiderClicks"), ::OpenAPI::toJsonValue(m_spider_clicks));
    }
    if (m_spider_hits_isSet) {
        obj.insert(QString("spiderHits"), ::OpenAPI::toJsonValue(m_spider_hits));
    }
    if (m_spider_views_isSet) {
        obj.insert(QString("spiderViews"), ::OpenAPI::toJsonValue(m_spider_views));
    }
    if (m_total_clicks_isSet) {
        obj.insert(QString("totalClicks"), ::OpenAPI::toJsonValue(m_total_clicks));
    }
    if (m_total_commissions_cost_isSet) {
        obj.insert(QString("totalCommissionsCost"), ::OpenAPI::toJsonValue(m_total_commissions_cost));
    }
    if (m_total_conversions_isSet) {
        obj.insert(QString("totalConversions"), ::OpenAPI::toJsonValue(m_total_conversions));
    }
    if (m_total_conversions_cost_isSet) {
        obj.insert(QString("totalConversionsCost"), ::OpenAPI::toJsonValue(m_total_conversions_cost));
    }
    if (m_total_conversions_value_isSet) {
        obj.insert(QString("totalConversionsValue"), ::OpenAPI::toJsonValue(m_total_conversions_value));
    }
    if (m_total_hits_isSet) {
        obj.insert(QString("totalHits"), ::OpenAPI::toJsonValue(m_total_hits));
    }
    if (m_total_views_isSet) {
        obj.insert(QString("totalViews"), ::OpenAPI::toJsonValue(m_total_views));
    }
    if (m_unique_clicks_isSet) {
        obj.insert(QString("uniqueClicks"), ::OpenAPI::toJsonValue(m_unique_clicks));
    }
    if (m_unique_hits_isSet) {
        obj.insert(QString("uniqueHits"), ::OpenAPI::toJsonValue(m_unique_hits));
    }
    if (m_unique_views_isSet) {
        obj.insert(QString("uniqueViews"), ::OpenAPI::toJsonValue(m_unique_views));
    }
    return obj;
}

OAIObject OAIApi_Core_Dto_Tops_TopItem::getEntityData() const {
    return m_entity_data;
}
void OAIApi_Core_Dto_Tops_TopItem::setEntityData(const OAIObject &entity_data) {
    m_entity_data = entity_data;
    m_entity_data_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_entity_data_Set() const{
    return m_entity_data_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_entity_data_Valid() const{
    return m_entity_data_isValid;
}

QString OAIApi_Core_Dto_Tops_TopItem::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_Tops_TopItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApi_Core_Dto_Tops_TopItem::getLastHitDate() const {
    return m_last_hit_date;
}
void OAIApi_Core_Dto_Tops_TopItem::setLastHitDate(const QString &last_hit_date) {
    m_last_hit_date = last_hit_date;
    m_last_hit_date_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_last_hit_date_Set() const{
    return m_last_hit_date_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_last_hit_date_Valid() const{
    return m_last_hit_date_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getSpiderClicks() const {
    return m_spider_clicks;
}
void OAIApi_Core_Dto_Tops_TopItem::setSpiderClicks(const qint64 &spider_clicks) {
    m_spider_clicks = spider_clicks;
    m_spider_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_spider_clicks_Set() const{
    return m_spider_clicks_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_spider_clicks_Valid() const{
    return m_spider_clicks_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getSpiderHits() const {
    return m_spider_hits;
}
void OAIApi_Core_Dto_Tops_TopItem::setSpiderHits(const qint64 &spider_hits) {
    m_spider_hits = spider_hits;
    m_spider_hits_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_spider_hits_Set() const{
    return m_spider_hits_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_spider_hits_Valid() const{
    return m_spider_hits_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getSpiderViews() const {
    return m_spider_views;
}
void OAIApi_Core_Dto_Tops_TopItem::setSpiderViews(const qint64 &spider_views) {
    m_spider_views = spider_views;
    m_spider_views_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_spider_views_Set() const{
    return m_spider_views_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_spider_views_Valid() const{
    return m_spider_views_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getTotalClicks() const {
    return m_total_clicks;
}
void OAIApi_Core_Dto_Tops_TopItem::setTotalClicks(const qint64 &total_clicks) {
    m_total_clicks = total_clicks;
    m_total_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_clicks_Set() const{
    return m_total_clicks_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_clicks_Valid() const{
    return m_total_clicks_isValid;
}

double OAIApi_Core_Dto_Tops_TopItem::getTotalCommissionsCost() const {
    return m_total_commissions_cost;
}
void OAIApi_Core_Dto_Tops_TopItem::setTotalCommissionsCost(const double &total_commissions_cost) {
    m_total_commissions_cost = total_commissions_cost;
    m_total_commissions_cost_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_commissions_cost_Set() const{
    return m_total_commissions_cost_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_commissions_cost_Valid() const{
    return m_total_commissions_cost_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getTotalConversions() const {
    return m_total_conversions;
}
void OAIApi_Core_Dto_Tops_TopItem::setTotalConversions(const qint64 &total_conversions) {
    m_total_conversions = total_conversions;
    m_total_conversions_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_conversions_Set() const{
    return m_total_conversions_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_conversions_Valid() const{
    return m_total_conversions_isValid;
}

double OAIApi_Core_Dto_Tops_TopItem::getTotalConversionsCost() const {
    return m_total_conversions_cost;
}
void OAIApi_Core_Dto_Tops_TopItem::setTotalConversionsCost(const double &total_conversions_cost) {
    m_total_conversions_cost = total_conversions_cost;
    m_total_conversions_cost_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_conversions_cost_Set() const{
    return m_total_conversions_cost_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_conversions_cost_Valid() const{
    return m_total_conversions_cost_isValid;
}

double OAIApi_Core_Dto_Tops_TopItem::getTotalConversionsValue() const {
    return m_total_conversions_value;
}
void OAIApi_Core_Dto_Tops_TopItem::setTotalConversionsValue(const double &total_conversions_value) {
    m_total_conversions_value = total_conversions_value;
    m_total_conversions_value_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_conversions_value_Set() const{
    return m_total_conversions_value_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_conversions_value_Valid() const{
    return m_total_conversions_value_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getTotalHits() const {
    return m_total_hits;
}
void OAIApi_Core_Dto_Tops_TopItem::setTotalHits(const qint64 &total_hits) {
    m_total_hits = total_hits;
    m_total_hits_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_hits_Set() const{
    return m_total_hits_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_hits_Valid() const{
    return m_total_hits_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getTotalViews() const {
    return m_total_views;
}
void OAIApi_Core_Dto_Tops_TopItem::setTotalViews(const qint64 &total_views) {
    m_total_views = total_views;
    m_total_views_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_views_Set() const{
    return m_total_views_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_total_views_Valid() const{
    return m_total_views_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getUniqueClicks() const {
    return m_unique_clicks;
}
void OAIApi_Core_Dto_Tops_TopItem::setUniqueClicks(const qint64 &unique_clicks) {
    m_unique_clicks = unique_clicks;
    m_unique_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_unique_clicks_Set() const{
    return m_unique_clicks_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_unique_clicks_Valid() const{
    return m_unique_clicks_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getUniqueHits() const {
    return m_unique_hits;
}
void OAIApi_Core_Dto_Tops_TopItem::setUniqueHits(const qint64 &unique_hits) {
    m_unique_hits = unique_hits;
    m_unique_hits_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_unique_hits_Set() const{
    return m_unique_hits_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_unique_hits_Valid() const{
    return m_unique_hits_isValid;
}

qint64 OAIApi_Core_Dto_Tops_TopItem::getUniqueViews() const {
    return m_unique_views;
}
void OAIApi_Core_Dto_Tops_TopItem::setUniqueViews(const qint64 &unique_views) {
    m_unique_views = unique_views;
    m_unique_views_isSet = true;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_unique_views_Set() const{
    return m_unique_views_isSet;
}

bool OAIApi_Core_Dto_Tops_TopItem::is_unique_views_Valid() const{
    return m_unique_views_isValid;
}

bool OAIApi_Core_Dto_Tops_TopItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_hit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spider_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spider_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spider_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_commissions_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_conversions_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_conversions_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_hits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_views_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Tops_TopItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
