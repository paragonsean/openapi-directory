/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_ClickStream_HitLocationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_ClickStream_HitLocationInfo::OAIApi_Core_Dto_ClickStream_HitLocationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_ClickStream_HitLocationInfo::OAIApi_Core_Dto_ClickStream_HitLocationInfo() {
    this->initializeModel();
}

OAIApi_Core_Dto_ClickStream_HitLocationInfo::~OAIApi_Core_Dto_ClickStream_HitLocationInfo() {}

void OAIApi_Core_Dto_ClickStream_HitLocationInfo::initializeModel() {

    m_areacode_isSet = false;
    m_areacode_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_metrocode_isSet = false;
    m_metrocode_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_postalcode_isSet = false;
    m_postalcode_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_name_isSet = false;
    m_region_name_isValid = false;
}

void OAIApi_Core_Dto_ClickStream_HitLocationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_ClickStream_HitLocationInfo::fromJsonObject(QJsonObject json) {

    m_areacode_isValid = ::OpenAPI::fromJsonValue(m_areacode, json[QString("areacode")]);
    m_areacode_isSet = !json[QString("areacode")].isNull() && m_areacode_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_metrocode_isValid = ::OpenAPI::fromJsonValue(m_metrocode, json[QString("metrocode")]);
    m_metrocode_isSet = !json[QString("metrocode")].isNull() && m_metrocode_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_postalcode_isValid = ::OpenAPI::fromJsonValue(m_postalcode, json[QString("postalcode")]);
    m_postalcode_isSet = !json[QString("postalcode")].isNull() && m_postalcode_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_region_name_isValid = ::OpenAPI::fromJsonValue(m_region_name, json[QString("regionName")]);
    m_region_name_isSet = !json[QString("regionName")].isNull() && m_region_name_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_ClickStream_HitLocationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_areacode_isSet) {
        obj.insert(QString("areacode"), ::OpenAPI::toJsonValue(m_areacode));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_metrocode_isSet) {
        obj.insert(QString("metrocode"), ::OpenAPI::toJsonValue(m_metrocode));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_postalcode_isSet) {
        obj.insert(QString("postalcode"), ::OpenAPI::toJsonValue(m_postalcode));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_name_isSet) {
        obj.insert(QString("regionName"), ::OpenAPI::toJsonValue(m_region_name));
    }
    return obj;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getAreacode() const {
    return m_areacode;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setAreacode(const QString &areacode) {
    m_areacode = areacode;
    m_areacode_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_areacode_Set() const{
    return m_areacode_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_areacode_Valid() const{
    return m_areacode_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getCity() const {
    return m_city;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_city_Set() const{
    return m_city_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getCountry() const {
    return m_country;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_country_Valid() const{
    return m_country_isValid;
}

double OAIApi_Core_Dto_ClickStream_HitLocationInfo::getLatitude() const {
    return m_latitude;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIApi_Core_Dto_ClickStream_HitLocationInfo::getLongitude() const {
    return m_longitude;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getMetrocode() const {
    return m_metrocode;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setMetrocode(const QString &metrocode) {
    m_metrocode = metrocode;
    m_metrocode_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_metrocode_Set() const{
    return m_metrocode_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_metrocode_Valid() const{
    return m_metrocode_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getOrganization() const {
    return m_organization;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getPostalcode() const {
    return m_postalcode;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setPostalcode(const QString &postalcode) {
    m_postalcode = postalcode;
    m_postalcode_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_postalcode_Set() const{
    return m_postalcode_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_postalcode_Valid() const{
    return m_postalcode_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getRegion() const {
    return m_region;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_region_Set() const{
    return m_region_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitLocationInfo::getRegionName() const {
    return m_region_name;
}
void OAIApi_Core_Dto_ClickStream_HitLocationInfo::setRegionName(const QString &region_name) {
    m_region_name = region_name;
    m_region_name_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_region_name_Set() const{
    return m_region_name_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::is_region_name_Valid() const{
    return m_region_name_isValid;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_areacode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrocode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postalcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_ClickStream_HitLocationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
