/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApi_Core_Dto_Tops_TopItem.h
 *
 * 
 */

#ifndef OAIApi_Core_Dto_Tops_TopItem_H
#define OAIApi_Core_Dto_Tops_TopItem_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApi_Core_Dto_Tops_TopItem : public OAIObject {
public:
    OAIApi_Core_Dto_Tops_TopItem();
    OAIApi_Core_Dto_Tops_TopItem(QString json);
    ~OAIApi_Core_Dto_Tops_TopItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getEntityData() const;
    void setEntityData(const OAIObject &entity_data);
    bool is_entity_data_Set() const;
    bool is_entity_data_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLastHitDate() const;
    void setLastHitDate(const QString &last_hit_date);
    bool is_last_hit_date_Set() const;
    bool is_last_hit_date_Valid() const;

    qint64 getSpiderClicks() const;
    void setSpiderClicks(const qint64 &spider_clicks);
    bool is_spider_clicks_Set() const;
    bool is_spider_clicks_Valid() const;

    qint64 getSpiderHits() const;
    void setSpiderHits(const qint64 &spider_hits);
    bool is_spider_hits_Set() const;
    bool is_spider_hits_Valid() const;

    qint64 getSpiderViews() const;
    void setSpiderViews(const qint64 &spider_views);
    bool is_spider_views_Set() const;
    bool is_spider_views_Valid() const;

    qint64 getTotalClicks() const;
    void setTotalClicks(const qint64 &total_clicks);
    bool is_total_clicks_Set() const;
    bool is_total_clicks_Valid() const;

    double getTotalCommissionsCost() const;
    void setTotalCommissionsCost(const double &total_commissions_cost);
    bool is_total_commissions_cost_Set() const;
    bool is_total_commissions_cost_Valid() const;

    qint64 getTotalConversions() const;
    void setTotalConversions(const qint64 &total_conversions);
    bool is_total_conversions_Set() const;
    bool is_total_conversions_Valid() const;

    double getTotalConversionsCost() const;
    void setTotalConversionsCost(const double &total_conversions_cost);
    bool is_total_conversions_cost_Set() const;
    bool is_total_conversions_cost_Valid() const;

    double getTotalConversionsValue() const;
    void setTotalConversionsValue(const double &total_conversions_value);
    bool is_total_conversions_value_Set() const;
    bool is_total_conversions_value_Valid() const;

    qint64 getTotalHits() const;
    void setTotalHits(const qint64 &total_hits);
    bool is_total_hits_Set() const;
    bool is_total_hits_Valid() const;

    qint64 getTotalViews() const;
    void setTotalViews(const qint64 &total_views);
    bool is_total_views_Set() const;
    bool is_total_views_Valid() const;

    qint64 getUniqueClicks() const;
    void setUniqueClicks(const qint64 &unique_clicks);
    bool is_unique_clicks_Set() const;
    bool is_unique_clicks_Valid() const;

    qint64 getUniqueHits() const;
    void setUniqueHits(const qint64 &unique_hits);
    bool is_unique_hits_Set() const;
    bool is_unique_hits_Valid() const;

    qint64 getUniqueViews() const;
    void setUniqueViews(const qint64 &unique_views);
    bool is_unique_views_Set() const;
    bool is_unique_views_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_entity_data;
    bool m_entity_data_isSet;
    bool m_entity_data_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_last_hit_date;
    bool m_last_hit_date_isSet;
    bool m_last_hit_date_isValid;

    qint64 m_spider_clicks;
    bool m_spider_clicks_isSet;
    bool m_spider_clicks_isValid;

    qint64 m_spider_hits;
    bool m_spider_hits_isSet;
    bool m_spider_hits_isValid;

    qint64 m_spider_views;
    bool m_spider_views_isSet;
    bool m_spider_views_isValid;

    qint64 m_total_clicks;
    bool m_total_clicks_isSet;
    bool m_total_clicks_isValid;

    double m_total_commissions_cost;
    bool m_total_commissions_cost_isSet;
    bool m_total_commissions_cost_isValid;

    qint64 m_total_conversions;
    bool m_total_conversions_isSet;
    bool m_total_conversions_isValid;

    double m_total_conversions_cost;
    bool m_total_conversions_cost_isSet;
    bool m_total_conversions_cost_isValid;

    double m_total_conversions_value;
    bool m_total_conversions_value_isSet;
    bool m_total_conversions_value_isValid;

    qint64 m_total_hits;
    bool m_total_hits_isSet;
    bool m_total_hits_isValid;

    qint64 m_total_views;
    bool m_total_views_isSet;
    bool m_total_views_isValid;

    qint64 m_unique_clicks;
    bool m_unique_clicks_isSet;
    bool m_unique_clicks_isValid;

    qint64 m_unique_hits;
    bool m_unique_hits_isSet;
    bool m_unique_hits_isValid;

    qint64 m_unique_views;
    bool m_unique_views_isSet;
    bool m_unique_views_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApi_Core_Dto_Tops_TopItem)

#endif // OAIApi_Core_Dto_Tops_TopItem_H
