/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_ClickStream_HitConversionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_ClickStream_HitConversionInfo::OAIApi_Core_Dto_ClickStream_HitConversionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_ClickStream_HitConversionInfo::OAIApi_Core_Dto_ClickStream_HitConversionInfo() {
    this->initializeModel();
}

OAIApi_Core_Dto_ClickStream_HitConversionInfo::~OAIApi_Core_Dto_ClickStream_HitConversionInfo() {}

void OAIApi_Core_Dto_ClickStream_HitConversionInfo::initializeModel() {

    m_access_time_isSet = false;
    m_access_time_isValid = false;

    m_comcost_isSet = false;
    m_comcost_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIApi_Core_Dto_ClickStream_HitConversionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_ClickStream_HitConversionInfo::fromJsonObject(QJsonObject json) {

    m_access_time_isValid = ::OpenAPI::fromJsonValue(m_access_time, json[QString("accessTime")]);
    m_access_time_isSet = !json[QString("accessTime")].isNull() && m_access_time_isValid;

    m_comcost_isValid = ::OpenAPI::fromJsonValue(m_comcost, json[QString("comcost")]);
    m_comcost_isSet = !json[QString("comcost")].isNull() && m_comcost_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitConversionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_ClickStream_HitConversionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_access_time_isSet) {
        obj.insert(QString("accessTime"), ::OpenAPI::toJsonValue(m_access_time));
    }
    if (m_comcost_isSet) {
        obj.insert(QString("comcost"), ::OpenAPI::toJsonValue(m_comcost));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIApi_Core_Dto_ClickStream_HitConversionInfo::getAccessTime() const {
    return m_access_time;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setAccessTime(const QString &access_time) {
    m_access_time = access_time;
    m_access_time_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_access_time_Set() const{
    return m_access_time_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_access_time_Valid() const{
    return m_access_time_isValid;
}

double OAIApi_Core_Dto_ClickStream_HitConversionInfo::getComcost() const {
    return m_comcost;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setComcost(const double &comcost) {
    m_comcost = comcost;
    m_comcost_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_comcost_Set() const{
    return m_comcost_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_comcost_Valid() const{
    return m_comcost_isValid;
}

double OAIApi_Core_Dto_ClickStream_HitConversionInfo::getCost() const {
    return m_cost;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitConversionInfo::getDate() const {
    return m_date;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_date_Set() const{
    return m_date_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::isDeleted() const {
    return m_deleted;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint64 OAIApi_Core_Dto_ClickStream_HitConversionInfo::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitConversionInfo::getName() const {
    return m_name;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApi_Core_Dto_ClickStream_HitConversionInfo::getParameter() const {
    return m_parameter;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_parameter_Valid() const{
    return m_parameter_isValid;
}

double OAIApi_Core_Dto_ClickStream_HitConversionInfo::getValue() const {
    return m_value;
}
void OAIApi_Core_Dto_ClickStream_HitConversionInfo::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comcost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_ClickStream_HitConversionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
