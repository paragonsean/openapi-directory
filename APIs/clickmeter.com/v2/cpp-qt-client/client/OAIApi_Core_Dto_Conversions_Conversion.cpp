/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Conversions_Conversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Conversions_Conversion::OAIApi_Core_Dto_Conversions_Conversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Conversions_Conversion::OAIApi_Core_Dto_Conversions_Conversion() {
    this->initializeModel();
}

OAIApi_Core_Dto_Conversions_Conversion::~OAIApi_Core_Dto_Conversions_Conversion() {}

void OAIApi_Core_Dto_Conversions_Conversion::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIApi_Core_Dto_Conversions_Conversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Conversions_Conversion::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIApi_Core_Dto_Conversions_Conversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Conversions_Conversion::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIApi_Core_Dto_Conversions_Conversion::getCode() const {
    return m_code;
}
void OAIApi_Core_Dto_Conversions_Conversion::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_code_Set() const{
    return m_code_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIApi_Core_Dto_Conversions_Conversion::getCreationDate() const {
    return m_creation_date;
}
void OAIApi_Core_Dto_Conversions_Conversion::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIApi_Core_Dto_Conversions_Conversion::isDeleted() const {
    return m_deleted;
}
void OAIApi_Core_Dto_Conversions_Conversion::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIApi_Core_Dto_Conversions_Conversion::getDescription() const {
    return m_description;
}
void OAIApi_Core_Dto_Conversions_Conversion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIApi_Core_Dto_Conversions_Conversion::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_Conversions_Conversion::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApi_Core_Dto_Conversions_Conversion::getName() const {
    return m_name;
}
void OAIApi_Core_Dto_Conversions_Conversion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApi_Core_Dto_Conversions_Conversion::getProtocol() const {
    return m_protocol;
}
void OAIApi_Core_Dto_Conversions_Conversion::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_protocol_Valid() const{
    return m_protocol_isValid;
}

double OAIApi_Core_Dto_Conversions_Conversion::getValue() const {
    return m_value;
}
void OAIApi_Core_Dto_Conversions_Conversion::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_value_Set() const{
    return m_value_isSet;
}

bool OAIApi_Core_Dto_Conversions_Conversion::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIApi_Core_Dto_Conversions_Conversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Conversions_Conversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
