/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversionsApi_H
#define OAI_OAIConversionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Aggregated_AggregatedResult.h"
#include "OAIApi_Core_Dto_ClickStream_HitListPage.h"
#include "OAIApi_Core_Dto_Conversions_Conversion.h"
#include "OAIApi_Core_Requests_ConversionPatchBody.h"
#include "OAIApi_Core_Requests_GenericTextPatch.h"
#include "OAIApi_Core_Requests_PatchBodyBatch.h"
#include "OAIApi_Core_Responses_CountResponce.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_EntityUri_System_Int64_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversionsApi : public QObject {
    Q_OBJECT

public:
    OAIConversionsApi(const int timeOut = 0);
    ~OAIConversionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  oai_api_core_requests_patch_body_batch OAIApi_Core_Requests_PatchBodyBatch [required]
    */
    virtual void conversionsConversionIdDatapointsBatchPatchPut(const qint64 &conversion_id, const OAIApi_Core_Requests_PatchBodyBatch &oai_api_core_requests_patch_body_batch);

    /**
    * @param[in]  conversion_id qint64 [required]
    */
    virtual void conversionsConversionIdGet(const qint64 &conversion_id);

    /**
    * @param[in]  status QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void conversionsCount(const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversion_id qint64 [required]
    */
    virtual void conversionsDelete(const qint64 &conversion_id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void conversionsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void conversionsGetDatapoints(const qint64 &conversion_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void conversionsGetDatapointsCount(const qint64 &conversion_id, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  timeframe QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void conversionsGetHits(const qint64 &conversion_id, const QString &timeframe, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void conversionsGetStatisticsAllList(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void conversionsGetStatisticsList(const qint64 &conversion_id, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    * @param[in]  hourly bool [optional]
    */
    virtual void conversionsGetStatisticsSingle(const qint64 &conversion_id, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hourly = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  oai_api_core_requests_conversion_patch_body OAIApi_Core_Requests_ConversionPatchBody [required]
    */
    virtual void conversionsPatch(const qint64 &conversion_id, const OAIApi_Core_Requests_ConversionPatchBody &oai_api_core_requests_conversion_patch_body);

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  oai_api_core_requests_generic_text_patch OAIApi_Core_Requests_GenericTextPatch [required]
    */
    virtual void conversionsPatchNotes(const qint64 &conversion_id, const OAIApi_Core_Requests_GenericTextPatch &oai_api_core_requests_generic_text_patch);

    /**
    * @param[in]  conversion_id qint64 [required]
    * @param[in]  oai_api_core_dto_conversions_conversion OAIApi_Core_Dto_Conversions_Conversion [required]
    */
    virtual void conversionsPost(const qint64 &conversion_id, const OAIApi_Core_Dto_Conversions_Conversion &oai_api_core_dto_conversions_conversion);

    /**
    * @param[in]  oai_api_core_dto_conversions_conversion OAIApi_Core_Dto_Conversions_Conversion [required]
    */
    virtual void conversionsPut(const OAIApi_Core_Dto_Conversions_Conversion &oai_api_core_dto_conversions_conversion);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void conversionsConversionIdDatapointsBatchPatchPutCallback(OAIHttpRequestWorker *worker);
    void conversionsConversionIdGetCallback(OAIHttpRequestWorker *worker);
    void conversionsCountCallback(OAIHttpRequestWorker *worker);
    void conversionsDeleteCallback(OAIHttpRequestWorker *worker);
    void conversionsGetCallback(OAIHttpRequestWorker *worker);
    void conversionsGetDatapointsCallback(OAIHttpRequestWorker *worker);
    void conversionsGetDatapointsCountCallback(OAIHttpRequestWorker *worker);
    void conversionsGetHitsCallback(OAIHttpRequestWorker *worker);
    void conversionsGetStatisticsAllListCallback(OAIHttpRequestWorker *worker);
    void conversionsGetStatisticsListCallback(OAIHttpRequestWorker *worker);
    void conversionsGetStatisticsSingleCallback(OAIHttpRequestWorker *worker);
    void conversionsPatchCallback(OAIHttpRequestWorker *worker);
    void conversionsPatchNotesCallback(OAIHttpRequestWorker *worker);
    void conversionsPostCallback(OAIHttpRequestWorker *worker);
    void conversionsPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void conversionsConversionIdDatapointsBatchPatchPutSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsConversionIdGetSignal(OAIApi_Core_Dto_Conversions_Conversion summary);
    void conversionsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void conversionsDeleteSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsGetSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsGetDatapointsSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsGetDatapointsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void conversionsGetHitsSignal(OAIApi_Core_Dto_ClickStream_HitListPage summary);
    void conversionsGetStatisticsAllListSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void conversionsGetStatisticsListSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void conversionsGetStatisticsSingleSignal(OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void conversionsPatchSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsPatchNotesSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsPostSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsPutSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);


    void conversionsConversionIdDatapointsBatchPatchPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsConversionIdGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Conversions_Conversion summary);
    void conversionsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void conversionsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsGetDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsGetDatapointsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void conversionsGetHitsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_ClickStream_HitListPage summary);
    void conversionsGetStatisticsAllListSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void conversionsGetStatisticsListSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void conversionsGetStatisticsSingleSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void conversionsPatchSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsPatchNotesSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsPostSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void conversionsPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);

    Q_DECL_DEPRECATED_X("Use conversionsConversionIdDatapointsBatchPatchPutSignalError() instead")
    void conversionsConversionIdDatapointsBatchPatchPutSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsConversionIdDatapointsBatchPatchPutSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsConversionIdGetSignalError() instead")
    void conversionsConversionIdGetSignalE(OAIApi_Core_Dto_Conversions_Conversion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsConversionIdGetSignalError(OAIApi_Core_Dto_Conversions_Conversion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsCountSignalError() instead")
    void conversionsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsDeleteSignalError() instead")
    void conversionsDeleteSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsDeleteSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetSignalError() instead")
    void conversionsGetSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetDatapointsSignalError() instead")
    void conversionsGetDatapointsSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetDatapointsSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetDatapointsCountSignalError() instead")
    void conversionsGetDatapointsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetDatapointsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetHitsSignalError() instead")
    void conversionsGetHitsSignalE(OAIApi_Core_Dto_ClickStream_HitListPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetHitsSignalError(OAIApi_Core_Dto_ClickStream_HitListPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetStatisticsAllListSignalError() instead")
    void conversionsGetStatisticsAllListSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetStatisticsAllListSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetStatisticsListSignalError() instead")
    void conversionsGetStatisticsListSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetStatisticsListSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetStatisticsSingleSignalError() instead")
    void conversionsGetStatisticsSingleSignalE(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetStatisticsSingleSignalError(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPatchSignalError() instead")
    void conversionsPatchSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPatchSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPatchNotesSignalError() instead")
    void conversionsPatchNotesSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPatchNotesSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPostSignalError() instead")
    void conversionsPostSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPostSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPutSignalError() instead")
    void conversionsPutSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPutSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use conversionsConversionIdDatapointsBatchPatchPutSignalErrorFull() instead")
    void conversionsConversionIdDatapointsBatchPatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsConversionIdDatapointsBatchPatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsConversionIdGetSignalErrorFull() instead")
    void conversionsConversionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsConversionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsCountSignalErrorFull() instead")
    void conversionsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsDeleteSignalErrorFull() instead")
    void conversionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetSignalErrorFull() instead")
    void conversionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetDatapointsSignalErrorFull() instead")
    void conversionsGetDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetDatapointsCountSignalErrorFull() instead")
    void conversionsGetDatapointsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetDatapointsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetHitsSignalErrorFull() instead")
    void conversionsGetHitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetHitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetStatisticsAllListSignalErrorFull() instead")
    void conversionsGetStatisticsAllListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetStatisticsAllListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetStatisticsListSignalErrorFull() instead")
    void conversionsGetStatisticsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetStatisticsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsGetStatisticsSingleSignalErrorFull() instead")
    void conversionsGetStatisticsSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsGetStatisticsSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPatchSignalErrorFull() instead")
    void conversionsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPatchNotesSignalErrorFull() instead")
    void conversionsPatchNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPatchNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPostSignalErrorFull() instead")
    void conversionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversionsPutSignalErrorFull() instead")
    void conversionsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversionsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
