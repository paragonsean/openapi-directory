/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Aggregated_AggregatedResult.h"
#include "OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult.h"
#include "OAIApi_Core_Dto_ClickStream_HitListPage.h"
#include "OAIApi_Core_Dto_Datapoints_Datapoint.h"
#include "OAIApi_Core_Dto_Groups_Group.h"
#include "OAIApi_Core_Requests_GenericTextPatch.h"
#include "OAIApi_Core_Responses_CountResponce.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_EntityUri_System_Int64_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    * @param[in]  write bool [optional]
    */
    virtual void groupsCount(const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &write = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void groupsDelete(const qint64 &id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    * @param[in]  write bool [optional]
    */
    virtual void groupsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &write = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  only_favorites bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void groupsGetDatapoints(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_favorites = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  only_favorites bool [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void groupsGetDatapointsCount(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_favorites = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  text_search QString [optional]
    */
    virtual void groupsGetDatapointsSummary(const qint64 &id, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  timeframe QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void groupsGetHits(const qint64 &id, const QString &timeframe, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  hourly bool [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    */
    virtual void groupsGetStatisticsAggregatedSingle(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hourly = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void groupsGetStatisticsAllList(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void groupsGetStatisticsList(const qint64 &id, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  hourly bool [optional]
    */
    virtual void groupsGetStatisticsSingle(const qint64 &id, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hourly = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void groupsIdGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void groupsPatchFavourite(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_api_core_requests_generic_text_patch OAIApi_Core_Requests_GenericTextPatch [required]
    */
    virtual void groupsPatchNotes(const qint64 &id, const OAIApi_Core_Requests_GenericTextPatch &oai_api_core_requests_generic_text_patch);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_api_core_dto_groups_group OAIApi_Core_Dto_Groups_Group [required]
    */
    virtual void groupsPost(const qint64 &id, const OAIApi_Core_Dto_Groups_Group &oai_api_core_dto_groups_group);

    /**
    * @param[in]  oai_api_core_dto_groups_group OAIApi_Core_Dto_Groups_Group [required]
    */
    virtual void groupsPut(const OAIApi_Core_Dto_Groups_Group &oai_api_core_dto_groups_group);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_api_core_dto_datapoints_datapoint OAIApi_Core_Dto_Datapoints_Datapoint [required]
    */
    virtual void groupsPutDatapoint(const qint64 &id, const OAIApi_Core_Dto_Datapoints_Datapoint &oai_api_core_dto_datapoints_datapoint);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void groupsCountCallback(OAIHttpRequestWorker *worker);
    void groupsDeleteCallback(OAIHttpRequestWorker *worker);
    void groupsGetCallback(OAIHttpRequestWorker *worker);
    void groupsGetDatapointsCallback(OAIHttpRequestWorker *worker);
    void groupsGetDatapointsCountCallback(OAIHttpRequestWorker *worker);
    void groupsGetDatapointsSummaryCallback(OAIHttpRequestWorker *worker);
    void groupsGetHitsCallback(OAIHttpRequestWorker *worker);
    void groupsGetStatisticsAggregatedSingleCallback(OAIHttpRequestWorker *worker);
    void groupsGetStatisticsAllListCallback(OAIHttpRequestWorker *worker);
    void groupsGetStatisticsListCallback(OAIHttpRequestWorker *worker);
    void groupsGetStatisticsSingleCallback(OAIHttpRequestWorker *worker);
    void groupsIdGetCallback(OAIHttpRequestWorker *worker);
    void groupsPatchFavouriteCallback(OAIHttpRequestWorker *worker);
    void groupsPatchNotesCallback(OAIHttpRequestWorker *worker);
    void groupsPostCallback(OAIHttpRequestWorker *worker);
    void groupsPutCallback(OAIHttpRequestWorker *worker);
    void groupsPutDatapointCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void groupsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void groupsDeleteSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsGetSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsGetDatapointsSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsGetDatapointsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void groupsGetDatapointsSummarySignal(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void groupsGetHitsSignal(OAIApi_Core_Dto_ClickStream_HitListPage summary);
    void groupsGetStatisticsAggregatedSingleSignal(OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void groupsGetStatisticsAllListSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void groupsGetStatisticsListSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void groupsGetStatisticsSingleSignal(OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void groupsIdGetSignal(OAIApi_Core_Dto_Groups_Group summary);
    void groupsPatchFavouriteSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPatchNotesSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPostSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPutSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPutDatapointSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);


    void groupsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void groupsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsGetDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsGetDatapointsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void groupsGetDatapointsSummarySignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary);
    void groupsGetHitsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_ClickStream_HitListPage summary);
    void groupsGetStatisticsAggregatedSingleSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void groupsGetStatisticsAllListSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void groupsGetStatisticsListSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void groupsGetStatisticsSingleSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void groupsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Groups_Group summary);
    void groupsPatchFavouriteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPatchNotesSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPostSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void groupsPutDatapointSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);

    Q_DECL_DEPRECATED_X("Use groupsCountSignalError() instead")
    void groupsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsDeleteSignalError() instead")
    void groupsDeleteSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetSignalError() instead")
    void groupsGetSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetDatapointsSignalError() instead")
    void groupsGetDatapointsSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetDatapointsSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetDatapointsCountSignalError() instead")
    void groupsGetDatapointsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetDatapointsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetDatapointsSummarySignalError() instead")
    void groupsGetDatapointsSummarySignalE(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetDatapointsSummarySignalError(OAIApi_Core_Dto_Aggregated_AggregatedSummaryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetHitsSignalError() instead")
    void groupsGetHitsSignalE(OAIApi_Core_Dto_ClickStream_HitListPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetHitsSignalError(OAIApi_Core_Dto_ClickStream_HitListPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsAggregatedSingleSignalError() instead")
    void groupsGetStatisticsAggregatedSingleSignalE(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsAggregatedSingleSignalError(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsAllListSignalError() instead")
    void groupsGetStatisticsAllListSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsAllListSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsListSignalError() instead")
    void groupsGetStatisticsListSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsListSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsSingleSignalError() instead")
    void groupsGetStatisticsSingleSignalE(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsSingleSignalError(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIdGetSignalError() instead")
    void groupsIdGetSignalE(OAIApi_Core_Dto_Groups_Group summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIdGetSignalError(OAIApi_Core_Dto_Groups_Group summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPatchFavouriteSignalError() instead")
    void groupsPatchFavouriteSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPatchFavouriteSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPatchNotesSignalError() instead")
    void groupsPatchNotesSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPatchNotesSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPostSignalError() instead")
    void groupsPostSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPostSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPutSignalError() instead")
    void groupsPutSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPutSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPutDatapointSignalError() instead")
    void groupsPutDatapointSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPutDatapointSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use groupsCountSignalErrorFull() instead")
    void groupsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsDeleteSignalErrorFull() instead")
    void groupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetSignalErrorFull() instead")
    void groupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetDatapointsSignalErrorFull() instead")
    void groupsGetDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetDatapointsCountSignalErrorFull() instead")
    void groupsGetDatapointsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetDatapointsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetDatapointsSummarySignalErrorFull() instead")
    void groupsGetDatapointsSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetDatapointsSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetHitsSignalErrorFull() instead")
    void groupsGetHitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetHitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsAggregatedSingleSignalErrorFull() instead")
    void groupsGetStatisticsAggregatedSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsAggregatedSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsAllListSignalErrorFull() instead")
    void groupsGetStatisticsAllListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsAllListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsListSignalErrorFull() instead")
    void groupsGetStatisticsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetStatisticsSingleSignalErrorFull() instead")
    void groupsGetStatisticsSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetStatisticsSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsIdGetSignalErrorFull() instead")
    void groupsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPatchFavouriteSignalErrorFull() instead")
    void groupsPatchFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPatchFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPatchNotesSignalErrorFull() instead")
    void groupsPatchNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPatchNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPostSignalErrorFull() instead")
    void groupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPutSignalErrorFull() instead")
    void groupsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsPutDatapointSignalErrorFull() instead")
    void groupsPutDatapointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsPutDatapointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
