/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainsApi_H
#define OAI_OAIDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Domains_Domain.h"
#include "OAIApi_Core_Responses_CountResponce.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_EntityUri_System_Int64_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainsApi : public QObject {
    Q_OBJECT

public:
    OAIDomainsApi(const int timeOut = 0);
    ~OAIDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void domainsCount(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void domainsDelete(const qint64 &id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void domainsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void domainsIdGet(const qint64 &id);

    /**
    * @param[in]  oai_api_core_dto_domains_domain OAIApi_Core_Dto_Domains_Domain [required]
    */
    virtual void domainsPut(const OAIApi_Core_Dto_Domains_Domain &oai_api_core_dto_domains_domain);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_api_core_dto_domains_domain OAIApi_Core_Dto_Domains_Domain [required]
    */
    virtual void domainsUpdate(const qint64 &id, const OAIApi_Core_Dto_Domains_Domain &oai_api_core_dto_domains_domain);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void domainsCountCallback(OAIHttpRequestWorker *worker);
    void domainsDeleteCallback(OAIHttpRequestWorker *worker);
    void domainsGetCallback(OAIHttpRequestWorker *worker);
    void domainsIdGetCallback(OAIHttpRequestWorker *worker);
    void domainsPutCallback(OAIHttpRequestWorker *worker);
    void domainsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void domainsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void domainsDeleteSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void domainsGetSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void domainsIdGetSignal(OAIApi_Core_Dto_Domains_Domain summary);
    void domainsPutSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void domainsUpdateSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);


    void domainsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void domainsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void domainsGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void domainsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Domains_Domain summary);
    void domainsPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void domainsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);

    Q_DECL_DEPRECATED_X("Use domainsCountSignalError() instead")
    void domainsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteSignalError() instead")
    void domainsDeleteSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetSignalError() instead")
    void domainsGetSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsIdGetSignalError() instead")
    void domainsIdGetSignalE(OAIApi_Core_Dto_Domains_Domain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsIdGetSignalError(OAIApi_Core_Dto_Domains_Domain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsPutSignalError() instead")
    void domainsPutSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsPutSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateSignalError() instead")
    void domainsUpdateSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use domainsCountSignalErrorFull() instead")
    void domainsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteSignalErrorFull() instead")
    void domainsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetSignalErrorFull() instead")
    void domainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsIdGetSignalErrorFull() instead")
    void domainsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsPutSignalErrorFull() instead")
    void domainsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateSignalErrorFull() instead")
    void domainsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
