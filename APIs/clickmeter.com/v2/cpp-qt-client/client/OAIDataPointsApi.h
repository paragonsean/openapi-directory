/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataPointsApi_H
#define OAI_OAIDataPointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Aggregated_AggregatedResult.h"
#include "OAIApi_Core_Dto_ClickStream_HitListPage.h"
#include "OAIApi_Core_Dto_Datapoints_Datapoint.h"
#include "OAIApi_Core_Requests_DatapointsBatch.h"
#include "OAIApi_Core_Requests_DeleteBatch.h"
#include "OAIApi_Core_Requests_GenericTextPatch.h"
#include "OAIApi_Core_Responses_CountResponce.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataPointsApi : public QObject {
    Q_OBJECT

public:
    OAIDataPointsApi(const int timeOut = 0);
    ~OAIDataPointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_api_core_requests_delete_batch OAIApi_Core_Requests_DeleteBatch [required]
    */
    virtual void dataPointsBatchDelete(const OAIApi_Core_Requests_DeleteBatch &oai_api_core_requests_delete_batch);

    /**
    * @param[in]  oai_api_core_requests_datapoints_batch OAIApi_Core_Requests_DatapointsBatch [required]
    */
    virtual void dataPointsBatchPost(const OAIApi_Core_Requests_DatapointsBatch &oai_api_core_requests_datapoints_batch);

    /**
    * @param[in]  oai_api_core_requests_datapoints_batch OAIApi_Core_Requests_DatapointsBatch [required]
    */
    virtual void dataPointsBatchPut(const OAIApi_Core_Requests_DatapointsBatch &oai_api_core_requests_datapoints_batch);

    /**
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  only_favorites bool [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void dataPointsCount(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_favorites = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void dataPointsDelete(const qint64 &id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  only_favorites bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void dataPointsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_favorites = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  timeframe QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void dataPointsGetHits(const qint64 &id, const QString &timeframe, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  time_frame QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  hourly bool [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    */
    virtual void dataPointsGetStatisticsAggregatedSingle(const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hourly = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  favourite bool [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void dataPointsGetStatisticsAllList(const QString &type, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &favourite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void dataPointsGetStatisticsList(const qint64 &id, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  time_frame QString [required]
    * @param[in]  from_day QString [optional]
    * @param[in]  to_day QString [optional]
    * @param[in]  hourly bool [optional]
    */
    virtual void dataPointsGetStatisticsSingle(const qint64 &id, const QString &time_frame, const ::OpenAPI::OptionalParam<QString> &from_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_day = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hourly = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void dataPointsPatchFavourite(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_api_core_requests_generic_text_patch OAIApi_Core_Requests_GenericTextPatch [required]
    */
    virtual void dataPointsPatchNotes(const qint64 &id, const OAIApi_Core_Requests_GenericTextPatch &oai_api_core_requests_generic_text_patch);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_api_core_dto_datapoints_datapoint OAIApi_Core_Dto_Datapoints_Datapoint [required]
    */
    virtual void dataPointsPost(const qint64 &id, const OAIApi_Core_Dto_Datapoints_Datapoint &oai_api_core_dto_datapoints_datapoint);

    /**
    * @param[in]  oai_api_core_dto_datapoints_datapoint OAIApi_Core_Dto_Datapoints_Datapoint [required]
    */
    virtual void dataPointsPut(const OAIApi_Core_Dto_Datapoints_Datapoint &oai_api_core_dto_datapoints_datapoint);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void datapointsIdGet(const qint64 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataPointsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void dataPointsBatchPostCallback(OAIHttpRequestWorker *worker);
    void dataPointsBatchPutCallback(OAIHttpRequestWorker *worker);
    void dataPointsCountCallback(OAIHttpRequestWorker *worker);
    void dataPointsDeleteCallback(OAIHttpRequestWorker *worker);
    void dataPointsGetCallback(OAIHttpRequestWorker *worker);
    void dataPointsGetHitsCallback(OAIHttpRequestWorker *worker);
    void dataPointsGetStatisticsAggregatedSingleCallback(OAIHttpRequestWorker *worker);
    void dataPointsGetStatisticsAllListCallback(OAIHttpRequestWorker *worker);
    void dataPointsGetStatisticsListCallback(OAIHttpRequestWorker *worker);
    void dataPointsGetStatisticsSingleCallback(OAIHttpRequestWorker *worker);
    void dataPointsPatchFavouriteCallback(OAIHttpRequestWorker *worker);
    void dataPointsPatchNotesCallback(OAIHttpRequestWorker *worker);
    void dataPointsPostCallback(OAIHttpRequestWorker *worker);
    void dataPointsPutCallback(OAIHttpRequestWorker *worker);
    void datapointsIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataPointsBatchDeleteSignal(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary);
    void dataPointsBatchPostSignal(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary);
    void dataPointsBatchPutSignal(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary);
    void dataPointsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void dataPointsDeleteSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsGetSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsGetHitsSignal(OAIApi_Core_Dto_ClickStream_HitListPage summary);
    void dataPointsGetStatisticsAggregatedSingleSignal(OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void dataPointsGetStatisticsAllListSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void dataPointsGetStatisticsListSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void dataPointsGetStatisticsSingleSignal(OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void dataPointsPatchFavouriteSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsPatchNotesSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsPostSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsPutSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void datapointsIdGetSignal(OAIApi_Core_Dto_Datapoints_Datapoint summary);


    void dataPointsBatchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary);
    void dataPointsBatchPostSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary);
    void dataPointsBatchPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary);
    void dataPointsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void dataPointsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsGetHitsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_ClickStream_HitListPage summary);
    void dataPointsGetStatisticsAggregatedSingleSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void dataPointsGetStatisticsAllListSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void dataPointsGetStatisticsListSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary);
    void dataPointsGetStatisticsSingleSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Aggregated_AggregatedResult summary);
    void dataPointsPatchFavouriteSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsPatchNotesSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsPostSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void dataPointsPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void datapointsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Datapoints_Datapoint summary);

    Q_DECL_DEPRECATED_X("Use dataPointsBatchDeleteSignalError() instead")
    void dataPointsBatchDeleteSignalE(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsBatchDeleteSignalError(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsBatchPostSignalError() instead")
    void dataPointsBatchPostSignalE(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsBatchPostSignalError(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsBatchPutSignalError() instead")
    void dataPointsBatchPutSignalE(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsBatchPutSignalError(OAIApi_Core_Responses_ModifyBatchItemResponce_Api_Core_Dto_Datapoints_Datapoint_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsCountSignalError() instead")
    void dataPointsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsDeleteSignalError() instead")
    void dataPointsDeleteSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsDeleteSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetSignalError() instead")
    void dataPointsGetSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetHitsSignalError() instead")
    void dataPointsGetHitsSignalE(OAIApi_Core_Dto_ClickStream_HitListPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetHitsSignalError(OAIApi_Core_Dto_ClickStream_HitListPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsAggregatedSingleSignalError() instead")
    void dataPointsGetStatisticsAggregatedSingleSignalE(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsAggregatedSingleSignalError(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsAllListSignalError() instead")
    void dataPointsGetStatisticsAllListSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsAllListSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsListSignalError() instead")
    void dataPointsGetStatisticsListSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsListSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Aggregated_AggregatedResult_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsSingleSignalError() instead")
    void dataPointsGetStatisticsSingleSignalE(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsSingleSignalError(OAIApi_Core_Dto_Aggregated_AggregatedResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPatchFavouriteSignalError() instead")
    void dataPointsPatchFavouriteSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPatchFavouriteSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPatchNotesSignalError() instead")
    void dataPointsPatchNotesSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPatchNotesSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPostSignalError() instead")
    void dataPointsPostSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPostSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPutSignalError() instead")
    void dataPointsPutSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPutSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datapointsIdGetSignalError() instead")
    void datapointsIdGetSignalE(OAIApi_Core_Dto_Datapoints_Datapoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void datapointsIdGetSignalError(OAIApi_Core_Dto_Datapoints_Datapoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataPointsBatchDeleteSignalErrorFull() instead")
    void dataPointsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsBatchPostSignalErrorFull() instead")
    void dataPointsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsBatchPutSignalErrorFull() instead")
    void dataPointsBatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsBatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsCountSignalErrorFull() instead")
    void dataPointsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsDeleteSignalErrorFull() instead")
    void dataPointsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetSignalErrorFull() instead")
    void dataPointsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetHitsSignalErrorFull() instead")
    void dataPointsGetHitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetHitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsAggregatedSingleSignalErrorFull() instead")
    void dataPointsGetStatisticsAggregatedSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsAggregatedSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsAllListSignalErrorFull() instead")
    void dataPointsGetStatisticsAllListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsAllListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsListSignalErrorFull() instead")
    void dataPointsGetStatisticsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsGetStatisticsSingleSignalErrorFull() instead")
    void dataPointsGetStatisticsSingleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsGetStatisticsSingleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPatchFavouriteSignalErrorFull() instead")
    void dataPointsPatchFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPatchFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPatchNotesSignalErrorFull() instead")
    void dataPointsPatchNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPatchNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPostSignalErrorFull() instead")
    void dataPointsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataPointsPutSignalErrorFull() instead")
    void dataPointsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataPointsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use datapointsIdGetSignalErrorFull() instead")
    void datapointsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void datapointsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
