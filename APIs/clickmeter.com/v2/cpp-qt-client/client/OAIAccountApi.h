/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Accounting_DomainWhitelistEntry.h"
#include "OAIApi_Core_Dto_Accounting_Guest.h"
#include "OAIApi_Core_Dto_Accounting_IpBlacklistEntry.h"
#include "OAIApi_Core_Dto_Accounting_Plan.h"
#include "OAIApi_Core_Dto_Accounting_User.h"
#include "OAIApi_Core_Requests_PermissionPatchRequest.h"
#include "OAIApi_Core_Responses_CountResponce.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_DomainWhitelistEntry_.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_IpBlacklistEntry_.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Grants_Grant_.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_EntityUri_System_Int64_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  whitelist_id QString [required]
    */
    virtual void accountDeleteDomainWhitelist(const QString &whitelist_id);

    /**
    * @param[in]  guest_id qint64 [required]
    */
    virtual void accountDeleteGuest(const qint64 &guest_id);

    /**
    * @param[in]  blacklist_id QString [required]
    */
    virtual void accountDeleteIpBlacklist(const QString &blacklist_id);


    virtual void accountGet();

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void accountGetDomainWhitelist(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guest_id qint64 [required]
    */
    virtual void accountGetGuest(const qint64 &guest_id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  text_search QString [optional]
    */
    virtual void accountGetGuests(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  text_search QString [optional]
    */
    virtual void accountGetGuestsCount(const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void accountGetIpBlacklist(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  guest_id qint64 [required]
    * @param[in]  entity_type QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  entity_id qint64 [optional]
    */
    virtual void accountGetPermissions(const qint64 &guest_id, const ::OpenAPI::OptionalParam<QString> &entity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &entity_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  guest_id qint64 [required]
    * @param[in]  entity_type QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  entity_id qint64 [optional]
    */
    virtual void accountGetPermissionsCount(const qint64 &guest_id, const ::OpenAPI::OptionalParam<QString> &entity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &entity_id = ::OpenAPI::OptionalParam<qint64>());


    virtual void accountGetPlan();

    /**
    * @param[in]  guest_id qint64 [required]
    * @param[in]  type QString [required]
    * @param[in]  oai_api_core_requests_permission_patch_request OAIApi_Core_Requests_PermissionPatchRequest [required]
    */
    virtual void accountGuestsGuestIdTypePermissionsPatchPost(const qint64 &guest_id, const QString &type, const OAIApi_Core_Requests_PermissionPatchRequest &oai_api_core_requests_permission_patch_request);

    /**
    * @param[in]  guest_id qint64 [required]
    * @param[in]  type QString [required]
    * @param[in]  oai_api_core_requests_permission_patch_request OAIApi_Core_Requests_PermissionPatchRequest [required]
    */
    virtual void accountPatchPermissions(const qint64 &guest_id, const QString &type, const OAIApi_Core_Requests_PermissionPatchRequest &oai_api_core_requests_permission_patch_request);

    /**
    * @param[in]  oai_api_core_dto_accounting_user OAIApi_Core_Dto_Accounting_User [required]
    */
    virtual void accountPost(const OAIApi_Core_Dto_Accounting_User &oai_api_core_dto_accounting_user);

    /**
    * @param[in]  guest_id qint64 [required]
    * @param[in]  oai_api_core_dto_accounting_guest OAIApi_Core_Dto_Accounting_Guest [required]
    */
    virtual void accountPostGuest(const qint64 &guest_id, const OAIApi_Core_Dto_Accounting_Guest &oai_api_core_dto_accounting_guest);

    /**
    * @param[in]  oai_api_core_dto_accounting_domain_whitelist_entry OAIApi_Core_Dto_Accounting_DomainWhitelistEntry [required]
    */
    virtual void accountPutDomainWhitelist(const OAIApi_Core_Dto_Accounting_DomainWhitelistEntry &oai_api_core_dto_accounting_domain_whitelist_entry);

    /**
    * @param[in]  oai_api_core_dto_accounting_guest OAIApi_Core_Dto_Accounting_Guest [required]
    */
    virtual void accountPutGuest(const OAIApi_Core_Dto_Accounting_Guest &oai_api_core_dto_accounting_guest);

    /**
    * @param[in]  oai_api_core_dto_accounting_ip_blacklist_entry OAIApi_Core_Dto_Accounting_IpBlacklistEntry [required]
    */
    virtual void accountPutIpBlacklist(const OAIApi_Core_Dto_Accounting_IpBlacklistEntry &oai_api_core_dto_accounting_ip_blacklist_entry);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountDeleteDomainWhitelistCallback(OAIHttpRequestWorker *worker);
    void accountDeleteGuestCallback(OAIHttpRequestWorker *worker);
    void accountDeleteIpBlacklistCallback(OAIHttpRequestWorker *worker);
    void accountGetCallback(OAIHttpRequestWorker *worker);
    void accountGetDomainWhitelistCallback(OAIHttpRequestWorker *worker);
    void accountGetGuestCallback(OAIHttpRequestWorker *worker);
    void accountGetGuestsCallback(OAIHttpRequestWorker *worker);
    void accountGetGuestsCountCallback(OAIHttpRequestWorker *worker);
    void accountGetIpBlacklistCallback(OAIHttpRequestWorker *worker);
    void accountGetPermissionsCallback(OAIHttpRequestWorker *worker);
    void accountGetPermissionsCountCallback(OAIHttpRequestWorker *worker);
    void accountGetPlanCallback(OAIHttpRequestWorker *worker);
    void accountGuestsGuestIdTypePermissionsPatchPostCallback(OAIHttpRequestWorker *worker);
    void accountPatchPermissionsCallback(OAIHttpRequestWorker *worker);
    void accountPostCallback(OAIHttpRequestWorker *worker);
    void accountPostGuestCallback(OAIHttpRequestWorker *worker);
    void accountPutDomainWhitelistCallback(OAIHttpRequestWorker *worker);
    void accountPutGuestCallback(OAIHttpRequestWorker *worker);
    void accountPutIpBlacklistCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountDeleteDomainWhitelistSignal(OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary);
    void accountDeleteGuestSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void accountDeleteIpBlacklistSignal(OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary);
    void accountGetSignal(OAIApi_Core_Dto_Accounting_User summary);
    void accountGetDomainWhitelistSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_DomainWhitelistEntry_ summary);
    void accountGetGuestSignal(OAIApi_Core_Dto_Accounting_Guest summary);
    void accountGetGuestsSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void accountGetGuestsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void accountGetIpBlacklistSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_IpBlacklistEntry_ summary);
    void accountGetPermissionsSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Grants_Grant_ summary);
    void accountGetPermissionsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void accountGetPlanSignal(OAIApi_Core_Dto_Accounting_Plan summary);
    void accountGuestsGuestIdTypePermissionsPatchPostSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void accountPatchPermissionsSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void accountPostSignal(OAIApi_Core_Dto_Accounting_User summary);
    void accountPostGuestSignal(OAIApi_Core_Dto_Accounting_Guest summary);
    void accountPutDomainWhitelistSignal(OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary);
    void accountPutGuestSignal(OAIApi_Core_Dto_Accounting_Guest summary);
    void accountPutIpBlacklistSignal(OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary);


    void accountDeleteDomainWhitelistSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary);
    void accountDeleteGuestSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void accountDeleteIpBlacklistSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary);
    void accountGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_User summary);
    void accountGetDomainWhitelistSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_DomainWhitelistEntry_ summary);
    void accountGetGuestSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_Guest summary);
    void accountGetGuestsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void accountGetGuestsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void accountGetIpBlacklistSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_IpBlacklistEntry_ summary);
    void accountGetPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Grants_Grant_ summary);
    void accountGetPermissionsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void accountGetPlanSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_Plan summary);
    void accountGuestsGuestIdTypePermissionsPatchPostSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void accountPatchPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void accountPostSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_User summary);
    void accountPostGuestSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_Guest summary);
    void accountPutDomainWhitelistSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary);
    void accountPutGuestSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_Guest summary);
    void accountPutIpBlacklistSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary);

    Q_DECL_DEPRECATED_X("Use accountDeleteDomainWhitelistSignalError() instead")
    void accountDeleteDomainWhitelistSignalE(OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteDomainWhitelistSignalError(OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteGuestSignalError() instead")
    void accountDeleteGuestSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteGuestSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteIpBlacklistSignalError() instead")
    void accountDeleteIpBlacklistSignalE(OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteIpBlacklistSignalError(OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSignalError() instead")
    void accountGetSignalE(OAIApi_Core_Dto_Accounting_User summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalError(OAIApi_Core_Dto_Accounting_User summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetDomainWhitelistSignalError() instead")
    void accountGetDomainWhitelistSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_DomainWhitelistEntry_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetDomainWhitelistSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_DomainWhitelistEntry_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetGuestSignalError() instead")
    void accountGetGuestSignalE(OAIApi_Core_Dto_Accounting_Guest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetGuestSignalError(OAIApi_Core_Dto_Accounting_Guest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetGuestsSignalError() instead")
    void accountGetGuestsSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetGuestsSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetGuestsCountSignalError() instead")
    void accountGetGuestsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetGuestsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetIpBlacklistSignalError() instead")
    void accountGetIpBlacklistSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_IpBlacklistEntry_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetIpBlacklistSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Accounting_IpBlacklistEntry_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPermissionsSignalError() instead")
    void accountGetPermissionsSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Grants_Grant_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPermissionsSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Dto_Grants_Grant_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPermissionsCountSignalError() instead")
    void accountGetPermissionsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPermissionsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPlanSignalError() instead")
    void accountGetPlanSignalE(OAIApi_Core_Dto_Accounting_Plan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPlanSignalError(OAIApi_Core_Dto_Accounting_Plan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGuestsGuestIdTypePermissionsPatchPostSignalError() instead")
    void accountGuestsGuestIdTypePermissionsPatchPostSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGuestsGuestIdTypePermissionsPatchPostSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPatchPermissionsSignalError() instead")
    void accountPatchPermissionsSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPatchPermissionsSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPostSignalError() instead")
    void accountPostSignalE(OAIApi_Core_Dto_Accounting_User summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPostSignalError(OAIApi_Core_Dto_Accounting_User summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPostGuestSignalError() instead")
    void accountPostGuestSignalE(OAIApi_Core_Dto_Accounting_Guest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPostGuestSignalError(OAIApi_Core_Dto_Accounting_Guest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPutDomainWhitelistSignalError() instead")
    void accountPutDomainWhitelistSignalE(OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPutDomainWhitelistSignalError(OAIApi_Core_Dto_Accounting_DomainWhitelistEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPutGuestSignalError() instead")
    void accountPutGuestSignalE(OAIApi_Core_Dto_Accounting_Guest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPutGuestSignalError(OAIApi_Core_Dto_Accounting_Guest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPutIpBlacklistSignalError() instead")
    void accountPutIpBlacklistSignalE(OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPutIpBlacklistSignalError(OAIApi_Core_Dto_Accounting_IpBlacklistEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountDeleteDomainWhitelistSignalErrorFull() instead")
    void accountDeleteDomainWhitelistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteDomainWhitelistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteGuestSignalErrorFull() instead")
    void accountDeleteGuestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteGuestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteIpBlacklistSignalErrorFull() instead")
    void accountDeleteIpBlacklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteIpBlacklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSignalErrorFull() instead")
    void accountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetDomainWhitelistSignalErrorFull() instead")
    void accountGetDomainWhitelistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetDomainWhitelistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetGuestSignalErrorFull() instead")
    void accountGetGuestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetGuestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetGuestsSignalErrorFull() instead")
    void accountGetGuestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetGuestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetGuestsCountSignalErrorFull() instead")
    void accountGetGuestsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetGuestsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetIpBlacklistSignalErrorFull() instead")
    void accountGetIpBlacklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetIpBlacklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPermissionsSignalErrorFull() instead")
    void accountGetPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPermissionsCountSignalErrorFull() instead")
    void accountGetPermissionsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPermissionsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPlanSignalErrorFull() instead")
    void accountGetPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGuestsGuestIdTypePermissionsPatchPostSignalErrorFull() instead")
    void accountGuestsGuestIdTypePermissionsPatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGuestsGuestIdTypePermissionsPatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPatchPermissionsSignalErrorFull() instead")
    void accountPatchPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPatchPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPostSignalErrorFull() instead")
    void accountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPostGuestSignalErrorFull() instead")
    void accountPostGuestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPostGuestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPutDomainWhitelistSignalErrorFull() instead")
    void accountPutDomainWhitelistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPutDomainWhitelistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPutGuestSignalErrorFull() instead")
    void accountPutGuestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPutGuestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPutIpBlacklistSignalErrorFull() instead")
    void accountPutIpBlacklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPutIpBlacklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
