/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Accounting_User.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Accounting_User::OAIApi_Core_Dto_Accounting_User(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Accounting_User::OAIApi_Core_Dto_Accounting_User() {
    this->initializeModel();
}

OAIApi_Core_Dto_Accounting_User::~OAIApi_Core_Dto_Accounting_User() {}

void OAIApi_Core_Dto_Accounting_User::initializeModel() {

    m_bo_go_val_isSet = false;
    m_bo_go_val_isValid = false;

    m_bonus_clicks_isSet = false;
    m_bonus_clicks_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_company_role_isSet = false;
    m_company_role_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_redirect_only_isSet = false;
    m_redirect_only_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_timeframe_min_date_isSet = false;
    m_timeframe_min_date_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_timezonename_isSet = false;
    m_timezonename_isValid = false;
}

void OAIApi_Core_Dto_Accounting_User::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Accounting_User::fromJsonObject(QJsonObject json) {

    m_bo_go_val_isValid = ::OpenAPI::fromJsonValue(m_bo_go_val, json[QString("boGoVal")]);
    m_bo_go_val_isSet = !json[QString("boGoVal")].isNull() && m_bo_go_val_isValid;

    m_bonus_clicks_isValid = ::OpenAPI::fromJsonValue(m_bonus_clicks, json[QString("bonusClicks")]);
    m_bonus_clicks_isSet = !json[QString("bonusClicks")].isNull() && m_bonus_clicks_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_company_role_isValid = ::OpenAPI::fromJsonValue(m_company_role, json[QString("companyRole")]);
    m_company_role_isSet = !json[QString("companyRole")].isNull() && m_company_role_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_redirect_only_isValid = ::OpenAPI::fromJsonValue(m_redirect_only, json[QString("redirectOnly")]);
    m_redirect_only_isSet = !json[QString("redirectOnly")].isNull() && m_redirect_only_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("registrationDate")]);
    m_registration_date_isSet = !json[QString("registrationDate")].isNull() && m_registration_date_isValid;

    m_timeframe_min_date_isValid = ::OpenAPI::fromJsonValue(m_timeframe_min_date, json[QString("timeframeMinDate")]);
    m_timeframe_min_date_isSet = !json[QString("timeframeMinDate")].isNull() && m_timeframe_min_date_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_timezonename_isValid = ::OpenAPI::fromJsonValue(m_timezonename, json[QString("timezonename")]);
    m_timezonename_isSet = !json[QString("timezonename")].isNull() && m_timezonename_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Accounting_User::asJsonObject() const {
    QJsonObject obj;
    if (m_bo_go_val_isSet) {
        obj.insert(QString("boGoVal"), ::OpenAPI::toJsonValue(m_bo_go_val));
    }
    if (m_bonus_clicks_isSet) {
        obj.insert(QString("bonusClicks"), ::OpenAPI::toJsonValue(m_bonus_clicks));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_company_role_isSet) {
        obj.insert(QString("companyRole"), ::OpenAPI::toJsonValue(m_company_role));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_redirect_only_isSet) {
        obj.insert(QString("redirectOnly"), ::OpenAPI::toJsonValue(m_redirect_only));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("registrationDate"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_timeframe_min_date_isSet) {
        obj.insert(QString("timeframeMinDate"), ::OpenAPI::toJsonValue(m_timeframe_min_date));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_timezonename_isSet) {
        obj.insert(QString("timezonename"), ::OpenAPI::toJsonValue(m_timezonename));
    }
    return obj;
}

QString OAIApi_Core_Dto_Accounting_User::getBoGoVal() const {
    return m_bo_go_val;
}
void OAIApi_Core_Dto_Accounting_User::setBoGoVal(const QString &bo_go_val) {
    m_bo_go_val = bo_go_val;
    m_bo_go_val_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_bo_go_val_Set() const{
    return m_bo_go_val_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_bo_go_val_Valid() const{
    return m_bo_go_val_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_User::getBonusClicks() const {
    return m_bonus_clicks;
}
void OAIApi_Core_Dto_Accounting_User::setBonusClicks(const qint64 &bonus_clicks) {
    m_bonus_clicks = bonus_clicks;
    m_bonus_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_bonus_clicks_Set() const{
    return m_bonus_clicks_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_bonus_clicks_Valid() const{
    return m_bonus_clicks_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getCompanyName() const {
    return m_company_name;
}
void OAIApi_Core_Dto_Accounting_User::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getCompanyRole() const {
    return m_company_role;
}
void OAIApi_Core_Dto_Accounting_User::setCompanyRole(const QString &company_role) {
    m_company_role = company_role;
    m_company_role_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_company_role_Set() const{
    return m_company_role_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_company_role_Valid() const{
    return m_company_role_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getEmail() const {
    return m_email;
}
void OAIApi_Core_Dto_Accounting_User::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_email_Set() const{
    return m_email_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getFirstName() const {
    return m_first_name;
}
void OAIApi_Core_Dto_Accounting_User::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getLastName() const {
    return m_last_name;
}
void OAIApi_Core_Dto_Accounting_User::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getPhone() const {
    return m_phone;
}
void OAIApi_Core_Dto_Accounting_User::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAIApi_Core_Dto_Accounting_User::isRedirectOnly() const {
    return m_redirect_only;
}
void OAIApi_Core_Dto_Accounting_User::setRedirectOnly(const bool &redirect_only) {
    m_redirect_only = redirect_only;
    m_redirect_only_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_redirect_only_Set() const{
    return m_redirect_only_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_redirect_only_Valid() const{
    return m_redirect_only_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getRegistrationDate() const {
    return m_registration_date;
}
void OAIApi_Core_Dto_Accounting_User::setRegistrationDate(const QString &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getTimeframeMinDate() const {
    return m_timeframe_min_date;
}
void OAIApi_Core_Dto_Accounting_User::setTimeframeMinDate(const QString &timeframe_min_date) {
    m_timeframe_min_date = timeframe_min_date;
    m_timeframe_min_date_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_timeframe_min_date_Set() const{
    return m_timeframe_min_date_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_timeframe_min_date_Valid() const{
    return m_timeframe_min_date_isValid;
}

qint32 OAIApi_Core_Dto_Accounting_User::getTimezone() const {
    return m_timezone;
}
void OAIApi_Core_Dto_Accounting_User::setTimezone(const qint32 &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIApi_Core_Dto_Accounting_User::getTimezonename() const {
    return m_timezonename;
}
void OAIApi_Core_Dto_Accounting_User::setTimezonename(const QString &timezonename) {
    m_timezonename = timezonename;
    m_timezonename_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_User::is_timezonename_Set() const{
    return m_timezonename_isSet;
}

bool OAIApi_Core_Dto_Accounting_User::is_timezonename_Valid() const{
    return m_timezonename_isValid;
}

bool OAIApi_Core_Dto_Accounting_User::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bo_go_val_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bonus_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_min_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezonename_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Accounting_User::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
