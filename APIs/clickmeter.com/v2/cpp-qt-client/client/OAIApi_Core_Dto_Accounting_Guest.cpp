/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Accounting_Guest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Accounting_Guest::OAIApi_Core_Dto_Accounting_Guest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Accounting_Guest::OAIApi_Core_Dto_Accounting_Guest() {
    this->initializeModel();
}

OAIApi_Core_Dto_Accounting_Guest::~OAIApi_Core_Dto_Accounting_Guest() {}

void OAIApi_Core_Dto_Accounting_Guest::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_conversion_options_isSet = false;
    m_conversion_options_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_current_grant_isSet = false;
    m_current_grant_isValid = false;

    m_date_format_isSet = false;
    m_date_format_isValid = false;

    m_decimal_separator_isSet = false;
    m_decimal_separator_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_extended_grants_isSet = false;
    m_extended_grants_isValid = false;

    m_group_grants_isSet = false;
    m_group_grants_isValid = false;

    m_hit_options_isSet = false;
    m_hit_options_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_login_count_isSet = false;
    m_login_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_number_group_separator_isSet = false;
    m_number_group_separator_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_timeframe_min_date_isSet = false;
    m_timeframe_min_date_isValid = false;

    m_timezonename_isSet = false;
    m_timezonename_isValid = false;

    m_tl_grants_isSet = false;
    m_tl_grants_isValid = false;

    m_tp_grants_isSet = false;
    m_tp_grants_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIApi_Core_Dto_Accounting_Guest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Accounting_Guest::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_conversion_options_isValid = ::OpenAPI::fromJsonValue(m_conversion_options, json[QString("conversionOptions")]);
    m_conversion_options_isSet = !json[QString("conversionOptions")].isNull() && m_conversion_options_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_current_grant_isValid = ::OpenAPI::fromJsonValue(m_current_grant, json[QString("currentGrant")]);
    m_current_grant_isSet = !json[QString("currentGrant")].isNull() && m_current_grant_isValid;

    m_date_format_isValid = ::OpenAPI::fromJsonValue(m_date_format, json[QString("dateFormat")]);
    m_date_format_isSet = !json[QString("dateFormat")].isNull() && m_date_format_isValid;

    m_decimal_separator_isValid = ::OpenAPI::fromJsonValue(m_decimal_separator, json[QString("decimalSeparator")]);
    m_decimal_separator_isSet = !json[QString("decimalSeparator")].isNull() && m_decimal_separator_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_extended_grants_isValid = ::OpenAPI::fromJsonValue(m_extended_grants, json[QString("extendedGrants")]);
    m_extended_grants_isSet = !json[QString("extendedGrants")].isNull() && m_extended_grants_isValid;

    m_group_grants_isValid = ::OpenAPI::fromJsonValue(m_group_grants, json[QString("groupGrants")]);
    m_group_grants_isSet = !json[QString("groupGrants")].isNull() && m_group_grants_isValid;

    m_hit_options_isValid = ::OpenAPI::fromJsonValue(m_hit_options, json[QString("hitOptions")]);
    m_hit_options_isSet = !json[QString("hitOptions")].isNull() && m_hit_options_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_login_count_isValid = ::OpenAPI::fromJsonValue(m_login_count, json[QString("loginCount")]);
    m_login_count_isSet = !json[QString("loginCount")].isNull() && m_login_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_number_group_separator_isValid = ::OpenAPI::fromJsonValue(m_number_group_separator, json[QString("numberGroupSeparator")]);
    m_number_group_separator_isSet = !json[QString("numberGroupSeparator")].isNull() && m_number_group_separator_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_timeframe_min_date_isValid = ::OpenAPI::fromJsonValue(m_timeframe_min_date, json[QString("timeframeMinDate")]);
    m_timeframe_min_date_isSet = !json[QString("timeframeMinDate")].isNull() && m_timeframe_min_date_isValid;

    m_timezonename_isValid = ::OpenAPI::fromJsonValue(m_timezonename, json[QString("timezonename")]);
    m_timezonename_isSet = !json[QString("timezonename")].isNull() && m_timezonename_isValid;

    m_tl_grants_isValid = ::OpenAPI::fromJsonValue(m_tl_grants, json[QString("tlGrants")]);
    m_tl_grants_isSet = !json[QString("tlGrants")].isNull() && m_tl_grants_isValid;

    m_tp_grants_isValid = ::OpenAPI::fromJsonValue(m_tp_grants, json[QString("tpGrants")]);
    m_tp_grants_isSet = !json[QString("tpGrants")].isNull() && m_tp_grants_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Accounting_Guest::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_conversion_options.isSet()) {
        obj.insert(QString("conversionOptions"), ::OpenAPI::toJsonValue(m_conversion_options));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_current_grant.isSet()) {
        obj.insert(QString("currentGrant"), ::OpenAPI::toJsonValue(m_current_grant));
    }
    if (m_date_format_isSet) {
        obj.insert(QString("dateFormat"), ::OpenAPI::toJsonValue(m_date_format));
    }
    if (m_decimal_separator_isSet) {
        obj.insert(QString("decimalSeparator"), ::OpenAPI::toJsonValue(m_decimal_separator));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_extended_grants.isSet()) {
        obj.insert(QString("extendedGrants"), ::OpenAPI::toJsonValue(m_extended_grants));
    }
    if (m_group_grants_isSet) {
        obj.insert(QString("groupGrants"), ::OpenAPI::toJsonValue(m_group_grants));
    }
    if (m_hit_options.isSet()) {
        obj.insert(QString("hitOptions"), ::OpenAPI::toJsonValue(m_hit_options));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_login_count_isSet) {
        obj.insert(QString("loginCount"), ::OpenAPI::toJsonValue(m_login_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_number_group_separator_isSet) {
        obj.insert(QString("numberGroupSeparator"), ::OpenAPI::toJsonValue(m_number_group_separator));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_timeframe_min_date_isSet) {
        obj.insert(QString("timeframeMinDate"), ::OpenAPI::toJsonValue(m_timeframe_min_date));
    }
    if (m_timezonename_isSet) {
        obj.insert(QString("timezonename"), ::OpenAPI::toJsonValue(m_timezonename));
    }
    if (m_tl_grants_isSet) {
        obj.insert(QString("tlGrants"), ::OpenAPI::toJsonValue(m_tl_grants));
    }
    if (m_tp_grants_isSet) {
        obj.insert(QString("tpGrants"), ::OpenAPI::toJsonValue(m_tp_grants));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIApi_Core_Dto_Accounting_Guest::getApiKey() const {
    return m_api_key;
}
void OAIApi_Core_Dto_Accounting_Guest::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_api_key_Valid() const{
    return m_api_key_isValid;
}

OAIApi_Core_Dto_Accounting_ConversionOptions OAIApi_Core_Dto_Accounting_Guest::getConversionOptions() const {
    return m_conversion_options;
}
void OAIApi_Core_Dto_Accounting_Guest::setConversionOptions(const OAIApi_Core_Dto_Accounting_ConversionOptions &conversion_options) {
    m_conversion_options = conversion_options;
    m_conversion_options_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_conversion_options_Set() const{
    return m_conversion_options_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_conversion_options_Valid() const{
    return m_conversion_options_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getCreationDate() const {
    return m_creation_date;
}
void OAIApi_Core_Dto_Accounting_Guest::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIApi_Core_Dto_Grants_Grant OAIApi_Core_Dto_Accounting_Guest::getCurrentGrant() const {
    return m_current_grant;
}
void OAIApi_Core_Dto_Accounting_Guest::setCurrentGrant(const OAIApi_Core_Dto_Grants_Grant &current_grant) {
    m_current_grant = current_grant;
    m_current_grant_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_current_grant_Set() const{
    return m_current_grant_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_current_grant_Valid() const{
    return m_current_grant_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getDateFormat() const {
    return m_date_format;
}
void OAIApi_Core_Dto_Accounting_Guest::setDateFormat(const QString &date_format) {
    m_date_format = date_format;
    m_date_format_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_date_format_Set() const{
    return m_date_format_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_date_format_Valid() const{
    return m_date_format_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getDecimalSeparator() const {
    return m_decimal_separator;
}
void OAIApi_Core_Dto_Accounting_Guest::setDecimalSeparator(const QString &decimal_separator) {
    m_decimal_separator = decimal_separator;
    m_decimal_separator_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_decimal_separator_Set() const{
    return m_decimal_separator_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_decimal_separator_Valid() const{
    return m_decimal_separator_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getEmail() const {
    return m_email;
}
void OAIApi_Core_Dto_Accounting_Guest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_email_Valid() const{
    return m_email_isValid;
}

OAIApi_Core_Dto_Accounting_ExtendedGrants OAIApi_Core_Dto_Accounting_Guest::getExtendedGrants() const {
    return m_extended_grants;
}
void OAIApi_Core_Dto_Accounting_Guest::setExtendedGrants(const OAIApi_Core_Dto_Accounting_ExtendedGrants &extended_grants) {
    m_extended_grants = extended_grants;
    m_extended_grants_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_extended_grants_Set() const{
    return m_extended_grants_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_extended_grants_Valid() const{
    return m_extended_grants_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Guest::getGroupGrants() const {
    return m_group_grants;
}
void OAIApi_Core_Dto_Accounting_Guest::setGroupGrants(const qint64 &group_grants) {
    m_group_grants = group_grants;
    m_group_grants_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_group_grants_Set() const{
    return m_group_grants_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_group_grants_Valid() const{
    return m_group_grants_isValid;
}

OAIApi_Core_Dto_Accounting_HitOptions OAIApi_Core_Dto_Accounting_Guest::getHitOptions() const {
    return m_hit_options;
}
void OAIApi_Core_Dto_Accounting_Guest::setHitOptions(const OAIApi_Core_Dto_Accounting_HitOptions &hit_options) {
    m_hit_options = hit_options;
    m_hit_options_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_hit_options_Set() const{
    return m_hit_options_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_hit_options_Valid() const{
    return m_hit_options_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Guest::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_Accounting_Guest::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getKey() const {
    return m_key;
}
void OAIApi_Core_Dto_Accounting_Guest::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getLanguage() const {
    return m_language;
}
void OAIApi_Core_Dto_Accounting_Guest::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_language_Set() const{
    return m_language_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_language_Valid() const{
    return m_language_isValid;
}

qint32 OAIApi_Core_Dto_Accounting_Guest::getLoginCount() const {
    return m_login_count;
}
void OAIApi_Core_Dto_Accounting_Guest::setLoginCount(const qint32 &login_count) {
    m_login_count = login_count;
    m_login_count_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_login_count_Set() const{
    return m_login_count_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_login_count_Valid() const{
    return m_login_count_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getName() const {
    return m_name;
}
void OAIApi_Core_Dto_Accounting_Guest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getNotes() const {
    return m_notes;
}
void OAIApi_Core_Dto_Accounting_Guest::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getNumberGroupSeparator() const {
    return m_number_group_separator;
}
void OAIApi_Core_Dto_Accounting_Guest::setNumberGroupSeparator(const QString &number_group_separator) {
    m_number_group_separator = number_group_separator;
    m_number_group_separator_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_number_group_separator_Set() const{
    return m_number_group_separator_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_number_group_separator_Valid() const{
    return m_number_group_separator_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getPassword() const {
    return m_password;
}
void OAIApi_Core_Dto_Accounting_Guest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getTimeFormat() const {
    return m_time_format;
}
void OAIApi_Core_Dto_Accounting_Guest::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_time_format_Valid() const{
    return m_time_format_isValid;
}

qint32 OAIApi_Core_Dto_Accounting_Guest::getTimeZone() const {
    return m_time_zone;
}
void OAIApi_Core_Dto_Accounting_Guest::setTimeZone(const qint32 &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getTimeframeMinDate() const {
    return m_timeframe_min_date;
}
void OAIApi_Core_Dto_Accounting_Guest::setTimeframeMinDate(const QString &timeframe_min_date) {
    m_timeframe_min_date = timeframe_min_date;
    m_timeframe_min_date_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_timeframe_min_date_Set() const{
    return m_timeframe_min_date_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_timeframe_min_date_Valid() const{
    return m_timeframe_min_date_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getTimezonename() const {
    return m_timezonename;
}
void OAIApi_Core_Dto_Accounting_Guest::setTimezonename(const QString &timezonename) {
    m_timezonename = timezonename;
    m_timezonename_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_timezonename_Set() const{
    return m_timezonename_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_timezonename_Valid() const{
    return m_timezonename_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Guest::getTlGrants() const {
    return m_tl_grants;
}
void OAIApi_Core_Dto_Accounting_Guest::setTlGrants(const qint64 &tl_grants) {
    m_tl_grants = tl_grants;
    m_tl_grants_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_tl_grants_Set() const{
    return m_tl_grants_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_tl_grants_Valid() const{
    return m_tl_grants_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Guest::getTpGrants() const {
    return m_tp_grants;
}
void OAIApi_Core_Dto_Accounting_Guest::setTpGrants(const qint64 &tp_grants) {
    m_tp_grants = tp_grants;
    m_tp_grants_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_tp_grants_Set() const{
    return m_tp_grants_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_tp_grants_Valid() const{
    return m_tp_grants_isValid;
}

QString OAIApi_Core_Dto_Accounting_Guest::getUserName() const {
    return m_user_name;
}
void OAIApi_Core_Dto_Accounting_Guest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIApi_Core_Dto_Accounting_Guest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIApi_Core_Dto_Accounting_Guest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_grant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_grants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_grants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_group_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_min_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezonename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tl_grants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tp_grants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Accounting_Guest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
