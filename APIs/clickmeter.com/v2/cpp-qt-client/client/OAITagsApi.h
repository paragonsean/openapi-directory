/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITagsApi_H
#define OAI_OAITagsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_Core_Dto_Tags_Tag.h"
#include "OAIApi_Core_Requests_GenericTextPatch.h"
#include "OAIApi_Core_Requests_PatchBody.h"
#include "OAIApi_Core_Responses_CountResponce.h"
#include "OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIApi_Core_Responses_EntityUri_System_Int64_.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITagsApi : public QObject {
    Q_OBJECT

public:
    OAITagsApi(const int timeOut = 0);
    ~OAITagsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  datapoints QString [optional]
    * @param[in]  groups QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void tagsCount(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datapoints = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_id qint64 [required]
    */
    virtual void tagsDelete(const qint64 &tag_id);

    /**
    * @param[in]  tag_id qint64 [required]
    */
    virtual void tagsDeleteRelatedDatapoints(const qint64 &tag_id);

    /**
    * @param[in]  tag_id qint64 [required]
    */
    virtual void tagsDeleteRelatedGroups(const qint64 &tag_id);

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  datapoints QString [optional]
    * @param[in]  groups QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void tagsGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datapoints = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void tagsGetDatapoints(const qint64 &tag_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_id qint64 [required]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void tagsGetDatapointsCount(const qint64 &tag_id, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void tagsGetGroups(const qint64 &tag_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_id qint64 [required]
    * @param[in]  status QString [optional]
    * @param[in]  text_search QString [optional]
    * @param[in]  created_after QString [optional]
    * @param[in]  created_before QString [optional]
    */
    virtual void tagsGetGroupsCount(const qint64 &tag_id, const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_before = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_id qint64 [required]
    * @param[in]  oai_api_core_requests_patch_body OAIApi_Core_Requests_PatchBody [required]
    */
    virtual void tagsPatchDataPoint(const qint64 &tag_id, const OAIApi_Core_Requests_PatchBody &oai_api_core_requests_patch_body);

    /**
    * @param[in]  tag_id qint64 [required]
    * @param[in]  oai_api_core_requests_patch_body OAIApi_Core_Requests_PatchBody [required]
    */
    virtual void tagsPatchGroup(const qint64 &tag_id, const OAIApi_Core_Requests_PatchBody &oai_api_core_requests_patch_body);

    /**
    * @param[in]  tag_id qint64 [required]
    * @param[in]  oai_api_core_requests_generic_text_patch OAIApi_Core_Requests_GenericTextPatch [required]
    */
    virtual void tagsPatchTagName(const qint64 &tag_id, const OAIApi_Core_Requests_GenericTextPatch &oai_api_core_requests_generic_text_patch);

    /**
    * @param[in]  oai_api_core_dto_tags_tag OAIApi_Core_Dto_Tags_Tag [required]
    */
    virtual void tagsPut(const OAIApi_Core_Dto_Tags_Tag &oai_api_core_dto_tags_tag);

    /**
    * @param[in]  tag_id qint64 [required]
    */
    virtual void tagsTagIdGet(const qint64 &tag_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tagsCountCallback(OAIHttpRequestWorker *worker);
    void tagsDeleteCallback(OAIHttpRequestWorker *worker);
    void tagsDeleteRelatedDatapointsCallback(OAIHttpRequestWorker *worker);
    void tagsDeleteRelatedGroupsCallback(OAIHttpRequestWorker *worker);
    void tagsGetCallback(OAIHttpRequestWorker *worker);
    void tagsGetDatapointsCallback(OAIHttpRequestWorker *worker);
    void tagsGetDatapointsCountCallback(OAIHttpRequestWorker *worker);
    void tagsGetGroupsCallback(OAIHttpRequestWorker *worker);
    void tagsGetGroupsCountCallback(OAIHttpRequestWorker *worker);
    void tagsPatchDataPointCallback(OAIHttpRequestWorker *worker);
    void tagsPatchGroupCallback(OAIHttpRequestWorker *worker);
    void tagsPatchTagNameCallback(OAIHttpRequestWorker *worker);
    void tagsPutCallback(OAIHttpRequestWorker *worker);
    void tagsTagIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tagsCountSignal(OAIObject summary);
    void tagsDeleteSignal(OAIObject summary);
    void tagsDeleteRelatedDatapointsSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsDeleteRelatedGroupsSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetDatapointsSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetDatapointsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void tagsGetGroupsSignal(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetGroupsCountSignal(OAIApi_Core_Responses_CountResponce summary);
    void tagsPatchDataPointSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsPatchGroupSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsPatchTagNameSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsPutSignal(OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsTagIdGetSignal(OAIApi_Core_Dto_Tags_Tag summary);


    void tagsCountSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tagsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tagsDeleteRelatedDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsDeleteRelatedGroupsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetDatapointsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetDatapointsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void tagsGetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsGetGroupsCountSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_CountResponce summary);
    void tagsPatchDataPointSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsPatchGroupSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsPatchTagNameSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsPutSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Responses_EntityUri_System_Int64_ summary);
    void tagsTagIdGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Core_Dto_Tags_Tag summary);

    Q_DECL_DEPRECATED_X("Use tagsCountSignalError() instead")
    void tagsCountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsCountSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteSignalError() instead")
    void tagsDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteRelatedDatapointsSignalError() instead")
    void tagsDeleteRelatedDatapointsSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteRelatedDatapointsSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteRelatedGroupsSignalError() instead")
    void tagsDeleteRelatedGroupsSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteRelatedGroupsSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetSignalError() instead")
    void tagsGetSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetDatapointsSignalError() instead")
    void tagsGetDatapointsSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetDatapointsSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetDatapointsCountSignalError() instead")
    void tagsGetDatapointsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetDatapointsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetGroupsSignalError() instead")
    void tagsGetGroupsSignalE(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetGroupsSignalError(OAIApi_Core_Responses_EntitiesResponse_Api_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetGroupsCountSignalError() instead")
    void tagsGetGroupsCountSignalE(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetGroupsCountSignalError(OAIApi_Core_Responses_CountResponce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPatchDataPointSignalError() instead")
    void tagsPatchDataPointSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPatchDataPointSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPatchGroupSignalError() instead")
    void tagsPatchGroupSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPatchGroupSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPatchTagNameSignalError() instead")
    void tagsPatchTagNameSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPatchTagNameSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPutSignalError() instead")
    void tagsPutSignalE(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPutSignalError(OAIApi_Core_Responses_EntityUri_System_Int64_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagIdGetSignalError() instead")
    void tagsTagIdGetSignalE(OAIApi_Core_Dto_Tags_Tag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagIdGetSignalError(OAIApi_Core_Dto_Tags_Tag summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tagsCountSignalErrorFull() instead")
    void tagsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteSignalErrorFull() instead")
    void tagsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteRelatedDatapointsSignalErrorFull() instead")
    void tagsDeleteRelatedDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteRelatedDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsDeleteRelatedGroupsSignalErrorFull() instead")
    void tagsDeleteRelatedGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsDeleteRelatedGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetSignalErrorFull() instead")
    void tagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetDatapointsSignalErrorFull() instead")
    void tagsGetDatapointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetDatapointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetDatapointsCountSignalErrorFull() instead")
    void tagsGetDatapointsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetDatapointsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetGroupsSignalErrorFull() instead")
    void tagsGetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetGroupsCountSignalErrorFull() instead")
    void tagsGetGroupsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetGroupsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPatchDataPointSignalErrorFull() instead")
    void tagsPatchDataPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPatchDataPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPatchGroupSignalErrorFull() instead")
    void tagsPatchGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPatchGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPatchTagNameSignalErrorFull() instead")
    void tagsPatchTagNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPatchTagNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsPutSignalErrorFull() instead")
    void tagsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagIdGetSignalErrorFull() instead")
    void tagsTagIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
