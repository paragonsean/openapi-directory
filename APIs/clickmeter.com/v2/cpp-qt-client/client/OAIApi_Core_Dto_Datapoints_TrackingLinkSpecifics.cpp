/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics() {
    this->initializeModel();
}

OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::~OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics() {}

void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::initializeModel() {

    m_append_query_isSet = false;
    m_append_query_isValid = false;

    m_browser_destination_item_isSet = false;
    m_browser_destination_item_isValid = false;

    m_destination_mode_isSet = false;
    m_destination_mode_isValid = false;

    m_domain_id_isSet = false;
    m_domain_id_isValid = false;

    m_encode_url_isSet = false;
    m_encode_url_isValid = false;

    m_expiration_clicks_isSet = false;
    m_expiration_clicks_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_first_url_isSet = false;
    m_first_url_isValid = false;

    m_go_domain_id_isSet = false;
    m_go_domain_id_isValid = false;

    m_hide_url_isSet = false;
    m_hide_url_isValid = false;

    m_hide_url_title_isSet = false;
    m_hide_url_title_isValid = false;

    m_is_ab_test_isSet = false;
    m_is_ab_test_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_pause_after_clicks_expiration_isSet = false;
    m_pause_after_clicks_expiration_isValid = false;

    m_pause_after_date_expiration_isSet = false;
    m_pause_after_date_expiration_isValid = false;

    m_random_destination_items_isSet = false;
    m_random_destination_items_isValid = false;

    m_redirect_type_isSet = false;
    m_redirect_type_isValid = false;

    m_referrer_clean_isSet = false;
    m_referrer_clean_isValid = false;

    m_scripts_isSet = false;
    m_scripts_isValid = false;

    m_sequential_destination_items_isSet = false;
    m_sequential_destination_items_isValid = false;

    m_spillover_destination_items_isSet = false;
    m_spillover_destination_items_isValid = false;

    m_unique_destination_item_isSet = false;
    m_unique_destination_item_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_after_clicks_expiration_isSet = false;
    m_url_after_clicks_expiration_isValid = false;

    m_url_after_date_expiration_isSet = false;
    m_url_after_date_expiration_isValid = false;

    m_urls_by_language_isSet = false;
    m_urls_by_language_isValid = false;

    m_urls_by_nation_isSet = false;
    m_urls_by_nation_isValid = false;

    m_weighted_destination_items_isSet = false;
    m_weighted_destination_items_isValid = false;
}

void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::fromJsonObject(QJsonObject json) {

    m_append_query_isValid = ::OpenAPI::fromJsonValue(m_append_query, json[QString("appendQuery")]);
    m_append_query_isSet = !json[QString("appendQuery")].isNull() && m_append_query_isValid;

    m_browser_destination_item_isValid = ::OpenAPI::fromJsonValue(m_browser_destination_item, json[QString("browserDestinationItem")]);
    m_browser_destination_item_isSet = !json[QString("browserDestinationItem")].isNull() && m_browser_destination_item_isValid;

    m_destination_mode_isValid = ::OpenAPI::fromJsonValue(m_destination_mode, json[QString("destinationMode")]);
    m_destination_mode_isSet = !json[QString("destinationMode")].isNull() && m_destination_mode_isValid;

    m_domain_id_isValid = ::OpenAPI::fromJsonValue(m_domain_id, json[QString("domainId")]);
    m_domain_id_isSet = !json[QString("domainId")].isNull() && m_domain_id_isValid;

    m_encode_url_isValid = ::OpenAPI::fromJsonValue(m_encode_url, json[QString("encodeUrl")]);
    m_encode_url_isSet = !json[QString("encodeUrl")].isNull() && m_encode_url_isValid;

    m_expiration_clicks_isValid = ::OpenAPI::fromJsonValue(m_expiration_clicks, json[QString("expirationClicks")]);
    m_expiration_clicks_isSet = !json[QString("expirationClicks")].isNull() && m_expiration_clicks_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_first_url_isValid = ::OpenAPI::fromJsonValue(m_first_url, json[QString("firstUrl")]);
    m_first_url_isSet = !json[QString("firstUrl")].isNull() && m_first_url_isValid;

    m_go_domain_id_isValid = ::OpenAPI::fromJsonValue(m_go_domain_id, json[QString("goDomainId")]);
    m_go_domain_id_isSet = !json[QString("goDomainId")].isNull() && m_go_domain_id_isValid;

    m_hide_url_isValid = ::OpenAPI::fromJsonValue(m_hide_url, json[QString("hideUrl")]);
    m_hide_url_isSet = !json[QString("hideUrl")].isNull() && m_hide_url_isValid;

    m_hide_url_title_isValid = ::OpenAPI::fromJsonValue(m_hide_url_title, json[QString("hideUrlTitle")]);
    m_hide_url_title_isSet = !json[QString("hideUrlTitle")].isNull() && m_hide_url_title_isValid;

    m_is_ab_test_isValid = ::OpenAPI::fromJsonValue(m_is_ab_test, json[QString("isABTest")]);
    m_is_ab_test_isSet = !json[QString("isABTest")].isNull() && m_is_ab_test_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_pause_after_clicks_expiration_isValid = ::OpenAPI::fromJsonValue(m_pause_after_clicks_expiration, json[QString("pauseAfterClicksExpiration")]);
    m_pause_after_clicks_expiration_isSet = !json[QString("pauseAfterClicksExpiration")].isNull() && m_pause_after_clicks_expiration_isValid;

    m_pause_after_date_expiration_isValid = ::OpenAPI::fromJsonValue(m_pause_after_date_expiration, json[QString("pauseAfterDateExpiration")]);
    m_pause_after_date_expiration_isSet = !json[QString("pauseAfterDateExpiration")].isNull() && m_pause_after_date_expiration_isValid;

    m_random_destination_items_isValid = ::OpenAPI::fromJsonValue(m_random_destination_items, json[QString("randomDestinationItems")]);
    m_random_destination_items_isSet = !json[QString("randomDestinationItems")].isNull() && m_random_destination_items_isValid;

    m_redirect_type_isValid = ::OpenAPI::fromJsonValue(m_redirect_type, json[QString("redirectType")]);
    m_redirect_type_isSet = !json[QString("redirectType")].isNull() && m_redirect_type_isValid;

    m_referrer_clean_isValid = ::OpenAPI::fromJsonValue(m_referrer_clean, json[QString("referrerClean")]);
    m_referrer_clean_isSet = !json[QString("referrerClean")].isNull() && m_referrer_clean_isValid;

    m_scripts_isValid = ::OpenAPI::fromJsonValue(m_scripts, json[QString("scripts")]);
    m_scripts_isSet = !json[QString("scripts")].isNull() && m_scripts_isValid;

    m_sequential_destination_items_isValid = ::OpenAPI::fromJsonValue(m_sequential_destination_items, json[QString("sequentialDestinationItems")]);
    m_sequential_destination_items_isSet = !json[QString("sequentialDestinationItems")].isNull() && m_sequential_destination_items_isValid;

    m_spillover_destination_items_isValid = ::OpenAPI::fromJsonValue(m_spillover_destination_items, json[QString("spilloverDestinationItems")]);
    m_spillover_destination_items_isSet = !json[QString("spilloverDestinationItems")].isNull() && m_spillover_destination_items_isValid;

    m_unique_destination_item_isValid = ::OpenAPI::fromJsonValue(m_unique_destination_item, json[QString("uniqueDestinationItem")]);
    m_unique_destination_item_isSet = !json[QString("uniqueDestinationItem")].isNull() && m_unique_destination_item_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_after_clicks_expiration_isValid = ::OpenAPI::fromJsonValue(m_url_after_clicks_expiration, json[QString("urlAfterClicksExpiration")]);
    m_url_after_clicks_expiration_isSet = !json[QString("urlAfterClicksExpiration")].isNull() && m_url_after_clicks_expiration_isValid;

    m_url_after_date_expiration_isValid = ::OpenAPI::fromJsonValue(m_url_after_date_expiration, json[QString("urlAfterDateExpiration")]);
    m_url_after_date_expiration_isSet = !json[QString("urlAfterDateExpiration")].isNull() && m_url_after_date_expiration_isValid;

    m_urls_by_language_isValid = ::OpenAPI::fromJsonValue(m_urls_by_language, json[QString("urlsByLanguage")]);
    m_urls_by_language_isSet = !json[QString("urlsByLanguage")].isNull() && m_urls_by_language_isValid;

    m_urls_by_nation_isValid = ::OpenAPI::fromJsonValue(m_urls_by_nation, json[QString("urlsByNation")]);
    m_urls_by_nation_isSet = !json[QString("urlsByNation")].isNull() && m_urls_by_nation_isValid;

    m_weighted_destination_items_isValid = ::OpenAPI::fromJsonValue(m_weighted_destination_items, json[QString("weightedDestinationItems")]);
    m_weighted_destination_items_isSet = !json[QString("weightedDestinationItems")].isNull() && m_weighted_destination_items_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::asJsonObject() const {
    QJsonObject obj;
    if (m_append_query_isSet) {
        obj.insert(QString("appendQuery"), ::OpenAPI::toJsonValue(m_append_query));
    }
    if (m_browser_destination_item.isSet()) {
        obj.insert(QString("browserDestinationItem"), ::OpenAPI::toJsonValue(m_browser_destination_item));
    }
    if (m_destination_mode_isSet) {
        obj.insert(QString("destinationMode"), ::OpenAPI::toJsonValue(m_destination_mode));
    }
    if (m_domain_id_isSet) {
        obj.insert(QString("domainId"), ::OpenAPI::toJsonValue(m_domain_id));
    }
    if (m_encode_url_isSet) {
        obj.insert(QString("encodeUrl"), ::OpenAPI::toJsonValue(m_encode_url));
    }
    if (m_expiration_clicks_isSet) {
        obj.insert(QString("expirationClicks"), ::OpenAPI::toJsonValue(m_expiration_clicks));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_first_url_isSet) {
        obj.insert(QString("firstUrl"), ::OpenAPI::toJsonValue(m_first_url));
    }
    if (m_go_domain_id_isSet) {
        obj.insert(QString("goDomainId"), ::OpenAPI::toJsonValue(m_go_domain_id));
    }
    if (m_hide_url_isSet) {
        obj.insert(QString("hideUrl"), ::OpenAPI::toJsonValue(m_hide_url));
    }
    if (m_hide_url_title_isSet) {
        obj.insert(QString("hideUrlTitle"), ::OpenAPI::toJsonValue(m_hide_url_title));
    }
    if (m_is_ab_test_isSet) {
        obj.insert(QString("isABTest"), ::OpenAPI::toJsonValue(m_is_ab_test));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_pause_after_clicks_expiration_isSet) {
        obj.insert(QString("pauseAfterClicksExpiration"), ::OpenAPI::toJsonValue(m_pause_after_clicks_expiration));
    }
    if (m_pause_after_date_expiration_isSet) {
        obj.insert(QString("pauseAfterDateExpiration"), ::OpenAPI::toJsonValue(m_pause_after_date_expiration));
    }
    if (m_random_destination_items.size() > 0) {
        obj.insert(QString("randomDestinationItems"), ::OpenAPI::toJsonValue(m_random_destination_items));
    }
    if (m_redirect_type_isSet) {
        obj.insert(QString("redirectType"), ::OpenAPI::toJsonValue(m_redirect_type));
    }
    if (m_referrer_clean_isSet) {
        obj.insert(QString("referrerClean"), ::OpenAPI::toJsonValue(m_referrer_clean));
    }
    if (m_scripts.size() > 0) {
        obj.insert(QString("scripts"), ::OpenAPI::toJsonValue(m_scripts));
    }
    if (m_sequential_destination_items.size() > 0) {
        obj.insert(QString("sequentialDestinationItems"), ::OpenAPI::toJsonValue(m_sequential_destination_items));
    }
    if (m_spillover_destination_items.size() > 0) {
        obj.insert(QString("spilloverDestinationItems"), ::OpenAPI::toJsonValue(m_spillover_destination_items));
    }
    if (m_unique_destination_item.isSet()) {
        obj.insert(QString("uniqueDestinationItem"), ::OpenAPI::toJsonValue(m_unique_destination_item));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_after_clicks_expiration_isSet) {
        obj.insert(QString("urlAfterClicksExpiration"), ::OpenAPI::toJsonValue(m_url_after_clicks_expiration));
    }
    if (m_url_after_date_expiration_isSet) {
        obj.insert(QString("urlAfterDateExpiration"), ::OpenAPI::toJsonValue(m_url_after_date_expiration));
    }
    if (m_urls_by_language.size() > 0) {
        obj.insert(QString("urlsByLanguage"), ::OpenAPI::toJsonValue(m_urls_by_language));
    }
    if (m_urls_by_nation.size() > 0) {
        obj.insert(QString("urlsByNation"), ::OpenAPI::toJsonValue(m_urls_by_nation));
    }
    if (m_weighted_destination_items.size() > 0) {
        obj.insert(QString("weightedDestinationItems"), ::OpenAPI::toJsonValue(m_weighted_destination_items));
    }
    return obj;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isAppendQuery() const {
    return m_append_query;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setAppendQuery(const bool &append_query) {
    m_append_query = append_query;
    m_append_query_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_append_query_Set() const{
    return m_append_query_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_append_query_Valid() const{
    return m_append_query_isValid;
}

OAIApi_Core_Dto_Datapoints_BrowserBaseDestinationItem OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getBrowserDestinationItem() const {
    return m_browser_destination_item;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setBrowserDestinationItem(const OAIApi_Core_Dto_Datapoints_BrowserBaseDestinationItem &browser_destination_item) {
    m_browser_destination_item = browser_destination_item;
    m_browser_destination_item_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_browser_destination_item_Set() const{
    return m_browser_destination_item_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_browser_destination_item_Valid() const{
    return m_browser_destination_item_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getDestinationMode() const {
    return m_destination_mode;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setDestinationMode(const QString &destination_mode) {
    m_destination_mode = destination_mode;
    m_destination_mode_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_destination_mode_Set() const{
    return m_destination_mode_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_destination_mode_Valid() const{
    return m_destination_mode_isValid;
}

qint32 OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getDomainId() const {
    return m_domain_id;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setDomainId(const qint32 &domain_id) {
    m_domain_id = domain_id;
    m_domain_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_domain_id_Set() const{
    return m_domain_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_domain_id_Valid() const{
    return m_domain_id_isValid;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isEncodeUrl() const {
    return m_encode_url;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setEncodeUrl(const bool &encode_url) {
    m_encode_url = encode_url;
    m_encode_url_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_encode_url_Set() const{
    return m_encode_url_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_encode_url_Valid() const{
    return m_encode_url_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getExpirationClicks() const {
    return m_expiration_clicks;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setExpirationClicks(const qint64 &expiration_clicks) {
    m_expiration_clicks = expiration_clicks;
    m_expiration_clicks_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_expiration_clicks_Set() const{
    return m_expiration_clicks_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_expiration_clicks_Valid() const{
    return m_expiration_clicks_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getExpirationDate() const {
    return m_expiration_date;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getFirstUrl() const {
    return m_first_url;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setFirstUrl(const QString &first_url) {
    m_first_url = first_url;
    m_first_url_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_first_url_Set() const{
    return m_first_url_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_first_url_Valid() const{
    return m_first_url_isValid;
}

qint32 OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getGoDomainId() const {
    return m_go_domain_id;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setGoDomainId(const qint32 &go_domain_id) {
    m_go_domain_id = go_domain_id;
    m_go_domain_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_go_domain_id_Set() const{
    return m_go_domain_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_go_domain_id_Valid() const{
    return m_go_domain_id_isValid;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isHideUrl() const {
    return m_hide_url;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setHideUrl(const bool &hide_url) {
    m_hide_url = hide_url;
    m_hide_url_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_hide_url_Set() const{
    return m_hide_url_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_hide_url_Valid() const{
    return m_hide_url_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getHideUrlTitle() const {
    return m_hide_url_title;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setHideUrlTitle(const QString &hide_url_title) {
    m_hide_url_title = hide_url_title;
    m_hide_url_title_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_hide_url_title_Set() const{
    return m_hide_url_title_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_hide_url_title_Valid() const{
    return m_hide_url_title_isValid;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isIsAbTest() const {
    return m_is_ab_test;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setIsAbTest(const bool &is_ab_test) {
    m_is_ab_test = is_ab_test;
    m_is_ab_test_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_is_ab_test_Set() const{
    return m_is_ab_test_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_is_ab_test_Valid() const{
    return m_is_ab_test_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getPassword() const {
    return m_password;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_password_Set() const{
    return m_password_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isPauseAfterClicksExpiration() const {
    return m_pause_after_clicks_expiration;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setPauseAfterClicksExpiration(const bool &pause_after_clicks_expiration) {
    m_pause_after_clicks_expiration = pause_after_clicks_expiration;
    m_pause_after_clicks_expiration_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_pause_after_clicks_expiration_Set() const{
    return m_pause_after_clicks_expiration_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_pause_after_clicks_expiration_Valid() const{
    return m_pause_after_clicks_expiration_isValid;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isPauseAfterDateExpiration() const {
    return m_pause_after_date_expiration;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setPauseAfterDateExpiration(const bool &pause_after_date_expiration) {
    m_pause_after_date_expiration = pause_after_date_expiration;
    m_pause_after_date_expiration_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_pause_after_date_expiration_Set() const{
    return m_pause_after_date_expiration_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_pause_after_date_expiration_Valid() const{
    return m_pause_after_date_expiration_isValid;
}

QList<OAIApi_Core_Dto_Datapoints_MultipleDestinationItem> OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getRandomDestinationItems() const {
    return m_random_destination_items;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setRandomDestinationItems(const QList<OAIApi_Core_Dto_Datapoints_MultipleDestinationItem> &random_destination_items) {
    m_random_destination_items = random_destination_items;
    m_random_destination_items_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_random_destination_items_Set() const{
    return m_random_destination_items_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_random_destination_items_Valid() const{
    return m_random_destination_items_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getRedirectType() const {
    return m_redirect_type;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setRedirectType(const QString &redirect_type) {
    m_redirect_type = redirect_type;
    m_redirect_type_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_redirect_type_Set() const{
    return m_redirect_type_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_redirect_type_Valid() const{
    return m_redirect_type_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getReferrerClean() const {
    return m_referrer_clean;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setReferrerClean(const QString &referrer_clean) {
    m_referrer_clean = referrer_clean;
    m_referrer_clean_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_referrer_clean_Set() const{
    return m_referrer_clean_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_referrer_clean_Valid() const{
    return m_referrer_clean_isValid;
}

QList<OAIApi_Core_Dto_Datapoints_DatapointRetargetingInfo> OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getScripts() const {
    return m_scripts;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setScripts(const QList<OAIApi_Core_Dto_Datapoints_DatapointRetargetingInfo> &scripts) {
    m_scripts = scripts;
    m_scripts_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_scripts_Set() const{
    return m_scripts_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_scripts_Valid() const{
    return m_scripts_isValid;
}

QList<OAIApi_Core_Dto_Datapoints_MultipleDestinationItem> OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getSequentialDestinationItems() const {
    return m_sequential_destination_items;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setSequentialDestinationItems(const QList<OAIApi_Core_Dto_Datapoints_MultipleDestinationItem> &sequential_destination_items) {
    m_sequential_destination_items = sequential_destination_items;
    m_sequential_destination_items_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_sequential_destination_items_Set() const{
    return m_sequential_destination_items_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_sequential_destination_items_Valid() const{
    return m_sequential_destination_items_isValid;
}

QList<OAIApi_Core_Dto_Datapoints_MultipleDestinationItem> OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getSpilloverDestinationItems() const {
    return m_spillover_destination_items;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setSpilloverDestinationItems(const QList<OAIApi_Core_Dto_Datapoints_MultipleDestinationItem> &spillover_destination_items) {
    m_spillover_destination_items = spillover_destination_items;
    m_spillover_destination_items_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_spillover_destination_items_Set() const{
    return m_spillover_destination_items_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_spillover_destination_items_Valid() const{
    return m_spillover_destination_items_isValid;
}

OAIApi_Core_Dto_Datapoints_UniqueDestinationItem OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getUniqueDestinationItem() const {
    return m_unique_destination_item;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setUniqueDestinationItem(const OAIApi_Core_Dto_Datapoints_UniqueDestinationItem &unique_destination_item) {
    m_unique_destination_item = unique_destination_item;
    m_unique_destination_item_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_unique_destination_item_Set() const{
    return m_unique_destination_item_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_unique_destination_item_Valid() const{
    return m_unique_destination_item_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getUrl() const {
    return m_url;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_url_Set() const{
    return m_url_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getUrlAfterClicksExpiration() const {
    return m_url_after_clicks_expiration;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setUrlAfterClicksExpiration(const QString &url_after_clicks_expiration) {
    m_url_after_clicks_expiration = url_after_clicks_expiration;
    m_url_after_clicks_expiration_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_url_after_clicks_expiration_Set() const{
    return m_url_after_clicks_expiration_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_url_after_clicks_expiration_Valid() const{
    return m_url_after_clicks_expiration_isValid;
}

QString OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getUrlAfterDateExpiration() const {
    return m_url_after_date_expiration;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setUrlAfterDateExpiration(const QString &url_after_date_expiration) {
    m_url_after_date_expiration = url_after_date_expiration;
    m_url_after_date_expiration_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_url_after_date_expiration_Set() const{
    return m_url_after_date_expiration_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_url_after_date_expiration_Valid() const{
    return m_url_after_date_expiration_isValid;
}

QList<OAIApi_Core_Dto_Datapoints_UrlByLanguageItem> OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getUrlsByLanguage() const {
    return m_urls_by_language;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setUrlsByLanguage(const QList<OAIApi_Core_Dto_Datapoints_UrlByLanguageItem> &urls_by_language) {
    m_urls_by_language = urls_by_language;
    m_urls_by_language_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_urls_by_language_Set() const{
    return m_urls_by_language_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_urls_by_language_Valid() const{
    return m_urls_by_language_isValid;
}

QList<OAIApi_Core_Dto_Datapoints_UrlByNationItem> OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getUrlsByNation() const {
    return m_urls_by_nation;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setUrlsByNation(const QList<OAIApi_Core_Dto_Datapoints_UrlByNationItem> &urls_by_nation) {
    m_urls_by_nation = urls_by_nation;
    m_urls_by_nation_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_urls_by_nation_Set() const{
    return m_urls_by_nation_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_urls_by_nation_Valid() const{
    return m_urls_by_nation_isValid;
}

QList<OAIApi_Core_Dto_Datapoints_WeightedDestinationItem> OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::getWeightedDestinationItems() const {
    return m_weighted_destination_items;
}
void OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::setWeightedDestinationItems(const QList<OAIApi_Core_Dto_Datapoints_WeightedDestinationItem> &weighted_destination_items) {
    m_weighted_destination_items = weighted_destination_items;
    m_weighted_destination_items_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_weighted_destination_items_Set() const{
    return m_weighted_destination_items_isSet;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::is_weighted_destination_items_Valid() const{
    return m_weighted_destination_items_isValid;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_append_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_destination_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encode_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_go_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_url_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ab_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_after_clicks_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_after_date_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_destination_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_clean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scripts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequential_destination_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spillover_destination_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_destination_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_after_clicks_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_after_date_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_by_language.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_by_nation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_destination_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
