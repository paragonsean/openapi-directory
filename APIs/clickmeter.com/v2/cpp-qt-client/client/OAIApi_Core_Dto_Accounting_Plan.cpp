/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Accounting_Plan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Accounting_Plan::OAIApi_Core_Dto_Accounting_Plan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Accounting_Plan::OAIApi_Core_Dto_Accounting_Plan() {
    this->initializeModel();
}

OAIApi_Core_Dto_Accounting_Plan::~OAIApi_Core_Dto_Accounting_Plan() {}

void OAIApi_Core_Dto_Accounting_Plan::initializeModel() {

    m_allowed_personal_domains_isSet = false;
    m_allowed_personal_domains_isValid = false;

    m_allowed_personal_urls_isSet = false;
    m_allowed_personal_urls_isValid = false;

    m_billing_period_end_isSet = false;
    m_billing_period_end_isValid = false;

    m_billing_period_start_isSet = false;
    m_billing_period_start_isValid = false;

    m_bonus_monthly_events_isSet = false;
    m_bonus_monthly_events_isValid = false;

    m_maximum_datapoints_isSet = false;
    m_maximum_datapoints_isValid = false;

    m_maximum_guests_isSet = false;
    m_maximum_guests_isValid = false;

    m_monthly_events_isSet = false;
    m_monthly_events_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_recurring_period_isSet = false;
    m_recurring_period_isValid = false;

    m_used_datapoints_isSet = false;
    m_used_datapoints_isValid = false;

    m_used_monthly_events_isSet = false;
    m_used_monthly_events_isValid = false;
}

void OAIApi_Core_Dto_Accounting_Plan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Accounting_Plan::fromJsonObject(QJsonObject json) {

    m_allowed_personal_domains_isValid = ::OpenAPI::fromJsonValue(m_allowed_personal_domains, json[QString("allowedPersonalDomains")]);
    m_allowed_personal_domains_isSet = !json[QString("allowedPersonalDomains")].isNull() && m_allowed_personal_domains_isValid;

    m_allowed_personal_urls_isValid = ::OpenAPI::fromJsonValue(m_allowed_personal_urls, json[QString("allowedPersonalUrls")]);
    m_allowed_personal_urls_isSet = !json[QString("allowedPersonalUrls")].isNull() && m_allowed_personal_urls_isValid;

    m_billing_period_end_isValid = ::OpenAPI::fromJsonValue(m_billing_period_end, json[QString("billingPeriodEnd")]);
    m_billing_period_end_isSet = !json[QString("billingPeriodEnd")].isNull() && m_billing_period_end_isValid;

    m_billing_period_start_isValid = ::OpenAPI::fromJsonValue(m_billing_period_start, json[QString("billingPeriodStart")]);
    m_billing_period_start_isSet = !json[QString("billingPeriodStart")].isNull() && m_billing_period_start_isValid;

    m_bonus_monthly_events_isValid = ::OpenAPI::fromJsonValue(m_bonus_monthly_events, json[QString("bonusMonthlyEvents")]);
    m_bonus_monthly_events_isSet = !json[QString("bonusMonthlyEvents")].isNull() && m_bonus_monthly_events_isValid;

    m_maximum_datapoints_isValid = ::OpenAPI::fromJsonValue(m_maximum_datapoints, json[QString("maximumDatapoints")]);
    m_maximum_datapoints_isSet = !json[QString("maximumDatapoints")].isNull() && m_maximum_datapoints_isValid;

    m_maximum_guests_isValid = ::OpenAPI::fromJsonValue(m_maximum_guests, json[QString("maximumGuests")]);
    m_maximum_guests_isSet = !json[QString("maximumGuests")].isNull() && m_maximum_guests_isValid;

    m_monthly_events_isValid = ::OpenAPI::fromJsonValue(m_monthly_events, json[QString("monthlyEvents")]);
    m_monthly_events_isSet = !json[QString("monthlyEvents")].isNull() && m_monthly_events_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_recurring_period_isValid = ::OpenAPI::fromJsonValue(m_recurring_period, json[QString("recurringPeriod")]);
    m_recurring_period_isSet = !json[QString("recurringPeriod")].isNull() && m_recurring_period_isValid;

    m_used_datapoints_isValid = ::OpenAPI::fromJsonValue(m_used_datapoints, json[QString("usedDatapoints")]);
    m_used_datapoints_isSet = !json[QString("usedDatapoints")].isNull() && m_used_datapoints_isValid;

    m_used_monthly_events_isValid = ::OpenAPI::fromJsonValue(m_used_monthly_events, json[QString("usedMonthlyEvents")]);
    m_used_monthly_events_isSet = !json[QString("usedMonthlyEvents")].isNull() && m_used_monthly_events_isValid;
}

QString OAIApi_Core_Dto_Accounting_Plan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Accounting_Plan::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_personal_domains_isSet) {
        obj.insert(QString("allowedPersonalDomains"), ::OpenAPI::toJsonValue(m_allowed_personal_domains));
    }
    if (m_allowed_personal_urls_isSet) {
        obj.insert(QString("allowedPersonalUrls"), ::OpenAPI::toJsonValue(m_allowed_personal_urls));
    }
    if (m_billing_period_end_isSet) {
        obj.insert(QString("billingPeriodEnd"), ::OpenAPI::toJsonValue(m_billing_period_end));
    }
    if (m_billing_period_start_isSet) {
        obj.insert(QString("billingPeriodStart"), ::OpenAPI::toJsonValue(m_billing_period_start));
    }
    if (m_bonus_monthly_events_isSet) {
        obj.insert(QString("bonusMonthlyEvents"), ::OpenAPI::toJsonValue(m_bonus_monthly_events));
    }
    if (m_maximum_datapoints_isSet) {
        obj.insert(QString("maximumDatapoints"), ::OpenAPI::toJsonValue(m_maximum_datapoints));
    }
    if (m_maximum_guests_isSet) {
        obj.insert(QString("maximumGuests"), ::OpenAPI::toJsonValue(m_maximum_guests));
    }
    if (m_monthly_events_isSet) {
        obj.insert(QString("monthlyEvents"), ::OpenAPI::toJsonValue(m_monthly_events));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_recurring_isSet) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_recurring_period_isSet) {
        obj.insert(QString("recurringPeriod"), ::OpenAPI::toJsonValue(m_recurring_period));
    }
    if (m_used_datapoints_isSet) {
        obj.insert(QString("usedDatapoints"), ::OpenAPI::toJsonValue(m_used_datapoints));
    }
    if (m_used_monthly_events_isSet) {
        obj.insert(QString("usedMonthlyEvents"), ::OpenAPI::toJsonValue(m_used_monthly_events));
    }
    return obj;
}

qint32 OAIApi_Core_Dto_Accounting_Plan::getAllowedPersonalDomains() const {
    return m_allowed_personal_domains;
}
void OAIApi_Core_Dto_Accounting_Plan::setAllowedPersonalDomains(const qint32 &allowed_personal_domains) {
    m_allowed_personal_domains = allowed_personal_domains;
    m_allowed_personal_domains_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_allowed_personal_domains_Set() const{
    return m_allowed_personal_domains_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_allowed_personal_domains_Valid() const{
    return m_allowed_personal_domains_isValid;
}

qint32 OAIApi_Core_Dto_Accounting_Plan::getAllowedPersonalUrls() const {
    return m_allowed_personal_urls;
}
void OAIApi_Core_Dto_Accounting_Plan::setAllowedPersonalUrls(const qint32 &allowed_personal_urls) {
    m_allowed_personal_urls = allowed_personal_urls;
    m_allowed_personal_urls_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_allowed_personal_urls_Set() const{
    return m_allowed_personal_urls_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_allowed_personal_urls_Valid() const{
    return m_allowed_personal_urls_isValid;
}

QString OAIApi_Core_Dto_Accounting_Plan::getBillingPeriodEnd() const {
    return m_billing_period_end;
}
void OAIApi_Core_Dto_Accounting_Plan::setBillingPeriodEnd(const QString &billing_period_end) {
    m_billing_period_end = billing_period_end;
    m_billing_period_end_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_billing_period_end_Set() const{
    return m_billing_period_end_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_billing_period_end_Valid() const{
    return m_billing_period_end_isValid;
}

QString OAIApi_Core_Dto_Accounting_Plan::getBillingPeriodStart() const {
    return m_billing_period_start;
}
void OAIApi_Core_Dto_Accounting_Plan::setBillingPeriodStart(const QString &billing_period_start) {
    m_billing_period_start = billing_period_start;
    m_billing_period_start_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_billing_period_start_Set() const{
    return m_billing_period_start_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_billing_period_start_Valid() const{
    return m_billing_period_start_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Plan::getBonusMonthlyEvents() const {
    return m_bonus_monthly_events;
}
void OAIApi_Core_Dto_Accounting_Plan::setBonusMonthlyEvents(const qint64 &bonus_monthly_events) {
    m_bonus_monthly_events = bonus_monthly_events;
    m_bonus_monthly_events_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_bonus_monthly_events_Set() const{
    return m_bonus_monthly_events_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_bonus_monthly_events_Valid() const{
    return m_bonus_monthly_events_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Plan::getMaximumDatapoints() const {
    return m_maximum_datapoints;
}
void OAIApi_Core_Dto_Accounting_Plan::setMaximumDatapoints(const qint64 &maximum_datapoints) {
    m_maximum_datapoints = maximum_datapoints;
    m_maximum_datapoints_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_maximum_datapoints_Set() const{
    return m_maximum_datapoints_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_maximum_datapoints_Valid() const{
    return m_maximum_datapoints_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Plan::getMaximumGuests() const {
    return m_maximum_guests;
}
void OAIApi_Core_Dto_Accounting_Plan::setMaximumGuests(const qint64 &maximum_guests) {
    m_maximum_guests = maximum_guests;
    m_maximum_guests_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_maximum_guests_Set() const{
    return m_maximum_guests_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_maximum_guests_Valid() const{
    return m_maximum_guests_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Plan::getMonthlyEvents() const {
    return m_monthly_events;
}
void OAIApi_Core_Dto_Accounting_Plan::setMonthlyEvents(const qint64 &monthly_events) {
    m_monthly_events = monthly_events;
    m_monthly_events_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_monthly_events_Set() const{
    return m_monthly_events_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_monthly_events_Valid() const{
    return m_monthly_events_isValid;
}

QString OAIApi_Core_Dto_Accounting_Plan::getName() const {
    return m_name;
}
void OAIApi_Core_Dto_Accounting_Plan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_name_Valid() const{
    return m_name_isValid;
}

double OAIApi_Core_Dto_Accounting_Plan::getPrice() const {
    return m_price;
}
void OAIApi_Core_Dto_Accounting_Plan::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_price_Set() const{
    return m_price_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_price_Valid() const{
    return m_price_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Plan::getProfileId() const {
    return m_profile_id;
}
void OAIApi_Core_Dto_Accounting_Plan::setProfileId(const qint64 &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

bool OAIApi_Core_Dto_Accounting_Plan::isRecurring() const {
    return m_recurring;
}
void OAIApi_Core_Dto_Accounting_Plan::setRecurring(const bool &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_recurring_Valid() const{
    return m_recurring_isValid;
}

qint32 OAIApi_Core_Dto_Accounting_Plan::getRecurringPeriod() const {
    return m_recurring_period;
}
void OAIApi_Core_Dto_Accounting_Plan::setRecurringPeriod(const qint32 &recurring_period) {
    m_recurring_period = recurring_period;
    m_recurring_period_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_recurring_period_Set() const{
    return m_recurring_period_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_recurring_period_Valid() const{
    return m_recurring_period_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Plan::getUsedDatapoints() const {
    return m_used_datapoints;
}
void OAIApi_Core_Dto_Accounting_Plan::setUsedDatapoints(const qint64 &used_datapoints) {
    m_used_datapoints = used_datapoints;
    m_used_datapoints_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_used_datapoints_Set() const{
    return m_used_datapoints_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_used_datapoints_Valid() const{
    return m_used_datapoints_isValid;
}

qint64 OAIApi_Core_Dto_Accounting_Plan::getUsedMonthlyEvents() const {
    return m_used_monthly_events;
}
void OAIApi_Core_Dto_Accounting_Plan::setUsedMonthlyEvents(const qint64 &used_monthly_events) {
    m_used_monthly_events = used_monthly_events;
    m_used_monthly_events_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_used_monthly_events_Set() const{
    return m_used_monthly_events_isSet;
}

bool OAIApi_Core_Dto_Accounting_Plan::is_used_monthly_events_Valid() const{
    return m_used_monthly_events_isValid;
}

bool OAIApi_Core_Dto_Accounting_Plan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_personal_domains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_personal_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bonus_monthly_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_datapoints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_guests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_datapoints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_monthly_events_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Accounting_Plan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
