/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Accounting_ConversionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Accounting_ConversionOptions::OAIApi_Core_Dto_Accounting_ConversionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Accounting_ConversionOptions::OAIApi_Core_Dto_Accounting_ConversionOptions() {
    this->initializeModel();
}

OAIApi_Core_Dto_Accounting_ConversionOptions::~OAIApi_Core_Dto_Accounting_ConversionOptions() {}

void OAIApi_Core_Dto_Accounting_ConversionOptions::initializeModel() {

    m_hide_com_cost_isSet = false;
    m_hide_com_cost_isValid = false;

    m_hide_cost_isSet = false;
    m_hide_cost_isValid = false;

    m_hide_count_isSet = false;
    m_hide_count_isValid = false;

    m_hide_params_isSet = false;
    m_hide_params_isValid = false;

    m_hide_value_isSet = false;
    m_hide_value_isValid = false;

    m_percent_commission_isSet = false;
    m_percent_commission_isValid = false;

    m_percent_value_isSet = false;
    m_percent_value_isValid = false;
}

void OAIApi_Core_Dto_Accounting_ConversionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Accounting_ConversionOptions::fromJsonObject(QJsonObject json) {

    m_hide_com_cost_isValid = ::OpenAPI::fromJsonValue(m_hide_com_cost, json[QString("hideComCost")]);
    m_hide_com_cost_isSet = !json[QString("hideComCost")].isNull() && m_hide_com_cost_isValid;

    m_hide_cost_isValid = ::OpenAPI::fromJsonValue(m_hide_cost, json[QString("hideCost")]);
    m_hide_cost_isSet = !json[QString("hideCost")].isNull() && m_hide_cost_isValid;

    m_hide_count_isValid = ::OpenAPI::fromJsonValue(m_hide_count, json[QString("hideCount")]);
    m_hide_count_isSet = !json[QString("hideCount")].isNull() && m_hide_count_isValid;

    m_hide_params_isValid = ::OpenAPI::fromJsonValue(m_hide_params, json[QString("hideParams")]);
    m_hide_params_isSet = !json[QString("hideParams")].isNull() && m_hide_params_isValid;

    m_hide_value_isValid = ::OpenAPI::fromJsonValue(m_hide_value, json[QString("hideValue")]);
    m_hide_value_isSet = !json[QString("hideValue")].isNull() && m_hide_value_isValid;

    m_percent_commission_isValid = ::OpenAPI::fromJsonValue(m_percent_commission, json[QString("percentCommission")]);
    m_percent_commission_isSet = !json[QString("percentCommission")].isNull() && m_percent_commission_isValid;

    m_percent_value_isValid = ::OpenAPI::fromJsonValue(m_percent_value, json[QString("percentValue")]);
    m_percent_value_isSet = !json[QString("percentValue")].isNull() && m_percent_value_isValid;
}

QString OAIApi_Core_Dto_Accounting_ConversionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Accounting_ConversionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_hide_com_cost_isSet) {
        obj.insert(QString("hideComCost"), ::OpenAPI::toJsonValue(m_hide_com_cost));
    }
    if (m_hide_cost_isSet) {
        obj.insert(QString("hideCost"), ::OpenAPI::toJsonValue(m_hide_cost));
    }
    if (m_hide_count_isSet) {
        obj.insert(QString("hideCount"), ::OpenAPI::toJsonValue(m_hide_count));
    }
    if (m_hide_params_isSet) {
        obj.insert(QString("hideParams"), ::OpenAPI::toJsonValue(m_hide_params));
    }
    if (m_hide_value_isSet) {
        obj.insert(QString("hideValue"), ::OpenAPI::toJsonValue(m_hide_value));
    }
    if (m_percent_commission_isSet) {
        obj.insert(QString("percentCommission"), ::OpenAPI::toJsonValue(m_percent_commission));
    }
    if (m_percent_value_isSet) {
        obj.insert(QString("percentValue"), ::OpenAPI::toJsonValue(m_percent_value));
    }
    return obj;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::isHideComCost() const {
    return m_hide_com_cost;
}
void OAIApi_Core_Dto_Accounting_ConversionOptions::setHideComCost(const bool &hide_com_cost) {
    m_hide_com_cost = hide_com_cost;
    m_hide_com_cost_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_com_cost_Set() const{
    return m_hide_com_cost_isSet;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_com_cost_Valid() const{
    return m_hide_com_cost_isValid;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::isHideCost() const {
    return m_hide_cost;
}
void OAIApi_Core_Dto_Accounting_ConversionOptions::setHideCost(const bool &hide_cost) {
    m_hide_cost = hide_cost;
    m_hide_cost_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_cost_Set() const{
    return m_hide_cost_isSet;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_cost_Valid() const{
    return m_hide_cost_isValid;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::isHideCount() const {
    return m_hide_count;
}
void OAIApi_Core_Dto_Accounting_ConversionOptions::setHideCount(const bool &hide_count) {
    m_hide_count = hide_count;
    m_hide_count_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_count_Set() const{
    return m_hide_count_isSet;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_count_Valid() const{
    return m_hide_count_isValid;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::isHideParams() const {
    return m_hide_params;
}
void OAIApi_Core_Dto_Accounting_ConversionOptions::setHideParams(const bool &hide_params) {
    m_hide_params = hide_params;
    m_hide_params_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_params_Set() const{
    return m_hide_params_isSet;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_params_Valid() const{
    return m_hide_params_isValid;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::isHideValue() const {
    return m_hide_value;
}
void OAIApi_Core_Dto_Accounting_ConversionOptions::setHideValue(const bool &hide_value) {
    m_hide_value = hide_value;
    m_hide_value_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_value_Set() const{
    return m_hide_value_isSet;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_hide_value_Valid() const{
    return m_hide_value_isValid;
}

qint32 OAIApi_Core_Dto_Accounting_ConversionOptions::getPercentCommission() const {
    return m_percent_commission;
}
void OAIApi_Core_Dto_Accounting_ConversionOptions::setPercentCommission(const qint32 &percent_commission) {
    m_percent_commission = percent_commission;
    m_percent_commission_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_percent_commission_Set() const{
    return m_percent_commission_isSet;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_percent_commission_Valid() const{
    return m_percent_commission_isValid;
}

qint32 OAIApi_Core_Dto_Accounting_ConversionOptions::getPercentValue() const {
    return m_percent_value;
}
void OAIApi_Core_Dto_Accounting_ConversionOptions::setPercentValue(const qint32 &percent_value) {
    m_percent_value = percent_value;
    m_percent_value_isSet = true;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_percent_value_Set() const{
    return m_percent_value_isSet;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::is_percent_value_Valid() const{
    return m_percent_value_isValid;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hide_com_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Accounting_ConversionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
