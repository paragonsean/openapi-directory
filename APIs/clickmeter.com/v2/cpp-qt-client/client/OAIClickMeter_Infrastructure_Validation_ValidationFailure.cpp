/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClickMeter_Infrastructure_Validation_ValidationFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClickMeter_Infrastructure_Validation_ValidationFailure::OAIClickMeter_Infrastructure_Validation_ValidationFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClickMeter_Infrastructure_Validation_ValidationFailure::OAIClickMeter_Infrastructure_Validation_ValidationFailure() {
    this->initializeModel();
}

OAIClickMeter_Infrastructure_Validation_ValidationFailure::~OAIClickMeter_Infrastructure_Validation_ValidationFailure() {}

void OAIClickMeter_Infrastructure_Validation_ValidationFailure::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_value_isSet = false;
    m_error_value_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;
}

void OAIClickMeter_Infrastructure_Validation_ValidationFailure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClickMeter_Infrastructure_Validation_ValidationFailure::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_value_isValid = ::OpenAPI::fromJsonValue(m_error_value, json[QString("errorValue")]);
    m_error_value_isSet = !json[QString("errorValue")].isNull() && m_error_value_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;
}

QString OAIClickMeter_Infrastructure_Validation_ValidationFailure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClickMeter_Infrastructure_Validation_ValidationFailure::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_value_isSet) {
        obj.insert(QString("errorValue"), ::OpenAPI::toJsonValue(m_error_value));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    return obj;
}

OAIObject OAIClickMeter_Infrastructure_Validation_ValidationFailure::getCode() const {
    return m_code;
}
void OAIClickMeter_Infrastructure_Validation_ValidationFailure::setCode(const OAIObject &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_code_Set() const{
    return m_code_isSet;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIClickMeter_Infrastructure_Validation_ValidationFailure::getErrorMessage() const {
    return m_error_message;
}
void OAIClickMeter_Infrastructure_Validation_ValidationFailure::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIObject OAIClickMeter_Infrastructure_Validation_ValidationFailure::getErrorValue() const {
    return m_error_value;
}
void OAIClickMeter_Infrastructure_Validation_ValidationFailure::setErrorValue(const OAIObject &error_value) {
    m_error_value = error_value;
    m_error_value_isSet = true;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_error_value_Set() const{
    return m_error_value_isSet;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_error_value_Valid() const{
    return m_error_value_isValid;
}

QString OAIClickMeter_Infrastructure_Validation_ValidationFailure::getProperty() const {
    return m_property;
}
void OAIClickMeter_Infrastructure_Validation_ValidationFailure::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_property_Set() const{
    return m_property_isSet;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClickMeter_Infrastructure_Validation_ValidationFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
