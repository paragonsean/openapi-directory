/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_Core_Dto_Datapoints_Datapoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_Core_Dto_Datapoints_Datapoint::OAIApi_Core_Dto_Datapoints_Datapoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_Core_Dto_Datapoints_Datapoint::OAIApi_Core_Dto_Datapoints_Datapoint() {
    this->initializeModel();
}

OAIApi_Core_Dto_Datapoints_Datapoint::~OAIApi_Core_Dto_Datapoints_Datapoint() {}

void OAIApi_Core_Dto_Datapoints_Datapoint::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_encode_ip_isSet = false;
    m_encode_ip_isValid = false;

    m_fifth_conversion_id_isSet = false;
    m_fifth_conversion_id_isValid = false;

    m_fifth_conversion_name_isSet = false;
    m_fifth_conversion_name_isValid = false;

    m_first_conversion_id_isSet = false;
    m_first_conversion_id_isValid = false;

    m_first_conversion_name_isSet = false;
    m_first_conversion_name_isValid = false;

    m_fourth_conversion_id_isSet = false;
    m_fourth_conversion_id_isValid = false;

    m_fourth_conversion_name_isSet = false;
    m_fourth_conversion_name_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_is_secured_isSet = false;
    m_is_secured_isValid = false;

    m_light_tracking_isSet = false;
    m_light_tracking_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_redirect_only_isSet = false;
    m_redirect_only_isValid = false;

    m_second_conversion_id_isSet = false;
    m_second_conversion_id_isValid = false;

    m_second_conversion_name_isSet = false;
    m_second_conversion_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_third_conversion_id_isSet = false;
    m_third_conversion_id_isValid = false;

    m_third_conversion_name_isSet = false;
    m_third_conversion_name_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tracking_code_isSet = false;
    m_tracking_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_tl_isSet = false;
    m_type_tl_isValid = false;

    m_type_tp_isSet = false;
    m_type_tp_isValid = false;

    m_write_permited_isSet = false;
    m_write_permited_isValid = false;
}

void OAIApi_Core_Dto_Datapoints_Datapoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_Core_Dto_Datapoints_Datapoint::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_encode_ip_isValid = ::OpenAPI::fromJsonValue(m_encode_ip, json[QString("encodeIp")]);
    m_encode_ip_isSet = !json[QString("encodeIp")].isNull() && m_encode_ip_isValid;

    m_fifth_conversion_id_isValid = ::OpenAPI::fromJsonValue(m_fifth_conversion_id, json[QString("fifthConversionId")]);
    m_fifth_conversion_id_isSet = !json[QString("fifthConversionId")].isNull() && m_fifth_conversion_id_isValid;

    m_fifth_conversion_name_isValid = ::OpenAPI::fromJsonValue(m_fifth_conversion_name, json[QString("fifthConversionName")]);
    m_fifth_conversion_name_isSet = !json[QString("fifthConversionName")].isNull() && m_fifth_conversion_name_isValid;

    m_first_conversion_id_isValid = ::OpenAPI::fromJsonValue(m_first_conversion_id, json[QString("firstConversionId")]);
    m_first_conversion_id_isSet = !json[QString("firstConversionId")].isNull() && m_first_conversion_id_isValid;

    m_first_conversion_name_isValid = ::OpenAPI::fromJsonValue(m_first_conversion_name, json[QString("firstConversionName")]);
    m_first_conversion_name_isSet = !json[QString("firstConversionName")].isNull() && m_first_conversion_name_isValid;

    m_fourth_conversion_id_isValid = ::OpenAPI::fromJsonValue(m_fourth_conversion_id, json[QString("fourthConversionId")]);
    m_fourth_conversion_id_isSet = !json[QString("fourthConversionId")].isNull() && m_fourth_conversion_id_isValid;

    m_fourth_conversion_name_isValid = ::OpenAPI::fromJsonValue(m_fourth_conversion_name, json[QString("fourthConversionName")]);
    m_fourth_conversion_name_isSet = !json[QString("fourthConversionName")].isNull() && m_fourth_conversion_name_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;

    m_is_secured_isValid = ::OpenAPI::fromJsonValue(m_is_secured, json[QString("isSecured")]);
    m_is_secured_isSet = !json[QString("isSecured")].isNull() && m_is_secured_isValid;

    m_light_tracking_isValid = ::OpenAPI::fromJsonValue(m_light_tracking, json[QString("lightTracking")]);
    m_light_tracking_isSet = !json[QString("lightTracking")].isNull() && m_light_tracking_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_redirect_only_isValid = ::OpenAPI::fromJsonValue(m_redirect_only, json[QString("redirectOnly")]);
    m_redirect_only_isSet = !json[QString("redirectOnly")].isNull() && m_redirect_only_isValid;

    m_second_conversion_id_isValid = ::OpenAPI::fromJsonValue(m_second_conversion_id, json[QString("secondConversionId")]);
    m_second_conversion_id_isSet = !json[QString("secondConversionId")].isNull() && m_second_conversion_id_isValid;

    m_second_conversion_name_isValid = ::OpenAPI::fromJsonValue(m_second_conversion_name, json[QString("secondConversionName")]);
    m_second_conversion_name_isSet = !json[QString("secondConversionName")].isNull() && m_second_conversion_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_third_conversion_id_isValid = ::OpenAPI::fromJsonValue(m_third_conversion_id, json[QString("thirdConversionId")]);
    m_third_conversion_id_isSet = !json[QString("thirdConversionId")].isNull() && m_third_conversion_id_isValid;

    m_third_conversion_name_isValid = ::OpenAPI::fromJsonValue(m_third_conversion_name, json[QString("thirdConversionName")]);
    m_third_conversion_name_isSet = !json[QString("thirdConversionName")].isNull() && m_third_conversion_name_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tracking_code_isValid = ::OpenAPI::fromJsonValue(m_tracking_code, json[QString("trackingCode")]);
    m_tracking_code_isSet = !json[QString("trackingCode")].isNull() && m_tracking_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_tl_isValid = ::OpenAPI::fromJsonValue(m_type_tl, json[QString("typeTL")]);
    m_type_tl_isSet = !json[QString("typeTL")].isNull() && m_type_tl_isValid;

    m_type_tp_isValid = ::OpenAPI::fromJsonValue(m_type_tp, json[QString("typeTP")]);
    m_type_tp_isSet = !json[QString("typeTP")].isNull() && m_type_tp_isValid;

    m_write_permited_isValid = ::OpenAPI::fromJsonValue(m_write_permited, json[QString("writePermited")]);
    m_write_permited_isSet = !json[QString("writePermited")].isNull() && m_write_permited_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_Core_Dto_Datapoints_Datapoint::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_encode_ip_isSet) {
        obj.insert(QString("encodeIp"), ::OpenAPI::toJsonValue(m_encode_ip));
    }
    if (m_fifth_conversion_id_isSet) {
        obj.insert(QString("fifthConversionId"), ::OpenAPI::toJsonValue(m_fifth_conversion_id));
    }
    if (m_fifth_conversion_name_isSet) {
        obj.insert(QString("fifthConversionName"), ::OpenAPI::toJsonValue(m_fifth_conversion_name));
    }
    if (m_first_conversion_id_isSet) {
        obj.insert(QString("firstConversionId"), ::OpenAPI::toJsonValue(m_first_conversion_id));
    }
    if (m_first_conversion_name_isSet) {
        obj.insert(QString("firstConversionName"), ::OpenAPI::toJsonValue(m_first_conversion_name));
    }
    if (m_fourth_conversion_id_isSet) {
        obj.insert(QString("fourthConversionId"), ::OpenAPI::toJsonValue(m_fourth_conversion_id));
    }
    if (m_fourth_conversion_name_isSet) {
        obj.insert(QString("fourthConversionName"), ::OpenAPI::toJsonValue(m_fourth_conversion_name));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_is_secured_isSet) {
        obj.insert(QString("isSecured"), ::OpenAPI::toJsonValue(m_is_secured));
    }
    if (m_light_tracking_isSet) {
        obj.insert(QString("lightTracking"), ::OpenAPI::toJsonValue(m_light_tracking));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_redirect_only_isSet) {
        obj.insert(QString("redirectOnly"), ::OpenAPI::toJsonValue(m_redirect_only));
    }
    if (m_second_conversion_id_isSet) {
        obj.insert(QString("secondConversionId"), ::OpenAPI::toJsonValue(m_second_conversion_id));
    }
    if (m_second_conversion_name_isSet) {
        obj.insert(QString("secondConversionName"), ::OpenAPI::toJsonValue(m_second_conversion_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_third_conversion_id_isSet) {
        obj.insert(QString("thirdConversionId"), ::OpenAPI::toJsonValue(m_third_conversion_id));
    }
    if (m_third_conversion_name_isSet) {
        obj.insert(QString("thirdConversionName"), ::OpenAPI::toJsonValue(m_third_conversion_name));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tracking_code_isSet) {
        obj.insert(QString("trackingCode"), ::OpenAPI::toJsonValue(m_tracking_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_tl.isSet()) {
        obj.insert(QString("typeTL"), ::OpenAPI::toJsonValue(m_type_tl));
    }
    if (m_type_tp.isSet()) {
        obj.insert(QString("typeTP"), ::OpenAPI::toJsonValue(m_type_tp));
    }
    if (m_write_permited_isSet) {
        obj.insert(QString("writePermited"), ::OpenAPI::toJsonValue(m_write_permited));
    }
    return obj;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getCreationDate() const {
    return m_creation_date;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isEncodeIp() const {
    return m_encode_ip;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setEncodeIp(const bool &encode_ip) {
    m_encode_ip = encode_ip;
    m_encode_ip_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_encode_ip_Set() const{
    return m_encode_ip_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_encode_ip_Valid() const{
    return m_encode_ip_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_Datapoint::getFifthConversionId() const {
    return m_fifth_conversion_id;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setFifthConversionId(const qint64 &fifth_conversion_id) {
    m_fifth_conversion_id = fifth_conversion_id;
    m_fifth_conversion_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fifth_conversion_id_Set() const{
    return m_fifth_conversion_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fifth_conversion_id_Valid() const{
    return m_fifth_conversion_id_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getFifthConversionName() const {
    return m_fifth_conversion_name;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setFifthConversionName(const QString &fifth_conversion_name) {
    m_fifth_conversion_name = fifth_conversion_name;
    m_fifth_conversion_name_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fifth_conversion_name_Set() const{
    return m_fifth_conversion_name_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fifth_conversion_name_Valid() const{
    return m_fifth_conversion_name_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_Datapoint::getFirstConversionId() const {
    return m_first_conversion_id;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setFirstConversionId(const qint64 &first_conversion_id) {
    m_first_conversion_id = first_conversion_id;
    m_first_conversion_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_first_conversion_id_Set() const{
    return m_first_conversion_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_first_conversion_id_Valid() const{
    return m_first_conversion_id_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getFirstConversionName() const {
    return m_first_conversion_name;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setFirstConversionName(const QString &first_conversion_name) {
    m_first_conversion_name = first_conversion_name;
    m_first_conversion_name_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_first_conversion_name_Set() const{
    return m_first_conversion_name_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_first_conversion_name_Valid() const{
    return m_first_conversion_name_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_Datapoint::getFourthConversionId() const {
    return m_fourth_conversion_id;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setFourthConversionId(const qint64 &fourth_conversion_id) {
    m_fourth_conversion_id = fourth_conversion_id;
    m_fourth_conversion_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fourth_conversion_id_Set() const{
    return m_fourth_conversion_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fourth_conversion_id_Valid() const{
    return m_fourth_conversion_id_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getFourthConversionName() const {
    return m_fourth_conversion_name;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setFourthConversionName(const QString &fourth_conversion_name) {
    m_fourth_conversion_name = fourth_conversion_name;
    m_fourth_conversion_name_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fourth_conversion_name_Set() const{
    return m_fourth_conversion_name_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_fourth_conversion_name_Valid() const{
    return m_fourth_conversion_name_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_Datapoint::getGroupId() const {
    return m_group_id;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getGroupName() const {
    return m_group_name;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_Datapoint::getId() const {
    return m_id;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isIsPublic() const {
    return m_is_public;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_is_public_Valid() const{
    return m_is_public_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isIsSecured() const {
    return m_is_secured;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setIsSecured(const bool &is_secured) {
    m_is_secured = is_secured;
    m_is_secured_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_is_secured_Set() const{
    return m_is_secured_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_is_secured_Valid() const{
    return m_is_secured_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isLightTracking() const {
    return m_light_tracking;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setLightTracking(const bool &light_tracking) {
    m_light_tracking = light_tracking;
    m_light_tracking_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_light_tracking_Set() const{
    return m_light_tracking_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_light_tracking_Valid() const{
    return m_light_tracking_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getName() const {
    return m_name;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getNotes() const {
    return m_notes;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isPreferred() const {
    return m_preferred;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_preferred_Valid() const{
    return m_preferred_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isRedirectOnly() const {
    return m_redirect_only;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setRedirectOnly(const bool &redirect_only) {
    m_redirect_only = redirect_only;
    m_redirect_only_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_redirect_only_Set() const{
    return m_redirect_only_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_redirect_only_Valid() const{
    return m_redirect_only_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_Datapoint::getSecondConversionId() const {
    return m_second_conversion_id;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setSecondConversionId(const qint64 &second_conversion_id) {
    m_second_conversion_id = second_conversion_id;
    m_second_conversion_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_second_conversion_id_Set() const{
    return m_second_conversion_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_second_conversion_id_Valid() const{
    return m_second_conversion_id_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getSecondConversionName() const {
    return m_second_conversion_name;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setSecondConversionName(const QString &second_conversion_name) {
    m_second_conversion_name = second_conversion_name;
    m_second_conversion_name_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_second_conversion_name_Set() const{
    return m_second_conversion_name_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_second_conversion_name_Valid() const{
    return m_second_conversion_name_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getStatus() const {
    return m_status;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIApi_Core_Dto_Tags_Tag> OAIApi_Core_Dto_Datapoints_Datapoint::getTags() const {
    return m_tags;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setTags(const QList<OAIApi_Core_Dto_Tags_Tag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_tags_Valid() const{
    return m_tags_isValid;
}

qint64 OAIApi_Core_Dto_Datapoints_Datapoint::getThirdConversionId() const {
    return m_third_conversion_id;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setThirdConversionId(const qint64 &third_conversion_id) {
    m_third_conversion_id = third_conversion_id;
    m_third_conversion_id_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_third_conversion_id_Set() const{
    return m_third_conversion_id_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_third_conversion_id_Valid() const{
    return m_third_conversion_id_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getThirdConversionName() const {
    return m_third_conversion_name;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setThirdConversionName(const QString &third_conversion_name) {
    m_third_conversion_name = third_conversion_name;
    m_third_conversion_name_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_third_conversion_name_Set() const{
    return m_third_conversion_name_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_third_conversion_name_Valid() const{
    return m_third_conversion_name_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getTitle() const {
    return m_title;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_title_Set() const{
    return m_title_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getTrackingCode() const {
    return m_tracking_code;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setTrackingCode(const QString &tracking_code) {
    m_tracking_code = tracking_code;
    m_tracking_code_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_tracking_code_Set() const{
    return m_tracking_code_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_tracking_code_Valid() const{
    return m_tracking_code_isValid;
}

QString OAIApi_Core_Dto_Datapoints_Datapoint::getType() const {
    return m_type;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_type_Valid() const{
    return m_type_isValid;
}

OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics OAIApi_Core_Dto_Datapoints_Datapoint::getTypeTl() const {
    return m_type_tl;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setTypeTl(const OAIApi_Core_Dto_Datapoints_TrackingLinkSpecifics &type_tl) {
    m_type_tl = type_tl;
    m_type_tl_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_type_tl_Set() const{
    return m_type_tl_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_type_tl_Valid() const{
    return m_type_tl_isValid;
}

OAIApi_Core_Dto_Datapoints_TrackingPixelSpecifics OAIApi_Core_Dto_Datapoints_Datapoint::getTypeTp() const {
    return m_type_tp;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setTypeTp(const OAIApi_Core_Dto_Datapoints_TrackingPixelSpecifics &type_tp) {
    m_type_tp = type_tp;
    m_type_tp_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_type_tp_Set() const{
    return m_type_tp_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_type_tp_Valid() const{
    return m_type_tp_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isWritePermited() const {
    return m_write_permited;
}
void OAIApi_Core_Dto_Datapoints_Datapoint::setWritePermited(const bool &write_permited) {
    m_write_permited = write_permited;
    m_write_permited_isSet = true;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_write_permited_Set() const{
    return m_write_permited_isSet;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::is_write_permited_Valid() const{
    return m_write_permited_isValid;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encode_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifth_conversion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fifth_conversion_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_conversion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_conversion_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_conversion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fourth_conversion_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_secured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_light_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_conversion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_conversion_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_conversion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_conversion_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_tl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_tp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_permited_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_Core_Dto_Datapoints_Datapoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
