/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreDtoAggregatedAggregatedResult';
import ApiCoreDtoAggregatedAggregatedSummaryResult from '../model/ApiCoreDtoAggregatedAggregatedSummaryResult';
import ApiCoreDtoClickStreamHitListPage from '../model/ApiCoreDtoClickStreamHitListPage';
import ApiCoreDtoDatapointsDatapoint from '../model/ApiCoreDtoDatapointsDatapoint';
import ApiCoreDtoGroupsGroup from '../model/ApiCoreDtoGroupsGroup';
import ApiCoreRequestsGenericTextPatch from '../model/ApiCoreRequestsGenericTextPatch';
import ApiCoreResponsesCountResponce from '../model/ApiCoreResponsesCountResponce';
import ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult';
import ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntityUriSystemInt64';

/**
* Groups service.
* @module api/GroupsApi
* @version v2
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the groupsCount operation.
     * @callback module:api/GroupsApi~groupsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the groups associated to the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude groups created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude groups created after this date (YYYYMMDD)
     * @param {Boolean} [write] Write permission
     * @param {module:api/GroupsApi~groupsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    groupsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'write': opts['write']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/groups/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsDelete operation.
     * @callback module:api/GroupsApi~groupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete group specified by id
     * @param {Number} id Id of the group
     * @param {module:api/GroupsApi~groupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    groupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGet operation.
     * @callback module:api/GroupsApi~groupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the groups associated to the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {module:model/String} [status] Status of the group
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude groups created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude groups created after this date (YYYYMMDD)
     * @param {Boolean} [write] Write permission
     * @param {module:api/GroupsApi~groupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    groupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'write': opts['write']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetDatapoints operation.
     * @callback module:api/GroupsApi~groupsGetDatapointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the datapoints associated to the user in this group.
     * @param {Number} id Id of the group
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {module:model/String} [type] Type of the datapoint (\"tp\"/\"tl\")
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {Boolean} [onlyFavorites] Filter fields by favourite status
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/GroupsApi~groupsGetDatapointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    groupsGetDatapoints(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsGetDatapoints");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'onlyFavorites': opts['onlyFavorites'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups/{id}/datapoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetDatapointsCount operation.
     * @callback module:api/GroupsApi~groupsGetDatapointsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the datapoints associated to the user in this group.
     * @param {Number} id Id of the group
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Type of the datapoint (\"tp\"/\"tl\")
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {Boolean} [onlyFavorites] Filter fields by favourite status
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/GroupsApi~groupsGetDatapointsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    groupsGetDatapointsCount(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsGetDatapointsCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'type': opts['type'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'onlyFavorites': opts['onlyFavorites'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/groups/{id}/datapoints/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetDatapointsSummary operation.
     * @callback module:api/GroupsApi~groupsGetDatapointsSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedSummaryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     * @param {Number} id Filter by this group id
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Type of datapoint (\"tl\"/\"tp\")
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [status] Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")
     * @param {String} [tag] A comma separated list of tags you want to filter with.
     * @param {Boolean} [favourite] Is the datapoint marked as favourite
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {Number} [offset = 0)] Offset where to start from
     * @param {Number} [limit = 20)] Limit results to this number
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {module:api/GroupsApi~groupsGetDatapointsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedSummaryResult}
     */
    groupsGetDatapointsSummary(id, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsGetDatapointsSummary");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling groupsGetDatapointsSummary");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'type': opts['type'],
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'status': opts['status'],
        'tag': opts['tag'],
        'favourite': opts['favourite'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'textSearch': opts['textSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedSummaryResult;
      return this.apiClient.callApi(
        '/groups/{id}/aggregated/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetHits operation.
     * @callback module:api/GroupsApi~groupsGetHitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoClickStreamHitListPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of events related to this group.
     * @param {Number} id Id of the group
     * @param {module:model/String} timeframe Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit results to this number
     * @param {String} [offset] Offset where to start from (it's the lastKey field in the response object)
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [filter] Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")
     * @param {module:api/GroupsApi~groupsGetHitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoClickStreamHitListPage}
     */
    groupsGetHits(id, timeframe, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsGetHits");
      }
      // verify the required parameter 'timeframe' is set
      if (timeframe === undefined || timeframe === null) {
        throw new Error("Missing the required parameter 'timeframe' when calling groupsGetHits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timeframe': timeframe,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoClickStreamHitListPage;
      return this.apiClient.callApi(
        '/groups/{id}/hits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetStatisticsAggregatedSingle operation.
     * @callback module:api/GroupsApi~groupsGetStatisticsAggregatedSingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {Boolean} [hourly] If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail
     * @param {module:model/String} [status] Status of group (\"deleted\"/\"active\")
     * @param {String} [tag] A comma separated list of tags you want to filter with.
     * @param {Boolean} [favourite] Is the group is marked as favourite
     * @param {module:api/GroupsApi~groupsGetStatisticsAggregatedSingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedResult}
     */
    groupsGetStatisticsAggregatedSingle(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsAggregatedSingle");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'hourly': opts['hourly'],
        'status': opts['status'],
        'tag': opts['tag'],
        'favourite': opts['favourite']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/groups/aggregated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetStatisticsAllList operation.
     * @callback module:api/GroupsApi~groupsGetStatisticsAllListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {String} [status] Status of group (\"deleted\"/\"active\")
     * @param {String} [tag] A comma separated list of tags you want to filter with.
     * @param {Boolean} [favourite] Is the group is marked as favourite
     * @param {module:model/String} [groupBy] The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".
     * @param {module:api/GroupsApi~groupsGetStatisticsAllListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult}
     */
    groupsGetStatisticsAllList(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsAllList");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'status': opts['status'],
        'tag': opts['tag'],
        'favourite': opts['favourite'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/groups/aggregated/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetStatisticsList operation.
     * @callback module:api/GroupsApi~groupsGetStatisticsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)
     * @param {Number} id Id of the group
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [groupBy] The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".
     * @param {module:api/GroupsApi~groupsGetStatisticsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult}
     */
    groupsGetStatisticsList(id, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsGetStatisticsList");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/groups/{id}/aggregated/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGetStatisticsSingle operation.
     * @callback module:api/GroupsApi~groupsGetStatisticsSingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this group for a timeframe
     * @param {Number} id Id of the group
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {Boolean} [hourly] If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail
     * @param {module:api/GroupsApi~groupsGetStatisticsSingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedResult}
     */
    groupsGetStatisticsSingle(id, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsGetStatisticsSingle");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsSingle");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'hourly': opts['hourly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/groups/{id}/aggregated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdGet operation.
     * @callback module:api/GroupsApi~groupsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoGroupsGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a group
     * @param {Number} id The id of the group
     * @param {module:api/GroupsApi~groupsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoGroupsGroup}
     */
    groupsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoGroupsGroup;
      return this.apiClient.callApi(
        '/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPatchFavourite operation.
     * @callback module:api/GroupsApi~groupsPatchFavouriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fast switch the \"favourite\" field of a group
     * @param {Number} id Id of the group
     * @param {module:api/GroupsApi~groupsPatchFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    groupsPatchFavourite(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsPatchFavourite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups/{id}/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPatchNotes operation.
     * @callback module:api/GroupsApi~groupsPatchNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fast patch the \"notes\" field of a group
     * @param {Number} id Id of the group
     * @param {module:model/ApiCoreRequestsGenericTextPatch} apiCoreRequestsGenericTextPatch Patch requests
     * @param {module:api/GroupsApi~groupsPatchNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    groupsPatchNotes(id, apiCoreRequestsGenericTextPatch, callback) {
      let postBody = apiCoreRequestsGenericTextPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsPatchNotes");
      }
      // verify the required parameter 'apiCoreRequestsGenericTextPatch' is set
      if (apiCoreRequestsGenericTextPatch === undefined || apiCoreRequestsGenericTextPatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsGenericTextPatch' when calling groupsPatchNotes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups/{id}/notes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPost operation.
     * @callback module:api/GroupsApi~groupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group
     * @param {Number} id The id of the group
     * @param {module:model/ApiCoreDtoGroupsGroup} apiCoreDtoGroupsGroup The body of the group
     * @param {module:api/GroupsApi~groupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    groupsPost(id, apiCoreDtoGroupsGroup, callback) {
      let postBody = apiCoreDtoGroupsGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsPost");
      }
      // verify the required parameter 'apiCoreDtoGroupsGroup' is set
      if (apiCoreDtoGroupsGroup === undefined || apiCoreDtoGroupsGroup === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoGroupsGroup' when calling groupsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPut operation.
     * @callback module:api/GroupsApi~groupsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group
     * @param {module:model/ApiCoreDtoGroupsGroup} apiCoreDtoGroupsGroup The body of the group
     * @param {module:api/GroupsApi~groupsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    groupsPut(apiCoreDtoGroupsGroup, callback) {
      let postBody = apiCoreDtoGroupsGroup;
      // verify the required parameter 'apiCoreDtoGroupsGroup' is set
      if (apiCoreDtoGroupsGroup === undefined || apiCoreDtoGroupsGroup === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoGroupsGroup' when calling groupsPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPutDatapoint operation.
     * @callback module:api/GroupsApi~groupsPutDatapointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a datapoint in this group
     * @param {Number} id The id of the group
     * @param {module:model/ApiCoreDtoDatapointsDatapoint} apiCoreDtoDatapointsDatapoint The body of the datapoint
     * @param {module:api/GroupsApi~groupsPutDatapointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    groupsPutDatapoint(id, apiCoreDtoDatapointsDatapoint, callback) {
      let postBody = apiCoreDtoDatapointsDatapoint;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsPutDatapoint");
      }
      // verify the required parameter 'apiCoreDtoDatapointsDatapoint' is set
      if (apiCoreDtoDatapointsDatapoint === undefined || apiCoreDtoDatapointsDatapoint === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoDatapointsDatapoint' when calling groupsPutDatapoint");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/groups/{id}/datapoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
