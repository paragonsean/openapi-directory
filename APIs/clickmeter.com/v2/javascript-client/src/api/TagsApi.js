/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoTagsTag from '../model/ApiCoreDtoTagsTag';
import ApiCoreRequestsGenericTextPatch from '../model/ApiCoreRequestsGenericTextPatch';
import ApiCoreRequestsPatchBody from '../model/ApiCoreRequestsPatchBody';
import ApiCoreResponsesCountResponce from '../model/ApiCoreResponsesCountResponce';
import ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntityUriSystemInt64';

/**
* Tags service.
* @module api/TagsApi
* @version v2
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tagsCount operation.
     * @callback module:api/TagsApi~tagsCountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the groups associated to the user filtered by this tag.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name of the tag
     * @param {String} [datapoints] Comma separated list of datapoints id to filter by
     * @param {String} [groups] Comma separated list of groups id to filter by
     * @param {module:model/String} [type] Type of entity related to the tag
     * @param {module:api/TagsApi~tagsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'datapoints': opts['datapoints'],
        'groups': opts['groups'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsDelete operation.
     * @callback module:api/TagsApi~tagsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tag
     * @param {Number} tagId Id of the tag
     * @param {module:api/TagsApi~tagsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagsDelete(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsDelete");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsDeleteRelatedDatapoints operation.
     * @callback module:api/TagsApi~tagsDeleteRelatedDatapointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the association of this tag with all datapoints
     * @param {Number} tagId Id of the tag
     * @param {module:api/TagsApi~tagsDeleteRelatedDatapointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    tagsDeleteRelatedDatapoints(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsDeleteRelatedDatapoints");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags/{tagId}/datapoints', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsDeleteRelatedGroups operation.
     * @callback module:api/TagsApi~tagsDeleteRelatedGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the association of this tag with all groups
     * @param {Number} tagId Id of the tag
     * @param {module:api/TagsApi~tagsDeleteRelatedGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    tagsDeleteRelatedGroups(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsDeleteRelatedGroups");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags/{tagId}/groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGet operation.
     * @callback module:api/TagsApi~tagsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the groups associated to the user filtered by this tag.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {String} [name] Name of the tag
     * @param {String} [datapoints] Comma separated list of datapoints id to filter by
     * @param {String} [groups] Comma separated list of groups id to filter by
     * @param {module:model/String} [type] Type of entity related to the tag
     * @param {module:api/TagsApi~tagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    tagsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'name': opts['name'],
        'datapoints': opts['datapoints'],
        'groups': opts['groups'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGetDatapoints operation.
     * @callback module:api/TagsApi~tagsGetDatapointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the datapoints associated to the user filtered by this tag
     * @param {Number} tagId Id of the tag.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {module:model/String} [type] Type of the datapoint (\"tp\"/\"tl\")
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/TagsApi~tagsGetDatapointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    tagsGetDatapoints(tagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsGetDatapoints");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'status': opts['status'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags/{tagId}/datapoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGetDatapointsCount operation.
     * @callback module:api/TagsApi~tagsGetDatapointsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the datapoints associated to the user filtered by this tag
     * @param {Number} tagId Id of the tag.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Type of the datapoint (\"tp\"/\"tl\")
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/TagsApi~tagsGetDatapointsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    tagsGetDatapointsCount(tagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsGetDatapointsCount");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
        'type': opts['type'],
        'status': opts['status'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/tags/{tagId}/datapoints/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGetGroups operation.
     * @callback module:api/TagsApi~tagsGetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the groups associated to the user filtered by this tag.
     * @param {Number} tagId Id of the tag.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude groups created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude groups created after this date (YYYYMMDD)
     * @param {module:api/TagsApi~tagsGetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    tagsGetGroups(tagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsGetGroups");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags/{tagId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGetGroupsCount operation.
     * @callback module:api/TagsApi~tagsGetGroupsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the groups associated to the user filtered by this tag
     * @param {Number} tagId Id of the tag.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude groups created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude groups created after this date (YYYYMMDD)
     * @param {module:api/TagsApi~tagsGetGroupsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    tagsGetGroupsCount(tagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsGetGroupsCount");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
        'status': opts['status'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/tags/{tagId}/groups/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsPatchDataPoint operation.
     * @callback module:api/TagsApi~tagsPatchDataPointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate/Deassociate a tag with a datapoint
     * @param {Number} tagId Id of the tag
     * @param {module:model/ApiCoreRequestsPatchBody} apiCoreRequestsPatchBody The body patch
     * @param {module:api/TagsApi~tagsPatchDataPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    tagsPatchDataPoint(tagId, apiCoreRequestsPatchBody, callback) {
      let postBody = apiCoreRequestsPatchBody;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsPatchDataPoint");
      }
      // verify the required parameter 'apiCoreRequestsPatchBody' is set
      if (apiCoreRequestsPatchBody === undefined || apiCoreRequestsPatchBody === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsPatchBody' when calling tagsPatchDataPoint");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags/{tagId}/datapoints/patch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsPatchGroup operation.
     * @callback module:api/TagsApi~tagsPatchGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate/Deassociate a tag with a group
     * @param {Number} tagId Id of the tag
     * @param {module:model/ApiCoreRequestsPatchBody} apiCoreRequestsPatchBody The body patch
     * @param {module:api/TagsApi~tagsPatchGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    tagsPatchGroup(tagId, apiCoreRequestsPatchBody, callback) {
      let postBody = apiCoreRequestsPatchBody;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsPatchGroup");
      }
      // verify the required parameter 'apiCoreRequestsPatchBody' is set
      if (apiCoreRequestsPatchBody === undefined || apiCoreRequestsPatchBody === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsPatchBody' when calling tagsPatchGroup");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags/{tagId}/groups/patch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsPatchTagName operation.
     * @callback module:api/TagsApi~tagsPatchTagNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fast patch a tag name
     * @param {Number} tagId Id of the tag
     * @param {module:model/ApiCoreRequestsGenericTextPatch} apiCoreRequestsGenericTextPatch The body patch
     * @param {module:api/TagsApi~tagsPatchTagNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    tagsPatchTagName(tagId, apiCoreRequestsGenericTextPatch, callback) {
      let postBody = apiCoreRequestsGenericTextPatch;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsPatchTagName");
      }
      // verify the required parameter 'apiCoreRequestsGenericTextPatch' is set
      if (apiCoreRequestsGenericTextPatch === undefined || apiCoreRequestsGenericTextPatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsGenericTextPatch' when calling tagsPatchTagName");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags/{tagId}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsPut operation.
     * @callback module:api/TagsApi~tagsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a tag
     * @param {module:model/ApiCoreDtoTagsTag} apiCoreDtoTagsTag The body of the tag
     * @param {module:api/TagsApi~tagsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    tagsPut(apiCoreDtoTagsTag, callback) {
      let postBody = apiCoreDtoTagsTag;
      // verify the required parameter 'apiCoreDtoTagsTag' is set
      if (apiCoreDtoTagsTag === undefined || apiCoreDtoTagsTag === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoTagsTag' when calling tagsPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagIdGet operation.
     * @callback module:api/TagsApi~tagsTagIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoTagsTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a tag
     * @param {Number} tagId Id of the tag
     * @param {module:api/TagsApi~tagsTagIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoTagsTag}
     */
    tagsTagIdGet(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling tagsTagIdGet");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoTagsTag;
      return this.apiClient.callApi(
        '/tags/{tagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
