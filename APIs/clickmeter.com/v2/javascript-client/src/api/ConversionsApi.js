/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreDtoAggregatedAggregatedResult';
import ApiCoreDtoClickStreamHitListPage from '../model/ApiCoreDtoClickStreamHitListPage';
import ApiCoreDtoConversionsConversion from '../model/ApiCoreDtoConversionsConversion';
import ApiCoreRequestsConversionPatchBody from '../model/ApiCoreRequestsConversionPatchBody';
import ApiCoreRequestsGenericTextPatch from '../model/ApiCoreRequestsGenericTextPatch';
import ApiCoreRequestsPatchBodyBatch from '../model/ApiCoreRequestsPatchBodyBatch';
import ApiCoreResponsesCountResponce from '../model/ApiCoreResponsesCountResponce';
import ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult';
import ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntityUriSystemInt64';

/**
* Conversions service.
* @module api/ConversionsApi
* @version v2
*/
export default class ConversionsApi {

    /**
    * Constructs a new ConversionsApi. 
    * @alias module:api/ConversionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the conversionsConversionIdDatapointsBatchPatchPut operation.
     * @callback module:api/ConversionsApi~conversionsConversionIdDatapointsBatchPatchPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the association between a conversion and multiple datapoints
     * @param {Number} conversionId Id of the conversion
     * @param {module:model/ApiCoreRequestsPatchBodyBatch} apiCoreRequestsPatchBodyBatch Patch requests
     * @param {module:api/ConversionsApi~conversionsConversionIdDatapointsBatchPatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsConversionIdDatapointsBatchPatchPut(conversionId, apiCoreRequestsPatchBodyBatch, callback) {
      let postBody = apiCoreRequestsPatchBodyBatch;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsConversionIdDatapointsBatchPatchPut");
      }
      // verify the required parameter 'apiCoreRequestsPatchBodyBatch' is set
      if (apiCoreRequestsPatchBodyBatch === undefined || apiCoreRequestsPatchBodyBatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsPatchBodyBatch' when calling conversionsConversionIdDatapointsBatchPatchPut");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/datapoints/batch/patch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsConversionIdGet operation.
     * @callback module:api/ConversionsApi~conversionsConversionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoConversionsConversion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve conversion specified by id
     * @param {Number} conversionId Id of the conversion
     * @param {module:api/ConversionsApi~conversionsConversionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoConversionsConversion}
     */
    conversionsConversionIdGet(conversionId, callback) {
      let postBody = null;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsConversionIdGet");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoConversionsConversion;
      return this.apiClient.callApi(
        '/conversions/{conversionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsCount operation.
     * @callback module:api/ConversionsApi~conversionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a count of conversions
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Status of conversion (\"deleted\"/\"active\")
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude conversions created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude conversions created after this date (YYYYMMDD)
     * @param {module:api/ConversionsApi~conversionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    conversionsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/conversions/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsDelete operation.
     * @callback module:api/ConversionsApi~conversionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete conversion specified by id
     * @param {Number} conversionId Id of the conversion
     * @param {module:api/ConversionsApi~conversionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsDelete(conversionId, callback) {
      let postBody = null;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsDelete");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions/{conversionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsGet operation.
     * @callback module:api/ConversionsApi~conversionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of conversions
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {module:model/String} [status] Status of conversion (\"deleted\"/\"active\")
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude conversions created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude conversions created after this date (YYYYMMDD)
     * @param {module:api/ConversionsApi~conversionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsGetDatapoints operation.
     * @callback module:api/ConversionsApi~conversionsGetDatapointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of datapoints connected to this conversion
     * @param {Number} conversionId Id of the conversion
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {module:model/String} [type] Type of datapoint (\"tl\"/\"tp\")
     * @param {module:model/String} [status] Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")
     * @param {String} [tags] Filter by this tag name
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/ConversionsApi~conversionsGetDatapointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsGetDatapoints(conversionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsGetDatapoints");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/datapoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsGetDatapointsCount operation.
     * @callback module:api/ConversionsApi~conversionsGetDatapointsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a count of datapoints connected to this conversion
     * @param {Number} conversionId Id of the conversion
     * @param {Object} opts Optional parameters
     * @param {String} [type] Type of datapoint (\"tl\"/\"tp\")
     * @param {String} [status] Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")
     * @param {String} [tags] Filter by this tag name
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/ConversionsApi~conversionsGetDatapointsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    conversionsGetDatapointsCount(conversionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsGetDatapointsCount");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
        'type': opts['type'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/datapoints/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsGetHits operation.
     * @callback module:api/ConversionsApi~conversionsGetHitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoClickStreamHitListPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of events related to this conversion.
     * @param {Number} conversionId Id of the conversion
     * @param {module:model/String} timeframe Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit results to this number
     * @param {String} [offset] Offset where to start from (it's the lastKey field in the response object)
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [filter] Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")
     * @param {module:api/ConversionsApi~conversionsGetHitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoClickStreamHitListPage}
     */
    conversionsGetHits(conversionId, timeframe, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsGetHits");
      }
      // verify the required parameter 'timeframe' is set
      if (timeframe === undefined || timeframe === null) {
        throw new Error("Missing the required parameter 'timeframe' when calling conversionsGetHits");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
        'timeframe': timeframe,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoClickStreamHitListPage;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/hits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsGetStatisticsAllList operation.
     * @callback module:api/ConversionsApi~conversionsGetStatisticsAllListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [status] Status of conversion (\"deleted\"/\"active\")
     * @param {module:model/String} [groupBy] The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".
     * @param {module:api/ConversionsApi~conversionsGetStatisticsAllListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult}
     */
    conversionsGetStatisticsAllList(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling conversionsGetStatisticsAllList");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'status': opts['status'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/conversions/aggregated/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsGetStatisticsList operation.
     * @callback module:api/ConversionsApi~conversionsGetStatisticsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
     * @param {Number} conversionId Id of the conversion
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [groupBy] The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".
     * @param {module:api/ConversionsApi~conversionsGetStatisticsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult}
     */
    conversionsGetStatisticsList(conversionId, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsGetStatisticsList");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling conversionsGetStatisticsList");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/aggregated/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsGetStatisticsSingle operation.
     * @callback module:api/ConversionsApi~conversionsGetStatisticsSingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this conversion for a timeframe
     * @param {Number} conversionId Id of the conversion
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {String} [tag] Filter by this tag name
     * @param {Boolean} [favourite] Is the datapoint marked as favourite
     * @param {Boolean} [hourly] If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail
     * @param {module:api/ConversionsApi~conversionsGetStatisticsSingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedResult}
     */
    conversionsGetStatisticsSingle(conversionId, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsGetStatisticsSingle");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling conversionsGetStatisticsSingle");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'tag': opts['tag'],
        'favourite': opts['favourite'],
        'hourly': opts['hourly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/aggregated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsPatch operation.
     * @callback module:api/ConversionsApi~conversionsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the association between a conversion and a datapoint
     * @param {Number} conversionId Id of the conversion
     * @param {module:model/ApiCoreRequestsConversionPatchBody} apiCoreRequestsConversionPatchBody Patch request
     * @param {module:api/ConversionsApi~conversionsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsPatch(conversionId, apiCoreRequestsConversionPatchBody, callback) {
      let postBody = apiCoreRequestsConversionPatchBody;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsPatch");
      }
      // verify the required parameter 'apiCoreRequestsConversionPatchBody' is set
      if (apiCoreRequestsConversionPatchBody === undefined || apiCoreRequestsConversionPatchBody === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsConversionPatchBody' when calling conversionsPatch");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/datapoints/patch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsPatchNotes operation.
     * @callback module:api/ConversionsApi~conversionsPatchNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fast patch the \"notes\" field of a conversion
     * @param {Number} conversionId Id of the conversion
     * @param {module:model/ApiCoreRequestsGenericTextPatch} apiCoreRequestsGenericTextPatch Patch requests
     * @param {module:api/ConversionsApi~conversionsPatchNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsPatchNotes(conversionId, apiCoreRequestsGenericTextPatch, callback) {
      let postBody = apiCoreRequestsGenericTextPatch;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsPatchNotes");
      }
      // verify the required parameter 'apiCoreRequestsGenericTextPatch' is set
      if (apiCoreRequestsGenericTextPatch === undefined || apiCoreRequestsGenericTextPatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsGenericTextPatch' when calling conversionsPatchNotes");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions/{conversionId}/notes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsPost operation.
     * @callback module:api/ConversionsApi~conversionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update conversion specified by id
     * @param {Number} conversionId Id of the conversion
     * @param {module:model/ApiCoreDtoConversionsConversion} apiCoreDtoConversionsConversion Updated body of the conversion
     * @param {module:api/ConversionsApi~conversionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsPost(conversionId, apiCoreDtoConversionsConversion, callback) {
      let postBody = apiCoreDtoConversionsConversion;
      // verify the required parameter 'conversionId' is set
      if (conversionId === undefined || conversionId === null) {
        throw new Error("Missing the required parameter 'conversionId' when calling conversionsPost");
      }
      // verify the required parameter 'apiCoreDtoConversionsConversion' is set
      if (apiCoreDtoConversionsConversion === undefined || apiCoreDtoConversionsConversion === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoConversionsConversion' when calling conversionsPost");
      }

      let pathParams = {
        'conversionId': conversionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions/{conversionId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversionsPut operation.
     * @callback module:api/ConversionsApi~conversionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a conversion
     * @param {module:model/ApiCoreDtoConversionsConversion} apiCoreDtoConversionsConversion The body of the conversion
     * @param {module:api/ConversionsApi~conversionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    conversionsPut(apiCoreDtoConversionsConversion, callback) {
      let postBody = apiCoreDtoConversionsConversion;
      // verify the required parameter 'apiCoreDtoConversionsConversion' is set
      if (apiCoreDtoConversionsConversion === undefined || apiCoreDtoConversionsConversion === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoConversionsConversion' when calling conversionsPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/conversions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
