/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoRetargetingRetargetingScript from '../model/ApiCoreDtoRetargetingRetargetingScript';
import ApiCoreResponsesCountResponce from '../model/ApiCoreResponsesCountResponce';
import ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntityUriSystemInt64';

/**
* Retargeting service.
* @module api/RetargetingApi
* @version v2
*/
export default class RetargetingApi {

    /**
    * Constructs a new RetargetingApi. 
    * @alias module:api/RetargetingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the retargetingCount operation.
     * @callback module:api/RetargetingApi~retargetingCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve count of retargeting scripts
     * @param {module:api/RetargetingApi~retargetingCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    retargetingCount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/retargeting/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retargetingDelete operation.
     * @callback module:api/RetargetingApi~retargetingDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a retargeting script (and remove associations)
     * @param {Number} id The id of the retargeting script
     * @param {module:api/RetargetingApi~retargetingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    retargetingDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retargetingDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/retargeting/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retargetingGet operation.
     * @callback module:api/RetargetingApi~retargetingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the retargeting scripts associated to the user
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {module:api/RetargetingApi~retargetingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    retargetingGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/retargeting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retargetingGetDatapoints operation.
     * @callback module:api/RetargetingApi~retargetingGetDatapointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the datapoints associated to the retargeting script.
     * @param {Number} id Id of the retargeting script
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {Boolean} [onlyFavorites] Filter fields by favourite status
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/RetargetingApi~retargetingGetDatapointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    retargetingGetDatapoints(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retargetingGetDatapoints");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'onlyFavorites': opts['onlyFavorites'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/retargeting/{id}/datapoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retargetingGetDatapointsCount operation.
     * @callback module:api/RetargetingApi~retargetingGetDatapointsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the datapoints associated to the retargeting script.
     * @param {Number} id Id of the group
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {Boolean} [onlyFavorites] Filter fields by favourite status
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/RetargetingApi~retargetingGetDatapointsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    retargetingGetDatapointsCount(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retargetingGetDatapointsCount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'onlyFavorites': opts['onlyFavorites'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/retargeting/{id}/datapoints/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retargetingIdGet operation.
     * @callback module:api/RetargetingApi~retargetingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoRetargetingRetargetingScript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a retargeting script object
     * @param {Number} id The id of the retargeting script
     * @param {module:api/RetargetingApi~retargetingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoRetargetingRetargetingScript}
     */
    retargetingIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retargetingIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoRetargetingRetargetingScript;
      return this.apiClient.callApi(
        '/retargeting/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retargetingPost operation.
     * @callback module:api/RetargetingApi~retargetingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a retargeting script
     * @param {Number} id The id of the retargeting script
     * @param {module:model/ApiCoreDtoRetargetingRetargetingScript} apiCoreDtoRetargetingRetargetingScript The body of the retargeting script
     * @param {module:api/RetargetingApi~retargetingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    retargetingPost(id, apiCoreDtoRetargetingRetargetingScript, callback) {
      let postBody = apiCoreDtoRetargetingRetargetingScript;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retargetingPost");
      }
      // verify the required parameter 'apiCoreDtoRetargetingRetargetingScript' is set
      if (apiCoreDtoRetargetingRetargetingScript === undefined || apiCoreDtoRetargetingRetargetingScript === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoRetargetingRetargetingScript' when calling retargetingPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/retargeting/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retargetingPut operation.
     * @callback module:api/RetargetingApi~retargetingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a retargeting script
     * @param {module:model/ApiCoreDtoRetargetingRetargetingScript} apiCoreDtoRetargetingRetargetingScript The body of the retargeting script
     * @param {module:api/RetargetingApi~retargetingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    retargetingPut(apiCoreDtoRetargetingRetargetingScript, callback) {
      let postBody = apiCoreDtoRetargetingRetargetingScript;
      // verify the required parameter 'apiCoreDtoRetargetingRetargetingScript' is set
      if (apiCoreDtoRetargetingRetargetingScript === undefined || apiCoreDtoRetargetingRetargetingScript === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoRetargetingRetargetingScript' when calling retargetingPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/retargeting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
