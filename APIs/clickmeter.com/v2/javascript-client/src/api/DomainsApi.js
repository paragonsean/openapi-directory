/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoDomainsDomain from '../model/ApiCoreDtoDomainsDomain';
import ApiCoreResponsesCountResponce from '../model/ApiCoreResponsesCountResponce';
import ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntityUriSystemInt64';

/**
* Domains service.
* @module api/DomainsApi
* @version v2
*/
export default class DomainsApi {

    /**
    * Constructs a new DomainsApi. 
    * @alias module:api/DomainsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the domainsCount operation.
     * @callback module:api/DomainsApi~domainsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve count of domains
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type = 'system')] Type of domain (\"system\"/\"go\"/\"personal\"/\"dedicated\"). If not specified default is \"system\"
     * @param {String} [name] Filter domains with this anmen
     * @param {module:api/DomainsApi~domainsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    domainsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/domains/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsDelete operation.
     * @callback module:api/DomainsApi~domainsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a domain
     * @param {Number} id Id of domain
     * @param {module:api/DomainsApi~domainsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    domainsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling domainsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/domains/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsGet operation.
     * @callback module:api/DomainsApi~domainsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of domains
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {module:model/String} [type = 'system')] Type of domain (\"system\"/\"go\"/\"personal\"/\"dedicated\"). If not specified default is \"system\"
     * @param {String} [name] Filter domains with this anmen
     * @param {module:api/DomainsApi~domainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    domainsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsIdGet operation.
     * @callback module:api/DomainsApi~domainsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoDomainsDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a domain
     * @param {Number} id Id of domain
     * @param {module:api/DomainsApi~domainsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoDomainsDomain}
     */
    domainsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling domainsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoDomainsDomain;
      return this.apiClient.callApi(
        '/domains/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsPut operation.
     * @callback module:api/DomainsApi~domainsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a domain
     * @param {module:model/ApiCoreDtoDomainsDomain} apiCoreDtoDomainsDomain The domain to create
     * @param {module:api/DomainsApi~domainsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    domainsPut(apiCoreDtoDomainsDomain, callback) {
      let postBody = apiCoreDtoDomainsDomain;
      // verify the required parameter 'apiCoreDtoDomainsDomain' is set
      if (apiCoreDtoDomainsDomain === undefined || apiCoreDtoDomainsDomain === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoDomainsDomain' when calling domainsPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsUpdate operation.
     * @callback module:api/DomainsApi~domainsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a domain
     * @param {Number} id Id of domain
     * @param {module:model/ApiCoreDtoDomainsDomain} apiCoreDtoDomainsDomain The domain to update
     * @param {module:api/DomainsApi~domainsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    domainsUpdate(id, apiCoreDtoDomainsDomain, callback) {
      let postBody = apiCoreDtoDomainsDomain;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling domainsUpdate");
      }
      // verify the required parameter 'apiCoreDtoDomainsDomain' is set
      if (apiCoreDtoDomainsDomain === undefined || apiCoreDtoDomainsDomain === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoDomainsDomain' when calling domainsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/domains/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
