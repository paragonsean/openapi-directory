/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreDtoAggregatedAggregatedResult';
import ApiCoreDtoAggregatedAggregatedSummaryResult from '../model/ApiCoreDtoAggregatedAggregatedSummaryResult';
import ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult';

/**
* Aggregated service.
* @module api/AggregatedApi
* @version v2
*/
export default class AggregatedApi {

    /**
    * Constructs a new AggregatedApi. 
    * @alias module:api/AggregatedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aggregatedGetConversionsSummary operation.
     * @callback module:api/AggregatedApi~aggregatedGetConversionsSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedSummaryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about a subset of conversions for a timeframe with conversions data
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [status] Status of conversion (\"deleted\"/\"active\")
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {module:api/AggregatedApi~aggregatedGetConversionsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedSummaryResult}
     */
    aggregatedGetConversionsSummary(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling aggregatedGetConversionsSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'status': opts['status'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'textSearch': opts['textSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedSummaryResult;
      return this.apiClient.callApi(
        '/aggregated/summary/conversions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregatedGetDatapointsSummary operation.
     * @callback module:api/AggregatedApi~aggregatedGetDatapointsSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedSummaryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {module:model/String} type Type of datapoint (\"tl\"/\"tp\")
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [status] Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")
     * @param {String} [tag] A comma separated list of tags you want to filter with.
     * @param {Boolean} [favourite] Is the datapoint marked as favourite
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {Number} [groupId] Filter by this group id
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {module:api/AggregatedApi~aggregatedGetDatapointsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedSummaryResult}
     */
    aggregatedGetDatapointsSummary(timeFrame, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling aggregatedGetDatapointsSummary");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling aggregatedGetDatapointsSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'type': type,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'status': opts['status'],
        'tag': opts['tag'],
        'favourite': opts['favourite'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'groupId': opts['groupId'],
        'textSearch': opts['textSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedSummaryResult;
      return this.apiClient.callApi(
        '/aggregated/summary/datapoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregatedGetGroupsSummary operation.
     * @callback module:api/AggregatedApi~aggregatedGetGroupsSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedSummaryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about a subset of groups for a timeframe with groups data
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [status] Status of group (\"deleted\"/\"active\")
     * @param {String} [tag] A comma separated list of tags you want to filter with.
     * @param {Boolean} [favourite] Is the group marked as favourite
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {module:api/AggregatedApi~aggregatedGetGroupsSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedSummaryResult}
     */
    aggregatedGetGroupsSummary(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling aggregatedGetGroupsSummary");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'status': opts['status'],
        'tag': opts['tag'],
        'favourite': opts['favourite'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'textSearch': opts['textSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedSummaryResult;
      return this.apiClient.callApi(
        '/aggregated/summary/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregatedGetStatisticsList operation.
     * @callback module:api/AggregatedApi~aggregatedGetStatisticsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [groupBy] The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".
     * @param {module:api/AggregatedApi~aggregatedGetStatisticsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult}
     */
    aggregatedGetStatisticsList(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling aggregatedGetStatisticsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/aggregated/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregatedGetStatisticsSingle operation.
     * @callback module:api/AggregatedApi~aggregatedGetStatisticsSingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this customer for a timeframe
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {Boolean} [hourly] If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail
     * @param {String} [onlyFavorites] 
     * @param {module:api/AggregatedApi~aggregatedGetStatisticsSingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedResult}
     */
    aggregatedGetStatisticsSingle(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling aggregatedGetStatisticsSingle");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'hourly': opts['hourly'],
        'onlyFavorites': opts['onlyFavorites']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/aggregated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
