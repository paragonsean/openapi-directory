/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreDtoAggregatedAggregatedResult';
import ApiCoreDtoClickStreamHitListPage from '../model/ApiCoreDtoClickStreamHitListPage';
import ApiCoreDtoDatapointsDatapoint from '../model/ApiCoreDtoDatapointsDatapoint';
import ApiCoreRequestsDatapointsBatch from '../model/ApiCoreRequestsDatapointsBatch';
import ApiCoreRequestsDeleteBatch from '../model/ApiCoreRequestsDeleteBatch';
import ApiCoreRequestsGenericTextPatch from '../model/ApiCoreRequestsGenericTextPatch';
import ApiCoreResponsesCountResponce from '../model/ApiCoreResponsesCountResponce';
import ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult from '../model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult';
import ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 from '../model/ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64';

/**
* DataPoints service.
* @module api/DataPointsApi
* @version v2
*/
export default class DataPointsApi {

    /**
    * Constructs a new DataPointsApi. 
    * @alias module:api/DataPointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataPointsBatchDelete operation.
     * @callback module:api/DataPointsApi~dataPointsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete multiple datapoints
     * @param {module:model/ApiCoreRequestsDeleteBatch} apiCoreRequestsDeleteBatch A json containing the datapoints to delete.
     * @param {module:api/DataPointsApi~dataPointsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64}
     */
    dataPointsBatchDelete(apiCoreRequestsDeleteBatch, callback) {
      let postBody = apiCoreRequestsDeleteBatch;
      // verify the required parameter 'apiCoreRequestsDeleteBatch' is set
      if (apiCoreRequestsDeleteBatch === undefined || apiCoreRequestsDeleteBatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsDeleteBatch' when calling dataPointsBatchDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64;
      return this.apiClient.callApi(
        '/datapoints/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsBatchPost operation.
     * @callback module:api/DataPointsApi~dataPointsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multiple datapoints
     * @param {module:model/ApiCoreRequestsDatapointsBatch} apiCoreRequestsDatapointsBatch A json containing the datapoints to update.
     * @param {module:api/DataPointsApi~dataPointsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64}
     */
    dataPointsBatchPost(apiCoreRequestsDatapointsBatch, callback) {
      let postBody = apiCoreRequestsDatapointsBatch;
      // verify the required parameter 'apiCoreRequestsDatapointsBatch' is set
      if (apiCoreRequestsDatapointsBatch === undefined || apiCoreRequestsDatapointsBatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsDatapointsBatch' when calling dataPointsBatchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64;
      return this.apiClient.callApi(
        '/datapoints/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsBatchPut operation.
     * @callback module:api/DataPointsApi~dataPointsBatchPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple datapoints
     * @param {module:model/ApiCoreRequestsDatapointsBatch} apiCoreRequestsDatapointsBatch A json containing the datapoints to create.
     * @param {module:api/DataPointsApi~dataPointsBatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64}
     */
    dataPointsBatchPut(apiCoreRequestsDatapointsBatch, callback) {
      let postBody = apiCoreRequestsDatapointsBatch;
      // verify the required parameter 'apiCoreRequestsDatapointsBatch' is set
      if (apiCoreRequestsDatapointsBatch === undefined || apiCoreRequestsDatapointsBatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsDatapointsBatch' when calling dataPointsBatchPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64;
      return this.apiClient.callApi(
        '/datapoints/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsCount operation.
     * @callback module:api/DataPointsApi~dataPointsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count the datapoints associated to the user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Type of the datapoint (\"tp\"/\"tl\")
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {Boolean} [onlyFavorites] Filter fields by favourite status
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/DataPointsApi~dataPointsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    dataPointsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'onlyFavorites': opts['onlyFavorites'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/datapoints/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsDelete operation.
     * @callback module:api/DataPointsApi~dataPointsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a datapoint
     * @param {Number} id The id of the datapoint
     * @param {module:api/DataPointsApi~dataPointsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    dataPointsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dataPointsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/datapoints/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsGet operation.
     * @callback module:api/DataPointsApi~dataPointsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all the datapoints associated to the user
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] Where to start when retrieving elements. Default is 0 if not specified.
     * @param {Number} [limit = 20)] Maximum elements to retrieve. Default to 20 if not specified.
     * @param {module:model/String} [type] Type of the datapoint (\"tp\"/\"tl\")
     * @param {module:model/String} [status] Status of the datapoint
     * @param {String} [tags] A comma separated list of tags you want to filter with.
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {Boolean} [onlyFavorites] Filter fields by favourite status
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {String} [createdAfter] Exclude datapoints created before this date (YYYYMMDD)
     * @param {String} [createdBefore] Exclude datapoints created after this date (YYYYMMDD)
     * @param {module:api/DataPointsApi~dataPointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    dataPointsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'status': opts['status'],
        'tags': opts['tags'],
        'textSearch': opts['textSearch'],
        'onlyFavorites': opts['onlyFavorites'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/datapoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsGetHits operation.
     * @callback module:api/DataPointsApi~dataPointsGetHitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoClickStreamHitListPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of events related to this datapoint.
     * @param {Number} id Id of the datapoint
     * @param {module:model/String} timeframe Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit results to this number
     * @param {String} [offset] Offset where to start from (it's the lastKey field in the response object)
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [filter] Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")
     * @param {module:api/DataPointsApi~dataPointsGetHitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoClickStreamHitListPage}
     */
    dataPointsGetHits(id, timeframe, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dataPointsGetHits");
      }
      // verify the required parameter 'timeframe' is set
      if (timeframe === undefined || timeframe === null) {
        throw new Error("Missing the required parameter 'timeframe' when calling dataPointsGetHits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timeframe': timeframe,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoClickStreamHitListPage;
      return this.apiClient.callApi(
        '/datapoints/{id}/hits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsGetStatisticsAggregatedSingle operation.
     * @callback module:api/DataPointsApi~dataPointsGetStatisticsAggregatedSingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Type of datapoint (\"tl\"/\"tp\")
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {Boolean} [hourly] If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail
     * @param {module:model/String} [status] Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")
     * @param {String} [tag] A comma separated list of tags you want to filter with.
     * @param {Boolean} [favourite] Is the datapoint is marked as favourite
     * @param {module:api/DataPointsApi~dataPointsGetStatisticsAggregatedSingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedResult}
     */
    dataPointsGetStatisticsAggregatedSingle(timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsAggregatedSingle");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'type': opts['type'],
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'hourly': opts['hourly'],
        'status': opts['status'],
        'tag': opts['tag'],
        'favourite': opts['favourite']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/datapoints/aggregated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsGetStatisticsAllList operation.
     * @callback module:api/DataPointsApi~dataPointsGetStatisticsAllListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * @param {module:model/String} type Type of datapoint (\"tl\"/\"tp\")
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [status] Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")
     * @param {String} [tag] A comma separated list of tags you want to filter with.
     * @param {Boolean} [favourite] Is the datapoint is marked as favourite
     * @param {module:model/String} [groupBy] The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".
     * @param {module:api/DataPointsApi~dataPointsGetStatisticsAllListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult}
     */
    dataPointsGetStatisticsAllList(type, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling dataPointsGetStatisticsAllList");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsAllList");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'status': opts['status'],
        'tag': opts['tag'],
        'favourite': opts['favourite'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/datapoints/aggregated/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsGetStatisticsList operation.
     * @callback module:api/DataPointsApi~dataPointsGetStatisticsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
     * @param {Number} id Id of the datapoint
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {module:model/String} [groupBy] The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".
     * @param {module:api/DataPointsApi~dataPointsGetStatisticsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult}
     */
    dataPointsGetStatisticsList(id, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dataPointsGetStatisticsList");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/datapoints/{id}/aggregated/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsGetStatisticsSingle operation.
     * @callback module:api/DataPointsApi~dataPointsGetStatisticsSingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAggregatedAggregatedResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve statistics about this datapoint for a timeframe
     * @param {Number} id Id of the datapoint
     * @param {module:model/String} timeFrame Timeframe of the request. See list at $timeframeList
     * @param {Object} opts Optional parameters
     * @param {String} [fromDay] If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)
     * @param {String} [toDay] If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)
     * @param {Boolean} [hourly] If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail
     * @param {module:api/DataPointsApi~dataPointsGetStatisticsSingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAggregatedAggregatedResult}
     */
    dataPointsGetStatisticsSingle(id, timeFrame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dataPointsGetStatisticsSingle");
      }
      // verify the required parameter 'timeFrame' is set
      if (timeFrame === undefined || timeFrame === null) {
        throw new Error("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsSingle");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'timeFrame': timeFrame,
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'hourly': opts['hourly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoAggregatedAggregatedResult;
      return this.apiClient.callApi(
        '/datapoints/{id}/aggregated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsPatchFavourite operation.
     * @callback module:api/DataPointsApi~dataPointsPatchFavouriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fast switch the \"favourite\" field of a datapoint
     * @param {Number} id Id of the datapoint
     * @param {module:api/DataPointsApi~dataPointsPatchFavouriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    dataPointsPatchFavourite(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dataPointsPatchFavourite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/datapoints/{id}/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsPatchNotes operation.
     * @callback module:api/DataPointsApi~dataPointsPatchNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fast patch the \"notes\" field of a datapoint
     * @param {Number} id Id of the datapoint
     * @param {module:model/ApiCoreRequestsGenericTextPatch} apiCoreRequestsGenericTextPatch Patch requests
     * @param {module:api/DataPointsApi~dataPointsPatchNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    dataPointsPatchNotes(id, apiCoreRequestsGenericTextPatch, callback) {
      let postBody = apiCoreRequestsGenericTextPatch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dataPointsPatchNotes");
      }
      // verify the required parameter 'apiCoreRequestsGenericTextPatch' is set
      if (apiCoreRequestsGenericTextPatch === undefined || apiCoreRequestsGenericTextPatch === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsGenericTextPatch' when calling dataPointsPatchNotes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/datapoints/{id}/notes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsPost operation.
     * @callback module:api/DataPointsApi~dataPointsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a datapoint
     * @param {Number} id The id of the datapoint
     * @param {module:model/ApiCoreDtoDatapointsDatapoint} apiCoreDtoDatapointsDatapoint The body of the datapoint
     * @param {module:api/DataPointsApi~dataPointsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    dataPointsPost(id, apiCoreDtoDatapointsDatapoint, callback) {
      let postBody = apiCoreDtoDatapointsDatapoint;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dataPointsPost");
      }
      // verify the required parameter 'apiCoreDtoDatapointsDatapoint' is set
      if (apiCoreDtoDatapointsDatapoint === undefined || apiCoreDtoDatapointsDatapoint === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoDatapointsDatapoint' when calling dataPointsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/datapoints/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataPointsPut operation.
     * @callback module:api/DataPointsApi~dataPointsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a datapoint
     * @param {module:model/ApiCoreDtoDatapointsDatapoint} apiCoreDtoDatapointsDatapoint The body of the datapoint
     * @param {module:api/DataPointsApi~dataPointsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    dataPointsPut(apiCoreDtoDatapointsDatapoint, callback) {
      let postBody = apiCoreDtoDatapointsDatapoint;
      // verify the required parameter 'apiCoreDtoDatapointsDatapoint' is set
      if (apiCoreDtoDatapointsDatapoint === undefined || apiCoreDtoDatapointsDatapoint === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoDatapointsDatapoint' when calling dataPointsPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'text/json'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/datapoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the datapointsIdGet operation.
     * @callback module:api/DataPointsApi~datapointsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoDatapointsDatapoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a datapoint
     * @param {Number} id The id of the datapoint
     * @param {module:api/DataPointsApi~datapointsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoDatapointsDatapoint}
     */
    datapointsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datapointsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreDtoDatapointsDatapoint;
      return this.apiClient.callApi(
        '/datapoints/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
