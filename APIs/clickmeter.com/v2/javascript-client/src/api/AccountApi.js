/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCoreDtoAccountingDomainWhitelistEntry from '../model/ApiCoreDtoAccountingDomainWhitelistEntry';
import ApiCoreDtoAccountingGuest from '../model/ApiCoreDtoAccountingGuest';
import ApiCoreDtoAccountingIpBlacklistEntry from '../model/ApiCoreDtoAccountingIpBlacklistEntry';
import ApiCoreDtoAccountingPlan from '../model/ApiCoreDtoAccountingPlan';
import ApiCoreDtoAccountingUser from '../model/ApiCoreDtoAccountingUser';
import ApiCoreRequestsPermissionPatchRequest from '../model/ApiCoreRequestsPermissionPatchRequest';
import ApiCoreResponsesCountResponce from '../model/ApiCoreResponsesCountResponce';
import ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry from '../model/ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry';
import ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry from '../model/ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry';
import ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant from '../model/ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant';
import ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64';
import ApiCoreResponsesEntityUriSystemInt64 from '../model/ApiCoreResponsesEntityUriSystemInt64';

/**
* Account service.
* @module api/AccountApi
* @version v2
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountDeleteDomainWhitelist operation.
     * @callback module:api/AccountApi~accountDeleteDomainWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingDomainWhitelistEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an domain entry
     * @param {String} whitelistId The id of the domain to delete
     * @param {module:api/AccountApi~accountDeleteDomainWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingDomainWhitelistEntry}
     */
    accountDeleteDomainWhitelist(whitelistId, callback) {
      let postBody = null;
      // verify the required parameter 'whitelistId' is set
      if (whitelistId === undefined || whitelistId === null) {
        throw new Error("Missing the required parameter 'whitelistId' when calling accountDeleteDomainWhitelist");
      }

      let pathParams = {
        'whitelistId': whitelistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingDomainWhitelistEntry;
      return this.apiClient.callApi(
        '/account/domainwhitelist/{whitelistId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountDeleteGuest operation.
     * @callback module:api/AccountApi~accountDeleteGuestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a guest
     * @param {Number} guestId Id of the guest
     * @param {module:api/AccountApi~accountDeleteGuestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    accountDeleteGuest(guestId, callback) {
      let postBody = null;
      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling accountDeleteGuest");
      }

      let pathParams = {
        'guestId': guestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/account/guests/{guestId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountDeleteIpBlacklist operation.
     * @callback module:api/AccountApi~accountDeleteIpBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingIpBlacklistEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an ip blacklist entry
     * @param {String} blacklistId The id of the ip to delete
     * @param {module:api/AccountApi~accountDeleteIpBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingIpBlacklistEntry}
     */
    accountDeleteIpBlacklist(blacklistId, callback) {
      let postBody = null;
      // verify the required parameter 'blacklistId' is set
      if (blacklistId === undefined || blacklistId === null) {
        throw new Error("Missing the required parameter 'blacklistId' when calling accountDeleteIpBlacklist");
      }

      let pathParams = {
        'blacklistId': blacklistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingIpBlacklistEntry;
      return this.apiClient.callApi(
        '/account/ipblacklist/{blacklistId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGet operation.
     * @callback module:api/AccountApi~accountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve current account data
     * @param {module:api/AccountApi~accountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingUser}
     */
    accountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingUser;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetDomainWhitelist operation.
     * @callback module:api/AccountApi~accountGetDomainWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of a domains allowed to redirect in DDU mode
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {module:api/AccountApi~accountGetDomainWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry}
     */
    accountGetDomainWhitelist(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry;
      return this.apiClient.callApi(
        '/account/domainwhitelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetGuest operation.
     * @callback module:api/AccountApi~accountGetGuestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingGuest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a guest
     * @param {Number} guestId Id of the guest
     * @param {module:api/AccountApi~accountGetGuestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingGuest}
     */
    accountGetGuest(guestId, callback) {
      let postBody = null;
      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling accountGetGuest");
      }

      let pathParams = {
        'guestId': guestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingGuest;
      return this.apiClient.callApi(
        '/account/guests/{guestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetGuests operation.
     * @callback module:api/AccountApi~accountGetGuestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of a guest
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {String} [sortBy] Field to sort by
     * @param {module:model/String} [sortDirection] Direction of sort \"asc\" or \"desc\"
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {module:api/AccountApi~accountGetGuestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64}
     */
    accountGetGuests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sortBy': opts['sortBy'],
        'sortDirection': opts['sortDirection'],
        'textSearch': opts['textSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/account/guests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetGuestsCount operation.
     * @callback module:api/AccountApi~accountGetGuestsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve count of guests
     * @param {Object} opts Optional parameters
     * @param {String} [textSearch] Filter fields by this pattern
     * @param {module:api/AccountApi~accountGetGuestsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    accountGetGuestsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'textSearch': opts['textSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/account/guests/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetIpBlacklist operation.
     * @callback module:api/AccountApi~accountGetIpBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of a ip to exclude from event tracking
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {module:api/AccountApi~accountGetIpBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry}
     */
    accountGetIpBlacklist(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry;
      return this.apiClient.callApi(
        '/account/ipblacklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetPermissions operation.
     * @callback module:api/AccountApi~accountGetPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve permissions for a guest
     * @param {Number} guestId Id of the guest
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [entityType] Can be \"datapoint\" or \"group\"
     * @param {Number} [offset] Offset where to start from
     * @param {Number} [limit] Limit results to this number
     * @param {module:model/String} [type] Can be \"w\" or \"r\"
     * @param {Number} [entityId] Optional id of the datapoint/group entity to filter by
     * @param {module:api/AccountApi~accountGetPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant}
     */
    accountGetPermissions(guestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling accountGetPermissions");
      }

      let pathParams = {
        'guestId': guestId
      };
      let queryParams = {
        'entityType': opts['entityType'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'entityId': opts['entityId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant;
      return this.apiClient.callApi(
        '/account/guests/{guestId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetPermissionsCount operation.
     * @callback module:api/AccountApi~accountGetPermissionsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesCountResponce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve count of the permissions for a guest
     * @param {Number} guestId Id of the guest
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [entityType] Can be \"datapoint\" or \"group\"
     * @param {module:model/String} [type] Can be \"w\" or \"r\"
     * @param {Number} [entityId] Optional id of the datapoint/group entity to filter by
     * @param {module:api/AccountApi~accountGetPermissionsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesCountResponce}
     */
    accountGetPermissionsCount(guestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling accountGetPermissionsCount");
      }

      let pathParams = {
        'guestId': guestId
      };
      let queryParams = {
        'entityType': opts['entityType'],
        'type': opts['type'],
        'entityId': opts['entityId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesCountResponce;
      return this.apiClient.callApi(
        '/account/guests/{guestId}/permissions/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetPlan operation.
     * @callback module:api/AccountApi~accountGetPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve current account plan
     * @param {module:api/AccountApi~accountGetPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingPlan}
     */
    accountGetPlan(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingPlan;
      return this.apiClient.callApi(
        '/account/plan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGuestsGuestIdTypePermissionsPatchPost operation.
     * @callback module:api/AccountApi~accountGuestsGuestIdTypePermissionsPatchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the permission on a shared object
     * @param {Number} guestId Id of the guest
     * @param {module:model/String} type Can be \"datapoint\" or \"group\"
     * @param {module:model/ApiCoreRequestsPermissionPatchRequest} apiCoreRequestsPermissionPatchRequest The patch permission request
     * @param {module:api/AccountApi~accountGuestsGuestIdTypePermissionsPatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    accountGuestsGuestIdTypePermissionsPatchPost(guestId, type, apiCoreRequestsPermissionPatchRequest, callback) {
      let postBody = apiCoreRequestsPermissionPatchRequest;
      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling accountGuestsGuestIdTypePermissionsPatchPost");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling accountGuestsGuestIdTypePermissionsPatchPost");
      }
      // verify the required parameter 'apiCoreRequestsPermissionPatchRequest' is set
      if (apiCoreRequestsPermissionPatchRequest === undefined || apiCoreRequestsPermissionPatchRequest === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsPermissionPatchRequest' when calling accountGuestsGuestIdTypePermissionsPatchPost");
      }

      let pathParams = {
        'guestId': guestId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/account/guests/{guestId}/{type}/permissions/patch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPatchPermissions operation.
     * @callback module:api/AccountApi~accountPatchPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreResponsesEntityUriSystemInt64} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the permission on a shared object
     * @param {Number} guestId Id of the guest
     * @param {module:model/String} type Can be \"datapoint\" or \"group\"
     * @param {module:model/ApiCoreRequestsPermissionPatchRequest} apiCoreRequestsPermissionPatchRequest The patch permission request
     * @param {module:api/AccountApi~accountPatchPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreResponsesEntityUriSystemInt64}
     */
    accountPatchPermissions(guestId, type, apiCoreRequestsPermissionPatchRequest, callback) {
      let postBody = apiCoreRequestsPermissionPatchRequest;
      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling accountPatchPermissions");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling accountPatchPermissions");
      }
      // verify the required parameter 'apiCoreRequestsPermissionPatchRequest' is set
      if (apiCoreRequestsPermissionPatchRequest === undefined || apiCoreRequestsPermissionPatchRequest === null) {
        throw new Error("Missing the required parameter 'apiCoreRequestsPermissionPatchRequest' when calling accountPatchPermissions");
      }

      let pathParams = {
        'guestId': guestId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreResponsesEntityUriSystemInt64;
      return this.apiClient.callApi(
        '/account/guests/{guestId}/{type}/permissions/patch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPost operation.
     * @callback module:api/AccountApi~accountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update current account data
     * @param {module:model/ApiCoreDtoAccountingUser} apiCoreDtoAccountingUser 
     * @param {module:api/AccountApi~accountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingUser}
     */
    accountPost(apiCoreDtoAccountingUser, callback) {
      let postBody = apiCoreDtoAccountingUser;
      // verify the required parameter 'apiCoreDtoAccountingUser' is set
      if (apiCoreDtoAccountingUser === undefined || apiCoreDtoAccountingUser === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoAccountingUser' when calling accountPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingUser;
      return this.apiClient.callApi(
        '/account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPostGuest operation.
     * @callback module:api/AccountApi~accountPostGuestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingGuest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a guest
     * @param {Number} guestId Id of the guest
     * @param {module:model/ApiCoreDtoAccountingGuest} apiCoreDtoAccountingGuest Guest object with field updated
     * @param {module:api/AccountApi~accountPostGuestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingGuest}
     */
    accountPostGuest(guestId, apiCoreDtoAccountingGuest, callback) {
      let postBody = apiCoreDtoAccountingGuest;
      // verify the required parameter 'guestId' is set
      if (guestId === undefined || guestId === null) {
        throw new Error("Missing the required parameter 'guestId' when calling accountPostGuest");
      }
      // verify the required parameter 'apiCoreDtoAccountingGuest' is set
      if (apiCoreDtoAccountingGuest === undefined || apiCoreDtoAccountingGuest === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoAccountingGuest' when calling accountPostGuest");
      }

      let pathParams = {
        'guestId': guestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingGuest;
      return this.apiClient.callApi(
        '/account/guests/{guestId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPutDomainWhitelist operation.
     * @callback module:api/AccountApi~accountPutDomainWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingDomainWhitelistEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an domain entry
     * @param {module:model/ApiCoreDtoAccountingDomainWhitelistEntry} apiCoreDtoAccountingDomainWhitelistEntry The entry to add
     * @param {module:api/AccountApi~accountPutDomainWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingDomainWhitelistEntry}
     */
    accountPutDomainWhitelist(apiCoreDtoAccountingDomainWhitelistEntry, callback) {
      let postBody = apiCoreDtoAccountingDomainWhitelistEntry;
      // verify the required parameter 'apiCoreDtoAccountingDomainWhitelistEntry' is set
      if (apiCoreDtoAccountingDomainWhitelistEntry === undefined || apiCoreDtoAccountingDomainWhitelistEntry === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoAccountingDomainWhitelistEntry' when calling accountPutDomainWhitelist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingDomainWhitelistEntry;
      return this.apiClient.callApi(
        '/account/domainwhitelist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPutGuest operation.
     * @callback module:api/AccountApi~accountPutGuestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingGuest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a guest
     * @param {module:model/ApiCoreDtoAccountingGuest} apiCoreDtoAccountingGuest Guest object to create
     * @param {module:api/AccountApi~accountPutGuestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingGuest}
     */
    accountPutGuest(apiCoreDtoAccountingGuest, callback) {
      let postBody = apiCoreDtoAccountingGuest;
      // verify the required parameter 'apiCoreDtoAccountingGuest' is set
      if (apiCoreDtoAccountingGuest === undefined || apiCoreDtoAccountingGuest === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoAccountingGuest' when calling accountPutGuest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingGuest;
      return this.apiClient.callApi(
        '/account/guests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPutIpBlacklist operation.
     * @callback module:api/AccountApi~accountPutIpBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCoreDtoAccountingIpBlacklistEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ip blacklist entry
     * @param {module:model/ApiCoreDtoAccountingIpBlacklistEntry} apiCoreDtoAccountingIpBlacklistEntry The entry to add
     * @param {module:api/AccountApi~accountPutIpBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCoreDtoAccountingIpBlacklistEntry}
     */
    accountPutIpBlacklist(apiCoreDtoAccountingIpBlacklistEntry, callback) {
      let postBody = apiCoreDtoAccountingIpBlacklistEntry;
      // verify the required parameter 'apiCoreDtoAccountingIpBlacklistEntry' is set
      if (apiCoreDtoAccountingIpBlacklistEntry === undefined || apiCoreDtoAccountingIpBlacklistEntry === null) {
        throw new Error("Missing the required parameter 'apiCoreDtoAccountingIpBlacklistEntry' when calling accountPutIpBlacklist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = ApiCoreDtoAccountingIpBlacklistEntry;
      return this.apiClient.callApi(
        '/account/ipblacklist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
