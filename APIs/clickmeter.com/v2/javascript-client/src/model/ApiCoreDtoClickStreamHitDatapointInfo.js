/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiCoreDtoTagsTag from './ApiCoreDtoTagsTag';

/**
 * The ApiCoreDtoClickStreamHitDatapointInfo model module.
 * @module model/ApiCoreDtoClickStreamHitDatapointInfo
 * @version v2
 */
class ApiCoreDtoClickStreamHitDatapointInfo {
    /**
     * Constructs a new <code>ApiCoreDtoClickStreamHitDatapointInfo</code>.
     * @alias module:model/ApiCoreDtoClickStreamHitDatapointInfo
     */
    constructor() { 
        
        ApiCoreDtoClickStreamHitDatapointInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoClickStreamHitDatapointInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoClickStreamHitDatapointInfo} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoClickStreamHitDatapointInfo} The populated <code>ApiCoreDtoClickStreamHitDatapointInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoClickStreamHitDatapointInfo();

            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('datapointFavourite')) {
                obj['datapointFavourite'] = ApiClient.convertToType(data['datapointFavourite'], 'Boolean');
            }
            if (data.hasOwnProperty('datapointId')) {
                obj['datapointId'] = ApiClient.convertToType(data['datapointId'], 'Number');
            }
            if (data.hasOwnProperty('datapointName')) {
                obj['datapointName'] = ApiClient.convertToType(data['datapointName'], 'String');
            }
            if (data.hasOwnProperty('datapointTitle')) {
                obj['datapointTitle'] = ApiClient.convertToType(data['datapointTitle'], 'String');
            }
            if (data.hasOwnProperty('datapointType')) {
                obj['datapointType'] = ApiClient.convertToType(data['datapointType'], 'String');
            }
            if (data.hasOwnProperty('destinationUrl')) {
                obj['destinationUrl'] = ApiClient.convertToType(data['destinationUrl'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Number');
            }
            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('isABTest')) {
                obj['isABTest'] = ApiClient.convertToType(data['isABTest'], 'Boolean');
            }
            if (data.hasOwnProperty('isPrivateShared')) {
                obj['isPrivateShared'] = ApiClient.convertToType(data['isPrivateShared'], 'Boolean');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [ApiCoreDtoTagsTag]);
            }
            if (data.hasOwnProperty('trackingCode')) {
                obj['trackingCode'] = ApiClient.convertToType(data['trackingCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoClickStreamHitDatapointInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoClickStreamHitDatapointInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['datapointName'] && !(typeof data['datapointName'] === 'string' || data['datapointName'] instanceof String)) {
            throw new Error("Expected the field `datapointName` to be a primitive type in the JSON string but got " + data['datapointName']);
        }
        // ensure the json data is a string
        if (data['datapointTitle'] && !(typeof data['datapointTitle'] === 'string' || data['datapointTitle'] instanceof String)) {
            throw new Error("Expected the field `datapointTitle` to be a primitive type in the JSON string but got " + data['datapointTitle']);
        }
        // ensure the json data is a string
        if (data['datapointType'] && !(typeof data['datapointType'] === 'string' || data['datapointType'] instanceof String)) {
            throw new Error("Expected the field `datapointType` to be a primitive type in the JSON string but got " + data['datapointType']);
        }
        // ensure the json data is a string
        if (data['destinationUrl'] && !(typeof data['destinationUrl'] === 'string' || data['destinationUrl'] instanceof String)) {
            throw new Error("Expected the field `destinationUrl` to be a primitive type in the JSON string but got " + data['destinationUrl']);
        }
        // ensure the json data is a string
        if (data['groupName'] && !(typeof data['groupName'] === 'string' || data['groupName'] instanceof String)) {
            throw new Error("Expected the field `groupName` to be a primitive type in the JSON string but got " + data['groupName']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                ApiCoreDtoTagsTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trackingCode'] && !(typeof data['trackingCode'] === 'string' || data['trackingCode'] instanceof String)) {
            throw new Error("Expected the field `trackingCode` to be a primitive type in the JSON string but got " + data['trackingCode']);
        }

        return true;
    }


}



/**
 *  (A date in \"YmdHis\" format)
 * @member {String} creationDate
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['creationDate'] = undefined;

/**
 * @member {Boolean} datapointFavourite
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['datapointFavourite'] = undefined;

/**
 * @member {Number} datapointId
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['datapointId'] = undefined;

/**
 * @member {String} datapointName
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['datapointName'] = undefined;

/**
 * @member {String} datapointTitle
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['datapointTitle'] = undefined;

/**
 * @member {String} datapointType
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['datapointType'] = undefined;

/**
 * @member {String} destinationUrl
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['destinationUrl'] = undefined;

/**
 * @member {Number} groupId
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['groupId'] = undefined;

/**
 * @member {String} groupName
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['groupName'] = undefined;

/**
 * @member {Boolean} isABTest
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['isABTest'] = undefined;

/**
 * @member {Boolean} isPrivateShared
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['isPrivateShared'] = undefined;

/**
 * @member {Boolean} isPublic
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['isPublic'] = undefined;

/**
 * @member {String} notes
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['notes'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitDatapointInfo.StatusEnum} status
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/ApiCoreDtoTagsTag>} tags
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['tags'] = undefined;

/**
 * @member {String} trackingCode
 */
ApiCoreDtoClickStreamHitDatapointInfo.prototype['trackingCode'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ApiCoreDtoClickStreamHitDatapointInfo['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Paused"
     * @const
     */
    "Paused": "Paused",

    /**
     * value: "Abuse"
     * @const
     */
    "Abuse": "Abuse",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted"
};



export default ApiCoreDtoClickStreamHitDatapointInfo;

