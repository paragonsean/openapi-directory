/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiCoreDtoAccountingUser model module.
 * @module model/ApiCoreDtoAccountingUser
 * @version v2
 */
class ApiCoreDtoAccountingUser {
    /**
     * Constructs a new <code>ApiCoreDtoAccountingUser</code>.
     * @alias module:model/ApiCoreDtoAccountingUser
     */
    constructor() { 
        
        ApiCoreDtoAccountingUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoAccountingUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoAccountingUser} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoAccountingUser} The populated <code>ApiCoreDtoAccountingUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoAccountingUser();

            if (data.hasOwnProperty('boGoVal')) {
                obj['boGoVal'] = ApiClient.convertToType(data['boGoVal'], 'String');
            }
            if (data.hasOwnProperty('bonusClicks')) {
                obj['bonusClicks'] = ApiClient.convertToType(data['bonusClicks'], 'Number');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('companyRole')) {
                obj['companyRole'] = ApiClient.convertToType(data['companyRole'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('redirectOnly')) {
                obj['redirectOnly'] = ApiClient.convertToType(data['redirectOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('registrationDate')) {
                obj['registrationDate'] = ApiClient.convertToType(data['registrationDate'], 'String');
            }
            if (data.hasOwnProperty('timeframeMinDate')) {
                obj['timeframeMinDate'] = ApiClient.convertToType(data['timeframeMinDate'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'Number');
            }
            if (data.hasOwnProperty('timezonename')) {
                obj['timezonename'] = ApiClient.convertToType(data['timezonename'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoAccountingUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoAccountingUser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['boGoVal'] && !(typeof data['boGoVal'] === 'string' || data['boGoVal'] instanceof String)) {
            throw new Error("Expected the field `boGoVal` to be a primitive type in the JSON string but got " + data['boGoVal']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['companyRole'] && !(typeof data['companyRole'] === 'string' || data['companyRole'] instanceof String)) {
            throw new Error("Expected the field `companyRole` to be a primitive type in the JSON string but got " + data['companyRole']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['registrationDate'] && !(typeof data['registrationDate'] === 'string' || data['registrationDate'] instanceof String)) {
            throw new Error("Expected the field `registrationDate` to be a primitive type in the JSON string but got " + data['registrationDate']);
        }
        // ensure the json data is a string
        if (data['timeframeMinDate'] && !(typeof data['timeframeMinDate'] === 'string' || data['timeframeMinDate'] instanceof String)) {
            throw new Error("Expected the field `timeframeMinDate` to be a primitive type in the JSON string but got " + data['timeframeMinDate']);
        }
        // ensure the json data is a string
        if (data['timezonename'] && !(typeof data['timezonename'] === 'string' || data['timezonename'] instanceof String)) {
            throw new Error("Expected the field `timezonename` to be a primitive type in the JSON string but got " + data['timezonename']);
        }

        return true;
    }


}



/**
 * @member {String} boGoVal
 */
ApiCoreDtoAccountingUser.prototype['boGoVal'] = undefined;

/**
 * @member {Number} bonusClicks
 */
ApiCoreDtoAccountingUser.prototype['bonusClicks'] = undefined;

/**
 * @member {String} companyName
 */
ApiCoreDtoAccountingUser.prototype['companyName'] = undefined;

/**
 * @member {String} companyRole
 */
ApiCoreDtoAccountingUser.prototype['companyRole'] = undefined;

/**
 * @member {String} email
 */
ApiCoreDtoAccountingUser.prototype['email'] = undefined;

/**
 * @member {String} firstName
 */
ApiCoreDtoAccountingUser.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
ApiCoreDtoAccountingUser.prototype['lastName'] = undefined;

/**
 * @member {String} phone
 */
ApiCoreDtoAccountingUser.prototype['phone'] = undefined;

/**
 * @member {Boolean} redirectOnly
 */
ApiCoreDtoAccountingUser.prototype['redirectOnly'] = undefined;

/**
 *  (A date in \"YmdHis\" format)
 * @member {String} registrationDate
 */
ApiCoreDtoAccountingUser.prototype['registrationDate'] = undefined;

/**
 *  (A date in \"YmdHis\" format)
 * @member {String} timeframeMinDate
 */
ApiCoreDtoAccountingUser.prototype['timeframeMinDate'] = undefined;

/**
 * @member {Number} timezone
 */
ApiCoreDtoAccountingUser.prototype['timezone'] = undefined;

/**
 * @member {String} timezonename
 */
ApiCoreDtoAccountingUser.prototype['timezonename'] = undefined;






export default ApiCoreDtoAccountingUser;

