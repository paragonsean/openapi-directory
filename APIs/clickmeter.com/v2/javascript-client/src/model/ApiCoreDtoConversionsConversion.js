/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiCoreDtoConversionsConversion model module.
 * @module model/ApiCoreDtoConversionsConversion
 * @version v2
 */
class ApiCoreDtoConversionsConversion {
    /**
     * Constructs a new <code>ApiCoreDtoConversionsConversion</code>.
     * @alias module:model/ApiCoreDtoConversionsConversion
     */
    constructor() { 
        
        ApiCoreDtoConversionsConversion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoConversionsConversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoConversionsConversion} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoConversionsConversion} The populated <code>ApiCoreDtoConversionsConversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoConversionsConversion();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoConversionsConversion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoConversionsConversion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}



/**
 * @member {String} code
 */
ApiCoreDtoConversionsConversion.prototype['code'] = undefined;

/**
 *  (A date in \"YmdHis\" format)
 * @member {String} creationDate
 */
ApiCoreDtoConversionsConversion.prototype['creationDate'] = undefined;

/**
 * @member {Boolean} deleted
 */
ApiCoreDtoConversionsConversion.prototype['deleted'] = undefined;

/**
 * @member {String} description
 */
ApiCoreDtoConversionsConversion.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
ApiCoreDtoConversionsConversion.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ApiCoreDtoConversionsConversion.prototype['name'] = undefined;

/**
 * @member {module:model/ApiCoreDtoConversionsConversion.ProtocolEnum} protocol
 */
ApiCoreDtoConversionsConversion.prototype['protocol'] = undefined;

/**
 * @member {Number} value
 */
ApiCoreDtoConversionsConversion.prototype['value'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
ApiCoreDtoConversionsConversion['ProtocolEnum'] = {

    /**
     * value: "Http"
     * @const
     */
    "Http": "Http",

    /**
     * value: "Https"
     * @const
     */
    "Https": "Https"
};



export default ApiCoreDtoConversionsConversion;

