/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiCoreDtoAccountingConversionOptions from './ApiCoreDtoAccountingConversionOptions';
import ApiCoreDtoAccountingExtendedGrants from './ApiCoreDtoAccountingExtendedGrants';
import ApiCoreDtoAccountingHitOptions from './ApiCoreDtoAccountingHitOptions';
import ApiCoreDtoGrantsGrant from './ApiCoreDtoGrantsGrant';

/**
 * The ApiCoreDtoAccountingGuest model module.
 * @module model/ApiCoreDtoAccountingGuest
 * @version v2
 */
class ApiCoreDtoAccountingGuest {
    /**
     * Constructs a new <code>ApiCoreDtoAccountingGuest</code>.
     * @alias module:model/ApiCoreDtoAccountingGuest
     */
    constructor() { 
        
        ApiCoreDtoAccountingGuest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoAccountingGuest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoAccountingGuest} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoAccountingGuest} The populated <code>ApiCoreDtoAccountingGuest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoAccountingGuest();

            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
            }
            if (data.hasOwnProperty('conversionOptions')) {
                obj['conversionOptions'] = ApiCoreDtoAccountingConversionOptions.constructFromObject(data['conversionOptions']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('currentGrant')) {
                obj['currentGrant'] = ApiCoreDtoGrantsGrant.constructFromObject(data['currentGrant']);
            }
            if (data.hasOwnProperty('dateFormat')) {
                obj['dateFormat'] = ApiClient.convertToType(data['dateFormat'], 'String');
            }
            if (data.hasOwnProperty('decimalSeparator')) {
                obj['decimalSeparator'] = ApiClient.convertToType(data['decimalSeparator'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('extendedGrants')) {
                obj['extendedGrants'] = ApiCoreDtoAccountingExtendedGrants.constructFromObject(data['extendedGrants']);
            }
            if (data.hasOwnProperty('groupGrants')) {
                obj['groupGrants'] = ApiClient.convertToType(data['groupGrants'], 'Number');
            }
            if (data.hasOwnProperty('hitOptions')) {
                obj['hitOptions'] = ApiCoreDtoAccountingHitOptions.constructFromObject(data['hitOptions']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('loginCount')) {
                obj['loginCount'] = ApiClient.convertToType(data['loginCount'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('numberGroupSeparator')) {
                obj['numberGroupSeparator'] = ApiClient.convertToType(data['numberGroupSeparator'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('timeFormat')) {
                obj['timeFormat'] = ApiClient.convertToType(data['timeFormat'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'Number');
            }
            if (data.hasOwnProperty('timeframeMinDate')) {
                obj['timeframeMinDate'] = ApiClient.convertToType(data['timeframeMinDate'], 'String');
            }
            if (data.hasOwnProperty('timezonename')) {
                obj['timezonename'] = ApiClient.convertToType(data['timezonename'], 'String');
            }
            if (data.hasOwnProperty('tlGrants')) {
                obj['tlGrants'] = ApiClient.convertToType(data['tlGrants'], 'Number');
            }
            if (data.hasOwnProperty('tpGrants')) {
                obj['tpGrants'] = ApiClient.convertToType(data['tpGrants'], 'Number');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoAccountingGuest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoAccountingGuest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiKey'] && !(typeof data['apiKey'] === 'string' || data['apiKey'] instanceof String)) {
            throw new Error("Expected the field `apiKey` to be a primitive type in the JSON string but got " + data['apiKey']);
        }
        // validate the optional field `conversionOptions`
        if (data['conversionOptions']) { // data not null
          ApiCoreDtoAccountingConversionOptions.validateJSON(data['conversionOptions']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // validate the optional field `currentGrant`
        if (data['currentGrant']) { // data not null
          ApiCoreDtoGrantsGrant.validateJSON(data['currentGrant']);
        }
        // ensure the json data is a string
        if (data['dateFormat'] && !(typeof data['dateFormat'] === 'string' || data['dateFormat'] instanceof String)) {
            throw new Error("Expected the field `dateFormat` to be a primitive type in the JSON string but got " + data['dateFormat']);
        }
        // ensure the json data is a string
        if (data['decimalSeparator'] && !(typeof data['decimalSeparator'] === 'string' || data['decimalSeparator'] instanceof String)) {
            throw new Error("Expected the field `decimalSeparator` to be a primitive type in the JSON string but got " + data['decimalSeparator']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // validate the optional field `extendedGrants`
        if (data['extendedGrants']) { // data not null
          ApiCoreDtoAccountingExtendedGrants.validateJSON(data['extendedGrants']);
        }
        // validate the optional field `hitOptions`
        if (data['hitOptions']) { // data not null
          ApiCoreDtoAccountingHitOptions.validateJSON(data['hitOptions']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['numberGroupSeparator'] && !(typeof data['numberGroupSeparator'] === 'string' || data['numberGroupSeparator'] instanceof String)) {
            throw new Error("Expected the field `numberGroupSeparator` to be a primitive type in the JSON string but got " + data['numberGroupSeparator']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['timeFormat'] && !(typeof data['timeFormat'] === 'string' || data['timeFormat'] instanceof String)) {
            throw new Error("Expected the field `timeFormat` to be a primitive type in the JSON string but got " + data['timeFormat']);
        }
        // ensure the json data is a string
        if (data['timeframeMinDate'] && !(typeof data['timeframeMinDate'] === 'string' || data['timeframeMinDate'] instanceof String)) {
            throw new Error("Expected the field `timeframeMinDate` to be a primitive type in the JSON string but got " + data['timeframeMinDate']);
        }
        // ensure the json data is a string
        if (data['timezonename'] && !(typeof data['timezonename'] === 'string' || data['timezonename'] instanceof String)) {
            throw new Error("Expected the field `timezonename` to be a primitive type in the JSON string but got " + data['timezonename']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}



/**
 * @member {String} apiKey
 */
ApiCoreDtoAccountingGuest.prototype['apiKey'] = undefined;

/**
 * @member {module:model/ApiCoreDtoAccountingConversionOptions} conversionOptions
 */
ApiCoreDtoAccountingGuest.prototype['conversionOptions'] = undefined;

/**
 *  (A date in \"YmdHis\" format)
 * @member {String} creationDate
 */
ApiCoreDtoAccountingGuest.prototype['creationDate'] = undefined;

/**
 * @member {module:model/ApiCoreDtoGrantsGrant} currentGrant
 */
ApiCoreDtoAccountingGuest.prototype['currentGrant'] = undefined;

/**
 * @member {String} dateFormat
 */
ApiCoreDtoAccountingGuest.prototype['dateFormat'] = undefined;

/**
 * @member {String} decimalSeparator
 */
ApiCoreDtoAccountingGuest.prototype['decimalSeparator'] = undefined;

/**
 * @member {String} email
 */
ApiCoreDtoAccountingGuest.prototype['email'] = undefined;

/**
 * @member {module:model/ApiCoreDtoAccountingExtendedGrants} extendedGrants
 */
ApiCoreDtoAccountingGuest.prototype['extendedGrants'] = undefined;

/**
 * @member {Number} groupGrants
 */
ApiCoreDtoAccountingGuest.prototype['groupGrants'] = undefined;

/**
 * @member {module:model/ApiCoreDtoAccountingHitOptions} hitOptions
 */
ApiCoreDtoAccountingGuest.prototype['hitOptions'] = undefined;

/**
 * @member {Number} id
 */
ApiCoreDtoAccountingGuest.prototype['id'] = undefined;

/**
 * @member {String} key
 */
ApiCoreDtoAccountingGuest.prototype['key'] = undefined;

/**
 * @member {String} language
 */
ApiCoreDtoAccountingGuest.prototype['language'] = undefined;

/**
 * @member {Number} loginCount
 */
ApiCoreDtoAccountingGuest.prototype['loginCount'] = undefined;

/**
 * @member {String} name
 */
ApiCoreDtoAccountingGuest.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
ApiCoreDtoAccountingGuest.prototype['notes'] = undefined;

/**
 * @member {String} numberGroupSeparator
 */
ApiCoreDtoAccountingGuest.prototype['numberGroupSeparator'] = undefined;

/**
 * @member {String} password
 */
ApiCoreDtoAccountingGuest.prototype['password'] = undefined;

/**
 * @member {module:model/ApiCoreDtoAccountingGuest.TimeFormatEnum} timeFormat
 */
ApiCoreDtoAccountingGuest.prototype['timeFormat'] = undefined;

/**
 * @member {Number} timeZone
 */
ApiCoreDtoAccountingGuest.prototype['timeZone'] = undefined;

/**
 *  (A date in \"YmdHis\" format)
 * @member {String} timeframeMinDate
 */
ApiCoreDtoAccountingGuest.prototype['timeframeMinDate'] = undefined;

/**
 * @member {String} timezonename
 */
ApiCoreDtoAccountingGuest.prototype['timezonename'] = undefined;

/**
 * @member {Number} tlGrants
 */
ApiCoreDtoAccountingGuest.prototype['tlGrants'] = undefined;

/**
 * @member {Number} tpGrants
 */
ApiCoreDtoAccountingGuest.prototype['tpGrants'] = undefined;

/**
 * @member {String} userName
 */
ApiCoreDtoAccountingGuest.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>timeFormat</code> property.
 * @enum {String}
 * @readonly
 */
ApiCoreDtoAccountingGuest['TimeFormatEnum'] = {

    /**
     * value: "AmPm"
     * @const
     */
    "AmPm": "AmPm",

    /**
     * value: "H24"
     * @const
     */
    "H24": "H24"
};



export default ApiCoreDtoAccountingGuest;

