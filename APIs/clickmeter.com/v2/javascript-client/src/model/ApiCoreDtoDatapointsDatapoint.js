/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiCoreDtoDatapointsTrackingLinkSpecifics from './ApiCoreDtoDatapointsTrackingLinkSpecifics';
import ApiCoreDtoDatapointsTrackingPixelSpecifics from './ApiCoreDtoDatapointsTrackingPixelSpecifics';
import ApiCoreDtoTagsTag from './ApiCoreDtoTagsTag';

/**
 * The ApiCoreDtoDatapointsDatapoint model module.
 * @module model/ApiCoreDtoDatapointsDatapoint
 * @version v2
 */
class ApiCoreDtoDatapointsDatapoint {
    /**
     * Constructs a new <code>ApiCoreDtoDatapointsDatapoint</code>.
     * @alias module:model/ApiCoreDtoDatapointsDatapoint
     */
    constructor() { 
        
        ApiCoreDtoDatapointsDatapoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoDatapointsDatapoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoDatapointsDatapoint} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoDatapointsDatapoint} The populated <code>ApiCoreDtoDatapointsDatapoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoDatapointsDatapoint();

            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('encodeIp')) {
                obj['encodeIp'] = ApiClient.convertToType(data['encodeIp'], 'Boolean');
            }
            if (data.hasOwnProperty('fifthConversionId')) {
                obj['fifthConversionId'] = ApiClient.convertToType(data['fifthConversionId'], 'Number');
            }
            if (data.hasOwnProperty('fifthConversionName')) {
                obj['fifthConversionName'] = ApiClient.convertToType(data['fifthConversionName'], 'String');
            }
            if (data.hasOwnProperty('firstConversionId')) {
                obj['firstConversionId'] = ApiClient.convertToType(data['firstConversionId'], 'Number');
            }
            if (data.hasOwnProperty('firstConversionName')) {
                obj['firstConversionName'] = ApiClient.convertToType(data['firstConversionName'], 'String');
            }
            if (data.hasOwnProperty('fourthConversionId')) {
                obj['fourthConversionId'] = ApiClient.convertToType(data['fourthConversionId'], 'Number');
            }
            if (data.hasOwnProperty('fourthConversionName')) {
                obj['fourthConversionName'] = ApiClient.convertToType(data['fourthConversionName'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Number');
            }
            if (data.hasOwnProperty('groupName')) {
                obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('isSecured')) {
                obj['isSecured'] = ApiClient.convertToType(data['isSecured'], 'Boolean');
            }
            if (data.hasOwnProperty('lightTracking')) {
                obj['lightTracking'] = ApiClient.convertToType(data['lightTracking'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('preferred')) {
                obj['preferred'] = ApiClient.convertToType(data['preferred'], 'Boolean');
            }
            if (data.hasOwnProperty('redirectOnly')) {
                obj['redirectOnly'] = ApiClient.convertToType(data['redirectOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('secondConversionId')) {
                obj['secondConversionId'] = ApiClient.convertToType(data['secondConversionId'], 'Number');
            }
            if (data.hasOwnProperty('secondConversionName')) {
                obj['secondConversionName'] = ApiClient.convertToType(data['secondConversionName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [ApiCoreDtoTagsTag]);
            }
            if (data.hasOwnProperty('thirdConversionId')) {
                obj['thirdConversionId'] = ApiClient.convertToType(data['thirdConversionId'], 'Number');
            }
            if (data.hasOwnProperty('thirdConversionName')) {
                obj['thirdConversionName'] = ApiClient.convertToType(data['thirdConversionName'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('trackingCode')) {
                obj['trackingCode'] = ApiClient.convertToType(data['trackingCode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeTL')) {
                obj['typeTL'] = ApiCoreDtoDatapointsTrackingLinkSpecifics.constructFromObject(data['typeTL']);
            }
            if (data.hasOwnProperty('typeTP')) {
                obj['typeTP'] = ApiCoreDtoDatapointsTrackingPixelSpecifics.constructFromObject(data['typeTP']);
            }
            if (data.hasOwnProperty('writePermited')) {
                obj['writePermited'] = ApiClient.convertToType(data['writePermited'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoDatapointsDatapoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoDatapointsDatapoint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['fifthConversionName'] && !(typeof data['fifthConversionName'] === 'string' || data['fifthConversionName'] instanceof String)) {
            throw new Error("Expected the field `fifthConversionName` to be a primitive type in the JSON string but got " + data['fifthConversionName']);
        }
        // ensure the json data is a string
        if (data['firstConversionName'] && !(typeof data['firstConversionName'] === 'string' || data['firstConversionName'] instanceof String)) {
            throw new Error("Expected the field `firstConversionName` to be a primitive type in the JSON string but got " + data['firstConversionName']);
        }
        // ensure the json data is a string
        if (data['fourthConversionName'] && !(typeof data['fourthConversionName'] === 'string' || data['fourthConversionName'] instanceof String)) {
            throw new Error("Expected the field `fourthConversionName` to be a primitive type in the JSON string but got " + data['fourthConversionName']);
        }
        // ensure the json data is a string
        if (data['groupName'] && !(typeof data['groupName'] === 'string' || data['groupName'] instanceof String)) {
            throw new Error("Expected the field `groupName` to be a primitive type in the JSON string but got " + data['groupName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['secondConversionName'] && !(typeof data['secondConversionName'] === 'string' || data['secondConversionName'] instanceof String)) {
            throw new Error("Expected the field `secondConversionName` to be a primitive type in the JSON string but got " + data['secondConversionName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                ApiCoreDtoTagsTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['thirdConversionName'] && !(typeof data['thirdConversionName'] === 'string' || data['thirdConversionName'] instanceof String)) {
            throw new Error("Expected the field `thirdConversionName` to be a primitive type in the JSON string but got " + data['thirdConversionName']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['trackingCode'] && !(typeof data['trackingCode'] === 'string' || data['trackingCode'] instanceof String)) {
            throw new Error("Expected the field `trackingCode` to be a primitive type in the JSON string but got " + data['trackingCode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `typeTL`
        if (data['typeTL']) { // data not null
          ApiCoreDtoDatapointsTrackingLinkSpecifics.validateJSON(data['typeTL']);
        }
        // validate the optional field `typeTP`
        if (data['typeTP']) { // data not null
          ApiCoreDtoDatapointsTrackingPixelSpecifics.validateJSON(data['typeTP']);
        }

        return true;
    }


}



/**
 *  (A date in \"YmdHis\" format)
 * @member {String} creationDate
 */
ApiCoreDtoDatapointsDatapoint.prototype['creationDate'] = undefined;

/**
 * @member {Boolean} encodeIp
 */
ApiCoreDtoDatapointsDatapoint.prototype['encodeIp'] = undefined;

/**
 * @member {Number} fifthConversionId
 */
ApiCoreDtoDatapointsDatapoint.prototype['fifthConversionId'] = undefined;

/**
 * @member {String} fifthConversionName
 */
ApiCoreDtoDatapointsDatapoint.prototype['fifthConversionName'] = undefined;

/**
 * @member {Number} firstConversionId
 */
ApiCoreDtoDatapointsDatapoint.prototype['firstConversionId'] = undefined;

/**
 * @member {String} firstConversionName
 */
ApiCoreDtoDatapointsDatapoint.prototype['firstConversionName'] = undefined;

/**
 * @member {Number} fourthConversionId
 */
ApiCoreDtoDatapointsDatapoint.prototype['fourthConversionId'] = undefined;

/**
 * @member {String} fourthConversionName
 */
ApiCoreDtoDatapointsDatapoint.prototype['fourthConversionName'] = undefined;

/**
 * @member {Number} groupId
 */
ApiCoreDtoDatapointsDatapoint.prototype['groupId'] = undefined;

/**
 * @member {String} groupName
 */
ApiCoreDtoDatapointsDatapoint.prototype['groupName'] = undefined;

/**
 * @member {Number} id
 */
ApiCoreDtoDatapointsDatapoint.prototype['id'] = undefined;

/**
 * @member {Boolean} isPublic
 */
ApiCoreDtoDatapointsDatapoint.prototype['isPublic'] = undefined;

/**
 * @member {Boolean} isSecured
 */
ApiCoreDtoDatapointsDatapoint.prototype['isSecured'] = undefined;

/**
 * @member {Boolean} lightTracking
 */
ApiCoreDtoDatapointsDatapoint.prototype['lightTracking'] = undefined;

/**
 * @member {String} name
 */
ApiCoreDtoDatapointsDatapoint.prototype['name'] = undefined;

/**
 * @member {String} notes
 */
ApiCoreDtoDatapointsDatapoint.prototype['notes'] = undefined;

/**
 * @member {Boolean} preferred
 */
ApiCoreDtoDatapointsDatapoint.prototype['preferred'] = undefined;

/**
 * @member {Boolean} redirectOnly
 */
ApiCoreDtoDatapointsDatapoint.prototype['redirectOnly'] = undefined;

/**
 * @member {Number} secondConversionId
 */
ApiCoreDtoDatapointsDatapoint.prototype['secondConversionId'] = undefined;

/**
 * @member {String} secondConversionName
 */
ApiCoreDtoDatapointsDatapoint.prototype['secondConversionName'] = undefined;

/**
 * @member {module:model/ApiCoreDtoDatapointsDatapoint.StatusEnum} status
 */
ApiCoreDtoDatapointsDatapoint.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/ApiCoreDtoTagsTag>} tags
 */
ApiCoreDtoDatapointsDatapoint.prototype['tags'] = undefined;

/**
 * @member {Number} thirdConversionId
 */
ApiCoreDtoDatapointsDatapoint.prototype['thirdConversionId'] = undefined;

/**
 * @member {String} thirdConversionName
 */
ApiCoreDtoDatapointsDatapoint.prototype['thirdConversionName'] = undefined;

/**
 * @member {String} title
 */
ApiCoreDtoDatapointsDatapoint.prototype['title'] = undefined;

/**
 * @member {String} trackingCode
 */
ApiCoreDtoDatapointsDatapoint.prototype['trackingCode'] = undefined;

/**
 * @member {module:model/ApiCoreDtoDatapointsDatapoint.TypeEnum} type
 */
ApiCoreDtoDatapointsDatapoint.prototype['type'] = undefined;

/**
 * @member {module:model/ApiCoreDtoDatapointsTrackingLinkSpecifics} typeTL
 */
ApiCoreDtoDatapointsDatapoint.prototype['typeTL'] = undefined;

/**
 * @member {module:model/ApiCoreDtoDatapointsTrackingPixelSpecifics} typeTP
 */
ApiCoreDtoDatapointsDatapoint.prototype['typeTP'] = undefined;

/**
 * @member {Boolean} writePermited
 */
ApiCoreDtoDatapointsDatapoint.prototype['writePermited'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ApiCoreDtoDatapointsDatapoint['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Paused"
     * @const
     */
    "Paused": "Paused",

    /**
     * value: "Abuse"
     * @const
     */
    "Abuse": "Abuse",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ApiCoreDtoDatapointsDatapoint['TypeEnum'] = {

    /**
     * value: "TrackingLink"
     * @const
     */
    "TrackingLink": "TrackingLink",

    /**
     * value: "TrackingPixel"
     * @const
     */
    "TrackingPixel": "TrackingPixel"
};



export default ApiCoreDtoDatapointsDatapoint;

