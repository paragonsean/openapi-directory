/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiCoreDtoClickStreamHitLocationInfo model module.
 * @module model/ApiCoreDtoClickStreamHitLocationInfo
 * @version v2
 */
class ApiCoreDtoClickStreamHitLocationInfo {
    /**
     * Constructs a new <code>ApiCoreDtoClickStreamHitLocationInfo</code>.
     * @alias module:model/ApiCoreDtoClickStreamHitLocationInfo
     */
    constructor() { 
        
        ApiCoreDtoClickStreamHitLocationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoClickStreamHitLocationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoClickStreamHitLocationInfo} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoClickStreamHitLocationInfo} The populated <code>ApiCoreDtoClickStreamHitLocationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoClickStreamHitLocationInfo();

            if (data.hasOwnProperty('areacode')) {
                obj['areacode'] = ApiClient.convertToType(data['areacode'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('metrocode')) {
                obj['metrocode'] = ApiClient.convertToType(data['metrocode'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('postalcode')) {
                obj['postalcode'] = ApiClient.convertToType(data['postalcode'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('regionName')) {
                obj['regionName'] = ApiClient.convertToType(data['regionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoClickStreamHitLocationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoClickStreamHitLocationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['areacode'] && !(typeof data['areacode'] === 'string' || data['areacode'] instanceof String)) {
            throw new Error("Expected the field `areacode` to be a primitive type in the JSON string but got " + data['areacode']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['metrocode'] && !(typeof data['metrocode'] === 'string' || data['metrocode'] instanceof String)) {
            throw new Error("Expected the field `metrocode` to be a primitive type in the JSON string but got " + data['metrocode']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['postalcode'] && !(typeof data['postalcode'] === 'string' || data['postalcode'] instanceof String)) {
            throw new Error("Expected the field `postalcode` to be a primitive type in the JSON string but got " + data['postalcode']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['regionName'] && !(typeof data['regionName'] === 'string' || data['regionName'] instanceof String)) {
            throw new Error("Expected the field `regionName` to be a primitive type in the JSON string but got " + data['regionName']);
        }

        return true;
    }


}



/**
 * @member {String} areacode
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['areacode'] = undefined;

/**
 * @member {String} city
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['city'] = undefined;

/**
 * @member {String} country
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['country'] = undefined;

/**
 * @member {Number} latitude
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['longitude'] = undefined;

/**
 * @member {String} metrocode
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['metrocode'] = undefined;

/**
 * @member {String} organization
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['organization'] = undefined;

/**
 * @member {String} postalcode
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['postalcode'] = undefined;

/**
 * @member {String} region
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['region'] = undefined;

/**
 * @member {String} regionName
 */
ApiCoreDtoClickStreamHitLocationInfo.prototype['regionName'] = undefined;






export default ApiCoreDtoClickStreamHitLocationInfo;

