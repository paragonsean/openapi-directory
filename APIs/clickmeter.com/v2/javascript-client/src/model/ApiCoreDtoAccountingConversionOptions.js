/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiCoreDtoAccountingConversionOptions model module.
 * @module model/ApiCoreDtoAccountingConversionOptions
 * @version v2
 */
class ApiCoreDtoAccountingConversionOptions {
    /**
     * Constructs a new <code>ApiCoreDtoAccountingConversionOptions</code>.
     * @alias module:model/ApiCoreDtoAccountingConversionOptions
     */
    constructor() { 
        
        ApiCoreDtoAccountingConversionOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoAccountingConversionOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoAccountingConversionOptions} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoAccountingConversionOptions} The populated <code>ApiCoreDtoAccountingConversionOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoAccountingConversionOptions();

            if (data.hasOwnProperty('hideComCost')) {
                obj['hideComCost'] = ApiClient.convertToType(data['hideComCost'], 'Boolean');
            }
            if (data.hasOwnProperty('hideCost')) {
                obj['hideCost'] = ApiClient.convertToType(data['hideCost'], 'Boolean');
            }
            if (data.hasOwnProperty('hideCount')) {
                obj['hideCount'] = ApiClient.convertToType(data['hideCount'], 'Boolean');
            }
            if (data.hasOwnProperty('hideParams')) {
                obj['hideParams'] = ApiClient.convertToType(data['hideParams'], 'Boolean');
            }
            if (data.hasOwnProperty('hideValue')) {
                obj['hideValue'] = ApiClient.convertToType(data['hideValue'], 'Boolean');
            }
            if (data.hasOwnProperty('percentCommission')) {
                obj['percentCommission'] = ApiClient.convertToType(data['percentCommission'], 'Number');
            }
            if (data.hasOwnProperty('percentValue')) {
                obj['percentValue'] = ApiClient.convertToType(data['percentValue'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoAccountingConversionOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoAccountingConversionOptions</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Boolean} hideComCost
 */
ApiCoreDtoAccountingConversionOptions.prototype['hideComCost'] = undefined;

/**
 * @member {Boolean} hideCost
 */
ApiCoreDtoAccountingConversionOptions.prototype['hideCost'] = undefined;

/**
 * @member {Boolean} hideCount
 */
ApiCoreDtoAccountingConversionOptions.prototype['hideCount'] = undefined;

/**
 * @member {Boolean} hideParams
 */
ApiCoreDtoAccountingConversionOptions.prototype['hideParams'] = undefined;

/**
 * @member {Boolean} hideValue
 */
ApiCoreDtoAccountingConversionOptions.prototype['hideValue'] = undefined;

/**
 * @member {Number} percentCommission
 */
ApiCoreDtoAccountingConversionOptions.prototype['percentCommission'] = undefined;

/**
 * @member {Number} percentValue
 */
ApiCoreDtoAccountingConversionOptions.prototype['percentValue'] = undefined;






export default ApiCoreDtoAccountingConversionOptions;

