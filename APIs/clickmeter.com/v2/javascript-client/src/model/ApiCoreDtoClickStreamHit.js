/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiCoreDtoClickStreamHitBrowserInfo from './ApiCoreDtoClickStreamHitBrowserInfo';
import ApiCoreDtoClickStreamHitConversionInfo from './ApiCoreDtoClickStreamHitConversionInfo';
import ApiCoreDtoClickStreamHitDatapointInfo from './ApiCoreDtoClickStreamHitDatapointInfo';
import ApiCoreDtoClickStreamHitLocationInfo from './ApiCoreDtoClickStreamHitLocationInfo';
import ApiCoreDtoClickStreamHitOsInfo from './ApiCoreDtoClickStreamHitOsInfo';
import ApiCoreDtoClickStreamHitSource from './ApiCoreDtoClickStreamHitSource';

/**
 * The ApiCoreDtoClickStreamHit model module.
 * @module model/ApiCoreDtoClickStreamHit
 * @version v2
 */
class ApiCoreDtoClickStreamHit {
    /**
     * Constructs a new <code>ApiCoreDtoClickStreamHit</code>.
     * @alias module:model/ApiCoreDtoClickStreamHit
     */
    constructor() { 
        
        ApiCoreDtoClickStreamHit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoClickStreamHit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoClickStreamHit} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoClickStreamHit} The populated <code>ApiCoreDtoClickStreamHit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoClickStreamHit();

            if (data.hasOwnProperty('accessTime')) {
                obj['accessTime'] = ApiClient.convertToType(data['accessTime'], 'String');
            }
            if (data.hasOwnProperty('browser')) {
                obj['browser'] = ApiCoreDtoClickStreamHitBrowserInfo.constructFromObject(data['browser']);
            }
            if (data.hasOwnProperty('clientLanguage')) {
                obj['clientLanguage'] = ApiClient.convertToType(data['clientLanguage'], 'String');
            }
            if (data.hasOwnProperty('conversion1')) {
                obj['conversion1'] = ApiCoreDtoClickStreamHitConversionInfo.constructFromObject(data['conversion1']);
            }
            if (data.hasOwnProperty('conversion2')) {
                obj['conversion2'] = ApiCoreDtoClickStreamHitConversionInfo.constructFromObject(data['conversion2']);
            }
            if (data.hasOwnProperty('conversion3')) {
                obj['conversion3'] = ApiCoreDtoClickStreamHitConversionInfo.constructFromObject(data['conversion3']);
            }
            if (data.hasOwnProperty('conversion4')) {
                obj['conversion4'] = ApiCoreDtoClickStreamHitConversionInfo.constructFromObject(data['conversion4']);
            }
            if (data.hasOwnProperty('conversion5')) {
                obj['conversion5'] = ApiCoreDtoClickStreamHitConversionInfo.constructFromObject(data['conversion5']);
            }
            if (data.hasOwnProperty('conversions')) {
                obj['conversions'] = ApiClient.convertToType(data['conversions'], [ApiCoreDtoClickStreamHitConversionInfo]);
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiCoreDtoClickStreamHitDatapointInfo.constructFromObject(data['entity']);
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('isProxy')) {
                obj['isProxy'] = ApiClient.convertToType(data['isProxy'], 'String');
            }
            if (data.hasOwnProperty('isSpider')) {
                obj['isSpider'] = ApiClient.convertToType(data['isSpider'], 'String');
            }
            if (data.hasOwnProperty('isUnique')) {
                obj['isUnique'] = ApiClient.convertToType(data['isUnique'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiCoreDtoClickStreamHitLocationInfo.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('org')) {
                obj['org'] = ApiClient.convertToType(data['org'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiCoreDtoClickStreamHitOsInfo.constructFromObject(data['os']);
            }
            if (data.hasOwnProperty('queryParams')) {
                obj['queryParams'] = ApiClient.convertToType(data['queryParams'], 'String');
            }
            if (data.hasOwnProperty('realDestinationUrl')) {
                obj['realDestinationUrl'] = ApiClient.convertToType(data['realDestinationUrl'], 'String');
            }
            if (data.hasOwnProperty('referer')) {
                obj['referer'] = ApiClient.convertToType(data['referer'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiCoreDtoClickStreamHitSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoClickStreamHit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoClickStreamHit</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessTime'] && !(typeof data['accessTime'] === 'string' || data['accessTime'] instanceof String)) {
            throw new Error("Expected the field `accessTime` to be a primitive type in the JSON string but got " + data['accessTime']);
        }
        // validate the optional field `browser`
        if (data['browser']) { // data not null
          ApiCoreDtoClickStreamHitBrowserInfo.validateJSON(data['browser']);
        }
        // ensure the json data is a string
        if (data['clientLanguage'] && !(typeof data['clientLanguage'] === 'string' || data['clientLanguage'] instanceof String)) {
            throw new Error("Expected the field `clientLanguage` to be a primitive type in the JSON string but got " + data['clientLanguage']);
        }
        // validate the optional field `conversion1`
        if (data['conversion1']) { // data not null
          ApiCoreDtoClickStreamHitConversionInfo.validateJSON(data['conversion1']);
        }
        // validate the optional field `conversion2`
        if (data['conversion2']) { // data not null
          ApiCoreDtoClickStreamHitConversionInfo.validateJSON(data['conversion2']);
        }
        // validate the optional field `conversion3`
        if (data['conversion3']) { // data not null
          ApiCoreDtoClickStreamHitConversionInfo.validateJSON(data['conversion3']);
        }
        // validate the optional field `conversion4`
        if (data['conversion4']) { // data not null
          ApiCoreDtoClickStreamHitConversionInfo.validateJSON(data['conversion4']);
        }
        // validate the optional field `conversion5`
        if (data['conversion5']) { // data not null
          ApiCoreDtoClickStreamHitConversionInfo.validateJSON(data['conversion5']);
        }
        if (data['conversions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conversions'])) {
                throw new Error("Expected the field `conversions` to be an array in the JSON data but got " + data['conversions']);
            }
            // validate the optional field `conversions` (array)
            for (const item of data['conversions']) {
                ApiCoreDtoClickStreamHitConversionInfo.validateJSON(item);
            };
        }
        // validate the optional field `entity`
        if (data['entity']) { // data not null
          ApiCoreDtoClickStreamHitDatapointInfo.validateJSON(data['entity']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['isProxy'] && !(typeof data['isProxy'] === 'string' || data['isProxy'] instanceof String)) {
            throw new Error("Expected the field `isProxy` to be a primitive type in the JSON string but got " + data['isProxy']);
        }
        // ensure the json data is a string
        if (data['isSpider'] && !(typeof data['isSpider'] === 'string' || data['isSpider'] instanceof String)) {
            throw new Error("Expected the field `isSpider` to be a primitive type in the JSON string but got " + data['isSpider']);
        }
        // ensure the json data is a string
        if (data['isUnique'] && !(typeof data['isUnique'] === 'string' || data['isUnique'] instanceof String)) {
            throw new Error("Expected the field `isUnique` to be a primitive type in the JSON string but got " + data['isUnique']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          ApiCoreDtoClickStreamHitLocationInfo.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['org'] && !(typeof data['org'] === 'string' || data['org'] instanceof String)) {
            throw new Error("Expected the field `org` to be a primitive type in the JSON string but got " + data['org']);
        }
        // validate the optional field `os`
        if (data['os']) { // data not null
          ApiCoreDtoClickStreamHitOsInfo.validateJSON(data['os']);
        }
        // ensure the json data is a string
        if (data['queryParams'] && !(typeof data['queryParams'] === 'string' || data['queryParams'] instanceof String)) {
            throw new Error("Expected the field `queryParams` to be a primitive type in the JSON string but got " + data['queryParams']);
        }
        // ensure the json data is a string
        if (data['realDestinationUrl'] && !(typeof data['realDestinationUrl'] === 'string' || data['realDestinationUrl'] instanceof String)) {
            throw new Error("Expected the field `realDestinationUrl` to be a primitive type in the JSON string but got " + data['realDestinationUrl']);
        }
        // ensure the json data is a string
        if (data['referer'] && !(typeof data['referer'] === 'string' || data['referer'] instanceof String)) {
            throw new Error("Expected the field `referer` to be a primitive type in the JSON string but got " + data['referer']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ApiCoreDtoClickStreamHitSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 *  (A date in \"YmdHis\" format)
 * @member {String} accessTime
 */
ApiCoreDtoClickStreamHit.prototype['accessTime'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitBrowserInfo} browser
 */
ApiCoreDtoClickStreamHit.prototype['browser'] = undefined;

/**
 * @member {String} clientLanguage
 */
ApiCoreDtoClickStreamHit.prototype['clientLanguage'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitConversionInfo} conversion1
 */
ApiCoreDtoClickStreamHit.prototype['conversion1'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitConversionInfo} conversion2
 */
ApiCoreDtoClickStreamHit.prototype['conversion2'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitConversionInfo} conversion3
 */
ApiCoreDtoClickStreamHit.prototype['conversion3'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitConversionInfo} conversion4
 */
ApiCoreDtoClickStreamHit.prototype['conversion4'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitConversionInfo} conversion5
 */
ApiCoreDtoClickStreamHit.prototype['conversion5'] = undefined;

/**
 * @member {Array.<module:model/ApiCoreDtoClickStreamHitConversionInfo>} conversions
 */
ApiCoreDtoClickStreamHit.prototype['conversions'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitDatapointInfo} entity
 */
ApiCoreDtoClickStreamHit.prototype['entity'] = undefined;

/**
 * @member {String} ip
 */
ApiCoreDtoClickStreamHit.prototype['ip'] = undefined;

/**
 * @member {String} isProxy
 */
ApiCoreDtoClickStreamHit.prototype['isProxy'] = undefined;

/**
 * @member {String} isSpider
 */
ApiCoreDtoClickStreamHit.prototype['isSpider'] = undefined;

/**
 * @member {String} isUnique
 */
ApiCoreDtoClickStreamHit.prototype['isUnique'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitLocationInfo} location
 */
ApiCoreDtoClickStreamHit.prototype['location'] = undefined;

/**
 * @member {String} org
 */
ApiCoreDtoClickStreamHit.prototype['org'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitOsInfo} os
 */
ApiCoreDtoClickStreamHit.prototype['os'] = undefined;

/**
 * @member {String} queryParams
 */
ApiCoreDtoClickStreamHit.prototype['queryParams'] = undefined;

/**
 * @member {String} realDestinationUrl
 */
ApiCoreDtoClickStreamHit.prototype['realDestinationUrl'] = undefined;

/**
 * @member {String} referer
 */
ApiCoreDtoClickStreamHit.prototype['referer'] = undefined;

/**
 * @member {module:model/ApiCoreDtoClickStreamHitSource} source
 */
ApiCoreDtoClickStreamHit.prototype['source'] = undefined;

/**
 * @member {String} type
 */
ApiCoreDtoClickStreamHit.prototype['type'] = undefined;






export default ApiCoreDtoClickStreamHit;

