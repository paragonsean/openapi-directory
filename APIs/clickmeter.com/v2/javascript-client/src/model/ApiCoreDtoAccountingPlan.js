/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiCoreDtoAccountingPlan model module.
 * @module model/ApiCoreDtoAccountingPlan
 * @version v2
 */
class ApiCoreDtoAccountingPlan {
    /**
     * Constructs a new <code>ApiCoreDtoAccountingPlan</code>.
     * @alias module:model/ApiCoreDtoAccountingPlan
     */
    constructor() { 
        
        ApiCoreDtoAccountingPlan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiCoreDtoAccountingPlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCoreDtoAccountingPlan} obj Optional instance to populate.
     * @return {module:model/ApiCoreDtoAccountingPlan} The populated <code>ApiCoreDtoAccountingPlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCoreDtoAccountingPlan();

            if (data.hasOwnProperty('allowedPersonalDomains')) {
                obj['allowedPersonalDomains'] = ApiClient.convertToType(data['allowedPersonalDomains'], 'Number');
            }
            if (data.hasOwnProperty('allowedPersonalUrls')) {
                obj['allowedPersonalUrls'] = ApiClient.convertToType(data['allowedPersonalUrls'], 'Number');
            }
            if (data.hasOwnProperty('billingPeriodEnd')) {
                obj['billingPeriodEnd'] = ApiClient.convertToType(data['billingPeriodEnd'], 'String');
            }
            if (data.hasOwnProperty('billingPeriodStart')) {
                obj['billingPeriodStart'] = ApiClient.convertToType(data['billingPeriodStart'], 'String');
            }
            if (data.hasOwnProperty('bonusMonthlyEvents')) {
                obj['bonusMonthlyEvents'] = ApiClient.convertToType(data['bonusMonthlyEvents'], 'Number');
            }
            if (data.hasOwnProperty('maximumDatapoints')) {
                obj['maximumDatapoints'] = ApiClient.convertToType(data['maximumDatapoints'], 'Number');
            }
            if (data.hasOwnProperty('maximumGuests')) {
                obj['maximumGuests'] = ApiClient.convertToType(data['maximumGuests'], 'Number');
            }
            if (data.hasOwnProperty('monthlyEvents')) {
                obj['monthlyEvents'] = ApiClient.convertToType(data['monthlyEvents'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('profileId')) {
                obj['profileId'] = ApiClient.convertToType(data['profileId'], 'Number');
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = ApiClient.convertToType(data['recurring'], 'Boolean');
            }
            if (data.hasOwnProperty('recurringPeriod')) {
                obj['recurringPeriod'] = ApiClient.convertToType(data['recurringPeriod'], 'Number');
            }
            if (data.hasOwnProperty('usedDatapoints')) {
                obj['usedDatapoints'] = ApiClient.convertToType(data['usedDatapoints'], 'Number');
            }
            if (data.hasOwnProperty('usedMonthlyEvents')) {
                obj['usedMonthlyEvents'] = ApiClient.convertToType(data['usedMonthlyEvents'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCoreDtoAccountingPlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCoreDtoAccountingPlan</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingPeriodEnd'] && !(typeof data['billingPeriodEnd'] === 'string' || data['billingPeriodEnd'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodEnd` to be a primitive type in the JSON string but got " + data['billingPeriodEnd']);
        }
        // ensure the json data is a string
        if (data['billingPeriodStart'] && !(typeof data['billingPeriodStart'] === 'string' || data['billingPeriodStart'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodStart` to be a primitive type in the JSON string but got " + data['billingPeriodStart']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {Number} allowedPersonalDomains
 */
ApiCoreDtoAccountingPlan.prototype['allowedPersonalDomains'] = undefined;

/**
 * @member {Number} allowedPersonalUrls
 */
ApiCoreDtoAccountingPlan.prototype['allowedPersonalUrls'] = undefined;

/**
 *  (A date in \"YmdHis\" format)
 * @member {String} billingPeriodEnd
 */
ApiCoreDtoAccountingPlan.prototype['billingPeriodEnd'] = undefined;

/**
 *  (A date in \"YmdHis\" format)
 * @member {String} billingPeriodStart
 */
ApiCoreDtoAccountingPlan.prototype['billingPeriodStart'] = undefined;

/**
 * @member {Number} bonusMonthlyEvents
 */
ApiCoreDtoAccountingPlan.prototype['bonusMonthlyEvents'] = undefined;

/**
 * @member {Number} maximumDatapoints
 */
ApiCoreDtoAccountingPlan.prototype['maximumDatapoints'] = undefined;

/**
 * @member {Number} maximumGuests
 */
ApiCoreDtoAccountingPlan.prototype['maximumGuests'] = undefined;

/**
 * @member {Number} monthlyEvents
 */
ApiCoreDtoAccountingPlan.prototype['monthlyEvents'] = undefined;

/**
 * @member {String} name
 */
ApiCoreDtoAccountingPlan.prototype['name'] = undefined;

/**
 * @member {Number} price
 */
ApiCoreDtoAccountingPlan.prototype['price'] = undefined;

/**
 * @member {Number} profileId
 */
ApiCoreDtoAccountingPlan.prototype['profileId'] = undefined;

/**
 * @member {Boolean} recurring
 */
ApiCoreDtoAccountingPlan.prototype['recurring'] = undefined;

/**
 * @member {Number} recurringPeriod
 */
ApiCoreDtoAccountingPlan.prototype['recurringPeriod'] = undefined;

/**
 * @member {Number} usedDatapoints
 */
ApiCoreDtoAccountingPlan.prototype['usedDatapoints'] = undefined;

/**
 * @member {Number} usedMonthlyEvents
 */
ApiCoreDtoAccountingPlan.prototype['usedMonthlyEvents'] = undefined;






export default ApiCoreDtoAccountingPlan;

