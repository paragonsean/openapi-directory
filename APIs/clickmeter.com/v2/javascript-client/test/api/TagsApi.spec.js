/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClickMeterApi);
  }
}(this, function(expect, ClickMeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClickMeterApi.TagsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TagsApi', function() {
    describe('tagsCount', function() {
      it('should call tagsCount successfully', function(done) {
        //uncomment below and update the code to test tagsCount
        //instance.tagsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsDelete', function() {
      it('should call tagsDelete successfully', function(done) {
        //uncomment below and update the code to test tagsDelete
        //instance.tagsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsDeleteRelatedDatapoints', function() {
      it('should call tagsDeleteRelatedDatapoints successfully', function(done) {
        //uncomment below and update the code to test tagsDeleteRelatedDatapoints
        //instance.tagsDeleteRelatedDatapoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsDeleteRelatedGroups', function() {
      it('should call tagsDeleteRelatedGroups successfully', function(done) {
        //uncomment below and update the code to test tagsDeleteRelatedGroups
        //instance.tagsDeleteRelatedGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsGet', function() {
      it('should call tagsGet successfully', function(done) {
        //uncomment below and update the code to test tagsGet
        //instance.tagsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsGetDatapoints', function() {
      it('should call tagsGetDatapoints successfully', function(done) {
        //uncomment below and update the code to test tagsGetDatapoints
        //instance.tagsGetDatapoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsGetDatapointsCount', function() {
      it('should call tagsGetDatapointsCount successfully', function(done) {
        //uncomment below and update the code to test tagsGetDatapointsCount
        //instance.tagsGetDatapointsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsGetGroups', function() {
      it('should call tagsGetGroups successfully', function(done) {
        //uncomment below and update the code to test tagsGetGroups
        //instance.tagsGetGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsGetGroupsCount', function() {
      it('should call tagsGetGroupsCount successfully', function(done) {
        //uncomment below and update the code to test tagsGetGroupsCount
        //instance.tagsGetGroupsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsPatchDataPoint', function() {
      it('should call tagsPatchDataPoint successfully', function(done) {
        //uncomment below and update the code to test tagsPatchDataPoint
        //instance.tagsPatchDataPoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsPatchGroup', function() {
      it('should call tagsPatchGroup successfully', function(done) {
        //uncomment below and update the code to test tagsPatchGroup
        //instance.tagsPatchGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsPatchTagName', function() {
      it('should call tagsPatchTagName successfully', function(done) {
        //uncomment below and update the code to test tagsPatchTagName
        //instance.tagsPatchTagName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsPut', function() {
      it('should call tagsPut successfully', function(done) {
        //uncomment below and update the code to test tagsPut
        //instance.tagsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagsTagIdGet', function() {
      it('should call tagsTagIdGet successfully', function(done) {
        //uncomment below and update the code to test tagsTagIdGet
        //instance.tagsTagIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
