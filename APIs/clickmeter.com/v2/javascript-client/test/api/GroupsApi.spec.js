/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClickMeterApi);
  }
}(this, function(expect, ClickMeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClickMeterApi.GroupsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GroupsApi', function() {
    describe('groupsCount', function() {
      it('should call groupsCount successfully', function(done) {
        //uncomment below and update the code to test groupsCount
        //instance.groupsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsDelete', function() {
      it('should call groupsDelete successfully', function(done) {
        //uncomment below and update the code to test groupsDelete
        //instance.groupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGet', function() {
      it('should call groupsGet successfully', function(done) {
        //uncomment below and update the code to test groupsGet
        //instance.groupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetDatapoints', function() {
      it('should call groupsGetDatapoints successfully', function(done) {
        //uncomment below and update the code to test groupsGetDatapoints
        //instance.groupsGetDatapoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetDatapointsCount', function() {
      it('should call groupsGetDatapointsCount successfully', function(done) {
        //uncomment below and update the code to test groupsGetDatapointsCount
        //instance.groupsGetDatapointsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetDatapointsSummary', function() {
      it('should call groupsGetDatapointsSummary successfully', function(done) {
        //uncomment below and update the code to test groupsGetDatapointsSummary
        //instance.groupsGetDatapointsSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetHits', function() {
      it('should call groupsGetHits successfully', function(done) {
        //uncomment below and update the code to test groupsGetHits
        //instance.groupsGetHits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetStatisticsAggregatedSingle', function() {
      it('should call groupsGetStatisticsAggregatedSingle successfully', function(done) {
        //uncomment below and update the code to test groupsGetStatisticsAggregatedSingle
        //instance.groupsGetStatisticsAggregatedSingle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetStatisticsAllList', function() {
      it('should call groupsGetStatisticsAllList successfully', function(done) {
        //uncomment below and update the code to test groupsGetStatisticsAllList
        //instance.groupsGetStatisticsAllList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetStatisticsList', function() {
      it('should call groupsGetStatisticsList successfully', function(done) {
        //uncomment below and update the code to test groupsGetStatisticsList
        //instance.groupsGetStatisticsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGetStatisticsSingle', function() {
      it('should call groupsGetStatisticsSingle successfully', function(done) {
        //uncomment below and update the code to test groupsGetStatisticsSingle
        //instance.groupsGetStatisticsSingle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsIdGet', function() {
      it('should call groupsIdGet successfully', function(done) {
        //uncomment below and update the code to test groupsIdGet
        //instance.groupsIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsPatchFavourite', function() {
      it('should call groupsPatchFavourite successfully', function(done) {
        //uncomment below and update the code to test groupsPatchFavourite
        //instance.groupsPatchFavourite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsPatchNotes', function() {
      it('should call groupsPatchNotes successfully', function(done) {
        //uncomment below and update the code to test groupsPatchNotes
        //instance.groupsPatchNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsPost', function() {
      it('should call groupsPost successfully', function(done) {
        //uncomment below and update the code to test groupsPost
        //instance.groupsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsPut', function() {
      it('should call groupsPut successfully', function(done) {
        //uncomment below and update the code to test groupsPut
        //instance.groupsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsPutDatapoint', function() {
      it('should call groupsPutDatapoint successfully', function(done) {
        //uncomment below and update the code to test groupsPutDatapoint
        //instance.groupsPutDatapoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
