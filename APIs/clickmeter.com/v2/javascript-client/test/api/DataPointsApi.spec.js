/**
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ClickMeterApi);
  }
}(this, function(expect, ClickMeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ClickMeterApi.DataPointsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataPointsApi', function() {
    describe('dataPointsBatchDelete', function() {
      it('should call dataPointsBatchDelete successfully', function(done) {
        //uncomment below and update the code to test dataPointsBatchDelete
        //instance.dataPointsBatchDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsBatchPost', function() {
      it('should call dataPointsBatchPost successfully', function(done) {
        //uncomment below and update the code to test dataPointsBatchPost
        //instance.dataPointsBatchPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsBatchPut', function() {
      it('should call dataPointsBatchPut successfully', function(done) {
        //uncomment below and update the code to test dataPointsBatchPut
        //instance.dataPointsBatchPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsCount', function() {
      it('should call dataPointsCount successfully', function(done) {
        //uncomment below and update the code to test dataPointsCount
        //instance.dataPointsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsDelete', function() {
      it('should call dataPointsDelete successfully', function(done) {
        //uncomment below and update the code to test dataPointsDelete
        //instance.dataPointsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsGet', function() {
      it('should call dataPointsGet successfully', function(done) {
        //uncomment below and update the code to test dataPointsGet
        //instance.dataPointsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsGetHits', function() {
      it('should call dataPointsGetHits successfully', function(done) {
        //uncomment below and update the code to test dataPointsGetHits
        //instance.dataPointsGetHits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsGetStatisticsAggregatedSingle', function() {
      it('should call dataPointsGetStatisticsAggregatedSingle successfully', function(done) {
        //uncomment below and update the code to test dataPointsGetStatisticsAggregatedSingle
        //instance.dataPointsGetStatisticsAggregatedSingle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsGetStatisticsAllList', function() {
      it('should call dataPointsGetStatisticsAllList successfully', function(done) {
        //uncomment below and update the code to test dataPointsGetStatisticsAllList
        //instance.dataPointsGetStatisticsAllList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsGetStatisticsList', function() {
      it('should call dataPointsGetStatisticsList successfully', function(done) {
        //uncomment below and update the code to test dataPointsGetStatisticsList
        //instance.dataPointsGetStatisticsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsGetStatisticsSingle', function() {
      it('should call dataPointsGetStatisticsSingle successfully', function(done) {
        //uncomment below and update the code to test dataPointsGetStatisticsSingle
        //instance.dataPointsGetStatisticsSingle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsPatchFavourite', function() {
      it('should call dataPointsPatchFavourite successfully', function(done) {
        //uncomment below and update the code to test dataPointsPatchFavourite
        //instance.dataPointsPatchFavourite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsPatchNotes', function() {
      it('should call dataPointsPatchNotes successfully', function(done) {
        //uncomment below and update the code to test dataPointsPatchNotes
        //instance.dataPointsPatchNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsPost', function() {
      it('should call dataPointsPost successfully', function(done) {
        //uncomment below and update the code to test dataPointsPost
        //instance.dataPointsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataPointsPut', function() {
      it('should call dataPointsPut successfully', function(done) {
        //uncomment below and update the code to test dataPointsPut
        //instance.dataPointsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('datapointsIdGet', function() {
      it('should call datapointsIdGet successfully', function(done) {
        //uncomment below and update the code to test datapointsIdGet
        //instance.datapointsIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
