/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiCoreDtoTagsTag;
import org.openapitools.client.model.ApiCoreRequestsGenericTextPatch;
import org.openapitools.client.model.ApiCoreRequestsPatchBody;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * List of all the groups associated to the user filtered by this tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsCountTest() throws ApiException {
        String name = null;
        String datapoints = null;
        String groups = null;
        String type = null;
        Object response = api.tagsCount(name, datapoints, groups, type);
        // TODO: test validations
    }

    /**
     * Delete a tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsDeleteTest() throws ApiException {
        Long tagId = null;
        Object response = api.tagsDelete(tagId);
        // TODO: test validations
    }

    /**
     * Delete the association of this tag with all datapoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsDeleteRelatedDatapointsTest() throws ApiException {
        Long tagId = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.tagsDeleteRelatedDatapoints(tagId);
        // TODO: test validations
    }

    /**
     * Delete the association of this tag with all groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsDeleteRelatedGroupsTest() throws ApiException {
        Long tagId = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.tagsDeleteRelatedGroups(tagId);
        // TODO: test validations
    }

    /**
     * List of all the groups associated to the user filtered by this tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String name = null;
        String datapoints = null;
        String groups = null;
        String type = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.tagsGet(offset, limit, name, datapoints, groups, type);
        // TODO: test validations
    }

    /**
     * List of all the datapoints associated to the user filtered by this tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetDatapointsTest() throws ApiException {
        Long tagId = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String status = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.tagsGetDatapoints(tagId, offset, limit, type, status, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Count the datapoints associated to the user filtered by this tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetDatapointsCountTest() throws ApiException {
        Long tagId = null;
        String type = null;
        String status = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesCountResponce response = api.tagsGetDatapointsCount(tagId, type, status, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * List of all the groups associated to the user filtered by this tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetGroupsTest() throws ApiException {
        Long tagId = null;
        Integer offset = null;
        Integer limit = null;
        String status = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.tagsGetGroups(tagId, offset, limit, status, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Count the groups associated to the user filtered by this tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetGroupsCountTest() throws ApiException {
        Long tagId = null;
        String status = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesCountResponce response = api.tagsGetGroupsCount(tagId, status, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Associate/Deassociate a tag with a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsPatchDataPointTest() throws ApiException {
        Long tagId = null;
        ApiCoreRequestsPatchBody apiCoreRequestsPatchBody = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.tagsPatchDataPoint(tagId, apiCoreRequestsPatchBody);
        // TODO: test validations
    }

    /**
     * Associate/Deassociate a tag with a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsPatchGroupTest() throws ApiException {
        Long tagId = null;
        ApiCoreRequestsPatchBody apiCoreRequestsPatchBody = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.tagsPatchGroup(tagId, apiCoreRequestsPatchBody);
        // TODO: test validations
    }

    /**
     * Fast patch a tag name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsPatchTagNameTest() throws ApiException {
        Long tagId = null;
        ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.tagsPatchTagName(tagId, apiCoreRequestsGenericTextPatch);
        // TODO: test validations
    }

    /**
     * Create a tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsPutTest() throws ApiException {
        ApiCoreDtoTagsTag apiCoreDtoTagsTag = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.tagsPut(apiCoreDtoTagsTag);
        // TODO: test validations
    }

    /**
     * Retrieve a tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsTagIdGetTest() throws ApiException {
        Long tagId = null;
        ApiCoreDtoTagsTag response = api.tagsTagIdGet(tagId);
        // TODO: test validations
    }

}
