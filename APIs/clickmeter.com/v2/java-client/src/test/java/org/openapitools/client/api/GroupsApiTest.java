/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedSummaryResult;
import org.openapitools.client.model.ApiCoreDtoClickStreamHitListPage;
import org.openapitools.client.model.ApiCoreDtoDatapointsDatapoint;
import org.openapitools.client.model.ApiCoreDtoGroupsGroup;
import org.openapitools.client.model.ApiCoreRequestsGenericTextPatch;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Disabled
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    /**
     * Count the groups associated to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsCountTest() throws ApiException {
        String status = null;
        String tags = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        Boolean write = null;
        ApiCoreResponsesCountResponce response = api.groupsCount(status, tags, textSearch, createdAfter, createdBefore, write);
        // TODO: test validations
    }

    /**
     * Delete group specified by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsDeleteTest() throws ApiException {
        Long id = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.groupsDelete(id);
        // TODO: test validations
    }

    /**
     * List of all the groups associated to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String status = null;
        String tags = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        Boolean write = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.groupsGet(offset, limit, status, tags, textSearch, createdAfter, createdBefore, write);
        // TODO: test validations
    }

    /**
     * List of all the datapoints associated to the user in this group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetDatapointsTest() throws ApiException {
        Long id = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String status = null;
        String tags = null;
        String textSearch = null;
        Boolean onlyFavorites = null;
        String sortBy = null;
        String sortDirection = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.groupsGetDatapoints(id, offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Count the datapoints associated to the user in this group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetDatapointsCountTest() throws ApiException {
        Long id = null;
        String type = null;
        String status = null;
        String tags = null;
        String textSearch = null;
        Boolean onlyFavorites = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesCountResponce response = api.groupsGetDatapointsCount(id, type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetDatapointsSummaryTest() throws ApiException {
        Long id = null;
        String timeFrame = null;
        String type = null;
        String fromDay = null;
        String toDay = null;
        String status = null;
        String tag = null;
        Boolean favourite = null;
        String sortBy = null;
        String sortDirection = null;
        Integer offset = null;
        Integer limit = null;
        String textSearch = null;
        ApiCoreDtoAggregatedAggregatedSummaryResult response = api.groupsGetDatapointsSummary(id, timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch);
        // TODO: test validations
    }

    /**
     * Retrieve the list of events related to this group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetHitsTest() throws ApiException {
        Long id = null;
        String timeframe = null;
        Integer limit = null;
        String offset = null;
        String fromDay = null;
        String toDay = null;
        String filter = null;
        ApiCoreDtoClickStreamHitListPage response = api.groupsGetHits(id, timeframe, limit, offset, fromDay, toDay, filter);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetStatisticsAggregatedSingleTest() throws ApiException {
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        Boolean hourly = null;
        String status = null;
        String tag = null;
        Boolean favourite = null;
        ApiCoreDtoAggregatedAggregatedResult response = api.groupsGetStatisticsAggregatedSingle(timeFrame, fromDay, toDay, hourly, status, tag, favourite);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetStatisticsAllListTest() throws ApiException {
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        String status = null;
        String tag = null;
        Boolean favourite = null;
        String groupBy = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult response = api.groupsGetStatisticsAllList(timeFrame, fromDay, toDay, status, tag, favourite, groupBy);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetStatisticsListTest() throws ApiException {
        Long id = null;
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        String groupBy = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult response = api.groupsGetStatisticsList(id, timeFrame, fromDay, toDay, groupBy);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this group for a timeframe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetStatisticsSingleTest() throws ApiException {
        Long id = null;
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        Boolean hourly = null;
        ApiCoreDtoAggregatedAggregatedResult response = api.groupsGetStatisticsSingle(id, timeFrame, fromDay, toDay, hourly);
        // TODO: test validations
    }

    /**
     * Get a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsIdGetTest() throws ApiException {
        Long id = null;
        ApiCoreDtoGroupsGroup response = api.groupsIdGet(id);
        // TODO: test validations
    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsPatchFavouriteTest() throws ApiException {
        Long id = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.groupsPatchFavourite(id);
        // TODO: test validations
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsPatchNotesTest() throws ApiException {
        Long id = null;
        ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.groupsPatchNotes(id, apiCoreRequestsGenericTextPatch);
        // TODO: test validations
    }

    /**
     * Update a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsPostTest() throws ApiException {
        Long id = null;
        ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.groupsPost(id, apiCoreDtoGroupsGroup);
        // TODO: test validations
    }

    /**
     * Create a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsPutTest() throws ApiException {
        ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.groupsPut(apiCoreDtoGroupsGroup);
        // TODO: test validations
    }

    /**
     * Create a datapoint in this group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsPutDatapointTest() throws ApiException {
        Long id = null;
        ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.groupsPutDatapoint(id, apiCoreDtoDatapointsDatapoint);
        // TODO: test validations
    }

}
