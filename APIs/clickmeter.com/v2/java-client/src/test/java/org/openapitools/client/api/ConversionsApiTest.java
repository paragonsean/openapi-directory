/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreDtoClickStreamHitListPage;
import org.openapitools.client.model.ApiCoreDtoConversionsConversion;
import org.openapitools.client.model.ApiCoreRequestsConversionPatchBody;
import org.openapitools.client.model.ApiCoreRequestsGenericTextPatch;
import org.openapitools.client.model.ApiCoreRequestsPatchBodyBatch;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversionsApi
 */
@Disabled
public class ConversionsApiTest {

    private final ConversionsApi api = new ConversionsApi();

    /**
     * Modify the association between a conversion and multiple datapoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsConversionIdDatapointsBatchPatchPutTest() throws ApiException {
        Long conversionId = null;
        ApiCoreRequestsPatchBodyBatch apiCoreRequestsPatchBodyBatch = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.conversionsConversionIdDatapointsBatchPatchPut(conversionId, apiCoreRequestsPatchBodyBatch);
        // TODO: test validations
    }

    /**
     * Retrieve conversion specified by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsConversionIdGetTest() throws ApiException {
        Long conversionId = null;
        ApiCoreDtoConversionsConversion response = api.conversionsConversionIdGet(conversionId);
        // TODO: test validations
    }

    /**
     * Retrieve a count of conversions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsCountTest() throws ApiException {
        String status = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesCountResponce response = api.conversionsCount(status, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Delete conversion specified by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsDeleteTest() throws ApiException {
        Long conversionId = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.conversionsDelete(conversionId);
        // TODO: test validations
    }

    /**
     * Retrieve a list of conversions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String status = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.conversionsGet(offset, limit, status, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Retrieve a list of datapoints connected to this conversion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsGetDatapointsTest() throws ApiException {
        Long conversionId = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String status = null;
        String tags = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.conversionsGetDatapoints(conversionId, offset, limit, type, status, tags, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Retrieve a count of datapoints connected to this conversion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsGetDatapointsCountTest() throws ApiException {
        Long conversionId = null;
        String type = null;
        String status = null;
        String tags = null;
        String textSearch = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesCountResponce response = api.conversionsGetDatapointsCount(conversionId, type, status, tags, textSearch, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Retrieve the list of events related to this conversion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsGetHitsTest() throws ApiException {
        Long conversionId = null;
        String timeframe = null;
        Integer limit = null;
        String offset = null;
        String fromDay = null;
        String toDay = null;
        String filter = null;
        ApiCoreDtoClickStreamHitListPage response = api.conversionsGetHits(conversionId, timeframe, limit, offset, fromDay, toDay, filter);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsGetStatisticsAllListTest() throws ApiException {
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        String status = null;
        String groupBy = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult response = api.conversionsGetStatisticsAllList(timeFrame, fromDay, toDay, status, groupBy);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsGetStatisticsListTest() throws ApiException {
        Long conversionId = null;
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        String groupBy = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult response = api.conversionsGetStatisticsList(conversionId, timeFrame, fromDay, toDay, groupBy);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this conversion for a timeframe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsGetStatisticsSingleTest() throws ApiException {
        Long conversionId = null;
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        String tag = null;
        Boolean favourite = null;
        Boolean hourly = null;
        ApiCoreDtoAggregatedAggregatedResult response = api.conversionsGetStatisticsSingle(conversionId, timeFrame, fromDay, toDay, tag, favourite, hourly);
        // TODO: test validations
    }

    /**
     * Modify the association between a conversion and a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsPatchTest() throws ApiException {
        Long conversionId = null;
        ApiCoreRequestsConversionPatchBody apiCoreRequestsConversionPatchBody = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.conversionsPatch(conversionId, apiCoreRequestsConversionPatchBody);
        // TODO: test validations
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a conversion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsPatchNotesTest() throws ApiException {
        Long conversionId = null;
        ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.conversionsPatchNotes(conversionId, apiCoreRequestsGenericTextPatch);
        // TODO: test validations
    }

    /**
     * Update conversion specified by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsPostTest() throws ApiException {
        Long conversionId = null;
        ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.conversionsPost(conversionId, apiCoreDtoConversionsConversion);
        // TODO: test validations
    }

    /**
     * Create a conversion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void conversionsPutTest() throws ApiException {
        ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.conversionsPut(apiCoreDtoConversionsConversion);
        // TODO: test validations
    }

}
