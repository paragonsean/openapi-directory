/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreDtoClickStreamHitListPage;
import org.openapitools.client.model.ApiCoreDtoDatapointsDatapoint;
import org.openapitools.client.model.ApiCoreRequestsDatapointsBatch;
import org.openapitools.client.model.ApiCoreRequestsDeleteBatch;
import org.openapitools.client.model.ApiCoreRequestsGenericTextPatch;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataPointsApi
 */
@Disabled
public class DataPointsApiTest {

    private final DataPointsApi api = new DataPointsApi();

    /**
     * Delete multiple datapoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsBatchDeleteTest() throws ApiException {
        ApiCoreRequestsDeleteBatch apiCoreRequestsDeleteBatch = null;
        ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 response = api.dataPointsBatchDelete(apiCoreRequestsDeleteBatch);
        // TODO: test validations
    }

    /**
     * Update multiple datapoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsBatchPostTest() throws ApiException {
        ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch = null;
        ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 response = api.dataPointsBatchPost(apiCoreRequestsDatapointsBatch);
        // TODO: test validations
    }

    /**
     * Create multiple datapoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsBatchPutTest() throws ApiException {
        ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch = null;
        ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 response = api.dataPointsBatchPut(apiCoreRequestsDatapointsBatch);
        // TODO: test validations
    }

    /**
     * Count the datapoints associated to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsCountTest() throws ApiException {
        String type = null;
        String status = null;
        String tags = null;
        String textSearch = null;
        Boolean onlyFavorites = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesCountResponce response = api.dataPointsCount(type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Delete a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsDeleteTest() throws ApiException {
        Long id = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.dataPointsDelete(id);
        // TODO: test validations
    }

    /**
     * List of all the datapoints associated to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String status = null;
        String tags = null;
        String textSearch = null;
        Boolean onlyFavorites = null;
        String sortBy = null;
        String sortDirection = null;
        String createdAfter = null;
        String createdBefore = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.dataPointsGet(offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore);
        // TODO: test validations
    }

    /**
     * Retrieve the list of events related to this datapoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsGetHitsTest() throws ApiException {
        Long id = null;
        String timeframe = null;
        Integer limit = null;
        String offset = null;
        String fromDay = null;
        String toDay = null;
        String filter = null;
        ApiCoreDtoClickStreamHitListPage response = api.dataPointsGetHits(id, timeframe, limit, offset, fromDay, toDay, filter);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsGetStatisticsAggregatedSingleTest() throws ApiException {
        String timeFrame = null;
        String type = null;
        String fromDay = null;
        String toDay = null;
        Boolean hourly = null;
        String status = null;
        String tag = null;
        Boolean favourite = null;
        ApiCoreDtoAggregatedAggregatedResult response = api.dataPointsGetStatisticsAggregatedSingle(timeFrame, type, fromDay, toDay, hourly, status, tag, favourite);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsGetStatisticsAllListTest() throws ApiException {
        String type = null;
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        String status = null;
        String tag = null;
        Boolean favourite = null;
        String groupBy = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult response = api.dataPointsGetStatisticsAllList(type, timeFrame, fromDay, toDay, status, tag, favourite, groupBy);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsGetStatisticsListTest() throws ApiException {
        Long id = null;
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        String groupBy = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult response = api.dataPointsGetStatisticsList(id, timeFrame, fromDay, toDay, groupBy);
        // TODO: test validations
    }

    /**
     * Retrieve statistics about this datapoint for a timeframe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsGetStatisticsSingleTest() throws ApiException {
        Long id = null;
        String timeFrame = null;
        String fromDay = null;
        String toDay = null;
        Boolean hourly = null;
        ApiCoreDtoAggregatedAggregatedResult response = api.dataPointsGetStatisticsSingle(id, timeFrame, fromDay, toDay, hourly);
        // TODO: test validations
    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsPatchFavouriteTest() throws ApiException {
        Long id = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.dataPointsPatchFavourite(id);
        // TODO: test validations
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsPatchNotesTest() throws ApiException {
        Long id = null;
        ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.dataPointsPatchNotes(id, apiCoreRequestsGenericTextPatch);
        // TODO: test validations
    }

    /**
     * Update a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsPostTest() throws ApiException {
        Long id = null;
        ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.dataPointsPost(id, apiCoreDtoDatapointsDatapoint);
        // TODO: test validations
    }

    /**
     * Create a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPointsPutTest() throws ApiException {
        ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.dataPointsPut(apiCoreDtoDatapointsDatapoint);
        // TODO: test validations
    }

    /**
     * Get a datapoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datapointsIdGetTest() throws ApiException {
        Long id = null;
        ApiCoreDtoDatapointsDatapoint response = api.datapointsIdGet(id);
        // TODO: test validations
    }

}
