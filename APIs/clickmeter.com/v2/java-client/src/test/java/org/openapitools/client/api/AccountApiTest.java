/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiCoreDtoAccountingDomainWhitelistEntry;
import org.openapitools.client.model.ApiCoreDtoAccountingGuest;
import org.openapitools.client.model.ApiCoreDtoAccountingIpBlacklistEntry;
import org.openapitools.client.model.ApiCoreDtoAccountingPlan;
import org.openapitools.client.model.ApiCoreDtoAccountingUser;
import org.openapitools.client.model.ApiCoreRequestsPermissionPatchRequest;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    /**
     * Delete an domain entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountDeleteDomainWhitelistTest() throws ApiException {
        String whitelistId = null;
        ApiCoreDtoAccountingDomainWhitelistEntry response = api.accountDeleteDomainWhitelist(whitelistId);
        // TODO: test validations
    }

    /**
     * Delete a guest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountDeleteGuestTest() throws ApiException {
        Long guestId = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.accountDeleteGuest(guestId);
        // TODO: test validations
    }

    /**
     * Delete an ip blacklist entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountDeleteIpBlacklistTest() throws ApiException {
        String blacklistId = null;
        ApiCoreDtoAccountingIpBlacklistEntry response = api.accountDeleteIpBlacklist(blacklistId);
        // TODO: test validations
    }

    /**
     * Retrieve current account data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetTest() throws ApiException {
        ApiCoreDtoAccountingUser response = api.accountGet();
        // TODO: test validations
    }

    /**
     * Retrieve list of a domains allowed to redirect in DDU mode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetDomainWhitelistTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry response = api.accountGetDomainWhitelist(offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve a guest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetGuestTest() throws ApiException {
        Long guestId = null;
        ApiCoreDtoAccountingGuest response = api.accountGetGuest(guestId);
        // TODO: test validations
    }

    /**
     * Retrieve list of a guest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetGuestsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String sortBy = null;
        String sortDirection = null;
        String textSearch = null;
        ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 response = api.accountGetGuests(offset, limit, sortBy, sortDirection, textSearch);
        // TODO: test validations
    }

    /**
     * Retrieve count of guests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetGuestsCountTest() throws ApiException {
        String textSearch = null;
        ApiCoreResponsesCountResponce response = api.accountGetGuestsCount(textSearch);
        // TODO: test validations
    }

    /**
     * Retrieve list of a ip to exclude from event tracking
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetIpBlacklistTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry response = api.accountGetIpBlacklist(offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve permissions for a guest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetPermissionsTest() throws ApiException {
        Long guestId = null;
        String entityType = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        Long entityId = null;
        ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant response = api.accountGetPermissions(guestId, entityType, offset, limit, type, entityId);
        // TODO: test validations
    }

    /**
     * Retrieve count of the permissions for a guest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetPermissionsCountTest() throws ApiException {
        Long guestId = null;
        String entityType = null;
        String type = null;
        Long entityId = null;
        ApiCoreResponsesCountResponce response = api.accountGetPermissionsCount(guestId, entityType, type, entityId);
        // TODO: test validations
    }

    /**
     * Retrieve current account plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetPlanTest() throws ApiException {
        ApiCoreDtoAccountingPlan response = api.accountGetPlan();
        // TODO: test validations
    }

    /**
     * Change the permission on a shared object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGuestsGuestIdTypePermissionsPatchPostTest() throws ApiException {
        Long guestId = null;
        String type = null;
        ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.accountGuestsGuestIdTypePermissionsPatchPost(guestId, type, apiCoreRequestsPermissionPatchRequest);
        // TODO: test validations
    }

    /**
     * Change the permission on a shared object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPatchPermissionsTest() throws ApiException {
        Long guestId = null;
        String type = null;
        ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest = null;
        ApiCoreResponsesEntityUriSystemInt64 response = api.accountPatchPermissions(guestId, type, apiCoreRequestsPermissionPatchRequest);
        // TODO: test validations
    }

    /**
     * Update current account data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPostTest() throws ApiException {
        ApiCoreDtoAccountingUser apiCoreDtoAccountingUser = null;
        ApiCoreDtoAccountingUser response = api.accountPost(apiCoreDtoAccountingUser);
        // TODO: test validations
    }

    /**
     * Update a guest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPostGuestTest() throws ApiException {
        Long guestId = null;
        ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest = null;
        ApiCoreDtoAccountingGuest response = api.accountPostGuest(guestId, apiCoreDtoAccountingGuest);
        // TODO: test validations
    }

    /**
     * Create an domain entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPutDomainWhitelistTest() throws ApiException {
        ApiCoreDtoAccountingDomainWhitelistEntry apiCoreDtoAccountingDomainWhitelistEntry = null;
        ApiCoreDtoAccountingDomainWhitelistEntry response = api.accountPutDomainWhitelist(apiCoreDtoAccountingDomainWhitelistEntry);
        // TODO: test validations
    }

    /**
     * Create a guest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPutGuestTest() throws ApiException {
        ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest = null;
        ApiCoreDtoAccountingGuest response = api.accountPutGuest(apiCoreDtoAccountingGuest);
        // TODO: test validations
    }

    /**
     * Create an ip blacklist entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPutIpBlacklistTest() throws ApiException {
        ApiCoreDtoAccountingIpBlacklistEntry apiCoreDtoAccountingIpBlacklistEntry = null;
        ApiCoreDtoAccountingIpBlacklistEntry response = api.accountPutIpBlacklist(apiCoreDtoAccountingIpBlacklistEntry);
        // TODO: test validations
    }

}
