/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiCoreDtoDatapointsBrowserBaseDestinationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsDatapointRetargetingInfo;
import org.openapitools.client.model.ApiCoreDtoDatapointsMultipleDestinationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsUniqueDestinationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsUrlByLanguageItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsUrlByNationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsWeightedDestinationItem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ApiCoreDtoDatapointsTrackingLinkSpecifics
 */
public class ApiCoreDtoDatapointsTrackingLinkSpecificsTest {
    private final ApiCoreDtoDatapointsTrackingLinkSpecifics model = new ApiCoreDtoDatapointsTrackingLinkSpecifics();

    /**
     * Model tests for ApiCoreDtoDatapointsTrackingLinkSpecifics
     */
    @Test
    public void testApiCoreDtoDatapointsTrackingLinkSpecifics() {
        // TODO: test ApiCoreDtoDatapointsTrackingLinkSpecifics
    }

    /**
     * Test the property 'appendQuery'
     */
    @Test
    public void appendQueryTest() {
        // TODO: test appendQuery
    }

    /**
     * Test the property 'browserDestinationItem'
     */
    @Test
    public void browserDestinationItemTest() {
        // TODO: test browserDestinationItem
    }

    /**
     * Test the property 'destinationMode'
     */
    @Test
    public void destinationModeTest() {
        // TODO: test destinationMode
    }

    /**
     * Test the property 'domainId'
     */
    @Test
    public void domainIdTest() {
        // TODO: test domainId
    }

    /**
     * Test the property 'encodeUrl'
     */
    @Test
    public void encodeUrlTest() {
        // TODO: test encodeUrl
    }

    /**
     * Test the property 'expirationClicks'
     */
    @Test
    public void expirationClicksTest() {
        // TODO: test expirationClicks
    }

    /**
     * Test the property 'expirationDate'
     */
    @Test
    public void expirationDateTest() {
        // TODO: test expirationDate
    }

    /**
     * Test the property 'firstUrl'
     */
    @Test
    public void firstUrlTest() {
        // TODO: test firstUrl
    }

    /**
     * Test the property 'goDomainId'
     */
    @Test
    public void goDomainIdTest() {
        // TODO: test goDomainId
    }

    /**
     * Test the property 'hideUrl'
     */
    @Test
    public void hideUrlTest() {
        // TODO: test hideUrl
    }

    /**
     * Test the property 'hideUrlTitle'
     */
    @Test
    public void hideUrlTitleTest() {
        // TODO: test hideUrlTitle
    }

    /**
     * Test the property 'isABTest'
     */
    @Test
    public void isABTestTest() {
        // TODO: test isABTest
    }

    /**
     * Test the property 'password'
     */
    @Test
    public void passwordTest() {
        // TODO: test password
    }

    /**
     * Test the property 'pauseAfterClicksExpiration'
     */
    @Test
    public void pauseAfterClicksExpirationTest() {
        // TODO: test pauseAfterClicksExpiration
    }

    /**
     * Test the property 'pauseAfterDateExpiration'
     */
    @Test
    public void pauseAfterDateExpirationTest() {
        // TODO: test pauseAfterDateExpiration
    }

    /**
     * Test the property 'randomDestinationItems'
     */
    @Test
    public void randomDestinationItemsTest() {
        // TODO: test randomDestinationItems
    }

    /**
     * Test the property 'redirectType'
     */
    @Test
    public void redirectTypeTest() {
        // TODO: test redirectType
    }

    /**
     * Test the property 'referrerClean'
     */
    @Test
    public void referrerCleanTest() {
        // TODO: test referrerClean
    }

    /**
     * Test the property 'scripts'
     */
    @Test
    public void scriptsTest() {
        // TODO: test scripts
    }

    /**
     * Test the property 'sequentialDestinationItems'
     */
    @Test
    public void sequentialDestinationItemsTest() {
        // TODO: test sequentialDestinationItems
    }

    /**
     * Test the property 'spilloverDestinationItems'
     */
    @Test
    public void spilloverDestinationItemsTest() {
        // TODO: test spilloverDestinationItems
    }

    /**
     * Test the property 'uniqueDestinationItem'
     */
    @Test
    public void uniqueDestinationItemTest() {
        // TODO: test uniqueDestinationItem
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'urlAfterClicksExpiration'
     */
    @Test
    public void urlAfterClicksExpirationTest() {
        // TODO: test urlAfterClicksExpiration
    }

    /**
     * Test the property 'urlAfterDateExpiration'
     */
    @Test
    public void urlAfterDateExpirationTest() {
        // TODO: test urlAfterDateExpiration
    }

    /**
     * Test the property 'urlsByLanguage'
     */
    @Test
    public void urlsByLanguageTest() {
        // TODO: test urlsByLanguage
    }

    /**
     * Test the property 'urlsByNation'
     */
    @Test
    public void urlsByNationTest() {
        // TODO: test urlsByNation
    }

    /**
     * Test the property 'weightedDestinationItems'
     */
    @Test
    public void weightedDestinationItemsTest() {
        // TODO: test weightedDestinationItems
    }

}
