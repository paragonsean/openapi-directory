/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiCoreDtoRetargetingRetargetingScript;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RetargetingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RetargetingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RetargetingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for retargetingCount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingCountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retargeting/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return retargetingCountCall(_callback);

    }

    /**
     * Retrieve count of retargeting scripts
     * 
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce retargetingCount() throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = retargetingCountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve count of retargeting scripts
     * 
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> retargetingCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = retargetingCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve count of retargeting scripts (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingCountAsync(final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retargetingDelete
     * @param id The id of the retargeting script (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retargeting/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retargetingDelete(Async)");
        }

        return retargetingDeleteCall(id, _callback);

    }

    /**
     * Deletes a retargeting script (and remove associations)
     * 
     * @param id The id of the retargeting script (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 retargetingDelete(Long id) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = retargetingDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Deletes a retargeting script (and remove associations)
     * 
     * @param id The id of the retargeting script (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> retargetingDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = retargetingDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a retargeting script (and remove associations) (asynchronously)
     * 
     * @param id The id of the retargeting script (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingDeleteAsync(Long id, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retargetingGet
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retargeting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return retargetingGetCall(offset, limit, _callback);

    }

    /**
     * List of all the retargeting scripts associated to the user
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 retargetingGet(Integer offset, Integer limit) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = retargetingGetWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * List of all the retargeting scripts associated to the user
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> retargetingGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = retargetingGetValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all the retargeting scripts associated to the user (asynchronously)
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingGetAsync(Integer offset, Integer limit, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingGetValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retargetingGetDatapoints
     * @param id Id of the retargeting script (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingGetDatapointsCall(Long id, Integer offset, Integer limit, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retargeting/{id}/datapoints"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (onlyFavorites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFavorites", onlyFavorites));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingGetDatapointsValidateBeforeCall(Long id, Integer offset, Integer limit, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retargetingGetDatapoints(Async)");
        }

        return retargetingGetDatapointsCall(id, offset, limit, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, _callback);

    }

    /**
     * List of all the datapoints associated to the retargeting script.
     * 
     * @param id Id of the retargeting script (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 retargetingGetDatapoints(Long id, Integer offset, Integer limit, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = retargetingGetDatapointsWithHttpInfo(id, offset, limit, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * List of all the datapoints associated to the retargeting script.
     * 
     * @param id Id of the retargeting script (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> retargetingGetDatapointsWithHttpInfo(Long id, Integer offset, Integer limit, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = retargetingGetDatapointsValidateBeforeCall(id, offset, limit, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all the datapoints associated to the retargeting script. (asynchronously)
     * 
     * @param id Id of the retargeting script (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingGetDatapointsAsync(Long id, Integer offset, Integer limit, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingGetDatapointsValidateBeforeCall(id, offset, limit, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retargetingGetDatapointsCount
     * @param id Id of the group (required)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingGetDatapointsCountCall(Long id, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retargeting/{id}/datapoints/count"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (onlyFavorites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFavorites", onlyFavorites));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingGetDatapointsCountValidateBeforeCall(Long id, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retargetingGetDatapointsCount(Async)");
        }

        return retargetingGetDatapointsCountCall(id, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, _callback);

    }

    /**
     * Count the datapoints associated to the retargeting script.
     * 
     * @param id Id of the group (required)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce retargetingGetDatapointsCount(Long id, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = retargetingGetDatapointsCountWithHttpInfo(id, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Count the datapoints associated to the retargeting script.
     * 
     * @param id Id of the group (required)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> retargetingGetDatapointsCountWithHttpInfo(Long id, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = retargetingGetDatapointsCountValidateBeforeCall(id, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count the datapoints associated to the retargeting script. (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingGetDatapointsCountAsync(Long id, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingGetDatapointsCountValidateBeforeCall(id, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retargetingIdGet
     * @param id The id of the retargeting script (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retargeting/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retargetingIdGet(Async)");
        }

        return retargetingIdGetCall(id, _callback);

    }

    /**
     * Get a retargeting script object
     * 
     * @param id The id of the retargeting script (required)
     * @return ApiCoreDtoRetargetingRetargetingScript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoRetargetingRetargetingScript retargetingIdGet(Long id) throws ApiException {
        ApiResponse<ApiCoreDtoRetargetingRetargetingScript> localVarResp = retargetingIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a retargeting script object
     * 
     * @param id The id of the retargeting script (required)
     * @return ApiResponse&lt;ApiCoreDtoRetargetingRetargetingScript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoRetargetingRetargetingScript> retargetingIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = retargetingIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoRetargetingRetargetingScript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a retargeting script object (asynchronously)
     * 
     * @param id The id of the retargeting script (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingIdGetAsync(Long id, final ApiCallback<ApiCoreDtoRetargetingRetargetingScript> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoRetargetingRetargetingScript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retargetingPost
     * @param id The id of the retargeting script (required)
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingPostCall(Long id, ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoRetargetingRetargetingScript;

        // create path and map variables
        String localVarPath = "/retargeting/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingPostValidateBeforeCall(Long id, ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retargetingPost(Async)");
        }

        // verify the required parameter 'apiCoreDtoRetargetingRetargetingScript' is set
        if (apiCoreDtoRetargetingRetargetingScript == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoRetargetingRetargetingScript' when calling retargetingPost(Async)");
        }

        return retargetingPostCall(id, apiCoreDtoRetargetingRetargetingScript, _callback);

    }

    /**
     * Updates a retargeting script
     * 
     * @param id The id of the retargeting script (required)
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 retargetingPost(Long id, ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = retargetingPostWithHttpInfo(id, apiCoreDtoRetargetingRetargetingScript);
        return localVarResp.getData();
    }

    /**
     * Updates a retargeting script
     * 
     * @param id The id of the retargeting script (required)
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> retargetingPostWithHttpInfo(Long id, ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript) throws ApiException {
        okhttp3.Call localVarCall = retargetingPostValidateBeforeCall(id, apiCoreDtoRetargetingRetargetingScript, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a retargeting script (asynchronously)
     * 
     * @param id The id of the retargeting script (required)
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingPostAsync(Long id, ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingPostValidateBeforeCall(id, apiCoreDtoRetargetingRetargetingScript, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retargetingPut
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingPutCall(ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoRetargetingRetargetingScript;

        // create path and map variables
        String localVarPath = "/retargeting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retargetingPutValidateBeforeCall(ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoRetargetingRetargetingScript' is set
        if (apiCoreDtoRetargetingRetargetingScript == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoRetargetingRetargetingScript' when calling retargetingPut(Async)");
        }

        return retargetingPutCall(apiCoreDtoRetargetingRetargetingScript, _callback);

    }

    /**
     * Creates a retargeting script
     * 
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 retargetingPut(ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = retargetingPutWithHttpInfo(apiCoreDtoRetargetingRetargetingScript);
        return localVarResp.getData();
    }

    /**
     * Creates a retargeting script
     * 
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> retargetingPutWithHttpInfo(ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript) throws ApiException {
        okhttp3.Call localVarCall = retargetingPutValidateBeforeCall(apiCoreDtoRetargetingRetargetingScript, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a retargeting script (asynchronously)
     * 
     * @param apiCoreDtoRetargetingRetargetingScript The body of the retargeting script (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retargetingPutAsync(ApiCoreDtoRetargetingRetargetingScript apiCoreDtoRetargetingRetargetingScript, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = retargetingPutValidateBeforeCall(apiCoreDtoRetargetingRetargetingScript, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
