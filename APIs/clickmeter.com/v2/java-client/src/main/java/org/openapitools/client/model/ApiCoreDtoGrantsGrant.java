/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiCoreDtoGrantsGrant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:30.746224-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiCoreDtoGrantsGrant {
  public static final String SERIALIZED_NAME_DATAPOINT_TYPE = "DatapointType";
  @SerializedName(SERIALIZED_NAME_DATAPOINT_TYPE)
  private String datapointType;

  public static final String SERIALIZED_NAME_ENTITY = "Entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private ApiCoreResponsesEntityUriSystemInt64 entity;

  public static final String SERIALIZED_NAME_ENTITY_NAME = "EntityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "EntityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ApiCoreDtoGrantsGrant() {
  }

  public ApiCoreDtoGrantsGrant datapointType(String datapointType) {
    this.datapointType = datapointType;
    return this;
  }

  /**
   * Get datapointType
   * @return datapointType
   */
  @javax.annotation.Nullable
  public String getDatapointType() {
    return datapointType;
  }

  public void setDatapointType(String datapointType) {
    this.datapointType = datapointType;
  }


  public ApiCoreDtoGrantsGrant entity(ApiCoreResponsesEntityUriSystemInt64 entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Get entity
   * @return entity
   */
  @javax.annotation.Nullable
  public ApiCoreResponsesEntityUriSystemInt64 getEntity() {
    return entity;
  }

  public void setEntity(ApiCoreResponsesEntityUriSystemInt64 entity) {
    this.entity = entity;
  }


  public ApiCoreDtoGrantsGrant entityName(String entityName) {
    this.entityName = entityName;
    return this;
  }

  /**
   * Get entityName
   * @return entityName
   */
  @javax.annotation.Nullable
  public String getEntityName() {
    return entityName;
  }

  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public ApiCoreDtoGrantsGrant entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public ApiCoreDtoGrantsGrant type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiCoreDtoGrantsGrant apiCoreDtoGrantsGrant = (ApiCoreDtoGrantsGrant) o;
    return Objects.equals(this.datapointType, apiCoreDtoGrantsGrant.datapointType) &&
        Objects.equals(this.entity, apiCoreDtoGrantsGrant.entity) &&
        Objects.equals(this.entityName, apiCoreDtoGrantsGrant.entityName) &&
        Objects.equals(this.entityType, apiCoreDtoGrantsGrant.entityType) &&
        Objects.equals(this.type, apiCoreDtoGrantsGrant.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datapointType, entity, entityName, entityType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiCoreDtoGrantsGrant {\n");
    sb.append("    datapointType: ").append(toIndentedString(datapointType)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatapointType");
    openapiFields.add("Entity");
    openapiFields.add("EntityName");
    openapiFields.add("EntityType");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiCoreDtoGrantsGrant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiCoreDtoGrantsGrant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiCoreDtoGrantsGrant is not found in the empty JSON string", ApiCoreDtoGrantsGrant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiCoreDtoGrantsGrant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiCoreDtoGrantsGrant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DatapointType") != null && !jsonObj.get("DatapointType").isJsonNull()) && !jsonObj.get("DatapointType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DatapointType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DatapointType").toString()));
      }
      // validate the optional field `Entity`
      if (jsonObj.get("Entity") != null && !jsonObj.get("Entity").isJsonNull()) {
        ApiCoreResponsesEntityUriSystemInt64.validateJsonElement(jsonObj.get("Entity"));
      }
      if ((jsonObj.get("EntityName") != null && !jsonObj.get("EntityName").isJsonNull()) && !jsonObj.get("EntityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntityName").toString()));
      }
      if ((jsonObj.get("EntityType") != null && !jsonObj.get("EntityType").isJsonNull()) && !jsonObj.get("EntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntityType").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiCoreDtoGrantsGrant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiCoreDtoGrantsGrant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiCoreDtoGrantsGrant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiCoreDtoGrantsGrant.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiCoreDtoGrantsGrant>() {
           @Override
           public void write(JsonWriter out, ApiCoreDtoGrantsGrant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiCoreDtoGrantsGrant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiCoreDtoGrantsGrant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiCoreDtoGrantsGrant
   * @throws IOException if the JSON string is invalid with respect to ApiCoreDtoGrantsGrant
   */
  public static ApiCoreDtoGrantsGrant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiCoreDtoGrantsGrant.class);
  }

  /**
   * Convert an instance of ApiCoreDtoGrantsGrant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

