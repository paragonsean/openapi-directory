/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreDtoClickStreamHitListPage;
import org.openapitools.client.model.ApiCoreDtoDatapointsDatapoint;
import org.openapitools.client.model.ApiCoreRequestsDatapointsBatch;
import org.openapitools.client.model.ApiCoreRequestsDeleteBatch;
import org.openapitools.client.model.ApiCoreRequestsGenericTextPatch;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataPointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataPointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataPointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataPointsBatchDelete
     * @param apiCoreRequestsDeleteBatch A json containing the datapoints to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsBatchDeleteCall(ApiCoreRequestsDeleteBatch apiCoreRequestsDeleteBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsDeleteBatch;

        // create path and map variables
        String localVarPath = "/datapoints/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsBatchDeleteValidateBeforeCall(ApiCoreRequestsDeleteBatch apiCoreRequestsDeleteBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreRequestsDeleteBatch' is set
        if (apiCoreRequestsDeleteBatch == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsDeleteBatch' when calling dataPointsBatchDelete(Async)");
        }

        return dataPointsBatchDeleteCall(apiCoreRequestsDeleteBatch, _callback);

    }

    /**
     * Delete multiple datapoints
     * 
     * @param apiCoreRequestsDeleteBatch A json containing the datapoints to delete. (required)
     * @return ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 dataPointsBatchDelete(ApiCoreRequestsDeleteBatch apiCoreRequestsDeleteBatch) throws ApiException {
        ApiResponse<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> localVarResp = dataPointsBatchDeleteWithHttpInfo(apiCoreRequestsDeleteBatch);
        return localVarResp.getData();
    }

    /**
     * Delete multiple datapoints
     * 
     * @param apiCoreRequestsDeleteBatch A json containing the datapoints to delete. (required)
     * @return ApiResponse&lt;ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> dataPointsBatchDeleteWithHttpInfo(ApiCoreRequestsDeleteBatch apiCoreRequestsDeleteBatch) throws ApiException {
        okhttp3.Call localVarCall = dataPointsBatchDeleteValidateBeforeCall(apiCoreRequestsDeleteBatch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete multiple datapoints (asynchronously)
     * 
     * @param apiCoreRequestsDeleteBatch A json containing the datapoints to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsBatchDeleteAsync(ApiCoreRequestsDeleteBatch apiCoreRequestsDeleteBatch, final ApiCallback<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsBatchDeleteValidateBeforeCall(apiCoreRequestsDeleteBatch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsBatchPost
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsBatchPostCall(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsDatapointsBatch;

        // create path and map variables
        String localVarPath = "/datapoints/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsBatchPostValidateBeforeCall(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreRequestsDatapointsBatch' is set
        if (apiCoreRequestsDatapointsBatch == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsDatapointsBatch' when calling dataPointsBatchPost(Async)");
        }

        return dataPointsBatchPostCall(apiCoreRequestsDatapointsBatch, _callback);

    }

    /**
     * Update multiple datapoints
     * 
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to update. (required)
     * @return ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 dataPointsBatchPost(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch) throws ApiException {
        ApiResponse<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> localVarResp = dataPointsBatchPostWithHttpInfo(apiCoreRequestsDatapointsBatch);
        return localVarResp.getData();
    }

    /**
     * Update multiple datapoints
     * 
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to update. (required)
     * @return ApiResponse&lt;ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> dataPointsBatchPostWithHttpInfo(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch) throws ApiException {
        okhttp3.Call localVarCall = dataPointsBatchPostValidateBeforeCall(apiCoreRequestsDatapointsBatch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update multiple datapoints (asynchronously)
     * 
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsBatchPostAsync(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch, final ApiCallback<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsBatchPostValidateBeforeCall(apiCoreRequestsDatapointsBatch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsBatchPut
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsBatchPutCall(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsDatapointsBatch;

        // create path and map variables
        String localVarPath = "/datapoints/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsBatchPutValidateBeforeCall(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreRequestsDatapointsBatch' is set
        if (apiCoreRequestsDatapointsBatch == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsDatapointsBatch' when calling dataPointsBatchPut(Async)");
        }

        return dataPointsBatchPutCall(apiCoreRequestsDatapointsBatch, _callback);

    }

    /**
     * Create multiple datapoints
     * 
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to create. (required)
     * @return ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 dataPointsBatchPut(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch) throws ApiException {
        ApiResponse<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> localVarResp = dataPointsBatchPutWithHttpInfo(apiCoreRequestsDatapointsBatch);
        return localVarResp.getData();
    }

    /**
     * Create multiple datapoints
     * 
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to create. (required)
     * @return ApiResponse&lt;ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> dataPointsBatchPutWithHttpInfo(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch) throws ApiException {
        okhttp3.Call localVarCall = dataPointsBatchPutValidateBeforeCall(apiCoreRequestsDatapointsBatch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create multiple datapoints (asynchronously)
     * 
     * @param apiCoreRequestsDatapointsBatch A json containing the datapoints to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsBatchPutAsync(ApiCoreRequestsDatapointsBatch apiCoreRequestsDatapointsBatch, final ApiCallback<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsBatchPutValidateBeforeCall(apiCoreRequestsDatapointsBatch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsCount
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsCountCall(String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (onlyFavorites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFavorites", onlyFavorites));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsCountValidateBeforeCall(String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        return dataPointsCountCall(type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, _callback);

    }

    /**
     * Count the datapoints associated to the user
     * 
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce dataPointsCount(String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = dataPointsCountWithHttpInfo(type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Count the datapoints associated to the user
     * 
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> dataPointsCountWithHttpInfo(String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = dataPointsCountValidateBeforeCall(type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count the datapoints associated to the user (asynchronously)
     * 
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsCountAsync(String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsCountValidateBeforeCall(type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsDelete
     * @param id The id of the datapoint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataPointsDelete(Async)");
        }

        return dataPointsDeleteCall(id, _callback);

    }

    /**
     * Delete a datapoint
     * 
     * @param id The id of the datapoint (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 dataPointsDelete(Long id) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = dataPointsDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a datapoint
     * 
     * @param id The id of the datapoint (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> dataPointsDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = dataPointsDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a datapoint (asynchronously)
     * 
     * @param id The id of the datapoint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsDeleteAsync(Long id, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsGet
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetCall(Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (onlyFavorites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFavorites", onlyFavorites));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsGetValidateBeforeCall(Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        return dataPointsGetCall(offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, _callback);

    }

    /**
     * List of all the datapoints associated to the user
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 dataPointsGet(Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = dataPointsGetWithHttpInfo(offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * List of all the datapoints associated to the user
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> dataPointsGetWithHttpInfo(Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = dataPointsGetValidateBeforeCall(offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all the datapoints associated to the user (asynchronously)
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetAsync(Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsGetValidateBeforeCall(offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsGetHits
     * @param id Id of the datapoint (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetHitsCall(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/{id}/hits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeframe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe", timeframe));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsGetHitsValidateBeforeCall(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataPointsGetHits(Async)");
        }

        // verify the required parameter 'timeframe' is set
        if (timeframe == null) {
            throw new ApiException("Missing the required parameter 'timeframe' when calling dataPointsGetHits(Async)");
        }

        return dataPointsGetHitsCall(id, timeframe, limit, offset, fromDay, toDay, filter, _callback);

    }

    /**
     * Retrieve the list of events related to this datapoint.
     * 
     * @param id Id of the datapoint (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiCoreDtoClickStreamHitListPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoClickStreamHitListPage dataPointsGetHits(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter) throws ApiException {
        ApiResponse<ApiCoreDtoClickStreamHitListPage> localVarResp = dataPointsGetHitsWithHttpInfo(id, timeframe, limit, offset, fromDay, toDay, filter);
        return localVarResp.getData();
    }

    /**
     * Retrieve the list of events related to this datapoint.
     * 
     * @param id Id of the datapoint (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiResponse&lt;ApiCoreDtoClickStreamHitListPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoClickStreamHitListPage> dataPointsGetHitsWithHttpInfo(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter) throws ApiException {
        okhttp3.Call localVarCall = dataPointsGetHitsValidateBeforeCall(id, timeframe, limit, offset, fromDay, toDay, filter, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoClickStreamHitListPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the list of events related to this datapoint. (asynchronously)
     * 
     * @param id Id of the datapoint (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetHitsAsync(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback<ApiCoreDtoClickStreamHitListPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsGetHitsValidateBeforeCall(id, timeframe, limit, offset, fromDay, toDay, filter, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoClickStreamHitListPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsGetStatisticsAggregatedSingle
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsAggregatedSingleCall(String timeFrame, String type, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/aggregated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (hourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hourly", hourly));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsGetStatisticsAggregatedSingleValidateBeforeCall(String timeFrame, String type, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsAggregatedSingle(Async)");
        }

        return dataPointsGetStatisticsAggregatedSingleCall(timeFrame, type, fromDay, toDay, hourly, status, tag, favourite, _callback);

    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @return ApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedResult dataPointsGetStatisticsAggregatedSingle(String timeFrame, String type, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedResult> localVarResp = dataPointsGetStatisticsAggregatedSingleWithHttpInfo(timeFrame, type, fromDay, toDay, hourly, status, tag, favourite);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedResult> dataPointsGetStatisticsAggregatedSingleWithHttpInfo(String timeFrame, String type, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite) throws ApiException {
        okhttp3.Call localVarCall = dataPointsGetStatisticsAggregatedSingleValidateBeforeCall(timeFrame, type, fromDay, toDay, hourly, status, tag, favourite, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsAggregatedSingleAsync(String timeFrame, String type, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite, final ApiCallback<ApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsGetStatisticsAggregatedSingleValidateBeforeCall(timeFrame, type, fromDay, toDay, hourly, status, tag, favourite, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsGetStatisticsAllList
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsAllListCall(String type, String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/aggregated/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsGetStatisticsAllListValidateBeforeCall(String type, String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling dataPointsGetStatisticsAllList(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsAllList(Async)");
        }

        return dataPointsGetStatisticsAllListCall(type, timeFrame, fromDay, toDay, status, tag, favourite, groupBy, _callback);

    }

    /**
     * Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult dataPointsGetStatisticsAllList(String type, String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> localVarResp = dataPointsGetStatisticsAllListWithHttpInfo(type, timeFrame, fromDay, toDay, status, tag, favourite, groupBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> dataPointsGetStatisticsAllListWithHttpInfo(String type, String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = dataPointsGetStatisticsAllListValidateBeforeCall(type, timeFrame, fromDay, toDay, status, tag, favourite, groupBy, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month) (asynchronously)
     * 
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsAllListAsync(String type, String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsGetStatisticsAllListValidateBeforeCall(type, timeFrame, fromDay, toDay, status, tag, favourite, groupBy, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsGetStatisticsList
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsListCall(Long id, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/{id}/aggregated/list"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsGetStatisticsListValidateBeforeCall(Long id, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataPointsGetStatisticsList(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsList(Async)");
        }

        return dataPointsGetStatisticsListCall(id, timeFrame, fromDay, toDay, groupBy, _callback);

    }

    /**
     * Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult dataPointsGetStatisticsList(Long id, String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> localVarResp = dataPointsGetStatisticsListWithHttpInfo(id, timeFrame, fromDay, toDay, groupBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> dataPointsGetStatisticsListWithHttpInfo(Long id, String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = dataPointsGetStatisticsListValidateBeforeCall(id, timeFrame, fromDay, toDay, groupBy, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month) (asynchronously)
     * 
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsListAsync(Long id, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsGetStatisticsListValidateBeforeCall(id, timeFrame, fromDay, toDay, groupBy, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsGetStatisticsSingle
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsSingleCall(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/{id}/aggregated"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (hourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hourly", hourly));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsGetStatisticsSingleValidateBeforeCall(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataPointsGetStatisticsSingle(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling dataPointsGetStatisticsSingle(Async)");
        }

        return dataPointsGetStatisticsSingleCall(id, timeFrame, fromDay, toDay, hourly, _callback);

    }

    /**
     * Retrieve statistics about this datapoint for a timeframe
     * 
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @return ApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedResult dataPointsGetStatisticsSingle(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedResult> localVarResp = dataPointsGetStatisticsSingleWithHttpInfo(id, timeFrame, fromDay, toDay, hourly);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this datapoint for a timeframe
     * 
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedResult> dataPointsGetStatisticsSingleWithHttpInfo(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly) throws ApiException {
        okhttp3.Call localVarCall = dataPointsGetStatisticsSingleValidateBeforeCall(id, timeFrame, fromDay, toDay, hourly, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this datapoint for a timeframe (asynchronously)
     * 
     * @param id Id of the datapoint (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsGetStatisticsSingleAsync(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly, final ApiCallback<ApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsGetStatisticsSingleValidateBeforeCall(id, timeFrame, fromDay, toDay, hourly, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsPatchFavourite
     * @param id Id of the datapoint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPatchFavouriteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/{id}/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsPatchFavouriteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataPointsPatchFavourite(Async)");
        }

        return dataPointsPatchFavouriteCall(id, _callback);

    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a datapoint
     * 
     * @param id Id of the datapoint (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 dataPointsPatchFavourite(Long id) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = dataPointsPatchFavouriteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a datapoint
     * 
     * @param id Id of the datapoint (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> dataPointsPatchFavouriteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = dataPointsPatchFavouriteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a datapoint (asynchronously)
     * 
     * @param id Id of the datapoint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPatchFavouriteAsync(Long id, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsPatchFavouriteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsPatchNotes
     * @param id Id of the datapoint (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPatchNotesCall(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsGenericTextPatch;

        // create path and map variables
        String localVarPath = "/datapoints/{id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsPatchNotesValidateBeforeCall(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataPointsPatchNotes(Async)");
        }

        // verify the required parameter 'apiCoreRequestsGenericTextPatch' is set
        if (apiCoreRequestsGenericTextPatch == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsGenericTextPatch' when calling dataPointsPatchNotes(Async)");
        }

        return dataPointsPatchNotesCall(id, apiCoreRequestsGenericTextPatch, _callback);

    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a datapoint
     * 
     * @param id Id of the datapoint (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 dataPointsPatchNotes(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = dataPointsPatchNotesWithHttpInfo(id, apiCoreRequestsGenericTextPatch);
        return localVarResp.getData();
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a datapoint
     * 
     * @param id Id of the datapoint (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> dataPointsPatchNotesWithHttpInfo(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch) throws ApiException {
        okhttp3.Call localVarCall = dataPointsPatchNotesValidateBeforeCall(id, apiCoreRequestsGenericTextPatch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a datapoint (asynchronously)
     * 
     * @param id Id of the datapoint (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPatchNotesAsync(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsPatchNotesValidateBeforeCall(id, apiCoreRequestsGenericTextPatch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsPost
     * @param id The id of the datapoint (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPostCall(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoDatapointsDatapoint;

        // create path and map variables
        String localVarPath = "/datapoints/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsPostValidateBeforeCall(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataPointsPost(Async)");
        }

        // verify the required parameter 'apiCoreDtoDatapointsDatapoint' is set
        if (apiCoreDtoDatapointsDatapoint == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoDatapointsDatapoint' when calling dataPointsPost(Async)");
        }

        return dataPointsPostCall(id, apiCoreDtoDatapointsDatapoint, _callback);

    }

    /**
     * Update a datapoint
     * 
     * @param id The id of the datapoint (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 dataPointsPost(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = dataPointsPostWithHttpInfo(id, apiCoreDtoDatapointsDatapoint);
        return localVarResp.getData();
    }

    /**
     * Update a datapoint
     * 
     * @param id The id of the datapoint (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> dataPointsPostWithHttpInfo(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint) throws ApiException {
        okhttp3.Call localVarCall = dataPointsPostValidateBeforeCall(id, apiCoreDtoDatapointsDatapoint, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a datapoint (asynchronously)
     * 
     * @param id The id of the datapoint (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPostAsync(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsPostValidateBeforeCall(id, apiCoreDtoDatapointsDatapoint, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataPointsPut
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPutCall(ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoDatapointsDatapoint;

        // create path and map variables
        String localVarPath = "/datapoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataPointsPutValidateBeforeCall(ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoDatapointsDatapoint' is set
        if (apiCoreDtoDatapointsDatapoint == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoDatapointsDatapoint' when calling dataPointsPut(Async)");
        }

        return dataPointsPutCall(apiCoreDtoDatapointsDatapoint, _callback);

    }

    /**
     * Create a datapoint
     * 
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 dataPointsPut(ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = dataPointsPutWithHttpInfo(apiCoreDtoDatapointsDatapoint);
        return localVarResp.getData();
    }

    /**
     * Create a datapoint
     * 
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> dataPointsPutWithHttpInfo(ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint) throws ApiException {
        okhttp3.Call localVarCall = dataPointsPutValidateBeforeCall(apiCoreDtoDatapointsDatapoint, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a datapoint (asynchronously)
     * 
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataPointsPutAsync(ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataPointsPutValidateBeforeCall(apiCoreDtoDatapointsDatapoint, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datapointsIdGet
     * @param id The id of the datapoint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datapointsIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datapoints/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datapointsIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling datapointsIdGet(Async)");
        }

        return datapointsIdGetCall(id, _callback);

    }

    /**
     * Get a datapoint
     * 
     * @param id The id of the datapoint (required)
     * @return ApiCoreDtoDatapointsDatapoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoDatapointsDatapoint datapointsIdGet(Long id) throws ApiException {
        ApiResponse<ApiCoreDtoDatapointsDatapoint> localVarResp = datapointsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a datapoint
     * 
     * @param id The id of the datapoint (required)
     * @return ApiResponse&lt;ApiCoreDtoDatapointsDatapoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoDatapointsDatapoint> datapointsIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = datapointsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoDatapointsDatapoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a datapoint (asynchronously)
     * 
     * @param id The id of the datapoint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datapointsIdGetAsync(Long id, final ApiCallback<ApiCoreDtoDatapointsDatapoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = datapointsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoDatapointsDatapoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
