/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreDtoClickStreamHitListPage;
import org.openapitools.client.model.ApiCoreDtoConversionsConversion;
import org.openapitools.client.model.ApiCoreRequestsConversionPatchBody;
import org.openapitools.client.model.ApiCoreRequestsGenericTextPatch;
import org.openapitools.client.model.ApiCoreRequestsPatchBodyBatch;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for conversionsConversionIdDatapointsBatchPatchPut
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsPatchBodyBatch Patch requests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsConversionIdDatapointsBatchPatchPutCall(Long conversionId, ApiCoreRequestsPatchBodyBatch apiCoreRequestsPatchBodyBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsPatchBodyBatch;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/datapoints/batch/patch"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsConversionIdDatapointsBatchPatchPutValidateBeforeCall(Long conversionId, ApiCoreRequestsPatchBodyBatch apiCoreRequestsPatchBodyBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsConversionIdDatapointsBatchPatchPut(Async)");
        }

        // verify the required parameter 'apiCoreRequestsPatchBodyBatch' is set
        if (apiCoreRequestsPatchBodyBatch == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsPatchBodyBatch' when calling conversionsConversionIdDatapointsBatchPatchPut(Async)");
        }

        return conversionsConversionIdDatapointsBatchPatchPutCall(conversionId, apiCoreRequestsPatchBodyBatch, _callback);

    }

    /**
     * Modify the association between a conversion and multiple datapoints
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsPatchBodyBatch Patch requests (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 conversionsConversionIdDatapointsBatchPatchPut(Long conversionId, ApiCoreRequestsPatchBodyBatch apiCoreRequestsPatchBodyBatch) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsConversionIdDatapointsBatchPatchPutWithHttpInfo(conversionId, apiCoreRequestsPatchBodyBatch);
        return localVarResp.getData();
    }

    /**
     * Modify the association between a conversion and multiple datapoints
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsPatchBodyBatch Patch requests (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> conversionsConversionIdDatapointsBatchPatchPutWithHttpInfo(Long conversionId, ApiCoreRequestsPatchBodyBatch apiCoreRequestsPatchBodyBatch) throws ApiException {
        okhttp3.Call localVarCall = conversionsConversionIdDatapointsBatchPatchPutValidateBeforeCall(conversionId, apiCoreRequestsPatchBodyBatch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the association between a conversion and multiple datapoints (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsPatchBodyBatch Patch requests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsConversionIdDatapointsBatchPatchPutAsync(Long conversionId, ApiCoreRequestsPatchBodyBatch apiCoreRequestsPatchBodyBatch, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsConversionIdDatapointsBatchPatchPutValidateBeforeCall(conversionId, apiCoreRequestsPatchBodyBatch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsConversionIdGet
     * @param conversionId Id of the conversion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsConversionIdGetCall(Long conversionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsConversionIdGetValidateBeforeCall(Long conversionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsConversionIdGet(Async)");
        }

        return conversionsConversionIdGetCall(conversionId, _callback);

    }

    /**
     * Retrieve conversion specified by id
     * 
     * @param conversionId Id of the conversion (required)
     * @return ApiCoreDtoConversionsConversion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoConversionsConversion conversionsConversionIdGet(Long conversionId) throws ApiException {
        ApiResponse<ApiCoreDtoConversionsConversion> localVarResp = conversionsConversionIdGetWithHttpInfo(conversionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve conversion specified by id
     * 
     * @param conversionId Id of the conversion (required)
     * @return ApiResponse&lt;ApiCoreDtoConversionsConversion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoConversionsConversion> conversionsConversionIdGetWithHttpInfo(Long conversionId) throws ApiException {
        okhttp3.Call localVarCall = conversionsConversionIdGetValidateBeforeCall(conversionId, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoConversionsConversion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve conversion specified by id (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsConversionIdGetAsync(Long conversionId, final ApiCallback<ApiCoreDtoConversionsConversion> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsConversionIdGetValidateBeforeCall(conversionId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoConversionsConversion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsCount
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsCountCall(String status, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsCountValidateBeforeCall(String status, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        return conversionsCountCall(status, textSearch, createdAfter, createdBefore, _callback);

    }

    /**
     * Retrieve a count of conversions
     * 
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce conversionsCount(String status, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = conversionsCountWithHttpInfo(status, textSearch, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Retrieve a count of conversions
     * 
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> conversionsCountWithHttpInfo(String status, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = conversionsCountValidateBeforeCall(status, textSearch, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a count of conversions (asynchronously)
     * 
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsCountAsync(String status, String textSearch, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsCountValidateBeforeCall(status, textSearch, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsDelete
     * @param conversionId Id of the conversion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsDeleteCall(Long conversionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsDeleteValidateBeforeCall(Long conversionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsDelete(Async)");
        }

        return conversionsDeleteCall(conversionId, _callback);

    }

    /**
     * Delete conversion specified by id
     * 
     * @param conversionId Id of the conversion (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 conversionsDelete(Long conversionId) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsDeleteWithHttpInfo(conversionId);
        return localVarResp.getData();
    }

    /**
     * Delete conversion specified by id
     * 
     * @param conversionId Id of the conversion (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> conversionsDeleteWithHttpInfo(Long conversionId) throws ApiException {
        okhttp3.Call localVarCall = conversionsDeleteValidateBeforeCall(conversionId, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete conversion specified by id (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsDeleteAsync(Long conversionId, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsDeleteValidateBeforeCall(conversionId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsGet
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetCall(Integer offset, Integer limit, String status, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsGetValidateBeforeCall(Integer offset, Integer limit, String status, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        return conversionsGetCall(offset, limit, status, textSearch, createdAfter, createdBefore, _callback);

    }

    /**
     * Retrieve a list of conversions
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 conversionsGet(Integer offset, Integer limit, String status, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsGetWithHttpInfo(offset, limit, status, textSearch, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of conversions
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> conversionsGetWithHttpInfo(Integer offset, Integer limit, String status, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = conversionsGetValidateBeforeCall(offset, limit, status, textSearch, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of conversions (asynchronously)
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude conversions created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude conversions created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetAsync(Integer offset, Integer limit, String status, String textSearch, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsGetValidateBeforeCall(offset, limit, status, textSearch, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsGetDatapoints
     * @param conversionId Id of the conversion (required)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetDatapointsCall(Long conversionId, Integer offset, Integer limit, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/datapoints"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsGetDatapointsValidateBeforeCall(Long conversionId, Integer offset, Integer limit, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsGetDatapoints(Async)");
        }

        return conversionsGetDatapointsCall(conversionId, offset, limit, type, status, tags, textSearch, createdAfter, createdBefore, _callback);

    }

    /**
     * Retrieve a list of datapoints connected to this conversion
     * 
     * @param conversionId Id of the conversion (required)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 conversionsGetDatapoints(Long conversionId, Integer offset, Integer limit, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsGetDatapointsWithHttpInfo(conversionId, offset, limit, type, status, tags, textSearch, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of datapoints connected to this conversion
     * 
     * @param conversionId Id of the conversion (required)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> conversionsGetDatapointsWithHttpInfo(Long conversionId, Integer offset, Integer limit, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = conversionsGetDatapointsValidateBeforeCall(conversionId, offset, limit, type, status, tags, textSearch, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of datapoints connected to this conversion (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetDatapointsAsync(Long conversionId, Integer offset, Integer limit, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsGetDatapointsValidateBeforeCall(conversionId, offset, limit, type, status, tags, textSearch, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsGetDatapointsCount
     * @param conversionId Id of the conversion (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetDatapointsCountCall(Long conversionId, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/datapoints/count"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsGetDatapointsCountValidateBeforeCall(Long conversionId, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsGetDatapointsCount(Async)");
        }

        return conversionsGetDatapointsCountCall(conversionId, type, status, tags, textSearch, createdAfter, createdBefore, _callback);

    }

    /**
     * Retrieve a count of datapoints connected to this conversion
     * 
     * @param conversionId Id of the conversion (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce conversionsGetDatapointsCount(Long conversionId, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = conversionsGetDatapointsCountWithHttpInfo(conversionId, type, status, tags, textSearch, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Retrieve a count of datapoints connected to this conversion
     * 
     * @param conversionId Id of the conversion (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> conversionsGetDatapointsCountWithHttpInfo(Long conversionId, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = conversionsGetDatapointsCountValidateBeforeCall(conversionId, type, status, tags, textSearch, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a count of datapoints connected to this conversion (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tags Filter by this tag name (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetDatapointsCountAsync(Long conversionId, String type, String status, String tags, String textSearch, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsGetDatapointsCountValidateBeforeCall(conversionId, type, status, tags, textSearch, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsGetHits
     * @param conversionId Id of the conversion (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetHitsCall(Long conversionId, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/hits"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeframe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe", timeframe));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsGetHitsValidateBeforeCall(Long conversionId, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsGetHits(Async)");
        }

        // verify the required parameter 'timeframe' is set
        if (timeframe == null) {
            throw new ApiException("Missing the required parameter 'timeframe' when calling conversionsGetHits(Async)");
        }

        return conversionsGetHitsCall(conversionId, timeframe, limit, offset, fromDay, toDay, filter, _callback);

    }

    /**
     * Retrieve the list of events related to this conversion.
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiCoreDtoClickStreamHitListPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoClickStreamHitListPage conversionsGetHits(Long conversionId, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter) throws ApiException {
        ApiResponse<ApiCoreDtoClickStreamHitListPage> localVarResp = conversionsGetHitsWithHttpInfo(conversionId, timeframe, limit, offset, fromDay, toDay, filter);
        return localVarResp.getData();
    }

    /**
     * Retrieve the list of events related to this conversion.
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiResponse&lt;ApiCoreDtoClickStreamHitListPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoClickStreamHitListPage> conversionsGetHitsWithHttpInfo(Long conversionId, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter) throws ApiException {
        okhttp3.Call localVarCall = conversionsGetHitsValidateBeforeCall(conversionId, timeframe, limit, offset, fromDay, toDay, filter, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoClickStreamHitListPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the list of events related to this conversion. (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetHitsAsync(Long conversionId, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback<ApiCoreDtoClickStreamHitListPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsGetHitsValidateBeforeCall(conversionId, timeframe, limit, offset, fromDay, toDay, filter, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoClickStreamHitListPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsGetStatisticsAllList
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetStatisticsAllListCall(String timeFrame, String fromDay, String toDay, String status, String groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/aggregated/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsGetStatisticsAllListValidateBeforeCall(String timeFrame, String fromDay, String toDay, String status, String groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling conversionsGetStatisticsAllList(Async)");
        }

        return conversionsGetStatisticsAllListCall(timeFrame, fromDay, toDay, status, groupBy, _callback);

    }

    /**
     * Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult conversionsGetStatisticsAllList(String timeFrame, String fromDay, String toDay, String status, String groupBy) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> localVarResp = conversionsGetStatisticsAllListWithHttpInfo(timeFrame, fromDay, toDay, status, groupBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> conversionsGetStatisticsAllListWithHttpInfo(String timeFrame, String fromDay, String toDay, String status, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = conversionsGetStatisticsAllListValidateBeforeCall(timeFrame, fromDay, toDay, status, groupBy, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month) (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetStatisticsAllListAsync(String timeFrame, String fromDay, String toDay, String status, String groupBy, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsGetStatisticsAllListValidateBeforeCall(timeFrame, fromDay, toDay, status, groupBy, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsGetStatisticsList
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetStatisticsListCall(Long conversionId, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/aggregated/list"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsGetStatisticsListValidateBeforeCall(Long conversionId, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsGetStatisticsList(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling conversionsGetStatisticsList(Async)");
        }

        return conversionsGetStatisticsListCall(conversionId, timeFrame, fromDay, toDay, groupBy, _callback);

    }

    /**
     * Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult conversionsGetStatisticsList(Long conversionId, String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> localVarResp = conversionsGetStatisticsListWithHttpInfo(conversionId, timeFrame, fromDay, toDay, groupBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> conversionsGetStatisticsListWithHttpInfo(Long conversionId, String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = conversionsGetStatisticsListValidateBeforeCall(conversionId, timeFrame, fromDay, toDay, groupBy, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month) (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetStatisticsListAsync(Long conversionId, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsGetStatisticsListValidateBeforeCall(conversionId, timeFrame, fromDay, toDay, groupBy, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsGetStatisticsSingle
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param tag Filter by this tag name (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetStatisticsSingleCall(Long conversionId, String timeFrame, String fromDay, String toDay, String tag, Boolean favourite, Boolean hourly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/aggregated"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (hourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hourly", hourly));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsGetStatisticsSingleValidateBeforeCall(Long conversionId, String timeFrame, String fromDay, String toDay, String tag, Boolean favourite, Boolean hourly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsGetStatisticsSingle(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling conversionsGetStatisticsSingle(Async)");
        }

        return conversionsGetStatisticsSingleCall(conversionId, timeFrame, fromDay, toDay, tag, favourite, hourly, _callback);

    }

    /**
     * Retrieve statistics about this conversion for a timeframe
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param tag Filter by this tag name (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @return ApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedResult conversionsGetStatisticsSingle(Long conversionId, String timeFrame, String fromDay, String toDay, String tag, Boolean favourite, Boolean hourly) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedResult> localVarResp = conversionsGetStatisticsSingleWithHttpInfo(conversionId, timeFrame, fromDay, toDay, tag, favourite, hourly);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this conversion for a timeframe
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param tag Filter by this tag name (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedResult> conversionsGetStatisticsSingleWithHttpInfo(Long conversionId, String timeFrame, String fromDay, String toDay, String tag, Boolean favourite, Boolean hourly) throws ApiException {
        okhttp3.Call localVarCall = conversionsGetStatisticsSingleValidateBeforeCall(conversionId, timeFrame, fromDay, toDay, tag, favourite, hourly, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this conversion for a timeframe (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param tag Filter by this tag name (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsGetStatisticsSingleAsync(Long conversionId, String timeFrame, String fromDay, String toDay, String tag, Boolean favourite, Boolean hourly, final ApiCallback<ApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsGetStatisticsSingleValidateBeforeCall(conversionId, timeFrame, fromDay, toDay, tag, favourite, hourly, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsPatch
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsConversionPatchBody Patch request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPatchCall(Long conversionId, ApiCoreRequestsConversionPatchBody apiCoreRequestsConversionPatchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsConversionPatchBody;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/datapoints/patch"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsPatchValidateBeforeCall(Long conversionId, ApiCoreRequestsConversionPatchBody apiCoreRequestsConversionPatchBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsPatch(Async)");
        }

        // verify the required parameter 'apiCoreRequestsConversionPatchBody' is set
        if (apiCoreRequestsConversionPatchBody == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsConversionPatchBody' when calling conversionsPatch(Async)");
        }

        return conversionsPatchCall(conversionId, apiCoreRequestsConversionPatchBody, _callback);

    }

    /**
     * Modify the association between a conversion and a datapoint
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsConversionPatchBody Patch request (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 conversionsPatch(Long conversionId, ApiCoreRequestsConversionPatchBody apiCoreRequestsConversionPatchBody) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsPatchWithHttpInfo(conversionId, apiCoreRequestsConversionPatchBody);
        return localVarResp.getData();
    }

    /**
     * Modify the association between a conversion and a datapoint
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsConversionPatchBody Patch request (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> conversionsPatchWithHttpInfo(Long conversionId, ApiCoreRequestsConversionPatchBody apiCoreRequestsConversionPatchBody) throws ApiException {
        okhttp3.Call localVarCall = conversionsPatchValidateBeforeCall(conversionId, apiCoreRequestsConversionPatchBody, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify the association between a conversion and a datapoint (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsConversionPatchBody Patch request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPatchAsync(Long conversionId, ApiCoreRequestsConversionPatchBody apiCoreRequestsConversionPatchBody, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsPatchValidateBeforeCall(conversionId, apiCoreRequestsConversionPatchBody, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsPatchNotes
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPatchNotesCall(Long conversionId, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsGenericTextPatch;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}/notes"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsPatchNotesValidateBeforeCall(Long conversionId, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsPatchNotes(Async)");
        }

        // verify the required parameter 'apiCoreRequestsGenericTextPatch' is set
        if (apiCoreRequestsGenericTextPatch == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsGenericTextPatch' when calling conversionsPatchNotes(Async)");
        }

        return conversionsPatchNotesCall(conversionId, apiCoreRequestsGenericTextPatch, _callback);

    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a conversion
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 conversionsPatchNotes(Long conversionId, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsPatchNotesWithHttpInfo(conversionId, apiCoreRequestsGenericTextPatch);
        return localVarResp.getData();
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a conversion
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> conversionsPatchNotesWithHttpInfo(Long conversionId, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch) throws ApiException {
        okhttp3.Call localVarCall = conversionsPatchNotesValidateBeforeCall(conversionId, apiCoreRequestsGenericTextPatch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a conversion (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPatchNotesAsync(Long conversionId, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsPatchNotesValidateBeforeCall(conversionId, apiCoreRequestsGenericTextPatch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsPost
     * @param conversionId Id of the conversion (required)
     * @param apiCoreDtoConversionsConversion Updated body of the conversion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPostCall(Long conversionId, ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoConversionsConversion;

        // create path and map variables
        String localVarPath = "/conversions/{conversionId}"
            .replace("{" + "conversionId" + "}", localVarApiClient.escapeString(conversionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsPostValidateBeforeCall(Long conversionId, ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversionId' is set
        if (conversionId == null) {
            throw new ApiException("Missing the required parameter 'conversionId' when calling conversionsPost(Async)");
        }

        // verify the required parameter 'apiCoreDtoConversionsConversion' is set
        if (apiCoreDtoConversionsConversion == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoConversionsConversion' when calling conversionsPost(Async)");
        }

        return conversionsPostCall(conversionId, apiCoreDtoConversionsConversion, _callback);

    }

    /**
     * Update conversion specified by id
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreDtoConversionsConversion Updated body of the conversion (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 conversionsPost(Long conversionId, ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsPostWithHttpInfo(conversionId, apiCoreDtoConversionsConversion);
        return localVarResp.getData();
    }

    /**
     * Update conversion specified by id
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreDtoConversionsConversion Updated body of the conversion (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> conversionsPostWithHttpInfo(Long conversionId, ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion) throws ApiException {
        okhttp3.Call localVarCall = conversionsPostValidateBeforeCall(conversionId, apiCoreDtoConversionsConversion, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update conversion specified by id (asynchronously)
     * 
     * @param conversionId Id of the conversion (required)
     * @param apiCoreDtoConversionsConversion Updated body of the conversion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPostAsync(Long conversionId, ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsPostValidateBeforeCall(conversionId, apiCoreDtoConversionsConversion, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversionsPut
     * @param apiCoreDtoConversionsConversion The body of the conversion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPutCall(ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoConversionsConversion;

        // create path and map variables
        String localVarPath = "/conversions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversionsPutValidateBeforeCall(ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoConversionsConversion' is set
        if (apiCoreDtoConversionsConversion == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoConversionsConversion' when calling conversionsPut(Async)");
        }

        return conversionsPutCall(apiCoreDtoConversionsConversion, _callback);

    }

    /**
     * Create a conversion
     * 
     * @param apiCoreDtoConversionsConversion The body of the conversion (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 conversionsPut(ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = conversionsPutWithHttpInfo(apiCoreDtoConversionsConversion);
        return localVarResp.getData();
    }

    /**
     * Create a conversion
     * 
     * @param apiCoreDtoConversionsConversion The body of the conversion (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> conversionsPutWithHttpInfo(ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion) throws ApiException {
        okhttp3.Call localVarCall = conversionsPutValidateBeforeCall(apiCoreDtoConversionsConversion, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a conversion (asynchronously)
     * 
     * @param apiCoreDtoConversionsConversion The body of the conversion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversionsPutAsync(ApiCoreDtoConversionsConversion apiCoreDtoConversionsConversion, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversionsPutValidateBeforeCall(apiCoreDtoConversionsConversion, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
