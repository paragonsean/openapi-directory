/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedSummaryResult;
import org.openapitools.client.model.ApiCoreDtoClickStreamHitListPage;
import org.openapitools.client.model.ApiCoreDtoDatapointsDatapoint;
import org.openapitools.client.model.ApiCoreDtoGroupsGroup;
import org.openapitools.client.model.ApiCoreRequestsGenericTextPatch;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupsCount
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCountCall(String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (write != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("write", write));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsCountValidateBeforeCall(String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write, final ApiCallback _callback) throws ApiException {
        return groupsCountCall(status, tags, textSearch, createdAfter, createdBefore, write, _callback);

    }

    /**
     * Count the groups associated to the user.
     * 
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce groupsCount(String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = groupsCountWithHttpInfo(status, tags, textSearch, createdAfter, createdBefore, write);
        return localVarResp.getData();
    }

    /**
     * Count the groups associated to the user.
     * 
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> groupsCountWithHttpInfo(String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write) throws ApiException {
        okhttp3.Call localVarCall = groupsCountValidateBeforeCall(status, tags, textSearch, createdAfter, createdBefore, write, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count the groups associated to the user. (asynchronously)
     * 
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCountAsync(String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsCountValidateBeforeCall(status, tags, textSearch, createdAfter, createdBefore, write, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsDelete
     * @param id Id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsDelete(Async)");
        }

        return groupsDeleteCall(id, _callback);

    }

    /**
     * Delete group specified by id
     * 
     * @param id Id of the group (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 groupsDelete(Long id) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete group specified by id
     * 
     * @param id Id of the group (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> groupsDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = groupsDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete group specified by id (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteAsync(Long id, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGet
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the group (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetCall(Integer offset, Integer limit, String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (write != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("write", write));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetValidateBeforeCall(Integer offset, Integer limit, String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write, final ApiCallback _callback) throws ApiException {
        return groupsGetCall(offset, limit, status, tags, textSearch, createdAfter, createdBefore, write, _callback);

    }

    /**
     * List of all the groups associated to the user.
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the group (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 groupsGet(Integer offset, Integer limit, String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsGetWithHttpInfo(offset, limit, status, tags, textSearch, createdAfter, createdBefore, write);
        return localVarResp.getData();
    }

    /**
     * List of all the groups associated to the user.
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the group (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> groupsGetWithHttpInfo(Integer offset, Integer limit, String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write) throws ApiException {
        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(offset, limit, status, tags, textSearch, createdAfter, createdBefore, write, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all the groups associated to the user. (asynchronously)
     * 
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param status Status of the group (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param createdAfter Exclude groups created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude groups created after this date (YYYYMMDD) (optional)
     * @param write Write permission (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetAsync(Integer offset, Integer limit, String status, String tags, String textSearch, String createdAfter, String createdBefore, Boolean write, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(offset, limit, status, tags, textSearch, createdAfter, createdBefore, write, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetDatapoints
     * @param id Id of the group (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetDatapointsCall(Long id, Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/datapoints"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (onlyFavorites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFavorites", onlyFavorites));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetDatapointsValidateBeforeCall(Long id, Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetDatapoints(Async)");
        }

        return groupsGetDatapointsCall(id, offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, _callback);

    }

    /**
     * List of all the datapoints associated to the user in this group.
     * 
     * @param id Id of the group (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 groupsGetDatapoints(Long id, Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsGetDatapointsWithHttpInfo(id, offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * List of all the datapoints associated to the user in this group.
     * 
     * @param id Id of the group (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> groupsGetDatapointsWithHttpInfo(Long id, Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = groupsGetDatapointsValidateBeforeCall(id, offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all the datapoints associated to the user in this group. (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param offset Where to start when retrieving elements. Default is 0 if not specified. (optional, default to 0)
     * @param limit Maximum elements to retrieve. Default to 20 if not specified. (optional, default to 20)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetDatapointsAsync(Long id, Integer offset, Integer limit, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String sortBy, String sortDirection, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetDatapointsValidateBeforeCall(id, offset, limit, type, status, tags, textSearch, onlyFavorites, sortBy, sortDirection, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetDatapointsCount
     * @param id Id of the group (required)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetDatapointsCountCall(Long id, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/datapoints/count"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        if (onlyFavorites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFavorites", onlyFavorites));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetDatapointsCountValidateBeforeCall(Long id, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetDatapointsCount(Async)");
        }

        return groupsGetDatapointsCountCall(id, type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, _callback);

    }

    /**
     * Count the datapoints associated to the user in this group.
     * 
     * @param id Id of the group (required)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce groupsGetDatapointsCount(Long id, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = groupsGetDatapointsCountWithHttpInfo(id, type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore);
        return localVarResp.getData();
    }

    /**
     * Count the datapoints associated to the user in this group.
     * 
     * @param id Id of the group (required)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> groupsGetDatapointsCountWithHttpInfo(Long id, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore) throws ApiException {
        okhttp3.Call localVarCall = groupsGetDatapointsCountValidateBeforeCall(id, type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count the datapoints associated to the user in this group. (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param type Type of the datapoint (\&quot;tp\&quot;/\&quot;tl\&quot;) (optional)
     * @param status Status of the datapoint (optional)
     * @param tags A comma separated list of tags you want to filter with. (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param onlyFavorites Filter fields by favourite status (optional)
     * @param createdAfter Exclude datapoints created before this date (YYYYMMDD) (optional)
     * @param createdBefore Exclude datapoints created after this date (YYYYMMDD) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetDatapointsCountAsync(Long id, String type, String status, String tags, String textSearch, Boolean onlyFavorites, String createdAfter, String createdBefore, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetDatapointsCountValidateBeforeCall(id, type, status, tags, textSearch, onlyFavorites, createdAfter, createdBefore, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetDatapointsSummary
     * @param id Filter by this group id (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional, default to 0)
     * @param limit Limit results to this number (optional, default to 20)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetDatapointsSummaryCall(Long id, String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/aggregated/summary"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetDatapointsSummaryValidateBeforeCall(Long id, String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetDatapointsSummary(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling groupsGetDatapointsSummary(Async)");
        }

        return groupsGetDatapointsSummaryCall(id, timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch, _callback);

    }

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     * 
     * @param id Filter by this group id (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional, default to 0)
     * @param limit Limit results to this number (optional, default to 20)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiCoreDtoAggregatedAggregatedSummaryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedSummaryResult groupsGetDatapointsSummary(Long id, String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> localVarResp = groupsGetDatapointsSummaryWithHttpInfo(id, timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     * 
     * @param id Filter by this group id (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional, default to 0)
     * @param limit Limit results to this number (optional, default to 20)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedSummaryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> groupsGetDatapointsSummaryWithHttpInfo(Long id, String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch) throws ApiException {
        okhttp3.Call localVarCall = groupsGetDatapointsSummaryValidateBeforeCall(id, timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data (asynchronously)
     * 
     * @param id Filter by this group id (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional, default to 0)
     * @param limit Limit results to this number (optional, default to 20)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetDatapointsSummaryAsync(Long id, String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback<ApiCoreDtoAggregatedAggregatedSummaryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetDatapointsSummaryValidateBeforeCall(id, timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetHits
     * @param id Id of the group (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetHitsCall(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/hits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeframe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeframe", timeframe));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetHitsValidateBeforeCall(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetHits(Async)");
        }

        // verify the required parameter 'timeframe' is set
        if (timeframe == null) {
            throw new ApiException("Missing the required parameter 'timeframe' when calling groupsGetHits(Async)");
        }

        return groupsGetHitsCall(id, timeframe, limit, offset, fromDay, toDay, filter, _callback);

    }

    /**
     * Retrieve the list of events related to this group.
     * 
     * @param id Id of the group (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiCoreDtoClickStreamHitListPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoClickStreamHitListPage groupsGetHits(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter) throws ApiException {
        ApiResponse<ApiCoreDtoClickStreamHitListPage> localVarResp = groupsGetHitsWithHttpInfo(id, timeframe, limit, offset, fromDay, toDay, filter);
        return localVarResp.getData();
    }

    /**
     * Retrieve the list of events related to this group.
     * 
     * @param id Id of the group (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiResponse&lt;ApiCoreDtoClickStreamHitListPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoClickStreamHitListPage> groupsGetHitsWithHttpInfo(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter) throws ApiException {
        okhttp3.Call localVarCall = groupsGetHitsValidateBeforeCall(id, timeframe, limit, offset, fromDay, toDay, filter, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoClickStreamHitListPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the list of events related to this group. (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param timeframe Timeframe of the request. See list at $timeframeList (required)
     * @param limit Limit results to this number (optional)
     * @param offset Offset where to start from (it&#39;s the lastKey field in the response object) (optional)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetHitsAsync(Long id, String timeframe, Integer limit, String offset, String fromDay, String toDay, String filter, final ApiCallback<ApiCoreDtoClickStreamHitListPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetHitsValidateBeforeCall(id, timeframe, limit, offset, fromDay, toDay, filter, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoClickStreamHitListPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetStatisticsAggregatedSingle
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsAggregatedSingleCall(String timeFrame, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/aggregated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (hourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hourly", hourly));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetStatisticsAggregatedSingleValidateBeforeCall(String timeFrame, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsAggregatedSingle(Async)");
        }

        return groupsGetStatisticsAggregatedSingleCall(timeFrame, fromDay, toDay, hourly, status, tag, favourite, _callback);

    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @return ApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedResult groupsGetStatisticsAggregatedSingle(String timeFrame, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedResult> localVarResp = groupsGetStatisticsAggregatedSingleWithHttpInfo(timeFrame, fromDay, toDay, hourly, status, tag, favourite);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedResult> groupsGetStatisticsAggregatedSingleWithHttpInfo(String timeFrame, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite) throws ApiException {
        okhttp3.Call localVarCall = groupsGetStatisticsAggregatedSingleValidateBeforeCall(timeFrame, fromDay, toDay, hourly, status, tag, favourite, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this customer for a timeframe by groups (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsAggregatedSingleAsync(String timeFrame, String fromDay, String toDay, Boolean hourly, String status, String tag, Boolean favourite, final ApiCallback<ApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetStatisticsAggregatedSingleValidateBeforeCall(timeFrame, fromDay, toDay, hourly, status, tag, favourite, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetStatisticsAllList
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsAllListCall(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/aggregated/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetStatisticsAllListValidateBeforeCall(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsAllList(Async)");
        }

        return groupsGetStatisticsAllListCall(timeFrame, fromDay, toDay, status, tag, favourite, groupBy, _callback);

    }

    /**
     * Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult groupsGetStatisticsAllList(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> localVarResp = groupsGetStatisticsAllListWithHttpInfo(timeFrame, fromDay, toDay, status, tag, favourite, groupBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> groupsGetStatisticsAllListWithHttpInfo(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = groupsGetStatisticsAllListValidateBeforeCall(timeFrame, fromDay, toDay, status, tag, favourite, groupBy, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month) (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group is marked as favourite (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsAllListAsync(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String groupBy, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetStatisticsAllListValidateBeforeCall(timeFrame, fromDay, toDay, status, tag, favourite, groupBy, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetStatisticsList
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsListCall(Long id, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/aggregated/list"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetStatisticsListValidateBeforeCall(Long id, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetStatisticsList(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsList(Async)");
        }

        return groupsGetStatisticsListCall(id, timeFrame, fromDay, toDay, groupBy, _callback);

    }

    /**
     * Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult groupsGetStatisticsList(Long id, String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> localVarResp = groupsGetStatisticsListWithHttpInfo(id, timeFrame, fromDay, toDay, groupBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> groupsGetStatisticsListWithHttpInfo(Long id, String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = groupsGetStatisticsListValidateBeforeCall(id, timeFrame, fromDay, toDay, groupBy, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month) (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsListAsync(Long id, String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetStatisticsListValidateBeforeCall(id, timeFrame, fromDay, toDay, groupBy, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetStatisticsSingle
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsSingleCall(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/aggregated"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (hourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hourly", hourly));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetStatisticsSingleValidateBeforeCall(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetStatisticsSingle(Async)");
        }

        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling groupsGetStatisticsSingle(Async)");
        }

        return groupsGetStatisticsSingleCall(id, timeFrame, fromDay, toDay, hourly, _callback);

    }

    /**
     * Retrieve statistics about this group for a timeframe
     * 
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @return ApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedResult groupsGetStatisticsSingle(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedResult> localVarResp = groupsGetStatisticsSingleWithHttpInfo(id, timeFrame, fromDay, toDay, hourly);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this group for a timeframe
     * 
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedResult> groupsGetStatisticsSingleWithHttpInfo(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly) throws ApiException {
        okhttp3.Call localVarCall = groupsGetStatisticsSingleValidateBeforeCall(id, timeFrame, fromDay, toDay, hourly, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this group for a timeframe (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetStatisticsSingleAsync(Long id, String timeFrame, String fromDay, String toDay, Boolean hourly, final ApiCallback<ApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetStatisticsSingleValidateBeforeCall(id, timeFrame, fromDay, toDay, hourly, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsIdGet
     * @param id The id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsIdGet(Async)");
        }

        return groupsIdGetCall(id, _callback);

    }

    /**
     * Get a group
     * 
     * @param id The id of the group (required)
     * @return ApiCoreDtoGroupsGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoGroupsGroup groupsIdGet(Long id) throws ApiException {
        ApiResponse<ApiCoreDtoGroupsGroup> localVarResp = groupsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a group
     * 
     * @param id The id of the group (required)
     * @return ApiResponse&lt;ApiCoreDtoGroupsGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoGroupsGroup> groupsIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = groupsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoGroupsGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a group (asynchronously)
     * 
     * @param id The id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsIdGetAsync(Long id, final ApiCallback<ApiCoreDtoGroupsGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoGroupsGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsPatchFavourite
     * @param id Id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPatchFavouriteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsPatchFavouriteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsPatchFavourite(Async)");
        }

        return groupsPatchFavouriteCall(id, _callback);

    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a group
     * 
     * @param id Id of the group (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 groupsPatchFavourite(Long id) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsPatchFavouriteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a group
     * 
     * @param id Id of the group (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> groupsPatchFavouriteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = groupsPatchFavouriteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fast switch the \&quot;favourite\&quot; field of a group (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPatchFavouriteAsync(Long id, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsPatchFavouriteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsPatchNotes
     * @param id Id of the group (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPatchNotesCall(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsGenericTextPatch;

        // create path and map variables
        String localVarPath = "/groups/{id}/notes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsPatchNotesValidateBeforeCall(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsPatchNotes(Async)");
        }

        // verify the required parameter 'apiCoreRequestsGenericTextPatch' is set
        if (apiCoreRequestsGenericTextPatch == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsGenericTextPatch' when calling groupsPatchNotes(Async)");
        }

        return groupsPatchNotesCall(id, apiCoreRequestsGenericTextPatch, _callback);

    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a group
     * 
     * @param id Id of the group (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 groupsPatchNotes(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsPatchNotesWithHttpInfo(id, apiCoreRequestsGenericTextPatch);
        return localVarResp.getData();
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a group
     * 
     * @param id Id of the group (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> groupsPatchNotesWithHttpInfo(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch) throws ApiException {
        okhttp3.Call localVarCall = groupsPatchNotesValidateBeforeCall(id, apiCoreRequestsGenericTextPatch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fast patch the \&quot;notes\&quot; field of a group (asynchronously)
     * 
     * @param id Id of the group (required)
     * @param apiCoreRequestsGenericTextPatch Patch requests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPatchNotesAsync(Long id, ApiCoreRequestsGenericTextPatch apiCoreRequestsGenericTextPatch, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsPatchNotesValidateBeforeCall(id, apiCoreRequestsGenericTextPatch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsPost
     * @param id The id of the group (required)
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPostCall(Long id, ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoGroupsGroup;

        // create path and map variables
        String localVarPath = "/groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsPostValidateBeforeCall(Long id, ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsPost(Async)");
        }

        // verify the required parameter 'apiCoreDtoGroupsGroup' is set
        if (apiCoreDtoGroupsGroup == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoGroupsGroup' when calling groupsPost(Async)");
        }

        return groupsPostCall(id, apiCoreDtoGroupsGroup, _callback);

    }

    /**
     * Update a group
     * 
     * @param id The id of the group (required)
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 groupsPost(Long id, ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsPostWithHttpInfo(id, apiCoreDtoGroupsGroup);
        return localVarResp.getData();
    }

    /**
     * Update a group
     * 
     * @param id The id of the group (required)
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> groupsPostWithHttpInfo(Long id, ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup) throws ApiException {
        okhttp3.Call localVarCall = groupsPostValidateBeforeCall(id, apiCoreDtoGroupsGroup, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a group (asynchronously)
     * 
     * @param id The id of the group (required)
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPostAsync(Long id, ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsPostValidateBeforeCall(id, apiCoreDtoGroupsGroup, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsPut
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPutCall(ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoGroupsGroup;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsPutValidateBeforeCall(ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoGroupsGroup' is set
        if (apiCoreDtoGroupsGroup == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoGroupsGroup' when calling groupsPut(Async)");
        }

        return groupsPutCall(apiCoreDtoGroupsGroup, _callback);

    }

    /**
     * Create a group
     * 
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 groupsPut(ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsPutWithHttpInfo(apiCoreDtoGroupsGroup);
        return localVarResp.getData();
    }

    /**
     * Create a group
     * 
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> groupsPutWithHttpInfo(ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup) throws ApiException {
        okhttp3.Call localVarCall = groupsPutValidateBeforeCall(apiCoreDtoGroupsGroup, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a group (asynchronously)
     * 
     * @param apiCoreDtoGroupsGroup The body of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPutAsync(ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsPutValidateBeforeCall(apiCoreDtoGroupsGroup, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsPutDatapoint
     * @param id The id of the group (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPutDatapointCall(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoDatapointsDatapoint;

        // create path and map variables
        String localVarPath = "/groups/{id}/datapoints"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsPutDatapointValidateBeforeCall(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsPutDatapoint(Async)");
        }

        // verify the required parameter 'apiCoreDtoDatapointsDatapoint' is set
        if (apiCoreDtoDatapointsDatapoint == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoDatapointsDatapoint' when calling groupsPutDatapoint(Async)");
        }

        return groupsPutDatapointCall(id, apiCoreDtoDatapointsDatapoint, _callback);

    }

    /**
     * Create a datapoint in this group
     * 
     * @param id The id of the group (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 groupsPutDatapoint(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = groupsPutDatapointWithHttpInfo(id, apiCoreDtoDatapointsDatapoint);
        return localVarResp.getData();
    }

    /**
     * Create a datapoint in this group
     * 
     * @param id The id of the group (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> groupsPutDatapointWithHttpInfo(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint) throws ApiException {
        okhttp3.Call localVarCall = groupsPutDatapointValidateBeforeCall(id, apiCoreDtoDatapointsDatapoint, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a datapoint in this group (asynchronously)
     * 
     * @param id The id of the group (required)
     * @param apiCoreDtoDatapointsDatapoint The body of the datapoint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsPutDatapointAsync(Long id, ApiCoreDtoDatapointsDatapoint apiCoreDtoDatapointsDatapoint, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsPutDatapointValidateBeforeCall(id, apiCoreDtoDatapointsDatapoint, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
