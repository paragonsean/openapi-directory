/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClickStreamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClickStreamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClickStreamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clickStreamGet
     * @param group Filter by this group id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;conversion\&quot;) (optional)
     * @param datapoint Filter by this datapoint id (mutually exclusive with \&quot;group\&quot; and \&quot;conversion\&quot;) (optional)
     * @param conversion Filter by this conversion id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;group\&quot;) (optional)
     * @param pageSize Limit results to this number (optional, default to 50)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickStreamGetCall(Long group, Long datapoint, Long conversion, Integer pageSize, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clickstream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (datapoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datapoint", datapoint));
        }

        if (conversion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conversion", conversion));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clickStreamGetValidateBeforeCall(Long group, Long datapoint, Long conversion, Integer pageSize, String filter, final ApiCallback _callback) throws ApiException {
        return clickStreamGetCall(group, datapoint, conversion, pageSize, filter, _callback);

    }

    /**
     * Retrieve the latest list of events of this account. Limited to last 100.
     * 
     * @param group Filter by this group id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;conversion\&quot;) (optional)
     * @param datapoint Filter by this datapoint id (mutually exclusive with \&quot;group\&quot; and \&quot;conversion\&quot;) (optional)
     * @param conversion Filter by this conversion id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;group\&quot;) (optional)
     * @param pageSize Limit results to this number (optional, default to 50)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit clickStreamGet(Long group, Long datapoint, Long conversion, Integer pageSize, String filter) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit> localVarResp = clickStreamGetWithHttpInfo(group, datapoint, conversion, pageSize, filter);
        return localVarResp.getData();
    }

    /**
     * Retrieve the latest list of events of this account. Limited to last 100.
     * 
     * @param group Filter by this group id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;conversion\&quot;) (optional)
     * @param datapoint Filter by this datapoint id (mutually exclusive with \&quot;group\&quot; and \&quot;conversion\&quot;) (optional)
     * @param conversion Filter by this conversion id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;group\&quot;) (optional)
     * @param pageSize Limit results to this number (optional, default to 50)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit> clickStreamGetWithHttpInfo(Long group, Long datapoint, Long conversion, Integer pageSize, String filter) throws ApiException {
        okhttp3.Call localVarCall = clickStreamGetValidateBeforeCall(group, datapoint, conversion, pageSize, filter, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the latest list of events of this account. Limited to last 100. (asynchronously)
     * 
     * @param group Filter by this group id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;conversion\&quot;) (optional)
     * @param datapoint Filter by this datapoint id (mutually exclusive with \&quot;group\&quot; and \&quot;conversion\&quot;) (optional)
     * @param conversion Filter by this conversion id (mutually exclusive with \&quot;datapoint\&quot; and \&quot;group\&quot;) (optional)
     * @param pageSize Limit results to this number (optional, default to 50)
     * @param filter Filter event type (\&quot;spiders\&quot;/\&quot;uniques\&quot;/\&quot;nonuniques\&quot;/\&quot;conversions\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickStreamGetAsync(Long group, Long datapoint, Long conversion, Integer pageSize, String filter, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit> _callback) throws ApiException {

        okhttp3.Call localVarCall = clickStreamGetValidateBeforeCall(group, datapoint, conversion, pageSize, filter, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
