/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiCoreDtoDatapointsBrowserBaseDestinationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsDatapointRetargetingInfo;
import org.openapitools.client.model.ApiCoreDtoDatapointsMultipleDestinationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsUniqueDestinationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsUrlByLanguageItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsUrlByNationItem;
import org.openapitools.client.model.ApiCoreDtoDatapointsWeightedDestinationItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiCoreDtoDatapointsTrackingLinkSpecifics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:30.746224-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiCoreDtoDatapointsTrackingLinkSpecifics {
  public static final String SERIALIZED_NAME_APPEND_QUERY = "appendQuery";
  @SerializedName(SERIALIZED_NAME_APPEND_QUERY)
  private Boolean appendQuery;

  public static final String SERIALIZED_NAME_BROWSER_DESTINATION_ITEM = "browserDestinationItem";
  @SerializedName(SERIALIZED_NAME_BROWSER_DESTINATION_ITEM)
  private ApiCoreDtoDatapointsBrowserBaseDestinationItem browserDestinationItem;

  /**
   * Gets or Sets destinationMode
   */
  @JsonAdapter(DestinationModeEnum.Adapter.class)
  public enum DestinationModeEnum {
    SIMPLE("Simple"),
    
    RANDOM_DESTINATION("RandomDestination"),
    
    DESTINATION_BY_LANGUAGE("DestinationByLanguage"),
    
    SPILLOVER_DESTINATION("SpilloverDestination"),
    
    DYNAMIC_URL("DynamicUrl"),
    
    BROWSER_DESTINATION("BrowserDestination"),
    
    DESTINATION_BY_NATION("DestinationByNation"),
    
    UNIQUE_DESTINATION("UniqueDestination"),
    
    SEQUENTIAL_DESTINATION("SequentialDestination"),
    
    WEIGHTED_DESTINATION("WeightedDestination");

    private String value;

    DestinationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationModeEnum fromValue(String value) {
      for (DestinationModeEnum b : DestinationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_MODE = "destinationMode";
  @SerializedName(SERIALIZED_NAME_DESTINATION_MODE)
  private DestinationModeEnum destinationMode;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private Integer domainId;

  public static final String SERIALIZED_NAME_ENCODE_URL = "encodeUrl";
  @SerializedName(SERIALIZED_NAME_ENCODE_URL)
  private Boolean encodeUrl;

  public static final String SERIALIZED_NAME_EXPIRATION_CLICKS = "expirationClicks";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_CLICKS)
  private Long expirationClicks;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate;

  public static final String SERIALIZED_NAME_FIRST_URL = "firstUrl";
  @SerializedName(SERIALIZED_NAME_FIRST_URL)
  private String firstUrl;

  public static final String SERIALIZED_NAME_GO_DOMAIN_ID = "goDomainId";
  @SerializedName(SERIALIZED_NAME_GO_DOMAIN_ID)
  private Integer goDomainId;

  public static final String SERIALIZED_NAME_HIDE_URL = "hideUrl";
  @SerializedName(SERIALIZED_NAME_HIDE_URL)
  private Boolean hideUrl;

  public static final String SERIALIZED_NAME_HIDE_URL_TITLE = "hideUrlTitle";
  @SerializedName(SERIALIZED_NAME_HIDE_URL_TITLE)
  private String hideUrlTitle;

  public static final String SERIALIZED_NAME_IS_A_B_TEST = "isABTest";
  @SerializedName(SERIALIZED_NAME_IS_A_B_TEST)
  private Boolean isABTest;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PAUSE_AFTER_CLICKS_EXPIRATION = "pauseAfterClicksExpiration";
  @SerializedName(SERIALIZED_NAME_PAUSE_AFTER_CLICKS_EXPIRATION)
  private Boolean pauseAfterClicksExpiration;

  public static final String SERIALIZED_NAME_PAUSE_AFTER_DATE_EXPIRATION = "pauseAfterDateExpiration";
  @SerializedName(SERIALIZED_NAME_PAUSE_AFTER_DATE_EXPIRATION)
  private Boolean pauseAfterDateExpiration;

  public static final String SERIALIZED_NAME_RANDOM_DESTINATION_ITEMS = "randomDestinationItems";
  @SerializedName(SERIALIZED_NAME_RANDOM_DESTINATION_ITEMS)
  private List<ApiCoreDtoDatapointsMultipleDestinationItem> randomDestinationItems = new ArrayList<>();

  /**
   * Gets or Sets redirectType
   */
  @JsonAdapter(RedirectTypeEnum.Adapter.class)
  public enum RedirectTypeEnum {
    PERMANENT_REDIRECT("PermanentRedirect"),
    
    TEMPORARY_REDIRECT("TemporaryRedirect");

    private String value;

    RedirectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedirectTypeEnum fromValue(String value) {
      for (RedirectTypeEnum b : RedirectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedirectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedirectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedirectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedirectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedirectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDIRECT_TYPE = "redirectType";
  @SerializedName(SERIALIZED_NAME_REDIRECT_TYPE)
  private RedirectTypeEnum redirectType;

  /**
   * Gets or Sets referrerClean
   */
  @JsonAdapter(ReferrerCleanEnum.Adapter.class)
  public enum ReferrerCleanEnum {
    NONE("None"),
    
    CLEAN("Clean"),
    
    MYSELF("Myself");

    private String value;

    ReferrerCleanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReferrerCleanEnum fromValue(String value) {
      for (ReferrerCleanEnum b : ReferrerCleanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReferrerCleanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferrerCleanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReferrerCleanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReferrerCleanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReferrerCleanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFERRER_CLEAN = "referrerClean";
  @SerializedName(SERIALIZED_NAME_REFERRER_CLEAN)
  private ReferrerCleanEnum referrerClean;

  public static final String SERIALIZED_NAME_SCRIPTS = "scripts";
  @SerializedName(SERIALIZED_NAME_SCRIPTS)
  private List<ApiCoreDtoDatapointsDatapointRetargetingInfo> scripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEQUENTIAL_DESTINATION_ITEMS = "sequentialDestinationItems";
  @SerializedName(SERIALIZED_NAME_SEQUENTIAL_DESTINATION_ITEMS)
  private List<ApiCoreDtoDatapointsMultipleDestinationItem> sequentialDestinationItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPILLOVER_DESTINATION_ITEMS = "spilloverDestinationItems";
  @SerializedName(SERIALIZED_NAME_SPILLOVER_DESTINATION_ITEMS)
  private List<ApiCoreDtoDatapointsMultipleDestinationItem> spilloverDestinationItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIQUE_DESTINATION_ITEM = "uniqueDestinationItem";
  @SerializedName(SERIALIZED_NAME_UNIQUE_DESTINATION_ITEM)
  private ApiCoreDtoDatapointsUniqueDestinationItem uniqueDestinationItem;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_AFTER_CLICKS_EXPIRATION = "urlAfterClicksExpiration";
  @SerializedName(SERIALIZED_NAME_URL_AFTER_CLICKS_EXPIRATION)
  private String urlAfterClicksExpiration;

  public static final String SERIALIZED_NAME_URL_AFTER_DATE_EXPIRATION = "urlAfterDateExpiration";
  @SerializedName(SERIALIZED_NAME_URL_AFTER_DATE_EXPIRATION)
  private String urlAfterDateExpiration;

  public static final String SERIALIZED_NAME_URLS_BY_LANGUAGE = "urlsByLanguage";
  @SerializedName(SERIALIZED_NAME_URLS_BY_LANGUAGE)
  private List<ApiCoreDtoDatapointsUrlByLanguageItem> urlsByLanguage = new ArrayList<>();

  public static final String SERIALIZED_NAME_URLS_BY_NATION = "urlsByNation";
  @SerializedName(SERIALIZED_NAME_URLS_BY_NATION)
  private List<ApiCoreDtoDatapointsUrlByNationItem> urlsByNation = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEIGHTED_DESTINATION_ITEMS = "weightedDestinationItems";
  @SerializedName(SERIALIZED_NAME_WEIGHTED_DESTINATION_ITEMS)
  private List<ApiCoreDtoDatapointsWeightedDestinationItem> weightedDestinationItems = new ArrayList<>();

  public ApiCoreDtoDatapointsTrackingLinkSpecifics() {
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics appendQuery(Boolean appendQuery) {
    this.appendQuery = appendQuery;
    return this;
  }

  /**
   * Get appendQuery
   * @return appendQuery
   */
  @javax.annotation.Nullable
  public Boolean getAppendQuery() {
    return appendQuery;
  }

  public void setAppendQuery(Boolean appendQuery) {
    this.appendQuery = appendQuery;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics browserDestinationItem(ApiCoreDtoDatapointsBrowserBaseDestinationItem browserDestinationItem) {
    this.browserDestinationItem = browserDestinationItem;
    return this;
  }

  /**
   * Get browserDestinationItem
   * @return browserDestinationItem
   */
  @javax.annotation.Nullable
  public ApiCoreDtoDatapointsBrowserBaseDestinationItem getBrowserDestinationItem() {
    return browserDestinationItem;
  }

  public void setBrowserDestinationItem(ApiCoreDtoDatapointsBrowserBaseDestinationItem browserDestinationItem) {
    this.browserDestinationItem = browserDestinationItem;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics destinationMode(DestinationModeEnum destinationMode) {
    this.destinationMode = destinationMode;
    return this;
  }

  /**
   * Get destinationMode
   * @return destinationMode
   */
  @javax.annotation.Nullable
  public DestinationModeEnum getDestinationMode() {
    return destinationMode;
  }

  public void setDestinationMode(DestinationModeEnum destinationMode) {
    this.destinationMode = destinationMode;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics domainId(Integer domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Get domainId
   * @return domainId
   */
  @javax.annotation.Nullable
  public Integer getDomainId() {
    return domainId;
  }

  public void setDomainId(Integer domainId) {
    this.domainId = domainId;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics encodeUrl(Boolean encodeUrl) {
    this.encodeUrl = encodeUrl;
    return this;
  }

  /**
   * Get encodeUrl
   * @return encodeUrl
   */
  @javax.annotation.Nullable
  public Boolean getEncodeUrl() {
    return encodeUrl;
  }

  public void setEncodeUrl(Boolean encodeUrl) {
    this.encodeUrl = encodeUrl;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics expirationClicks(Long expirationClicks) {
    this.expirationClicks = expirationClicks;
    return this;
  }

  /**
   * Get expirationClicks
   * @return expirationClicks
   */
  @javax.annotation.Nullable
  public Long getExpirationClicks() {
    return expirationClicks;
  }

  public void setExpirationClicks(Long expirationClicks) {
    this.expirationClicks = expirationClicks;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   *  (A date in \&quot;YmdHis\&quot; format)
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics firstUrl(String firstUrl) {
    this.firstUrl = firstUrl;
    return this;
  }

  /**
   * Get firstUrl
   * @return firstUrl
   */
  @javax.annotation.Nullable
  public String getFirstUrl() {
    return firstUrl;
  }

  public void setFirstUrl(String firstUrl) {
    this.firstUrl = firstUrl;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics goDomainId(Integer goDomainId) {
    this.goDomainId = goDomainId;
    return this;
  }

  /**
   * Get goDomainId
   * @return goDomainId
   */
  @javax.annotation.Nullable
  public Integer getGoDomainId() {
    return goDomainId;
  }

  public void setGoDomainId(Integer goDomainId) {
    this.goDomainId = goDomainId;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics hideUrl(Boolean hideUrl) {
    this.hideUrl = hideUrl;
    return this;
  }

  /**
   * Get hideUrl
   * @return hideUrl
   */
  @javax.annotation.Nullable
  public Boolean getHideUrl() {
    return hideUrl;
  }

  public void setHideUrl(Boolean hideUrl) {
    this.hideUrl = hideUrl;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics hideUrlTitle(String hideUrlTitle) {
    this.hideUrlTitle = hideUrlTitle;
    return this;
  }

  /**
   * Get hideUrlTitle
   * @return hideUrlTitle
   */
  @javax.annotation.Nullable
  public String getHideUrlTitle() {
    return hideUrlTitle;
  }

  public void setHideUrlTitle(String hideUrlTitle) {
    this.hideUrlTitle = hideUrlTitle;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics isABTest(Boolean isABTest) {
    this.isABTest = isABTest;
    return this;
  }

  /**
   * Get isABTest
   * @return isABTest
   */
  @javax.annotation.Nullable
  public Boolean getIsABTest() {
    return isABTest;
  }

  public void setIsABTest(Boolean isABTest) {
    this.isABTest = isABTest;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics pauseAfterClicksExpiration(Boolean pauseAfterClicksExpiration) {
    this.pauseAfterClicksExpiration = pauseAfterClicksExpiration;
    return this;
  }

  /**
   * Get pauseAfterClicksExpiration
   * @return pauseAfterClicksExpiration
   */
  @javax.annotation.Nullable
  public Boolean getPauseAfterClicksExpiration() {
    return pauseAfterClicksExpiration;
  }

  public void setPauseAfterClicksExpiration(Boolean pauseAfterClicksExpiration) {
    this.pauseAfterClicksExpiration = pauseAfterClicksExpiration;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics pauseAfterDateExpiration(Boolean pauseAfterDateExpiration) {
    this.pauseAfterDateExpiration = pauseAfterDateExpiration;
    return this;
  }

  /**
   * Get pauseAfterDateExpiration
   * @return pauseAfterDateExpiration
   */
  @javax.annotation.Nullable
  public Boolean getPauseAfterDateExpiration() {
    return pauseAfterDateExpiration;
  }

  public void setPauseAfterDateExpiration(Boolean pauseAfterDateExpiration) {
    this.pauseAfterDateExpiration = pauseAfterDateExpiration;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics randomDestinationItems(List<ApiCoreDtoDatapointsMultipleDestinationItem> randomDestinationItems) {
    this.randomDestinationItems = randomDestinationItems;
    return this;
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics addRandomDestinationItemsItem(ApiCoreDtoDatapointsMultipleDestinationItem randomDestinationItemsItem) {
    if (this.randomDestinationItems == null) {
      this.randomDestinationItems = new ArrayList<>();
    }
    this.randomDestinationItems.add(randomDestinationItemsItem);
    return this;
  }

  /**
   * Get randomDestinationItems
   * @return randomDestinationItems
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoDatapointsMultipleDestinationItem> getRandomDestinationItems() {
    return randomDestinationItems;
  }

  public void setRandomDestinationItems(List<ApiCoreDtoDatapointsMultipleDestinationItem> randomDestinationItems) {
    this.randomDestinationItems = randomDestinationItems;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics redirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
    return this;
  }

  /**
   * Get redirectType
   * @return redirectType
   */
  @javax.annotation.Nullable
  public RedirectTypeEnum getRedirectType() {
    return redirectType;
  }

  public void setRedirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics referrerClean(ReferrerCleanEnum referrerClean) {
    this.referrerClean = referrerClean;
    return this;
  }

  /**
   * Get referrerClean
   * @return referrerClean
   */
  @javax.annotation.Nullable
  public ReferrerCleanEnum getReferrerClean() {
    return referrerClean;
  }

  public void setReferrerClean(ReferrerCleanEnum referrerClean) {
    this.referrerClean = referrerClean;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics scripts(List<ApiCoreDtoDatapointsDatapointRetargetingInfo> scripts) {
    this.scripts = scripts;
    return this;
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics addScriptsItem(ApiCoreDtoDatapointsDatapointRetargetingInfo scriptsItem) {
    if (this.scripts == null) {
      this.scripts = new ArrayList<>();
    }
    this.scripts.add(scriptsItem);
    return this;
  }

  /**
   * Get scripts
   * @return scripts
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoDatapointsDatapointRetargetingInfo> getScripts() {
    return scripts;
  }

  public void setScripts(List<ApiCoreDtoDatapointsDatapointRetargetingInfo> scripts) {
    this.scripts = scripts;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics sequentialDestinationItems(List<ApiCoreDtoDatapointsMultipleDestinationItem> sequentialDestinationItems) {
    this.sequentialDestinationItems = sequentialDestinationItems;
    return this;
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics addSequentialDestinationItemsItem(ApiCoreDtoDatapointsMultipleDestinationItem sequentialDestinationItemsItem) {
    if (this.sequentialDestinationItems == null) {
      this.sequentialDestinationItems = new ArrayList<>();
    }
    this.sequentialDestinationItems.add(sequentialDestinationItemsItem);
    return this;
  }

  /**
   * Get sequentialDestinationItems
   * @return sequentialDestinationItems
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoDatapointsMultipleDestinationItem> getSequentialDestinationItems() {
    return sequentialDestinationItems;
  }

  public void setSequentialDestinationItems(List<ApiCoreDtoDatapointsMultipleDestinationItem> sequentialDestinationItems) {
    this.sequentialDestinationItems = sequentialDestinationItems;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics spilloverDestinationItems(List<ApiCoreDtoDatapointsMultipleDestinationItem> spilloverDestinationItems) {
    this.spilloverDestinationItems = spilloverDestinationItems;
    return this;
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics addSpilloverDestinationItemsItem(ApiCoreDtoDatapointsMultipleDestinationItem spilloverDestinationItemsItem) {
    if (this.spilloverDestinationItems == null) {
      this.spilloverDestinationItems = new ArrayList<>();
    }
    this.spilloverDestinationItems.add(spilloverDestinationItemsItem);
    return this;
  }

  /**
   * Get spilloverDestinationItems
   * @return spilloverDestinationItems
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoDatapointsMultipleDestinationItem> getSpilloverDestinationItems() {
    return spilloverDestinationItems;
  }

  public void setSpilloverDestinationItems(List<ApiCoreDtoDatapointsMultipleDestinationItem> spilloverDestinationItems) {
    this.spilloverDestinationItems = spilloverDestinationItems;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics uniqueDestinationItem(ApiCoreDtoDatapointsUniqueDestinationItem uniqueDestinationItem) {
    this.uniqueDestinationItem = uniqueDestinationItem;
    return this;
  }

  /**
   * Get uniqueDestinationItem
   * @return uniqueDestinationItem
   */
  @javax.annotation.Nullable
  public ApiCoreDtoDatapointsUniqueDestinationItem getUniqueDestinationItem() {
    return uniqueDestinationItem;
  }

  public void setUniqueDestinationItem(ApiCoreDtoDatapointsUniqueDestinationItem uniqueDestinationItem) {
    this.uniqueDestinationItem = uniqueDestinationItem;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics urlAfterClicksExpiration(String urlAfterClicksExpiration) {
    this.urlAfterClicksExpiration = urlAfterClicksExpiration;
    return this;
  }

  /**
   * Get urlAfterClicksExpiration
   * @return urlAfterClicksExpiration
   */
  @javax.annotation.Nullable
  public String getUrlAfterClicksExpiration() {
    return urlAfterClicksExpiration;
  }

  public void setUrlAfterClicksExpiration(String urlAfterClicksExpiration) {
    this.urlAfterClicksExpiration = urlAfterClicksExpiration;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics urlAfterDateExpiration(String urlAfterDateExpiration) {
    this.urlAfterDateExpiration = urlAfterDateExpiration;
    return this;
  }

  /**
   * Get urlAfterDateExpiration
   * @return urlAfterDateExpiration
   */
  @javax.annotation.Nullable
  public String getUrlAfterDateExpiration() {
    return urlAfterDateExpiration;
  }

  public void setUrlAfterDateExpiration(String urlAfterDateExpiration) {
    this.urlAfterDateExpiration = urlAfterDateExpiration;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics urlsByLanguage(List<ApiCoreDtoDatapointsUrlByLanguageItem> urlsByLanguage) {
    this.urlsByLanguage = urlsByLanguage;
    return this;
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics addUrlsByLanguageItem(ApiCoreDtoDatapointsUrlByLanguageItem urlsByLanguageItem) {
    if (this.urlsByLanguage == null) {
      this.urlsByLanguage = new ArrayList<>();
    }
    this.urlsByLanguage.add(urlsByLanguageItem);
    return this;
  }

  /**
   * Get urlsByLanguage
   * @return urlsByLanguage
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoDatapointsUrlByLanguageItem> getUrlsByLanguage() {
    return urlsByLanguage;
  }

  public void setUrlsByLanguage(List<ApiCoreDtoDatapointsUrlByLanguageItem> urlsByLanguage) {
    this.urlsByLanguage = urlsByLanguage;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics urlsByNation(List<ApiCoreDtoDatapointsUrlByNationItem> urlsByNation) {
    this.urlsByNation = urlsByNation;
    return this;
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics addUrlsByNationItem(ApiCoreDtoDatapointsUrlByNationItem urlsByNationItem) {
    if (this.urlsByNation == null) {
      this.urlsByNation = new ArrayList<>();
    }
    this.urlsByNation.add(urlsByNationItem);
    return this;
  }

  /**
   * Get urlsByNation
   * @return urlsByNation
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoDatapointsUrlByNationItem> getUrlsByNation() {
    return urlsByNation;
  }

  public void setUrlsByNation(List<ApiCoreDtoDatapointsUrlByNationItem> urlsByNation) {
    this.urlsByNation = urlsByNation;
  }


  public ApiCoreDtoDatapointsTrackingLinkSpecifics weightedDestinationItems(List<ApiCoreDtoDatapointsWeightedDestinationItem> weightedDestinationItems) {
    this.weightedDestinationItems = weightedDestinationItems;
    return this;
  }

  public ApiCoreDtoDatapointsTrackingLinkSpecifics addWeightedDestinationItemsItem(ApiCoreDtoDatapointsWeightedDestinationItem weightedDestinationItemsItem) {
    if (this.weightedDestinationItems == null) {
      this.weightedDestinationItems = new ArrayList<>();
    }
    this.weightedDestinationItems.add(weightedDestinationItemsItem);
    return this;
  }

  /**
   * Get weightedDestinationItems
   * @return weightedDestinationItems
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoDatapointsWeightedDestinationItem> getWeightedDestinationItems() {
    return weightedDestinationItems;
  }

  public void setWeightedDestinationItems(List<ApiCoreDtoDatapointsWeightedDestinationItem> weightedDestinationItems) {
    this.weightedDestinationItems = weightedDestinationItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiCoreDtoDatapointsTrackingLinkSpecifics apiCoreDtoDatapointsTrackingLinkSpecifics = (ApiCoreDtoDatapointsTrackingLinkSpecifics) o;
    return Objects.equals(this.appendQuery, apiCoreDtoDatapointsTrackingLinkSpecifics.appendQuery) &&
        Objects.equals(this.browserDestinationItem, apiCoreDtoDatapointsTrackingLinkSpecifics.browserDestinationItem) &&
        Objects.equals(this.destinationMode, apiCoreDtoDatapointsTrackingLinkSpecifics.destinationMode) &&
        Objects.equals(this.domainId, apiCoreDtoDatapointsTrackingLinkSpecifics.domainId) &&
        Objects.equals(this.encodeUrl, apiCoreDtoDatapointsTrackingLinkSpecifics.encodeUrl) &&
        Objects.equals(this.expirationClicks, apiCoreDtoDatapointsTrackingLinkSpecifics.expirationClicks) &&
        Objects.equals(this.expirationDate, apiCoreDtoDatapointsTrackingLinkSpecifics.expirationDate) &&
        Objects.equals(this.firstUrl, apiCoreDtoDatapointsTrackingLinkSpecifics.firstUrl) &&
        Objects.equals(this.goDomainId, apiCoreDtoDatapointsTrackingLinkSpecifics.goDomainId) &&
        Objects.equals(this.hideUrl, apiCoreDtoDatapointsTrackingLinkSpecifics.hideUrl) &&
        Objects.equals(this.hideUrlTitle, apiCoreDtoDatapointsTrackingLinkSpecifics.hideUrlTitle) &&
        Objects.equals(this.isABTest, apiCoreDtoDatapointsTrackingLinkSpecifics.isABTest) &&
        Objects.equals(this.password, apiCoreDtoDatapointsTrackingLinkSpecifics.password) &&
        Objects.equals(this.pauseAfterClicksExpiration, apiCoreDtoDatapointsTrackingLinkSpecifics.pauseAfterClicksExpiration) &&
        Objects.equals(this.pauseAfterDateExpiration, apiCoreDtoDatapointsTrackingLinkSpecifics.pauseAfterDateExpiration) &&
        Objects.equals(this.randomDestinationItems, apiCoreDtoDatapointsTrackingLinkSpecifics.randomDestinationItems) &&
        Objects.equals(this.redirectType, apiCoreDtoDatapointsTrackingLinkSpecifics.redirectType) &&
        Objects.equals(this.referrerClean, apiCoreDtoDatapointsTrackingLinkSpecifics.referrerClean) &&
        Objects.equals(this.scripts, apiCoreDtoDatapointsTrackingLinkSpecifics.scripts) &&
        Objects.equals(this.sequentialDestinationItems, apiCoreDtoDatapointsTrackingLinkSpecifics.sequentialDestinationItems) &&
        Objects.equals(this.spilloverDestinationItems, apiCoreDtoDatapointsTrackingLinkSpecifics.spilloverDestinationItems) &&
        Objects.equals(this.uniqueDestinationItem, apiCoreDtoDatapointsTrackingLinkSpecifics.uniqueDestinationItem) &&
        Objects.equals(this.url, apiCoreDtoDatapointsTrackingLinkSpecifics.url) &&
        Objects.equals(this.urlAfterClicksExpiration, apiCoreDtoDatapointsTrackingLinkSpecifics.urlAfterClicksExpiration) &&
        Objects.equals(this.urlAfterDateExpiration, apiCoreDtoDatapointsTrackingLinkSpecifics.urlAfterDateExpiration) &&
        Objects.equals(this.urlsByLanguage, apiCoreDtoDatapointsTrackingLinkSpecifics.urlsByLanguage) &&
        Objects.equals(this.urlsByNation, apiCoreDtoDatapointsTrackingLinkSpecifics.urlsByNation) &&
        Objects.equals(this.weightedDestinationItems, apiCoreDtoDatapointsTrackingLinkSpecifics.weightedDestinationItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appendQuery, browserDestinationItem, destinationMode, domainId, encodeUrl, expirationClicks, expirationDate, firstUrl, goDomainId, hideUrl, hideUrlTitle, isABTest, password, pauseAfterClicksExpiration, pauseAfterDateExpiration, randomDestinationItems, redirectType, referrerClean, scripts, sequentialDestinationItems, spilloverDestinationItems, uniqueDestinationItem, url, urlAfterClicksExpiration, urlAfterDateExpiration, urlsByLanguage, urlsByNation, weightedDestinationItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiCoreDtoDatapointsTrackingLinkSpecifics {\n");
    sb.append("    appendQuery: ").append(toIndentedString(appendQuery)).append("\n");
    sb.append("    browserDestinationItem: ").append(toIndentedString(browserDestinationItem)).append("\n");
    sb.append("    destinationMode: ").append(toIndentedString(destinationMode)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    encodeUrl: ").append(toIndentedString(encodeUrl)).append("\n");
    sb.append("    expirationClicks: ").append(toIndentedString(expirationClicks)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    firstUrl: ").append(toIndentedString(firstUrl)).append("\n");
    sb.append("    goDomainId: ").append(toIndentedString(goDomainId)).append("\n");
    sb.append("    hideUrl: ").append(toIndentedString(hideUrl)).append("\n");
    sb.append("    hideUrlTitle: ").append(toIndentedString(hideUrlTitle)).append("\n");
    sb.append("    isABTest: ").append(toIndentedString(isABTest)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pauseAfterClicksExpiration: ").append(toIndentedString(pauseAfterClicksExpiration)).append("\n");
    sb.append("    pauseAfterDateExpiration: ").append(toIndentedString(pauseAfterDateExpiration)).append("\n");
    sb.append("    randomDestinationItems: ").append(toIndentedString(randomDestinationItems)).append("\n");
    sb.append("    redirectType: ").append(toIndentedString(redirectType)).append("\n");
    sb.append("    referrerClean: ").append(toIndentedString(referrerClean)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("    sequentialDestinationItems: ").append(toIndentedString(sequentialDestinationItems)).append("\n");
    sb.append("    spilloverDestinationItems: ").append(toIndentedString(spilloverDestinationItems)).append("\n");
    sb.append("    uniqueDestinationItem: ").append(toIndentedString(uniqueDestinationItem)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlAfterClicksExpiration: ").append(toIndentedString(urlAfterClicksExpiration)).append("\n");
    sb.append("    urlAfterDateExpiration: ").append(toIndentedString(urlAfterDateExpiration)).append("\n");
    sb.append("    urlsByLanguage: ").append(toIndentedString(urlsByLanguage)).append("\n");
    sb.append("    urlsByNation: ").append(toIndentedString(urlsByNation)).append("\n");
    sb.append("    weightedDestinationItems: ").append(toIndentedString(weightedDestinationItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appendQuery");
    openapiFields.add("browserDestinationItem");
    openapiFields.add("destinationMode");
    openapiFields.add("domainId");
    openapiFields.add("encodeUrl");
    openapiFields.add("expirationClicks");
    openapiFields.add("expirationDate");
    openapiFields.add("firstUrl");
    openapiFields.add("goDomainId");
    openapiFields.add("hideUrl");
    openapiFields.add("hideUrlTitle");
    openapiFields.add("isABTest");
    openapiFields.add("password");
    openapiFields.add("pauseAfterClicksExpiration");
    openapiFields.add("pauseAfterDateExpiration");
    openapiFields.add("randomDestinationItems");
    openapiFields.add("redirectType");
    openapiFields.add("referrerClean");
    openapiFields.add("scripts");
    openapiFields.add("sequentialDestinationItems");
    openapiFields.add("spilloverDestinationItems");
    openapiFields.add("uniqueDestinationItem");
    openapiFields.add("url");
    openapiFields.add("urlAfterClicksExpiration");
    openapiFields.add("urlAfterDateExpiration");
    openapiFields.add("urlsByLanguage");
    openapiFields.add("urlsByNation");
    openapiFields.add("weightedDestinationItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiCoreDtoDatapointsTrackingLinkSpecifics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiCoreDtoDatapointsTrackingLinkSpecifics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiCoreDtoDatapointsTrackingLinkSpecifics is not found in the empty JSON string", ApiCoreDtoDatapointsTrackingLinkSpecifics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiCoreDtoDatapointsTrackingLinkSpecifics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiCoreDtoDatapointsTrackingLinkSpecifics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `browserDestinationItem`
      if (jsonObj.get("browserDestinationItem") != null && !jsonObj.get("browserDestinationItem").isJsonNull()) {
        ApiCoreDtoDatapointsBrowserBaseDestinationItem.validateJsonElement(jsonObj.get("browserDestinationItem"));
      }
      if ((jsonObj.get("destinationMode") != null && !jsonObj.get("destinationMode").isJsonNull()) && !jsonObj.get("destinationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationMode").toString()));
      }
      // validate the optional field `destinationMode`
      if (jsonObj.get("destinationMode") != null && !jsonObj.get("destinationMode").isJsonNull()) {
        DestinationModeEnum.validateJsonElement(jsonObj.get("destinationMode"));
      }
      if ((jsonObj.get("expirationDate") != null && !jsonObj.get("expirationDate").isJsonNull()) && !jsonObj.get("expirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationDate").toString()));
      }
      if ((jsonObj.get("firstUrl") != null && !jsonObj.get("firstUrl").isJsonNull()) && !jsonObj.get("firstUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstUrl").toString()));
      }
      if ((jsonObj.get("hideUrlTitle") != null && !jsonObj.get("hideUrlTitle").isJsonNull()) && !jsonObj.get("hideUrlTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hideUrlTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hideUrlTitle").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (jsonObj.get("randomDestinationItems") != null && !jsonObj.get("randomDestinationItems").isJsonNull()) {
        JsonArray jsonArrayrandomDestinationItems = jsonObj.getAsJsonArray("randomDestinationItems");
        if (jsonArrayrandomDestinationItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("randomDestinationItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `randomDestinationItems` to be an array in the JSON string but got `%s`", jsonObj.get("randomDestinationItems").toString()));
          }

          // validate the optional field `randomDestinationItems` (array)
          for (int i = 0; i < jsonArrayrandomDestinationItems.size(); i++) {
            ApiCoreDtoDatapointsMultipleDestinationItem.validateJsonElement(jsonArrayrandomDestinationItems.get(i));
          };
        }
      }
      if ((jsonObj.get("redirectType") != null && !jsonObj.get("redirectType").isJsonNull()) && !jsonObj.get("redirectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectType").toString()));
      }
      // validate the optional field `redirectType`
      if (jsonObj.get("redirectType") != null && !jsonObj.get("redirectType").isJsonNull()) {
        RedirectTypeEnum.validateJsonElement(jsonObj.get("redirectType"));
      }
      if ((jsonObj.get("referrerClean") != null && !jsonObj.get("referrerClean").isJsonNull()) && !jsonObj.get("referrerClean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrerClean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrerClean").toString()));
      }
      // validate the optional field `referrerClean`
      if (jsonObj.get("referrerClean") != null && !jsonObj.get("referrerClean").isJsonNull()) {
        ReferrerCleanEnum.validateJsonElement(jsonObj.get("referrerClean"));
      }
      if (jsonObj.get("scripts") != null && !jsonObj.get("scripts").isJsonNull()) {
        JsonArray jsonArrayscripts = jsonObj.getAsJsonArray("scripts");
        if (jsonArrayscripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scripts` to be an array in the JSON string but got `%s`", jsonObj.get("scripts").toString()));
          }

          // validate the optional field `scripts` (array)
          for (int i = 0; i < jsonArrayscripts.size(); i++) {
            ApiCoreDtoDatapointsDatapointRetargetingInfo.validateJsonElement(jsonArrayscripts.get(i));
          };
        }
      }
      if (jsonObj.get("sequentialDestinationItems") != null && !jsonObj.get("sequentialDestinationItems").isJsonNull()) {
        JsonArray jsonArraysequentialDestinationItems = jsonObj.getAsJsonArray("sequentialDestinationItems");
        if (jsonArraysequentialDestinationItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sequentialDestinationItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sequentialDestinationItems` to be an array in the JSON string but got `%s`", jsonObj.get("sequentialDestinationItems").toString()));
          }

          // validate the optional field `sequentialDestinationItems` (array)
          for (int i = 0; i < jsonArraysequentialDestinationItems.size(); i++) {
            ApiCoreDtoDatapointsMultipleDestinationItem.validateJsonElement(jsonArraysequentialDestinationItems.get(i));
          };
        }
      }
      if (jsonObj.get("spilloverDestinationItems") != null && !jsonObj.get("spilloverDestinationItems").isJsonNull()) {
        JsonArray jsonArrayspilloverDestinationItems = jsonObj.getAsJsonArray("spilloverDestinationItems");
        if (jsonArrayspilloverDestinationItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spilloverDestinationItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spilloverDestinationItems` to be an array in the JSON string but got `%s`", jsonObj.get("spilloverDestinationItems").toString()));
          }

          // validate the optional field `spilloverDestinationItems` (array)
          for (int i = 0; i < jsonArrayspilloverDestinationItems.size(); i++) {
            ApiCoreDtoDatapointsMultipleDestinationItem.validateJsonElement(jsonArrayspilloverDestinationItems.get(i));
          };
        }
      }
      // validate the optional field `uniqueDestinationItem`
      if (jsonObj.get("uniqueDestinationItem") != null && !jsonObj.get("uniqueDestinationItem").isJsonNull()) {
        ApiCoreDtoDatapointsUniqueDestinationItem.validateJsonElement(jsonObj.get("uniqueDestinationItem"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("urlAfterClicksExpiration") != null && !jsonObj.get("urlAfterClicksExpiration").isJsonNull()) && !jsonObj.get("urlAfterClicksExpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlAfterClicksExpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlAfterClicksExpiration").toString()));
      }
      if ((jsonObj.get("urlAfterDateExpiration") != null && !jsonObj.get("urlAfterDateExpiration").isJsonNull()) && !jsonObj.get("urlAfterDateExpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlAfterDateExpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlAfterDateExpiration").toString()));
      }
      if (jsonObj.get("urlsByLanguage") != null && !jsonObj.get("urlsByLanguage").isJsonNull()) {
        JsonArray jsonArrayurlsByLanguage = jsonObj.getAsJsonArray("urlsByLanguage");
        if (jsonArrayurlsByLanguage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urlsByLanguage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urlsByLanguage` to be an array in the JSON string but got `%s`", jsonObj.get("urlsByLanguage").toString()));
          }

          // validate the optional field `urlsByLanguage` (array)
          for (int i = 0; i < jsonArrayurlsByLanguage.size(); i++) {
            ApiCoreDtoDatapointsUrlByLanguageItem.validateJsonElement(jsonArrayurlsByLanguage.get(i));
          };
        }
      }
      if (jsonObj.get("urlsByNation") != null && !jsonObj.get("urlsByNation").isJsonNull()) {
        JsonArray jsonArrayurlsByNation = jsonObj.getAsJsonArray("urlsByNation");
        if (jsonArrayurlsByNation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urlsByNation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urlsByNation` to be an array in the JSON string but got `%s`", jsonObj.get("urlsByNation").toString()));
          }

          // validate the optional field `urlsByNation` (array)
          for (int i = 0; i < jsonArrayurlsByNation.size(); i++) {
            ApiCoreDtoDatapointsUrlByNationItem.validateJsonElement(jsonArrayurlsByNation.get(i));
          };
        }
      }
      if (jsonObj.get("weightedDestinationItems") != null && !jsonObj.get("weightedDestinationItems").isJsonNull()) {
        JsonArray jsonArrayweightedDestinationItems = jsonObj.getAsJsonArray("weightedDestinationItems");
        if (jsonArrayweightedDestinationItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("weightedDestinationItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `weightedDestinationItems` to be an array in the JSON string but got `%s`", jsonObj.get("weightedDestinationItems").toString()));
          }

          // validate the optional field `weightedDestinationItems` (array)
          for (int i = 0; i < jsonArrayweightedDestinationItems.size(); i++) {
            ApiCoreDtoDatapointsWeightedDestinationItem.validateJsonElement(jsonArrayweightedDestinationItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiCoreDtoDatapointsTrackingLinkSpecifics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiCoreDtoDatapointsTrackingLinkSpecifics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiCoreDtoDatapointsTrackingLinkSpecifics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiCoreDtoDatapointsTrackingLinkSpecifics.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiCoreDtoDatapointsTrackingLinkSpecifics>() {
           @Override
           public void write(JsonWriter out, ApiCoreDtoDatapointsTrackingLinkSpecifics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiCoreDtoDatapointsTrackingLinkSpecifics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiCoreDtoDatapointsTrackingLinkSpecifics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiCoreDtoDatapointsTrackingLinkSpecifics
   * @throws IOException if the JSON string is invalid with respect to ApiCoreDtoDatapointsTrackingLinkSpecifics
   */
  public static ApiCoreDtoDatapointsTrackingLinkSpecifics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiCoreDtoDatapointsTrackingLinkSpecifics.class);
  }

  /**
   * Convert an instance of ApiCoreDtoDatapointsTrackingLinkSpecifics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

