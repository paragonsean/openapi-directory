/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedResult;
import org.openapitools.client.model.ApiCoreDtoAggregatedAggregatedSummaryResult;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AggregatedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AggregatedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AggregatedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aggregatedGetConversionsSummary
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetConversionsSummaryCall(String timeFrame, String fromDay, String toDay, String status, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregated/summary/conversions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregatedGetConversionsSummaryValidateBeforeCall(String timeFrame, String fromDay, String toDay, String status, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling aggregatedGetConversionsSummary(Async)");
        }

        return aggregatedGetConversionsSummaryCall(timeFrame, fromDay, toDay, status, sortBy, sortDirection, offset, limit, textSearch, _callback);

    }

    /**
     * Retrieve statistics about a subset of conversions for a timeframe with conversions data
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiCoreDtoAggregatedAggregatedSummaryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedSummaryResult aggregatedGetConversionsSummary(String timeFrame, String fromDay, String toDay, String status, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> localVarResp = aggregatedGetConversionsSummaryWithHttpInfo(timeFrame, fromDay, toDay, status, sortBy, sortDirection, offset, limit, textSearch);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about a subset of conversions for a timeframe with conversions data
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedSummaryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> aggregatedGetConversionsSummaryWithHttpInfo(String timeFrame, String fromDay, String toDay, String status, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch) throws ApiException {
        okhttp3.Call localVarCall = aggregatedGetConversionsSummaryValidateBeforeCall(timeFrame, fromDay, toDay, status, sortBy, sortDirection, offset, limit, textSearch, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about a subset of conversions for a timeframe with conversions data (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of conversion (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetConversionsSummaryAsync(String timeFrame, String fromDay, String toDay, String status, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback<ApiCoreDtoAggregatedAggregatedSummaryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregatedGetConversionsSummaryValidateBeforeCall(timeFrame, fromDay, toDay, status, sortBy, sortDirection, offset, limit, textSearch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aggregatedGetDatapointsSummary
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param groupId Filter by this group id (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetDatapointsSummaryCall(String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, Long groupId, String textSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregated/summary/datapoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregatedGetDatapointsSummaryValidateBeforeCall(String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, Long groupId, String textSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling aggregatedGetDatapointsSummary(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling aggregatedGetDatapointsSummary(Async)");
        }

        return aggregatedGetDatapointsSummaryCall(timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, groupId, textSearch, _callback);

    }

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param groupId Filter by this group id (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiCoreDtoAggregatedAggregatedSummaryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedSummaryResult aggregatedGetDatapointsSummary(String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, Long groupId, String textSearch) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> localVarResp = aggregatedGetDatapointsSummaryWithHttpInfo(timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, groupId, textSearch);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param groupId Filter by this group id (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedSummaryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> aggregatedGetDatapointsSummaryWithHttpInfo(String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, Long groupId, String textSearch) throws ApiException {
        okhttp3.Call localVarCall = aggregatedGetDatapointsSummaryValidateBeforeCall(timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, groupId, textSearch, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param type Type of datapoint (\&quot;tl\&quot;/\&quot;tp\&quot;) (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of datapoint (\&quot;deleted\&quot;/\&quot;active\&quot;/\&quot;paused\&quot;/\&quot;spam\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the datapoint marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param groupId Filter by this group id (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetDatapointsSummaryAsync(String timeFrame, String type, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, Long groupId, String textSearch, final ApiCallback<ApiCoreDtoAggregatedAggregatedSummaryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregatedGetDatapointsSummaryValidateBeforeCall(timeFrame, type, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, groupId, textSearch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aggregatedGetGroupsSummary
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetGroupsSummaryCall(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregated/summary/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregatedGetGroupsSummaryValidateBeforeCall(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling aggregatedGetGroupsSummary(Async)");
        }

        return aggregatedGetGroupsSummaryCall(timeFrame, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch, _callback);

    }

    /**
     * Retrieve statistics about a subset of groups for a timeframe with groups data
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiCoreDtoAggregatedAggregatedSummaryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedSummaryResult aggregatedGetGroupsSummary(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> localVarResp = aggregatedGetGroupsSummaryWithHttpInfo(timeFrame, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about a subset of groups for a timeframe with groups data
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedSummaryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedSummaryResult> aggregatedGetGroupsSummaryWithHttpInfo(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch) throws ApiException {
        okhttp3.Call localVarCall = aggregatedGetGroupsSummaryValidateBeforeCall(timeFrame, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about a subset of groups for a timeframe with groups data (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param status Status of group (\&quot;deleted\&quot;/\&quot;active\&quot;) (optional)
     * @param tag A comma separated list of tags you want to filter with. (optional)
     * @param favourite Is the group marked as favourite (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetGroupsSummaryAsync(String timeFrame, String fromDay, String toDay, String status, String tag, Boolean favourite, String sortBy, String sortDirection, Integer offset, Integer limit, String textSearch, final ApiCallback<ApiCoreDtoAggregatedAggregatedSummaryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregatedGetGroupsSummaryValidateBeforeCall(timeFrame, fromDay, toDay, status, tag, favourite, sortBy, sortDirection, offset, limit, textSearch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedSummaryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aggregatedGetStatisticsList
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetStatisticsListCall(String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregated/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregatedGetStatisticsListValidateBeforeCall(String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling aggregatedGetStatisticsList(Async)");
        }

        return aggregatedGetStatisticsListCall(timeFrame, fromDay, toDay, groupBy, _callback);

    }

    /**
     * Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult aggregatedGetStatisticsList(String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> localVarResp = aggregatedGetStatisticsListWithHttpInfo(timeFrame, fromDay, toDay, groupBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> aggregatedGetStatisticsListWithHttpInfo(String timeFrame, String fromDay, String toDay, String groupBy) throws ApiException {
        okhttp3.Call localVarCall = aggregatedGetStatisticsListValidateBeforeCall(timeFrame, fromDay, toDay, groupBy, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month) (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param groupBy The temporal entity you want to group by (\&quot;week\&quot;/\&quot;month\&quot;). If unspecified is \&quot;day\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetStatisticsListAsync(String timeFrame, String fromDay, String toDay, String groupBy, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregatedGetStatisticsListValidateBeforeCall(timeFrame, fromDay, toDay, groupBy, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for aggregatedGetStatisticsSingle
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param onlyFavorites  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetStatisticsSingleCall(String timeFrame, String fromDay, String toDay, Boolean hourly, String onlyFavorites, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aggregated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeFrame != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeFrame", timeFrame));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (hourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hourly", hourly));
        }

        if (onlyFavorites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFavorites", onlyFavorites));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aggregatedGetStatisticsSingleValidateBeforeCall(String timeFrame, String fromDay, String toDay, Boolean hourly, String onlyFavorites, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeFrame' is set
        if (timeFrame == null) {
            throw new ApiException("Missing the required parameter 'timeFrame' when calling aggregatedGetStatisticsSingle(Async)");
        }

        return aggregatedGetStatisticsSingleCall(timeFrame, fromDay, toDay, hourly, onlyFavorites, _callback);

    }

    /**
     * Retrieve statistics about this customer for a timeframe
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param onlyFavorites  (optional)
     * @return ApiCoreDtoAggregatedAggregatedResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAggregatedAggregatedResult aggregatedGetStatisticsSingle(String timeFrame, String fromDay, String toDay, Boolean hourly, String onlyFavorites) throws ApiException {
        ApiResponse<ApiCoreDtoAggregatedAggregatedResult> localVarResp = aggregatedGetStatisticsSingleWithHttpInfo(timeFrame, fromDay, toDay, hourly, onlyFavorites);
        return localVarResp.getData();
    }

    /**
     * Retrieve statistics about this customer for a timeframe
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param onlyFavorites  (optional)
     * @return ApiResponse&lt;ApiCoreDtoAggregatedAggregatedResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAggregatedAggregatedResult> aggregatedGetStatisticsSingleWithHttpInfo(String timeFrame, String fromDay, String toDay, Boolean hourly, String onlyFavorites) throws ApiException {
        okhttp3.Call localVarCall = aggregatedGetStatisticsSingleValidateBeforeCall(timeFrame, fromDay, toDay, hourly, onlyFavorites, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve statistics about this customer for a timeframe (asynchronously)
     * 
     * @param timeFrame Timeframe of the request. See list at $timeframeList (required)
     * @param fromDay If using a \&quot;custom\&quot; timeFrame you can specify the starting day (YYYYMMDD) (optional)
     * @param toDay If using a \&quot;custom\&quot; timeFrame you can specify the ending day (YYYYMMDD) (optional)
     * @param hourly If using \&quot;yesterday\&quot; or \&quot;today\&quot; timeframe you can ask for the hourly detail (optional)
     * @param onlyFavorites  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aggregatedGetStatisticsSingleAsync(String timeFrame, String fromDay, String toDay, Boolean hourly, String onlyFavorites, final ApiCallback<ApiCoreDtoAggregatedAggregatedResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = aggregatedGetStatisticsSingleValidateBeforeCall(timeFrame, fromDay, toDay, hourly, onlyFavorites, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAggregatedAggregatedResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
