/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiCoreDtoAccountingUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:30.746224-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiCoreDtoAccountingUser {
  public static final String SERIALIZED_NAME_BO_GO_VAL = "boGoVal";
  @SerializedName(SERIALIZED_NAME_BO_GO_VAL)
  private String boGoVal;

  public static final String SERIALIZED_NAME_BONUS_CLICKS = "bonusClicks";
  @SerializedName(SERIALIZED_NAME_BONUS_CLICKS)
  private Long bonusClicks;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPANY_ROLE = "companyRole";
  @SerializedName(SERIALIZED_NAME_COMPANY_ROLE)
  private String companyRole;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_REDIRECT_ONLY = "redirectOnly";
  @SerializedName(SERIALIZED_NAME_REDIRECT_ONLY)
  private Boolean redirectOnly;

  public static final String SERIALIZED_NAME_REGISTRATION_DATE = "registrationDate";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATE)
  private String registrationDate;

  public static final String SERIALIZED_NAME_TIMEFRAME_MIN_DATE = "timeframeMinDate";
  @SerializedName(SERIALIZED_NAME_TIMEFRAME_MIN_DATE)
  private String timeframeMinDate;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private Integer timezone;

  public static final String SERIALIZED_NAME_TIMEZONENAME = "timezonename";
  @SerializedName(SERIALIZED_NAME_TIMEZONENAME)
  private String timezonename;

  public ApiCoreDtoAccountingUser() {
  }

  public ApiCoreDtoAccountingUser boGoVal(String boGoVal) {
    this.boGoVal = boGoVal;
    return this;
  }

  /**
   * Get boGoVal
   * @return boGoVal
   */
  @javax.annotation.Nullable
  public String getBoGoVal() {
    return boGoVal;
  }

  public void setBoGoVal(String boGoVal) {
    this.boGoVal = boGoVal;
  }


  public ApiCoreDtoAccountingUser bonusClicks(Long bonusClicks) {
    this.bonusClicks = bonusClicks;
    return this;
  }

  /**
   * Get bonusClicks
   * @return bonusClicks
   */
  @javax.annotation.Nullable
  public Long getBonusClicks() {
    return bonusClicks;
  }

  public void setBonusClicks(Long bonusClicks) {
    this.bonusClicks = bonusClicks;
  }


  public ApiCoreDtoAccountingUser companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public ApiCoreDtoAccountingUser companyRole(String companyRole) {
    this.companyRole = companyRole;
    return this;
  }

  /**
   * Get companyRole
   * @return companyRole
   */
  @javax.annotation.Nullable
  public String getCompanyRole() {
    return companyRole;
  }

  public void setCompanyRole(String companyRole) {
    this.companyRole = companyRole;
  }


  public ApiCoreDtoAccountingUser email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ApiCoreDtoAccountingUser firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ApiCoreDtoAccountingUser lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ApiCoreDtoAccountingUser phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public ApiCoreDtoAccountingUser redirectOnly(Boolean redirectOnly) {
    this.redirectOnly = redirectOnly;
    return this;
  }

  /**
   * Get redirectOnly
   * @return redirectOnly
   */
  @javax.annotation.Nullable
  public Boolean getRedirectOnly() {
    return redirectOnly;
  }

  public void setRedirectOnly(Boolean redirectOnly) {
    this.redirectOnly = redirectOnly;
  }


  public ApiCoreDtoAccountingUser registrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
    return this;
  }

  /**
   *  (A date in \&quot;YmdHis\&quot; format)
   * @return registrationDate
   */
  @javax.annotation.Nullable
  public String getRegistrationDate() {
    return registrationDate;
  }

  public void setRegistrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
  }


  public ApiCoreDtoAccountingUser timeframeMinDate(String timeframeMinDate) {
    this.timeframeMinDate = timeframeMinDate;
    return this;
  }

  /**
   *  (A date in \&quot;YmdHis\&quot; format)
   * @return timeframeMinDate
   */
  @javax.annotation.Nullable
  public String getTimeframeMinDate() {
    return timeframeMinDate;
  }

  public void setTimeframeMinDate(String timeframeMinDate) {
    this.timeframeMinDate = timeframeMinDate;
  }


  public ApiCoreDtoAccountingUser timezone(Integer timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public Integer getTimezone() {
    return timezone;
  }

  public void setTimezone(Integer timezone) {
    this.timezone = timezone;
  }


  public ApiCoreDtoAccountingUser timezonename(String timezonename) {
    this.timezonename = timezonename;
    return this;
  }

  /**
   * Get timezonename
   * @return timezonename
   */
  @javax.annotation.Nullable
  public String getTimezonename() {
    return timezonename;
  }

  public void setTimezonename(String timezonename) {
    this.timezonename = timezonename;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiCoreDtoAccountingUser apiCoreDtoAccountingUser = (ApiCoreDtoAccountingUser) o;
    return Objects.equals(this.boGoVal, apiCoreDtoAccountingUser.boGoVal) &&
        Objects.equals(this.bonusClicks, apiCoreDtoAccountingUser.bonusClicks) &&
        Objects.equals(this.companyName, apiCoreDtoAccountingUser.companyName) &&
        Objects.equals(this.companyRole, apiCoreDtoAccountingUser.companyRole) &&
        Objects.equals(this.email, apiCoreDtoAccountingUser.email) &&
        Objects.equals(this.firstName, apiCoreDtoAccountingUser.firstName) &&
        Objects.equals(this.lastName, apiCoreDtoAccountingUser.lastName) &&
        Objects.equals(this.phone, apiCoreDtoAccountingUser.phone) &&
        Objects.equals(this.redirectOnly, apiCoreDtoAccountingUser.redirectOnly) &&
        Objects.equals(this.registrationDate, apiCoreDtoAccountingUser.registrationDate) &&
        Objects.equals(this.timeframeMinDate, apiCoreDtoAccountingUser.timeframeMinDate) &&
        Objects.equals(this.timezone, apiCoreDtoAccountingUser.timezone) &&
        Objects.equals(this.timezonename, apiCoreDtoAccountingUser.timezonename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boGoVal, bonusClicks, companyName, companyRole, email, firstName, lastName, phone, redirectOnly, registrationDate, timeframeMinDate, timezone, timezonename);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiCoreDtoAccountingUser {\n");
    sb.append("    boGoVal: ").append(toIndentedString(boGoVal)).append("\n");
    sb.append("    bonusClicks: ").append(toIndentedString(bonusClicks)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companyRole: ").append(toIndentedString(companyRole)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    redirectOnly: ").append(toIndentedString(redirectOnly)).append("\n");
    sb.append("    registrationDate: ").append(toIndentedString(registrationDate)).append("\n");
    sb.append("    timeframeMinDate: ").append(toIndentedString(timeframeMinDate)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    timezonename: ").append(toIndentedString(timezonename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boGoVal");
    openapiFields.add("bonusClicks");
    openapiFields.add("companyName");
    openapiFields.add("companyRole");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("phone");
    openapiFields.add("redirectOnly");
    openapiFields.add("registrationDate");
    openapiFields.add("timeframeMinDate");
    openapiFields.add("timezone");
    openapiFields.add("timezonename");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiCoreDtoAccountingUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiCoreDtoAccountingUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiCoreDtoAccountingUser is not found in the empty JSON string", ApiCoreDtoAccountingUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiCoreDtoAccountingUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiCoreDtoAccountingUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("boGoVal") != null && !jsonObj.get("boGoVal").isJsonNull()) && !jsonObj.get("boGoVal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boGoVal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boGoVal").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("companyRole") != null && !jsonObj.get("companyRole").isJsonNull()) && !jsonObj.get("companyRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyRole").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("registrationDate") != null && !jsonObj.get("registrationDate").isJsonNull()) && !jsonObj.get("registrationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationDate").toString()));
      }
      if ((jsonObj.get("timeframeMinDate") != null && !jsonObj.get("timeframeMinDate").isJsonNull()) && !jsonObj.get("timeframeMinDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeframeMinDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeframeMinDate").toString()));
      }
      if ((jsonObj.get("timezonename") != null && !jsonObj.get("timezonename").isJsonNull()) && !jsonObj.get("timezonename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezonename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezonename").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiCoreDtoAccountingUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiCoreDtoAccountingUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiCoreDtoAccountingUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiCoreDtoAccountingUser.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiCoreDtoAccountingUser>() {
           @Override
           public void write(JsonWriter out, ApiCoreDtoAccountingUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiCoreDtoAccountingUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiCoreDtoAccountingUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiCoreDtoAccountingUser
   * @throws IOException if the JSON string is invalid with respect to ApiCoreDtoAccountingUser
   */
  public static ApiCoreDtoAccountingUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiCoreDtoAccountingUser.class);
  }

  /**
   * Convert an instance of ApiCoreDtoAccountingUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

