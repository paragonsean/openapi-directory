/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiCoreDtoAccountingDomainWhitelistEntry;
import org.openapitools.client.model.ApiCoreDtoAccountingGuest;
import org.openapitools.client.model.ApiCoreDtoAccountingIpBlacklistEntry;
import org.openapitools.client.model.ApiCoreDtoAccountingPlan;
import org.openapitools.client.model.ApiCoreDtoAccountingUser;
import org.openapitools.client.model.ApiCoreRequestsPermissionPatchRequest;
import org.openapitools.client.model.ApiCoreResponsesCountResponce;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant;
import org.openapitools.client.model.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64;
import org.openapitools.client.model.ApiCoreResponsesEntityUriSystemInt64;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountDeleteDomainWhitelist
     * @param whitelistId The id of the domain to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteDomainWhitelistCall(String whitelistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/domainwhitelist/{whitelistId}"
            .replace("{" + "whitelistId" + "}", localVarApiClient.escapeString(whitelistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountDeleteDomainWhitelistValidateBeforeCall(String whitelistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'whitelistId' is set
        if (whitelistId == null) {
            throw new ApiException("Missing the required parameter 'whitelistId' when calling accountDeleteDomainWhitelist(Async)");
        }

        return accountDeleteDomainWhitelistCall(whitelistId, _callback);

    }

    /**
     * Delete an domain entry
     * 
     * @param whitelistId The id of the domain to delete (required)
     * @return ApiCoreDtoAccountingDomainWhitelistEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingDomainWhitelistEntry accountDeleteDomainWhitelist(String whitelistId) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingDomainWhitelistEntry> localVarResp = accountDeleteDomainWhitelistWithHttpInfo(whitelistId);
        return localVarResp.getData();
    }

    /**
     * Delete an domain entry
     * 
     * @param whitelistId The id of the domain to delete (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingDomainWhitelistEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingDomainWhitelistEntry> accountDeleteDomainWhitelistWithHttpInfo(String whitelistId) throws ApiException {
        okhttp3.Call localVarCall = accountDeleteDomainWhitelistValidateBeforeCall(whitelistId, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingDomainWhitelistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an domain entry (asynchronously)
     * 
     * @param whitelistId The id of the domain to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteDomainWhitelistAsync(String whitelistId, final ApiCallback<ApiCoreDtoAccountingDomainWhitelistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountDeleteDomainWhitelistValidateBeforeCall(whitelistId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingDomainWhitelistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountDeleteGuest
     * @param guestId Id of the guest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteGuestCall(Long guestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/guests/{guestId}"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountDeleteGuestValidateBeforeCall(Long guestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling accountDeleteGuest(Async)");
        }

        return accountDeleteGuestCall(guestId, _callback);

    }

    /**
     * Delete a guest
     * 
     * @param guestId Id of the guest (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 accountDeleteGuest(Long guestId) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = accountDeleteGuestWithHttpInfo(guestId);
        return localVarResp.getData();
    }

    /**
     * Delete a guest
     * 
     * @param guestId Id of the guest (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> accountDeleteGuestWithHttpInfo(Long guestId) throws ApiException {
        okhttp3.Call localVarCall = accountDeleteGuestValidateBeforeCall(guestId, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a guest (asynchronously)
     * 
     * @param guestId Id of the guest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteGuestAsync(Long guestId, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountDeleteGuestValidateBeforeCall(guestId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountDeleteIpBlacklist
     * @param blacklistId The id of the ip to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteIpBlacklistCall(String blacklistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ipblacklist/{blacklistId}"
            .replace("{" + "blacklistId" + "}", localVarApiClient.escapeString(blacklistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountDeleteIpBlacklistValidateBeforeCall(String blacklistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blacklistId' is set
        if (blacklistId == null) {
            throw new ApiException("Missing the required parameter 'blacklistId' when calling accountDeleteIpBlacklist(Async)");
        }

        return accountDeleteIpBlacklistCall(blacklistId, _callback);

    }

    /**
     * Delete an ip blacklist entry
     * 
     * @param blacklistId The id of the ip to delete (required)
     * @return ApiCoreDtoAccountingIpBlacklistEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingIpBlacklistEntry accountDeleteIpBlacklist(String blacklistId) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingIpBlacklistEntry> localVarResp = accountDeleteIpBlacklistWithHttpInfo(blacklistId);
        return localVarResp.getData();
    }

    /**
     * Delete an ip blacklist entry
     * 
     * @param blacklistId The id of the ip to delete (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingIpBlacklistEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingIpBlacklistEntry> accountDeleteIpBlacklistWithHttpInfo(String blacklistId) throws ApiException {
        okhttp3.Call localVarCall = accountDeleteIpBlacklistValidateBeforeCall(blacklistId, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingIpBlacklistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an ip blacklist entry (asynchronously)
     * 
     * @param blacklistId The id of the ip to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteIpBlacklistAsync(String blacklistId, final ApiCallback<ApiCoreDtoAccountingIpBlacklistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountDeleteIpBlacklistValidateBeforeCall(blacklistId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingIpBlacklistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountGetCall(_callback);

    }

    /**
     * Retrieve current account data
     * 
     * @return ApiCoreDtoAccountingUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingUser accountGet() throws ApiException {
        ApiResponse<ApiCoreDtoAccountingUser> localVarResp = accountGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve current account data
     * 
     * @return ApiResponse&lt;ApiCoreDtoAccountingUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingUser> accountGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve current account data (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetAsync(final ApiCallback<ApiCoreDtoAccountingUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetDomainWhitelist
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetDomainWhitelistCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/domainwhitelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetDomainWhitelistValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return accountGetDomainWhitelistCall(offset, limit, _callback);

    }

    /**
     * Retrieve list of a domains allowed to redirect in DDU mode
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry accountGetDomainWhitelist(Integer offset, Integer limit) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry> localVarResp = accountGetDomainWhitelistWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieve list of a domains allowed to redirect in DDU mode
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry> accountGetDomainWhitelistWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = accountGetDomainWhitelistValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve list of a domains allowed to redirect in DDU mode (asynchronously)
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetDomainWhitelistAsync(Integer offset, Integer limit, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetDomainWhitelistValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetGuest
     * @param guestId Id of the guest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetGuestCall(Long guestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/guests/{guestId}"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetGuestValidateBeforeCall(Long guestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling accountGetGuest(Async)");
        }

        return accountGetGuestCall(guestId, _callback);

    }

    /**
     * Retrieve a guest
     * 
     * @param guestId Id of the guest (required)
     * @return ApiCoreDtoAccountingGuest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingGuest accountGetGuest(Long guestId) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingGuest> localVarResp = accountGetGuestWithHttpInfo(guestId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a guest
     * 
     * @param guestId Id of the guest (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingGuest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingGuest> accountGetGuestWithHttpInfo(Long guestId) throws ApiException {
        okhttp3.Call localVarCall = accountGetGuestValidateBeforeCall(guestId, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingGuest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a guest (asynchronously)
     * 
     * @param guestId Id of the guest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetGuestAsync(Long guestId, final ApiCallback<ApiCoreDtoAccountingGuest> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetGuestValidateBeforeCall(guestId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingGuest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetGuests
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetGuestsCall(Integer offset, Integer limit, String sortBy, String sortDirection, String textSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/guests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetGuestsValidateBeforeCall(Integer offset, Integer limit, String sortBy, String sortDirection, String textSearch, final ApiCallback _callback) throws ApiException {
        return accountGetGuestsCall(offset, limit, sortBy, sortDirection, textSearch, _callback);

    }

    /**
     * Retrieve list of a guest
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 accountGetGuests(Integer offset, Integer limit, String sortBy, String sortDirection, String textSearch) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> localVarResp = accountGetGuestsWithHttpInfo(offset, limit, sortBy, sortDirection, textSearch);
        return localVarResp.getData();
    }

    /**
     * Retrieve list of a guest
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> accountGetGuestsWithHttpInfo(Integer offset, Integer limit, String sortBy, String sortDirection, String textSearch) throws ApiException {
        okhttp3.Call localVarCall = accountGetGuestsValidateBeforeCall(offset, limit, sortBy, sortDirection, textSearch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve list of a guest (asynchronously)
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param sortBy Field to sort by (optional)
     * @param sortDirection Direction of sort \&quot;asc\&quot; or \&quot;desc\&quot; (optional)
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetGuestsAsync(Integer offset, Integer limit, String sortBy, String sortDirection, String textSearch, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetGuestsValidateBeforeCall(offset, limit, sortBy, sortDirection, textSearch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetGuestsCount
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetGuestsCountCall(String textSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/guests/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (textSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("textSearch", textSearch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetGuestsCountValidateBeforeCall(String textSearch, final ApiCallback _callback) throws ApiException {
        return accountGetGuestsCountCall(textSearch, _callback);

    }

    /**
     * Retrieve count of guests
     * 
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce accountGetGuestsCount(String textSearch) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = accountGetGuestsCountWithHttpInfo(textSearch);
        return localVarResp.getData();
    }

    /**
     * Retrieve count of guests
     * 
     * @param textSearch Filter fields by this pattern (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> accountGetGuestsCountWithHttpInfo(String textSearch) throws ApiException {
        okhttp3.Call localVarCall = accountGetGuestsCountValidateBeforeCall(textSearch, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve count of guests (asynchronously)
     * 
     * @param textSearch Filter fields by this pattern (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetGuestsCountAsync(String textSearch, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetGuestsCountValidateBeforeCall(textSearch, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetIpBlacklist
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetIpBlacklistCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/ipblacklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetIpBlacklistValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return accountGetIpBlacklistCall(offset, limit, _callback);

    }

    /**
     * Retrieve list of a ip to exclude from event tracking
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry accountGetIpBlacklist(Integer offset, Integer limit) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry> localVarResp = accountGetIpBlacklistWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieve list of a ip to exclude from event tracking
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry> accountGetIpBlacklistWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = accountGetIpBlacklistValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve list of a ip to exclude from event tracking (asynchronously)
     * 
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetIpBlacklistAsync(Integer offset, Integer limit, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetIpBlacklistValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetPermissions
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetPermissionsCall(Long guestId, String entityType, Integer offset, Integer limit, String type, Long entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/guests/{guestId}/permissions"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetPermissionsValidateBeforeCall(Long guestId, String entityType, Integer offset, Integer limit, String type, Long entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling accountGetPermissions(Async)");
        }

        return accountGetPermissionsCall(guestId, entityType, offset, limit, type, entityId, _callback);

    }

    /**
     * Retrieve permissions for a guest
     * 
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @return ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant accountGetPermissions(Long guestId, String entityType, Integer offset, Integer limit, String type, Long entityId) throws ApiException {
        ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant> localVarResp = accountGetPermissionsWithHttpInfo(guestId, entityType, offset, limit, type, entityId);
        return localVarResp.getData();
    }

    /**
     * Retrieve permissions for a guest
     * 
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @return ApiResponse&lt;ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant> accountGetPermissionsWithHttpInfo(Long guestId, String entityType, Integer offset, Integer limit, String type, Long entityId) throws ApiException {
        okhttp3.Call localVarCall = accountGetPermissionsValidateBeforeCall(guestId, entityType, offset, limit, type, entityId, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve permissions for a guest (asynchronously)
     * 
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param offset Offset where to start from (optional)
     * @param limit Limit results to this number (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetPermissionsAsync(Long guestId, String entityType, Integer offset, Integer limit, String type, Long entityId, final ApiCallback<ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetPermissionsValidateBeforeCall(guestId, entityType, offset, limit, type, entityId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetPermissionsCount
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetPermissionsCountCall(Long guestId, String entityType, String type, Long entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/guests/{guestId}/permissions/count"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetPermissionsCountValidateBeforeCall(Long guestId, String entityType, String type, Long entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling accountGetPermissionsCount(Async)");
        }

        return accountGetPermissionsCountCall(guestId, entityType, type, entityId, _callback);

    }

    /**
     * Retrieve count of the permissions for a guest
     * 
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @return ApiCoreResponsesCountResponce
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesCountResponce accountGetPermissionsCount(Long guestId, String entityType, String type, Long entityId) throws ApiException {
        ApiResponse<ApiCoreResponsesCountResponce> localVarResp = accountGetPermissionsCountWithHttpInfo(guestId, entityType, type, entityId);
        return localVarResp.getData();
    }

    /**
     * Retrieve count of the permissions for a guest
     * 
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @return ApiResponse&lt;ApiCoreResponsesCountResponce&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesCountResponce> accountGetPermissionsCountWithHttpInfo(Long guestId, String entityType, String type, Long entityId) throws ApiException {
        okhttp3.Call localVarCall = accountGetPermissionsCountValidateBeforeCall(guestId, entityType, type, entityId, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve count of the permissions for a guest (asynchronously)
     * 
     * @param guestId Id of the guest (required)
     * @param entityType Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (optional)
     * @param type Can be \&quot;w\&quot; or \&quot;r\&quot; (optional)
     * @param entityId Optional id of the datapoint/group entity to filter by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetPermissionsCountAsync(Long guestId, String entityType, String type, Long entityId, final ApiCallback<ApiCoreResponsesCountResponce> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetPermissionsCountValidateBeforeCall(guestId, entityType, type, entityId, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesCountResponce>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetPlan
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetPlanCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetPlanValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountGetPlanCall(_callback);

    }

    /**
     * Retrieve current account plan
     * 
     * @return ApiCoreDtoAccountingPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingPlan accountGetPlan() throws ApiException {
        ApiResponse<ApiCoreDtoAccountingPlan> localVarResp = accountGetPlanWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve current account plan
     * 
     * @return ApiResponse&lt;ApiCoreDtoAccountingPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingPlan> accountGetPlanWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountGetPlanValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve current account plan (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetPlanAsync(final ApiCallback<ApiCoreDtoAccountingPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetPlanValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGuestsGuestIdTypePermissionsPatchPost
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGuestsGuestIdTypePermissionsPatchPostCall(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsPermissionPatchRequest;

        // create path and map variables
        String localVarPath = "/account/guests/{guestId}/{type}/permissions/patch"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGuestsGuestIdTypePermissionsPatchPostValidateBeforeCall(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling accountGuestsGuestIdTypePermissionsPatchPost(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling accountGuestsGuestIdTypePermissionsPatchPost(Async)");
        }

        // verify the required parameter 'apiCoreRequestsPermissionPatchRequest' is set
        if (apiCoreRequestsPermissionPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsPermissionPatchRequest' when calling accountGuestsGuestIdTypePermissionsPatchPost(Async)");
        }

        return accountGuestsGuestIdTypePermissionsPatchPostCall(guestId, type, apiCoreRequestsPermissionPatchRequest, _callback);

    }

    /**
     * Change the permission on a shared object
     * 
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 accountGuestsGuestIdTypePermissionsPatchPost(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = accountGuestsGuestIdTypePermissionsPatchPostWithHttpInfo(guestId, type, apiCoreRequestsPermissionPatchRequest);
        return localVarResp.getData();
    }

    /**
     * Change the permission on a shared object
     * 
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> accountGuestsGuestIdTypePermissionsPatchPostWithHttpInfo(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = accountGuestsGuestIdTypePermissionsPatchPostValidateBeforeCall(guestId, type, apiCoreRequestsPermissionPatchRequest, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the permission on a shared object (asynchronously)
     * 
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGuestsGuestIdTypePermissionsPatchPostAsync(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGuestsGuestIdTypePermissionsPatchPostValidateBeforeCall(guestId, type, apiCoreRequestsPermissionPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPatchPermissions
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPatchPermissionsCall(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreRequestsPermissionPatchRequest;

        // create path and map variables
        String localVarPath = "/account/guests/{guestId}/{type}/permissions/patch"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPatchPermissionsValidateBeforeCall(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling accountPatchPermissions(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling accountPatchPermissions(Async)");
        }

        // verify the required parameter 'apiCoreRequestsPermissionPatchRequest' is set
        if (apiCoreRequestsPermissionPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'apiCoreRequestsPermissionPatchRequest' when calling accountPatchPermissions(Async)");
        }

        return accountPatchPermissionsCall(guestId, type, apiCoreRequestsPermissionPatchRequest, _callback);

    }

    /**
     * Change the permission on a shared object
     * 
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @return ApiCoreResponsesEntityUriSystemInt64
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreResponsesEntityUriSystemInt64 accountPatchPermissions(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest) throws ApiException {
        ApiResponse<ApiCoreResponsesEntityUriSystemInt64> localVarResp = accountPatchPermissionsWithHttpInfo(guestId, type, apiCoreRequestsPermissionPatchRequest);
        return localVarResp.getData();
    }

    /**
     * Change the permission on a shared object
     * 
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @return ApiResponse&lt;ApiCoreResponsesEntityUriSystemInt64&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreResponsesEntityUriSystemInt64> accountPatchPermissionsWithHttpInfo(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = accountPatchPermissionsValidateBeforeCall(guestId, type, apiCoreRequestsPermissionPatchRequest, null);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change the permission on a shared object (asynchronously)
     * 
     * @param guestId Id of the guest (required)
     * @param type Can be \&quot;datapoint\&quot; or \&quot;group\&quot; (required)
     * @param apiCoreRequestsPermissionPatchRequest The patch permission request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPatchPermissionsAsync(Long guestId, String type, ApiCoreRequestsPermissionPatchRequest apiCoreRequestsPermissionPatchRequest, final ApiCallback<ApiCoreResponsesEntityUriSystemInt64> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPatchPermissionsValidateBeforeCall(guestId, type, apiCoreRequestsPermissionPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreResponsesEntityUriSystemInt64>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPost
     * @param apiCoreDtoAccountingUser  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPostCall(ApiCoreDtoAccountingUser apiCoreDtoAccountingUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoAccountingUser;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPostValidateBeforeCall(ApiCoreDtoAccountingUser apiCoreDtoAccountingUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoAccountingUser' is set
        if (apiCoreDtoAccountingUser == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoAccountingUser' when calling accountPost(Async)");
        }

        return accountPostCall(apiCoreDtoAccountingUser, _callback);

    }

    /**
     * Update current account data
     * 
     * @param apiCoreDtoAccountingUser  (required)
     * @return ApiCoreDtoAccountingUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingUser accountPost(ApiCoreDtoAccountingUser apiCoreDtoAccountingUser) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingUser> localVarResp = accountPostWithHttpInfo(apiCoreDtoAccountingUser);
        return localVarResp.getData();
    }

    /**
     * Update current account data
     * 
     * @param apiCoreDtoAccountingUser  (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingUser> accountPostWithHttpInfo(ApiCoreDtoAccountingUser apiCoreDtoAccountingUser) throws ApiException {
        okhttp3.Call localVarCall = accountPostValidateBeforeCall(apiCoreDtoAccountingUser, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update current account data (asynchronously)
     * 
     * @param apiCoreDtoAccountingUser  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPostAsync(ApiCoreDtoAccountingUser apiCoreDtoAccountingUser, final ApiCallback<ApiCoreDtoAccountingUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPostValidateBeforeCall(apiCoreDtoAccountingUser, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPostGuest
     * @param guestId Id of the guest (required)
     * @param apiCoreDtoAccountingGuest Guest object with field updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPostGuestCall(Long guestId, ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoAccountingGuest;

        // create path and map variables
        String localVarPath = "/account/guests/{guestId}"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPostGuestValidateBeforeCall(Long guestId, ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling accountPostGuest(Async)");
        }

        // verify the required parameter 'apiCoreDtoAccountingGuest' is set
        if (apiCoreDtoAccountingGuest == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoAccountingGuest' when calling accountPostGuest(Async)");
        }

        return accountPostGuestCall(guestId, apiCoreDtoAccountingGuest, _callback);

    }

    /**
     * Update a guest
     * 
     * @param guestId Id of the guest (required)
     * @param apiCoreDtoAccountingGuest Guest object with field updated (required)
     * @return ApiCoreDtoAccountingGuest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingGuest accountPostGuest(Long guestId, ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingGuest> localVarResp = accountPostGuestWithHttpInfo(guestId, apiCoreDtoAccountingGuest);
        return localVarResp.getData();
    }

    /**
     * Update a guest
     * 
     * @param guestId Id of the guest (required)
     * @param apiCoreDtoAccountingGuest Guest object with field updated (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingGuest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingGuest> accountPostGuestWithHttpInfo(Long guestId, ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest) throws ApiException {
        okhttp3.Call localVarCall = accountPostGuestValidateBeforeCall(guestId, apiCoreDtoAccountingGuest, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingGuest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a guest (asynchronously)
     * 
     * @param guestId Id of the guest (required)
     * @param apiCoreDtoAccountingGuest Guest object with field updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPostGuestAsync(Long guestId, ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest, final ApiCallback<ApiCoreDtoAccountingGuest> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPostGuestValidateBeforeCall(guestId, apiCoreDtoAccountingGuest, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingGuest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPutDomainWhitelist
     * @param apiCoreDtoAccountingDomainWhitelistEntry The entry to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPutDomainWhitelistCall(ApiCoreDtoAccountingDomainWhitelistEntry apiCoreDtoAccountingDomainWhitelistEntry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoAccountingDomainWhitelistEntry;

        // create path and map variables
        String localVarPath = "/account/domainwhitelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPutDomainWhitelistValidateBeforeCall(ApiCoreDtoAccountingDomainWhitelistEntry apiCoreDtoAccountingDomainWhitelistEntry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoAccountingDomainWhitelistEntry' is set
        if (apiCoreDtoAccountingDomainWhitelistEntry == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoAccountingDomainWhitelistEntry' when calling accountPutDomainWhitelist(Async)");
        }

        return accountPutDomainWhitelistCall(apiCoreDtoAccountingDomainWhitelistEntry, _callback);

    }

    /**
     * Create an domain entry
     * 
     * @param apiCoreDtoAccountingDomainWhitelistEntry The entry to add (required)
     * @return ApiCoreDtoAccountingDomainWhitelistEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingDomainWhitelistEntry accountPutDomainWhitelist(ApiCoreDtoAccountingDomainWhitelistEntry apiCoreDtoAccountingDomainWhitelistEntry) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingDomainWhitelistEntry> localVarResp = accountPutDomainWhitelistWithHttpInfo(apiCoreDtoAccountingDomainWhitelistEntry);
        return localVarResp.getData();
    }

    /**
     * Create an domain entry
     * 
     * @param apiCoreDtoAccountingDomainWhitelistEntry The entry to add (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingDomainWhitelistEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingDomainWhitelistEntry> accountPutDomainWhitelistWithHttpInfo(ApiCoreDtoAccountingDomainWhitelistEntry apiCoreDtoAccountingDomainWhitelistEntry) throws ApiException {
        okhttp3.Call localVarCall = accountPutDomainWhitelistValidateBeforeCall(apiCoreDtoAccountingDomainWhitelistEntry, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingDomainWhitelistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an domain entry (asynchronously)
     * 
     * @param apiCoreDtoAccountingDomainWhitelistEntry The entry to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPutDomainWhitelistAsync(ApiCoreDtoAccountingDomainWhitelistEntry apiCoreDtoAccountingDomainWhitelistEntry, final ApiCallback<ApiCoreDtoAccountingDomainWhitelistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPutDomainWhitelistValidateBeforeCall(apiCoreDtoAccountingDomainWhitelistEntry, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingDomainWhitelistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPutGuest
     * @param apiCoreDtoAccountingGuest Guest object to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPutGuestCall(ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoAccountingGuest;

        // create path and map variables
        String localVarPath = "/account/guests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPutGuestValidateBeforeCall(ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoAccountingGuest' is set
        if (apiCoreDtoAccountingGuest == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoAccountingGuest' when calling accountPutGuest(Async)");
        }

        return accountPutGuestCall(apiCoreDtoAccountingGuest, _callback);

    }

    /**
     * Create a guest
     * 
     * @param apiCoreDtoAccountingGuest Guest object to create (required)
     * @return ApiCoreDtoAccountingGuest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingGuest accountPutGuest(ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingGuest> localVarResp = accountPutGuestWithHttpInfo(apiCoreDtoAccountingGuest);
        return localVarResp.getData();
    }

    /**
     * Create a guest
     * 
     * @param apiCoreDtoAccountingGuest Guest object to create (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingGuest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingGuest> accountPutGuestWithHttpInfo(ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest) throws ApiException {
        okhttp3.Call localVarCall = accountPutGuestValidateBeforeCall(apiCoreDtoAccountingGuest, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingGuest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a guest (asynchronously)
     * 
     * @param apiCoreDtoAccountingGuest Guest object to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPutGuestAsync(ApiCoreDtoAccountingGuest apiCoreDtoAccountingGuest, final ApiCallback<ApiCoreDtoAccountingGuest> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPutGuestValidateBeforeCall(apiCoreDtoAccountingGuest, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingGuest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPutIpBlacklist
     * @param apiCoreDtoAccountingIpBlacklistEntry The entry to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPutIpBlacklistCall(ApiCoreDtoAccountingIpBlacklistEntry apiCoreDtoAccountingIpBlacklistEntry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiCoreDtoAccountingIpBlacklistEntry;

        // create path and map variables
        String localVarPath = "/account/ipblacklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPutIpBlacklistValidateBeforeCall(ApiCoreDtoAccountingIpBlacklistEntry apiCoreDtoAccountingIpBlacklistEntry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiCoreDtoAccountingIpBlacklistEntry' is set
        if (apiCoreDtoAccountingIpBlacklistEntry == null) {
            throw new ApiException("Missing the required parameter 'apiCoreDtoAccountingIpBlacklistEntry' when calling accountPutIpBlacklist(Async)");
        }

        return accountPutIpBlacklistCall(apiCoreDtoAccountingIpBlacklistEntry, _callback);

    }

    /**
     * Create an ip blacklist entry
     * 
     * @param apiCoreDtoAccountingIpBlacklistEntry The entry to add (required)
     * @return ApiCoreDtoAccountingIpBlacklistEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiCoreDtoAccountingIpBlacklistEntry accountPutIpBlacklist(ApiCoreDtoAccountingIpBlacklistEntry apiCoreDtoAccountingIpBlacklistEntry) throws ApiException {
        ApiResponse<ApiCoreDtoAccountingIpBlacklistEntry> localVarResp = accountPutIpBlacklistWithHttpInfo(apiCoreDtoAccountingIpBlacklistEntry);
        return localVarResp.getData();
    }

    /**
     * Create an ip blacklist entry
     * 
     * @param apiCoreDtoAccountingIpBlacklistEntry The entry to add (required)
     * @return ApiResponse&lt;ApiCoreDtoAccountingIpBlacklistEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiCoreDtoAccountingIpBlacklistEntry> accountPutIpBlacklistWithHttpInfo(ApiCoreDtoAccountingIpBlacklistEntry apiCoreDtoAccountingIpBlacklistEntry) throws ApiException {
        okhttp3.Call localVarCall = accountPutIpBlacklistValidateBeforeCall(apiCoreDtoAccountingIpBlacklistEntry, null);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingIpBlacklistEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an ip blacklist entry (asynchronously)
     * 
     * @param apiCoreDtoAccountingIpBlacklistEntry The entry to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPutIpBlacklistAsync(ApiCoreDtoAccountingIpBlacklistEntry apiCoreDtoAccountingIpBlacklistEntry, final ApiCallback<ApiCoreDtoAccountingIpBlacklistEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPutIpBlacklistValidateBeforeCall(apiCoreDtoAccountingIpBlacklistEntry, _callback);
        Type localVarReturnType = new TypeToken<ApiCoreDtoAccountingIpBlacklistEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
