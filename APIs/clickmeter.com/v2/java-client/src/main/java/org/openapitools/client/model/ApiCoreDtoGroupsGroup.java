/*
 * ClickMeter API
 * Api dashboard for ClickMeter API
 *
 * The version of the OpenAPI document: v2
 * Contact: api@clickmeter.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiCoreDtoTagsTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiCoreDtoGroupsGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:30.746224-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiCoreDtoGroupsGroup {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public static final String SERIALIZED_NAME_REDIRECT_ONLY = "redirectOnly";
  @SerializedName(SERIALIZED_NAME_REDIRECT_ONLY)
  private Boolean redirectOnly;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<ApiCoreDtoTagsTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE_PERMITED = "writePermited";
  @SerializedName(SERIALIZED_NAME_WRITE_PERMITED)
  private Boolean writePermited;

  public ApiCoreDtoGroupsGroup() {
  }

  public ApiCoreDtoGroupsGroup creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   *  (A date in \&quot;YmdHis\&quot; format)
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public ApiCoreDtoGroupsGroup deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public ApiCoreDtoGroupsGroup id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ApiCoreDtoGroupsGroup isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Get isPublic
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public ApiCoreDtoGroupsGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApiCoreDtoGroupsGroup notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public ApiCoreDtoGroupsGroup preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * Get preferred
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public ApiCoreDtoGroupsGroup redirectOnly(Boolean redirectOnly) {
    this.redirectOnly = redirectOnly;
    return this;
  }

  /**
   * Get redirectOnly
   * @return redirectOnly
   */
  @javax.annotation.Nullable
  public Boolean getRedirectOnly() {
    return redirectOnly;
  }

  public void setRedirectOnly(Boolean redirectOnly) {
    this.redirectOnly = redirectOnly;
  }


  public ApiCoreDtoGroupsGroup tags(List<ApiCoreDtoTagsTag> tags) {
    this.tags = tags;
    return this;
  }

  public ApiCoreDtoGroupsGroup addTagsItem(ApiCoreDtoTagsTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<ApiCoreDtoTagsTag> getTags() {
    return tags;
  }

  public void setTags(List<ApiCoreDtoTagsTag> tags) {
    this.tags = tags;
  }


  public ApiCoreDtoGroupsGroup writePermited(Boolean writePermited) {
    this.writePermited = writePermited;
    return this;
  }

  /**
   * Get writePermited
   * @return writePermited
   */
  @javax.annotation.Nullable
  public Boolean getWritePermited() {
    return writePermited;
  }

  public void setWritePermited(Boolean writePermited) {
    this.writePermited = writePermited;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiCoreDtoGroupsGroup apiCoreDtoGroupsGroup = (ApiCoreDtoGroupsGroup) o;
    return Objects.equals(this.creationDate, apiCoreDtoGroupsGroup.creationDate) &&
        Objects.equals(this.deleted, apiCoreDtoGroupsGroup.deleted) &&
        Objects.equals(this.id, apiCoreDtoGroupsGroup.id) &&
        Objects.equals(this.isPublic, apiCoreDtoGroupsGroup.isPublic) &&
        Objects.equals(this.name, apiCoreDtoGroupsGroup.name) &&
        Objects.equals(this.notes, apiCoreDtoGroupsGroup.notes) &&
        Objects.equals(this.preferred, apiCoreDtoGroupsGroup.preferred) &&
        Objects.equals(this.redirectOnly, apiCoreDtoGroupsGroup.redirectOnly) &&
        Objects.equals(this.tags, apiCoreDtoGroupsGroup.tags) &&
        Objects.equals(this.writePermited, apiCoreDtoGroupsGroup.writePermited);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, deleted, id, isPublic, name, notes, preferred, redirectOnly, tags, writePermited);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiCoreDtoGroupsGroup {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    redirectOnly: ").append(toIndentedString(redirectOnly)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    writePermited: ").append(toIndentedString(writePermited)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("deleted");
    openapiFields.add("id");
    openapiFields.add("isPublic");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("preferred");
    openapiFields.add("redirectOnly");
    openapiFields.add("tags");
    openapiFields.add("writePermited");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiCoreDtoGroupsGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiCoreDtoGroupsGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiCoreDtoGroupsGroup is not found in the empty JSON string", ApiCoreDtoGroupsGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiCoreDtoGroupsGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiCoreDtoGroupsGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            ApiCoreDtoTagsTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiCoreDtoGroupsGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiCoreDtoGroupsGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiCoreDtoGroupsGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiCoreDtoGroupsGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiCoreDtoGroupsGroup>() {
           @Override
           public void write(JsonWriter out, ApiCoreDtoGroupsGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiCoreDtoGroupsGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiCoreDtoGroupsGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiCoreDtoGroupsGroup
   * @throws IOException if the JSON string is invalid with respect to ApiCoreDtoGroupsGroup
   */
  public static ApiCoreDtoGroupsGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiCoreDtoGroupsGroup.class);
  }

  /**
   * Convert an instance of ApiCoreDtoGroupsGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

