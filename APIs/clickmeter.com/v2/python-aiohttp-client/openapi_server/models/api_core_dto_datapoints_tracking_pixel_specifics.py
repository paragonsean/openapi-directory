# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCoreDtoDatapointsTrackingPixelSpecifics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_note: str=None):
        """ApiCoreDtoDatapointsTrackingPixelSpecifics - a model defined in OpenAPI

        :param parameter_note: The parameter_note of this ApiCoreDtoDatapointsTrackingPixelSpecifics.
        """
        self.openapi_types = {
            'parameter_note': str
        }

        self.attribute_map = {
            'parameter_note': 'parameterNote'
        }

        self._parameter_note = parameter_note

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCoreDtoDatapointsTrackingPixelSpecifics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api.Core.Dto.Datapoints.TrackingPixelSpecifics of this ApiCoreDtoDatapointsTrackingPixelSpecifics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_note(self):
        """Gets the parameter_note of this ApiCoreDtoDatapointsTrackingPixelSpecifics.


        :return: The parameter_note of this ApiCoreDtoDatapointsTrackingPixelSpecifics.
        :rtype: str
        """
        return self._parameter_note

    @parameter_note.setter
    def parameter_note(self, parameter_note):
        """Sets the parameter_note of this ApiCoreDtoDatapointsTrackingPixelSpecifics.


        :param parameter_note: The parameter_note of this ApiCoreDtoDatapointsTrackingPixelSpecifics.
        :type parameter_note: str
        """

        self._parameter_note = parameter_note
