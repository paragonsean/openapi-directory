# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_core_dto_aggregated_aggregated_result import ApiCoreDtoAggregatedAggregatedResult
from openapi_server import util


class ApiCoreDtoAggregatedAggregatedSummaryResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, limit: int=None, offset: int=None, result: List[ApiCoreDtoAggregatedAggregatedResult]=None):
        """ApiCoreDtoAggregatedAggregatedSummaryResult - a model defined in OpenAPI

        :param count: The count of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :param limit: The limit of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :param offset: The offset of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :param result: The result of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        """
        self.openapi_types = {
            'count': int,
            'limit': int,
            'offset': int,
            'result': List[ApiCoreDtoAggregatedAggregatedResult]
        }

        self.attribute_map = {
            'count': 'count',
            'limit': 'limit',
            'offset': 'offset',
            'result': 'result'
        }

        self._count = count
        self._limit = limit
        self._offset = offset
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCoreDtoAggregatedAggregatedSummaryResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api.Core.Dto.Aggregated.AggregatedSummaryResult of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :return: The count of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :param count: The count of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :type count: int
        """

        self._count = count

    @property
    def limit(self):
        """Gets the limit of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :return: The limit of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :param limit: The limit of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :return: The offset of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :param offset: The offset of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :type offset: int
        """

        self._offset = offset

    @property
    def result(self):
        """Gets the result of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :return: The result of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :rtype: List[ApiCoreDtoAggregatedAggregatedResult]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ApiCoreDtoAggregatedAggregatedSummaryResult.


        :param result: The result of this ApiCoreDtoAggregatedAggregatedSummaryResult.
        :type result: List[ApiCoreDtoAggregatedAggregatedResult]
        """

        self._result = result
