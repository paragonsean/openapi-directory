# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCoreDtoConversionsConversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, creation_date: str=None, deleted: bool=None, description: str=None, id: int=None, name: str=None, protocol: str=None, value: float=None):
        """ApiCoreDtoConversionsConversion - a model defined in OpenAPI

        :param code: The code of this ApiCoreDtoConversionsConversion.
        :param creation_date: The creation_date of this ApiCoreDtoConversionsConversion.
        :param deleted: The deleted of this ApiCoreDtoConversionsConversion.
        :param description: The description of this ApiCoreDtoConversionsConversion.
        :param id: The id of this ApiCoreDtoConversionsConversion.
        :param name: The name of this ApiCoreDtoConversionsConversion.
        :param protocol: The protocol of this ApiCoreDtoConversionsConversion.
        :param value: The value of this ApiCoreDtoConversionsConversion.
        """
        self.openapi_types = {
            'code': str,
            'creation_date': str,
            'deleted': bool,
            'description': str,
            'id': int,
            'name': str,
            'protocol': str,
            'value': float
        }

        self.attribute_map = {
            'code': 'code',
            'creation_date': 'creationDate',
            'deleted': 'deleted',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'protocol': 'protocol',
            'value': 'value'
        }

        self._code = code
        self._creation_date = creation_date
        self._deleted = deleted
        self._description = description
        self._id = id
        self._name = name
        self._protocol = protocol
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCoreDtoConversionsConversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api.Core.Dto.Conversions.Conversion of this ApiCoreDtoConversionsConversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ApiCoreDtoConversionsConversion.


        :return: The code of this ApiCoreDtoConversionsConversion.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ApiCoreDtoConversionsConversion.


        :param code: The code of this ApiCoreDtoConversionsConversion.
        :type code: str
        """

        self._code = code

    @property
    def creation_date(self):
        """Gets the creation_date of this ApiCoreDtoConversionsConversion.

         (A date in \"YmdHis\" format)

        :return: The creation_date of this ApiCoreDtoConversionsConversion.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ApiCoreDtoConversionsConversion.

         (A date in \"YmdHis\" format)

        :param creation_date: The creation_date of this ApiCoreDtoConversionsConversion.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def deleted(self):
        """Gets the deleted of this ApiCoreDtoConversionsConversion.


        :return: The deleted of this ApiCoreDtoConversionsConversion.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ApiCoreDtoConversionsConversion.


        :param deleted: The deleted of this ApiCoreDtoConversionsConversion.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this ApiCoreDtoConversionsConversion.


        :return: The description of this ApiCoreDtoConversionsConversion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiCoreDtoConversionsConversion.


        :param description: The description of this ApiCoreDtoConversionsConversion.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ApiCoreDtoConversionsConversion.


        :return: The id of this ApiCoreDtoConversionsConversion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiCoreDtoConversionsConversion.


        :param id: The id of this ApiCoreDtoConversionsConversion.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiCoreDtoConversionsConversion.


        :return: The name of this ApiCoreDtoConversionsConversion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCoreDtoConversionsConversion.


        :param name: The name of this ApiCoreDtoConversionsConversion.
        :type name: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this ApiCoreDtoConversionsConversion.


        :return: The protocol of this ApiCoreDtoConversionsConversion.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApiCoreDtoConversionsConversion.


        :param protocol: The protocol of this ApiCoreDtoConversionsConversion.
        :type protocol: str
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def value(self):
        """Gets the value of this ApiCoreDtoConversionsConversion.


        :return: The value of this ApiCoreDtoConversionsConversion.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ApiCoreDtoConversionsConversion.


        :param value: The value of this ApiCoreDtoConversionsConversion.
        :type value: float
        """

        self._value = value
