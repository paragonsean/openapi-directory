# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCoreDtoAccountingConversionOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hide_com_cost: bool=None, hide_cost: bool=None, hide_count: bool=None, hide_params: bool=None, hide_value: bool=None, percent_commission: int=None, percent_value: int=None):
        """ApiCoreDtoAccountingConversionOptions - a model defined in OpenAPI

        :param hide_com_cost: The hide_com_cost of this ApiCoreDtoAccountingConversionOptions.
        :param hide_cost: The hide_cost of this ApiCoreDtoAccountingConversionOptions.
        :param hide_count: The hide_count of this ApiCoreDtoAccountingConversionOptions.
        :param hide_params: The hide_params of this ApiCoreDtoAccountingConversionOptions.
        :param hide_value: The hide_value of this ApiCoreDtoAccountingConversionOptions.
        :param percent_commission: The percent_commission of this ApiCoreDtoAccountingConversionOptions.
        :param percent_value: The percent_value of this ApiCoreDtoAccountingConversionOptions.
        """
        self.openapi_types = {
            'hide_com_cost': bool,
            'hide_cost': bool,
            'hide_count': bool,
            'hide_params': bool,
            'hide_value': bool,
            'percent_commission': int,
            'percent_value': int
        }

        self.attribute_map = {
            'hide_com_cost': 'hideComCost',
            'hide_cost': 'hideCost',
            'hide_count': 'hideCount',
            'hide_params': 'hideParams',
            'hide_value': 'hideValue',
            'percent_commission': 'percentCommission',
            'percent_value': 'percentValue'
        }

        self._hide_com_cost = hide_com_cost
        self._hide_cost = hide_cost
        self._hide_count = hide_count
        self._hide_params = hide_params
        self._hide_value = hide_value
        self._percent_commission = percent_commission
        self._percent_value = percent_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCoreDtoAccountingConversionOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api.Core.Dto.Accounting.ConversionOptions of this ApiCoreDtoAccountingConversionOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hide_com_cost(self):
        """Gets the hide_com_cost of this ApiCoreDtoAccountingConversionOptions.


        :return: The hide_com_cost of this ApiCoreDtoAccountingConversionOptions.
        :rtype: bool
        """
        return self._hide_com_cost

    @hide_com_cost.setter
    def hide_com_cost(self, hide_com_cost):
        """Sets the hide_com_cost of this ApiCoreDtoAccountingConversionOptions.


        :param hide_com_cost: The hide_com_cost of this ApiCoreDtoAccountingConversionOptions.
        :type hide_com_cost: bool
        """

        self._hide_com_cost = hide_com_cost

    @property
    def hide_cost(self):
        """Gets the hide_cost of this ApiCoreDtoAccountingConversionOptions.


        :return: The hide_cost of this ApiCoreDtoAccountingConversionOptions.
        :rtype: bool
        """
        return self._hide_cost

    @hide_cost.setter
    def hide_cost(self, hide_cost):
        """Sets the hide_cost of this ApiCoreDtoAccountingConversionOptions.


        :param hide_cost: The hide_cost of this ApiCoreDtoAccountingConversionOptions.
        :type hide_cost: bool
        """

        self._hide_cost = hide_cost

    @property
    def hide_count(self):
        """Gets the hide_count of this ApiCoreDtoAccountingConversionOptions.


        :return: The hide_count of this ApiCoreDtoAccountingConversionOptions.
        :rtype: bool
        """
        return self._hide_count

    @hide_count.setter
    def hide_count(self, hide_count):
        """Sets the hide_count of this ApiCoreDtoAccountingConversionOptions.


        :param hide_count: The hide_count of this ApiCoreDtoAccountingConversionOptions.
        :type hide_count: bool
        """

        self._hide_count = hide_count

    @property
    def hide_params(self):
        """Gets the hide_params of this ApiCoreDtoAccountingConversionOptions.


        :return: The hide_params of this ApiCoreDtoAccountingConversionOptions.
        :rtype: bool
        """
        return self._hide_params

    @hide_params.setter
    def hide_params(self, hide_params):
        """Sets the hide_params of this ApiCoreDtoAccountingConversionOptions.


        :param hide_params: The hide_params of this ApiCoreDtoAccountingConversionOptions.
        :type hide_params: bool
        """

        self._hide_params = hide_params

    @property
    def hide_value(self):
        """Gets the hide_value of this ApiCoreDtoAccountingConversionOptions.


        :return: The hide_value of this ApiCoreDtoAccountingConversionOptions.
        :rtype: bool
        """
        return self._hide_value

    @hide_value.setter
    def hide_value(self, hide_value):
        """Sets the hide_value of this ApiCoreDtoAccountingConversionOptions.


        :param hide_value: The hide_value of this ApiCoreDtoAccountingConversionOptions.
        :type hide_value: bool
        """

        self._hide_value = hide_value

    @property
    def percent_commission(self):
        """Gets the percent_commission of this ApiCoreDtoAccountingConversionOptions.


        :return: The percent_commission of this ApiCoreDtoAccountingConversionOptions.
        :rtype: int
        """
        return self._percent_commission

    @percent_commission.setter
    def percent_commission(self, percent_commission):
        """Sets the percent_commission of this ApiCoreDtoAccountingConversionOptions.


        :param percent_commission: The percent_commission of this ApiCoreDtoAccountingConversionOptions.
        :type percent_commission: int
        """

        self._percent_commission = percent_commission

    @property
    def percent_value(self):
        """Gets the percent_value of this ApiCoreDtoAccountingConversionOptions.


        :return: The percent_value of this ApiCoreDtoAccountingConversionOptions.
        :rtype: int
        """
        return self._percent_value

    @percent_value.setter
    def percent_value(self, percent_value):
        """Sets the percent_value of this ApiCoreDtoAccountingConversionOptions.


        :param percent_value: The percent_value of this ApiCoreDtoAccountingConversionOptions.
        :type percent_value: int
        """

        self._percent_value = percent_value
