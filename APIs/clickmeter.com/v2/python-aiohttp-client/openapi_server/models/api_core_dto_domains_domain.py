# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCoreDtoDomainsDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom404: str=None, custom_homepage: str=None, id: int=None, name: str=None, type: str=None):
        """ApiCoreDtoDomainsDomain - a model defined in OpenAPI

        :param custom404: The custom404 of this ApiCoreDtoDomainsDomain.
        :param custom_homepage: The custom_homepage of this ApiCoreDtoDomainsDomain.
        :param id: The id of this ApiCoreDtoDomainsDomain.
        :param name: The name of this ApiCoreDtoDomainsDomain.
        :param type: The type of this ApiCoreDtoDomainsDomain.
        """
        self.openapi_types = {
            'custom404': str,
            'custom_homepage': str,
            'id': int,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'custom404': 'custom404',
            'custom_homepage': 'customHomepage',
            'id': 'id',
            'name': 'name',
            'type': 'type'
        }

        self._custom404 = custom404
        self._custom_homepage = custom_homepage
        self._id = id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCoreDtoDomainsDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api.Core.Dto.Domains.Domain of this ApiCoreDtoDomainsDomain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom404(self):
        """Gets the custom404 of this ApiCoreDtoDomainsDomain.


        :return: The custom404 of this ApiCoreDtoDomainsDomain.
        :rtype: str
        """
        return self._custom404

    @custom404.setter
    def custom404(self, custom404):
        """Sets the custom404 of this ApiCoreDtoDomainsDomain.


        :param custom404: The custom404 of this ApiCoreDtoDomainsDomain.
        :type custom404: str
        """

        self._custom404 = custom404

    @property
    def custom_homepage(self):
        """Gets the custom_homepage of this ApiCoreDtoDomainsDomain.


        :return: The custom_homepage of this ApiCoreDtoDomainsDomain.
        :rtype: str
        """
        return self._custom_homepage

    @custom_homepage.setter
    def custom_homepage(self, custom_homepage):
        """Sets the custom_homepage of this ApiCoreDtoDomainsDomain.


        :param custom_homepage: The custom_homepage of this ApiCoreDtoDomainsDomain.
        :type custom_homepage: str
        """

        self._custom_homepage = custom_homepage

    @property
    def id(self):
        """Gets the id of this ApiCoreDtoDomainsDomain.


        :return: The id of this ApiCoreDtoDomainsDomain.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiCoreDtoDomainsDomain.


        :param id: The id of this ApiCoreDtoDomainsDomain.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiCoreDtoDomainsDomain.


        :return: The name of this ApiCoreDtoDomainsDomain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCoreDtoDomainsDomain.


        :param name: The name of this ApiCoreDtoDomainsDomain.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ApiCoreDtoDomainsDomain.


        :return: The type of this ApiCoreDtoDomainsDomain.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiCoreDtoDomainsDomain.


        :param type: The type of this ApiCoreDtoDomainsDomain.
        :type type: str
        """
        allowed_values = ["System", "Go", "Dedicated", "Personal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
