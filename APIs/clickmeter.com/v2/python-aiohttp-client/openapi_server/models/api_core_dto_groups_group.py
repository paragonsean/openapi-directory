# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_core_dto_tags_tag import ApiCoreDtoTagsTag
from openapi_server import util


class ApiCoreDtoGroupsGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: str=None, deleted: bool=None, id: int=None, is_public: bool=None, name: str=None, notes: str=None, preferred: bool=None, redirect_only: bool=None, tags: List[ApiCoreDtoTagsTag]=None, write_permited: bool=None):
        """ApiCoreDtoGroupsGroup - a model defined in OpenAPI

        :param creation_date: The creation_date of this ApiCoreDtoGroupsGroup.
        :param deleted: The deleted of this ApiCoreDtoGroupsGroup.
        :param id: The id of this ApiCoreDtoGroupsGroup.
        :param is_public: The is_public of this ApiCoreDtoGroupsGroup.
        :param name: The name of this ApiCoreDtoGroupsGroup.
        :param notes: The notes of this ApiCoreDtoGroupsGroup.
        :param preferred: The preferred of this ApiCoreDtoGroupsGroup.
        :param redirect_only: The redirect_only of this ApiCoreDtoGroupsGroup.
        :param tags: The tags of this ApiCoreDtoGroupsGroup.
        :param write_permited: The write_permited of this ApiCoreDtoGroupsGroup.
        """
        self.openapi_types = {
            'creation_date': str,
            'deleted': bool,
            'id': int,
            'is_public': bool,
            'name': str,
            'notes': str,
            'preferred': bool,
            'redirect_only': bool,
            'tags': List[ApiCoreDtoTagsTag],
            'write_permited': bool
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'deleted': 'deleted',
            'id': 'id',
            'is_public': 'isPublic',
            'name': 'name',
            'notes': 'notes',
            'preferred': 'preferred',
            'redirect_only': 'redirectOnly',
            'tags': 'tags',
            'write_permited': 'writePermited'
        }

        self._creation_date = creation_date
        self._deleted = deleted
        self._id = id
        self._is_public = is_public
        self._name = name
        self._notes = notes
        self._preferred = preferred
        self._redirect_only = redirect_only
        self._tags = tags
        self._write_permited = write_permited

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCoreDtoGroupsGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api.Core.Dto.Groups.Group of this ApiCoreDtoGroupsGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this ApiCoreDtoGroupsGroup.

         (A date in \"YmdHis\" format)

        :return: The creation_date of this ApiCoreDtoGroupsGroup.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ApiCoreDtoGroupsGroup.

         (A date in \"YmdHis\" format)

        :param creation_date: The creation_date of this ApiCoreDtoGroupsGroup.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def deleted(self):
        """Gets the deleted of this ApiCoreDtoGroupsGroup.


        :return: The deleted of this ApiCoreDtoGroupsGroup.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ApiCoreDtoGroupsGroup.


        :param deleted: The deleted of this ApiCoreDtoGroupsGroup.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this ApiCoreDtoGroupsGroup.


        :return: The id of this ApiCoreDtoGroupsGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiCoreDtoGroupsGroup.


        :param id: The id of this ApiCoreDtoGroupsGroup.
        :type id: int
        """

        self._id = id

    @property
    def is_public(self):
        """Gets the is_public of this ApiCoreDtoGroupsGroup.


        :return: The is_public of this ApiCoreDtoGroupsGroup.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ApiCoreDtoGroupsGroup.


        :param is_public: The is_public of this ApiCoreDtoGroupsGroup.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this ApiCoreDtoGroupsGroup.


        :return: The name of this ApiCoreDtoGroupsGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCoreDtoGroupsGroup.


        :param name: The name of this ApiCoreDtoGroupsGroup.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this ApiCoreDtoGroupsGroup.


        :return: The notes of this ApiCoreDtoGroupsGroup.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ApiCoreDtoGroupsGroup.


        :param notes: The notes of this ApiCoreDtoGroupsGroup.
        :type notes: str
        """

        self._notes = notes

    @property
    def preferred(self):
        """Gets the preferred of this ApiCoreDtoGroupsGroup.


        :return: The preferred of this ApiCoreDtoGroupsGroup.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this ApiCoreDtoGroupsGroup.


        :param preferred: The preferred of this ApiCoreDtoGroupsGroup.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def redirect_only(self):
        """Gets the redirect_only of this ApiCoreDtoGroupsGroup.


        :return: The redirect_only of this ApiCoreDtoGroupsGroup.
        :rtype: bool
        """
        return self._redirect_only

    @redirect_only.setter
    def redirect_only(self, redirect_only):
        """Sets the redirect_only of this ApiCoreDtoGroupsGroup.


        :param redirect_only: The redirect_only of this ApiCoreDtoGroupsGroup.
        :type redirect_only: bool
        """

        self._redirect_only = redirect_only

    @property
    def tags(self):
        """Gets the tags of this ApiCoreDtoGroupsGroup.


        :return: The tags of this ApiCoreDtoGroupsGroup.
        :rtype: List[ApiCoreDtoTagsTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiCoreDtoGroupsGroup.


        :param tags: The tags of this ApiCoreDtoGroupsGroup.
        :type tags: List[ApiCoreDtoTagsTag]
        """

        self._tags = tags

    @property
    def write_permited(self):
        """Gets the write_permited of this ApiCoreDtoGroupsGroup.


        :return: The write_permited of this ApiCoreDtoGroupsGroup.
        :rtype: bool
        """
        return self._write_permited

    @write_permited.setter
    def write_permited(self, write_permited):
        """Sets the write_permited of this ApiCoreDtoGroupsGroup.


        :param write_permited: The write_permited of this ApiCoreDtoGroupsGroup.
        :type write_permited: bool
        """

        self._write_permited = write_permited
