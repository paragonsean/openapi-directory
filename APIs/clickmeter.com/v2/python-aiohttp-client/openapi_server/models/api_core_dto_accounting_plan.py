# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCoreDtoAccountingPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_personal_domains: int=None, allowed_personal_urls: int=None, billing_period_end: str=None, billing_period_start: str=None, bonus_monthly_events: int=None, maximum_datapoints: int=None, maximum_guests: int=None, monthly_events: int=None, name: str=None, price: float=None, profile_id: int=None, recurring: bool=None, recurring_period: int=None, used_datapoints: int=None, used_monthly_events: int=None):
        """ApiCoreDtoAccountingPlan - a model defined in OpenAPI

        :param allowed_personal_domains: The allowed_personal_domains of this ApiCoreDtoAccountingPlan.
        :param allowed_personal_urls: The allowed_personal_urls of this ApiCoreDtoAccountingPlan.
        :param billing_period_end: The billing_period_end of this ApiCoreDtoAccountingPlan.
        :param billing_period_start: The billing_period_start of this ApiCoreDtoAccountingPlan.
        :param bonus_monthly_events: The bonus_monthly_events of this ApiCoreDtoAccountingPlan.
        :param maximum_datapoints: The maximum_datapoints of this ApiCoreDtoAccountingPlan.
        :param maximum_guests: The maximum_guests of this ApiCoreDtoAccountingPlan.
        :param monthly_events: The monthly_events of this ApiCoreDtoAccountingPlan.
        :param name: The name of this ApiCoreDtoAccountingPlan.
        :param price: The price of this ApiCoreDtoAccountingPlan.
        :param profile_id: The profile_id of this ApiCoreDtoAccountingPlan.
        :param recurring: The recurring of this ApiCoreDtoAccountingPlan.
        :param recurring_period: The recurring_period of this ApiCoreDtoAccountingPlan.
        :param used_datapoints: The used_datapoints of this ApiCoreDtoAccountingPlan.
        :param used_monthly_events: The used_monthly_events of this ApiCoreDtoAccountingPlan.
        """
        self.openapi_types = {
            'allowed_personal_domains': int,
            'allowed_personal_urls': int,
            'billing_period_end': str,
            'billing_period_start': str,
            'bonus_monthly_events': int,
            'maximum_datapoints': int,
            'maximum_guests': int,
            'monthly_events': int,
            'name': str,
            'price': float,
            'profile_id': int,
            'recurring': bool,
            'recurring_period': int,
            'used_datapoints': int,
            'used_monthly_events': int
        }

        self.attribute_map = {
            'allowed_personal_domains': 'allowedPersonalDomains',
            'allowed_personal_urls': 'allowedPersonalUrls',
            'billing_period_end': 'billingPeriodEnd',
            'billing_period_start': 'billingPeriodStart',
            'bonus_monthly_events': 'bonusMonthlyEvents',
            'maximum_datapoints': 'maximumDatapoints',
            'maximum_guests': 'maximumGuests',
            'monthly_events': 'monthlyEvents',
            'name': 'name',
            'price': 'price',
            'profile_id': 'profileId',
            'recurring': 'recurring',
            'recurring_period': 'recurringPeriod',
            'used_datapoints': 'usedDatapoints',
            'used_monthly_events': 'usedMonthlyEvents'
        }

        self._allowed_personal_domains = allowed_personal_domains
        self._allowed_personal_urls = allowed_personal_urls
        self._billing_period_end = billing_period_end
        self._billing_period_start = billing_period_start
        self._bonus_monthly_events = bonus_monthly_events
        self._maximum_datapoints = maximum_datapoints
        self._maximum_guests = maximum_guests
        self._monthly_events = monthly_events
        self._name = name
        self._price = price
        self._profile_id = profile_id
        self._recurring = recurring
        self._recurring_period = recurring_period
        self._used_datapoints = used_datapoints
        self._used_monthly_events = used_monthly_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCoreDtoAccountingPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api.Core.Dto.Accounting.Plan of this ApiCoreDtoAccountingPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_personal_domains(self):
        """Gets the allowed_personal_domains of this ApiCoreDtoAccountingPlan.


        :return: The allowed_personal_domains of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._allowed_personal_domains

    @allowed_personal_domains.setter
    def allowed_personal_domains(self, allowed_personal_domains):
        """Sets the allowed_personal_domains of this ApiCoreDtoAccountingPlan.


        :param allowed_personal_domains: The allowed_personal_domains of this ApiCoreDtoAccountingPlan.
        :type allowed_personal_domains: int
        """

        self._allowed_personal_domains = allowed_personal_domains

    @property
    def allowed_personal_urls(self):
        """Gets the allowed_personal_urls of this ApiCoreDtoAccountingPlan.


        :return: The allowed_personal_urls of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._allowed_personal_urls

    @allowed_personal_urls.setter
    def allowed_personal_urls(self, allowed_personal_urls):
        """Sets the allowed_personal_urls of this ApiCoreDtoAccountingPlan.


        :param allowed_personal_urls: The allowed_personal_urls of this ApiCoreDtoAccountingPlan.
        :type allowed_personal_urls: int
        """

        self._allowed_personal_urls = allowed_personal_urls

    @property
    def billing_period_end(self):
        """Gets the billing_period_end of this ApiCoreDtoAccountingPlan.

         (A date in \"YmdHis\" format)

        :return: The billing_period_end of this ApiCoreDtoAccountingPlan.
        :rtype: str
        """
        return self._billing_period_end

    @billing_period_end.setter
    def billing_period_end(self, billing_period_end):
        """Sets the billing_period_end of this ApiCoreDtoAccountingPlan.

         (A date in \"YmdHis\" format)

        :param billing_period_end: The billing_period_end of this ApiCoreDtoAccountingPlan.
        :type billing_period_end: str
        """

        self._billing_period_end = billing_period_end

    @property
    def billing_period_start(self):
        """Gets the billing_period_start of this ApiCoreDtoAccountingPlan.

         (A date in \"YmdHis\" format)

        :return: The billing_period_start of this ApiCoreDtoAccountingPlan.
        :rtype: str
        """
        return self._billing_period_start

    @billing_period_start.setter
    def billing_period_start(self, billing_period_start):
        """Sets the billing_period_start of this ApiCoreDtoAccountingPlan.

         (A date in \"YmdHis\" format)

        :param billing_period_start: The billing_period_start of this ApiCoreDtoAccountingPlan.
        :type billing_period_start: str
        """

        self._billing_period_start = billing_period_start

    @property
    def bonus_monthly_events(self):
        """Gets the bonus_monthly_events of this ApiCoreDtoAccountingPlan.


        :return: The bonus_monthly_events of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._bonus_monthly_events

    @bonus_monthly_events.setter
    def bonus_monthly_events(self, bonus_monthly_events):
        """Sets the bonus_monthly_events of this ApiCoreDtoAccountingPlan.


        :param bonus_monthly_events: The bonus_monthly_events of this ApiCoreDtoAccountingPlan.
        :type bonus_monthly_events: int
        """

        self._bonus_monthly_events = bonus_monthly_events

    @property
    def maximum_datapoints(self):
        """Gets the maximum_datapoints of this ApiCoreDtoAccountingPlan.


        :return: The maximum_datapoints of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._maximum_datapoints

    @maximum_datapoints.setter
    def maximum_datapoints(self, maximum_datapoints):
        """Sets the maximum_datapoints of this ApiCoreDtoAccountingPlan.


        :param maximum_datapoints: The maximum_datapoints of this ApiCoreDtoAccountingPlan.
        :type maximum_datapoints: int
        """

        self._maximum_datapoints = maximum_datapoints

    @property
    def maximum_guests(self):
        """Gets the maximum_guests of this ApiCoreDtoAccountingPlan.


        :return: The maximum_guests of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._maximum_guests

    @maximum_guests.setter
    def maximum_guests(self, maximum_guests):
        """Sets the maximum_guests of this ApiCoreDtoAccountingPlan.


        :param maximum_guests: The maximum_guests of this ApiCoreDtoAccountingPlan.
        :type maximum_guests: int
        """

        self._maximum_guests = maximum_guests

    @property
    def monthly_events(self):
        """Gets the monthly_events of this ApiCoreDtoAccountingPlan.


        :return: The monthly_events of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._monthly_events

    @monthly_events.setter
    def monthly_events(self, monthly_events):
        """Sets the monthly_events of this ApiCoreDtoAccountingPlan.


        :param monthly_events: The monthly_events of this ApiCoreDtoAccountingPlan.
        :type monthly_events: int
        """

        self._monthly_events = monthly_events

    @property
    def name(self):
        """Gets the name of this ApiCoreDtoAccountingPlan.


        :return: The name of this ApiCoreDtoAccountingPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCoreDtoAccountingPlan.


        :param name: The name of this ApiCoreDtoAccountingPlan.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this ApiCoreDtoAccountingPlan.


        :return: The price of this ApiCoreDtoAccountingPlan.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ApiCoreDtoAccountingPlan.


        :param price: The price of this ApiCoreDtoAccountingPlan.
        :type price: float
        """

        self._price = price

    @property
    def profile_id(self):
        """Gets the profile_id of this ApiCoreDtoAccountingPlan.


        :return: The profile_id of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this ApiCoreDtoAccountingPlan.


        :param profile_id: The profile_id of this ApiCoreDtoAccountingPlan.
        :type profile_id: int
        """

        self._profile_id = profile_id

    @property
    def recurring(self):
        """Gets the recurring of this ApiCoreDtoAccountingPlan.


        :return: The recurring of this ApiCoreDtoAccountingPlan.
        :rtype: bool
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this ApiCoreDtoAccountingPlan.


        :param recurring: The recurring of this ApiCoreDtoAccountingPlan.
        :type recurring: bool
        """

        self._recurring = recurring

    @property
    def recurring_period(self):
        """Gets the recurring_period of this ApiCoreDtoAccountingPlan.


        :return: The recurring_period of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._recurring_period

    @recurring_period.setter
    def recurring_period(self, recurring_period):
        """Sets the recurring_period of this ApiCoreDtoAccountingPlan.


        :param recurring_period: The recurring_period of this ApiCoreDtoAccountingPlan.
        :type recurring_period: int
        """

        self._recurring_period = recurring_period

    @property
    def used_datapoints(self):
        """Gets the used_datapoints of this ApiCoreDtoAccountingPlan.


        :return: The used_datapoints of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._used_datapoints

    @used_datapoints.setter
    def used_datapoints(self, used_datapoints):
        """Sets the used_datapoints of this ApiCoreDtoAccountingPlan.


        :param used_datapoints: The used_datapoints of this ApiCoreDtoAccountingPlan.
        :type used_datapoints: int
        """

        self._used_datapoints = used_datapoints

    @property
    def used_monthly_events(self):
        """Gets the used_monthly_events of this ApiCoreDtoAccountingPlan.


        :return: The used_monthly_events of this ApiCoreDtoAccountingPlan.
        :rtype: int
        """
        return self._used_monthly_events

    @used_monthly_events.setter
    def used_monthly_events(self, used_monthly_events):
        """Sets the used_monthly_events of this ApiCoreDtoAccountingPlan.


        :param used_monthly_events: The used_monthly_events of this ApiCoreDtoAccountingPlan.
        :type used_monthly_events: int
        """

        self._used_monthly_events = used_monthly_events
