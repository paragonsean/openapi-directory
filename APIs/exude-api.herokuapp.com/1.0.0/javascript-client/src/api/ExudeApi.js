/**
 * Exude API Service
 * Exude API is an Open Source project, It is used for the primary ways for filtering the stopping, stemming words from the text data. This API is in a very basic level of development need to work on for later changes.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExudeResponseBean from '../model/ExudeResponseBean';

/**
* Exude service.
* @module api/ExudeApi
* @version 1.0.0
*/
export default class ExudeApi {

    /**
    * Constructs a new ExudeApi. 
    * @alias module:api/ExudeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filterFileDataStoppings operation.
     * @callback module:api/ExudeApi~filterFileDataStoppingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExudeResponseBean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter the stopping words from the provided input file
     * @param {String} type provide the type of filtering required stopping/swear
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/ExudeApi~filterFileDataStoppingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExudeResponseBean}
     */
    filterFileDataStoppings(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling filterFileDataStoppings");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ExudeResponseBean;
      return this.apiClient.callApi(
        '/exude/{type}/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterStoppings operation.
     * @callback module:api/ExudeApi~filterStoppingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExudeResponseBean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter the stopping words from the provided input data or links
     * @param {String} type provide the type of filtering required stopping/swear
     * @param {Object} opts Optional parameters
     * @param {String} [data] 
     * @param {Array.<String>} [links] 
     * @param {module:api/ExudeApi~filterStoppingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExudeResponseBean}
     */
    filterStoppings(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling filterStoppings");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'links': this.apiClient.buildCollectionParam(opts['links'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ExudeResponseBean;
      return this.apiClient.callApi(
        '/exude/{type}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
