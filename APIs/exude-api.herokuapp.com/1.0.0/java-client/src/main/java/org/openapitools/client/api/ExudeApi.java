/*
 * Exude API Service
 * Exude API is an Open Source project, It is used for the primary ways for filtering the stopping, stemming words from the text data. This API is in a very basic level of development need to work on for later changes.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExudeResponseBean;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExudeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExudeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExudeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for filterFileDataStoppings
     * @param type provide the type of filtering required stopping/swear (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> model response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterFileDataStoppingsCall(String type, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/exude/{type}/file"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filterFileDataStoppingsValidateBeforeCall(String type, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling filterFileDataStoppings(Async)");
        }

        return filterFileDataStoppingsCall(type, _file, _callback);

    }

    /**
     * Filter the stopping words from the provided input file
     * 
     * @param type provide the type of filtering required stopping/swear (required)
     * @param _file  (optional)
     * @return ExudeResponseBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> model response </td><td>  -  </td></tr>
     </table>
     */
    public ExudeResponseBean filterFileDataStoppings(String type, File _file) throws ApiException {
        ApiResponse<ExudeResponseBean> localVarResp = filterFileDataStoppingsWithHttpInfo(type, _file);
        return localVarResp.getData();
    }

    /**
     * Filter the stopping words from the provided input file
     * 
     * @param type provide the type of filtering required stopping/swear (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;ExudeResponseBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> model response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExudeResponseBean> filterFileDataStoppingsWithHttpInfo(String type, File _file) throws ApiException {
        okhttp3.Call localVarCall = filterFileDataStoppingsValidateBeforeCall(type, _file, null);
        Type localVarReturnType = new TypeToken<ExudeResponseBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter the stopping words from the provided input file (asynchronously)
     * 
     * @param type provide the type of filtering required stopping/swear (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> model response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterFileDataStoppingsAsync(String type, File _file, final ApiCallback<ExudeResponseBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = filterFileDataStoppingsValidateBeforeCall(type, _file, _callback);
        Type localVarReturnType = new TypeToken<ExudeResponseBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filterStoppings
     * @param type provide the type of filtering required stopping/swear (required)
     * @param data  (optional)
     * @param links  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exude response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterStoppingsCall(String type, String data, List<String> links, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/exude/{type}/data"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        if (links != null) {
            localVarFormParams.put("links", links);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filterStoppingsValidateBeforeCall(String type, String data, List<String> links, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling filterStoppings(Async)");
        }

        return filterStoppingsCall(type, data, links, _callback);

    }

    /**
     * Filter the stopping words from the provided input data or links
     * 
     * @param type provide the type of filtering required stopping/swear (required)
     * @param data  (optional)
     * @param links  (optional)
     * @return ExudeResponseBean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exude response </td><td>  -  </td></tr>
     </table>
     */
    public ExudeResponseBean filterStoppings(String type, String data, List<String> links) throws ApiException {
        ApiResponse<ExudeResponseBean> localVarResp = filterStoppingsWithHttpInfo(type, data, links);
        return localVarResp.getData();
    }

    /**
     * Filter the stopping words from the provided input data or links
     * 
     * @param type provide the type of filtering required stopping/swear (required)
     * @param data  (optional)
     * @param links  (optional)
     * @return ApiResponse&lt;ExudeResponseBean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exude response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExudeResponseBean> filterStoppingsWithHttpInfo(String type, String data, List<String> links) throws ApiException {
        okhttp3.Call localVarCall = filterStoppingsValidateBeforeCall(type, data, links, null);
        Type localVarReturnType = new TypeToken<ExudeResponseBean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter the stopping words from the provided input data or links (asynchronously)
     * 
     * @param type provide the type of filtering required stopping/swear (required)
     * @param data  (optional)
     * @param links  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Exude response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterStoppingsAsync(String type, String data, List<String> links, final ApiCallback<ExudeResponseBean> _callback) throws ApiException {

        okhttp3.Call localVarCall = filterStoppingsValidateBeforeCall(type, data, links, _callback);
        Type localVarReturnType = new TypeToken<ExudeResponseBean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
