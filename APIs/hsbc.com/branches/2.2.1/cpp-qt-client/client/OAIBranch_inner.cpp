/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranch_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranch_inner::OAIBranch_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranch_inner::OAIBranch_inner() {
    this->initializeModel();
}

OAIBranch_inner::~OAIBranch_inner() {}

void OAIBranch_inner::initializeModel() {

    m_accessibility_isSet = false;
    m_accessibility_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_contact_info_isSet = false;
    m_contact_info_isValid = false;

    m_customer_segment_isSet = false;
    m_customer_segment_isValid = false;

    m_identification_isSet = false;
    m_identification_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_other_accessibility_isSet = false;
    m_other_accessibility_isValid = false;

    m_other_customer_segment_isSet = false;
    m_other_customer_segment_isValid = false;

    m_other_service_and_facility_isSet = false;
    m_other_service_and_facility_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;

    m_postal_address_isSet = false;
    m_postal_address_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_service_and_facility_isSet = false;
    m_service_and_facility_isValid = false;

    m_sort_code_isSet = false;
    m_sort_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBranch_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranch_inner::fromJsonObject(QJsonObject json) {

    m_accessibility_isValid = ::OpenAPI::fromJsonValue(m_accessibility, json[QString("Accessibility")]);
    m_accessibility_isSet = !json[QString("Accessibility")].isNull() && m_accessibility_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("Availability")]);
    m_availability_isSet = !json[QString("Availability")].isNull() && m_availability_isValid;

    m_contact_info_isValid = ::OpenAPI::fromJsonValue(m_contact_info, json[QString("ContactInfo")]);
    m_contact_info_isSet = !json[QString("ContactInfo")].isNull() && m_contact_info_isValid;

    m_customer_segment_isValid = ::OpenAPI::fromJsonValue(m_customer_segment, json[QString("CustomerSegment")]);
    m_customer_segment_isSet = !json[QString("CustomerSegment")].isNull() && m_customer_segment_isValid;

    m_identification_isValid = ::OpenAPI::fromJsonValue(m_identification, json[QString("Identification")]);
    m_identification_isSet = !json[QString("Identification")].isNull() && m_identification_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("Note")]);
    m_note_isSet = !json[QString("Note")].isNull() && m_note_isValid;

    m_other_accessibility_isValid = ::OpenAPI::fromJsonValue(m_other_accessibility, json[QString("OtherAccessibility")]);
    m_other_accessibility_isSet = !json[QString("OtherAccessibility")].isNull() && m_other_accessibility_isValid;

    m_other_customer_segment_isValid = ::OpenAPI::fromJsonValue(m_other_customer_segment, json[QString("OtherCustomerSegment")]);
    m_other_customer_segment_isSet = !json[QString("OtherCustomerSegment")].isNull() && m_other_customer_segment_isValid;

    m_other_service_and_facility_isValid = ::OpenAPI::fromJsonValue(m_other_service_and_facility, json[QString("OtherServiceAndFacility")]);
    m_other_service_and_facility_isSet = !json[QString("OtherServiceAndFacility")].isNull() && m_other_service_and_facility_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("Photo")]);
    m_photo_isSet = !json[QString("Photo")].isNull() && m_photo_isValid;

    m_postal_address_isValid = ::OpenAPI::fromJsonValue(m_postal_address, json[QString("PostalAddress")]);
    m_postal_address_isSet = !json[QString("PostalAddress")].isNull() && m_postal_address_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;

    m_service_and_facility_isValid = ::OpenAPI::fromJsonValue(m_service_and_facility, json[QString("ServiceAndFacility")]);
    m_service_and_facility_isSet = !json[QString("ServiceAndFacility")].isNull() && m_service_and_facility_isValid;

    m_sort_code_isValid = ::OpenAPI::fromJsonValue(m_sort_code, json[QString("SortCode")]);
    m_sort_code_isSet = !json[QString("SortCode")].isNull() && m_sort_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIBranch_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranch_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility.size() > 0) {
        obj.insert(QString("Accessibility"), ::OpenAPI::toJsonValue(m_accessibility));
    }
    if (m_availability_isSet) {
        obj.insert(QString("Availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_contact_info.size() > 0) {
        obj.insert(QString("ContactInfo"), ::OpenAPI::toJsonValue(m_contact_info));
    }
    if (m_customer_segment.size() > 0) {
        obj.insert(QString("CustomerSegment"), ::OpenAPI::toJsonValue(m_customer_segment));
    }
    if (m_identification_isSet) {
        obj.insert(QString("Identification"), ::OpenAPI::toJsonValue(m_identification));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_note_isSet) {
        obj.insert(QString("Note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_other_accessibility.size() > 0) {
        obj.insert(QString("OtherAccessibility"), ::OpenAPI::toJsonValue(m_other_accessibility));
    }
    if (m_other_customer_segment.size() > 0) {
        obj.insert(QString("OtherCustomerSegment"), ::OpenAPI::toJsonValue(m_other_customer_segment));
    }
    if (m_other_service_and_facility.size() > 0) {
        obj.insert(QString("OtherServiceAndFacility"), ::OpenAPI::toJsonValue(m_other_service_and_facility));
    }
    if (m_photo_isSet) {
        obj.insert(QString("Photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    if (m_postal_address_isSet) {
        obj.insert(QString("PostalAddress"), ::OpenAPI::toJsonValue(m_postal_address));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_service_and_facility.size() > 0) {
        obj.insert(QString("ServiceAndFacility"), ::OpenAPI::toJsonValue(m_service_and_facility));
    }
    if (m_sort_code.size() > 0) {
        obj.insert(QString("SortCode"), ::OpenAPI::toJsonValue(m_sort_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIBranch_inner::getAccessibility() const {
    return m_accessibility;
}
void OAIBranch_inner::setAccessibility(const QList<QString> &accessibility) {
    m_accessibility = accessibility;
    m_accessibility_isSet = true;
}

bool OAIBranch_inner::is_accessibility_Set() const{
    return m_accessibility_isSet;
}

bool OAIBranch_inner::is_accessibility_Valid() const{
    return m_accessibility_isValid;
}

OAIObject OAIBranch_inner::getAvailability() const {
    return m_availability;
}
void OAIBranch_inner::setAvailability(const OAIObject &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIBranch_inner::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIBranch_inner::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAIContactInfo_inner> OAIBranch_inner::getContactInfo() const {
    return m_contact_info;
}
void OAIBranch_inner::setContactInfo(const QList<OAIContactInfo_inner> &contact_info) {
    m_contact_info = contact_info;
    m_contact_info_isSet = true;
}

bool OAIBranch_inner::is_contact_info_Set() const{
    return m_contact_info_isSet;
}

bool OAIBranch_inner::is_contact_info_Valid() const{
    return m_contact_info_isValid;
}

QList<QString> OAIBranch_inner::getCustomerSegment() const {
    return m_customer_segment;
}
void OAIBranch_inner::setCustomerSegment(const QList<QString> &customer_segment) {
    m_customer_segment = customer_segment;
    m_customer_segment_isSet = true;
}

bool OAIBranch_inner::is_customer_segment_Set() const{
    return m_customer_segment_isSet;
}

bool OAIBranch_inner::is_customer_segment_Valid() const{
    return m_customer_segment_isValid;
}

QString OAIBranch_inner::getIdentification() const {
    return m_identification;
}
void OAIBranch_inner::setIdentification(const QString &identification) {
    m_identification = identification;
    m_identification_isSet = true;
}

bool OAIBranch_inner::is_identification_Set() const{
    return m_identification_isSet;
}

bool OAIBranch_inner::is_identification_Valid() const{
    return m_identification_isValid;
}

QString OAIBranch_inner::getName() const {
    return m_name;
}
void OAIBranch_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBranch_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBranch_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBranch_inner::getNote() const {
    return m_note;
}
void OAIBranch_inner::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIBranch_inner::is_note_Set() const{
    return m_note_isSet;
}

bool OAIBranch_inner::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIOtherAccessibility_inner> OAIBranch_inner::getOtherAccessibility() const {
    return m_other_accessibility;
}
void OAIBranch_inner::setOtherAccessibility(const QList<OAIOtherAccessibility_inner> &other_accessibility) {
    m_other_accessibility = other_accessibility;
    m_other_accessibility_isSet = true;
}

bool OAIBranch_inner::is_other_accessibility_Set() const{
    return m_other_accessibility_isSet;
}

bool OAIBranch_inner::is_other_accessibility_Valid() const{
    return m_other_accessibility_isValid;
}

QList<OAIOtherCustomerSegment_inner> OAIBranch_inner::getOtherCustomerSegment() const {
    return m_other_customer_segment;
}
void OAIBranch_inner::setOtherCustomerSegment(const QList<OAIOtherCustomerSegment_inner> &other_customer_segment) {
    m_other_customer_segment = other_customer_segment;
    m_other_customer_segment_isSet = true;
}

bool OAIBranch_inner::is_other_customer_segment_Set() const{
    return m_other_customer_segment_isSet;
}

bool OAIBranch_inner::is_other_customer_segment_Valid() const{
    return m_other_customer_segment_isValid;
}

QList<OAIOtherServiceAndFacility_inner> OAIBranch_inner::getOtherServiceAndFacility() const {
    return m_other_service_and_facility;
}
void OAIBranch_inner::setOtherServiceAndFacility(const QList<OAIOtherServiceAndFacility_inner> &other_service_and_facility) {
    m_other_service_and_facility = other_service_and_facility;
    m_other_service_and_facility_isSet = true;
}

bool OAIBranch_inner::is_other_service_and_facility_Set() const{
    return m_other_service_and_facility_isSet;
}

bool OAIBranch_inner::is_other_service_and_facility_Valid() const{
    return m_other_service_and_facility_isValid;
}

QString OAIBranch_inner::getPhoto() const {
    return m_photo;
}
void OAIBranch_inner::setPhoto(const QString &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIBranch_inner::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIBranch_inner::is_photo_Valid() const{
    return m_photo_isValid;
}

OAIObject OAIBranch_inner::getPostalAddress() const {
    return m_postal_address;
}
void OAIBranch_inner::setPostalAddress(const OAIObject &postal_address) {
    m_postal_address = postal_address;
    m_postal_address_isSet = true;
}

bool OAIBranch_inner::is_postal_address_Set() const{
    return m_postal_address_isSet;
}

bool OAIBranch_inner::is_postal_address_Valid() const{
    return m_postal_address_isValid;
}

QString OAIBranch_inner::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIBranch_inner::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIBranch_inner::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIBranch_inner::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

QList<QString> OAIBranch_inner::getServiceAndFacility() const {
    return m_service_and_facility;
}
void OAIBranch_inner::setServiceAndFacility(const QList<QString> &service_and_facility) {
    m_service_and_facility = service_and_facility;
    m_service_and_facility_isSet = true;
}

bool OAIBranch_inner::is_service_and_facility_Set() const{
    return m_service_and_facility_isSet;
}

bool OAIBranch_inner::is_service_and_facility_Valid() const{
    return m_service_and_facility_isValid;
}

QList<QString> OAIBranch_inner::getSortCode() const {
    return m_sort_code;
}
void OAIBranch_inner::setSortCode(const QList<QString> &sort_code) {
    m_sort_code = sort_code;
    m_sort_code_isSet = true;
}

bool OAIBranch_inner::is_sort_code_Set() const{
    return m_sort_code_isSet;
}

bool OAIBranch_inner::is_sort_code_Valid() const{
    return m_sort_code_isValid;
}

QString OAIBranch_inner::getType() const {
    return m_type;
}
void OAIBranch_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBranch_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBranch_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBranch_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_segment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_accessibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_customer_segment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_service_and_facility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_and_facility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranch_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_segment_isValid && m_identification_isValid && m_postal_address_isValid && m_sequence_number_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
