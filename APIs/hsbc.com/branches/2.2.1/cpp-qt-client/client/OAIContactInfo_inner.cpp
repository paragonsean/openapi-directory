/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactInfo_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactInfo_inner::OAIContactInfo_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactInfo_inner::OAIContactInfo_inner() {
    this->initializeModel();
}

OAIContactInfo_inner::~OAIContactInfo_inner() {}

void OAIContactInfo_inner::initializeModel() {

    m_contact_content_isSet = false;
    m_contact_content_isValid = false;

    m_contact_description_isSet = false;
    m_contact_description_isValid = false;

    m_contact_type_isSet = false;
    m_contact_type_isValid = false;

    m_other_contact_type_isSet = false;
    m_other_contact_type_isValid = false;
}

void OAIContactInfo_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactInfo_inner::fromJsonObject(QJsonObject json) {

    m_contact_content_isValid = ::OpenAPI::fromJsonValue(m_contact_content, json[QString("ContactContent")]);
    m_contact_content_isSet = !json[QString("ContactContent")].isNull() && m_contact_content_isValid;

    m_contact_description_isValid = ::OpenAPI::fromJsonValue(m_contact_description, json[QString("ContactDescription")]);
    m_contact_description_isSet = !json[QString("ContactDescription")].isNull() && m_contact_description_isValid;

    m_contact_type_isValid = ::OpenAPI::fromJsonValue(m_contact_type, json[QString("ContactType")]);
    m_contact_type_isSet = !json[QString("ContactType")].isNull() && m_contact_type_isValid;

    m_other_contact_type_isValid = ::OpenAPI::fromJsonValue(m_other_contact_type, json[QString("OtherContactType")]);
    m_other_contact_type_isSet = !json[QString("OtherContactType")].isNull() && m_other_contact_type_isValid;
}

QString OAIContactInfo_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactInfo_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_content_isSet) {
        obj.insert(QString("ContactContent"), ::OpenAPI::toJsonValue(m_contact_content));
    }
    if (m_contact_description_isSet) {
        obj.insert(QString("ContactDescription"), ::OpenAPI::toJsonValue(m_contact_description));
    }
    if (m_contact_type_isSet) {
        obj.insert(QString("ContactType"), ::OpenAPI::toJsonValue(m_contact_type));
    }
    if (m_other_contact_type_isSet) {
        obj.insert(QString("OtherContactType"), ::OpenAPI::toJsonValue(m_other_contact_type));
    }
    return obj;
}

QString OAIContactInfo_inner::getContactContent() const {
    return m_contact_content;
}
void OAIContactInfo_inner::setContactContent(const QString &contact_content) {
    m_contact_content = contact_content;
    m_contact_content_isSet = true;
}

bool OAIContactInfo_inner::is_contact_content_Set() const{
    return m_contact_content_isSet;
}

bool OAIContactInfo_inner::is_contact_content_Valid() const{
    return m_contact_content_isValid;
}

QString OAIContactInfo_inner::getContactDescription() const {
    return m_contact_description;
}
void OAIContactInfo_inner::setContactDescription(const QString &contact_description) {
    m_contact_description = contact_description;
    m_contact_description_isSet = true;
}

bool OAIContactInfo_inner::is_contact_description_Set() const{
    return m_contact_description_isSet;
}

bool OAIContactInfo_inner::is_contact_description_Valid() const{
    return m_contact_description_isValid;
}

QString OAIContactInfo_inner::getContactType() const {
    return m_contact_type;
}
void OAIContactInfo_inner::setContactType(const QString &contact_type) {
    m_contact_type = contact_type;
    m_contact_type_isSet = true;
}

bool OAIContactInfo_inner::is_contact_type_Set() const{
    return m_contact_type_isSet;
}

bool OAIContactInfo_inner::is_contact_type_Valid() const{
    return m_contact_type_isValid;
}

OAIObject OAIContactInfo_inner::getOtherContactType() const {
    return m_other_contact_type;
}
void OAIContactInfo_inner::setOtherContactType(const OAIObject &other_contact_type) {
    m_other_contact_type = other_contact_type;
    m_other_contact_type_isSet = true;
}

bool OAIContactInfo_inner::is_other_contact_type_Set() const{
    return m_other_contact_type_isSet;
}

bool OAIContactInfo_inner::is_other_contact_type_Valid() const{
    return m_other_contact_type_isValid;
}

bool OAIContactInfo_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_contact_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactInfo_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_content_isValid && m_contact_type_isValid && true;
}

} // namespace OpenAPI
