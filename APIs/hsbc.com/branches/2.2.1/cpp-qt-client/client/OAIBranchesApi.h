/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBranchesApi_H
#define OAI_OAIBranchesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranchDefinitionMeta.h"
#include "OAIErrorDefinition400.h"
#include "OAIErrorDefinition408.h"
#include "OAIErrorDefinition429.h"
#include "OAIErrorDefinition500.h"
#include "OAIErrorDefinition503.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBranchesApi : public QObject {
    Q_OBJECT

public:
    OAIBranchesApi(const int timeOut = 0);
    ~OAIBranchesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void openBankingV22BranchesGet();

    /**
    * @param[in]  country QString [required]
    */
    virtual void xOpenBankingV22BranchesCountryCountryGet(const QString &country);

    /**
    * @param[in]  country QString [required]
    * @param[in]  town QString [required]
    */
    virtual void xOpenBankingV22BranchesCountryCountryTownTownGet(const QString &country, const QString &town);

    /**
    * @param[in]  latitude QString [required]
    * @param[in]  longitude QString [required]
    * @param[in]  radius double [required]
    */
    virtual void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGet(const QString &latitude, const QString &longitude, const double &radius);

    /**
    * @param[in]  postcode QString [required]
    */
    virtual void xOpenBankingV22BranchesPostcodePostcodeGet(const QString &postcode);

    /**
    * @param[in]  sortcode QString [required]
    */
    virtual void xOpenBankingV22BranchesSortcodeSortcodeGet(const QString &sortcode);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void openBankingV22BranchesGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22BranchesCountryCountryGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22BranchesCountryCountryTownTownGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22BranchesPostcodePostcodeGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22BranchesSortcodeSortcodeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void openBankingV22BranchesGetSignal(OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesCountryCountryGetSignal(OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesCountryCountryTownTownGetSignal(OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignal(OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesPostcodePostcodeGetSignal(OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesSortcodeSortcodeGetSignal(OAIBranchDefinitionMeta summary);


    void openBankingV22BranchesGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesCountryCountryGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesCountryCountryTownTownGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesPostcodePostcodeGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchDefinitionMeta summary);
    void xOpenBankingV22BranchesSortcodeSortcodeGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchDefinitionMeta summary);

    Q_DECL_DEPRECATED_X("Use openBankingV22BranchesGetSignalError() instead")
    void openBankingV22BranchesGetSignalE(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openBankingV22BranchesGetSignalError(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesCountryCountryGetSignalError() instead")
    void xOpenBankingV22BranchesCountryCountryGetSignalE(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesCountryCountryGetSignalError(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesCountryCountryTownTownGetSignalError() instead")
    void xOpenBankingV22BranchesCountryCountryTownTownGetSignalE(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesCountryCountryTownTownGetSignalError(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignalError() instead")
    void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignalE(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignalError(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesPostcodePostcodeGetSignalError() instead")
    void xOpenBankingV22BranchesPostcodePostcodeGetSignalE(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesPostcodePostcodeGetSignalError(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesSortcodeSortcodeGetSignalError() instead")
    void xOpenBankingV22BranchesSortcodeSortcodeGetSignalE(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesSortcodeSortcodeGetSignalError(OAIBranchDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use openBankingV22BranchesGetSignalErrorFull() instead")
    void openBankingV22BranchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openBankingV22BranchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesCountryCountryGetSignalErrorFull() instead")
    void xOpenBankingV22BranchesCountryCountryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesCountryCountryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesCountryCountryTownTownGetSignalErrorFull() instead")
    void xOpenBankingV22BranchesCountryCountryTownTownGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesCountryCountryTownTownGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignalErrorFull() instead")
    void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesGeoLocationLatLatitudeLongLongitudeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesPostcodePostcodeGetSignalErrorFull() instead")
    void xOpenBankingV22BranchesPostcodePostcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesPostcodePostcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22BranchesSortcodeSortcodeGetSignalErrorFull() instead")
    void xOpenBankingV22BranchesSortcodeSortcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22BranchesSortcodeSortcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
