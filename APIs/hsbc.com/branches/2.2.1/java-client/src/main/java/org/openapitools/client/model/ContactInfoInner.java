/*
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Communication device number or electronic address used for communication.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:50.652655-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactInfoInner {
  public static final String SERIALIZED_NAME_CONTACT_CONTENT = "ContactContent";
  @SerializedName(SERIALIZED_NAME_CONTACT_CONTENT)
  private String contactContent;

  public static final String SERIALIZED_NAME_CONTACT_DESCRIPTION = "ContactDescription";
  @SerializedName(SERIALIZED_NAME_CONTACT_DESCRIPTION)
  private String contactDescription;

  /**
   * Contact type such Phone, Fax and email
   */
  @JsonAdapter(ContactTypeEnum.Adapter.class)
  public enum ContactTypeEnum {
    ALTERNATE_EMAIL("AlternateEmail"),
    
    ALTERNATE_FAX("AlternateFax"),
    
    ALTERNATE_PHONE("AlternatePhone"),
    
    EMAIL("Email"),
    
    FAX("Fax"),
    
    OTHER("Other"),
    
    PHONE("Phone");

    private String value;

    ContactTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContactTypeEnum fromValue(String value) {
      for (ContactTypeEnum b : ContactTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContactTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContactTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContactTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContactTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContactTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTACT_TYPE = "ContactType";
  @SerializedName(SERIALIZED_NAME_CONTACT_TYPE)
  private ContactTypeEnum contactType;

  public static final String SERIALIZED_NAME_OTHER_CONTACT_TYPE = "OtherContactType";
  @SerializedName(SERIALIZED_NAME_OTHER_CONTACT_TYPE)
  private Object otherContactType;

  public ContactInfoInner() {
  }

  public ContactInfoInner contactContent(String contactContent) {
    this.contactContent = contactContent;
    return this;
  }

  /**
   * Collection of information that identifies a phone/Fax number/ email, as defined by telecom services.
   * @return contactContent
   */
  @javax.annotation.Nonnull
  public String getContactContent() {
    return contactContent;
  }

  public void setContactContent(String contactContent) {
    this.contactContent = contactContent;
  }


  public ContactInfoInner contactDescription(String contactDescription) {
    this.contactDescription = contactDescription;
    return this;
  }

  /**
   * Description of contact such as main phone number, alternate phone number, Fax number, alternate fax number, email and alternate email
   * @return contactDescription
   */
  @javax.annotation.Nullable
  public String getContactDescription() {
    return contactDescription;
  }

  public void setContactDescription(String contactDescription) {
    this.contactDescription = contactDescription;
  }


  public ContactInfoInner contactType(ContactTypeEnum contactType) {
    this.contactType = contactType;
    return this;
  }

  /**
   * Contact type such Phone, Fax and email
   * @return contactType
   */
  @javax.annotation.Nonnull
  public ContactTypeEnum getContactType() {
    return contactType;
  }

  public void setContactType(ContactTypeEnum contactType) {
    this.contactType = contactType;
  }


  public ContactInfoInner otherContactType(Object otherContactType) {
    this.otherContactType = otherContactType;
    return this;
  }

  /**
   * Other contact type which is not in the standard code list
   * @return otherContactType
   */
  @javax.annotation.Nullable
  public Object getOtherContactType() {
    return otherContactType;
  }

  public void setOtherContactType(Object otherContactType) {
    this.otherContactType = otherContactType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactInfoInner contactInfoInner = (ContactInfoInner) o;
    return Objects.equals(this.contactContent, contactInfoInner.contactContent) &&
        Objects.equals(this.contactDescription, contactInfoInner.contactDescription) &&
        Objects.equals(this.contactType, contactInfoInner.contactType) &&
        Objects.equals(this.otherContactType, contactInfoInner.otherContactType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactContent, contactDescription, contactType, otherContactType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactInfoInner {\n");
    sb.append("    contactContent: ").append(toIndentedString(contactContent)).append("\n");
    sb.append("    contactDescription: ").append(toIndentedString(contactDescription)).append("\n");
    sb.append("    contactType: ").append(toIndentedString(contactType)).append("\n");
    sb.append("    otherContactType: ").append(toIndentedString(otherContactType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactContent");
    openapiFields.add("ContactDescription");
    openapiFields.add("ContactType");
    openapiFields.add("OtherContactType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ContactContent");
    openapiRequiredFields.add("ContactType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactInfoInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactInfoInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactInfoInner is not found in the empty JSON string", ContactInfoInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactInfoInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactInfoInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactInfoInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ContactContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactContent").toString()));
      }
      if ((jsonObj.get("ContactDescription") != null && !jsonObj.get("ContactDescription").isJsonNull()) && !jsonObj.get("ContactDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactDescription").toString()));
      }
      if (!jsonObj.get("ContactType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactType").toString()));
      }
      // validate the required field `ContactType`
      ContactTypeEnum.validateJsonElement(jsonObj.get("ContactType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactInfoInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactInfoInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactInfoInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactInfoInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactInfoInner>() {
           @Override
           public void write(JsonWriter out, ContactInfoInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactInfoInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactInfoInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactInfoInner
   * @throws IOException if the JSON string is invalid with respect to ContactInfoInner
   */
  public static ContactInfoInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactInfoInner.class);
  }

  /**
   * Convert an instance of ContactInfoInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

