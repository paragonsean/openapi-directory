/*
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactInfoInner;
import org.openapitools.client.model.OtherAccessibilityInner;
import org.openapitools.client.model.OtherCustomerSegmentInner;
import org.openapitools.client.model.OtherServiceAndFacilityInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information that locates and identifies a specific branch of a financial institution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:50.652655-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BranchInner {
  /**
   * Accessibility is the ability and ease a customer can access a service, good, associate, or facility. Features which make the Bank accessible to disabled people
   */
  @JsonAdapter(AccessibilityEnum.Adapter.class)
  public enum AccessibilityEnum {
    AUTOMATIC_DOORS("AutomaticDoors"),
    
    AUDIO_CASH_MACHINE("AudioCashMachine"),
    
    EXTERNAL_RAMP("ExternalRamp"),
    
    HELPING_HAND_UNIT("HelpingHandUnit"),
    
    INDUCTION_LOOP("InductionLoop"),
    
    INTERNAL_RAMP("InternalRamp"),
    
    LEVEL_ACCESS("LevelAccess"),
    
    LOWER_LEVEL_COUNTER("LowerLevelCounter"),
    
    OTHER("Other"),
    
    WHEELCHAIR_ACCESS("WheelchairAccess");

    private String value;

    AccessibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessibilityEnum fromValue(String value) {
      for (AccessibilityEnum b : AccessibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESSIBILITY = "Accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  private List<AccessibilityEnum> accessibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABILITY = "Availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private Object availability;

  public static final String SERIALIZED_NAME_CONTACT_INFO = "ContactInfo";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFO)
  private List<ContactInfoInner> contactInfo = new ArrayList<>();

  /**
   * The marketing segment which the branch is able to address in terms of customer type. Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another
   */
  @JsonAdapter(CustomerSegmentEnum.Adapter.class)
  public enum CustomerSegmentEnum {
    BUSINESS("Business"),
    
    CORPORATE("Corporate"),
    
    OTHER("Other"),
    
    PERSONAL("Personal"),
    
    PRIVATE("Private"),
    
    PREMIER("Premier"),
    
    SELECT("Select"),
    
    SME("SME"),
    
    WEALTH("Wealth");

    private String value;

    CustomerSegmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerSegmentEnum fromValue(String value) {
      for (CustomerSegmentEnum b : CustomerSegmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerSegmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerSegmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerSegmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerSegmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomerSegmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_SEGMENT = "CustomerSegment";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SEGMENT)
  private List<CustomerSegmentEnum> customerSegment = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTE = "Note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_OTHER_ACCESSIBILITY = "OtherAccessibility";
  @SerializedName(SERIALIZED_NAME_OTHER_ACCESSIBILITY)
  private List<OtherAccessibilityInner> otherAccessibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_CUSTOMER_SEGMENT = "OtherCustomerSegment";
  @SerializedName(SERIALIZED_NAME_OTHER_CUSTOMER_SEGMENT)
  private List<OtherCustomerSegmentInner> otherCustomerSegment = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_SERVICE_AND_FACILITY = "OtherServiceAndFacility";
  @SerializedName(SERIALIZED_NAME_OTHER_SERVICE_AND_FACILITY)
  private List<OtherServiceAndFacilityInner> otherServiceAndFacility = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTO = "Photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  private String photo;

  public static final String SERIALIZED_NAME_POSTAL_ADDRESS = "PostalAddress";
  @SerializedName(SERIALIZED_NAME_POSTAL_ADDRESS)
  private Object postalAddress;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  /**
   * Service/Facilities offered at a branch.
   */
  @JsonAdapter(ServiceAndFacilityEnum.Adapter.class)
  public enum ServiceAndFacilityEnum {
    ASSISTED_SERVICE_COUNTER("AssistedServiceCounter"),
    
    EXTERNAL_ATM("ExternalATM"),
    
    ACCOUNT_VERIFICATION_SERVICE("AccountVerificationService"),
    
    BUSINESS_COUNTER("BusinessCounter"),
    
    BUREAU_DE_CHANGE("BureauDeChange"),
    
    BUSINESS_DEPOSIT_TERMINAL("BusinessDepositTerminal"),
    
    BUSINESS_IT_SUPPORT("BusinessITSupport"),
    
    CARD_ISSUANCE_FACILITY("CardIssuanceFacility"),
    
    COLLECTION_LOCKERS("CollectionLockers"),
    
    COUNTER_SERVICES("CounterServices"),
    
    EXTERNAL_QUICK_SERVICE_POINT("ExternalQuickServicePoint"),
    
    INTERNAL_QUICK_SERVICE_POINT("InternalQuickServicePoint"),
    
    INTERNAL_ATM("InternalATM"),
    
    LODGEMENT_DEVICE("LodgementDevice"),
    
    MORTGAGE_ADVISOR("MortgageAdvisor"),
    
    MEETING_ROOMS("MeetingRooms"),
    
    NIGHT_SAFE("NightSafe"),
    
    ONLINE_BANKING_POINT("OnlineBankingPoint"),
    
    ON_DEMAND_CURRENCY("OnDemandCurrency"),
    
    OTHER("Other"),
    
    PARKING("Parking"),
    
    PREMIER_COUNTER("PremierCounter"),
    
    QUICK_DEPOSIT("QuickDeposit"),
    
    SATURDAY_COUNTER_SERVICE("SaturdayCounterService"),
    
    STATEMENT_PRINTER("StatementPrinter"),
    
    SELF_SERVICE_ACCOUNT_OPENING("SelfServiceAccountOpening"),
    
    VIDEO_BANKING("VideoBanking"),
    
    WI_FI("WiFi");

    private String value;

    ServiceAndFacilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceAndFacilityEnum fromValue(String value) {
      for (ServiceAndFacilityEnum b : ServiceAndFacilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceAndFacilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceAndFacilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceAndFacilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceAndFacilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceAndFacilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_AND_FACILITY = "ServiceAndFacility";
  @SerializedName(SERIALIZED_NAME_SERVICE_AND_FACILITY)
  private List<ServiceAndFacilityEnum> serviceAndFacility = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT_CODE = "SortCode";
  @SerializedName(SERIALIZED_NAME_SORT_CODE)
  private List<String> sortCode = new ArrayList<>();

  /**
   * Codeset to indicate if a branch is physically in 1 location or is mobile
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MOBILE("Mobile"),
    
    PHYSICAL("Physical");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public BranchInner() {
  }

  public BranchInner accessibility(List<AccessibilityEnum> accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  public BranchInner addAccessibilityItem(AccessibilityEnum accessibilityItem) {
    if (this.accessibility == null) {
      this.accessibility = new ArrayList<>();
    }
    this.accessibility.add(accessibilityItem);
    return this;
  }

  /**
   * Accessibility is the ability and ease a customer can access a service, good, associate, or facility. Features which make the Bank accessible to disabled people
   * @return accessibility
   */
  @javax.annotation.Nullable
  public List<AccessibilityEnum> getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(List<AccessibilityEnum> accessibility) {
    this.accessibility = accessibility;
  }


  public BranchInner availability(Object availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Days and times defining when the branch is available for use by a customer
   * @return availability
   */
  @javax.annotation.Nullable
  public Object getAvailability() {
    return availability;
  }

  public void setAvailability(Object availability) {
    this.availability = availability;
  }


  public BranchInner contactInfo(List<ContactInfoInner> contactInfo) {
    this.contactInfo = contactInfo;
    return this;
  }

  public BranchInner addContactInfoItem(ContactInfoInner contactInfoItem) {
    if (this.contactInfo == null) {
      this.contactInfo = new ArrayList<>();
    }
    this.contactInfo.add(contactInfoItem);
    return this;
  }

  /**
   * Communication device number or electronic address used for communication.
   * @return contactInfo
   */
  @javax.annotation.Nullable
  public List<ContactInfoInner> getContactInfo() {
    return contactInfo;
  }

  public void setContactInfo(List<ContactInfoInner> contactInfo) {
    this.contactInfo = contactInfo;
  }


  public BranchInner customerSegment(List<CustomerSegmentEnum> customerSegment) {
    this.customerSegment = customerSegment;
    return this;
  }

  public BranchInner addCustomerSegmentItem(CustomerSegmentEnum customerSegmentItem) {
    if (this.customerSegment == null) {
      this.customerSegment = new ArrayList<>();
    }
    this.customerSegment.add(customerSegmentItem);
    return this;
  }

  /**
   * The marketing segment which the branch is able to address in terms of customer type. Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another
   * @return customerSegment
   */
  @javax.annotation.Nonnull
  public List<CustomerSegmentEnum> getCustomerSegment() {
    return customerSegment;
  }

  public void setCustomerSegment(List<CustomerSegmentEnum> customerSegment) {
    this.customerSegment = customerSegment;
  }


  public BranchInner identification(String identification) {
    this.identification = identification;
    return this;
  }

  /**
   * Unique and unambiguous identification of a branch of a financial institution.
   * @return identification
   */
  @javax.annotation.Nonnull
  public String getIdentification() {
    return identification;
  }

  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public BranchInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name by which a branch is known and which is usually used to identify that branch.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BranchInner note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Summary description of services, facility and availability.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public BranchInner otherAccessibility(List<OtherAccessibilityInner> otherAccessibility) {
    this.otherAccessibility = otherAccessibility;
    return this;
  }

  public BranchInner addOtherAccessibilityItem(OtherAccessibilityInner otherAccessibilityItem) {
    if (this.otherAccessibility == null) {
      this.otherAccessibility = new ArrayList<>();
    }
    this.otherAccessibility.add(otherAccessibilityItem);
    return this;
  }

  /**
   * Enter any new code , name and description for any other Accessibility
   * @return otherAccessibility
   */
  @javax.annotation.Nullable
  public List<OtherAccessibilityInner> getOtherAccessibility() {
    return otherAccessibility;
  }

  public void setOtherAccessibility(List<OtherAccessibilityInner> otherAccessibility) {
    this.otherAccessibility = otherAccessibility;
  }


  public BranchInner otherCustomerSegment(List<OtherCustomerSegmentInner> otherCustomerSegment) {
    this.otherCustomerSegment = otherCustomerSegment;
    return this;
  }

  public BranchInner addOtherCustomerSegmentItem(OtherCustomerSegmentInner otherCustomerSegmentItem) {
    if (this.otherCustomerSegment == null) {
      this.otherCustomerSegment = new ArrayList<>();
    }
    this.otherCustomerSegment.add(otherCustomerSegmentItem);
    return this;
  }

  /**
   * Enter a new code , name and description for any other Customer Segment
   * @return otherCustomerSegment
   */
  @javax.annotation.Nullable
  public List<OtherCustomerSegmentInner> getOtherCustomerSegment() {
    return otherCustomerSegment;
  }

  public void setOtherCustomerSegment(List<OtherCustomerSegmentInner> otherCustomerSegment) {
    this.otherCustomerSegment = otherCustomerSegment;
  }


  public BranchInner otherServiceAndFacility(List<OtherServiceAndFacilityInner> otherServiceAndFacility) {
    this.otherServiceAndFacility = otherServiceAndFacility;
    return this;
  }

  public BranchInner addOtherServiceAndFacilityItem(OtherServiceAndFacilityInner otherServiceAndFacilityItem) {
    if (this.otherServiceAndFacility == null) {
      this.otherServiceAndFacility = new ArrayList<>();
    }
    this.otherServiceAndFacility.add(otherServiceAndFacilityItem);
    return this;
  }

  /**
   * Enter any new code , name and description for any Other Facility
   * @return otherServiceAndFacility
   */
  @javax.annotation.Nullable
  public List<OtherServiceAndFacilityInner> getOtherServiceAndFacility() {
    return otherServiceAndFacility;
  }

  public void setOtherServiceAndFacility(List<OtherServiceAndFacilityInner> otherServiceAndFacility) {
    this.otherServiceAndFacility = otherServiceAndFacility;
  }


  public BranchInner photo(String photo) {
    this.photo = photo;
    return this;
  }

  /**
   * Image related to the branch
   * @return photo
   */
  @javax.annotation.Nullable
  public String getPhoto() {
    return photo;
  }

  public void setPhoto(String photo) {
    this.photo = photo;
  }


  public BranchInner postalAddress(Object postalAddress) {
    this.postalAddress = postalAddress;
    return this;
  }

  /**
   * Information that locates and identifies a specific address, as defined by postal services.
   * @return postalAddress
   */
  @javax.annotation.Nonnull
  public Object getPostalAddress() {
    return postalAddress;
  }

  public void setPostalAddress(Object postalAddress) {
    this.postalAddress = postalAddress;
  }


  public BranchInner sequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * Sequence Number that is used in conjunction with Identification to uniquely identify a branch. Physical branches should have 0 assigned, mobile and sub branches should have 1,2,3....etc. assigned.
   * @return sequenceNumber
   */
  @javax.annotation.Nonnull
  public String getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(String sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public BranchInner serviceAndFacility(List<ServiceAndFacilityEnum> serviceAndFacility) {
    this.serviceAndFacility = serviceAndFacility;
    return this;
  }

  public BranchInner addServiceAndFacilityItem(ServiceAndFacilityEnum serviceAndFacilityItem) {
    if (this.serviceAndFacility == null) {
      this.serviceAndFacility = new ArrayList<>();
    }
    this.serviceAndFacility.add(serviceAndFacilityItem);
    return this;
  }

  /**
   * Service/Facilities offered at a branch.
   * @return serviceAndFacility
   */
  @javax.annotation.Nullable
  public List<ServiceAndFacilityEnum> getServiceAndFacility() {
    return serviceAndFacility;
  }

  public void setServiceAndFacility(List<ServiceAndFacilityEnum> serviceAndFacility) {
    this.serviceAndFacility = serviceAndFacility;
  }


  public BranchInner sortCode(List<String> sortCode) {
    this.sortCode = sortCode;
    return this;
  }

  public BranchInner addSortCodeItem(String sortCodeItem) {
    if (this.sortCode == null) {
      this.sortCode = new ArrayList<>();
    }
    this.sortCode.add(sortCodeItem);
    return this;
  }

  /**
   * United Kingdom (UK) Sort Code - identifies British financial institutions on the British national clearing systems. The sort code, which is a six-digit number, is usually formatted as three pairs of numbers, for example 12-34-56. It identifies both the bank and the branch(s) where the account is held.
   * @return sortCode
   */
  @javax.annotation.Nullable
  public List<String> getSortCode() {
    return sortCode;
  }

  public void setSortCode(List<String> sortCode) {
    this.sortCode = sortCode;
  }


  public BranchInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Codeset to indicate if a branch is physically in 1 location or is mobile
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchInner branchInner = (BranchInner) o;
    return Objects.equals(this.accessibility, branchInner.accessibility) &&
        Objects.equals(this.availability, branchInner.availability) &&
        Objects.equals(this.contactInfo, branchInner.contactInfo) &&
        Objects.equals(this.customerSegment, branchInner.customerSegment) &&
        Objects.equals(this.identification, branchInner.identification) &&
        Objects.equals(this.name, branchInner.name) &&
        Objects.equals(this.note, branchInner.note) &&
        Objects.equals(this.otherAccessibility, branchInner.otherAccessibility) &&
        Objects.equals(this.otherCustomerSegment, branchInner.otherCustomerSegment) &&
        Objects.equals(this.otherServiceAndFacility, branchInner.otherServiceAndFacility) &&
        Objects.equals(this.photo, branchInner.photo) &&
        Objects.equals(this.postalAddress, branchInner.postalAddress) &&
        Objects.equals(this.sequenceNumber, branchInner.sequenceNumber) &&
        Objects.equals(this.serviceAndFacility, branchInner.serviceAndFacility) &&
        Objects.equals(this.sortCode, branchInner.sortCode) &&
        Objects.equals(this.type, branchInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, availability, contactInfo, customerSegment, identification, name, note, otherAccessibility, otherCustomerSegment, otherServiceAndFacility, photo, postalAddress, sequenceNumber, serviceAndFacility, sortCode, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchInner {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    contactInfo: ").append(toIndentedString(contactInfo)).append("\n");
    sb.append("    customerSegment: ").append(toIndentedString(customerSegment)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    otherAccessibility: ").append(toIndentedString(otherAccessibility)).append("\n");
    sb.append("    otherCustomerSegment: ").append(toIndentedString(otherCustomerSegment)).append("\n");
    sb.append("    otherServiceAndFacility: ").append(toIndentedString(otherServiceAndFacility)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    postalAddress: ").append(toIndentedString(postalAddress)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    serviceAndFacility: ").append(toIndentedString(serviceAndFacility)).append("\n");
    sb.append("    sortCode: ").append(toIndentedString(sortCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Accessibility");
    openapiFields.add("Availability");
    openapiFields.add("ContactInfo");
    openapiFields.add("CustomerSegment");
    openapiFields.add("Identification");
    openapiFields.add("Name");
    openapiFields.add("Note");
    openapiFields.add("OtherAccessibility");
    openapiFields.add("OtherCustomerSegment");
    openapiFields.add("OtherServiceAndFacility");
    openapiFields.add("Photo");
    openapiFields.add("PostalAddress");
    openapiFields.add("SequenceNumber");
    openapiFields.add("ServiceAndFacility");
    openapiFields.add("SortCode");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CustomerSegment");
    openapiRequiredFields.add("Identification");
    openapiRequiredFields.add("PostalAddress");
    openapiRequiredFields.add("SequenceNumber");
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BranchInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BranchInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BranchInner is not found in the empty JSON string", BranchInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BranchInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BranchInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BranchInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Accessibility") != null && !jsonObj.get("Accessibility").isJsonNull() && !jsonObj.get("Accessibility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Accessibility` to be an array in the JSON string but got `%s`", jsonObj.get("Accessibility").toString()));
      }
      if (jsonObj.get("ContactInfo") != null && !jsonObj.get("ContactInfo").isJsonNull()) {
        JsonArray jsonArraycontactInfo = jsonObj.getAsJsonArray("ContactInfo");
        if (jsonArraycontactInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContactInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContactInfo` to be an array in the JSON string but got `%s`", jsonObj.get("ContactInfo").toString()));
          }

          // validate the optional field `ContactInfo` (array)
          for (int i = 0; i < jsonArraycontactInfo.size(); i++) {
            ContactInfoInner.validateJsonElement(jsonArraycontactInfo.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("CustomerSegment") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("CustomerSegment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerSegment` to be an array in the JSON string but got `%s`", jsonObj.get("CustomerSegment").toString()));
      }
      if (!jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Note") != null && !jsonObj.get("Note").isJsonNull()) && !jsonObj.get("Note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Note").toString()));
      }
      if (jsonObj.get("OtherAccessibility") != null && !jsonObj.get("OtherAccessibility").isJsonNull()) {
        JsonArray jsonArrayotherAccessibility = jsonObj.getAsJsonArray("OtherAccessibility");
        if (jsonArrayotherAccessibility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OtherAccessibility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OtherAccessibility` to be an array in the JSON string but got `%s`", jsonObj.get("OtherAccessibility").toString()));
          }

          // validate the optional field `OtherAccessibility` (array)
          for (int i = 0; i < jsonArrayotherAccessibility.size(); i++) {
            OtherAccessibilityInner.validateJsonElement(jsonArrayotherAccessibility.get(i));
          };
        }
      }
      if (jsonObj.get("OtherCustomerSegment") != null && !jsonObj.get("OtherCustomerSegment").isJsonNull()) {
        JsonArray jsonArrayotherCustomerSegment = jsonObj.getAsJsonArray("OtherCustomerSegment");
        if (jsonArrayotherCustomerSegment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OtherCustomerSegment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OtherCustomerSegment` to be an array in the JSON string but got `%s`", jsonObj.get("OtherCustomerSegment").toString()));
          }

          // validate the optional field `OtherCustomerSegment` (array)
          for (int i = 0; i < jsonArrayotherCustomerSegment.size(); i++) {
            OtherCustomerSegmentInner.validateJsonElement(jsonArrayotherCustomerSegment.get(i));
          };
        }
      }
      if (jsonObj.get("OtherServiceAndFacility") != null && !jsonObj.get("OtherServiceAndFacility").isJsonNull()) {
        JsonArray jsonArrayotherServiceAndFacility = jsonObj.getAsJsonArray("OtherServiceAndFacility");
        if (jsonArrayotherServiceAndFacility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OtherServiceAndFacility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OtherServiceAndFacility` to be an array in the JSON string but got `%s`", jsonObj.get("OtherServiceAndFacility").toString()));
          }

          // validate the optional field `OtherServiceAndFacility` (array)
          for (int i = 0; i < jsonArrayotherServiceAndFacility.size(); i++) {
            OtherServiceAndFacilityInner.validateJsonElement(jsonArrayotherServiceAndFacility.get(i));
          };
        }
      }
      if ((jsonObj.get("Photo") != null && !jsonObj.get("Photo").isJsonNull()) && !jsonObj.get("Photo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Photo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Photo").toString()));
      }
      if (!jsonObj.get("SequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SequenceNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ServiceAndFacility") != null && !jsonObj.get("ServiceAndFacility").isJsonNull() && !jsonObj.get("ServiceAndFacility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceAndFacility` to be an array in the JSON string but got `%s`", jsonObj.get("ServiceAndFacility").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SortCode") != null && !jsonObj.get("SortCode").isJsonNull() && !jsonObj.get("SortCode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortCode` to be an array in the JSON string but got `%s`", jsonObj.get("SortCode").toString()));
      }
      if (!jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the required field `Type`
      TypeEnum.validateJsonElement(jsonObj.get("Type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BranchInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BranchInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BranchInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BranchInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BranchInner>() {
           @Override
           public void write(JsonWriter out, BranchInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BranchInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BranchInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BranchInner
   * @throws IOException if the JSON string is invalid with respect to BranchInner
   */
  public static BranchInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BranchInner.class);
  }

  /**
   * Convert an instance of BranchInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

