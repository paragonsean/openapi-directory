/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetaDefinition model module.
 * @module model/MetaDefinition
 * @version 2.2.1
 */
class MetaDefinition {
    /**
     * Constructs a new <code>MetaDefinition</code>.
     * @alias module:model/MetaDefinition
     * @param agreement {module:model/MetaDefinition.AgreementEnum} 
     * @param lastUpdated {Date} 
     * @param license {module:model/MetaDefinition.LicenseEnum} Open Banking License
     * @param termsOfUse {module:model/MetaDefinition.TermsOfUseEnum} Open Banking Terms of Use
     * @param totalResults {Number} 
     */
    constructor(agreement, lastUpdated, license, termsOfUse, totalResults) { 
        
        MetaDefinition.initialize(this, agreement, lastUpdated, license, termsOfUse, totalResults);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, agreement, lastUpdated, license, termsOfUse, totalResults) { 
        obj['Agreement'] = agreement;
        obj['LastUpdated'] = lastUpdated;
        obj['License'] = license;
        obj['TermsOfUse'] = termsOfUse;
        obj['TotalResults'] = totalResults;
    }

    /**
     * Constructs a <code>MetaDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetaDefinition} obj Optional instance to populate.
     * @return {module:model/MetaDefinition} The populated <code>MetaDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetaDefinition();

            if (data.hasOwnProperty('Agreement')) {
                obj['Agreement'] = ApiClient.convertToType(data['Agreement'], 'String');
            }
            if (data.hasOwnProperty('LastUpdated')) {
                obj['LastUpdated'] = ApiClient.convertToType(data['LastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('License')) {
                obj['License'] = ApiClient.convertToType(data['License'], 'String');
            }
            if (data.hasOwnProperty('TermsOfUse')) {
                obj['TermsOfUse'] = ApiClient.convertToType(data['TermsOfUse'], 'String');
            }
            if (data.hasOwnProperty('TotalResults')) {
                obj['TotalResults'] = ApiClient.convertToType(data['TotalResults'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetaDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetaDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetaDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Agreement'] && !(typeof data['Agreement'] === 'string' || data['Agreement'] instanceof String)) {
            throw new Error("Expected the field `Agreement` to be a primitive type in the JSON string but got " + data['Agreement']);
        }
        // ensure the json data is a string
        if (data['License'] && !(typeof data['License'] === 'string' || data['License'] instanceof String)) {
            throw new Error("Expected the field `License` to be a primitive type in the JSON string but got " + data['License']);
        }
        // ensure the json data is a string
        if (data['TermsOfUse'] && !(typeof data['TermsOfUse'] === 'string' || data['TermsOfUse'] instanceof String)) {
            throw new Error("Expected the field `TermsOfUse` to be a primitive type in the JSON string but got " + data['TermsOfUse']);
        }

        return true;
    }


}

MetaDefinition.RequiredProperties = ["Agreement", "LastUpdated", "License", "TermsOfUse", "TotalResults"];

/**
 * @member {module:model/MetaDefinition.AgreementEnum} Agreement
 */
MetaDefinition.prototype['Agreement'] = undefined;

/**
 * @member {Date} LastUpdated
 */
MetaDefinition.prototype['LastUpdated'] = undefined;

/**
 * Open Banking License
 * @member {module:model/MetaDefinition.LicenseEnum} License
 */
MetaDefinition.prototype['License'] = undefined;

/**
 * Open Banking Terms of Use
 * @member {module:model/MetaDefinition.TermsOfUseEnum} TermsOfUse
 */
MetaDefinition.prototype['TermsOfUse'] = undefined;

/**
 * @member {Number} TotalResults
 */
MetaDefinition.prototype['TotalResults'] = undefined;





/**
 * Allowed values for the <code>Agreement</code> property.
 * @enum {String}
 * @readonly
 */
MetaDefinition['AgreementEnum'] = {

    /**
     * value: "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions"
     * @const
     */
    "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions": "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions"
};


/**
 * Allowed values for the <code>License</code> property.
 * @enum {String}
 * @readonly
 */
MetaDefinition['LicenseEnum'] = {

    /**
     * value: "https://www.openbanking.org.uk/open-licence"
     * @const
     */
    "https://www.openbanking.org.uk/open-licence": "https://www.openbanking.org.uk/open-licence"
};


/**
 * Allowed values for the <code>TermsOfUse</code> property.
 * @enum {String}
 * @readonly
 */
MetaDefinition['TermsOfUseEnum'] = {

    /**
     * value: "https://www.openbanking.org.uk/terms"
     * @const
     */
    "https://www.openbanking.org.uk/terms": "https://www.openbanking.org.uk/terms"
};



export default MetaDefinition;

