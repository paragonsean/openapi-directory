/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactInfoInner from './ContactInfoInner';
import OtherAccessibilityInner from './OtherAccessibilityInner';
import OtherCustomerSegmentInner from './OtherCustomerSegmentInner';
import OtherServiceAndFacilityInner from './OtherServiceAndFacilityInner';

/**
 * The BranchInner model module.
 * @module model/BranchInner
 * @version 2.2.1
 */
class BranchInner {
    /**
     * Constructs a new <code>BranchInner</code>.
     * Information that locates and identifies a specific branch of a financial institution.
     * @alias module:model/BranchInner
     * @param customerSegment {Array.<module:model/BranchInner.CustomerSegmentEnum>} The marketing segment which the branch is able to address in terms of customer type. Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another
     * @param identification {String} Unique and unambiguous identification of a branch of a financial institution.
     * @param postalAddress {Object} Information that locates and identifies a specific address, as defined by postal services.
     * @param sequenceNumber {String} Sequence Number that is used in conjunction with Identification to uniquely identify a branch. Physical branches should have 0 assigned, mobile and sub branches should have 1,2,3....etc. assigned.
     * @param type {module:model/BranchInner.TypeEnum} Codeset to indicate if a branch is physically in 1 location or is mobile
     */
    constructor(customerSegment, identification, postalAddress, sequenceNumber, type) { 
        
        BranchInner.initialize(this, customerSegment, identification, postalAddress, sequenceNumber, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerSegment, identification, postalAddress, sequenceNumber, type) { 
        obj['CustomerSegment'] = customerSegment;
        obj['Identification'] = identification;
        obj['PostalAddress'] = postalAddress;
        obj['SequenceNumber'] = sequenceNumber;
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>BranchInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BranchInner} obj Optional instance to populate.
     * @return {module:model/BranchInner} The populated <code>BranchInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchInner();

            if (data.hasOwnProperty('Accessibility')) {
                obj['Accessibility'] = ApiClient.convertToType(data['Accessibility'], ['String']);
            }
            if (data.hasOwnProperty('Availability')) {
                obj['Availability'] = ApiClient.convertToType(data['Availability'], Object);
            }
            if (data.hasOwnProperty('ContactInfo')) {
                obj['ContactInfo'] = ApiClient.convertToType(data['ContactInfo'], [ContactInfoInner]);
            }
            if (data.hasOwnProperty('CustomerSegment')) {
                obj['CustomerSegment'] = ApiClient.convertToType(data['CustomerSegment'], ['String']);
            }
            if (data.hasOwnProperty('Identification')) {
                obj['Identification'] = ApiClient.convertToType(data['Identification'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Note')) {
                obj['Note'] = ApiClient.convertToType(data['Note'], 'String');
            }
            if (data.hasOwnProperty('OtherAccessibility')) {
                obj['OtherAccessibility'] = ApiClient.convertToType(data['OtherAccessibility'], [OtherAccessibilityInner]);
            }
            if (data.hasOwnProperty('OtherCustomerSegment')) {
                obj['OtherCustomerSegment'] = ApiClient.convertToType(data['OtherCustomerSegment'], [OtherCustomerSegmentInner]);
            }
            if (data.hasOwnProperty('OtherServiceAndFacility')) {
                obj['OtherServiceAndFacility'] = ApiClient.convertToType(data['OtherServiceAndFacility'], [OtherServiceAndFacilityInner]);
            }
            if (data.hasOwnProperty('Photo')) {
                obj['Photo'] = ApiClient.convertToType(data['Photo'], 'String');
            }
            if (data.hasOwnProperty('PostalAddress')) {
                obj['PostalAddress'] = ApiClient.convertToType(data['PostalAddress'], Object);
            }
            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('ServiceAndFacility')) {
                obj['ServiceAndFacility'] = ApiClient.convertToType(data['ServiceAndFacility'], ['String']);
            }
            if (data.hasOwnProperty('SortCode')) {
                obj['SortCode'] = ApiClient.convertToType(data['SortCode'], ['String']);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BranchInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BranchInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BranchInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Accessibility'])) {
            throw new Error("Expected the field `Accessibility` to be an array in the JSON data but got " + data['Accessibility']);
        }
        if (data['ContactInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ContactInfo'])) {
                throw new Error("Expected the field `ContactInfo` to be an array in the JSON data but got " + data['ContactInfo']);
            }
            // validate the optional field `ContactInfo` (array)
            for (const item of data['ContactInfo']) {
                ContactInfoInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CustomerSegment'])) {
            throw new Error("Expected the field `CustomerSegment` to be an array in the JSON data but got " + data['CustomerSegment']);
        }
        // ensure the json data is a string
        if (data['Identification'] && !(typeof data['Identification'] === 'string' || data['Identification'] instanceof String)) {
            throw new Error("Expected the field `Identification` to be a primitive type in the JSON string but got " + data['Identification']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Note'] && !(typeof data['Note'] === 'string' || data['Note'] instanceof String)) {
            throw new Error("Expected the field `Note` to be a primitive type in the JSON string but got " + data['Note']);
        }
        if (data['OtherAccessibility']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OtherAccessibility'])) {
                throw new Error("Expected the field `OtherAccessibility` to be an array in the JSON data but got " + data['OtherAccessibility']);
            }
            // validate the optional field `OtherAccessibility` (array)
            for (const item of data['OtherAccessibility']) {
                OtherAccessibilityInner.validateJSON(item);
            };
        }
        if (data['OtherCustomerSegment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OtherCustomerSegment'])) {
                throw new Error("Expected the field `OtherCustomerSegment` to be an array in the JSON data but got " + data['OtherCustomerSegment']);
            }
            // validate the optional field `OtherCustomerSegment` (array)
            for (const item of data['OtherCustomerSegment']) {
                OtherCustomerSegmentInner.validateJSON(item);
            };
        }
        if (data['OtherServiceAndFacility']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OtherServiceAndFacility'])) {
                throw new Error("Expected the field `OtherServiceAndFacility` to be an array in the JSON data but got " + data['OtherServiceAndFacility']);
            }
            // validate the optional field `OtherServiceAndFacility` (array)
            for (const item of data['OtherServiceAndFacility']) {
                OtherServiceAndFacilityInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Photo'] && !(typeof data['Photo'] === 'string' || data['Photo'] instanceof String)) {
            throw new Error("Expected the field `Photo` to be a primitive type in the JSON string but got " + data['Photo']);
        }
        // ensure the json data is a string
        if (data['SequenceNumber'] && !(typeof data['SequenceNumber'] === 'string' || data['SequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got " + data['SequenceNumber']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ServiceAndFacility'])) {
            throw new Error("Expected the field `ServiceAndFacility` to be an array in the JSON data but got " + data['ServiceAndFacility']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SortCode'])) {
            throw new Error("Expected the field `SortCode` to be an array in the JSON data but got " + data['SortCode']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}

BranchInner.RequiredProperties = ["CustomerSegment", "Identification", "PostalAddress", "SequenceNumber", "Type"];

/**
 * Accessibility is the ability and ease a customer can access a service, good, associate, or facility. Features which make the Bank accessible to disabled people
 * @member {Array.<module:model/BranchInner.AccessibilityEnum>} Accessibility
 */
BranchInner.prototype['Accessibility'] = undefined;

/**
 * Days and times defining when the branch is available for use by a customer
 * @member {Object} Availability
 */
BranchInner.prototype['Availability'] = undefined;

/**
 * Communication device number or electronic address used for communication.
 * @member {Array.<module:model/ContactInfoInner>} ContactInfo
 */
BranchInner.prototype['ContactInfo'] = undefined;

/**
 * The marketing segment which the branch is able to address in terms of customer type. Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another
 * @member {Array.<module:model/BranchInner.CustomerSegmentEnum>} CustomerSegment
 */
BranchInner.prototype['CustomerSegment'] = undefined;

/**
 * Unique and unambiguous identification of a branch of a financial institution.
 * @member {String} Identification
 */
BranchInner.prototype['Identification'] = undefined;

/**
 * Name by which a branch is known and which is usually used to identify that branch.
 * @member {String} Name
 */
BranchInner.prototype['Name'] = undefined;

/**
 * Summary description of services, facility and availability.
 * @member {String} Note
 */
BranchInner.prototype['Note'] = undefined;

/**
 * Enter any new code , name and description for any other Accessibility
 * @member {Array.<module:model/OtherAccessibilityInner>} OtherAccessibility
 */
BranchInner.prototype['OtherAccessibility'] = undefined;

/**
 * Enter a new code , name and description for any other Customer Segment
 * @member {Array.<module:model/OtherCustomerSegmentInner>} OtherCustomerSegment
 */
BranchInner.prototype['OtherCustomerSegment'] = undefined;

/**
 * Enter any new code , name and description for any Other Facility
 * @member {Array.<module:model/OtherServiceAndFacilityInner>} OtherServiceAndFacility
 */
BranchInner.prototype['OtherServiceAndFacility'] = undefined;

/**
 * Image related to the branch
 * @member {String} Photo
 */
BranchInner.prototype['Photo'] = undefined;

/**
 * Information that locates and identifies a specific address, as defined by postal services.
 * @member {Object} PostalAddress
 */
BranchInner.prototype['PostalAddress'] = undefined;

/**
 * Sequence Number that is used in conjunction with Identification to uniquely identify a branch. Physical branches should have 0 assigned, mobile and sub branches should have 1,2,3....etc. assigned.
 * @member {String} SequenceNumber
 */
BranchInner.prototype['SequenceNumber'] = undefined;

/**
 * Service/Facilities offered at a branch.
 * @member {Array.<module:model/BranchInner.ServiceAndFacilityEnum>} ServiceAndFacility
 */
BranchInner.prototype['ServiceAndFacility'] = undefined;

/**
 * United Kingdom (UK) Sort Code - identifies British financial institutions on the British national clearing systems. The sort code, which is a six-digit number, is usually formatted as three pairs of numbers, for example 12-34-56. It identifies both the bank and the branch(s) where the account is held.
 * @member {Array.<String>} SortCode
 */
BranchInner.prototype['SortCode'] = undefined;

/**
 * Codeset to indicate if a branch is physically in 1 location or is mobile
 * @member {module:model/BranchInner.TypeEnum} Type
 */
BranchInner.prototype['Type'] = undefined;





/**
 * Allowed values for the <code>accessibility</code> property.
 * @enum {String}
 * @readonly
 */
BranchInner['AccessibilityEnum'] = {

    /**
     * value: "AutomaticDoors"
     * @const
     */
    "AutomaticDoors": "AutomaticDoors",

    /**
     * value: "AudioCashMachine"
     * @const
     */
    "AudioCashMachine": "AudioCashMachine",

    /**
     * value: "ExternalRamp"
     * @const
     */
    "ExternalRamp": "ExternalRamp",

    /**
     * value: "HelpingHandUnit"
     * @const
     */
    "HelpingHandUnit": "HelpingHandUnit",

    /**
     * value: "InductionLoop"
     * @const
     */
    "InductionLoop": "InductionLoop",

    /**
     * value: "InternalRamp"
     * @const
     */
    "InternalRamp": "InternalRamp",

    /**
     * value: "LevelAccess"
     * @const
     */
    "LevelAccess": "LevelAccess",

    /**
     * value: "LowerLevelCounter"
     * @const
     */
    "LowerLevelCounter": "LowerLevelCounter",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "WheelchairAccess"
     * @const
     */
    "WheelchairAccess": "WheelchairAccess"
};


/**
 * Allowed values for the <code>customerSegment</code> property.
 * @enum {String}
 * @readonly
 */
BranchInner['CustomerSegmentEnum'] = {

    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",

    /**
     * value: "Corporate"
     * @const
     */
    "Corporate": "Corporate",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Personal"
     * @const
     */
    "Personal": "Personal",

    /**
     * value: "Private"
     * @const
     */
    "Private": "Private",

    /**
     * value: "Premier"
     * @const
     */
    "Premier": "Premier",

    /**
     * value: "Select"
     * @const
     */
    "Select": "Select",

    /**
     * value: "SME"
     * @const
     */
    "SME": "SME",

    /**
     * value: "Wealth"
     * @const
     */
    "Wealth": "Wealth"
};


/**
 * Allowed values for the <code>serviceAndFacility</code> property.
 * @enum {String}
 * @readonly
 */
BranchInner['ServiceAndFacilityEnum'] = {

    /**
     * value: "AssistedServiceCounter"
     * @const
     */
    "AssistedServiceCounter": "AssistedServiceCounter",

    /**
     * value: "ExternalATM"
     * @const
     */
    "ExternalATM": "ExternalATM",

    /**
     * value: "AccountVerificationService"
     * @const
     */
    "AccountVerificationService": "AccountVerificationService",

    /**
     * value: "BusinessCounter"
     * @const
     */
    "BusinessCounter": "BusinessCounter",

    /**
     * value: "BureauDeChange"
     * @const
     */
    "BureauDeChange": "BureauDeChange",

    /**
     * value: "BusinessDepositTerminal"
     * @const
     */
    "BusinessDepositTerminal": "BusinessDepositTerminal",

    /**
     * value: "BusinessITSupport"
     * @const
     */
    "BusinessITSupport": "BusinessITSupport",

    /**
     * value: "CardIssuanceFacility"
     * @const
     */
    "CardIssuanceFacility": "CardIssuanceFacility",

    /**
     * value: "CollectionLockers"
     * @const
     */
    "CollectionLockers": "CollectionLockers",

    /**
     * value: "CounterServices"
     * @const
     */
    "CounterServices": "CounterServices",

    /**
     * value: "ExternalQuickServicePoint"
     * @const
     */
    "ExternalQuickServicePoint": "ExternalQuickServicePoint",

    /**
     * value: "InternalQuickServicePoint"
     * @const
     */
    "InternalQuickServicePoint": "InternalQuickServicePoint",

    /**
     * value: "InternalATM"
     * @const
     */
    "InternalATM": "InternalATM",

    /**
     * value: "LodgementDevice"
     * @const
     */
    "LodgementDevice": "LodgementDevice",

    /**
     * value: "MortgageAdvisor"
     * @const
     */
    "MortgageAdvisor": "MortgageAdvisor",

    /**
     * value: "MeetingRooms"
     * @const
     */
    "MeetingRooms": "MeetingRooms",

    /**
     * value: "NightSafe"
     * @const
     */
    "NightSafe": "NightSafe",

    /**
     * value: "OnlineBankingPoint"
     * @const
     */
    "OnlineBankingPoint": "OnlineBankingPoint",

    /**
     * value: "OnDemandCurrency"
     * @const
     */
    "OnDemandCurrency": "OnDemandCurrency",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Parking"
     * @const
     */
    "Parking": "Parking",

    /**
     * value: "PremierCounter"
     * @const
     */
    "PremierCounter": "PremierCounter",

    /**
     * value: "QuickDeposit"
     * @const
     */
    "QuickDeposit": "QuickDeposit",

    /**
     * value: "SaturdayCounterService"
     * @const
     */
    "SaturdayCounterService": "SaturdayCounterService",

    /**
     * value: "StatementPrinter"
     * @const
     */
    "StatementPrinter": "StatementPrinter",

    /**
     * value: "SelfServiceAccountOpening"
     * @const
     */
    "SelfServiceAccountOpening": "SelfServiceAccountOpening",

    /**
     * value: "VideoBanking"
     * @const
     */
    "VideoBanking": "VideoBanking",

    /**
     * value: "WiFi"
     * @const
     */
    "WiFi": "WiFi"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
BranchInner['TypeEnum'] = {

    /**
     * value: "Mobile"
     * @const
     */
    "Mobile": "Mobile",

    /**
     * value: "Physical"
     * @const
     */
    "Physical": "Physical"
};



export default BranchInner;

