/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchInner from './BranchInner';

/**
 * The BrandInner model module.
 * @module model/BrandInner
 * @version 2.2.1
 */
class BrandInner {
    /**
     * Constructs a new <code>BrandInner</code>.
     * Brand owned by an organisation
     * @alias module:model/BrandInner
     * @param branch {Array.<module:model/BranchInner>} Information that locates and identifies a specific branch of a financial institution.
     * @param brandName {String} Brand Name that an organisation uses to market its products or services to a consumer
     */
    constructor(branch, brandName) { 
        
        BrandInner.initialize(this, branch, brandName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, branch, brandName) { 
        obj['Branch'] = branch;
        obj['BrandName'] = brandName;
    }

    /**
     * Constructs a <code>BrandInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrandInner} obj Optional instance to populate.
     * @return {module:model/BrandInner} The populated <code>BrandInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrandInner();

            if (data.hasOwnProperty('Branch')) {
                obj['Branch'] = ApiClient.convertToType(data['Branch'], [BranchInner]);
            }
            if (data.hasOwnProperty('BrandName')) {
                obj['BrandName'] = ApiClient.convertToType(data['BrandName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrandInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrandInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BrandInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Branch']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Branch'])) {
                throw new Error("Expected the field `Branch` to be an array in the JSON data but got " + data['Branch']);
            }
            // validate the optional field `Branch` (array)
            for (const item of data['Branch']) {
                BranchInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['BrandName'] && !(typeof data['BrandName'] === 'string' || data['BrandName'] instanceof String)) {
            throw new Error("Expected the field `BrandName` to be a primitive type in the JSON string but got " + data['BrandName']);
        }

        return true;
    }


}

BrandInner.RequiredProperties = ["Branch", "BrandName"];

/**
 * Information that locates and identifies a specific branch of a financial institution.
 * @member {Array.<module:model/BranchInner>} Branch
 */
BrandInner.prototype['Branch'] = undefined;

/**
 * Brand Name that an organisation uses to market its products or services to a consumer
 * @member {String} BrandName
 */
BrandInner.prototype['BrandName'] = undefined;






export default BrandInner;

