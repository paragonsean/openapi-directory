/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactInfoInner model module.
 * @module model/ContactInfoInner
 * @version 2.2.1
 */
class ContactInfoInner {
    /**
     * Constructs a new <code>ContactInfoInner</code>.
     * Communication device number or electronic address used for communication.
     * @alias module:model/ContactInfoInner
     * @param contactContent {String} Collection of information that identifies a phone/Fax number/ email, as defined by telecom services.
     * @param contactType {module:model/ContactInfoInner.ContactTypeEnum} Contact type such Phone, Fax and email
     */
    constructor(contactContent, contactType) { 
        
        ContactInfoInner.initialize(this, contactContent, contactType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contactContent, contactType) { 
        obj['ContactContent'] = contactContent;
        obj['ContactType'] = contactType;
    }

    /**
     * Constructs a <code>ContactInfoInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactInfoInner} obj Optional instance to populate.
     * @return {module:model/ContactInfoInner} The populated <code>ContactInfoInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactInfoInner();

            if (data.hasOwnProperty('ContactContent')) {
                obj['ContactContent'] = ApiClient.convertToType(data['ContactContent'], 'String');
            }
            if (data.hasOwnProperty('ContactDescription')) {
                obj['ContactDescription'] = ApiClient.convertToType(data['ContactDescription'], 'String');
            }
            if (data.hasOwnProperty('ContactType')) {
                obj['ContactType'] = ApiClient.convertToType(data['ContactType'], 'String');
            }
            if (data.hasOwnProperty('OtherContactType')) {
                obj['OtherContactType'] = ApiClient.convertToType(data['OtherContactType'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactInfoInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactInfoInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContactInfoInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ContactContent'] && !(typeof data['ContactContent'] === 'string' || data['ContactContent'] instanceof String)) {
            throw new Error("Expected the field `ContactContent` to be a primitive type in the JSON string but got " + data['ContactContent']);
        }
        // ensure the json data is a string
        if (data['ContactDescription'] && !(typeof data['ContactDescription'] === 'string' || data['ContactDescription'] instanceof String)) {
            throw new Error("Expected the field `ContactDescription` to be a primitive type in the JSON string but got " + data['ContactDescription']);
        }
        // ensure the json data is a string
        if (data['ContactType'] && !(typeof data['ContactType'] === 'string' || data['ContactType'] instanceof String)) {
            throw new Error("Expected the field `ContactType` to be a primitive type in the JSON string but got " + data['ContactType']);
        }

        return true;
    }


}

ContactInfoInner.RequiredProperties = ["ContactContent", "ContactType"];

/**
 * Collection of information that identifies a phone/Fax number/ email, as defined by telecom services.
 * @member {String} ContactContent
 */
ContactInfoInner.prototype['ContactContent'] = undefined;

/**
 * Description of contact such as main phone number, alternate phone number, Fax number, alternate fax number, email and alternate email
 * @member {String} ContactDescription
 */
ContactInfoInner.prototype['ContactDescription'] = undefined;

/**
 * Contact type such Phone, Fax and email
 * @member {module:model/ContactInfoInner.ContactTypeEnum} ContactType
 */
ContactInfoInner.prototype['ContactType'] = undefined;

/**
 * Other contact type which is not in the standard code list
 * @member {Object} OtherContactType
 */
ContactInfoInner.prototype['OtherContactType'] = undefined;





/**
 * Allowed values for the <code>ContactType</code> property.
 * @enum {String}
 * @readonly
 */
ContactInfoInner['ContactTypeEnum'] = {

    /**
     * value: "AlternateEmail"
     * @const
     */
    "AlternateEmail": "AlternateEmail",

    /**
     * value: "AlternateFax"
     * @const
     */
    "AlternateFax": "AlternateFax",

    /**
     * value: "AlternatePhone"
     * @const
     */
    "AlternatePhone": "AlternatePhone",

    /**
     * value: "Email"
     * @const
     */
    "Email": "Email",

    /**
     * value: "Fax"
     * @const
     */
    "Fax": "Fax",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Phone"
     * @const
     */
    "Phone": "Phone"
};



export default ContactInfoInner;

