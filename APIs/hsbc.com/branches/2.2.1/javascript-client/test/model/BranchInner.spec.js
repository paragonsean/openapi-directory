/**
 * Branch Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BranchLocatorApi);
  }
}(this, function(expect, BranchLocatorApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BranchLocatorApi.BranchInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BranchInner', function() {
    it('should create an instance of BranchInner', function() {
      // uncomment below and update the code to test BranchInner
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be.a(BranchLocatorApi.BranchInner);
    });

    it('should have the property accessibility (base name: "Accessibility")', function() {
      // uncomment below and update the code to test the property accessibility
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property availability (base name: "Availability")', function() {
      // uncomment below and update the code to test the property availability
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property contactInfo (base name: "ContactInfo")', function() {
      // uncomment below and update the code to test the property contactInfo
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property customerSegment (base name: "CustomerSegment")', function() {
      // uncomment below and update the code to test the property customerSegment
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property identification (base name: "Identification")', function() {
      // uncomment below and update the code to test the property identification
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "Note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property otherAccessibility (base name: "OtherAccessibility")', function() {
      // uncomment below and update the code to test the property otherAccessibility
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property otherCustomerSegment (base name: "OtherCustomerSegment")', function() {
      // uncomment below and update the code to test the property otherCustomerSegment
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property otherServiceAndFacility (base name: "OtherServiceAndFacility")', function() {
      // uncomment below and update the code to test the property otherServiceAndFacility
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property photo (base name: "Photo")', function() {
      // uncomment below and update the code to test the property photo
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property postalAddress (base name: "PostalAddress")', function() {
      // uncomment below and update the code to test the property postalAddress
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property sequenceNumber (base name: "SequenceNumber")', function() {
      // uncomment below and update the code to test the property sequenceNumber
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property serviceAndFacility (base name: "ServiceAndFacility")', function() {
      // uncomment below and update the code to test the property serviceAndFacility
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property sortCode (base name: "SortCode")', function() {
      // uncomment below and update the code to test the property sortCode
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new BranchLocatorApi.BranchInner();
      //expect(instance).to.be();
    });

  });

}));
