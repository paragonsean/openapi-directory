# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branch_inner import BranchInner
from openapi_server import util


class BrandInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: List[BranchInner]=None, brand_name: str=None):
        """BrandInner - a model defined in OpenAPI

        :param branch: The branch of this BrandInner.
        :param brand_name: The brand_name of this BrandInner.
        """
        self.openapi_types = {
            'branch': List[BranchInner],
            'brand_name': str
        }

        self.attribute_map = {
            'branch': 'Branch',
            'brand_name': 'BrandName'
        }

        self._branch = branch
        self._brand_name = brand_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand_inner of this BrandInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this BrandInner.

        Information that locates and identifies a specific branch of a financial institution.

        :return: The branch of this BrandInner.
        :rtype: List[BranchInner]
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this BrandInner.

        Information that locates and identifies a specific branch of a financial institution.

        :param branch: The branch of this BrandInner.
        :type branch: List[BranchInner]
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")
        if branch is not None and len(branch) < 1:
            raise ValueError("Invalid value for `branch`, number of items must be greater than or equal to `1`")

        self._branch = branch

    @property
    def brand_name(self):
        """Gets the brand_name of this BrandInner.

        Brand Name that an organisation uses to market its products or services to a consumer

        :return: The brand_name of this BrandInner.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this BrandInner.

        Brand Name that an organisation uses to market its products or services to a consumer

        :param brand_name: The brand_name of this BrandInner.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")
        if brand_name is not None and len(brand_name) > 140:
            raise ValueError("Invalid value for `brand_name`, length must be less than or equal to `140`")
        if brand_name is not None and len(brand_name) < 1:
            raise ValueError("Invalid value for `brand_name`, length must be greater than or equal to `1`")

        self._brand_name = brand_name
