# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactInfoInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_content: str=None, contact_description: str=None, contact_type: str=None, other_contact_type: object=None):
        """ContactInfoInner - a model defined in OpenAPI

        :param contact_content: The contact_content of this ContactInfoInner.
        :param contact_description: The contact_description of this ContactInfoInner.
        :param contact_type: The contact_type of this ContactInfoInner.
        :param other_contact_type: The other_contact_type of this ContactInfoInner.
        """
        self.openapi_types = {
            'contact_content': str,
            'contact_description': str,
            'contact_type': str,
            'other_contact_type': object
        }

        self.attribute_map = {
            'contact_content': 'ContactContent',
            'contact_description': 'ContactDescription',
            'contact_type': 'ContactType',
            'other_contact_type': 'OtherContactType'
        }

        self._contact_content = contact_content
        self._contact_description = contact_description
        self._contact_type = contact_type
        self._other_contact_type = other_contact_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactInfoInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactInfo_inner of this ContactInfoInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_content(self):
        """Gets the contact_content of this ContactInfoInner.

        Collection of information that identifies a phone/Fax number/ email, as defined by telecom services.

        :return: The contact_content of this ContactInfoInner.
        :rtype: str
        """
        return self._contact_content

    @contact_content.setter
    def contact_content(self, contact_content):
        """Sets the contact_content of this ContactInfoInner.

        Collection of information that identifies a phone/Fax number/ email, as defined by telecom services.

        :param contact_content: The contact_content of this ContactInfoInner.
        :type contact_content: str
        """
        if contact_content is None:
            raise ValueError("Invalid value for `contact_content`, must not be `None`")
        if contact_content is not None and len(contact_content) > 256:
            raise ValueError("Invalid value for `contact_content`, length must be less than or equal to `256`")
        if contact_content is not None and len(contact_content) < 1:
            raise ValueError("Invalid value for `contact_content`, length must be greater than or equal to `1`")

        self._contact_content = contact_content

    @property
    def contact_description(self):
        """Gets the contact_description of this ContactInfoInner.

        Description of contact such as main phone number, alternate phone number, Fax number, alternate fax number, email and alternate email

        :return: The contact_description of this ContactInfoInner.
        :rtype: str
        """
        return self._contact_description

    @contact_description.setter
    def contact_description(self, contact_description):
        """Sets the contact_description of this ContactInfoInner.

        Description of contact such as main phone number, alternate phone number, Fax number, alternate fax number, email and alternate email

        :param contact_description: The contact_description of this ContactInfoInner.
        :type contact_description: str
        """
        if contact_description is not None and len(contact_description) > 70:
            raise ValueError("Invalid value for `contact_description`, length must be less than or equal to `70`")
        if contact_description is not None and len(contact_description) < 1:
            raise ValueError("Invalid value for `contact_description`, length must be greater than or equal to `1`")

        self._contact_description = contact_description

    @property
    def contact_type(self):
        """Gets the contact_type of this ContactInfoInner.

        Contact type such Phone, Fax and email

        :return: The contact_type of this ContactInfoInner.
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this ContactInfoInner.

        Contact type such Phone, Fax and email

        :param contact_type: The contact_type of this ContactInfoInner.
        :type contact_type: str
        """
        allowed_values = ["AlternateEmail", "AlternateFax", "AlternatePhone", "Email", "Fax", "Other", "Phone"]  # noqa: E501
        if contact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_type` ({0}), must be one of {1}"
                .format(contact_type, allowed_values)
            )

        self._contact_type = contact_type

    @property
    def other_contact_type(self):
        """Gets the other_contact_type of this ContactInfoInner.

        Other contact type which is not in the standard code list

        :return: The other_contact_type of this ContactInfoInner.
        :rtype: object
        """
        return self._other_contact_type

    @other_contact_type.setter
    def other_contact_type(self, other_contact_type):
        """Sets the other_contact_type of this ContactInfoInner.

        Other contact type which is not in the standard code list

        :param other_contact_type: The other_contact_type of this ContactInfoInner.
        :type other_contact_type: object
        """

        self._other_contact_type = other_contact_type
