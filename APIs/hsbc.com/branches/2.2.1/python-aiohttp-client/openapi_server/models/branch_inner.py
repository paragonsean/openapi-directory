# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_info_inner import ContactInfoInner
from openapi_server.models.other_accessibility_inner import OtherAccessibilityInner
from openapi_server.models.other_customer_segment_inner import OtherCustomerSegmentInner
from openapi_server.models.other_service_and_facility_inner import OtherServiceAndFacilityInner
from openapi_server import util


class BranchInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessibility: List[str]=None, availability: object=None, contact_info: List[ContactInfoInner]=None, customer_segment: List[str]=None, identification: str=None, name: str=None, note: str=None, other_accessibility: List[OtherAccessibilityInner]=None, other_customer_segment: List[OtherCustomerSegmentInner]=None, other_service_and_facility: List[OtherServiceAndFacilityInner]=None, photo: str=None, postal_address: object=None, sequence_number: str=None, service_and_facility: List[str]=None, sort_code: List[str]=None, type: str=None):
        """BranchInner - a model defined in OpenAPI

        :param accessibility: The accessibility of this BranchInner.
        :param availability: The availability of this BranchInner.
        :param contact_info: The contact_info of this BranchInner.
        :param customer_segment: The customer_segment of this BranchInner.
        :param identification: The identification of this BranchInner.
        :param name: The name of this BranchInner.
        :param note: The note of this BranchInner.
        :param other_accessibility: The other_accessibility of this BranchInner.
        :param other_customer_segment: The other_customer_segment of this BranchInner.
        :param other_service_and_facility: The other_service_and_facility of this BranchInner.
        :param photo: The photo of this BranchInner.
        :param postal_address: The postal_address of this BranchInner.
        :param sequence_number: The sequence_number of this BranchInner.
        :param service_and_facility: The service_and_facility of this BranchInner.
        :param sort_code: The sort_code of this BranchInner.
        :param type: The type of this BranchInner.
        """
        self.openapi_types = {
            'accessibility': List[str],
            'availability': object,
            'contact_info': List[ContactInfoInner],
            'customer_segment': List[str],
            'identification': str,
            'name': str,
            'note': str,
            'other_accessibility': List[OtherAccessibilityInner],
            'other_customer_segment': List[OtherCustomerSegmentInner],
            'other_service_and_facility': List[OtherServiceAndFacilityInner],
            'photo': str,
            'postal_address': object,
            'sequence_number': str,
            'service_and_facility': List[str],
            'sort_code': List[str],
            'type': str
        }

        self.attribute_map = {
            'accessibility': 'Accessibility',
            'availability': 'Availability',
            'contact_info': 'ContactInfo',
            'customer_segment': 'CustomerSegment',
            'identification': 'Identification',
            'name': 'Name',
            'note': 'Note',
            'other_accessibility': 'OtherAccessibility',
            'other_customer_segment': 'OtherCustomerSegment',
            'other_service_and_facility': 'OtherServiceAndFacility',
            'photo': 'Photo',
            'postal_address': 'PostalAddress',
            'sequence_number': 'SequenceNumber',
            'service_and_facility': 'ServiceAndFacility',
            'sort_code': 'SortCode',
            'type': 'Type'
        }

        self._accessibility = accessibility
        self._availability = availability
        self._contact_info = contact_info
        self._customer_segment = customer_segment
        self._identification = identification
        self._name = name
        self._note = note
        self._other_accessibility = other_accessibility
        self._other_customer_segment = other_customer_segment
        self._other_service_and_facility = other_service_and_facility
        self._photo = photo
        self._postal_address = postal_address
        self._sequence_number = sequence_number
        self._service_and_facility = service_and_facility
        self._sort_code = sort_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BranchInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Branch_inner of this BranchInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessibility(self):
        """Gets the accessibility of this BranchInner.

        Accessibility is the ability and ease a customer can access a service, good, associate, or facility. Features which make the Bank accessible to disabled people

        :return: The accessibility of this BranchInner.
        :rtype: List[str]
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this BranchInner.

        Accessibility is the ability and ease a customer can access a service, good, associate, or facility. Features which make the Bank accessible to disabled people

        :param accessibility: The accessibility of this BranchInner.
        :type accessibility: List[str]
        """
        allowed_values = ["AutomaticDoors", "AudioCashMachine", "ExternalRamp", "HelpingHandUnit", "InductionLoop", "InternalRamp", "LevelAccess", "LowerLevelCounter", "Other", "WheelchairAccess"]  # noqa: E501
        if not set(accessibility).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `accessibility` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(accessibility) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._accessibility = accessibility

    @property
    def availability(self):
        """Gets the availability of this BranchInner.

        Days and times defining when the branch is available for use by a customer

        :return: The availability of this BranchInner.
        :rtype: object
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this BranchInner.

        Days and times defining when the branch is available for use by a customer

        :param availability: The availability of this BranchInner.
        :type availability: object
        """

        self._availability = availability

    @property
    def contact_info(self):
        """Gets the contact_info of this BranchInner.

        Communication device number or electronic address used for communication.

        :return: The contact_info of this BranchInner.
        :rtype: List[ContactInfoInner]
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this BranchInner.

        Communication device number or electronic address used for communication.

        :param contact_info: The contact_info of this BranchInner.
        :type contact_info: List[ContactInfoInner]
        """

        self._contact_info = contact_info

    @property
    def customer_segment(self):
        """Gets the customer_segment of this BranchInner.

        The marketing segment which the branch is able to address in terms of customer type. Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another

        :return: The customer_segment of this BranchInner.
        :rtype: List[str]
        """
        return self._customer_segment

    @customer_segment.setter
    def customer_segment(self, customer_segment):
        """Sets the customer_segment of this BranchInner.

        The marketing segment which the branch is able to address in terms of customer type. Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another

        :param customer_segment: The customer_segment of this BranchInner.
        :type customer_segment: List[str]
        """
        allowed_values = ["Business", "Corporate", "Other", "Personal", "Private", "Premier", "Select", "SME", "Wealth"]  # noqa: E501
        if not set(customer_segment).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `customer_segment` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(customer_segment) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._customer_segment = customer_segment

    @property
    def identification(self):
        """Gets the identification of this BranchInner.

        Unique and unambiguous identification of a branch of a financial institution.

        :return: The identification of this BranchInner.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this BranchInner.

        Unique and unambiguous identification of a branch of a financial institution.

        :param identification: The identification of this BranchInner.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")
        if identification is not None and len(identification) > 35:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `35`")
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")

        self._identification = identification

    @property
    def name(self):
        """Gets the name of this BranchInner.

        Name by which a branch is known and which is usually used to identify that branch.

        :return: The name of this BranchInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BranchInner.

        Name by which a branch is known and which is usually used to identify that branch.

        :param name: The name of this BranchInner.
        :type name: str
        """
        if name is not None and len(name) > 140:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `140`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def note(self):
        """Gets the note of this BranchInner.

        Summary description of services, facility and availability.

        :return: The note of this BranchInner.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BranchInner.

        Summary description of services, facility and availability.

        :param note: The note of this BranchInner.
        :type note: str
        """
        if note is not None and len(note) > 2000:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `2000`")
        if note is not None and len(note) < 1:
            raise ValueError("Invalid value for `note`, length must be greater than or equal to `1`")

        self._note = note

    @property
    def other_accessibility(self):
        """Gets the other_accessibility of this BranchInner.

        Enter any new code , name and description for any other Accessibility

        :return: The other_accessibility of this BranchInner.
        :rtype: List[OtherAccessibilityInner]
        """
        return self._other_accessibility

    @other_accessibility.setter
    def other_accessibility(self, other_accessibility):
        """Sets the other_accessibility of this BranchInner.

        Enter any new code , name and description for any other Accessibility

        :param other_accessibility: The other_accessibility of this BranchInner.
        :type other_accessibility: List[OtherAccessibilityInner]
        """

        self._other_accessibility = other_accessibility

    @property
    def other_customer_segment(self):
        """Gets the other_customer_segment of this BranchInner.

        Enter a new code , name and description for any other Customer Segment

        :return: The other_customer_segment of this BranchInner.
        :rtype: List[OtherCustomerSegmentInner]
        """
        return self._other_customer_segment

    @other_customer_segment.setter
    def other_customer_segment(self, other_customer_segment):
        """Sets the other_customer_segment of this BranchInner.

        Enter a new code , name and description for any other Customer Segment

        :param other_customer_segment: The other_customer_segment of this BranchInner.
        :type other_customer_segment: List[OtherCustomerSegmentInner]
        """

        self._other_customer_segment = other_customer_segment

    @property
    def other_service_and_facility(self):
        """Gets the other_service_and_facility of this BranchInner.

        Enter any new code , name and description for any Other Facility

        :return: The other_service_and_facility of this BranchInner.
        :rtype: List[OtherServiceAndFacilityInner]
        """
        return self._other_service_and_facility

    @other_service_and_facility.setter
    def other_service_and_facility(self, other_service_and_facility):
        """Sets the other_service_and_facility of this BranchInner.

        Enter any new code , name and description for any Other Facility

        :param other_service_and_facility: The other_service_and_facility of this BranchInner.
        :type other_service_and_facility: List[OtherServiceAndFacilityInner]
        """

        self._other_service_and_facility = other_service_and_facility

    @property
    def photo(self):
        """Gets the photo of this BranchInner.

        Image related to the branch

        :return: The photo of this BranchInner.
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this BranchInner.

        Image related to the branch

        :param photo: The photo of this BranchInner.
        :type photo: str
        """

        self._photo = photo

    @property
    def postal_address(self):
        """Gets the postal_address of this BranchInner.

        Information that locates and identifies a specific address, as defined by postal services.

        :return: The postal_address of this BranchInner.
        :rtype: object
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this BranchInner.

        Information that locates and identifies a specific address, as defined by postal services.

        :param postal_address: The postal_address of this BranchInner.
        :type postal_address: object
        """
        if postal_address is None:
            raise ValueError("Invalid value for `postal_address`, must not be `None`")

        self._postal_address = postal_address

    @property
    def sequence_number(self):
        """Gets the sequence_number of this BranchInner.

        Sequence Number that is used in conjunction with Identification to uniquely identify a branch. Physical branches should have 0 assigned, mobile and sub branches should have 1,2,3....etc. assigned.

        :return: The sequence_number of this BranchInner.
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this BranchInner.

        Sequence Number that is used in conjunction with Identification to uniquely identify a branch. Physical branches should have 0 assigned, mobile and sub branches should have 1,2,3....etc. assigned.

        :param sequence_number: The sequence_number of this BranchInner.
        :type sequence_number: str
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")
        if sequence_number is not None and len(sequence_number) > 35:
            raise ValueError("Invalid value for `sequence_number`, length must be less than or equal to `35`")
        if sequence_number is not None and len(sequence_number) < 1:
            raise ValueError("Invalid value for `sequence_number`, length must be greater than or equal to `1`")

        self._sequence_number = sequence_number

    @property
    def service_and_facility(self):
        """Gets the service_and_facility of this BranchInner.

        Service/Facilities offered at a branch.

        :return: The service_and_facility of this BranchInner.
        :rtype: List[str]
        """
        return self._service_and_facility

    @service_and_facility.setter
    def service_and_facility(self, service_and_facility):
        """Sets the service_and_facility of this BranchInner.

        Service/Facilities offered at a branch.

        :param service_and_facility: The service_and_facility of this BranchInner.
        :type service_and_facility: List[str]
        """
        allowed_values = ["AssistedServiceCounter", "ExternalATM", "AccountVerificationService", "BusinessCounter", "BureauDeChange", "BusinessDepositTerminal", "BusinessITSupport", "CardIssuanceFacility", "CollectionLockers", "CounterServices", "ExternalQuickServicePoint", "InternalQuickServicePoint", "InternalATM", "LodgementDevice", "MortgageAdvisor", "MeetingRooms", "NightSafe", "OnlineBankingPoint", "OnDemandCurrency", "Other", "Parking", "PremierCounter", "QuickDeposit", "SaturdayCounterService", "StatementPrinter", "SelfServiceAccountOpening", "VideoBanking", "WiFi"]  # noqa: E501
        if not set(service_and_facility).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `service_and_facility` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(service_and_facility) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._service_and_facility = service_and_facility

    @property
    def sort_code(self):
        """Gets the sort_code of this BranchInner.

        United Kingdom (UK) Sort Code - identifies British financial institutions on the British national clearing systems. The sort code, which is a six-digit number, is usually formatted as three pairs of numbers, for example 12-34-56. It identifies both the bank and the branch(s) where the account is held.

        :return: The sort_code of this BranchInner.
        :rtype: List[str]
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this BranchInner.

        United Kingdom (UK) Sort Code - identifies British financial institutions on the British national clearing systems. The sort code, which is a six-digit number, is usually formatted as three pairs of numbers, for example 12-34-56. It identifies both the bank and the branch(s) where the account is held.

        :param sort_code: The sort_code of this BranchInner.
        :type sort_code: List[str]
        """

        self._sort_code = sort_code

    @property
    def type(self):
        """Gets the type of this BranchInner.

        Codeset to indicate if a branch is physically in 1 location or is mobile

        :return: The type of this BranchInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BranchInner.

        Codeset to indicate if a branch is physically in 1 location or is mobile

        :param type: The type of this BranchInner.
        :type type: str
        """
        allowed_values = ["Mobile", "Physical"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
