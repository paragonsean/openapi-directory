/**
 * ATM Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIATMsApi_H
#define OAI_OAIATMsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIATMDefinitionMeta.h"
#include "OAIErrorDefinition400.h"
#include "OAIErrorDefinition408.h"
#include "OAIErrorDefinition429.h"
#include "OAIErrorDefinition500.h"
#include "OAIErrorDefinition503.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIATMsApi : public QObject {
    Q_OBJECT

public:
    OAIATMsApi(const int timeOut = 0);
    ~OAIATMsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void openBankingV22AtmsGet();

    /**
    * @param[in]  country QString [required]
    */
    virtual void xOpenBankingV22AtmsCountryCountryGet(const QString &country);

    /**
    * @param[in]  country QString [required]
    * @param[in]  town QString [required]
    */
    virtual void xOpenBankingV22AtmsCountryCountryTownTownGet(const QString &country, const QString &town);

    /**
    * @param[in]  latitude QString [required]
    * @param[in]  longitude QString [required]
    * @param[in]  radius double [required]
    */
    virtual void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGet(const QString &latitude, const QString &longitude, const double &radius);

    /**
    * @param[in]  postcode QString [required]
    */
    virtual void xOpenBankingV22AtmsPostcodePostcodeGet(const QString &postcode);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void openBankingV22AtmsGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22AtmsCountryCountryGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22AtmsCountryCountryTownTownGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetCallback(OAIHttpRequestWorker *worker);
    void xOpenBankingV22AtmsPostcodePostcodeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void openBankingV22AtmsGetSignal(OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsCountryCountryGetSignal(OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsCountryCountryTownTownGetSignal(OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignal(OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsPostcodePostcodeGetSignal(OAIATMDefinitionMeta summary);


    void openBankingV22AtmsGetSignalFull(OAIHttpRequestWorker *worker, OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsCountryCountryGetSignalFull(OAIHttpRequestWorker *worker, OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsCountryCountryTownTownGetSignalFull(OAIHttpRequestWorker *worker, OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignalFull(OAIHttpRequestWorker *worker, OAIATMDefinitionMeta summary);
    void xOpenBankingV22AtmsPostcodePostcodeGetSignalFull(OAIHttpRequestWorker *worker, OAIATMDefinitionMeta summary);

    Q_DECL_DEPRECATED_X("Use openBankingV22AtmsGetSignalError() instead")
    void openBankingV22AtmsGetSignalE(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openBankingV22AtmsGetSignalError(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsCountryCountryGetSignalError() instead")
    void xOpenBankingV22AtmsCountryCountryGetSignalE(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsCountryCountryGetSignalError(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsCountryCountryTownTownGetSignalError() instead")
    void xOpenBankingV22AtmsCountryCountryTownTownGetSignalE(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsCountryCountryTownTownGetSignalError(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignalError() instead")
    void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignalE(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignalError(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsPostcodePostcodeGetSignalError() instead")
    void xOpenBankingV22AtmsPostcodePostcodeGetSignalE(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsPostcodePostcodeGetSignalError(OAIATMDefinitionMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use openBankingV22AtmsGetSignalErrorFull() instead")
    void openBankingV22AtmsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openBankingV22AtmsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsCountryCountryGetSignalErrorFull() instead")
    void xOpenBankingV22AtmsCountryCountryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsCountryCountryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsCountryCountryTownTownGetSignalErrorFull() instead")
    void xOpenBankingV22AtmsCountryCountryTownTownGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsCountryCountryTownTownGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignalErrorFull() instead")
    void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xOpenBankingV22AtmsPostcodePostcodeGetSignalErrorFull() instead")
    void xOpenBankingV22AtmsPostcodePostcodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xOpenBankingV22AtmsPostcodePostcodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
