/**
 * ATM Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIATM_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIATM_inner::OAIATM_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIATM_inner::OAIATM_inner() {
    this->initializeModel();
}

OAIATM_inner::~OAIATM_inner() {}

void OAIATM_inner::initializeModel() {

    m_atm_services_isSet = false;
    m_atm_services_isValid = false;

    m_access24_hours_indicator_isSet = false;
    m_access24_hours_indicator_isValid = false;

    m_accessibility_isSet = false;
    m_accessibility_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_identification_isSet = false;
    m_identification_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_minimum_possible_amount_isSet = false;
    m_minimum_possible_amount_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_other_atm_services_isSet = false;
    m_other_atm_services_isValid = false;

    m_other_accessibility_isSet = false;
    m_other_accessibility_isValid = false;

    m_supported_currencies_isSet = false;
    m_supported_currencies_isValid = false;

    m_supported_languages_isSet = false;
    m_supported_languages_isValid = false;
}

void OAIATM_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIATM_inner::fromJsonObject(QJsonObject json) {

    m_atm_services_isValid = ::OpenAPI::fromJsonValue(m_atm_services, json[QString("ATMServices")]);
    m_atm_services_isSet = !json[QString("ATMServices")].isNull() && m_atm_services_isValid;

    m_access24_hours_indicator_isValid = ::OpenAPI::fromJsonValue(m_access24_hours_indicator, json[QString("Access24HoursIndicator")]);
    m_access24_hours_indicator_isSet = !json[QString("Access24HoursIndicator")].isNull() && m_access24_hours_indicator_isValid;

    m_accessibility_isValid = ::OpenAPI::fromJsonValue(m_accessibility, json[QString("Accessibility")]);
    m_accessibility_isSet = !json[QString("Accessibility")].isNull() && m_accessibility_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("Branch")]);
    m_branch_isSet = !json[QString("Branch")].isNull() && m_branch_isValid;

    m_identification_isValid = ::OpenAPI::fromJsonValue(m_identification, json[QString("Identification")]);
    m_identification_isSet = !json[QString("Identification")].isNull() && m_identification_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_minimum_possible_amount_isValid = ::OpenAPI::fromJsonValue(m_minimum_possible_amount, json[QString("MinimumPossibleAmount")]);
    m_minimum_possible_amount_isSet = !json[QString("MinimumPossibleAmount")].isNull() && m_minimum_possible_amount_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("Note")]);
    m_note_isSet = !json[QString("Note")].isNull() && m_note_isValid;

    m_other_atm_services_isValid = ::OpenAPI::fromJsonValue(m_other_atm_services, json[QString("OtherATMServices")]);
    m_other_atm_services_isSet = !json[QString("OtherATMServices")].isNull() && m_other_atm_services_isValid;

    m_other_accessibility_isValid = ::OpenAPI::fromJsonValue(m_other_accessibility, json[QString("OtherAccessibility")]);
    m_other_accessibility_isSet = !json[QString("OtherAccessibility")].isNull() && m_other_accessibility_isValid;

    m_supported_currencies_isValid = ::OpenAPI::fromJsonValue(m_supported_currencies, json[QString("SupportedCurrencies")]);
    m_supported_currencies_isSet = !json[QString("SupportedCurrencies")].isNull() && m_supported_currencies_isValid;

    m_supported_languages_isValid = ::OpenAPI::fromJsonValue(m_supported_languages, json[QString("SupportedLanguages")]);
    m_supported_languages_isSet = !json[QString("SupportedLanguages")].isNull() && m_supported_languages_isValid;
}

QString OAIATM_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIATM_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_atm_services.size() > 0) {
        obj.insert(QString("ATMServices"), ::OpenAPI::toJsonValue(m_atm_services));
    }
    if (m_access24_hours_indicator_isSet) {
        obj.insert(QString("Access24HoursIndicator"), ::OpenAPI::toJsonValue(m_access24_hours_indicator));
    }
    if (m_accessibility.size() > 0) {
        obj.insert(QString("Accessibility"), ::OpenAPI::toJsonValue(m_accessibility));
    }
    if (m_branch_isSet) {
        obj.insert(QString("Branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_identification_isSet) {
        obj.insert(QString("Identification"), ::OpenAPI::toJsonValue(m_identification));
    }
    if (m_location_isSet) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_minimum_possible_amount_isSet) {
        obj.insert(QString("MinimumPossibleAmount"), ::OpenAPI::toJsonValue(m_minimum_possible_amount));
    }
    if (m_note.size() > 0) {
        obj.insert(QString("Note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_other_atm_services.size() > 0) {
        obj.insert(QString("OtherATMServices"), ::OpenAPI::toJsonValue(m_other_atm_services));
    }
    if (m_other_accessibility.size() > 0) {
        obj.insert(QString("OtherAccessibility"), ::OpenAPI::toJsonValue(m_other_accessibility));
    }
    if (m_supported_currencies.size() > 0) {
        obj.insert(QString("SupportedCurrencies"), ::OpenAPI::toJsonValue(m_supported_currencies));
    }
    if (m_supported_languages.size() > 0) {
        obj.insert(QString("SupportedLanguages"), ::OpenAPI::toJsonValue(m_supported_languages));
    }
    return obj;
}

QList<QString> OAIATM_inner::getAtmServices() const {
    return m_atm_services;
}
void OAIATM_inner::setAtmServices(const QList<QString> &atm_services) {
    m_atm_services = atm_services;
    m_atm_services_isSet = true;
}

bool OAIATM_inner::is_atm_services_Set() const{
    return m_atm_services_isSet;
}

bool OAIATM_inner::is_atm_services_Valid() const{
    return m_atm_services_isValid;
}

bool OAIATM_inner::isAccess24HoursIndicator() const {
    return m_access24_hours_indicator;
}
void OAIATM_inner::setAccess24HoursIndicator(const bool &access24_hours_indicator) {
    m_access24_hours_indicator = access24_hours_indicator;
    m_access24_hours_indicator_isSet = true;
}

bool OAIATM_inner::is_access24_hours_indicator_Set() const{
    return m_access24_hours_indicator_isSet;
}

bool OAIATM_inner::is_access24_hours_indicator_Valid() const{
    return m_access24_hours_indicator_isValid;
}

QList<QString> OAIATM_inner::getAccessibility() const {
    return m_accessibility;
}
void OAIATM_inner::setAccessibility(const QList<QString> &accessibility) {
    m_accessibility = accessibility;
    m_accessibility_isSet = true;
}

bool OAIATM_inner::is_accessibility_Set() const{
    return m_accessibility_isSet;
}

bool OAIATM_inner::is_accessibility_Valid() const{
    return m_accessibility_isValid;
}

OAIObject OAIATM_inner::getBranch() const {
    return m_branch;
}
void OAIATM_inner::setBranch(const OAIObject &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIATM_inner::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIATM_inner::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIATM_inner::getIdentification() const {
    return m_identification;
}
void OAIATM_inner::setIdentification(const QString &identification) {
    m_identification = identification;
    m_identification_isSet = true;
}

bool OAIATM_inner::is_identification_Set() const{
    return m_identification_isSet;
}

bool OAIATM_inner::is_identification_Valid() const{
    return m_identification_isValid;
}

OAIObject OAIATM_inner::getLocation() const {
    return m_location;
}
void OAIATM_inner::setLocation(const OAIObject &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIATM_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIATM_inner::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIATM_inner::getMinimumPossibleAmount() const {
    return m_minimum_possible_amount;
}
void OAIATM_inner::setMinimumPossibleAmount(const QString &minimum_possible_amount) {
    m_minimum_possible_amount = minimum_possible_amount;
    m_minimum_possible_amount_isSet = true;
}

bool OAIATM_inner::is_minimum_possible_amount_Set() const{
    return m_minimum_possible_amount_isSet;
}

bool OAIATM_inner::is_minimum_possible_amount_Valid() const{
    return m_minimum_possible_amount_isValid;
}

QList<QString> OAIATM_inner::getNote() const {
    return m_note;
}
void OAIATM_inner::setNote(const QList<QString> &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIATM_inner::is_note_Set() const{
    return m_note_isSet;
}

bool OAIATM_inner::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIOtherATMServices_inner> OAIATM_inner::getOtherAtmServices() const {
    return m_other_atm_services;
}
void OAIATM_inner::setOtherAtmServices(const QList<OAIOtherATMServices_inner> &other_atm_services) {
    m_other_atm_services = other_atm_services;
    m_other_atm_services_isSet = true;
}

bool OAIATM_inner::is_other_atm_services_Set() const{
    return m_other_atm_services_isSet;
}

bool OAIATM_inner::is_other_atm_services_Valid() const{
    return m_other_atm_services_isValid;
}

QList<OAIOtherAccessibility_inner> OAIATM_inner::getOtherAccessibility() const {
    return m_other_accessibility;
}
void OAIATM_inner::setOtherAccessibility(const QList<OAIOtherAccessibility_inner> &other_accessibility) {
    m_other_accessibility = other_accessibility;
    m_other_accessibility_isSet = true;
}

bool OAIATM_inner::is_other_accessibility_Set() const{
    return m_other_accessibility_isSet;
}

bool OAIATM_inner::is_other_accessibility_Valid() const{
    return m_other_accessibility_isValid;
}

QList<QString> OAIATM_inner::getSupportedCurrencies() const {
    return m_supported_currencies;
}
void OAIATM_inner::setSupportedCurrencies(const QList<QString> &supported_currencies) {
    m_supported_currencies = supported_currencies;
    m_supported_currencies_isSet = true;
}

bool OAIATM_inner::is_supported_currencies_Set() const{
    return m_supported_currencies_isSet;
}

bool OAIATM_inner::is_supported_currencies_Valid() const{
    return m_supported_currencies_isValid;
}

QList<QString> OAIATM_inner::getSupportedLanguages() const {
    return m_supported_languages;
}
void OAIATM_inner::setSupportedLanguages(const QList<QString> &supported_languages) {
    m_supported_languages = supported_languages;
    m_supported_languages_isSet = true;
}

bool OAIATM_inner::is_supported_languages_Set() const{
    return m_supported_languages_isSet;
}

bool OAIATM_inner::is_supported_languages_Valid() const{
    return m_supported_languages_isValid;
}

bool OAIATM_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_atm_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_access24_hours_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accessibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_possible_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_atm_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_accessibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIATM_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identification_isValid && m_location_isValid && m_supported_currencies_isValid && true;
}

} // namespace OpenAPI
