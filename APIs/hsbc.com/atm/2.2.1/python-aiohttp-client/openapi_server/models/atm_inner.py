# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.other_atm_services_inner import OtherATMServicesInner
from openapi_server.models.other_accessibility_inner import OtherAccessibilityInner
import re
from openapi_server import util


class ATMInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, atm_services: List[str]=None, access24_hours_indicator: bool=None, accessibility: List[str]=None, branch: object=None, identification: str=None, location: object=None, minimum_possible_amount: str=None, note: List[str]=None, other_atm_services: List[OtherATMServicesInner]=None, other_accessibility: List[OtherAccessibilityInner]=None, supported_currencies: List[str]=None, supported_languages: List[str]=None):
        """ATMInner - a model defined in OpenAPI

        :param atm_services: The atm_services of this ATMInner.
        :param access24_hours_indicator: The access24_hours_indicator of this ATMInner.
        :param accessibility: The accessibility of this ATMInner.
        :param branch: The branch of this ATMInner.
        :param identification: The identification of this ATMInner.
        :param location: The location of this ATMInner.
        :param minimum_possible_amount: The minimum_possible_amount of this ATMInner.
        :param note: The note of this ATMInner.
        :param other_atm_services: The other_atm_services of this ATMInner.
        :param other_accessibility: The other_accessibility of this ATMInner.
        :param supported_currencies: The supported_currencies of this ATMInner.
        :param supported_languages: The supported_languages of this ATMInner.
        """
        self.openapi_types = {
            'atm_services': List[str],
            'access24_hours_indicator': bool,
            'accessibility': List[str],
            'branch': object,
            'identification': str,
            'location': object,
            'minimum_possible_amount': str,
            'note': List[str],
            'other_atm_services': List[OtherATMServicesInner],
            'other_accessibility': List[OtherAccessibilityInner],
            'supported_currencies': List[str],
            'supported_languages': List[str]
        }

        self.attribute_map = {
            'atm_services': 'ATMServices',
            'access24_hours_indicator': 'Access24HoursIndicator',
            'accessibility': 'Accessibility',
            'branch': 'Branch',
            'identification': 'Identification',
            'location': 'Location',
            'minimum_possible_amount': 'MinimumPossibleAmount',
            'note': 'Note',
            'other_atm_services': 'OtherATMServices',
            'other_accessibility': 'OtherAccessibility',
            'supported_currencies': 'SupportedCurrencies',
            'supported_languages': 'SupportedLanguages'
        }

        self._atm_services = atm_services
        self._access24_hours_indicator = access24_hours_indicator
        self._accessibility = accessibility
        self._branch = branch
        self._identification = identification
        self._location = location
        self._minimum_possible_amount = minimum_possible_amount
        self._note = note
        self._other_atm_services = other_atm_services
        self._other_accessibility = other_accessibility
        self._supported_currencies = supported_currencies
        self._supported_languages = supported_languages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ATMInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ATM_inner of this ATMInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def atm_services(self):
        """Gets the atm_services of this ATMInner.

        Describes the type of transaction available for a customer on an ATM.

        :return: The atm_services of this ATMInner.
        :rtype: List[str]
        """
        return self._atm_services

    @atm_services.setter
    def atm_services(self, atm_services):
        """Sets the atm_services of this ATMInner.

        Describes the type of transaction available for a customer on an ATM.

        :param atm_services: The atm_services of this ATMInner.
        :type atm_services: List[str]
        """
        allowed_values = ["Balance", "BillPayments", "CashDeposits", "CharityDonation", "ChequeDeposits", "CashWithdrawal", "EnvelopeDeposit", "FastCash", "MobileBankingRegistration", "MobilePaymentRegistration", "MobilePhoneTopUp", "OrderStatement", "Other", "PINActivation", "PINChange", "PINUnblock", "MiniStatement"]  # noqa: E501
        if not set(atm_services).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `atm_services` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(atm_services) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._atm_services = atm_services

    @property
    def access24_hours_indicator(self):
        """Gets the access24_hours_indicator of this ATMInner.

        Indicates that the ATM is available for use by customers 24 hours per day

        :return: The access24_hours_indicator of this ATMInner.
        :rtype: bool
        """
        return self._access24_hours_indicator

    @access24_hours_indicator.setter
    def access24_hours_indicator(self, access24_hours_indicator):
        """Sets the access24_hours_indicator of this ATMInner.

        Indicates that the ATM is available for use by customers 24 hours per day

        :param access24_hours_indicator: The access24_hours_indicator of this ATMInner.
        :type access24_hours_indicator: bool
        """

        self._access24_hours_indicator = access24_hours_indicator

    @property
    def accessibility(self):
        """Gets the accessibility of this ATMInner.

        Indicates Types of Accessibility

        :return: The accessibility of this ATMInner.
        :rtype: List[str]
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this ATMInner.

        Indicates Types of Accessibility

        :param accessibility: The accessibility of this ATMInner.
        :type accessibility: List[str]
        """
        allowed_values = ["AudioCashMachine", "AutomaticDoors", "ExternalRamp", "InductionLoop", "InternalRamp", "LevelAccess", "LowerLevelCounter", "Other", "WheelchairAccess"]  # noqa: E501
        if not set(accessibility).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `accessibility` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(accessibility) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._accessibility = accessibility

    @property
    def branch(self):
        """Gets the branch of this ATMInner.

        Information that locates and identifies a specific branch of a financial institution.

        :return: The branch of this ATMInner.
        :rtype: object
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this ATMInner.

        Information that locates and identifies a specific branch of a financial institution.

        :param branch: The branch of this ATMInner.
        :type branch: object
        """

        self._branch = branch

    @property
    def identification(self):
        """Gets the identification of this ATMInner.

        ATM terminal device identification for the acquirer and the issuer.

        :return: The identification of this ATMInner.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this ATMInner.

        ATM terminal device identification for the acquirer and the issuer.

        :param identification: The identification of this ATMInner.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")
        if identification is not None and len(identification) > 35:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `35`")
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")

        self._identification = identification

    @property
    def location(self):
        """Gets the location of this ATMInner.

        Location of the ATM.

        :return: The location of this ATMInner.
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ATMInner.

        Location of the ATM.

        :param location: The location of this ATMInner.
        :type location: object
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def minimum_possible_amount(self):
        """Gets the minimum_possible_amount of this ATMInner.

        Minimum amount allowed for a transaction in the service.

        :return: The minimum_possible_amount of this ATMInner.
        :rtype: str
        """
        return self._minimum_possible_amount

    @minimum_possible_amount.setter
    def minimum_possible_amount(self, minimum_possible_amount):
        """Sets the minimum_possible_amount of this ATMInner.

        Minimum amount allowed for a transaction in the service.

        :param minimum_possible_amount: The minimum_possible_amount of this ATMInner.
        :type minimum_possible_amount: str
        """
        if minimum_possible_amount is not None and not re.search(r'^-?\d{1,10}\.?\d{0,2}$', minimum_possible_amount):
            raise ValueError("Invalid value for `minimum_possible_amount`, must be a follow pattern or equal to `/^-?\d{1,10}\.?\d{0,2}$/`")

        self._minimum_possible_amount = minimum_possible_amount

    @property
    def note(self):
        """Gets the note of this ATMInner.

        Summary description of the ATM.

        :return: The note of this ATMInner.
        :rtype: List[str]
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ATMInner.

        Summary description of the ATM.

        :param note: The note of this ATMInner.
        :type note: List[str]
        """

        self._note = note

    @property
    def other_atm_services(self):
        """Gets the other_atm_services of this ATMInner.

        Enter a new code , name and description for any other ATM Service

        :return: The other_atm_services of this ATMInner.
        :rtype: List[OtherATMServicesInner]
        """
        return self._other_atm_services

    @other_atm_services.setter
    def other_atm_services(self, other_atm_services):
        """Sets the other_atm_services of this ATMInner.

        Enter a new code , name and description for any other ATM Service

        :param other_atm_services: The other_atm_services of this ATMInner.
        :type other_atm_services: List[OtherATMServicesInner]
        """

        self._other_atm_services = other_atm_services

    @property
    def other_accessibility(self):
        """Gets the other_accessibility of this ATMInner.

        Enter a new code , name and description for any other ATM accessibility options

        :return: The other_accessibility of this ATMInner.
        :rtype: List[OtherAccessibilityInner]
        """
        return self._other_accessibility

    @other_accessibility.setter
    def other_accessibility(self, other_accessibility):
        """Sets the other_accessibility of this ATMInner.

        Enter a new code , name and description for any other ATM accessibility options

        :param other_accessibility: The other_accessibility of this ATMInner.
        :type other_accessibility: List[OtherAccessibilityInner]
        """

        self._other_accessibility = other_accessibility

    @property
    def supported_currencies(self):
        """Gets the supported_currencies of this ATMInner.

        All ISO 4217 defined currency  supported by the ATM.

        :return: The supported_currencies of this ATMInner.
        :rtype: List[str]
        """
        return self._supported_currencies

    @supported_currencies.setter
    def supported_currencies(self, supported_currencies):
        """Sets the supported_currencies of this ATMInner.

        All ISO 4217 defined currency  supported by the ATM.

        :param supported_currencies: The supported_currencies of this ATMInner.
        :type supported_currencies: List[str]
        """
        if supported_currencies is None:
            raise ValueError("Invalid value for `supported_currencies`, must not be `None`")
        if supported_currencies is not None and len(supported_currencies) < 1:
            raise ValueError("Invalid value for `supported_currencies`, number of items must be greater than or equal to `1`")

        self._supported_currencies = supported_currencies

    @property
    def supported_languages(self):
        """Gets the supported_languages of this ATMInner.

        Identification of the language name according to the ISO 639-1 codes. The type is validated by the list of values coded with two alphabetic characters, defined in the standard.

        :return: The supported_languages of this ATMInner.
        :rtype: List[str]
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages):
        """Sets the supported_languages of this ATMInner.

        Identification of the language name according to the ISO 639-1 codes. The type is validated by the list of values coded with two alphabetic characters, defined in the standard.

        :param supported_languages: The supported_languages of this ATMInner.
        :type supported_languages: List[str]
        """

        self._supported_languages = supported_languages
