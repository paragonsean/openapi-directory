/*
 * ATM Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ATMDefinitionMeta;
import java.math.BigDecimal;
import org.openapitools.client.model.ErrorDefinition400;
import org.openapitools.client.model.ErrorDefinition408;
import org.openapitools.client.model.ErrorDefinition429;
import org.openapitools.client.model.ErrorDefinition500;
import org.openapitools.client.model.ErrorDefinition503;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AtmsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AtmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AtmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for openBankingV22AtmsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openBankingV22AtmsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open-banking/v2.2/atms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/prs.openbanking.opendata.v2.2+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openBankingV22AtmsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return openBankingV22AtmsGetCall(_callback);

    }

    /**
     * 
     * This API will return data about all our ATMs and is prepared to the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. It is regulated by the UK Competition and Markets Authority (CMA). Data is only available for the United Kingdom.
     * @return ATMDefinitionMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ATMDefinitionMeta openBankingV22AtmsGet() throws ApiException {
        ApiResponse<ATMDefinitionMeta> localVarResp = openBankingV22AtmsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * This API will return data about all our ATMs and is prepared to the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. It is regulated by the UK Competition and Markets Authority (CMA). Data is only available for the United Kingdom.
     * @return ApiResponse&lt;ATMDefinitionMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ATMDefinitionMeta> openBankingV22AtmsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = openBankingV22AtmsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This API will return data about all our ATMs and is prepared to the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. It is regulated by the UK Competition and Markets Authority (CMA). Data is only available for the United Kingdom.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openBankingV22AtmsGetAsync(final ApiCallback<ATMDefinitionMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = openBankingV22AtmsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for xOpenBankingV22AtmsCountryCountryGet
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsCountryCountryGetCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/x-open-banking/v2.2/atms/country/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/prs.openbanking.opendata.v2.2+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call xOpenBankingV22AtmsCountryCountryGetValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling xOpenBankingV22AtmsCountryCountryGet(Async)");
        }

        return xOpenBankingV22AtmsCountryCountryGetCall(country, _callback);

    }

    /**
     * 
     * This extended API will return data about all ATMs in the specified country. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @return ATMDefinitionMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ATMDefinitionMeta xOpenBankingV22AtmsCountryCountryGet(String country) throws ApiException {
        ApiResponse<ATMDefinitionMeta> localVarResp = xOpenBankingV22AtmsCountryCountryGetWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * This extended API will return data about all ATMs in the specified country. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @return ApiResponse&lt;ATMDefinitionMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ATMDefinitionMeta> xOpenBankingV22AtmsCountryCountryGetWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = xOpenBankingV22AtmsCountryCountryGetValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This extended API will return data about all ATMs in the specified country. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsCountryCountryGetAsync(String country, final ApiCallback<ATMDefinitionMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = xOpenBankingV22AtmsCountryCountryGetValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for xOpenBankingV22AtmsCountryCountryTownTownGet
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @param town Town name, not case sensitive (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsCountryCountryTownTownGetCall(String country, String town, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/x-open-banking/v2.2/atms/country/{country}/town/{town}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()))
            .replace("{" + "town" + "}", localVarApiClient.escapeString(town.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/prs.openbanking.opendata.v2.2+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call xOpenBankingV22AtmsCountryCountryTownTownGetValidateBeforeCall(String country, String town, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling xOpenBankingV22AtmsCountryCountryTownTownGet(Async)");
        }

        // verify the required parameter 'town' is set
        if (town == null) {
            throw new ApiException("Missing the required parameter 'town' when calling xOpenBankingV22AtmsCountryCountryTownTownGet(Async)");
        }

        return xOpenBankingV22AtmsCountryCountryTownTownGetCall(country, town, _callback);

    }

    /**
     * 
     * This extended API will return data about all ATMs in the specified town. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @param town Town name, not case sensitive (required)
     * @return ATMDefinitionMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ATMDefinitionMeta xOpenBankingV22AtmsCountryCountryTownTownGet(String country, String town) throws ApiException {
        ApiResponse<ATMDefinitionMeta> localVarResp = xOpenBankingV22AtmsCountryCountryTownTownGetWithHttpInfo(country, town);
        return localVarResp.getData();
    }

    /**
     * 
     * This extended API will return data about all ATMs in the specified town. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @param town Town name, not case sensitive (required)
     * @return ApiResponse&lt;ATMDefinitionMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ATMDefinitionMeta> xOpenBankingV22AtmsCountryCountryTownTownGetWithHttpInfo(String country, String town) throws ApiException {
        okhttp3.Call localVarCall = xOpenBankingV22AtmsCountryCountryTownTownGetValidateBeforeCall(country, town, null);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This extended API will return data about all ATMs in the specified town. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param country The ISO country code e.g. &amp;quot;GB&amp;quot; (required)
     * @param town Town name, not case sensitive (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsCountryCountryTownTownGetAsync(String country, String town, final ApiCallback<ATMDefinitionMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = xOpenBankingV22AtmsCountryCountryTownTownGetValidateBeforeCall(country, town, _callback);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGet
     * @param latitude Positive or negative decimal value in degrees. eg &amp;quot;51.50551621597067&amp;quot; (required)
     * @param longitude Positive or negative decimal value in degrees. eg &amp;quot;-0.0180120225995&amp;quot; (required)
     * @param radius Number of miles (1 to 10) as an integer. Default &#x3D; 1 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetCall(String latitude, String longitude, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/x-open-banking/v2.2/atms/geo-location/lat/{latitude}/long/{longitude}"
            .replace("{" + "latitude" + "}", localVarApiClient.escapeString(latitude.toString()))
            .replace("{" + "longitude" + "}", localVarApiClient.escapeString(longitude.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        final String[] localVarAccepts = {
            "application/prs.openbanking.opendata.v2.2+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetValidateBeforeCall(String latitude, String longitude, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGet(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGet(Async)");
        }

        // verify the required parameter 'radius' is set
        if (radius == null) {
            throw new ApiException("Missing the required parameter 'radius' when calling xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGet(Async)");
        }

        return xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetCall(latitude, longitude, radius, _callback);

    }

    /**
     * 
     * This extended API will data about all ATMs within a specified radius (1 to 10 miles) of the specified latitude and longitude. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param latitude Positive or negative decimal value in degrees. eg &amp;quot;51.50551621597067&amp;quot; (required)
     * @param longitude Positive or negative decimal value in degrees. eg &amp;quot;-0.0180120225995&amp;quot; (required)
     * @param radius Number of miles (1 to 10) as an integer. Default &#x3D; 1 (required)
     * @return ATMDefinitionMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ATMDefinitionMeta xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGet(String latitude, String longitude, BigDecimal radius) throws ApiException {
        ApiResponse<ATMDefinitionMeta> localVarResp = xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetWithHttpInfo(latitude, longitude, radius);
        return localVarResp.getData();
    }

    /**
     * 
     * This extended API will data about all ATMs within a specified radius (1 to 10 miles) of the specified latitude and longitude. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param latitude Positive or negative decimal value in degrees. eg &amp;quot;51.50551621597067&amp;quot; (required)
     * @param longitude Positive or negative decimal value in degrees. eg &amp;quot;-0.0180120225995&amp;quot; (required)
     * @param radius Number of miles (1 to 10) as an integer. Default &#x3D; 1 (required)
     * @return ApiResponse&lt;ATMDefinitionMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ATMDefinitionMeta> xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetWithHttpInfo(String latitude, String longitude, BigDecimal radius) throws ApiException {
        okhttp3.Call localVarCall = xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetValidateBeforeCall(latitude, longitude, radius, null);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This extended API will data about all ATMs within a specified radius (1 to 10 miles) of the specified latitude and longitude. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param latitude Positive or negative decimal value in degrees. eg &amp;quot;51.50551621597067&amp;quot; (required)
     * @param longitude Positive or negative decimal value in degrees. eg &amp;quot;-0.0180120225995&amp;quot; (required)
     * @param radius Number of miles (1 to 10) as an integer. Default &#x3D; 1 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetAsync(String latitude, String longitude, BigDecimal radius, final ApiCallback<ATMDefinitionMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = xOpenBankingV22AtmsGeoLocationLatLatitudeLongLongitudeGetValidateBeforeCall(latitude, longitude, radius, _callback);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for xOpenBankingV22AtmsPostcodePostcodeGet
     * @param postcode Letters and numerals only. No spaces or special characters. eg  &amp;quot;SW1A1AA&amp;quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsPostcodePostcodeGetCall(String postcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/x-open-banking/v2.2/atms/postcode/{postcode}"
            .replace("{" + "postcode" + "}", localVarApiClient.escapeString(postcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/prs.openbanking.opendata.v2.2+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call xOpenBankingV22AtmsPostcodePostcodeGetValidateBeforeCall(String postcode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postcode' is set
        if (postcode == null) {
            throw new ApiException("Missing the required parameter 'postcode' when calling xOpenBankingV22AtmsPostcodePostcodeGet(Async)");
        }

        return xOpenBankingV22AtmsPostcodePostcodeGetCall(postcode, _callback);

    }

    /**
     * 
     * This extended API will return data about all ATMs within a 5 mile radius of the specified postcode. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param postcode Letters and numerals only. No spaces or special characters. eg  &amp;quot;SW1A1AA&amp;quot; (required)
     * @return ATMDefinitionMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ATMDefinitionMeta xOpenBankingV22AtmsPostcodePostcodeGet(String postcode) throws ApiException {
        ApiResponse<ATMDefinitionMeta> localVarResp = xOpenBankingV22AtmsPostcodePostcodeGetWithHttpInfo(postcode);
        return localVarResp.getData();
    }

    /**
     * 
     * This extended API will return data about all ATMs within a 5 mile radius of the specified postcode. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param postcode Letters and numerals only. No spaces or special characters. eg  &amp;quot;SW1A1AA&amp;quot; (required)
     * @return ApiResponse&lt;ATMDefinitionMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ATMDefinitionMeta> xOpenBankingV22AtmsPostcodePostcodeGetWithHttpInfo(String postcode) throws ApiException {
        okhttp3.Call localVarCall = xOpenBankingV22AtmsPostcodePostcodeGetValidateBeforeCall(postcode, null);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This extended API will return data about all ATMs within a 5 mile radius of the specified postcode. It is based-on the Open Banking standards as defined by the Open Banking Implementation Entity (OBIE) in data dictionary version 2.2. The extended functionality may not fully adhere to the non-functional requirements of the regulator. Data is only available for the United Kingdom.
     * @param postcode Letters and numerals only. No spaces or special characters. eg  &amp;quot;SW1A1AA&amp;quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> System error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> System error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call xOpenBankingV22AtmsPostcodePostcodeGetAsync(String postcode, final ApiCallback<ATMDefinitionMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = xOpenBankingV22AtmsPostcodePostcodeGetValidateBeforeCall(postcode, _callback);
        Type localVarReturnType = new TypeToken<ATMDefinitionMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
