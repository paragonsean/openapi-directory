/*
 * ATM Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OtherATMServicesInner;
import org.openapitools.client.model.OtherAccessibilityInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ATM information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:53.665243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ATMInner {
  /**
   * Describes the type of transaction available for a customer on an ATM.
   */
  @JsonAdapter(AtMServicesEnum.Adapter.class)
  public enum AtMServicesEnum {
    BALANCE("Balance"),
    
    BILL_PAYMENTS("BillPayments"),
    
    CASH_DEPOSITS("CashDeposits"),
    
    CHARITY_DONATION("CharityDonation"),
    
    CHEQUE_DEPOSITS("ChequeDeposits"),
    
    CASH_WITHDRAWAL("CashWithdrawal"),
    
    ENVELOPE_DEPOSIT("EnvelopeDeposit"),
    
    FAST_CASH("FastCash"),
    
    MOBILE_BANKING_REGISTRATION("MobileBankingRegistration"),
    
    MOBILE_PAYMENT_REGISTRATION("MobilePaymentRegistration"),
    
    MOBILE_PHONE_TOP_UP("MobilePhoneTopUp"),
    
    ORDER_STATEMENT("OrderStatement"),
    
    OTHER("Other"),
    
    PIN_ACTIVATION("PINActivation"),
    
    PIN_CHANGE("PINChange"),
    
    PIN_UNBLOCK("PINUnblock"),
    
    MINI_STATEMENT("MiniStatement");

    private String value;

    AtMServicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AtMServicesEnum fromValue(String value) {
      for (AtMServicesEnum b : AtMServicesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AtMServicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AtMServicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AtMServicesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AtMServicesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AtMServicesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AT_M_SERVICES = "ATMServices";
  @SerializedName(SERIALIZED_NAME_AT_M_SERVICES)
  private List<AtMServicesEnum> atMServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCESS24_HOURS_INDICATOR = "Access24HoursIndicator";
  @SerializedName(SERIALIZED_NAME_ACCESS24_HOURS_INDICATOR)
  private Boolean access24HoursIndicator;

  /**
   * Indicates Types of Accessibility
   */
  @JsonAdapter(AccessibilityEnum.Adapter.class)
  public enum AccessibilityEnum {
    AUDIO_CASH_MACHINE("AudioCashMachine"),
    
    AUTOMATIC_DOORS("AutomaticDoors"),
    
    EXTERNAL_RAMP("ExternalRamp"),
    
    INDUCTION_LOOP("InductionLoop"),
    
    INTERNAL_RAMP("InternalRamp"),
    
    LEVEL_ACCESS("LevelAccess"),
    
    LOWER_LEVEL_COUNTER("LowerLevelCounter"),
    
    OTHER("Other"),
    
    WHEELCHAIR_ACCESS("WheelchairAccess");

    private String value;

    AccessibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessibilityEnum fromValue(String value) {
      for (AccessibilityEnum b : AccessibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESSIBILITY = "Accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  private List<AccessibilityEnum> accessibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANCH = "Branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private Object branch;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Object location;

  public static final String SERIALIZED_NAME_MINIMUM_POSSIBLE_AMOUNT = "MinimumPossibleAmount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_POSSIBLE_AMOUNT)
  private String minimumPossibleAmount;

  public static final String SERIALIZED_NAME_NOTE = "Note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private List<String> note = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_A_T_M_SERVICES = "OtherATMServices";
  @SerializedName(SERIALIZED_NAME_OTHER_A_T_M_SERVICES)
  private List<OtherATMServicesInner> otherATMServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_ACCESSIBILITY = "OtherAccessibility";
  @SerializedName(SERIALIZED_NAME_OTHER_ACCESSIBILITY)
  private List<OtherAccessibilityInner> otherAccessibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_CURRENCIES = "SupportedCurrencies";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CURRENCIES)
  private List<String> supportedCurrencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_LANGUAGES = "SupportedLanguages";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_LANGUAGES)
  private List<String> supportedLanguages = new ArrayList<>();

  public ATMInner() {
  }

  public ATMInner atMServices(List<AtMServicesEnum> atMServices) {
    this.atMServices = atMServices;
    return this;
  }

  public ATMInner addAtMServicesItem(AtMServicesEnum atMServicesItem) {
    if (this.atMServices == null) {
      this.atMServices = new ArrayList<>();
    }
    this.atMServices.add(atMServicesItem);
    return this;
  }

  /**
   * Describes the type of transaction available for a customer on an ATM.
   * @return atMServices
   */
  @javax.annotation.Nullable
  public List<AtMServicesEnum> getAtMServices() {
    return atMServices;
  }

  public void setAtMServices(List<AtMServicesEnum> atMServices) {
    this.atMServices = atMServices;
  }


  public ATMInner access24HoursIndicator(Boolean access24HoursIndicator) {
    this.access24HoursIndicator = access24HoursIndicator;
    return this;
  }

  /**
   * Indicates that the ATM is available for use by customers 24 hours per day
   * @return access24HoursIndicator
   */
  @javax.annotation.Nullable
  public Boolean getAccess24HoursIndicator() {
    return access24HoursIndicator;
  }

  public void setAccess24HoursIndicator(Boolean access24HoursIndicator) {
    this.access24HoursIndicator = access24HoursIndicator;
  }


  public ATMInner accessibility(List<AccessibilityEnum> accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  public ATMInner addAccessibilityItem(AccessibilityEnum accessibilityItem) {
    if (this.accessibility == null) {
      this.accessibility = new ArrayList<>();
    }
    this.accessibility.add(accessibilityItem);
    return this;
  }

  /**
   * Indicates Types of Accessibility
   * @return accessibility
   */
  @javax.annotation.Nullable
  public List<AccessibilityEnum> getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(List<AccessibilityEnum> accessibility) {
    this.accessibility = accessibility;
  }


  public ATMInner branch(Object branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Information that locates and identifies a specific branch of a financial institution.
   * @return branch
   */
  @javax.annotation.Nullable
  public Object getBranch() {
    return branch;
  }

  public void setBranch(Object branch) {
    this.branch = branch;
  }


  public ATMInner identification(String identification) {
    this.identification = identification;
    return this;
  }

  /**
   * ATM terminal device identification for the acquirer and the issuer.
   * @return identification
   */
  @javax.annotation.Nonnull
  public String getIdentification() {
    return identification;
  }

  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public ATMInner location(Object location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the ATM.
   * @return location
   */
  @javax.annotation.Nonnull
  public Object getLocation() {
    return location;
  }

  public void setLocation(Object location) {
    this.location = location;
  }


  public ATMInner minimumPossibleAmount(String minimumPossibleAmount) {
    this.minimumPossibleAmount = minimumPossibleAmount;
    return this;
  }

  /**
   * Minimum amount allowed for a transaction in the service.
   * @return minimumPossibleAmount
   */
  @javax.annotation.Nullable
  public String getMinimumPossibleAmount() {
    return minimumPossibleAmount;
  }

  public void setMinimumPossibleAmount(String minimumPossibleAmount) {
    this.minimumPossibleAmount = minimumPossibleAmount;
  }


  public ATMInner note(List<String> note) {
    this.note = note;
    return this;
  }

  public ATMInner addNoteItem(String noteItem) {
    if (this.note == null) {
      this.note = new ArrayList<>();
    }
    this.note.add(noteItem);
    return this;
  }

  /**
   * Summary description of the ATM.
   * @return note
   */
  @javax.annotation.Nullable
  public List<String> getNote() {
    return note;
  }

  public void setNote(List<String> note) {
    this.note = note;
  }


  public ATMInner otherATMServices(List<OtherATMServicesInner> otherATMServices) {
    this.otherATMServices = otherATMServices;
    return this;
  }

  public ATMInner addOtherATMServicesItem(OtherATMServicesInner otherATMServicesItem) {
    if (this.otherATMServices == null) {
      this.otherATMServices = new ArrayList<>();
    }
    this.otherATMServices.add(otherATMServicesItem);
    return this;
  }

  /**
   * Enter a new code , name and description for any other ATM Service
   * @return otherATMServices
   */
  @javax.annotation.Nullable
  public List<OtherATMServicesInner> getOtherATMServices() {
    return otherATMServices;
  }

  public void setOtherATMServices(List<OtherATMServicesInner> otherATMServices) {
    this.otherATMServices = otherATMServices;
  }


  public ATMInner otherAccessibility(List<OtherAccessibilityInner> otherAccessibility) {
    this.otherAccessibility = otherAccessibility;
    return this;
  }

  public ATMInner addOtherAccessibilityItem(OtherAccessibilityInner otherAccessibilityItem) {
    if (this.otherAccessibility == null) {
      this.otherAccessibility = new ArrayList<>();
    }
    this.otherAccessibility.add(otherAccessibilityItem);
    return this;
  }

  /**
   * Enter a new code , name and description for any other ATM accessibility options
   * @return otherAccessibility
   */
  @javax.annotation.Nullable
  public List<OtherAccessibilityInner> getOtherAccessibility() {
    return otherAccessibility;
  }

  public void setOtherAccessibility(List<OtherAccessibilityInner> otherAccessibility) {
    this.otherAccessibility = otherAccessibility;
  }


  public ATMInner supportedCurrencies(List<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
    return this;
  }

  public ATMInner addSupportedCurrenciesItem(String supportedCurrenciesItem) {
    if (this.supportedCurrencies == null) {
      this.supportedCurrencies = new ArrayList<>();
    }
    this.supportedCurrencies.add(supportedCurrenciesItem);
    return this;
  }

  /**
   * All ISO 4217 defined currency  supported by the ATM.
   * @return supportedCurrencies
   */
  @javax.annotation.Nonnull
  public List<String> getSupportedCurrencies() {
    return supportedCurrencies;
  }

  public void setSupportedCurrencies(List<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
  }


  public ATMInner supportedLanguages(List<String> supportedLanguages) {
    this.supportedLanguages = supportedLanguages;
    return this;
  }

  public ATMInner addSupportedLanguagesItem(String supportedLanguagesItem) {
    if (this.supportedLanguages == null) {
      this.supportedLanguages = new ArrayList<>();
    }
    this.supportedLanguages.add(supportedLanguagesItem);
    return this;
  }

  /**
   * Identification of the language name according to the ISO 639-1 codes. The type is validated by the list of values coded with two alphabetic characters, defined in the standard.
   * @return supportedLanguages
   */
  @javax.annotation.Nullable
  public List<String> getSupportedLanguages() {
    return supportedLanguages;
  }

  public void setSupportedLanguages(List<String> supportedLanguages) {
    this.supportedLanguages = supportedLanguages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ATMInner atMInner = (ATMInner) o;
    return Objects.equals(this.atMServices, atMInner.atMServices) &&
        Objects.equals(this.access24HoursIndicator, atMInner.access24HoursIndicator) &&
        Objects.equals(this.accessibility, atMInner.accessibility) &&
        Objects.equals(this.branch, atMInner.branch) &&
        Objects.equals(this.identification, atMInner.identification) &&
        Objects.equals(this.location, atMInner.location) &&
        Objects.equals(this.minimumPossibleAmount, atMInner.minimumPossibleAmount) &&
        Objects.equals(this.note, atMInner.note) &&
        Objects.equals(this.otherATMServices, atMInner.otherATMServices) &&
        Objects.equals(this.otherAccessibility, atMInner.otherAccessibility) &&
        Objects.equals(this.supportedCurrencies, atMInner.supportedCurrencies) &&
        Objects.equals(this.supportedLanguages, atMInner.supportedLanguages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atMServices, access24HoursIndicator, accessibility, branch, identification, location, minimumPossibleAmount, note, otherATMServices, otherAccessibility, supportedCurrencies, supportedLanguages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ATMInner {\n");
    sb.append("    atMServices: ").append(toIndentedString(atMServices)).append("\n");
    sb.append("    access24HoursIndicator: ").append(toIndentedString(access24HoursIndicator)).append("\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    minimumPossibleAmount: ").append(toIndentedString(minimumPossibleAmount)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    otherATMServices: ").append(toIndentedString(otherATMServices)).append("\n");
    sb.append("    otherAccessibility: ").append(toIndentedString(otherAccessibility)).append("\n");
    sb.append("    supportedCurrencies: ").append(toIndentedString(supportedCurrencies)).append("\n");
    sb.append("    supportedLanguages: ").append(toIndentedString(supportedLanguages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ATMServices");
    openapiFields.add("Access24HoursIndicator");
    openapiFields.add("Accessibility");
    openapiFields.add("Branch");
    openapiFields.add("Identification");
    openapiFields.add("Location");
    openapiFields.add("MinimumPossibleAmount");
    openapiFields.add("Note");
    openapiFields.add("OtherATMServices");
    openapiFields.add("OtherAccessibility");
    openapiFields.add("SupportedCurrencies");
    openapiFields.add("SupportedLanguages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Identification");
    openapiRequiredFields.add("Location");
    openapiRequiredFields.add("SupportedCurrencies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ATMInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ATMInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ATMInner is not found in the empty JSON string", ATMInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ATMInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ATMInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ATMInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ATMServices") != null && !jsonObj.get("ATMServices").isJsonNull() && !jsonObj.get("ATMServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ATMServices` to be an array in the JSON string but got `%s`", jsonObj.get("ATMServices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Accessibility") != null && !jsonObj.get("Accessibility").isJsonNull() && !jsonObj.get("Accessibility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Accessibility` to be an array in the JSON string but got `%s`", jsonObj.get("Accessibility").toString()));
      }
      if (!jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if ((jsonObj.get("MinimumPossibleAmount") != null && !jsonObj.get("MinimumPossibleAmount").isJsonNull()) && !jsonObj.get("MinimumPossibleAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MinimumPossibleAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MinimumPossibleAmount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Note") != null && !jsonObj.get("Note").isJsonNull() && !jsonObj.get("Note").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Note` to be an array in the JSON string but got `%s`", jsonObj.get("Note").toString()));
      }
      if (jsonObj.get("OtherATMServices") != null && !jsonObj.get("OtherATMServices").isJsonNull()) {
        JsonArray jsonArrayotherATMServices = jsonObj.getAsJsonArray("OtherATMServices");
        if (jsonArrayotherATMServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OtherATMServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OtherATMServices` to be an array in the JSON string but got `%s`", jsonObj.get("OtherATMServices").toString()));
          }

          // validate the optional field `OtherATMServices` (array)
          for (int i = 0; i < jsonArrayotherATMServices.size(); i++) {
            OtherATMServicesInner.validateJsonElement(jsonArrayotherATMServices.get(i));
          };
        }
      }
      if (jsonObj.get("OtherAccessibility") != null && !jsonObj.get("OtherAccessibility").isJsonNull()) {
        JsonArray jsonArrayotherAccessibility = jsonObj.getAsJsonArray("OtherAccessibility");
        if (jsonArrayotherAccessibility != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OtherAccessibility").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OtherAccessibility` to be an array in the JSON string but got `%s`", jsonObj.get("OtherAccessibility").toString()));
          }

          // validate the optional field `OtherAccessibility` (array)
          for (int i = 0; i < jsonArrayotherAccessibility.size(); i++) {
            OtherAccessibilityInner.validateJsonElement(jsonArrayotherAccessibility.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("SupportedCurrencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("SupportedCurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedCurrencies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SupportedLanguages") != null && !jsonObj.get("SupportedLanguages").isJsonNull() && !jsonObj.get("SupportedLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedLanguages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ATMInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ATMInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ATMInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ATMInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ATMInner>() {
           @Override
           public void write(JsonWriter out, ATMInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ATMInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ATMInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ATMInner
   * @throws IOException if the JSON string is invalid with respect to ATMInner
   */
  public static ATMInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ATMInner.class);
  }

  /**
   * Convert an instance of ATMInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

