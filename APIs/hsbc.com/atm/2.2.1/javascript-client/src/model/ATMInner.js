/**
 * ATM Locator API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OtherATMServicesInner from './OtherATMServicesInner';
import OtherAccessibilityInner from './OtherAccessibilityInner';

/**
 * The ATMInner model module.
 * @module model/ATMInner
 * @version 2.2.1
 */
class ATMInner {
    /**
     * Constructs a new <code>ATMInner</code>.
     * ATM information.
     * @alias module:model/ATMInner
     * @param identification {String} ATM terminal device identification for the acquirer and the issuer.
     * @param location {Object} Location of the ATM.
     * @param supportedCurrencies {Array.<String>} All ISO 4217 defined currency  supported by the ATM.
     */
    constructor(identification, location, supportedCurrencies) { 
        
        ATMInner.initialize(this, identification, location, supportedCurrencies);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identification, location, supportedCurrencies) { 
        obj['Identification'] = identification;
        obj['Location'] = location;
        obj['SupportedCurrencies'] = supportedCurrencies;
    }

    /**
     * Constructs a <code>ATMInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ATMInner} obj Optional instance to populate.
     * @return {module:model/ATMInner} The populated <code>ATMInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ATMInner();

            if (data.hasOwnProperty('ATMServices')) {
                obj['ATMServices'] = ApiClient.convertToType(data['ATMServices'], ['String']);
            }
            if (data.hasOwnProperty('Access24HoursIndicator')) {
                obj['Access24HoursIndicator'] = ApiClient.convertToType(data['Access24HoursIndicator'], 'Boolean');
            }
            if (data.hasOwnProperty('Accessibility')) {
                obj['Accessibility'] = ApiClient.convertToType(data['Accessibility'], ['String']);
            }
            if (data.hasOwnProperty('Branch')) {
                obj['Branch'] = ApiClient.convertToType(data['Branch'], Object);
            }
            if (data.hasOwnProperty('Identification')) {
                obj['Identification'] = ApiClient.convertToType(data['Identification'], 'String');
            }
            if (data.hasOwnProperty('Location')) {
                obj['Location'] = ApiClient.convertToType(data['Location'], Object);
            }
            if (data.hasOwnProperty('MinimumPossibleAmount')) {
                obj['MinimumPossibleAmount'] = ApiClient.convertToType(data['MinimumPossibleAmount'], 'String');
            }
            if (data.hasOwnProperty('Note')) {
                obj['Note'] = ApiClient.convertToType(data['Note'], ['String']);
            }
            if (data.hasOwnProperty('OtherATMServices')) {
                obj['OtherATMServices'] = ApiClient.convertToType(data['OtherATMServices'], [OtherATMServicesInner]);
            }
            if (data.hasOwnProperty('OtherAccessibility')) {
                obj['OtherAccessibility'] = ApiClient.convertToType(data['OtherAccessibility'], [OtherAccessibilityInner]);
            }
            if (data.hasOwnProperty('SupportedCurrencies')) {
                obj['SupportedCurrencies'] = ApiClient.convertToType(data['SupportedCurrencies'], ['String']);
            }
            if (data.hasOwnProperty('SupportedLanguages')) {
                obj['SupportedLanguages'] = ApiClient.convertToType(data['SupportedLanguages'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ATMInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ATMInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ATMInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ATMServices'])) {
            throw new Error("Expected the field `ATMServices` to be an array in the JSON data but got " + data['ATMServices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Accessibility'])) {
            throw new Error("Expected the field `Accessibility` to be an array in the JSON data but got " + data['Accessibility']);
        }
        // ensure the json data is a string
        if (data['Identification'] && !(typeof data['Identification'] === 'string' || data['Identification'] instanceof String)) {
            throw new Error("Expected the field `Identification` to be a primitive type in the JSON string but got " + data['Identification']);
        }
        // ensure the json data is a string
        if (data['MinimumPossibleAmount'] && !(typeof data['MinimumPossibleAmount'] === 'string' || data['MinimumPossibleAmount'] instanceof String)) {
            throw new Error("Expected the field `MinimumPossibleAmount` to be a primitive type in the JSON string but got " + data['MinimumPossibleAmount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Note'])) {
            throw new Error("Expected the field `Note` to be an array in the JSON data but got " + data['Note']);
        }
        if (data['OtherATMServices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OtherATMServices'])) {
                throw new Error("Expected the field `OtherATMServices` to be an array in the JSON data but got " + data['OtherATMServices']);
            }
            // validate the optional field `OtherATMServices` (array)
            for (const item of data['OtherATMServices']) {
                OtherATMServicesInner.validateJSON(item);
            };
        }
        if (data['OtherAccessibility']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OtherAccessibility'])) {
                throw new Error("Expected the field `OtherAccessibility` to be an array in the JSON data but got " + data['OtherAccessibility']);
            }
            // validate the optional field `OtherAccessibility` (array)
            for (const item of data['OtherAccessibility']) {
                OtherAccessibilityInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SupportedCurrencies'])) {
            throw new Error("Expected the field `SupportedCurrencies` to be an array in the JSON data but got " + data['SupportedCurrencies']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SupportedLanguages'])) {
            throw new Error("Expected the field `SupportedLanguages` to be an array in the JSON data but got " + data['SupportedLanguages']);
        }

        return true;
    }


}

ATMInner.RequiredProperties = ["Identification", "Location", "SupportedCurrencies"];

/**
 * Describes the type of transaction available for a customer on an ATM.
 * @member {Array.<module:model/ATMInner.ATMServicesEnum>} ATMServices
 */
ATMInner.prototype['ATMServices'] = undefined;

/**
 * Indicates that the ATM is available for use by customers 24 hours per day
 * @member {Boolean} Access24HoursIndicator
 */
ATMInner.prototype['Access24HoursIndicator'] = undefined;

/**
 * Indicates Types of Accessibility
 * @member {Array.<module:model/ATMInner.AccessibilityEnum>} Accessibility
 */
ATMInner.prototype['Accessibility'] = undefined;

/**
 * Information that locates and identifies a specific branch of a financial institution.
 * @member {Object} Branch
 */
ATMInner.prototype['Branch'] = undefined;

/**
 * ATM terminal device identification for the acquirer and the issuer.
 * @member {String} Identification
 */
ATMInner.prototype['Identification'] = undefined;

/**
 * Location of the ATM.
 * @member {Object} Location
 */
ATMInner.prototype['Location'] = undefined;

/**
 * Minimum amount allowed for a transaction in the service.
 * @member {String} MinimumPossibleAmount
 */
ATMInner.prototype['MinimumPossibleAmount'] = undefined;

/**
 * Summary description of the ATM.
 * @member {Array.<String>} Note
 */
ATMInner.prototype['Note'] = undefined;

/**
 * Enter a new code , name and description for any other ATM Service
 * @member {Array.<module:model/OtherATMServicesInner>} OtherATMServices
 */
ATMInner.prototype['OtherATMServices'] = undefined;

/**
 * Enter a new code , name and description for any other ATM accessibility options
 * @member {Array.<module:model/OtherAccessibilityInner>} OtherAccessibility
 */
ATMInner.prototype['OtherAccessibility'] = undefined;

/**
 * All ISO 4217 defined currency  supported by the ATM.
 * @member {Array.<String>} SupportedCurrencies
 */
ATMInner.prototype['SupportedCurrencies'] = undefined;

/**
 * Identification of the language name according to the ISO 639-1 codes. The type is validated by the list of values coded with two alphabetic characters, defined in the standard.
 * @member {Array.<String>} SupportedLanguages
 */
ATMInner.prototype['SupportedLanguages'] = undefined;





/**
 * Allowed values for the <code>aTMServices</code> property.
 * @enum {String}
 * @readonly
 */
ATMInner['ATMServicesEnum'] = {

    /**
     * value: "Balance"
     * @const
     */
    "Balance": "Balance",

    /**
     * value: "BillPayments"
     * @const
     */
    "BillPayments": "BillPayments",

    /**
     * value: "CashDeposits"
     * @const
     */
    "CashDeposits": "CashDeposits",

    /**
     * value: "CharityDonation"
     * @const
     */
    "CharityDonation": "CharityDonation",

    /**
     * value: "ChequeDeposits"
     * @const
     */
    "ChequeDeposits": "ChequeDeposits",

    /**
     * value: "CashWithdrawal"
     * @const
     */
    "CashWithdrawal": "CashWithdrawal",

    /**
     * value: "EnvelopeDeposit"
     * @const
     */
    "EnvelopeDeposit": "EnvelopeDeposit",

    /**
     * value: "FastCash"
     * @const
     */
    "FastCash": "FastCash",

    /**
     * value: "MobileBankingRegistration"
     * @const
     */
    "MobileBankingRegistration": "MobileBankingRegistration",

    /**
     * value: "MobilePaymentRegistration"
     * @const
     */
    "MobilePaymentRegistration": "MobilePaymentRegistration",

    /**
     * value: "MobilePhoneTopUp"
     * @const
     */
    "MobilePhoneTopUp": "MobilePhoneTopUp",

    /**
     * value: "OrderStatement"
     * @const
     */
    "OrderStatement": "OrderStatement",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "PINActivation"
     * @const
     */
    "PINActivation": "PINActivation",

    /**
     * value: "PINChange"
     * @const
     */
    "PINChange": "PINChange",

    /**
     * value: "PINUnblock"
     * @const
     */
    "PINUnblock": "PINUnblock",

    /**
     * value: "MiniStatement"
     * @const
     */
    "MiniStatement": "MiniStatement"
};


/**
 * Allowed values for the <code>accessibility</code> property.
 * @enum {String}
 * @readonly
 */
ATMInner['AccessibilityEnum'] = {

    /**
     * value: "AudioCashMachine"
     * @const
     */
    "AudioCashMachine": "AudioCashMachine",

    /**
     * value: "AutomaticDoors"
     * @const
     */
    "AutomaticDoors": "AutomaticDoors",

    /**
     * value: "ExternalRamp"
     * @const
     */
    "ExternalRamp": "ExternalRamp",

    /**
     * value: "InductionLoop"
     * @const
     */
    "InductionLoop": "InductionLoop",

    /**
     * value: "InternalRamp"
     * @const
     */
    "InternalRamp": "InternalRamp",

    /**
     * value: "LevelAccess"
     * @const
     */
    "LevelAccess": "LevelAccess",

    /**
     * value: "LowerLevelCounter"
     * @const
     */
    "LowerLevelCounter": "LowerLevelCounter",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "WheelchairAccess"
     * @const
     */
    "WheelchairAccess": "WheelchairAccess"
};



export default ATMInner;

