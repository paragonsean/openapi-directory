# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorDefinition500(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, status: str=None, title: str=None):
        """ErrorDefinition500 - a model defined in OpenAPI

        :param description: The description of this ErrorDefinition500.
        :param status: The status of this ErrorDefinition500.
        :param title: The title of this ErrorDefinition500.
        """
        self.openapi_types = {
            'description': str,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'status': 'status',
            'title': 'title'
        }

        self._description = description
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorDefinition500':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorDefinition500 of this ErrorDefinition500.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ErrorDefinition500.


        :return: The description of this ErrorDefinition500.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ErrorDefinition500.


        :param description: The description of this ErrorDefinition500.
        :type description: str
        """
        allowed_values = ["An error occurred on the server. No further information is available."]  # noqa: E501
        if description not in allowed_values:
            raise ValueError(
                "Invalid value for `description` ({0}), must be one of {1}"
                .format(description, allowed_values)
            )

        self._description = description

    @property
    def status(self):
        """Gets the status of this ErrorDefinition500.


        :return: The status of this ErrorDefinition500.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorDefinition500.


        :param status: The status of this ErrorDefinition500.
        :type status: str
        """
        allowed_values = ["500"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this ErrorDefinition500.


        :return: The title of this ErrorDefinition500.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorDefinition500.


        :param title: The title of this ErrorDefinition500.
        :type title: str
        """
        allowed_values = ["Internal server error"]  # noqa: E501
        if title not in allowed_values:
            raise ValueError(
                "Invalid value for `title` ({0}), must be one of {1}"
                .format(title, allowed_values)
            )

        self._title = title
