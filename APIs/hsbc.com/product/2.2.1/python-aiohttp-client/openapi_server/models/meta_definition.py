# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetaDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agreement: str=None, last_updated: datetime=None, license: str=None, terms_of_use: str=None, total_results: int=None):
        """MetaDefinition - a model defined in OpenAPI

        :param agreement: The agreement of this MetaDefinition.
        :param last_updated: The last_updated of this MetaDefinition.
        :param license: The license of this MetaDefinition.
        :param terms_of_use: The terms_of_use of this MetaDefinition.
        :param total_results: The total_results of this MetaDefinition.
        """
        self.openapi_types = {
            'agreement': str,
            'last_updated': datetime,
            'license': str,
            'terms_of_use': str,
            'total_results': int
        }

        self.attribute_map = {
            'agreement': 'Agreement',
            'last_updated': 'LastUpdated',
            'license': 'License',
            'terms_of_use': 'TermsOfUse',
            'total_results': 'TotalResults'
        }

        self._agreement = agreement
        self._last_updated = last_updated
        self._license = license
        self._terms_of_use = terms_of_use
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetaDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetaDefinition of this MetaDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agreement(self):
        """Gets the agreement of this MetaDefinition.


        :return: The agreement of this MetaDefinition.
        :rtype: str
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this MetaDefinition.


        :param agreement: The agreement of this MetaDefinition.
        :type agreement: str
        """
        allowed_values = ["Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions"]  # noqa: E501
        if agreement not in allowed_values:
            raise ValueError(
                "Invalid value for `agreement` ({0}), must be one of {1}"
                .format(agreement, allowed_values)
            )

        self._agreement = agreement

    @property
    def last_updated(self):
        """Gets the last_updated of this MetaDefinition.


        :return: The last_updated of this MetaDefinition.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this MetaDefinition.


        :param last_updated: The last_updated of this MetaDefinition.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def license(self):
        """Gets the license of this MetaDefinition.

        Open Banking License

        :return: The license of this MetaDefinition.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this MetaDefinition.

        Open Banking License

        :param license: The license of this MetaDefinition.
        :type license: str
        """
        allowed_values = ["https://www.openbanking.org.uk/open-licence"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this MetaDefinition.

        Open Banking Terms of Use

        :return: The terms_of_use of this MetaDefinition.
        :rtype: str
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this MetaDefinition.

        Open Banking Terms of Use

        :param terms_of_use: The terms_of_use of this MetaDefinition.
        :type terms_of_use: str
        """
        allowed_values = ["https://www.openbanking.org.uk/terms"]  # noqa: E501
        if terms_of_use not in allowed_values:
            raise ValueError(
                "Invalid value for `terms_of_use` ({0}), must be one of {1}"
                .format(terms_of_use, allowed_values)
            )

        self._terms_of_use = terms_of_use

    @property
    def total_results(self):
        """Gets the total_results of this MetaDefinition.


        :return: The total_results of this MetaDefinition.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this MetaDefinition.


        :param total_results: The total_results of this MetaDefinition.
        :type total_results: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results
