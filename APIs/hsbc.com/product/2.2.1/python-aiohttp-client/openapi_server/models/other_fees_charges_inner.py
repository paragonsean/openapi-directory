# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fee_charge_cap_inner import FeeChargeCapInner
from openapi_server.models.fee_charge_detail_inner import FeeChargeDetailInner
from openapi_server import util


class OtherFeesChargesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fee_charge_cap: List[FeeChargeCapInner]=None, fee_charge_detail: List[FeeChargeDetailInner]=None, other_tariff_type: object=None, tariff_name: str=None, tariff_type: str=None):
        """OtherFeesChargesInner - a model defined in OpenAPI

        :param fee_charge_cap: The fee_charge_cap of this OtherFeesChargesInner.
        :param fee_charge_detail: The fee_charge_detail of this OtherFeesChargesInner.
        :param other_tariff_type: The other_tariff_type of this OtherFeesChargesInner.
        :param tariff_name: The tariff_name of this OtherFeesChargesInner.
        :param tariff_type: The tariff_type of this OtherFeesChargesInner.
        """
        self.openapi_types = {
            'fee_charge_cap': List[FeeChargeCapInner],
            'fee_charge_detail': List[FeeChargeDetailInner],
            'other_tariff_type': object,
            'tariff_name': str,
            'tariff_type': str
        }

        self.attribute_map = {
            'fee_charge_cap': 'FeeChargeCap',
            'fee_charge_detail': 'FeeChargeDetail',
            'other_tariff_type': 'OtherTariffType',
            'tariff_name': 'TariffName',
            'tariff_type': 'TariffType'
        }

        self._fee_charge_cap = fee_charge_cap
        self._fee_charge_detail = fee_charge_detail
        self._other_tariff_type = other_tariff_type
        self._tariff_name = tariff_name
        self._tariff_type = tariff_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OtherFeesChargesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OtherFeesCharges_inner of this OtherFeesChargesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fee_charge_cap(self):
        """Gets the fee_charge_cap of this OtherFeesChargesInner.

        Details about any caps (maximum charges) that apply to a particular fee/charge

        :return: The fee_charge_cap of this OtherFeesChargesInner.
        :rtype: List[FeeChargeCapInner]
        """
        return self._fee_charge_cap

    @fee_charge_cap.setter
    def fee_charge_cap(self, fee_charge_cap):
        """Sets the fee_charge_cap of this OtherFeesChargesInner.

        Details about any caps (maximum charges) that apply to a particular fee/charge

        :param fee_charge_cap: The fee_charge_cap of this OtherFeesChargesInner.
        :type fee_charge_cap: List[FeeChargeCapInner]
        """

        self._fee_charge_cap = fee_charge_cap

    @property
    def fee_charge_detail(self):
        """Gets the fee_charge_detail of this OtherFeesChargesInner.

        Other fees/charges details

        :return: The fee_charge_detail of this OtherFeesChargesInner.
        :rtype: List[FeeChargeDetailInner]
        """
        return self._fee_charge_detail

    @fee_charge_detail.setter
    def fee_charge_detail(self, fee_charge_detail):
        """Sets the fee_charge_detail of this OtherFeesChargesInner.

        Other fees/charges details

        :param fee_charge_detail: The fee_charge_detail of this OtherFeesChargesInner.
        :type fee_charge_detail: List[FeeChargeDetailInner]
        """
        if fee_charge_detail is None:
            raise ValueError("Invalid value for `fee_charge_detail`, must not be `None`")
        if fee_charge_detail is not None and len(fee_charge_detail) < 1:
            raise ValueError("Invalid value for `fee_charge_detail`, number of items must be greater than or equal to `1`")

        self._fee_charge_detail = fee_charge_detail

    @property
    def other_tariff_type(self):
        """Gets the other_tariff_type of this OtherFeesChargesInner.

        Other tariff type which is not in the standard list.

        :return: The other_tariff_type of this OtherFeesChargesInner.
        :rtype: object
        """
        return self._other_tariff_type

    @other_tariff_type.setter
    def other_tariff_type(self, other_tariff_type):
        """Sets the other_tariff_type of this OtherFeesChargesInner.

        Other tariff type which is not in the standard list.

        :param other_tariff_type: The other_tariff_type of this OtherFeesChargesInner.
        :type other_tariff_type: object
        """

        self._other_tariff_type = other_tariff_type

    @property
    def tariff_name(self):
        """Gets the tariff_name of this OtherFeesChargesInner.

        Name of the tariff

        :return: The tariff_name of this OtherFeesChargesInner.
        :rtype: str
        """
        return self._tariff_name

    @tariff_name.setter
    def tariff_name(self, tariff_name):
        """Sets the tariff_name of this OtherFeesChargesInner.

        Name of the tariff

        :param tariff_name: The tariff_name of this OtherFeesChargesInner.
        :type tariff_name: str
        """
        if tariff_name is not None and len(tariff_name) > 350:
            raise ValueError("Invalid value for `tariff_name`, length must be less than or equal to `350`")
        if tariff_name is not None and len(tariff_name) < 1:
            raise ValueError("Invalid value for `tariff_name`, length must be greater than or equal to `1`")

        self._tariff_name = tariff_name

    @property
    def tariff_type(self):
        """Gets the tariff_type of this OtherFeesChargesInner.

        TariffType which defines the fee and charges.

        :return: The tariff_type of this OtherFeesChargesInner.
        :rtype: str
        """
        return self._tariff_type

    @tariff_type.setter
    def tariff_type(self, tariff_type):
        """Sets the tariff_type of this OtherFeesChargesInner.

        TariffType which defines the fee and charges.

        :param tariff_type: The tariff_type of this OtherFeesChargesInner.
        :type tariff_type: str
        """
        allowed_values = ["Electronic", "Mixed", "Other"]  # noqa: E501
        if tariff_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tariff_type` ({0}), must be one of {1}"
                .format(tariff_type, allowed_values)
            )

        self._tariff_type = tariff_type
