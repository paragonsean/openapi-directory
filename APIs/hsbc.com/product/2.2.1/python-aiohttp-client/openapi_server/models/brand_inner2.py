# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pca_inner import PCAInner
from openapi_server import util


class BrandInner2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_name: str=None, pca: List[PCAInner]=None):
        """BrandInner2 - a model defined in OpenAPI

        :param brand_name: The brand_name of this BrandInner2.
        :param pca: The pca of this BrandInner2.
        """
        self.openapi_types = {
            'brand_name': str,
            'pca': List[PCAInner]
        }

        self.attribute_map = {
            'brand_name': 'BrandName',
            'pca': 'PCA'
        }

        self._brand_name = brand_name
        self._pca = pca

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandInner2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand_inner_2 of this BrandInner2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_name(self):
        """Gets the brand_name of this BrandInner2.

        Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/

        :return: The brand_name of this BrandInner2.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this BrandInner2.

        Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/

        :param brand_name: The brand_name of this BrandInner2.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")
        if brand_name is not None and len(brand_name) > 140:
            raise ValueError("Invalid value for `brand_name`, length must be less than or equal to `140`")
        if brand_name is not None and len(brand_name) < 1:
            raise ValueError("Invalid value for `brand_name`, length must be greater than or equal to `1`")

        self._brand_name = brand_name

    @property
    def pca(self):
        """Gets the pca of this BrandInner2.

        PCA' means a personal current account. That is an account marketed to individuals rather than businesses, which provides the facility to place funds, withdraw cash, hold deposits and to execute payment transaction to and from third parties but does not include any of the following types of accounts:  (a) an account in which money is held on deposit in a currency other than sterling;  (b) current account mortgage, ie a single account comprising both a personal current account and a mortgage, which is regulated and marketed principally as a mortgage;   (c) savings accounts (including instant access savings accounts);   (d) credit card accounts where funds are usually paid in for the sole purpose of repaying a credit card debt; and  (e) e-money accounts.

        :return: The pca of this BrandInner2.
        :rtype: List[PCAInner]
        """
        return self._pca

    @pca.setter
    def pca(self, pca):
        """Sets the pca of this BrandInner2.

        PCA' means a personal current account. That is an account marketed to individuals rather than businesses, which provides the facility to place funds, withdraw cash, hold deposits and to execute payment transaction to and from third parties but does not include any of the following types of accounts:  (a) an account in which money is held on deposit in a currency other than sterling;  (b) current account mortgage, ie a single account comprising both a personal current account and a mortgage, which is regulated and marketed principally as a mortgage;   (c) savings accounts (including instant access savings accounts);   (d) credit card accounts where funds are usually paid in for the sole purpose of repaying a credit card debt; and  (e) e-money accounts.

        :param pca: The pca of this BrandInner2.
        :type pca: List[PCAInner]
        """
        if pca is None:
            raise ValueError("Invalid value for `pca`, must not be `None`")
        if pca is not None and len(pca) < 1:
            raise ValueError("Invalid value for `pca`, number of items must be greater than or equal to `1`")

        self._pca = pca
