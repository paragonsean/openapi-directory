# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FeeChargeDetailInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_frequency: str=None, calculation_frequency: str=None, fee_amount: str=None, fee_applicable_range: object=None, fee_category: str=None, fee_rate: str=None, fee_rate_type: str=None, fee_type: str=None, included_in_monthly_charge_indicator: bool=None, negotiable_indicator: bool=None, notes: List[str]=None, other_application_frequency: object=None, other_calculation_frequency: object=None, other_fee_category: object=None, other_fee_rate_type: object=None, other_fee_type: object=None):
        """FeeChargeDetailInner - a model defined in OpenAPI

        :param application_frequency: The application_frequency of this FeeChargeDetailInner.
        :param calculation_frequency: The calculation_frequency of this FeeChargeDetailInner.
        :param fee_amount: The fee_amount of this FeeChargeDetailInner.
        :param fee_applicable_range: The fee_applicable_range of this FeeChargeDetailInner.
        :param fee_category: The fee_category of this FeeChargeDetailInner.
        :param fee_rate: The fee_rate of this FeeChargeDetailInner.
        :param fee_rate_type: The fee_rate_type of this FeeChargeDetailInner.
        :param fee_type: The fee_type of this FeeChargeDetailInner.
        :param included_in_monthly_charge_indicator: The included_in_monthly_charge_indicator of this FeeChargeDetailInner.
        :param negotiable_indicator: The negotiable_indicator of this FeeChargeDetailInner.
        :param notes: The notes of this FeeChargeDetailInner.
        :param other_application_frequency: The other_application_frequency of this FeeChargeDetailInner.
        :param other_calculation_frequency: The other_calculation_frequency of this FeeChargeDetailInner.
        :param other_fee_category: The other_fee_category of this FeeChargeDetailInner.
        :param other_fee_rate_type: The other_fee_rate_type of this FeeChargeDetailInner.
        :param other_fee_type: The other_fee_type of this FeeChargeDetailInner.
        """
        self.openapi_types = {
            'application_frequency': str,
            'calculation_frequency': str,
            'fee_amount': str,
            'fee_applicable_range': object,
            'fee_category': str,
            'fee_rate': str,
            'fee_rate_type': str,
            'fee_type': str,
            'included_in_monthly_charge_indicator': bool,
            'negotiable_indicator': bool,
            'notes': List[str],
            'other_application_frequency': object,
            'other_calculation_frequency': object,
            'other_fee_category': object,
            'other_fee_rate_type': object,
            'other_fee_type': object
        }

        self.attribute_map = {
            'application_frequency': 'ApplicationFrequency',
            'calculation_frequency': 'CalculationFrequency',
            'fee_amount': 'FeeAmount',
            'fee_applicable_range': 'FeeApplicableRange',
            'fee_category': 'FeeCategory',
            'fee_rate': 'FeeRate',
            'fee_rate_type': 'FeeRateType',
            'fee_type': 'FeeType',
            'included_in_monthly_charge_indicator': 'IncludedInMonthlyChargeIndicator',
            'negotiable_indicator': 'NegotiableIndicator',
            'notes': 'Notes',
            'other_application_frequency': 'OtherApplicationFrequency',
            'other_calculation_frequency': 'OtherCalculationFrequency',
            'other_fee_category': 'OtherFeeCategory',
            'other_fee_rate_type': 'OtherFeeRateType',
            'other_fee_type': 'OtherFeeType'
        }

        self._application_frequency = application_frequency
        self._calculation_frequency = calculation_frequency
        self._fee_amount = fee_amount
        self._fee_applicable_range = fee_applicable_range
        self._fee_category = fee_category
        self._fee_rate = fee_rate
        self._fee_rate_type = fee_rate_type
        self._fee_type = fee_type
        self._included_in_monthly_charge_indicator = included_in_monthly_charge_indicator
        self._negotiable_indicator = negotiable_indicator
        self._notes = notes
        self._other_application_frequency = other_application_frequency
        self._other_calculation_frequency = other_calculation_frequency
        self._other_fee_category = other_fee_category
        self._other_fee_rate_type = other_fee_rate_type
        self._other_fee_type = other_fee_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeeChargeDetailInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeeChargeDetail_inner of this FeeChargeDetailInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_frequency(self):
        """Gets the application_frequency of this FeeChargeDetailInner.

        How frequently the fee/charge is applied to the account

        :return: The application_frequency of this FeeChargeDetailInner.
        :rtype: str
        """
        return self._application_frequency

    @application_frequency.setter
    def application_frequency(self, application_frequency):
        """Sets the application_frequency of this FeeChargeDetailInner.

        How frequently the fee/charge is applied to the account

        :param application_frequency: The application_frequency of this FeeChargeDetailInner.
        :type application_frequency: str
        """
        allowed_values = ["OnClosing", "OnOpening", "ChargingPeriod", "Daily", "PerItem", "Monthly", "OnAnniversary", "Other", "PerHundredPounds", "PerHour", "PerOccurrence", "PerSheet", "PerTransaction", "PerTransactionAmount", "PerTransactionPercentage", "Quarterly", "SixMonthly", "StatementMonthly", "Weekly", "Yearly"]  # noqa: E501
        if application_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `application_frequency` ({0}), must be one of {1}"
                .format(application_frequency, allowed_values)
            )

        self._application_frequency = application_frequency

    @property
    def calculation_frequency(self):
        """Gets the calculation_frequency of this FeeChargeDetailInner.

        How frequently the fee/charge is calculated

        :return: The calculation_frequency of this FeeChargeDetailInner.
        :rtype: str
        """
        return self._calculation_frequency

    @calculation_frequency.setter
    def calculation_frequency(self, calculation_frequency):
        """Sets the calculation_frequency of this FeeChargeDetailInner.

        How frequently the fee/charge is calculated

        :param calculation_frequency: The calculation_frequency of this FeeChargeDetailInner.
        :type calculation_frequency: str
        """
        allowed_values = ["OnClosing", "OnOpening", "ChargingPeriod", "Daily", "PerItem", "Monthly", "OnAnniversary", "Other", "PerHundredPounds", "PerHour", "PerOccurrence", "PerSheet", "PerTransaction", "PerTransactionAmount", "PerTransactionPercentage", "Quarterly", "SixMonthly", "StatementMonthly", "Weekly", "Yearly"]  # noqa: E501
        if calculation_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `calculation_frequency` ({0}), must be one of {1}"
                .format(calculation_frequency, allowed_values)
            )

        self._calculation_frequency = calculation_frequency

    @property
    def fee_amount(self):
        """Gets the fee_amount of this FeeChargeDetailInner.

        Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)

        :return: The fee_amount of this FeeChargeDetailInner.
        :rtype: str
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this FeeChargeDetailInner.

        Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)

        :param fee_amount: The fee_amount of this FeeChargeDetailInner.
        :type fee_amount: str
        """
        if fee_amount is not None and not re.search(r'^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$', fee_amount):
            raise ValueError("Invalid value for `fee_amount`, must be a follow pattern or equal to `/^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/`")

        self._fee_amount = fee_amount

    @property
    def fee_applicable_range(self):
        """Gets the fee_applicable_range of this FeeChargeDetailInner.

        Range or amounts or rates for which the fee/charge applies

        :return: The fee_applicable_range of this FeeChargeDetailInner.
        :rtype: object
        """
        return self._fee_applicable_range

    @fee_applicable_range.setter
    def fee_applicable_range(self, fee_applicable_range):
        """Sets the fee_applicable_range of this FeeChargeDetailInner.

        Range or amounts or rates for which the fee/charge applies

        :param fee_applicable_range: The fee_applicable_range of this FeeChargeDetailInner.
        :type fee_applicable_range: object
        """

        self._fee_applicable_range = fee_applicable_range

    @property
    def fee_category(self):
        """Gets the fee_category of this FeeChargeDetailInner.

        Categorisation of fees and charges into standard categories.

        :return: The fee_category of this FeeChargeDetailInner.
        :rtype: str
        """
        return self._fee_category

    @fee_category.setter
    def fee_category(self, fee_category):
        """Sets the fee_category of this FeeChargeDetailInner.

        Categorisation of fees and charges into standard categories.

        :param fee_category: The fee_category of this FeeChargeDetailInner.
        :type fee_category: str
        """
        allowed_values = ["Auto", "ATM", "BankersDrafts", "Card", "Cheque", "CounterServices", "DirectDebit", "Deeds", "Foreign", "FX", "International", "Investigation", "Legal", "Loan", "NightSafe", "Online", "Other", "PostOffice", "PaymentScheme", "Report", "Safekeeping", "Servicing", "Transaction"]  # noqa: E501
        if fee_category not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_category` ({0}), must be one of {1}"
                .format(fee_category, allowed_values)
            )

        self._fee_category = fee_category

    @property
    def fee_rate(self):
        """Gets the fee_rate of this FeeChargeDetailInner.

        Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)

        :return: The fee_rate of this FeeChargeDetailInner.
        :rtype: str
        """
        return self._fee_rate

    @fee_rate.setter
    def fee_rate(self, fee_rate):
        """Sets the fee_rate of this FeeChargeDetailInner.

        Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)

        :param fee_rate: The fee_rate of this FeeChargeDetailInner.
        :type fee_rate: str
        """
        if fee_rate is not None and not re.search(r'^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$', fee_rate):
            raise ValueError("Invalid value for `fee_rate`, must be a follow pattern or equal to `/^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$/`")

        self._fee_rate = fee_rate

    @property
    def fee_rate_type(self):
        """Gets the fee_rate_type of this FeeChargeDetailInner.

        Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)

        :return: The fee_rate_type of this FeeChargeDetailInner.
        :rtype: str
        """
        return self._fee_rate_type

    @fee_rate_type.setter
    def fee_rate_type(self, fee_rate_type):
        """Sets the fee_rate_type of this FeeChargeDetailInner.

        Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)

        :param fee_rate_type: The fee_rate_type of this FeeChargeDetailInner.
        :type fee_rate_type: str
        """
        allowed_values = ["Gross", "Other"]  # noqa: E501
        if fee_rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_rate_type` ({0}), must be one of {1}"
                .format(fee_rate_type, allowed_values)
            )

        self._fee_rate_type = fee_rate_type

    @property
    def fee_type(self):
        """Gets the fee_type of this FeeChargeDetailInner.

        Fee/Charge Type

        :return: The fee_type of this FeeChargeDetailInner.
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this FeeChargeDetailInner.

        Fee/Charge Type

        :param fee_type: The fee_type of this FeeChargeDetailInner.
        :type fee_type: str
        """
        allowed_values = ["ATMDeposATMPaidIn", "ReportCertBalance", "ATMAbroadConVisaDebit", "ATMCardnetEnvIn", "ATMCashGroupATMDebitCard", "ATMCashNonGroupATMDebitcard", "ATMConGroupATM", "ATMAbroad", "ATMForeignCashDebCard", "ATMAbroadGoldVisaDebit", "ATMNonSterlingWithdrawal", "ATMAbroadVisaDebit", "ATMWithdrawCash", "BACSOnLineAncilliary", "BACSBatch", "BACSOnLineFile", "BACSItem", "BACSBulkBatch", "BACSOnLineOverlimit", "BACSOnLinePayment", "BACSOnLineService", "BACSBulkInternet", "BACSTELDirDebSmartCard", "BACSTELDirDebWebInit", "BACSTELirDebWebInit", "BACSTELDirDebOverlimit", "BACSTELDirDebPayment", "BACSTELDirDebService", "BACSTELDirDebAncilliary", "BACSTELAncilliary", "BACSTELSmartCard", "BACSTELFile", "BACSTELOverlimit", "BACSTELPayment", "BACSTELService", "CHAPSOutBranch", "CHAPSOutOnlineDepositAcc", "CHAPSIn", "CHAPSOutPost", "CHAPSOut", "CHAPSOutOnline", "CHAPSOutManual", "CardCardReplacement", "DraftsBankers", "DraftsCancellation", "CardGuaranteed", "DraftsIntlPayableAbroad", "DraftsIntlStoppedCancelled", "EuroChqXLess", "EuroChqXPlus", "FPSOut", "FPSOutOwn", "FPSInBranch", "LegalArticlesReport", "LegalSealing", "LegalBondAndGuarantee", "LegalCoSearch", "LegalDepositAssignment", "LegalGuaranteePrep", "LegalLifePolicyPrepCo", "LegalLifePolicyPrepPersonal", "LegalPriorityPariPassu", "LegalSubordinationAgreement", "DirDebDirectDebitAdmin", "DirDebDirectDebitCancel", "IntlPayBIBForeignLimit", "IntlPayCreditTransCust", "IntlPayCreditTransNonCust", "IntlPayExpressMoneyMover", "IntlPayEEAPayUrgent", "IntlPayIrishPayUrgent", "IntlPayEEAPay", "IntlPayFXPaymentIn", "IntlPayForeignIn1CPlus", "IntlPayForeignCharge", "IntlPayForeignInternet", "IntlPayForeignInSub1C", "IntlPayPurchaseNonSterling", "IntlPayPaymentTracing", "IntlPayStandardMoneyMover", "IntlPayMT101Transaction", "IntlPayWorldpayPayment", "InvPayBankDetailsWrong", "InvPayForeignBCNR", "InvPayForeignRecall", "InvGeneralInq", "InvOldInstruction", "InvPayReturnDebitXVLess", "InvPayReturnDebitXVPlus", "InvPayStopPayment", "InvPayStandingOrdUnpaid", "SafeKeepAccess", "SafeKeepDeedMedium", "SafeKeepingEnvelope", "SafeKeepingInspection", "SafeKeepingLargeItem", "SafeKeepMultipleItems", "SafeKeepingParcel", "SafeKeepDeedSmall", "SafeKeepOneItem", "LoanArrangement", "NightSafeNightSafeBankOpen", "NightSafeCreditSub5K", "NightSafeNightSafe", "NightSafeNightSafePaidIn", "POPostOfficeCounterCredit", "POPostOfficeCashCredit", "POPostOfficeCashOut", "POPostOfficeWithdrawal", "ChqBookTheftLossAllStopped", "ChqIssuedCurrencyAcc", "ChqCopy", "ChqDraft", "ChqIn", "ChqSpecialChqClearance", "ChqOutIssued", "ChqSpecialChqPresentation", "ChqCounterCheque", "ChqChequeswithStatement", "ChqStopped", "ChqTrans", "ChqDraftFX", "ChqForeignCourier", "ChqForeignNegTenThou", "ChqForeignNegHundred", "ChequeForeignBankDivi", "ChqForeignNegFiftyThou", "ChqPensionCheque", "ChequeForeignOtherDivi", "ChqForeignNegFiveThou", "ChqForeignNegMax", "ChqForeignGBPMMDPlus", "ChqGiftCheque", "ChqCounterLodgement", "ChqCashDropLodgement", "ChqForeign", "ChqChequePhotocopy", "ChqPostOfficeCredit", "ChqPostOfficeChequeCollected", "ChqChequeRetrieval", "ChqReconcilliationPerTrans", "ChqSpecialPresentationCount", "ChqSpecialPresentationPTT", "ChqDraftSterling", "ChqUnpaidCharge", "ChqUnpaidTransIn", "ChqUnpaidTransOut", "ChqUnpaidCheque", "ReportAuditLetter", "ReportFAXAdviceAdditional", "ReportTelAdviceAdditional", "ReportCreditHistory", "ReportCertInterestDuplicate", "ReportCertInterest", "ReportCreditHistoryAdditionalInYear", "ReportForeignStatusEnqElec", "ReportForeignStatusEnq", "ReportStatementChqDaily", "ReportStatementChqFortnightly", "ReportStatementChqMonthly", "ReportStatementChqWeekly", "ReportStatementAndDiviChq", "ReportReferralItem", "ReportStatementByATM", "ReportStatementByBranch", "ReportStatementCopyRegular", "ReportStatementDaily", "ReportStatusEnquiry", "ReportStatementFrequent", "ReportStatementMonthly", "ReportStatementCopy1", "ReportStatementToBranch", "ReportSMSTextMiniStatementorAlert", "ReportStatementFortnightly", "ReportSMSTextMiniStatementWoM", "ReportSMSTextAlertBalance", "ReportSMSTextAlert", "ReportTaxCert", "ReportWeeklyStatement", "SEPABranch", "SEPACredit", "SEPADirectDebit", "SEPAIn", "SEPAEuro", "SEPAOut", "SEPAUnpaid", "SEPAWinbitsTransaction", "TransBillPaymentBranch", "TransBillCollect", "TransTelephoneBillPayment", "TransBankPayment", "TransBillPaymentTelephone", "TransCorrespondentBankFee", "TransCreditTransferUKDifferent", "TransCreditTransferUKSame", "TransCredit", "TransCreditTransfer", "TransBranchCredit", "TransDebit", "TransDebCardDeb", "TransUKDirDeb", "TransManualDeb", "TitleDeeds", "TransBuyForeignWithGBP", "TransGoodValueReq", "TransSWIFTOutUKForeign", "TransInconpleteInstruction", "TransManualEntries", "TransManualTrans", "TransNonSterling", "Other", "TransPOSSaleForeign", "TransPriPaymentPost", "TransPOSSaleUK", "TransReconciliationPerTrans", "TransStandingOrdAdmin", "TransStandingOrd", "TransStandingOrdManPay", "TransTelBusiPriPaymentForeignToUKAcc", "TransTeleItem", "TransTelBusiPriPaymentToGrpAcc", "TransTransferExGroup", "TransTelBusiPriPaymentToNonGrpAcc", "TransSWIFTOutNonEEASterling", "AutoAutoCredit", "AutoAutomatedEntries", "AutoAutoCreditPhoneInet", "AutoAutomatedTrans", "AutoDebitCardCommercial", "AutoFPSAutoCredit", "VisaTravellersChqorCurrency", "OnlineInternetBillPayment", "OnlineBusinessOnlineEuroPayment", "OnlineBusinessOnlineUrgentEuroPayment", "OnlineBusinessOnlineForeignPayment", "OnlineInterbankTransfer", "OnlineInterbankPerTransfer", "OnlineInterbranchTransfer", "OnlineInterbranchPerTransfer", "OnlineSubscriptionMonthly", "OnlineBankingPayment", "OnlineReplacementCardReader", "OnlinePaymentinGBPtoUK", "OnlineUrgentPayment", "OnlinePaymentinUSDtoUS", "OnlineBulkDirectDebSterling", "ForeignChqSent", "ForeignChqSelf", "ForeignChqEncashment", "ForeignFXInwardsCust", "ForeignFXTransfersROI", "ForeignFXForwardTrans", "ForeignExMaintenance", "ForeignFXInwardsNonCust", "ForeignFXOutwards", "ForeignPurchase", "ForeignStatusRep", "ForeignChqDraft", "ForeignChqCLess", "ForeignChqMLess", "ForeignChqOther", "ForeignChqMPlus", "ForeignChqCCC", "ServiceCAccountFee", "ServiceCAccountFeeMonthly", "ServiceCAccountFeeQuarterly", "ServiceCFixedTariff", "ServiceCBusiDepAccBreakage", "ServiceCMonitorDaily", "ServiceCMinimumMonthlyFee", "ServiceCMonitorMonthly", "ServiceCMonitorWeekly", "ServiceCMT940AccountFirst", "ServiceCMT940AccountSubsequent", "ServiceCOther", "CounterCoinHandling", "CounterCashIn", "CounterCashInNotUs", "CounterCashOut", "CounterCashX", "CounterForeignNoteHandling", "CounterCashFeeRate", "CounterForeignCashOutTx", "CounterCounterLodgement", "CounterCashDropLodgement", "CounterNotesLodged", "CounterNotesOut", "CounterCashInOwn", "CounterCashFeePercent"]  # noqa: E501
        if fee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_type` ({0}), must be one of {1}"
                .format(fee_type, allowed_values)
            )

        self._fee_type = fee_type

    @property
    def included_in_monthly_charge_indicator(self):
        """Gets the included_in_monthly_charge_indicator of this FeeChargeDetailInner.

        Indicates that fee/charge is already included in the monthly charge.

        :return: The included_in_monthly_charge_indicator of this FeeChargeDetailInner.
        :rtype: bool
        """
        return self._included_in_monthly_charge_indicator

    @included_in_monthly_charge_indicator.setter
    def included_in_monthly_charge_indicator(self, included_in_monthly_charge_indicator):
        """Sets the included_in_monthly_charge_indicator of this FeeChargeDetailInner.

        Indicates that fee/charge is already included in the monthly charge.

        :param included_in_monthly_charge_indicator: The included_in_monthly_charge_indicator of this FeeChargeDetailInner.
        :type included_in_monthly_charge_indicator: bool
        """

        self._included_in_monthly_charge_indicator = included_in_monthly_charge_indicator

    @property
    def negotiable_indicator(self):
        """Gets the negotiable_indicator of this FeeChargeDetailInner.

        Fee/charge which is usually negotiable rather than a fixed amount

        :return: The negotiable_indicator of this FeeChargeDetailInner.
        :rtype: bool
        """
        return self._negotiable_indicator

    @negotiable_indicator.setter
    def negotiable_indicator(self, negotiable_indicator):
        """Sets the negotiable_indicator of this FeeChargeDetailInner.

        Fee/charge which is usually negotiable rather than a fixed amount

        :param negotiable_indicator: The negotiable_indicator of this FeeChargeDetailInner.
        :type negotiable_indicator: bool
        """

        self._negotiable_indicator = negotiable_indicator

    @property
    def notes(self):
        """Gets the notes of this FeeChargeDetailInner.

        Optional additional notes to supplement the fee/charge details.

        :return: The notes of this FeeChargeDetailInner.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FeeChargeDetailInner.

        Optional additional notes to supplement the fee/charge details.

        :param notes: The notes of this FeeChargeDetailInner.
        :type notes: List[str]
        """

        self._notes = notes

    @property
    def other_application_frequency(self):
        """Gets the other_application_frequency of this FeeChargeDetailInner.

        Other application frequencies not covered in the standard code list

        :return: The other_application_frequency of this FeeChargeDetailInner.
        :rtype: object
        """
        return self._other_application_frequency

    @other_application_frequency.setter
    def other_application_frequency(self, other_application_frequency):
        """Sets the other_application_frequency of this FeeChargeDetailInner.

        Other application frequencies not covered in the standard code list

        :param other_application_frequency: The other_application_frequency of this FeeChargeDetailInner.
        :type other_application_frequency: object
        """

        self._other_application_frequency = other_application_frequency

    @property
    def other_calculation_frequency(self):
        """Gets the other_calculation_frequency of this FeeChargeDetailInner.

        Other calculation frequency which is not available in standard code set.

        :return: The other_calculation_frequency of this FeeChargeDetailInner.
        :rtype: object
        """
        return self._other_calculation_frequency

    @other_calculation_frequency.setter
    def other_calculation_frequency(self, other_calculation_frequency):
        """Sets the other_calculation_frequency of this FeeChargeDetailInner.

        Other calculation frequency which is not available in standard code set.

        :param other_calculation_frequency: The other_calculation_frequency of this FeeChargeDetailInner.
        :type other_calculation_frequency: object
        """

        self._other_calculation_frequency = other_calculation_frequency

    @property
    def other_fee_category(self):
        """Gets the other_fee_category of this FeeChargeDetailInner.


        :return: The other_fee_category of this FeeChargeDetailInner.
        :rtype: object
        """
        return self._other_fee_category

    @other_fee_category.setter
    def other_fee_category(self, other_fee_category):
        """Sets the other_fee_category of this FeeChargeDetailInner.


        :param other_fee_category: The other_fee_category of this FeeChargeDetailInner.
        :type other_fee_category: object
        """

        self._other_fee_category = other_fee_category

    @property
    def other_fee_rate_type(self):
        """Gets the other_fee_rate_type of this FeeChargeDetailInner.

        Other fee rate type which is not available in the standard code set

        :return: The other_fee_rate_type of this FeeChargeDetailInner.
        :rtype: object
        """
        return self._other_fee_rate_type

    @other_fee_rate_type.setter
    def other_fee_rate_type(self, other_fee_rate_type):
        """Sets the other_fee_rate_type of this FeeChargeDetailInner.

        Other fee rate type which is not available in the standard code set

        :param other_fee_rate_type: The other_fee_rate_type of this FeeChargeDetailInner.
        :type other_fee_rate_type: object
        """

        self._other_fee_rate_type = other_fee_rate_type

    @property
    def other_fee_type(self):
        """Gets the other_fee_type of this FeeChargeDetailInner.

        Other Fee/charge type which is not available in the standard code set

        :return: The other_fee_type of this FeeChargeDetailInner.
        :rtype: object
        """
        return self._other_fee_type

    @other_fee_type.setter
    def other_fee_type(self, other_fee_type):
        """Sets the other_fee_type of this FeeChargeDetailInner.

        Other Fee/charge type which is not available in the standard code set

        :param other_fee_type: The other_fee_type of this FeeChargeDetailInner.
        :type other_fee_type: object
        """

        self._other_fee_type = other_fee_type
