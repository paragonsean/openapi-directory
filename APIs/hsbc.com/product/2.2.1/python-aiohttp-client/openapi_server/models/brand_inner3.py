# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sme_loan_inner import SMELoanInner
from openapi_server import util


class BrandInner3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_name: str=None, sme_loan: List[SMELoanInner]=None):
        """BrandInner3 - a model defined in OpenAPI

        :param brand_name: The brand_name of this BrandInner3.
        :param sme_loan: The sme_loan of this BrandInner3.
        """
        self.openapi_types = {
            'brand_name': str,
            'sme_loan': List[SMELoanInner]
        }

        self.attribute_map = {
            'brand_name': 'BrandName',
            'sme_loan': 'SMELoan'
        }

        self._brand_name = brand_name
        self._sme_loan = sme_loan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandInner3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand_inner_3 of this BrandInner3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_name(self):
        """Gets the brand_name of this BrandInner3.

        Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/

        :return: The brand_name of this BrandInner3.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this BrandInner3.

        Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/

        :param brand_name: The brand_name of this BrandInner3.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")
        if brand_name is not None and len(brand_name) > 140:
            raise ValueError("Invalid value for `brand_name`, length must be less than or equal to `140`")
        if brand_name is not None and len(brand_name) < 1:
            raise ValueError("Invalid value for `brand_name`, length must be greater than or equal to `1`")

        self._brand_name = brand_name

    @property
    def sme_loan(self):
        """Gets the sme_loan of this BrandInner3.

        SMELoan means SME unsecured loan.

        :return: The sme_loan of this BrandInner3.
        :rtype: List[SMELoanInner]
        """
        return self._sme_loan

    @sme_loan.setter
    def sme_loan(self, sme_loan):
        """Sets the sme_loan of this BrandInner3.

        SMELoan means SME unsecured loan.

        :param sme_loan: The sme_loan of this BrandInner3.
        :type sme_loan: List[SMELoanInner]
        """
        if sme_loan is None:
            raise ValueError("Invalid value for `sme_loan`, must not be `None`")
        if sme_loan is not None and len(sme_loan) < 1:
            raise ValueError("Invalid value for `sme_loan`, number of items must be greater than or equal to `1`")

        self._sme_loan = sme_loan
