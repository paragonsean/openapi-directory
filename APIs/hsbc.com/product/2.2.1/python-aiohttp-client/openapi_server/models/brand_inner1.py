# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ccc_inner import CCCInner
from openapi_server import util


class BrandInner1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_name: str=None, ccc: List[CCCInner]=None):
        """BrandInner1 - a model defined in OpenAPI

        :param brand_name: The brand_name of this BrandInner1.
        :param ccc: The ccc of this BrandInner1.
        """
        self.openapi_types = {
            'brand_name': str,
            'ccc': List[CCCInner]
        }

        self.attribute_map = {
            'brand_name': 'BrandName',
            'ccc': 'CCC'
        }

        self._brand_name = brand_name
        self._ccc = ccc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandInner1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand_inner_1 of this BrandInner1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_name(self):
        """Gets the brand_name of this BrandInner1.

        Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/

        :return: The brand_name of this BrandInner1.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this BrandInner1.

        Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/

        :param brand_name: The brand_name of this BrandInner1.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")
        if brand_name is not None and len(brand_name) > 140:
            raise ValueError("Invalid value for `brand_name`, length must be less than or equal to `140`")
        if brand_name is not None and len(brand_name) < 1:
            raise ValueError("Invalid value for `brand_name`, length must be greater than or equal to `1`")

        self._brand_name = brand_name

    @property
    def ccc(self):
        """Gets the ccc of this BrandInner1.

        CCC means a Commercial Credit Card.

        :return: The ccc of this BrandInner1.
        :rtype: List[CCCInner]
        """
        return self._ccc

    @ccc.setter
    def ccc(self, ccc):
        """Sets the ccc of this BrandInner1.

        CCC means a Commercial Credit Card.

        :param ccc: The ccc of this BrandInner1.
        :type ccc: List[CCCInner]
        """
        if ccc is None:
            raise ValueError("Invalid value for `ccc`, must not be `None`")
        if ccc is not None and len(ccc) < 1:
            raise ValueError("Invalid value for `ccc`, number of items must be greater than or equal to `1`")

        self._ccc = ccc
