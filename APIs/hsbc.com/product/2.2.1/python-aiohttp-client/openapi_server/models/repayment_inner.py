# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repayment_holiday_inner import RepaymentHolidayInner
from openapi_server import util


class RepaymentInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_type: str=None, notes: List[str]=None, other_amount_type: object=None, other_repayment_frequency: object=None, other_repayment_type: object=None, repayment_fee_charges: object=None, repayment_frequency: str=None, repayment_holiday: List[RepaymentHolidayInner]=None, repayment_type: str=None):
        """RepaymentInner - a model defined in OpenAPI

        :param amount_type: The amount_type of this RepaymentInner.
        :param notes: The notes of this RepaymentInner.
        :param other_amount_type: The other_amount_type of this RepaymentInner.
        :param other_repayment_frequency: The other_repayment_frequency of this RepaymentInner.
        :param other_repayment_type: The other_repayment_type of this RepaymentInner.
        :param repayment_fee_charges: The repayment_fee_charges of this RepaymentInner.
        :param repayment_frequency: The repayment_frequency of this RepaymentInner.
        :param repayment_holiday: The repayment_holiday of this RepaymentInner.
        :param repayment_type: The repayment_type of this RepaymentInner.
        """
        self.openapi_types = {
            'amount_type': str,
            'notes': List[str],
            'other_amount_type': object,
            'other_repayment_frequency': object,
            'other_repayment_type': object,
            'repayment_fee_charges': object,
            'repayment_frequency': str,
            'repayment_holiday': List[RepaymentHolidayInner],
            'repayment_type': str
        }

        self.attribute_map = {
            'amount_type': 'AmountType',
            'notes': 'Notes',
            'other_amount_type': 'OtherAmountType',
            'other_repayment_frequency': 'OtherRepaymentFrequency',
            'other_repayment_type': 'OtherRepaymentType',
            'repayment_fee_charges': 'RepaymentFeeCharges',
            'repayment_frequency': 'RepaymentFrequency',
            'repayment_holiday': 'RepaymentHoliday',
            'repayment_type': 'RepaymentType'
        }

        self._amount_type = amount_type
        self._notes = notes
        self._other_amount_type = other_amount_type
        self._other_repayment_frequency = other_repayment_frequency
        self._other_repayment_type = other_repayment_type
        self._repayment_fee_charges = repayment_fee_charges
        self._repayment_frequency = repayment_frequency
        self._repayment_holiday = repayment_holiday
        self._repayment_type = repayment_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepaymentInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repayment_inner of this RepaymentInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_type(self):
        """Gets the amount_type of this RepaymentInner.

        The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc

        :return: The amount_type of this RepaymentInner.
        :rtype: str
        """
        return self._amount_type

    @amount_type.setter
    def amount_type(self, amount_type):
        """Sets the amount_type of this RepaymentInner.

        The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc

        :param amount_type: The amount_type of this RepaymentInner.
        :type amount_type: str
        """
        allowed_values = ["BalanceToDate", "Balloon", "CapitalAndInterest", "FeeChargeCap", "InterestOnly", "Bullet", "Other"]  # noqa: E501
        if amount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amount_type` ({0}), must be one of {1}"
                .format(amount_type, allowed_values)
            )

        self._amount_type = amount_type

    @property
    def notes(self):
        """Gets the notes of this RepaymentInner.

        Optional additional notes to supplement the Repayment

        :return: The notes of this RepaymentInner.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RepaymentInner.

        Optional additional notes to supplement the Repayment

        :param notes: The notes of this RepaymentInner.
        :type notes: List[str]
        """

        self._notes = notes

    @property
    def other_amount_type(self):
        """Gets the other_amount_type of this RepaymentInner.

        Other amount type which is not in the standard code list

        :return: The other_amount_type of this RepaymentInner.
        :rtype: object
        """
        return self._other_amount_type

    @other_amount_type.setter
    def other_amount_type(self, other_amount_type):
        """Sets the other_amount_type of this RepaymentInner.

        Other amount type which is not in the standard code list

        :param other_amount_type: The other_amount_type of this RepaymentInner.
        :type other_amount_type: object
        """

        self._other_amount_type = other_amount_type

    @property
    def other_repayment_frequency(self):
        """Gets the other_repayment_frequency of this RepaymentInner.

        Other repayment frequency which is not in the standard code list

        :return: The other_repayment_frequency of this RepaymentInner.
        :rtype: object
        """
        return self._other_repayment_frequency

    @other_repayment_frequency.setter
    def other_repayment_frequency(self, other_repayment_frequency):
        """Sets the other_repayment_frequency of this RepaymentInner.

        Other repayment frequency which is not in the standard code list

        :param other_repayment_frequency: The other_repayment_frequency of this RepaymentInner.
        :type other_repayment_frequency: object
        """

        self._other_repayment_frequency = other_repayment_frequency

    @property
    def other_repayment_type(self):
        """Gets the other_repayment_type of this RepaymentInner.

        Other repayment type which is not in the standard code list

        :return: The other_repayment_type of this RepaymentInner.
        :rtype: object
        """
        return self._other_repayment_type

    @other_repayment_type.setter
    def other_repayment_type(self, other_repayment_type):
        """Sets the other_repayment_type of this RepaymentInner.

        Other repayment type which is not in the standard code list

        :param other_repayment_type: The other_repayment_type of this RepaymentInner.
        :type other_repayment_type: object
        """

        self._other_repayment_type = other_repayment_type

    @property
    def repayment_fee_charges(self):
        """Gets the repayment_fee_charges of this RepaymentInner.

        Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.

        :return: The repayment_fee_charges of this RepaymentInner.
        :rtype: object
        """
        return self._repayment_fee_charges

    @repayment_fee_charges.setter
    def repayment_fee_charges(self, repayment_fee_charges):
        """Sets the repayment_fee_charges of this RepaymentInner.

        Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.

        :param repayment_fee_charges: The repayment_fee_charges of this RepaymentInner.
        :type repayment_fee_charges: object
        """

        self._repayment_fee_charges = repayment_fee_charges

    @property
    def repayment_frequency(self):
        """Gets the repayment_frequency of this RepaymentInner.

        Repayment frequency

        :return: The repayment_frequency of this RepaymentInner.
        :rtype: str
        """
        return self._repayment_frequency

    @repayment_frequency.setter
    def repayment_frequency(self, repayment_frequency):
        """Sets the repayment_frequency of this RepaymentInner.

        Repayment frequency

        :param repayment_frequency: The repayment_frequency of this RepaymentInner.
        :type repayment_frequency: str
        """
        allowed_values = ["Daily", "Flexible", "Fortnightly", "HalfYearly", "Monthly", "Other", "Quarterly", "Weekly", "Yearly"]  # noqa: E501
        if repayment_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_frequency` ({0}), must be one of {1}"
                .format(repayment_frequency, allowed_values)
            )

        self._repayment_frequency = repayment_frequency

    @property
    def repayment_holiday(self):
        """Gets the repayment_holiday of this RepaymentInner.

        Details of capital repayment holiday if any

        :return: The repayment_holiday of this RepaymentInner.
        :rtype: List[RepaymentHolidayInner]
        """
        return self._repayment_holiday

    @repayment_holiday.setter
    def repayment_holiday(self, repayment_holiday):
        """Sets the repayment_holiday of this RepaymentInner.

        Details of capital repayment holiday if any

        :param repayment_holiday: The repayment_holiday of this RepaymentInner.
        :type repayment_holiday: List[RepaymentHolidayInner]
        """

        self._repayment_holiday = repayment_holiday

    @property
    def repayment_type(self):
        """Gets the repayment_type of this RepaymentInner.

        Repayment type

        :return: The repayment_type of this RepaymentInner.
        :rtype: str
        """
        return self._repayment_type

    @repayment_type.setter
    def repayment_type(self, repayment_type):
        """Sets the repayment_type of this RepaymentInner.

        Repayment type

        :param repayment_type: The repayment_type of this RepaymentInner.
        :type repayment_type: str
        """
        allowed_values = ["Balloon", "Bullet", "CapitalAndInterest", "CustomSchedule", "EarlyRepayment", "FixedCapitalFullyAmortising", "FixedCapitalWithBullet", "FixedCapitalAndInterestReducingBalance", "InterestOnly", "PrepaymentFee", "RepaymentWithBullet", "StraightLineInterestOnly"]  # noqa: E501
        if repayment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_type` ({0}), must be one of {1}"
                .format(repayment_type, allowed_values)
            )

        self._repayment_type = repayment_type
