# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.brand_inner3 import BrandInner3
from openapi_server import util


class SMELendingDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: List[BrandInner3]=None):
        """SMELendingDefinition - a model defined in OpenAPI

        :param brand: The brand of this SMELendingDefinition.
        """
        self.openapi_types = {
            'brand': List[BrandInner3]
        }

        self.attribute_map = {
            'brand': 'Brand'
        }

        self._brand = brand

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SMELendingDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SMELendingDefinition of this SMELendingDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this SMELendingDefinition.

        Brand registered by the banking group at https://register.fca.org.uk/

        :return: The brand of this SMELendingDefinition.
        :rtype: List[BrandInner3]
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SMELendingDefinition.

        Brand registered by the banking group at https://register.fca.org.uk/

        :param brand: The brand of this SMELendingDefinition.
        :type brand: List[BrandInner3]
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")
        if brand is not None and len(brand) < 1:
            raise ValueError("Invalid value for `brand`, number of items must be greater than or equal to `1`")

        self._brand = brand
