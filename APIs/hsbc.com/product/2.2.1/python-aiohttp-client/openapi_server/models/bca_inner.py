# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bca_marketing_state_inner import BCAMarketingStateInner
from openapi_server import util


class BCAInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bca_marketing_state: List[BCAMarketingStateInner]=None, fee_free_length: float=None, fee_free_length_period: str=None, identification: str=None, name: str=None, notes: List[str]=None, on_sale_indicator: bool=None, segment: List[str]=None):
        """BCAInner - a model defined in OpenAPI

        :param bca_marketing_state: The bca_marketing_state of this BCAInner.
        :param fee_free_length: The fee_free_length of this BCAInner.
        :param fee_free_length_period: The fee_free_length_period of this BCAInner.
        :param identification: The identification of this BCAInner.
        :param name: The name of this BCAInner.
        :param notes: The notes of this BCAInner.
        :param on_sale_indicator: The on_sale_indicator of this BCAInner.
        :param segment: The segment of this BCAInner.
        """
        self.openapi_types = {
            'bca_marketing_state': List[BCAMarketingStateInner],
            'fee_free_length': float,
            'fee_free_length_period': str,
            'identification': str,
            'name': str,
            'notes': List[str],
            'on_sale_indicator': bool,
            'segment': List[str]
        }

        self.attribute_map = {
            'bca_marketing_state': 'BCAMarketingState',
            'fee_free_length': 'FeeFreeLength',
            'fee_free_length_period': 'FeeFreeLengthPeriod',
            'identification': 'Identification',
            'name': 'Name',
            'notes': 'Notes',
            'on_sale_indicator': 'OnSaleIndicator',
            'segment': 'Segment'
        }

        self._bca_marketing_state = bca_marketing_state
        self._fee_free_length = fee_free_length
        self._fee_free_length_period = fee_free_length_period
        self._identification = identification
        self._name = name
        self._notes = notes
        self._on_sale_indicator = on_sale_indicator
        self._segment = segment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BCAInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BCA_inner of this BCAInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bca_marketing_state(self):
        """Gets the bca_marketing_state of this BCAInner.

        The marketing state (promotional or regular) of the BCA Product.

        :return: The bca_marketing_state of this BCAInner.
        :rtype: List[BCAMarketingStateInner]
        """
        return self._bca_marketing_state

    @bca_marketing_state.setter
    def bca_marketing_state(self, bca_marketing_state):
        """Sets the bca_marketing_state of this BCAInner.

        The marketing state (promotional or regular) of the BCA Product.

        :param bca_marketing_state: The bca_marketing_state of this BCAInner.
        :type bca_marketing_state: List[BCAMarketingStateInner]
        """
        if bca_marketing_state is None:
            raise ValueError("Invalid value for `bca_marketing_state`, must not be `None`")
        if bca_marketing_state is not None and len(bca_marketing_state) < 1:
            raise ValueError("Invalid value for `bca_marketing_state`, number of items must be greater than or equal to `1`")

        self._bca_marketing_state = bca_marketing_state

    @property
    def fee_free_length(self):
        """Gets the fee_free_length of this BCAInner.

        The length/duration of the fee free period

        :return: The fee_free_length of this BCAInner.
        :rtype: float
        """
        return self._fee_free_length

    @fee_free_length.setter
    def fee_free_length(self, fee_free_length):
        """Sets the fee_free_length of this BCAInner.

        The length/duration of the fee free period

        :param fee_free_length: The fee_free_length of this BCAInner.
        :type fee_free_length: float
        """

        self._fee_free_length = fee_free_length

    @property
    def fee_free_length_period(self):
        """Gets the fee_free_length_period of this BCAInner.

        The unit of period (days, weeks, months etc.) of the promotional length

        :return: The fee_free_length_period of this BCAInner.
        :rtype: str
        """
        return self._fee_free_length_period

    @fee_free_length_period.setter
    def fee_free_length_period(self, fee_free_length_period):
        """Sets the fee_free_length_period of this BCAInner.

        The unit of period (days, weeks, months etc.) of the promotional length

        :param fee_free_length_period: The fee_free_length_period of this BCAInner.
        :type fee_free_length_period: str
        """
        allowed_values = ["Day", "Half Year", "Month", "Quarter", "Week", "AcademicTerm", "Year"]  # noqa: E501
        if fee_free_length_period not in allowed_values:
            raise ValueError(
                "Invalid value for `fee_free_length_period` ({0}), must be one of {1}"
                .format(fee_free_length_period, allowed_values)
            )

        self._fee_free_length_period = fee_free_length_period

    @property
    def identification(self):
        """Gets the identification of this BCAInner.

        The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.

        :return: The identification of this BCAInner.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this BCAInner.

        The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.

        :param identification: The identification of this BCAInner.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")
        if identification is not None and len(identification) > 35:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `35`")
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")

        self._identification = identification

    @property
    def name(self):
        """Gets the name of this BCAInner.

        The name of the BCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.

        :return: The name of this BCAInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BCAInner.

        The name of the BCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.

        :param name: The name of this BCAInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 350:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `350`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this BCAInner.

        Optional additional notes to supplement the product details

        :return: The notes of this BCAInner.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this BCAInner.

        Optional additional notes to supplement the product details

        :param notes: The notes of this BCAInner.
        :type notes: List[str]
        """

        self._notes = notes

    @property
    def on_sale_indicator(self):
        """Gets the on_sale_indicator of this BCAInner.

        Indicates that the published product is OnSale(value 1) or Back Book (value 0) 

        :return: The on_sale_indicator of this BCAInner.
        :rtype: bool
        """
        return self._on_sale_indicator

    @on_sale_indicator.setter
    def on_sale_indicator(self, on_sale_indicator):
        """Sets the on_sale_indicator of this BCAInner.

        Indicates that the published product is OnSale(value 1) or Back Book (value 0) 

        :param on_sale_indicator: The on_sale_indicator of this BCAInner.
        :type on_sale_indicator: bool
        """

        self._on_sale_indicator = on_sale_indicator

    @property
    def segment(self):
        """Gets the segment of this BCAInner.

        Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on.

        :return: The segment of this BCAInner.
        :rtype: List[str]
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this BCAInner.

        Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on.

        :param segment: The segment of this BCAInner.
        :type segment: List[str]
        """
        allowed_values = ["ClientAccount", "Standard", "NonCommercialChaitiesClbSoc", "NonCommercialPublicAuthGovt", "Religious", "SectorSpecific", "Startup", "Switcher", "NonCommercial"]  # noqa: E501
        if not set(segment).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `segment` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(segment) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._segment = segment
