# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ccc_marketing_state_inner import CCCMarketingStateInner
from openapi_server import util


class CCCInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ccc_marketing_state: List[CCCMarketingStateInner]=None, identification: str=None, name: str=None, segment: List[str]=None):
        """CCCInner - a model defined in OpenAPI

        :param ccc_marketing_state: The ccc_marketing_state of this CCCInner.
        :param identification: The identification of this CCCInner.
        :param name: The name of this CCCInner.
        :param segment: The segment of this CCCInner.
        """
        self.openapi_types = {
            'ccc_marketing_state': List[CCCMarketingStateInner],
            'identification': str,
            'name': str,
            'segment': List[str]
        }

        self.attribute_map = {
            'ccc_marketing_state': 'CCCMarketingState',
            'identification': 'Identification',
            'name': 'Name',
            'segment': 'Segment'
        }

        self._ccc_marketing_state = ccc_marketing_state
        self._identification = identification
        self._name = name
        self._segment = segment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CCCInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CCC_inner of this CCCInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ccc_marketing_state(self):
        """Gets the ccc_marketing_state of this CCCInner.

        The marketing state (promotional or regular) of the CCC Product.

        :return: The ccc_marketing_state of this CCCInner.
        :rtype: List[CCCMarketingStateInner]
        """
        return self._ccc_marketing_state

    @ccc_marketing_state.setter
    def ccc_marketing_state(self, ccc_marketing_state):
        """Sets the ccc_marketing_state of this CCCInner.

        The marketing state (promotional or regular) of the CCC Product.

        :param ccc_marketing_state: The ccc_marketing_state of this CCCInner.
        :type ccc_marketing_state: List[CCCMarketingStateInner]
        """
        if ccc_marketing_state is None:
            raise ValueError("Invalid value for `ccc_marketing_state`, must not be `None`")
        if ccc_marketing_state is not None and len(ccc_marketing_state) < 1:
            raise ValueError("Invalid value for `ccc_marketing_state`, number of items must be greater than or equal to `1`")

        self._ccc_marketing_state = ccc_marketing_state

    @property
    def identification(self):
        """Gets the identification of this CCCInner.

        The unique ID that has been internally assigned by the financial institution to each of the Commercial Credit Card products they market to their retail and/or small to medium enterprise (SME) customers.

        :return: The identification of this CCCInner.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this CCCInner.

        The unique ID that has been internally assigned by the financial institution to each of the Commercial Credit Card products they market to their retail and/or small to medium enterprise (SME) customers.

        :param identification: The identification of this CCCInner.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")
        if identification is not None and len(identification) > 35:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `35`")
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")

        self._identification = identification

    @property
    def name(self):
        """Gets the name of this CCCInner.

        The name of the CCC product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.

        :return: The name of this CCCInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CCCInner.

        The name of the CCC product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.

        :param name: The name of this CCCInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 350:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `350`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def segment(self):
        """Gets the segment of this CCCInner.

        Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to CCC products, they are segmented in relation to different markets that they wish to focus on.

        :return: The segment of this CCCInner.
        :rtype: List[str]
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this CCCInner.

        Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to CCC products, they are segmented in relation to different markets that they wish to focus on.

        :param segment: The segment of this CCCInner.
        :type segment: List[str]
        """
        allowed_values = ["General"]  # noqa: E501
        if not set(segment).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `segment` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(segment) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._segment = segment
