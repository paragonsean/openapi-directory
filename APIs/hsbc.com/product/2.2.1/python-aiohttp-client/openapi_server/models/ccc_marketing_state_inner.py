# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CCCMarketingStateInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, core_product: object=None, eligibility: object=None, features_and_benefits: object=None, first_marketed_date: date=None, identification: str=None, last_marketed_date: date=None, marketing_state: str=None, notes: List[str]=None, other_fees_charges: object=None, predecessor_id: str=None, repayment: object=None, state_tenure_length: float=None, state_tenure_period: str=None):
        """CCCMarketingStateInner - a model defined in OpenAPI

        :param core_product: The core_product of this CCCMarketingStateInner.
        :param eligibility: The eligibility of this CCCMarketingStateInner.
        :param features_and_benefits: The features_and_benefits of this CCCMarketingStateInner.
        :param first_marketed_date: The first_marketed_date of this CCCMarketingStateInner.
        :param identification: The identification of this CCCMarketingStateInner.
        :param last_marketed_date: The last_marketed_date of this CCCMarketingStateInner.
        :param marketing_state: The marketing_state of this CCCMarketingStateInner.
        :param notes: The notes of this CCCMarketingStateInner.
        :param other_fees_charges: The other_fees_charges of this CCCMarketingStateInner.
        :param predecessor_id: The predecessor_id of this CCCMarketingStateInner.
        :param repayment: The repayment of this CCCMarketingStateInner.
        :param state_tenure_length: The state_tenure_length of this CCCMarketingStateInner.
        :param state_tenure_period: The state_tenure_period of this CCCMarketingStateInner.
        """
        self.openapi_types = {
            'core_product': object,
            'eligibility': object,
            'features_and_benefits': object,
            'first_marketed_date': date,
            'identification': str,
            'last_marketed_date': date,
            'marketing_state': str,
            'notes': List[str],
            'other_fees_charges': object,
            'predecessor_id': str,
            'repayment': object,
            'state_tenure_length': float,
            'state_tenure_period': str
        }

        self.attribute_map = {
            'core_product': 'CoreProduct',
            'eligibility': 'Eligibility',
            'features_and_benefits': 'FeaturesAndBenefits',
            'first_marketed_date': 'FirstMarketedDate',
            'identification': 'Identification',
            'last_marketed_date': 'LastMarketedDate',
            'marketing_state': 'MarketingState',
            'notes': 'Notes',
            'other_fees_charges': 'OtherFeesCharges',
            'predecessor_id': 'PredecessorID',
            'repayment': 'Repayment',
            'state_tenure_length': 'StateTenureLength',
            'state_tenure_period': 'StateTenurePeriod'
        }

        self._core_product = core_product
        self._eligibility = eligibility
        self._features_and_benefits = features_and_benefits
        self._first_marketed_date = first_marketed_date
        self._identification = identification
        self._last_marketed_date = last_marketed_date
        self._marketing_state = marketing_state
        self._notes = notes
        self._other_fees_charges = other_fees_charges
        self._predecessor_id = predecessor_id
        self._repayment = repayment
        self._state_tenure_length = state_tenure_length
        self._state_tenure_period = state_tenure_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CCCMarketingStateInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CCCMarketingState_inner of this CCCMarketingStateInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def core_product(self):
        """Gets the core_product of this CCCMarketingStateInner.

        CCC core product details.

        :return: The core_product of this CCCMarketingStateInner.
        :rtype: object
        """
        return self._core_product

    @core_product.setter
    def core_product(self, core_product):
        """Sets the core_product of this CCCMarketingStateInner.

        CCC core product details.

        :param core_product: The core_product of this CCCMarketingStateInner.
        :type core_product: object
        """
        if core_product is None:
            raise ValueError("Invalid value for `core_product`, must not be `None`")

        self._core_product = core_product

    @property
    def eligibility(self):
        """Gets the eligibility of this CCCMarketingStateInner.

        Eligibility details for this product i.e. the criteria that an accountholder has to meet in order to be eligible for the CCC product.

        :return: The eligibility of this CCCMarketingStateInner.
        :rtype: object
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this CCCMarketingStateInner.

        Eligibility details for this product i.e. the criteria that an accountholder has to meet in order to be eligible for the CCC product.

        :param eligibility: The eligibility of this CCCMarketingStateInner.
        :type eligibility: object
        """
        if eligibility is None:
            raise ValueError("Invalid value for `eligibility`, must not be `None`")

        self._eligibility = eligibility

    @property
    def features_and_benefits(self):
        """Gets the features_and_benefits of this CCCMarketingStateInner.

        Feature And Benefits Details

        :return: The features_and_benefits of this CCCMarketingStateInner.
        :rtype: object
        """
        return self._features_and_benefits

    @features_and_benefits.setter
    def features_and_benefits(self, features_and_benefits):
        """Sets the features_and_benefits of this CCCMarketingStateInner.

        Feature And Benefits Details

        :param features_and_benefits: The features_and_benefits of this CCCMarketingStateInner.
        :type features_and_benefits: object
        """
        if features_and_benefits is None:
            raise ValueError("Invalid value for `features_and_benefits`, must not be `None`")

        self._features_and_benefits = features_and_benefits

    @property
    def first_marketed_date(self):
        """Gets the first_marketed_date of this CCCMarketingStateInner.

        Marketing state start date

        :return: The first_marketed_date of this CCCMarketingStateInner.
        :rtype: date
        """
        return self._first_marketed_date

    @first_marketed_date.setter
    def first_marketed_date(self, first_marketed_date):
        """Sets the first_marketed_date of this CCCMarketingStateInner.

        Marketing state start date

        :param first_marketed_date: The first_marketed_date of this CCCMarketingStateInner.
        :type first_marketed_date: date
        """

        self._first_marketed_date = first_marketed_date

    @property
    def identification(self):
        """Gets the identification of this CCCMarketingStateInner.

        Unique and unambiguous identification of a  CCC Product Marketing State.

        :return: The identification of this CCCMarketingStateInner.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this CCCMarketingStateInner.

        Unique and unambiguous identification of a  CCC Product Marketing State.

        :param identification: The identification of this CCCMarketingStateInner.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")
        if identification is not None and len(identification) > 35:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `35`")
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")

        self._identification = identification

    @property
    def last_marketed_date(self):
        """Gets the last_marketed_date of this CCCMarketingStateInner.

        Marketing state end date

        :return: The last_marketed_date of this CCCMarketingStateInner.
        :rtype: date
        """
        return self._last_marketed_date

    @last_marketed_date.setter
    def last_marketed_date(self, last_marketed_date):
        """Sets the last_marketed_date of this CCCMarketingStateInner.

        Marketing state end date

        :param last_marketed_date: The last_marketed_date of this CCCMarketingStateInner.
        :type last_marketed_date: date
        """

        self._last_marketed_date = last_marketed_date

    @property
    def marketing_state(self):
        """Gets the marketing_state of this CCCMarketingStateInner.

        Describes the marketing state (regular or promotional) of the CCC Product

        :return: The marketing_state of this CCCMarketingStateInner.
        :rtype: str
        """
        return self._marketing_state

    @marketing_state.setter
    def marketing_state(self, marketing_state):
        """Sets the marketing_state of this CCCMarketingStateInner.

        Describes the marketing state (regular or promotional) of the CCC Product

        :param marketing_state: The marketing_state of this CCCMarketingStateInner.
        :type marketing_state: str
        """
        allowed_values = ["Promotional", "Regular"]  # noqa: E501
        if marketing_state not in allowed_values:
            raise ValueError(
                "Invalid value for `marketing_state` ({0}), must be one of {1}"
                .format(marketing_state, allowed_values)
            )

        self._marketing_state = marketing_state

    @property
    def notes(self):
        """Gets the notes of this CCCMarketingStateInner.

        Free text for adding details for marketing state

        :return: The notes of this CCCMarketingStateInner.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CCCMarketingStateInner.

        Free text for adding details for marketing state

        :param notes: The notes of this CCCMarketingStateInner.
        :type notes: List[str]
        """

        self._notes = notes

    @property
    def other_fees_charges(self):
        """Gets the other_fees_charges of this CCCMarketingStateInner.

        Contains details of fees and charges which are not associated with either NonRepayment or features/benefits

        :return: The other_fees_charges of this CCCMarketingStateInner.
        :rtype: object
        """
        return self._other_fees_charges

    @other_fees_charges.setter
    def other_fees_charges(self, other_fees_charges):
        """Sets the other_fees_charges of this CCCMarketingStateInner.

        Contains details of fees and charges which are not associated with either NonRepayment or features/benefits

        :param other_fees_charges: The other_fees_charges of this CCCMarketingStateInner.
        :type other_fees_charges: object
        """
        if other_fees_charges is None:
            raise ValueError("Invalid value for `other_fees_charges`, must not be `None`")

        self._other_fees_charges = other_fees_charges

    @property
    def predecessor_id(self):
        """Gets the predecessor_id of this CCCMarketingStateInner.

        Identifies the marketing state that precedes this marketing state

        :return: The predecessor_id of this CCCMarketingStateInner.
        :rtype: str
        """
        return self._predecessor_id

    @predecessor_id.setter
    def predecessor_id(self, predecessor_id):
        """Sets the predecessor_id of this CCCMarketingStateInner.

        Identifies the marketing state that precedes this marketing state

        :param predecessor_id: The predecessor_id of this CCCMarketingStateInner.
        :type predecessor_id: str
        """
        if predecessor_id is not None and len(predecessor_id) > 35:
            raise ValueError("Invalid value for `predecessor_id`, length must be less than or equal to `35`")
        if predecessor_id is not None and len(predecessor_id) < 1:
            raise ValueError("Invalid value for `predecessor_id`, length must be greater than or equal to `1`")

        self._predecessor_id = predecessor_id

    @property
    def repayment(self):
        """Gets the repayment of this CCCMarketingStateInner.

        Repayment details of the CCC product

        :return: The repayment of this CCCMarketingStateInner.
        :rtype: object
        """
        return self._repayment

    @repayment.setter
    def repayment(self, repayment):
        """Sets the repayment of this CCCMarketingStateInner.

        Repayment details of the CCC product

        :param repayment: The repayment of this CCCMarketingStateInner.
        :type repayment: object
        """

        self._repayment = repayment

    @property
    def state_tenure_length(self):
        """Gets the state_tenure_length of this CCCMarketingStateInner.

        The length/duration of a promotional state

        :return: The state_tenure_length of this CCCMarketingStateInner.
        :rtype: float
        """
        return self._state_tenure_length

    @state_tenure_length.setter
    def state_tenure_length(self, state_tenure_length):
        """Sets the state_tenure_length of this CCCMarketingStateInner.

        The length/duration of a promotional state

        :param state_tenure_length: The state_tenure_length of this CCCMarketingStateInner.
        :type state_tenure_length: float
        """

        self._state_tenure_length = state_tenure_length

    @property
    def state_tenure_period(self):
        """Gets the state_tenure_period of this CCCMarketingStateInner.

        The unit of period (days, weeks, months etc.) of the promotional length

        :return: The state_tenure_period of this CCCMarketingStateInner.
        :rtype: str
        """
        return self._state_tenure_period

    @state_tenure_period.setter
    def state_tenure_period(self, state_tenure_period):
        """Sets the state_tenure_period of this CCCMarketingStateInner.

        The unit of period (days, weeks, months etc.) of the promotional length

        :param state_tenure_period: The state_tenure_period of this CCCMarketingStateInner.
        :type state_tenure_period: str
        """
        allowed_values = ["Day", "Half Year", "Month", "Quarter", "Week", "Year"]  # noqa: E501
        if state_tenure_period not in allowed_values:
            raise ValueError(
                "Invalid value for `state_tenure_period` ({0}), must be one of {1}"
                .format(state_tenure_period, allowed_values)
            )

        self._state_tenure_period = state_tenure_period
