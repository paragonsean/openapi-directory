# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.other_fee_type_inner import OtherFeeTypeInner
import re
from openapi_server import util


class FeeChargeCapInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capping_period: str=None, fee_cap_amount: str=None, fee_cap_occurrence: float=None, fee_type: List[str]=None, min_max_type: str=None, notes: List[str]=None, other_fee_type: List[OtherFeeTypeInner]=None):
        """FeeChargeCapInner - a model defined in OpenAPI

        :param capping_period: The capping_period of this FeeChargeCapInner.
        :param fee_cap_amount: The fee_cap_amount of this FeeChargeCapInner.
        :param fee_cap_occurrence: The fee_cap_occurrence of this FeeChargeCapInner.
        :param fee_type: The fee_type of this FeeChargeCapInner.
        :param min_max_type: The min_max_type of this FeeChargeCapInner.
        :param notes: The notes of this FeeChargeCapInner.
        :param other_fee_type: The other_fee_type of this FeeChargeCapInner.
        """
        self.openapi_types = {
            'capping_period': str,
            'fee_cap_amount': str,
            'fee_cap_occurrence': float,
            'fee_type': List[str],
            'min_max_type': str,
            'notes': List[str],
            'other_fee_type': List[OtherFeeTypeInner]
        }

        self.attribute_map = {
            'capping_period': 'CappingPeriod',
            'fee_cap_amount': 'FeeCapAmount',
            'fee_cap_occurrence': 'FeeCapOccurrence',
            'fee_type': 'FeeType',
            'min_max_type': 'MinMaxType',
            'notes': 'Notes',
            'other_fee_type': 'OtherFeeType'
        }

        self._capping_period = capping_period
        self._fee_cap_amount = fee_cap_amount
        self._fee_cap_occurrence = fee_cap_occurrence
        self._fee_type = fee_type
        self._min_max_type = min_max_type
        self._notes = notes
        self._other_fee_type = other_fee_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeeChargeCapInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeeChargeCap_inner of this FeeChargeCapInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capping_period(self):
        """Gets the capping_period of this FeeChargeCapInner.

        Period e.g. day, week, month etc. for which the fee/charge is capped

        :return: The capping_period of this FeeChargeCapInner.
        :rtype: str
        """
        return self._capping_period

    @capping_period.setter
    def capping_period(self, capping_period):
        """Sets the capping_period of this FeeChargeCapInner.

        Period e.g. day, week, month etc. for which the fee/charge is capped

        :param capping_period: The capping_period of this FeeChargeCapInner.
        :type capping_period: str
        """
        allowed_values = ["Day", "Half Year", "Month", "Quarter", "Week", "AcademicTerm", "Year"]  # noqa: E501
        if capping_period not in allowed_values:
            raise ValueError(
                "Invalid value for `capping_period` ({0}), must be one of {1}"
                .format(capping_period, allowed_values)
            )

        self._capping_period = capping_period

    @property
    def fee_cap_amount(self):
        """Gets the fee_cap_amount of this FeeChargeCapInner.

        Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)

        :return: The fee_cap_amount of this FeeChargeCapInner.
        :rtype: str
        """
        return self._fee_cap_amount

    @fee_cap_amount.setter
    def fee_cap_amount(self, fee_cap_amount):
        """Sets the fee_cap_amount of this FeeChargeCapInner.

        Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)

        :param fee_cap_amount: The fee_cap_amount of this FeeChargeCapInner.
        :type fee_cap_amount: str
        """
        if fee_cap_amount is not None and not re.search(r'^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$', fee_cap_amount):
            raise ValueError("Invalid value for `fee_cap_amount`, must be a follow pattern or equal to `/^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$/`")

        self._fee_cap_amount = fee_cap_amount

    @property
    def fee_cap_occurrence(self):
        """Gets the fee_cap_occurrence of this FeeChargeCapInner.

        fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount

        :return: The fee_cap_occurrence of this FeeChargeCapInner.
        :rtype: float
        """
        return self._fee_cap_occurrence

    @fee_cap_occurrence.setter
    def fee_cap_occurrence(self, fee_cap_occurrence):
        """Sets the fee_cap_occurrence of this FeeChargeCapInner.

        fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount

        :param fee_cap_occurrence: The fee_cap_occurrence of this FeeChargeCapInner.
        :type fee_cap_occurrence: float
        """

        self._fee_cap_occurrence = fee_cap_occurrence

    @property
    def fee_type(self):
        """Gets the fee_type of this FeeChargeCapInner.

        Fee/charge type which is being capped

        :return: The fee_type of this FeeChargeCapInner.
        :rtype: List[str]
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this FeeChargeCapInner.

        Fee/charge type which is being capped

        :param fee_type: The fee_type of this FeeChargeCapInner.
        :type fee_type: List[str]
        """
        allowed_values = ["ATMDeposATMPaidIn", "ReportCertBalance", "ATMAbroadConVisaDebit", "ATMCardnetEnvIn", "ATMCashGroupATMDebitCard", "ATMCashNonGroupATMDebitcard", "ATMConGroupATM", "ATMAbroad", "ATMForeignCashDebCard", "ATMAbroadGoldVisaDebit", "ATMNonSterlingWithdrawal", "ATMAbroadVisaDebit", "ATMWithdrawCash", "BACSOnLineAncilliary", "BACSBatch", "BACSOnLineFile", "BACSItem", "BACSBulkBatch", "BACSOnLineOverlimit", "BACSOnLinePayment", "BACSOnLineService", "BACSBulkInternet", "BACSTELDirDebSmartCard", "BACSTELDirDebWebInit", "BACSTELirDebWebInit", "BACSTELDirDebOverlimit", "BACSTELDirDebPayment", "BACSTELDirDebService", "BACSTELDirDebAncilliary", "BACSTELAncilliary", "BACSTELSmartCard", "BACSTELFile", "BACSTELOverlimit", "BACSTELPayment", "BACSTELService", "CHAPSOutBranch", "CHAPSOutOnlineDepositAcc", "CHAPSIn", "CHAPSOutPost", "CHAPSOut", "CHAPSOutOnline", "CHAPSOutManual", "CardCardReplacement", "DraftsBankers", "DraftsCancellation", "CardGuaranteed", "DraftsIntlPayableAbroad", "DraftsIntlStoppedCancelled", "EuroChqXLess", "EuroChqXPlus", "FPSOut", "FPSOutOwn", "FPSInBranch", "LegalArticlesReport", "LegalSealing", "LegalBondAndGuarantee", "LegalCoSearch", "LegalDepositAssignment", "LegalGuaranteePrep", "LegalLifePolicyPrepCo", "LegalLifePolicyPrepPersonal", "LegalPriorityPariPassu", "LegalSubordinationAgreement", "DirDebDirectDebitAdmin", "DirDebDirectDebitCancel", "IntlPayBIBForeignLimit", "IntlPayCreditTransCust", "IntlPayCreditTransNonCust", "IntlPayExpressMoneyMover", "IntlPayEEAPayUrgent", "IntlPayIrishPayUrgent", "IntlPayEEAPay", "IntlPayFXPaymentIn", "IntlPayForeignIn1CPlus", "IntlPayForeignCharge", "IntlPayForeignInternet", "IntlPayForeignInSub1C", "IntlPayPurchaseNonSterling", "IntlPayPaymentTracing", "IntlPayStandardMoneyMover", "IntlPayMT101Transaction", "IntlPayWorldpayPayment", "InvPayBankDetailsWrong", "InvPayForeignBCNR", "InvPayForeignRecall", "InvGeneralInq", "InvOldInstruction", "InvPayReturnDebitXVLess", "InvPayReturnDebitXVPlus", "InvPayStopPayment", "InvPayStandingOrdUnpaid", "SafeKeepAccess", "SafeKeepDeedMedium", "SafeKeepingEnvelope", "SafeKeepingInspection", "SafeKeepingLargeItem", "SafeKeepMultipleItems", "SafeKeepingParcel", "SafeKeepDeedSmall", "SafeKeepOneItem", "LoanArrangement", "NightSafeNightSafeBankOpen", "NightSafeCreditSub5K", "NightSafeNightSafe", "NightSafeNightSafePaidIn", "POPostOfficeCounterCredit", "POPostOfficeCashCredit", "POPostOfficeCashOut", "POPostOfficeWithdrawal", "ChqBookTheftLossAllStopped", "ChqIssuedCurrencyAcc", "ChqCopy", "ChqDraft", "ChqIn", "ChqSpecialChqClearance", "ChqOutIssued", "ChqSpecialChqPresentation", "ChqCounterCheque", "ChqChequeswithStatement", "ChqStopped", "ChqTrans", "ChqDraftFX", "ChqForeignCourier", "ChqForeignNegTenThou", "ChqForeignNegHundred", "ChequeForeignBankDivi", "ChqForeignNegFiftyThou", "ChqPensionCheque", "ChequeForeignOtherDivi", "ChqForeignNegFiveThou", "ChqForeignNegMax", "ChqForeignGBPMMDPlus", "ChqGiftCheque", "ChqCounterLodgement", "ChqCashDropLodgement", "ChqForeign", "ChqChequePhotocopy", "ChqPostOfficeCredit", "ChqPostOfficeChequeCollected", "ChqChequeRetrieval", "ChqReconcilliationPerTrans", "ChqSpecialPresentationCount", "ChqSpecialPresentationPTT", "ChqDraftSterling", "ChqUnpaidCharge", "ChqUnpaidTransIn", "ChqUnpaidTransOut", "ChqUnpaidCheque", "ReportAuditLetter", "ReportFAXAdviceAdditional", "ReportTelAdviceAdditional", "ReportCreditHistory", "ReportCertInterestDuplicate", "ReportCertInterest", "ReportCreditHistoryAdditionalInYear", "ReportForeignStatusEnqElec", "ReportForeignStatusEnq", "ReportStatementChqDaily", "ReportStatementChqFortnightly", "ReportStatementChqMonthly", "ReportStatementChqWeekly", "ReportStatementAndDiviChq", "ReportReferralItem", "ReportStatementByATM", "ReportStatementByBranch", "ReportStatementCopyRegular", "ReportStatementDaily", "ReportStatusEnquiry", "ReportStatementFrequent", "ReportStatementMonthly", "ReportStatementCopy1", "ReportStatementToBranch", "ReportSMSTextMiniStatementorAlert", "ReportStatementFortnightly", "ReportSMSTextMiniStatementWoM", "ReportSMSTextAlertBalance", "ReportSMSTextAlert", "ReportTaxCert", "ReportWeeklyStatement", "SEPABranch", "SEPACredit", "SEPADirectDebit", "SEPAIn", "SEPAEuro", "SEPAOut", "SEPAUnpaid", "SEPAWinbitsTransaction", "TransBillPaymentBranch", "TransBillCollect", "TransTelephoneBillPayment", "TransBankPayment", "TransBillPaymentTelephone", "TransCorrespondentBankFee", "TransCreditTransferUKDifferent", "TransCreditTransferUKSame", "TransCredit", "TransCreditTransfer", "TransBranchCredit", "TransDebit", "TransDebCardDeb", "TransUKDirDeb", "TransManualDeb", "TitleDeeds", "TransBuyForeignWithGBP", "TransGoodValueReq", "TransSWIFTOutUKForeign", "TransInconpleteInstruction", "TransManualEntries", "TransManualTrans", "TransNonSterling", "Other", "TransPOSSaleForeign", "TransPriPaymentPost", "TransPOSSaleUK", "TransReconciliationPerTrans", "TransStandingOrdAdmin", "TransStandingOrd", "TransStandingOrdManPay", "TransTelBusiPriPaymentForeignToUKAcc", "TransTeleItem", "TransTelBusiPriPaymentToGrpAcc", "TransTransferExGroup", "TransTelBusiPriPaymentToNonGrpAcc", "TransSWIFTOutNonEEASterling", "AutoAutoCredit", "AutoAutomatedEntries", "AutoAutoCreditPhoneInet", "AutoAutomatedTrans", "AutoDebitCardCommercial", "AutoFPSAutoCredit", "VisaTravellersChqorCurrency", "OnlineInternetBillPayment", "OnlineBusinessOnlineEuroPayment", "OnlineBusinessOnlineUrgentEuroPayment", "OnlineBusinessOnlineForeignPayment", "OnlineInterbankTransfer", "OnlineInterbankPerTransfer", "OnlineInterbranchTransfer", "OnlineInterbranchPerTransfer", "OnlineSubscriptionMonthly", "OnlineBankingPayment", "OnlineReplacementCardReader", "OnlinePaymentinGBPtoUK", "OnlineUrgentPayment", "OnlinePaymentinUSDtoUS", "OnlineBulkDirectDebSterling", "ForeignChqSent", "ForeignChqSelf", "ForeignChqEncashment", "ForeignFXInwardsCust", "ForeignFXTransfersROI", "ForeignFXForwardTrans", "ForeignExMaintenance", "ForeignFXInwardsNonCust", "ForeignFXOutwards", "ForeignPurchase", "ForeignStatusRep", "ForeignChqDraft", "ForeignChqCLess", "ForeignChqMLess", "ForeignChqOther", "ForeignChqMPlus", "ForeignChqCCC", "ServiceCAccountFee", "ServiceCAccountFeeMonthly", "ServiceCAccountFeeQuarterly", "ServiceCFixedTariff", "ServiceCBusiDepAccBreakage", "ServiceCMonitorDaily", "ServiceCMinimumMonthlyFee", "ServiceCMonitorMonthly", "ServiceCMonitorWeekly", "ServiceCMT940AccountFirst", "ServiceCMT940AccountSubsequent", "ServiceCOther", "CounterCoinHandling", "CounterCashIn", "CounterCashInNotUs", "CounterCashOut", "CounterCashX", "CounterForeignNoteHandling", "CounterCashFeeRate", "CounterForeignCashOutTx", "CounterCounterLodgement", "CounterCashDropLodgement", "CounterNotesLodged", "CounterNotesOut", "CounterCashInOwn", "CounterCashFeePercent"]  # noqa: E501
        if not set(fee_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `fee_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(fee_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._fee_type = fee_type

    @property
    def min_max_type(self):
        """Gets the min_max_type of this FeeChargeCapInner.

        Min Max type

        :return: The min_max_type of this FeeChargeCapInner.
        :rtype: str
        """
        return self._min_max_type

    @min_max_type.setter
    def min_max_type(self, min_max_type):
        """Sets the min_max_type of this FeeChargeCapInner.

        Min Max type

        :param min_max_type: The min_max_type of this FeeChargeCapInner.
        :type min_max_type: str
        """
        allowed_values = ["Minimum", "Maximum"]  # noqa: E501
        if min_max_type not in allowed_values:
            raise ValueError(
                "Invalid value for `min_max_type` ({0}), must be one of {1}"
                .format(min_max_type, allowed_values)
            )

        self._min_max_type = min_max_type

    @property
    def notes(self):
        """Gets the notes of this FeeChargeCapInner.

        Free text for adding  extra details for fee charge cap

        :return: The notes of this FeeChargeCapInner.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FeeChargeCapInner.

        Free text for adding  extra details for fee charge cap

        :param notes: The notes of this FeeChargeCapInner.
        :type notes: List[str]
        """

        self._notes = notes

    @property
    def other_fee_type(self):
        """Gets the other_fee_type of this FeeChargeCapInner.

        Other fee type code which is not available in the standard code set

        :return: The other_fee_type of this FeeChargeCapInner.
        :rtype: List[OtherFeeTypeInner]
        """
        return self._other_fee_type

    @other_fee_type.setter
    def other_fee_type(self, other_fee_type):
        """Sets the other_fee_type of this FeeChargeCapInner.

        Other fee type code which is not available in the standard code set

        :param other_fee_type: The other_fee_type of this FeeChargeCapInner.
        :type other_fee_type: List[OtherFeeTypeInner]
        """

        self._other_fee_type = other_fee_type
