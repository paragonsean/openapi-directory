/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RepaymentHolidayInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Repayment details of the Loan product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepaymentInner {
  /**
   * The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
   */
  @JsonAdapter(AmountTypeEnum.Adapter.class)
  public enum AmountTypeEnum {
    BALANCE_TO_DATE("BalanceToDate"),
    
    BALLOON("Balloon"),
    
    CAPITAL_AND_INTEREST("CapitalAndInterest"),
    
    FEE_CHARGE_CAP("FeeChargeCap"),
    
    INTEREST_ONLY("InterestOnly"),
    
    BULLET("Bullet"),
    
    OTHER("Other");

    private String value;

    AmountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AmountTypeEnum fromValue(String value) {
      for (AmountTypeEnum b : AmountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AmountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AmountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AmountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AMOUNT_TYPE = "AmountType";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TYPE)
  private AmountTypeEnum amountType;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_AMOUNT_TYPE = "OtherAmountType";
  @SerializedName(SERIALIZED_NAME_OTHER_AMOUNT_TYPE)
  private Object otherAmountType;

  public static final String SERIALIZED_NAME_OTHER_REPAYMENT_FREQUENCY = "OtherRepaymentFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_REPAYMENT_FREQUENCY)
  private Object otherRepaymentFrequency;

  public static final String SERIALIZED_NAME_OTHER_REPAYMENT_TYPE = "OtherRepaymentType";
  @SerializedName(SERIALIZED_NAME_OTHER_REPAYMENT_TYPE)
  private Object otherRepaymentType;

  public static final String SERIALIZED_NAME_REPAYMENT_FEE_CHARGES = "RepaymentFeeCharges";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_FEE_CHARGES)
  private Object repaymentFeeCharges;

  /**
   * Repayment frequency
   */
  @JsonAdapter(RepaymentFrequencyEnum.Adapter.class)
  public enum RepaymentFrequencyEnum {
    DAILY("Daily"),
    
    FLEXIBLE("Flexible"),
    
    FORTNIGHTLY("Fortnightly"),
    
    HALF_YEARLY("HalfYearly"),
    
    MONTHLY("Monthly"),
    
    OTHER("Other"),
    
    QUARTERLY("Quarterly"),
    
    WEEKLY("Weekly"),
    
    YEARLY("Yearly");

    private String value;

    RepaymentFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepaymentFrequencyEnum fromValue(String value) {
      for (RepaymentFrequencyEnum b : RepaymentFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepaymentFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepaymentFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepaymentFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepaymentFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepaymentFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPAYMENT_FREQUENCY = "RepaymentFrequency";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_FREQUENCY)
  private RepaymentFrequencyEnum repaymentFrequency;

  public static final String SERIALIZED_NAME_REPAYMENT_HOLIDAY = "RepaymentHoliday";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_HOLIDAY)
  private List<RepaymentHolidayInner> repaymentHoliday = new ArrayList<>();

  /**
   * Repayment type
   */
  @JsonAdapter(RepaymentTypeEnum.Adapter.class)
  public enum RepaymentTypeEnum {
    BALLOON("Balloon"),
    
    BULLET("Bullet"),
    
    CAPITAL_AND_INTEREST("CapitalAndInterest"),
    
    CUSTOM_SCHEDULE("CustomSchedule"),
    
    EARLY_REPAYMENT("EarlyRepayment"),
    
    FIXED_CAPITAL_FULLY_AMORTISING("FixedCapitalFullyAmortising"),
    
    FIXED_CAPITAL_WITH_BULLET("FixedCapitalWithBullet"),
    
    FIXED_CAPITAL_AND_INTEREST_REDUCING_BALANCE("FixedCapitalAndInterestReducingBalance"),
    
    INTEREST_ONLY("InterestOnly"),
    
    PREPAYMENT_FEE("PrepaymentFee"),
    
    REPAYMENT_WITH_BULLET("RepaymentWithBullet"),
    
    STRAIGHT_LINE_INTEREST_ONLY("StraightLineInterestOnly");

    private String value;

    RepaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepaymentTypeEnum fromValue(String value) {
      for (RepaymentTypeEnum b : RepaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPAYMENT_TYPE = "RepaymentType";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_TYPE)
  private RepaymentTypeEnum repaymentType;

  public RepaymentInner() {
  }

  public RepaymentInner amountType(AmountTypeEnum amountType) {
    this.amountType = amountType;
    return this;
  }

  /**
   * The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
   * @return amountType
   */
  @javax.annotation.Nullable
  public AmountTypeEnum getAmountType() {
    return amountType;
  }

  public void setAmountType(AmountTypeEnum amountType) {
    this.amountType = amountType;
  }


  public RepaymentInner notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public RepaymentInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Optional additional notes to supplement the Repayment
   * @return notes
   */
  @javax.annotation.Nullable
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public RepaymentInner otherAmountType(Object otherAmountType) {
    this.otherAmountType = otherAmountType;
    return this;
  }

  /**
   * Other amount type which is not in the standard code list
   * @return otherAmountType
   */
  @javax.annotation.Nullable
  public Object getOtherAmountType() {
    return otherAmountType;
  }

  public void setOtherAmountType(Object otherAmountType) {
    this.otherAmountType = otherAmountType;
  }


  public RepaymentInner otherRepaymentFrequency(Object otherRepaymentFrequency) {
    this.otherRepaymentFrequency = otherRepaymentFrequency;
    return this;
  }

  /**
   * Other repayment frequency which is not in the standard code list
   * @return otherRepaymentFrequency
   */
  @javax.annotation.Nullable
  public Object getOtherRepaymentFrequency() {
    return otherRepaymentFrequency;
  }

  public void setOtherRepaymentFrequency(Object otherRepaymentFrequency) {
    this.otherRepaymentFrequency = otherRepaymentFrequency;
  }


  public RepaymentInner otherRepaymentType(Object otherRepaymentType) {
    this.otherRepaymentType = otherRepaymentType;
    return this;
  }

  /**
   * Other repayment type which is not in the standard code list
   * @return otherRepaymentType
   */
  @javax.annotation.Nullable
  public Object getOtherRepaymentType() {
    return otherRepaymentType;
  }

  public void setOtherRepaymentType(Object otherRepaymentType) {
    this.otherRepaymentType = otherRepaymentType;
  }


  public RepaymentInner repaymentFeeCharges(Object repaymentFeeCharges) {
    this.repaymentFeeCharges = repaymentFeeCharges;
    return this;
  }

  /**
   * Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.
   * @return repaymentFeeCharges
   */
  @javax.annotation.Nullable
  public Object getRepaymentFeeCharges() {
    return repaymentFeeCharges;
  }

  public void setRepaymentFeeCharges(Object repaymentFeeCharges) {
    this.repaymentFeeCharges = repaymentFeeCharges;
  }


  public RepaymentInner repaymentFrequency(RepaymentFrequencyEnum repaymentFrequency) {
    this.repaymentFrequency = repaymentFrequency;
    return this;
  }

  /**
   * Repayment frequency
   * @return repaymentFrequency
   */
  @javax.annotation.Nullable
  public RepaymentFrequencyEnum getRepaymentFrequency() {
    return repaymentFrequency;
  }

  public void setRepaymentFrequency(RepaymentFrequencyEnum repaymentFrequency) {
    this.repaymentFrequency = repaymentFrequency;
  }


  public RepaymentInner repaymentHoliday(List<RepaymentHolidayInner> repaymentHoliday) {
    this.repaymentHoliday = repaymentHoliday;
    return this;
  }

  public RepaymentInner addRepaymentHolidayItem(RepaymentHolidayInner repaymentHolidayItem) {
    if (this.repaymentHoliday == null) {
      this.repaymentHoliday = new ArrayList<>();
    }
    this.repaymentHoliday.add(repaymentHolidayItem);
    return this;
  }

  /**
   * Details of capital repayment holiday if any
   * @return repaymentHoliday
   */
  @javax.annotation.Nullable
  public List<RepaymentHolidayInner> getRepaymentHoliday() {
    return repaymentHoliday;
  }

  public void setRepaymentHoliday(List<RepaymentHolidayInner> repaymentHoliday) {
    this.repaymentHoliday = repaymentHoliday;
  }


  public RepaymentInner repaymentType(RepaymentTypeEnum repaymentType) {
    this.repaymentType = repaymentType;
    return this;
  }

  /**
   * Repayment type
   * @return repaymentType
   */
  @javax.annotation.Nullable
  public RepaymentTypeEnum getRepaymentType() {
    return repaymentType;
  }

  public void setRepaymentType(RepaymentTypeEnum repaymentType) {
    this.repaymentType = repaymentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepaymentInner repaymentInner = (RepaymentInner) o;
    return Objects.equals(this.amountType, repaymentInner.amountType) &&
        Objects.equals(this.notes, repaymentInner.notes) &&
        Objects.equals(this.otherAmountType, repaymentInner.otherAmountType) &&
        Objects.equals(this.otherRepaymentFrequency, repaymentInner.otherRepaymentFrequency) &&
        Objects.equals(this.otherRepaymentType, repaymentInner.otherRepaymentType) &&
        Objects.equals(this.repaymentFeeCharges, repaymentInner.repaymentFeeCharges) &&
        Objects.equals(this.repaymentFrequency, repaymentInner.repaymentFrequency) &&
        Objects.equals(this.repaymentHoliday, repaymentInner.repaymentHoliday) &&
        Objects.equals(this.repaymentType, repaymentInner.repaymentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountType, notes, otherAmountType, otherRepaymentFrequency, otherRepaymentType, repaymentFeeCharges, repaymentFrequency, repaymentHoliday, repaymentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepaymentInner {\n");
    sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherAmountType: ").append(toIndentedString(otherAmountType)).append("\n");
    sb.append("    otherRepaymentFrequency: ").append(toIndentedString(otherRepaymentFrequency)).append("\n");
    sb.append("    otherRepaymentType: ").append(toIndentedString(otherRepaymentType)).append("\n");
    sb.append("    repaymentFeeCharges: ").append(toIndentedString(repaymentFeeCharges)).append("\n");
    sb.append("    repaymentFrequency: ").append(toIndentedString(repaymentFrequency)).append("\n");
    sb.append("    repaymentHoliday: ").append(toIndentedString(repaymentHoliday)).append("\n");
    sb.append("    repaymentType: ").append(toIndentedString(repaymentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmountType");
    openapiFields.add("Notes");
    openapiFields.add("OtherAmountType");
    openapiFields.add("OtherRepaymentFrequency");
    openapiFields.add("OtherRepaymentType");
    openapiFields.add("RepaymentFeeCharges");
    openapiFields.add("RepaymentFrequency");
    openapiFields.add("RepaymentHoliday");
    openapiFields.add("RepaymentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepaymentInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepaymentInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepaymentInner is not found in the empty JSON string", RepaymentInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepaymentInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepaymentInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AmountType") != null && !jsonObj.get("AmountType").isJsonNull()) && !jsonObj.get("AmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AmountType").toString()));
      }
      // validate the optional field `AmountType`
      if (jsonObj.get("AmountType") != null && !jsonObj.get("AmountType").isJsonNull()) {
        AmountTypeEnum.validateJsonElement(jsonObj.get("AmountType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull() && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if ((jsonObj.get("RepaymentFrequency") != null && !jsonObj.get("RepaymentFrequency").isJsonNull()) && !jsonObj.get("RepaymentFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepaymentFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepaymentFrequency").toString()));
      }
      // validate the optional field `RepaymentFrequency`
      if (jsonObj.get("RepaymentFrequency") != null && !jsonObj.get("RepaymentFrequency").isJsonNull()) {
        RepaymentFrequencyEnum.validateJsonElement(jsonObj.get("RepaymentFrequency"));
      }
      if (jsonObj.get("RepaymentHoliday") != null && !jsonObj.get("RepaymentHoliday").isJsonNull()) {
        JsonArray jsonArrayrepaymentHoliday = jsonObj.getAsJsonArray("RepaymentHoliday");
        if (jsonArrayrepaymentHoliday != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RepaymentHoliday").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RepaymentHoliday` to be an array in the JSON string but got `%s`", jsonObj.get("RepaymentHoliday").toString()));
          }

          // validate the optional field `RepaymentHoliday` (array)
          for (int i = 0; i < jsonArrayrepaymentHoliday.size(); i++) {
            RepaymentHolidayInner.validateJsonElement(jsonArrayrepaymentHoliday.get(i));
          };
        }
      }
      if ((jsonObj.get("RepaymentType") != null && !jsonObj.get("RepaymentType").isJsonNull()) && !jsonObj.get("RepaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepaymentType").toString()));
      }
      // validate the optional field `RepaymentType`
      if (jsonObj.get("RepaymentType") != null && !jsonObj.get("RepaymentType").isJsonNull()) {
        RepaymentTypeEnum.validateJsonElement(jsonObj.get("RepaymentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepaymentInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepaymentInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepaymentInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepaymentInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RepaymentInner>() {
           @Override
           public void write(JsonWriter out, RepaymentInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepaymentInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepaymentInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepaymentInner
   * @throws IOException if the JSON string is invalid with respect to RepaymentInner
   */
  public static RepaymentInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepaymentInner.class);
  }

  /**
   * Convert an instance of RepaymentInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

