/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OtherFeesChargesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The marketing state (promotional or regular) of the BCA Product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BCAMarketingStateInner {
  public static final String SERIALIZED_NAME_CORE_PRODUCT = "CoreProduct";
  @SerializedName(SERIALIZED_NAME_CORE_PRODUCT)
  private Object coreProduct;

  public static final String SERIALIZED_NAME_CREDIT_INTEREST = "CreditInterest";
  @SerializedName(SERIALIZED_NAME_CREDIT_INTEREST)
  private Object creditInterest;

  public static final String SERIALIZED_NAME_ELIGIBILITY = "Eligibility";
  @SerializedName(SERIALIZED_NAME_ELIGIBILITY)
  private Object eligibility;

  public static final String SERIALIZED_NAME_FEATURES_AND_BENEFITS = "FeaturesAndBenefits";
  @SerializedName(SERIALIZED_NAME_FEATURES_AND_BENEFITS)
  private Object featuresAndBenefits;

  public static final String SERIALIZED_NAME_FIRST_MARKETED_DATE = "FirstMarketedDate";
  @SerializedName(SERIALIZED_NAME_FIRST_MARKETED_DATE)
  private LocalDate firstMarketedDate;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_LAST_MARKETED_DATE = "LastMarketedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MARKETED_DATE)
  private LocalDate lastMarketedDate;

  /**
   * Describes the marketing state (regular or promotional) of the BCA Product
   */
  @JsonAdapter(MarketingStateEnum.Adapter.class)
  public enum MarketingStateEnum {
    PROMOTIONAL("Promotional"),
    
    REGULAR("Regular");

    private String value;

    MarketingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketingStateEnum fromValue(String value) {
      for (MarketingStateEnum b : MarketingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarketingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MarketingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MarketingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARKETING_STATE = "MarketingState";
  @SerializedName(SERIALIZED_NAME_MARKETING_STATE)
  private MarketingStateEnum marketingState;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_FEES_CHARGES = "OtherFeesCharges";
  @SerializedName(SERIALIZED_NAME_OTHER_FEES_CHARGES)
  private List<OtherFeesChargesInner> otherFeesCharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERDRAFT = "Overdraft";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT)
  private Object overdraft;

  public static final String SERIALIZED_NAME_PREDECESSOR_I_D = "PredecessorID";
  @SerializedName(SERIALIZED_NAME_PREDECESSOR_I_D)
  private String predecessorID;

  public static final String SERIALIZED_NAME_STATE_TENURE_LENGTH = "StateTenureLength";
  @SerializedName(SERIALIZED_NAME_STATE_TENURE_LENGTH)
  private Float stateTenureLength;

  /**
   * The unit of period (days, weeks, months etc.) of the promotional length
   */
  @JsonAdapter(StateTenurePeriodEnum.Adapter.class)
  public enum StateTenurePeriodEnum {
    DAY("Day"),
    
    HALF_YEAR("Half Year"),
    
    MONTH("Month"),
    
    QUARTER("Quarter"),
    
    WEEK("Week"),
    
    ACADEMIC_TERM("AcademicTerm"),
    
    YEAR("Year");

    private String value;

    StateTenurePeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateTenurePeriodEnum fromValue(String value) {
      for (StateTenurePeriodEnum b : StateTenurePeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateTenurePeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateTenurePeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateTenurePeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateTenurePeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateTenurePeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE_TENURE_PERIOD = "StateTenurePeriod";
  @SerializedName(SERIALIZED_NAME_STATE_TENURE_PERIOD)
  private StateTenurePeriodEnum stateTenurePeriod;

  public BCAMarketingStateInner() {
  }

  public BCAMarketingStateInner coreProduct(Object coreProduct) {
    this.coreProduct = coreProduct;
    return this;
  }

  /**
   * BCA core product details.
   * @return coreProduct
   */
  @javax.annotation.Nullable
  public Object getCoreProduct() {
    return coreProduct;
  }

  public void setCoreProduct(Object coreProduct) {
    this.coreProduct = coreProduct;
  }


  public BCAMarketingStateInner creditInterest(Object creditInterest) {
    this.creditInterest = creditInterest;
    return this;
  }

  /**
   * Details about the interest that may be payable to the BCA account holders
   * @return creditInterest
   */
  @javax.annotation.Nullable
  public Object getCreditInterest() {
    return creditInterest;
  }

  public void setCreditInterest(Object creditInterest) {
    this.creditInterest = creditInterest;
  }


  public BCAMarketingStateInner eligibility(Object eligibility) {
    this.eligibility = eligibility;
    return this;
  }

  /**
   * Eligibility details for this product i.e. the criteria that an accountholder has to meet in order to be eligible for the BCA product.
   * @return eligibility
   */
  @javax.annotation.Nullable
  public Object getEligibility() {
    return eligibility;
  }

  public void setEligibility(Object eligibility) {
    this.eligibility = eligibility;
  }


  public BCAMarketingStateInner featuresAndBenefits(Object featuresAndBenefits) {
    this.featuresAndBenefits = featuresAndBenefits;
    return this;
  }

  /**
   * Feature And Benefits Details
   * @return featuresAndBenefits
   */
  @javax.annotation.Nullable
  public Object getFeaturesAndBenefits() {
    return featuresAndBenefits;
  }

  public void setFeaturesAndBenefits(Object featuresAndBenefits) {
    this.featuresAndBenefits = featuresAndBenefits;
  }


  public BCAMarketingStateInner firstMarketedDate(LocalDate firstMarketedDate) {
    this.firstMarketedDate = firstMarketedDate;
    return this;
  }

  /**
   * Marketing state start date
   * @return firstMarketedDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstMarketedDate() {
    return firstMarketedDate;
  }

  public void setFirstMarketedDate(LocalDate firstMarketedDate) {
    this.firstMarketedDate = firstMarketedDate;
  }


  public BCAMarketingStateInner identification(String identification) {
    this.identification = identification;
    return this;
  }

  /**
   * Unique and unambiguous identification of a  BCA Product Marketing State.
   * @return identification
   */
  @javax.annotation.Nonnull
  public String getIdentification() {
    return identification;
  }

  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public BCAMarketingStateInner lastMarketedDate(LocalDate lastMarketedDate) {
    this.lastMarketedDate = lastMarketedDate;
    return this;
  }

  /**
   * Marketing state end date
   * @return lastMarketedDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastMarketedDate() {
    return lastMarketedDate;
  }

  public void setLastMarketedDate(LocalDate lastMarketedDate) {
    this.lastMarketedDate = lastMarketedDate;
  }


  public BCAMarketingStateInner marketingState(MarketingStateEnum marketingState) {
    this.marketingState = marketingState;
    return this;
  }

  /**
   * Describes the marketing state (regular or promotional) of the BCA Product
   * @return marketingState
   */
  @javax.annotation.Nonnull
  public MarketingStateEnum getMarketingState() {
    return marketingState;
  }

  public void setMarketingState(MarketingStateEnum marketingState) {
    this.marketingState = marketingState;
  }


  public BCAMarketingStateInner notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public BCAMarketingStateInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Free text for adding details for marketing state
   * @return notes
   */
  @javax.annotation.Nullable
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public BCAMarketingStateInner otherFeesCharges(List<OtherFeesChargesInner> otherFeesCharges) {
    this.otherFeesCharges = otherFeesCharges;
    return this;
  }

  public BCAMarketingStateInner addOtherFeesChargesItem(OtherFeesChargesInner otherFeesChargesItem) {
    if (this.otherFeesCharges == null) {
      this.otherFeesCharges = new ArrayList<>();
    }
    this.otherFeesCharges.add(otherFeesChargesItem);
    return this;
  }

  /**
   * Contains details of fees and charges which are not associated with either Overdraft or features/benefits
   * @return otherFeesCharges
   */
  @javax.annotation.Nonnull
  public List<OtherFeesChargesInner> getOtherFeesCharges() {
    return otherFeesCharges;
  }

  public void setOtherFeesCharges(List<OtherFeesChargesInner> otherFeesCharges) {
    this.otherFeesCharges = otherFeesCharges;
  }


  public BCAMarketingStateInner overdraft(Object overdraft) {
    this.overdraft = overdraft;
    return this;
  }

  /**
   * Borrowing details
   * @return overdraft
   */
  @javax.annotation.Nullable
  public Object getOverdraft() {
    return overdraft;
  }

  public void setOverdraft(Object overdraft) {
    this.overdraft = overdraft;
  }


  public BCAMarketingStateInner predecessorID(String predecessorID) {
    this.predecessorID = predecessorID;
    return this;
  }

  /**
   * Identifies the marketing state that precedes this marketing state
   * @return predecessorID
   */
  @javax.annotation.Nullable
  public String getPredecessorID() {
    return predecessorID;
  }

  public void setPredecessorID(String predecessorID) {
    this.predecessorID = predecessorID;
  }


  public BCAMarketingStateInner stateTenureLength(Float stateTenureLength) {
    this.stateTenureLength = stateTenureLength;
    return this;
  }

  /**
   * The length/duration of a promotional state
   * @return stateTenureLength
   */
  @javax.annotation.Nullable
  public Float getStateTenureLength() {
    return stateTenureLength;
  }

  public void setStateTenureLength(Float stateTenureLength) {
    this.stateTenureLength = stateTenureLength;
  }


  public BCAMarketingStateInner stateTenurePeriod(StateTenurePeriodEnum stateTenurePeriod) {
    this.stateTenurePeriod = stateTenurePeriod;
    return this;
  }

  /**
   * The unit of period (days, weeks, months etc.) of the promotional length
   * @return stateTenurePeriod
   */
  @javax.annotation.Nullable
  public StateTenurePeriodEnum getStateTenurePeriod() {
    return stateTenurePeriod;
  }

  public void setStateTenurePeriod(StateTenurePeriodEnum stateTenurePeriod) {
    this.stateTenurePeriod = stateTenurePeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BCAMarketingStateInner bcAMarketingStateInner = (BCAMarketingStateInner) o;
    return Objects.equals(this.coreProduct, bcAMarketingStateInner.coreProduct) &&
        Objects.equals(this.creditInterest, bcAMarketingStateInner.creditInterest) &&
        Objects.equals(this.eligibility, bcAMarketingStateInner.eligibility) &&
        Objects.equals(this.featuresAndBenefits, bcAMarketingStateInner.featuresAndBenefits) &&
        Objects.equals(this.firstMarketedDate, bcAMarketingStateInner.firstMarketedDate) &&
        Objects.equals(this.identification, bcAMarketingStateInner.identification) &&
        Objects.equals(this.lastMarketedDate, bcAMarketingStateInner.lastMarketedDate) &&
        Objects.equals(this.marketingState, bcAMarketingStateInner.marketingState) &&
        Objects.equals(this.notes, bcAMarketingStateInner.notes) &&
        Objects.equals(this.otherFeesCharges, bcAMarketingStateInner.otherFeesCharges) &&
        Objects.equals(this.overdraft, bcAMarketingStateInner.overdraft) &&
        Objects.equals(this.predecessorID, bcAMarketingStateInner.predecessorID) &&
        Objects.equals(this.stateTenureLength, bcAMarketingStateInner.stateTenureLength) &&
        Objects.equals(this.stateTenurePeriod, bcAMarketingStateInner.stateTenurePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coreProduct, creditInterest, eligibility, featuresAndBenefits, firstMarketedDate, identification, lastMarketedDate, marketingState, notes, otherFeesCharges, overdraft, predecessorID, stateTenureLength, stateTenurePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BCAMarketingStateInner {\n");
    sb.append("    coreProduct: ").append(toIndentedString(coreProduct)).append("\n");
    sb.append("    creditInterest: ").append(toIndentedString(creditInterest)).append("\n");
    sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
    sb.append("    featuresAndBenefits: ").append(toIndentedString(featuresAndBenefits)).append("\n");
    sb.append("    firstMarketedDate: ").append(toIndentedString(firstMarketedDate)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    lastMarketedDate: ").append(toIndentedString(lastMarketedDate)).append("\n");
    sb.append("    marketingState: ").append(toIndentedString(marketingState)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherFeesCharges: ").append(toIndentedString(otherFeesCharges)).append("\n");
    sb.append("    overdraft: ").append(toIndentedString(overdraft)).append("\n");
    sb.append("    predecessorID: ").append(toIndentedString(predecessorID)).append("\n");
    sb.append("    stateTenureLength: ").append(toIndentedString(stateTenureLength)).append("\n");
    sb.append("    stateTenurePeriod: ").append(toIndentedString(stateTenurePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CoreProduct");
    openapiFields.add("CreditInterest");
    openapiFields.add("Eligibility");
    openapiFields.add("FeaturesAndBenefits");
    openapiFields.add("FirstMarketedDate");
    openapiFields.add("Identification");
    openapiFields.add("LastMarketedDate");
    openapiFields.add("MarketingState");
    openapiFields.add("Notes");
    openapiFields.add("OtherFeesCharges");
    openapiFields.add("Overdraft");
    openapiFields.add("PredecessorID");
    openapiFields.add("StateTenureLength");
    openapiFields.add("StateTenurePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Identification");
    openapiRequiredFields.add("MarketingState");
    openapiRequiredFields.add("OtherFeesCharges");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BCAMarketingStateInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BCAMarketingStateInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BCAMarketingStateInner is not found in the empty JSON string", BCAMarketingStateInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BCAMarketingStateInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BCAMarketingStateInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BCAMarketingStateInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if (!jsonObj.get("MarketingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketingState").toString()));
      }
      // validate the required field `MarketingState`
      MarketingStateEnum.validateJsonElement(jsonObj.get("MarketingState"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull() && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("OtherFeesCharges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `OtherFeesCharges` to be an array in the JSON string but got `%s`", jsonObj.get("OtherFeesCharges").toString()));
      }

      JsonArray jsonArrayotherFeesCharges = jsonObj.getAsJsonArray("OtherFeesCharges");
      // validate the required field `OtherFeesCharges` (array)
      for (int i = 0; i < jsonArrayotherFeesCharges.size(); i++) {
        OtherFeesChargesInner.validateJsonElement(jsonArrayotherFeesCharges.get(i));
      };
      if ((jsonObj.get("PredecessorID") != null && !jsonObj.get("PredecessorID").isJsonNull()) && !jsonObj.get("PredecessorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PredecessorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PredecessorID").toString()));
      }
      if ((jsonObj.get("StateTenurePeriod") != null && !jsonObj.get("StateTenurePeriod").isJsonNull()) && !jsonObj.get("StateTenurePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateTenurePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateTenurePeriod").toString()));
      }
      // validate the optional field `StateTenurePeriod`
      if (jsonObj.get("StateTenurePeriod") != null && !jsonObj.get("StateTenurePeriod").isJsonNull()) {
        StateTenurePeriodEnum.validateJsonElement(jsonObj.get("StateTenurePeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BCAMarketingStateInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BCAMarketingStateInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BCAMarketingStateInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BCAMarketingStateInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BCAMarketingStateInner>() {
           @Override
           public void write(JsonWriter out, BCAMarketingStateInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BCAMarketingStateInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BCAMarketingStateInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BCAMarketingStateInner
   * @throws IOException if the JSON string is invalid with respect to BCAMarketingStateInner
   */
  public static BCAMarketingStateInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BCAMarketingStateInner.class);
  }

  /**
   * Convert an instance of BCAMarketingStateInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

