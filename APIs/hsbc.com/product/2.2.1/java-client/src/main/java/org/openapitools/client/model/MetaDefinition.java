/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MetaDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetaDefinition {
  /**
   * Gets or Sets agreement
   */
  @JsonAdapter(AgreementEnum.Adapter.class)
  public enum AgreementEnum {
    USE_OF_THE_APIS_AND_ANY_RELATED_DATA_WILL_BE_SUBJECT_TO_THE_TERMS_OF_THE_OPEN_LICENCE_AND_SUBJECT_TO_TERMS_AND_CONDITIONS("Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions");

    private String value;

    AgreementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgreementEnum fromValue(String value) {
      for (AgreementEnum b : AgreementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgreementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgreementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgreementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgreementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgreementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGREEMENT = "Agreement";
  @SerializedName(SERIALIZED_NAME_AGREEMENT)
  private AgreementEnum agreement;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  /**
   * Open Banking License
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
  public enum LicenseEnum {
    HTTPS_WWW_OPENBANKING_ORG_UK_OPEN_LICENCE(URI.create("https://www.openbanking.org.uk/open-licence"));

    private URI value;

    LicenseEnum(URI value) {
      this.value = value;
    }

    public URI getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(URI value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue().toASCIIString());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        URI value =  URI.create(jsonReader.nextString());
        return LicenseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      URI value = URI.create(jsonElement.getAsString());
      LicenseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "License";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private LicenseEnum license;

  /**
   * Open Banking Terms of Use
   */
  @JsonAdapter(TermsOfUseEnum.Adapter.class)
  public enum TermsOfUseEnum {
    HTTPS_WWW_OPENBANKING_ORG_UK_TERMS(URI.create("https://www.openbanking.org.uk/terms"));

    private URI value;

    TermsOfUseEnum(URI value) {
      this.value = value;
    }

    public URI getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TermsOfUseEnum fromValue(URI value) {
      for (TermsOfUseEnum b : TermsOfUseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TermsOfUseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TermsOfUseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue().toASCIIString());
      }

      @Override
      public TermsOfUseEnum read(final JsonReader jsonReader) throws IOException {
        URI value =  URI.create(jsonReader.nextString());
        return TermsOfUseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      URI value = URI.create(jsonElement.getAsString());
      TermsOfUseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TERMS_OF_USE = "TermsOfUse";
  @SerializedName(SERIALIZED_NAME_TERMS_OF_USE)
  private TermsOfUseEnum termsOfUse;

  public static final String SERIALIZED_NAME_TOTAL_RESULTS = "TotalResults";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
  private Integer totalResults;

  public MetaDefinition() {
  }

  public MetaDefinition agreement(AgreementEnum agreement) {
    this.agreement = agreement;
    return this;
  }

  /**
   * Get agreement
   * @return agreement
   */
  @javax.annotation.Nonnull
  public AgreementEnum getAgreement() {
    return agreement;
  }

  public void setAgreement(AgreementEnum agreement) {
    this.agreement = agreement;
  }


  public MetaDefinition lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public MetaDefinition license(LicenseEnum license) {
    this.license = license;
    return this;
  }

  /**
   * Open Banking License
   * @return license
   */
  @javax.annotation.Nonnull
  public LicenseEnum getLicense() {
    return license;
  }

  public void setLicense(LicenseEnum license) {
    this.license = license;
  }


  public MetaDefinition termsOfUse(TermsOfUseEnum termsOfUse) {
    this.termsOfUse = termsOfUse;
    return this;
  }

  /**
   * Open Banking Terms of Use
   * @return termsOfUse
   */
  @javax.annotation.Nonnull
  public TermsOfUseEnum getTermsOfUse() {
    return termsOfUse;
  }

  public void setTermsOfUse(TermsOfUseEnum termsOfUse) {
    this.termsOfUse = termsOfUse;
  }


  public MetaDefinition totalResults(Integer totalResults) {
    this.totalResults = totalResults;
    return this;
  }

  /**
   * Get totalResults
   * @return totalResults
   */
  @javax.annotation.Nonnull
  public Integer getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(Integer totalResults) {
    this.totalResults = totalResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetaDefinition metaDefinition = (MetaDefinition) o;
    return Objects.equals(this.agreement, metaDefinition.agreement) &&
        Objects.equals(this.lastUpdated, metaDefinition.lastUpdated) &&
        Objects.equals(this.license, metaDefinition.license) &&
        Objects.equals(this.termsOfUse, metaDefinition.termsOfUse) &&
        Objects.equals(this.totalResults, metaDefinition.totalResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreement, lastUpdated, license, termsOfUse, totalResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetaDefinition {\n");
    sb.append("    agreement: ").append(toIndentedString(agreement)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    termsOfUse: ").append(toIndentedString(termsOfUse)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Agreement");
    openapiFields.add("LastUpdated");
    openapiFields.add("License");
    openapiFields.add("TermsOfUse");
    openapiFields.add("TotalResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Agreement");
    openapiRequiredFields.add("LastUpdated");
    openapiRequiredFields.add("License");
    openapiRequiredFields.add("TermsOfUse");
    openapiRequiredFields.add("TotalResults");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetaDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetaDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetaDefinition is not found in the empty JSON string", MetaDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetaDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetaDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetaDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Agreement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Agreement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Agreement").toString()));
      }
      // validate the required field `Agreement`
      AgreementEnum.validateJsonElement(jsonObj.get("Agreement"));
      if (!jsonObj.get("License").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `License` to be a primitive type in the JSON string but got `%s`", jsonObj.get("License").toString()));
      }
      // validate the required field `License`
      LicenseEnum.validateJsonElement(jsonObj.get("License"));
      if (!jsonObj.get("TermsOfUse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TermsOfUse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TermsOfUse").toString()));
      }
      // validate the required field `TermsOfUse`
      TermsOfUseEnum.validateJsonElement(jsonObj.get("TermsOfUse"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetaDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetaDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetaDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetaDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<MetaDefinition>() {
           @Override
           public void write(JsonWriter out, MetaDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetaDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetaDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetaDefinition
   * @throws IOException if the JSON string is invalid with respect to MetaDefinition
   */
  public static MetaDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetaDefinition.class);
  }

  /**
   * Convert an instance of MetaDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

