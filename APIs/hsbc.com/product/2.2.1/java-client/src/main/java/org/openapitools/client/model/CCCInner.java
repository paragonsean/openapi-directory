/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CCCMarketingStateInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CCC means a Commercial Credit Card.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CCCInner {
  public static final String SERIALIZED_NAME_CC_C_MARKETING_STATE = "CCCMarketingState";
  @SerializedName(SERIALIZED_NAME_CC_C_MARKETING_STATE)
  private List<CCCMarketingStateInner> ccCMarketingState = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to CCC products, they are segmented in relation to different markets that they wish to focus on.
   */
  @JsonAdapter(SegmentEnum.Adapter.class)
  public enum SegmentEnum {
    GENERAL("General");

    private String value;

    SegmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentEnum fromValue(String value) {
      for (SegmentEnum b : SegmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SegmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEGMENT = "Segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private List<SegmentEnum> segment = new ArrayList<>();

  public CCCInner() {
  }

  public CCCInner ccCMarketingState(List<CCCMarketingStateInner> ccCMarketingState) {
    this.ccCMarketingState = ccCMarketingState;
    return this;
  }

  public CCCInner addCcCMarketingStateItem(CCCMarketingStateInner ccCMarketingStateItem) {
    if (this.ccCMarketingState == null) {
      this.ccCMarketingState = new ArrayList<>();
    }
    this.ccCMarketingState.add(ccCMarketingStateItem);
    return this;
  }

  /**
   * The marketing state (promotional or regular) of the CCC Product.
   * @return ccCMarketingState
   */
  @javax.annotation.Nonnull
  public List<CCCMarketingStateInner> getCcCMarketingState() {
    return ccCMarketingState;
  }

  public void setCcCMarketingState(List<CCCMarketingStateInner> ccCMarketingState) {
    this.ccCMarketingState = ccCMarketingState;
  }


  public CCCInner identification(String identification) {
    this.identification = identification;
    return this;
  }

  /**
   * The unique ID that has been internally assigned by the financial institution to each of the Commercial Credit Card products they market to their retail and/or small to medium enterprise (SME) customers.
   * @return identification
   */
  @javax.annotation.Nonnull
  public String getIdentification() {
    return identification;
  }

  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public CCCInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the CCC product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CCCInner segment(List<SegmentEnum> segment) {
    this.segment = segment;
    return this;
  }

  public CCCInner addSegmentItem(SegmentEnum segmentItem) {
    if (this.segment == null) {
      this.segment = new ArrayList<>();
    }
    this.segment.add(segmentItem);
    return this;
  }

  /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to CCC products, they are segmented in relation to different markets that they wish to focus on.
   * @return segment
   */
  @javax.annotation.Nonnull
  public List<SegmentEnum> getSegment() {
    return segment;
  }

  public void setSegment(List<SegmentEnum> segment) {
    this.segment = segment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CCCInner ccCInner = (CCCInner) o;
    return Objects.equals(this.ccCMarketingState, ccCInner.ccCMarketingState) &&
        Objects.equals(this.identification, ccCInner.identification) &&
        Objects.equals(this.name, ccCInner.name) &&
        Objects.equals(this.segment, ccCInner.segment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ccCMarketingState, identification, name, segment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CCCInner {\n");
    sb.append("    ccCMarketingState: ").append(toIndentedString(ccCMarketingState)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CCCMarketingState");
    openapiFields.add("Identification");
    openapiFields.add("Name");
    openapiFields.add("Segment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CCCMarketingState");
    openapiRequiredFields.add("Identification");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Segment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CCCInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CCCInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CCCInner is not found in the empty JSON string", CCCInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CCCInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CCCInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CCCInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("CCCMarketingState").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CCCMarketingState` to be an array in the JSON string but got `%s`", jsonObj.get("CCCMarketingState").toString()));
      }

      JsonArray jsonArrayccCMarketingState = jsonObj.getAsJsonArray("CCCMarketingState");
      // validate the required field `CCCMarketingState` (array)
      for (int i = 0; i < jsonArrayccCMarketingState.size(); i++) {
        CCCMarketingStateInner.validateJsonElement(jsonArrayccCMarketingState.get(i));
      };
      if (!jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Segment") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Segment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Segment` to be an array in the JSON string but got `%s`", jsonObj.get("Segment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CCCInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CCCInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CCCInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CCCInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CCCInner>() {
           @Override
           public void write(JsonWriter out, CCCInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CCCInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CCCInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CCCInner
   * @throws IOException if the JSON string is invalid with respect to CCCInner
   */
  public static CCCInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CCCInner.class);
  }

  /**
   * Convert an instance of CCCInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

