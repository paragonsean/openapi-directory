/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BCAMarketingStateInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BCA means a Business Current Account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BCAInner {
  public static final String SERIALIZED_NAME_BC_A_MARKETING_STATE = "BCAMarketingState";
  @SerializedName(SERIALIZED_NAME_BC_A_MARKETING_STATE)
  private List<BCAMarketingStateInner> bcAMarketingState = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEE_FREE_LENGTH = "FeeFreeLength";
  @SerializedName(SERIALIZED_NAME_FEE_FREE_LENGTH)
  private Float feeFreeLength;

  /**
   * The unit of period (days, weeks, months etc.) of the promotional length
   */
  @JsonAdapter(FeeFreeLengthPeriodEnum.Adapter.class)
  public enum FeeFreeLengthPeriodEnum {
    DAY("Day"),
    
    HALF_YEAR("Half Year"),
    
    MONTH("Month"),
    
    QUARTER("Quarter"),
    
    WEEK("Week"),
    
    ACADEMIC_TERM("AcademicTerm"),
    
    YEAR("Year");

    private String value;

    FeeFreeLengthPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeFreeLengthPeriodEnum fromValue(String value) {
      for (FeeFreeLengthPeriodEnum b : FeeFreeLengthPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeFreeLengthPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeFreeLengthPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeFreeLengthPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeFreeLengthPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeeFreeLengthPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_FREE_LENGTH_PERIOD = "FeeFreeLengthPeriod";
  @SerializedName(SERIALIZED_NAME_FEE_FREE_LENGTH_PERIOD)
  private FeeFreeLengthPeriodEnum feeFreeLengthPeriod;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_SALE_INDICATOR = "OnSaleIndicator";
  @SerializedName(SERIALIZED_NAME_ON_SALE_INDICATOR)
  private Boolean onSaleIndicator;

  /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on.
   */
  @JsonAdapter(SegmentEnum.Adapter.class)
  public enum SegmentEnum {
    CLIENT_ACCOUNT("ClientAccount"),
    
    STANDARD("Standard"),
    
    NON_COMMERCIAL_CHAITIES_CLB_SOC("NonCommercialChaitiesClbSoc"),
    
    NON_COMMERCIAL_PUBLIC_AUTH_GOVT("NonCommercialPublicAuthGovt"),
    
    RELIGIOUS("Religious"),
    
    SECTOR_SPECIFIC("SectorSpecific"),
    
    STARTUP("Startup"),
    
    SWITCHER("Switcher"),
    
    NON_COMMERCIAL("NonCommercial");

    private String value;

    SegmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentEnum fromValue(String value) {
      for (SegmentEnum b : SegmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SegmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEGMENT = "Segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private List<SegmentEnum> segment = new ArrayList<>();

  public BCAInner() {
  }

  public BCAInner bcAMarketingState(List<BCAMarketingStateInner> bcAMarketingState) {
    this.bcAMarketingState = bcAMarketingState;
    return this;
  }

  public BCAInner addBcAMarketingStateItem(BCAMarketingStateInner bcAMarketingStateItem) {
    if (this.bcAMarketingState == null) {
      this.bcAMarketingState = new ArrayList<>();
    }
    this.bcAMarketingState.add(bcAMarketingStateItem);
    return this;
  }

  /**
   * The marketing state (promotional or regular) of the BCA Product.
   * @return bcAMarketingState
   */
  @javax.annotation.Nonnull
  public List<BCAMarketingStateInner> getBcAMarketingState() {
    return bcAMarketingState;
  }

  public void setBcAMarketingState(List<BCAMarketingStateInner> bcAMarketingState) {
    this.bcAMarketingState = bcAMarketingState;
  }


  public BCAInner feeFreeLength(Float feeFreeLength) {
    this.feeFreeLength = feeFreeLength;
    return this;
  }

  /**
   * The length/duration of the fee free period
   * @return feeFreeLength
   */
  @javax.annotation.Nullable
  public Float getFeeFreeLength() {
    return feeFreeLength;
  }

  public void setFeeFreeLength(Float feeFreeLength) {
    this.feeFreeLength = feeFreeLength;
  }


  public BCAInner feeFreeLengthPeriod(FeeFreeLengthPeriodEnum feeFreeLengthPeriod) {
    this.feeFreeLengthPeriod = feeFreeLengthPeriod;
    return this;
  }

  /**
   * The unit of period (days, weeks, months etc.) of the promotional length
   * @return feeFreeLengthPeriod
   */
  @javax.annotation.Nullable
  public FeeFreeLengthPeriodEnum getFeeFreeLengthPeriod() {
    return feeFreeLengthPeriod;
  }

  public void setFeeFreeLengthPeriod(FeeFreeLengthPeriodEnum feeFreeLengthPeriod) {
    this.feeFreeLengthPeriod = feeFreeLengthPeriod;
  }


  public BCAInner identification(String identification) {
    this.identification = identification;
    return this;
  }

  /**
   * The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
   * @return identification
   */
  @javax.annotation.Nonnull
  public String getIdentification() {
    return identification;
  }

  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public BCAInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the BCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BCAInner notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public BCAInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Optional additional notes to supplement the product details
   * @return notes
   */
  @javax.annotation.Nullable
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public BCAInner onSaleIndicator(Boolean onSaleIndicator) {
    this.onSaleIndicator = onSaleIndicator;
    return this;
  }

  /**
   * Indicates that the published product is OnSale(value 1) or Back Book (value 0) 
   * @return onSaleIndicator
   */
  @javax.annotation.Nullable
  public Boolean getOnSaleIndicator() {
    return onSaleIndicator;
  }

  public void setOnSaleIndicator(Boolean onSaleIndicator) {
    this.onSaleIndicator = onSaleIndicator;
  }


  public BCAInner segment(List<SegmentEnum> segment) {
    this.segment = segment;
    return this;
  }

  public BCAInner addSegmentItem(SegmentEnum segmentItem) {
    if (this.segment == null) {
      this.segment = new ArrayList<>();
    }
    this.segment.add(segmentItem);
    return this;
  }

  /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on.
   * @return segment
   */
  @javax.annotation.Nullable
  public List<SegmentEnum> getSegment() {
    return segment;
  }

  public void setSegment(List<SegmentEnum> segment) {
    this.segment = segment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BCAInner bcAInner = (BCAInner) o;
    return Objects.equals(this.bcAMarketingState, bcAInner.bcAMarketingState) &&
        Objects.equals(this.feeFreeLength, bcAInner.feeFreeLength) &&
        Objects.equals(this.feeFreeLengthPeriod, bcAInner.feeFreeLengthPeriod) &&
        Objects.equals(this.identification, bcAInner.identification) &&
        Objects.equals(this.name, bcAInner.name) &&
        Objects.equals(this.notes, bcAInner.notes) &&
        Objects.equals(this.onSaleIndicator, bcAInner.onSaleIndicator) &&
        Objects.equals(this.segment, bcAInner.segment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bcAMarketingState, feeFreeLength, feeFreeLengthPeriod, identification, name, notes, onSaleIndicator, segment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BCAInner {\n");
    sb.append("    bcAMarketingState: ").append(toIndentedString(bcAMarketingState)).append("\n");
    sb.append("    feeFreeLength: ").append(toIndentedString(feeFreeLength)).append("\n");
    sb.append("    feeFreeLengthPeriod: ").append(toIndentedString(feeFreeLengthPeriod)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    onSaleIndicator: ").append(toIndentedString(onSaleIndicator)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BCAMarketingState");
    openapiFields.add("FeeFreeLength");
    openapiFields.add("FeeFreeLengthPeriod");
    openapiFields.add("Identification");
    openapiFields.add("Name");
    openapiFields.add("Notes");
    openapiFields.add("OnSaleIndicator");
    openapiFields.add("Segment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BCAMarketingState");
    openapiRequiredFields.add("Identification");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BCAInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BCAInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BCAInner is not found in the empty JSON string", BCAInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BCAInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BCAInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BCAInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("BCAMarketingState").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BCAMarketingState` to be an array in the JSON string but got `%s`", jsonObj.get("BCAMarketingState").toString()));
      }

      JsonArray jsonArraybcAMarketingState = jsonObj.getAsJsonArray("BCAMarketingState");
      // validate the required field `BCAMarketingState` (array)
      for (int i = 0; i < jsonArraybcAMarketingState.size(); i++) {
        BCAMarketingStateInner.validateJsonElement(jsonArraybcAMarketingState.get(i));
      };
      if ((jsonObj.get("FeeFreeLengthPeriod") != null && !jsonObj.get("FeeFreeLengthPeriod").isJsonNull()) && !jsonObj.get("FeeFreeLengthPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeFreeLengthPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeFreeLengthPeriod").toString()));
      }
      // validate the optional field `FeeFreeLengthPeriod`
      if (jsonObj.get("FeeFreeLengthPeriod") != null && !jsonObj.get("FeeFreeLengthPeriod").isJsonNull()) {
        FeeFreeLengthPeriodEnum.validateJsonElement(jsonObj.get("FeeFreeLengthPeriod"));
      }
      if (!jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull() && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Segment") != null && !jsonObj.get("Segment").isJsonNull() && !jsonObj.get("Segment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Segment` to be an array in the JSON string but got `%s`", jsonObj.get("Segment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BCAInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BCAInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BCAInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BCAInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BCAInner>() {
           @Override
           public void write(JsonWriter out, BCAInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BCAInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BCAInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BCAInner
   * @throws IOException if the JSON string is invalid with respect to BCAInner
   */
  public static BCAInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BCAInner.class);
  }

  /**
   * Convert an instance of BCAInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

