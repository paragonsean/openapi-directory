/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PCAMarketingStateInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PCA&#39; means a personal current account. That is an account marketed to individuals rather than businesses, which provides the facility to place funds, withdraw cash, hold deposits and to execute payment transaction to and from third parties but does not include any of the following types of accounts:  (a) an account in which money is held on deposit in a currency other than sterling;  (b) current account mortgage, ie a single account comprising both a personal current account and a mortgage, which is regulated and marketed principally as a mortgage;   (c) savings accounts (including instant access savings accounts);   (d) credit card accounts where funds are usually paid in for the sole purpose of repaying a credit card debt; and  (e) e-money accounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PCAInner {
  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_SALE_INDICATOR = "OnSaleIndicator";
  @SerializedName(SERIALIZED_NAME_ON_SALE_INDICATOR)
  private Boolean onSaleIndicator;

  public static final String SERIALIZED_NAME_PC_A_MARKETING_STATE = "PCAMarketingState";
  @SerializedName(SERIALIZED_NAME_PC_A_MARKETING_STATE)
  private List<PCAMarketingStateInner> pcAMarketingState = new ArrayList<>();

  /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. For example, Basic PCA products target consumers with poor credit history, Reward PCA products target consumers who spend a lot, and Premium products target High Net Worth individuals.
   */
  @JsonAdapter(SegmentEnum.Adapter.class)
  public enum SegmentEnum {
    BASIC("Basic"),
    
    BENEFIT_AND_REWARD("BenefitAndReward"),
    
    CREDIT_INTEREST("CreditInterest"),
    
    CASHBACK("Cashback"),
    
    GENERAL("General"),
    
    GRADUATE("Graduate"),
    
    OTHER("Other"),
    
    OVERDRAFT("Overdraft"),
    
    PACKAGED("Packaged"),
    
    PREMIUM("Premium"),
    
    REWARD("Reward"),
    
    STUDENT("Student"),
    
    YOUNG_ADULT("YoungAdult"),
    
    YOUTH("Youth");

    private String value;

    SegmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentEnum fromValue(String value) {
      for (SegmentEnum b : SegmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SegmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEGMENT = "Segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private List<SegmentEnum> segment = new ArrayList<>();

  public PCAInner() {
  }

  public PCAInner identification(String identification) {
    this.identification = identification;
    return this;
  }

  /**
   * The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
   * @return identification
   */
  @javax.annotation.Nonnull
  public String getIdentification() {
    return identification;
  }

  public void setIdentification(String identification) {
    this.identification = identification;
  }


  public PCAInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the PCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PCAInner notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public PCAInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Optional additional notes to supplement the product details
   * @return notes
   */
  @javax.annotation.Nullable
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public PCAInner onSaleIndicator(Boolean onSaleIndicator) {
    this.onSaleIndicator = onSaleIndicator;
    return this;
  }

  /**
   * Indicates that the published product is OnSale(value 1) or Back Book (value 0) 
   * @return onSaleIndicator
   */
  @javax.annotation.Nullable
  public Boolean getOnSaleIndicator() {
    return onSaleIndicator;
  }

  public void setOnSaleIndicator(Boolean onSaleIndicator) {
    this.onSaleIndicator = onSaleIndicator;
  }


  public PCAInner pcAMarketingState(List<PCAMarketingStateInner> pcAMarketingState) {
    this.pcAMarketingState = pcAMarketingState;
    return this;
  }

  public PCAInner addPcAMarketingStateItem(PCAMarketingStateInner pcAMarketingStateItem) {
    if (this.pcAMarketingState == null) {
      this.pcAMarketingState = new ArrayList<>();
    }
    this.pcAMarketingState.add(pcAMarketingStateItem);
    return this;
  }

  /**
   * Describes the type of the known state (regular, promotional )  of the product.
   * @return pcAMarketingState
   */
  @javax.annotation.Nonnull
  public List<PCAMarketingStateInner> getPcAMarketingState() {
    return pcAMarketingState;
  }

  public void setPcAMarketingState(List<PCAMarketingStateInner> pcAMarketingState) {
    this.pcAMarketingState = pcAMarketingState;
  }


  public PCAInner segment(List<SegmentEnum> segment) {
    this.segment = segment;
    return this;
  }

  public PCAInner addSegmentItem(SegmentEnum segmentItem) {
    if (this.segment == null) {
      this.segment = new ArrayList<>();
    }
    this.segment.add(segmentItem);
    return this;
  }

  /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. For example, Basic PCA products target consumers with poor credit history, Reward PCA products target consumers who spend a lot, and Premium products target High Net Worth individuals.
   * @return segment
   */
  @javax.annotation.Nullable
  public List<SegmentEnum> getSegment() {
    return segment;
  }

  public void setSegment(List<SegmentEnum> segment) {
    this.segment = segment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PCAInner pcAInner = (PCAInner) o;
    return Objects.equals(this.identification, pcAInner.identification) &&
        Objects.equals(this.name, pcAInner.name) &&
        Objects.equals(this.notes, pcAInner.notes) &&
        Objects.equals(this.onSaleIndicator, pcAInner.onSaleIndicator) &&
        Objects.equals(this.pcAMarketingState, pcAInner.pcAMarketingState) &&
        Objects.equals(this.segment, pcAInner.segment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identification, name, notes, onSaleIndicator, pcAMarketingState, segment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PCAInner {\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    onSaleIndicator: ").append(toIndentedString(onSaleIndicator)).append("\n");
    sb.append("    pcAMarketingState: ").append(toIndentedString(pcAMarketingState)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Identification");
    openapiFields.add("Name");
    openapiFields.add("Notes");
    openapiFields.add("OnSaleIndicator");
    openapiFields.add("PCAMarketingState");
    openapiFields.add("Segment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Identification");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("PCAMarketingState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PCAInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PCAInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PCAInner is not found in the empty JSON string", PCAInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PCAInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PCAInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PCAInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull() && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("PCAMarketingState").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PCAMarketingState` to be an array in the JSON string but got `%s`", jsonObj.get("PCAMarketingState").toString()));
      }

      JsonArray jsonArraypcAMarketingState = jsonObj.getAsJsonArray("PCAMarketingState");
      // validate the required field `PCAMarketingState` (array)
      for (int i = 0; i < jsonArraypcAMarketingState.size(); i++) {
        PCAMarketingStateInner.validateJsonElement(jsonArraypcAMarketingState.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("Segment") != null && !jsonObj.get("Segment").isJsonNull() && !jsonObj.get("Segment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Segment` to be an array in the JSON string but got `%s`", jsonObj.get("Segment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PCAInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PCAInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PCAInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PCAInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PCAInner>() {
           @Override
           public void write(JsonWriter out, PCAInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PCAInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PCAInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PCAInner
   * @throws IOException if the JSON string is invalid with respect to PCAInner
   */
  public static PCAInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PCAInner.class);
  }

  /**
   * Convert an instance of PCAInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

