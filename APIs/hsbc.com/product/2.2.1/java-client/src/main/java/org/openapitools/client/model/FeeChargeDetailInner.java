/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Other fees/charges details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeeChargeDetailInner {
  /**
   * How frequently the fee/charge is applied to the account
   */
  @JsonAdapter(ApplicationFrequencyEnum.Adapter.class)
  public enum ApplicationFrequencyEnum {
    ON_CLOSING("OnClosing"),
    
    ON_OPENING("OnOpening"),
    
    CHARGING_PERIOD("ChargingPeriod"),
    
    DAILY("Daily"),
    
    PER_ITEM("PerItem"),
    
    MONTHLY("Monthly"),
    
    ON_ANNIVERSARY("OnAnniversary"),
    
    OTHER("Other"),
    
    PER_HUNDRED_POUNDS("PerHundredPounds"),
    
    PER_HOUR("PerHour"),
    
    PER_OCCURRENCE("PerOccurrence"),
    
    PER_SHEET("PerSheet"),
    
    PER_TRANSACTION("PerTransaction"),
    
    PER_TRANSACTION_AMOUNT("PerTransactionAmount"),
    
    PER_TRANSACTION_PERCENTAGE("PerTransactionPercentage"),
    
    QUARTERLY("Quarterly"),
    
    SIX_MONTHLY("SixMonthly"),
    
    STATEMENT_MONTHLY("StatementMonthly"),
    
    WEEKLY("Weekly"),
    
    YEARLY("Yearly");

    private String value;

    ApplicationFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationFrequencyEnum fromValue(String value) {
      for (ApplicationFrequencyEnum b : ApplicationFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApplicationFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_FREQUENCY = "ApplicationFrequency";
  @SerializedName(SERIALIZED_NAME_APPLICATION_FREQUENCY)
  private ApplicationFrequencyEnum applicationFrequency;

  /**
   * How frequently the fee/charge is calculated
   */
  @JsonAdapter(CalculationFrequencyEnum.Adapter.class)
  public enum CalculationFrequencyEnum {
    ON_CLOSING("OnClosing"),
    
    ON_OPENING("OnOpening"),
    
    CHARGING_PERIOD("ChargingPeriod"),
    
    DAILY("Daily"),
    
    PER_ITEM("PerItem"),
    
    MONTHLY("Monthly"),
    
    ON_ANNIVERSARY("OnAnniversary"),
    
    OTHER("Other"),
    
    PER_HUNDRED_POUNDS("PerHundredPounds"),
    
    PER_HOUR("PerHour"),
    
    PER_OCCURRENCE("PerOccurrence"),
    
    PER_SHEET("PerSheet"),
    
    PER_TRANSACTION("PerTransaction"),
    
    PER_TRANSACTION_AMOUNT("PerTransactionAmount"),
    
    PER_TRANSACTION_PERCENTAGE("PerTransactionPercentage"),
    
    QUARTERLY("Quarterly"),
    
    SIX_MONTHLY("SixMonthly"),
    
    STATEMENT_MONTHLY("StatementMonthly"),
    
    WEEKLY("Weekly"),
    
    YEARLY("Yearly");

    private String value;

    CalculationFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculationFrequencyEnum fromValue(String value) {
      for (CalculationFrequencyEnum b : CalculationFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculationFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculationFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculationFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculationFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CalculationFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALCULATION_FREQUENCY = "CalculationFrequency";
  @SerializedName(SERIALIZED_NAME_CALCULATION_FREQUENCY)
  private CalculationFrequencyEnum calculationFrequency;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "FeeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private String feeAmount;

  public static final String SERIALIZED_NAME_FEE_APPLICABLE_RANGE = "FeeApplicableRange";
  @SerializedName(SERIALIZED_NAME_FEE_APPLICABLE_RANGE)
  private Object feeApplicableRange;

  /**
   * Categorisation of fees and charges into standard categories.
   */
  @JsonAdapter(FeeCategoryEnum.Adapter.class)
  public enum FeeCategoryEnum {
    AUTO("Auto"),
    
    ATM("ATM"),
    
    BANKERS_DRAFTS("BankersDrafts"),
    
    CARD("Card"),
    
    CHEQUE("Cheque"),
    
    COUNTER_SERVICES("CounterServices"),
    
    DIRECT_DEBIT("DirectDebit"),
    
    DEEDS("Deeds"),
    
    FOREIGN("Foreign"),
    
    FX("FX"),
    
    INTERNATIONAL("International"),
    
    INVESTIGATION("Investigation"),
    
    LEGAL("Legal"),
    
    LOAN("Loan"),
    
    NIGHT_SAFE("NightSafe"),
    
    ONLINE("Online"),
    
    OTHER("Other"),
    
    POST_OFFICE("PostOffice"),
    
    PAYMENT_SCHEME("PaymentScheme"),
    
    REPORT("Report"),
    
    SAFEKEEPING("Safekeeping"),
    
    SERVICING("Servicing"),
    
    TRANSACTION("Transaction");

    private String value;

    FeeCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeCategoryEnum fromValue(String value) {
      for (FeeCategoryEnum b : FeeCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeeCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_CATEGORY = "FeeCategory";
  @SerializedName(SERIALIZED_NAME_FEE_CATEGORY)
  private FeeCategoryEnum feeCategory;

  public static final String SERIALIZED_NAME_FEE_RATE = "FeeRate";
  @SerializedName(SERIALIZED_NAME_FEE_RATE)
  private String feeRate;

  /**
   * Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
   */
  @JsonAdapter(FeeRateTypeEnum.Adapter.class)
  public enum FeeRateTypeEnum {
    GROSS("Gross"),
    
    OTHER("Other");

    private String value;

    FeeRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeRateTypeEnum fromValue(String value) {
      for (FeeRateTypeEnum b : FeeRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeRateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeeRateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_RATE_TYPE = "FeeRateType";
  @SerializedName(SERIALIZED_NAME_FEE_RATE_TYPE)
  private FeeRateTypeEnum feeRateType;

  /**
   * Fee/Charge Type
   */
  @JsonAdapter(FeeTypeEnum.Adapter.class)
  public enum FeeTypeEnum {
    ATM_DEPOS_ATM_PAID_IN("ATMDeposATMPaidIn"),
    
    REPORT_CERT_BALANCE("ReportCertBalance"),
    
    ATM_ABROAD_CON_VISA_DEBIT("ATMAbroadConVisaDebit"),
    
    ATM_CARDNET_ENV_IN("ATMCardnetEnvIn"),
    
    ATM_CASH_GROUP_ATM_DEBIT_CARD("ATMCashGroupATMDebitCard"),
    
    ATM_CASH_NON_GROUP_ATM_DEBITCARD("ATMCashNonGroupATMDebitcard"),
    
    ATM_CON_GROUP_ATM("ATMConGroupATM"),
    
    ATM_ABROAD("ATMAbroad"),
    
    ATM_FOREIGN_CASH_DEB_CARD("ATMForeignCashDebCard"),
    
    ATM_ABROAD_GOLD_VISA_DEBIT("ATMAbroadGoldVisaDebit"),
    
    ATM_NON_STERLING_WITHDRAWAL("ATMNonSterlingWithdrawal"),
    
    ATM_ABROAD_VISA_DEBIT("ATMAbroadVisaDebit"),
    
    ATM_WITHDRAW_CASH("ATMWithdrawCash"),
    
    BACSON_LINE_ANCILLIARY("BACSOnLineAncilliary"),
    
    BACS_BATCH("BACSBatch"),
    
    BACSON_LINE_FILE("BACSOnLineFile"),
    
    BACS_ITEM("BACSItem"),
    
    BACS_BULK_BATCH("BACSBulkBatch"),
    
    BACSON_LINE_OVERLIMIT("BACSOnLineOverlimit"),
    
    BACSON_LINE_PAYMENT("BACSOnLinePayment"),
    
    BACSON_LINE_SERVICE("BACSOnLineService"),
    
    BACS_BULK_INTERNET("BACSBulkInternet"),
    
    BACSTEL_DIR_DEB_SMART_CARD("BACSTELDirDebSmartCard"),
    
    BACSTEL_DIR_DEB_WEB_INIT("BACSTELDirDebWebInit"),
    
    BACSTE_LIR_DEB_WEB_INIT("BACSTELirDebWebInit"),
    
    BACSTEL_DIR_DEB_OVERLIMIT("BACSTELDirDebOverlimit"),
    
    BACSTEL_DIR_DEB_PAYMENT("BACSTELDirDebPayment"),
    
    BACSTEL_DIR_DEB_SERVICE("BACSTELDirDebService"),
    
    BACSTEL_DIR_DEB_ANCILLIARY("BACSTELDirDebAncilliary"),
    
    BACSTEL_ANCILLIARY("BACSTELAncilliary"),
    
    BACSTEL_SMART_CARD("BACSTELSmartCard"),
    
    BACSTEL_FILE("BACSTELFile"),
    
    BACSTEL_OVERLIMIT("BACSTELOverlimit"),
    
    BACSTEL_PAYMENT("BACSTELPayment"),
    
    BACSTEL_SERVICE("BACSTELService"),
    
    CHAPS_OUT_BRANCH("CHAPSOutBranch"),
    
    CHAPS_OUT_ONLINE_DEPOSIT_ACC("CHAPSOutOnlineDepositAcc"),
    
    CHAPSIN("CHAPSIn"),
    
    CHAPS_OUT_POST("CHAPSOutPost"),
    
    CHAPS_OUT("CHAPSOut"),
    
    CHAPS_OUT_ONLINE("CHAPSOutOnline"),
    
    CHAPS_OUT_MANUAL("CHAPSOutManual"),
    
    CARD_CARD_REPLACEMENT("CardCardReplacement"),
    
    DRAFTS_BANKERS("DraftsBankers"),
    
    DRAFTS_CANCELLATION("DraftsCancellation"),
    
    CARD_GUARANTEED("CardGuaranteed"),
    
    DRAFTS_INTL_PAYABLE_ABROAD("DraftsIntlPayableAbroad"),
    
    DRAFTS_INTL_STOPPED_CANCELLED("DraftsIntlStoppedCancelled"),
    
    EURO_CHQ_X_LESS("EuroChqXLess"),
    
    EURO_CHQ_X_PLUS("EuroChqXPlus"),
    
    FPS_OUT("FPSOut"),
    
    FPS_OUT_OWN("FPSOutOwn"),
    
    FPSIN_BRANCH("FPSInBranch"),
    
    LEGAL_ARTICLES_REPORT("LegalArticlesReport"),
    
    LEGAL_SEALING("LegalSealing"),
    
    LEGAL_BOND_AND_GUARANTEE("LegalBondAndGuarantee"),
    
    LEGAL_CO_SEARCH("LegalCoSearch"),
    
    LEGAL_DEPOSIT_ASSIGNMENT("LegalDepositAssignment"),
    
    LEGAL_GUARANTEE_PREP("LegalGuaranteePrep"),
    
    LEGAL_LIFE_POLICY_PREP_CO("LegalLifePolicyPrepCo"),
    
    LEGAL_LIFE_POLICY_PREP_PERSONAL("LegalLifePolicyPrepPersonal"),
    
    LEGAL_PRIORITY_PARI_PASSU("LegalPriorityPariPassu"),
    
    LEGAL_SUBORDINATION_AGREEMENT("LegalSubordinationAgreement"),
    
    DIR_DEB_DIRECT_DEBIT_ADMIN("DirDebDirectDebitAdmin"),
    
    DIR_DEB_DIRECT_DEBIT_CANCEL("DirDebDirectDebitCancel"),
    
    INTL_PAY_BIB_FOREIGN_LIMIT("IntlPayBIBForeignLimit"),
    
    INTL_PAY_CREDIT_TRANS_CUST("IntlPayCreditTransCust"),
    
    INTL_PAY_CREDIT_TRANS_NON_CUST("IntlPayCreditTransNonCust"),
    
    INTL_PAY_EXPRESS_MONEY_MOVER("IntlPayExpressMoneyMover"),
    
    INTL_PAY_EEA_PAY_URGENT("IntlPayEEAPayUrgent"),
    
    INTL_PAY_IRISH_PAY_URGENT("IntlPayIrishPayUrgent"),
    
    INTL_PAY_EEA_PAY("IntlPayEEAPay"),
    
    INTL_PAY_FX_PAYMENT_IN("IntlPayFXPaymentIn"),
    
    INTL_PAY_FOREIGN_IN1_C_PLUS("IntlPayForeignIn1CPlus"),
    
    INTL_PAY_FOREIGN_CHARGE("IntlPayForeignCharge"),
    
    INTL_PAY_FOREIGN_INTERNET("IntlPayForeignInternet"),
    
    INTL_PAY_FOREIGN_IN_SUB1_C("IntlPayForeignInSub1C"),
    
    INTL_PAY_PURCHASE_NON_STERLING("IntlPayPurchaseNonSterling"),
    
    INTL_PAY_PAYMENT_TRACING("IntlPayPaymentTracing"),
    
    INTL_PAY_STANDARD_MONEY_MOVER("IntlPayStandardMoneyMover"),
    
    INTL_PAY_MT101_TRANSACTION("IntlPayMT101Transaction"),
    
    INTL_PAY_WORLDPAY_PAYMENT("IntlPayWorldpayPayment"),
    
    INV_PAY_BANK_DETAILS_WRONG("InvPayBankDetailsWrong"),
    
    INV_PAY_FOREIGN_BCNR("InvPayForeignBCNR"),
    
    INV_PAY_FOREIGN_RECALL("InvPayForeignRecall"),
    
    INV_GENERAL_INQ("InvGeneralInq"),
    
    INV_OLD_INSTRUCTION("InvOldInstruction"),
    
    INV_PAY_RETURN_DEBIT_XV_LESS("InvPayReturnDebitXVLess"),
    
    INV_PAY_RETURN_DEBIT_XV_PLUS("InvPayReturnDebitXVPlus"),
    
    INV_PAY_STOP_PAYMENT("InvPayStopPayment"),
    
    INV_PAY_STANDING_ORD_UNPAID("InvPayStandingOrdUnpaid"),
    
    SAFE_KEEP_ACCESS("SafeKeepAccess"),
    
    SAFE_KEEP_DEED_MEDIUM("SafeKeepDeedMedium"),
    
    SAFE_KEEPING_ENVELOPE("SafeKeepingEnvelope"),
    
    SAFE_KEEPING_INSPECTION("SafeKeepingInspection"),
    
    SAFE_KEEPING_LARGE_ITEM("SafeKeepingLargeItem"),
    
    SAFE_KEEP_MULTIPLE_ITEMS("SafeKeepMultipleItems"),
    
    SAFE_KEEPING_PARCEL("SafeKeepingParcel"),
    
    SAFE_KEEP_DEED_SMALL("SafeKeepDeedSmall"),
    
    SAFE_KEEP_ONE_ITEM("SafeKeepOneItem"),
    
    LOAN_ARRANGEMENT("LoanArrangement"),
    
    NIGHT_SAFE_NIGHT_SAFE_BANK_OPEN("NightSafeNightSafeBankOpen"),
    
    NIGHT_SAFE_CREDIT_SUB5_K("NightSafeCreditSub5K"),
    
    NIGHT_SAFE_NIGHT_SAFE("NightSafeNightSafe"),
    
    NIGHT_SAFE_NIGHT_SAFE_PAID_IN("NightSafeNightSafePaidIn"),
    
    PO_POST_OFFICE_COUNTER_CREDIT("POPostOfficeCounterCredit"),
    
    PO_POST_OFFICE_CASH_CREDIT("POPostOfficeCashCredit"),
    
    PO_POST_OFFICE_CASH_OUT("POPostOfficeCashOut"),
    
    PO_POST_OFFICE_WITHDRAWAL("POPostOfficeWithdrawal"),
    
    CHQ_BOOK_THEFT_LOSS_ALL_STOPPED("ChqBookTheftLossAllStopped"),
    
    CHQ_ISSUED_CURRENCY_ACC("ChqIssuedCurrencyAcc"),
    
    CHQ_COPY("ChqCopy"),
    
    CHQ_DRAFT("ChqDraft"),
    
    CHQ_IN("ChqIn"),
    
    CHQ_SPECIAL_CHQ_CLEARANCE("ChqSpecialChqClearance"),
    
    CHQ_OUT_ISSUED("ChqOutIssued"),
    
    CHQ_SPECIAL_CHQ_PRESENTATION("ChqSpecialChqPresentation"),
    
    CHQ_COUNTER_CHEQUE("ChqCounterCheque"),
    
    CHQ_CHEQUESWITH_STATEMENT("ChqChequeswithStatement"),
    
    CHQ_STOPPED("ChqStopped"),
    
    CHQ_TRANS("ChqTrans"),
    
    CHQ_DRAFT_FX("ChqDraftFX"),
    
    CHQ_FOREIGN_COURIER("ChqForeignCourier"),
    
    CHQ_FOREIGN_NEG_TEN_THOU("ChqForeignNegTenThou"),
    
    CHQ_FOREIGN_NEG_HUNDRED("ChqForeignNegHundred"),
    
    CHEQUE_FOREIGN_BANK_DIVI("ChequeForeignBankDivi"),
    
    CHQ_FOREIGN_NEG_FIFTY_THOU("ChqForeignNegFiftyThou"),
    
    CHQ_PENSION_CHEQUE("ChqPensionCheque"),
    
    CHEQUE_FOREIGN_OTHER_DIVI("ChequeForeignOtherDivi"),
    
    CHQ_FOREIGN_NEG_FIVE_THOU("ChqForeignNegFiveThou"),
    
    CHQ_FOREIGN_NEG_MAX("ChqForeignNegMax"),
    
    CHQ_FOREIGN_GBPMMD_PLUS("ChqForeignGBPMMDPlus"),
    
    CHQ_GIFT_CHEQUE("ChqGiftCheque"),
    
    CHQ_COUNTER_LODGEMENT("ChqCounterLodgement"),
    
    CHQ_CASH_DROP_LODGEMENT("ChqCashDropLodgement"),
    
    CHQ_FOREIGN("ChqForeign"),
    
    CHQ_CHEQUE_PHOTOCOPY("ChqChequePhotocopy"),
    
    CHQ_POST_OFFICE_CREDIT("ChqPostOfficeCredit"),
    
    CHQ_POST_OFFICE_CHEQUE_COLLECTED("ChqPostOfficeChequeCollected"),
    
    CHQ_CHEQUE_RETRIEVAL("ChqChequeRetrieval"),
    
    CHQ_RECONCILLIATION_PER_TRANS("ChqReconcilliationPerTrans"),
    
    CHQ_SPECIAL_PRESENTATION_COUNT("ChqSpecialPresentationCount"),
    
    CHQ_SPECIAL_PRESENTATION_PTT("ChqSpecialPresentationPTT"),
    
    CHQ_DRAFT_STERLING("ChqDraftSterling"),
    
    CHQ_UNPAID_CHARGE("ChqUnpaidCharge"),
    
    CHQ_UNPAID_TRANS_IN("ChqUnpaidTransIn"),
    
    CHQ_UNPAID_TRANS_OUT("ChqUnpaidTransOut"),
    
    CHQ_UNPAID_CHEQUE("ChqUnpaidCheque"),
    
    REPORT_AUDIT_LETTER("ReportAuditLetter"),
    
    REPORT_FAX_ADVICE_ADDITIONAL("ReportFAXAdviceAdditional"),
    
    REPORT_TEL_ADVICE_ADDITIONAL("ReportTelAdviceAdditional"),
    
    REPORT_CREDIT_HISTORY("ReportCreditHistory"),
    
    REPORT_CERT_INTEREST_DUPLICATE("ReportCertInterestDuplicate"),
    
    REPORT_CERT_INTEREST("ReportCertInterest"),
    
    REPORT_CREDIT_HISTORY_ADDITIONAL_IN_YEAR("ReportCreditHistoryAdditionalInYear"),
    
    REPORT_FOREIGN_STATUS_ENQ_ELEC("ReportForeignStatusEnqElec"),
    
    REPORT_FOREIGN_STATUS_ENQ("ReportForeignStatusEnq"),
    
    REPORT_STATEMENT_CHQ_DAILY("ReportStatementChqDaily"),
    
    REPORT_STATEMENT_CHQ_FORTNIGHTLY("ReportStatementChqFortnightly"),
    
    REPORT_STATEMENT_CHQ_MONTHLY("ReportStatementChqMonthly"),
    
    REPORT_STATEMENT_CHQ_WEEKLY("ReportStatementChqWeekly"),
    
    REPORT_STATEMENT_AND_DIVI_CHQ("ReportStatementAndDiviChq"),
    
    REPORT_REFERRAL_ITEM("ReportReferralItem"),
    
    REPORT_STATEMENT_BY_ATM("ReportStatementByATM"),
    
    REPORT_STATEMENT_BY_BRANCH("ReportStatementByBranch"),
    
    REPORT_STATEMENT_COPY_REGULAR("ReportStatementCopyRegular"),
    
    REPORT_STATEMENT_DAILY("ReportStatementDaily"),
    
    REPORT_STATUS_ENQUIRY("ReportStatusEnquiry"),
    
    REPORT_STATEMENT_FREQUENT("ReportStatementFrequent"),
    
    REPORT_STATEMENT_MONTHLY("ReportStatementMonthly"),
    
    REPORT_STATEMENT_COPY1("ReportStatementCopy1"),
    
    REPORT_STATEMENT_TO_BRANCH("ReportStatementToBranch"),
    
    REPORT_SMS_TEXT_MINI_STATEMENTOR_ALERT("ReportSMSTextMiniStatementorAlert"),
    
    REPORT_STATEMENT_FORTNIGHTLY("ReportStatementFortnightly"),
    
    REPORT_SMS_TEXT_MINI_STATEMENT_WO_M("ReportSMSTextMiniStatementWoM"),
    
    REPORT_SMS_TEXT_ALERT_BALANCE("ReportSMSTextAlertBalance"),
    
    REPORT_SMS_TEXT_ALERT("ReportSMSTextAlert"),
    
    REPORT_TAX_CERT("ReportTaxCert"),
    
    REPORT_WEEKLY_STATEMENT("ReportWeeklyStatement"),
    
    SEPA_BRANCH("SEPABranch"),
    
    SEPA_CREDIT("SEPACredit"),
    
    SEPA_DIRECT_DEBIT("SEPADirectDebit"),
    
    SEPAIN("SEPAIn"),
    
    SEPA_EURO("SEPAEuro"),
    
    SEPA_OUT("SEPAOut"),
    
    SEPA_UNPAID("SEPAUnpaid"),
    
    SEPA_WINBITS_TRANSACTION("SEPAWinbitsTransaction"),
    
    TRANS_BILL_PAYMENT_BRANCH("TransBillPaymentBranch"),
    
    TRANS_BILL_COLLECT("TransBillCollect"),
    
    TRANS_TELEPHONE_BILL_PAYMENT("TransTelephoneBillPayment"),
    
    TRANS_BANK_PAYMENT("TransBankPayment"),
    
    TRANS_BILL_PAYMENT_TELEPHONE("TransBillPaymentTelephone"),
    
    TRANS_CORRESPONDENT_BANK_FEE("TransCorrespondentBankFee"),
    
    TRANS_CREDIT_TRANSFER_UK_DIFFERENT("TransCreditTransferUKDifferent"),
    
    TRANS_CREDIT_TRANSFER_UK_SAME("TransCreditTransferUKSame"),
    
    TRANS_CREDIT("TransCredit"),
    
    TRANS_CREDIT_TRANSFER("TransCreditTransfer"),
    
    TRANS_BRANCH_CREDIT("TransBranchCredit"),
    
    TRANS_DEBIT("TransDebit"),
    
    TRANS_DEB_CARD_DEB("TransDebCardDeb"),
    
    TRANS_UK_DIR_DEB("TransUKDirDeb"),
    
    TRANS_MANUAL_DEB("TransManualDeb"),
    
    TITLE_DEEDS("TitleDeeds"),
    
    TRANS_BUY_FOREIGN_WITH_GBP("TransBuyForeignWithGBP"),
    
    TRANS_GOOD_VALUE_REQ("TransGoodValueReq"),
    
    TRANS_SWIFT_OUT_UK_FOREIGN("TransSWIFTOutUKForeign"),
    
    TRANS_INCONPLETE_INSTRUCTION("TransInconpleteInstruction"),
    
    TRANS_MANUAL_ENTRIES("TransManualEntries"),
    
    TRANS_MANUAL_TRANS("TransManualTrans"),
    
    TRANS_NON_STERLING("TransNonSterling"),
    
    OTHER("Other"),
    
    TRANS_POS_SALE_FOREIGN("TransPOSSaleForeign"),
    
    TRANS_PRI_PAYMENT_POST("TransPriPaymentPost"),
    
    TRANS_POS_SALE_UK("TransPOSSaleUK"),
    
    TRANS_RECONCILIATION_PER_TRANS("TransReconciliationPerTrans"),
    
    TRANS_STANDING_ORD_ADMIN("TransStandingOrdAdmin"),
    
    TRANS_STANDING_ORD("TransStandingOrd"),
    
    TRANS_STANDING_ORD_MAN_PAY("TransStandingOrdManPay"),
    
    TRANS_TEL_BUSI_PRI_PAYMENT_FOREIGN_TO_UK_ACC("TransTelBusiPriPaymentForeignToUKAcc"),
    
    TRANS_TELE_ITEM("TransTeleItem"),
    
    TRANS_TEL_BUSI_PRI_PAYMENT_TO_GRP_ACC("TransTelBusiPriPaymentToGrpAcc"),
    
    TRANS_TRANSFER_EX_GROUP("TransTransferExGroup"),
    
    TRANS_TEL_BUSI_PRI_PAYMENT_TO_NON_GRP_ACC("TransTelBusiPriPaymentToNonGrpAcc"),
    
    TRANS_SWIFT_OUT_NON_EEA_STERLING("TransSWIFTOutNonEEASterling"),
    
    AUTO_AUTO_CREDIT("AutoAutoCredit"),
    
    AUTO_AUTOMATED_ENTRIES("AutoAutomatedEntries"),
    
    AUTO_AUTO_CREDIT_PHONE_INET("AutoAutoCreditPhoneInet"),
    
    AUTO_AUTOMATED_TRANS("AutoAutomatedTrans"),
    
    AUTO_DEBIT_CARD_COMMERCIAL("AutoDebitCardCommercial"),
    
    AUTO_FPS_AUTO_CREDIT("AutoFPSAutoCredit"),
    
    VISA_TRAVELLERS_CHQOR_CURRENCY("VisaTravellersChqorCurrency"),
    
    ONLINE_INTERNET_BILL_PAYMENT("OnlineInternetBillPayment"),
    
    ONLINE_BUSINESS_ONLINE_EURO_PAYMENT("OnlineBusinessOnlineEuroPayment"),
    
    ONLINE_BUSINESS_ONLINE_URGENT_EURO_PAYMENT("OnlineBusinessOnlineUrgentEuroPayment"),
    
    ONLINE_BUSINESS_ONLINE_FOREIGN_PAYMENT("OnlineBusinessOnlineForeignPayment"),
    
    ONLINE_INTERBANK_TRANSFER("OnlineInterbankTransfer"),
    
    ONLINE_INTERBANK_PER_TRANSFER("OnlineInterbankPerTransfer"),
    
    ONLINE_INTERBRANCH_TRANSFER("OnlineInterbranchTransfer"),
    
    ONLINE_INTERBRANCH_PER_TRANSFER("OnlineInterbranchPerTransfer"),
    
    ONLINE_SUBSCRIPTION_MONTHLY("OnlineSubscriptionMonthly"),
    
    ONLINE_BANKING_PAYMENT("OnlineBankingPayment"),
    
    ONLINE_REPLACEMENT_CARD_READER("OnlineReplacementCardReader"),
    
    ONLINE_PAYMENTIN_GB_PTO_UK("OnlinePaymentinGBPtoUK"),
    
    ONLINE_URGENT_PAYMENT("OnlineUrgentPayment"),
    
    ONLINE_PAYMENTIN_US_DTO_US("OnlinePaymentinUSDtoUS"),
    
    ONLINE_BULK_DIRECT_DEB_STERLING("OnlineBulkDirectDebSterling"),
    
    FOREIGN_CHQ_SENT("ForeignChqSent"),
    
    FOREIGN_CHQ_SELF("ForeignChqSelf"),
    
    FOREIGN_CHQ_ENCASHMENT("ForeignChqEncashment"),
    
    FOREIGN_FX_INWARDS_CUST("ForeignFXInwardsCust"),
    
    FOREIGN_FX_TRANSFERS_ROI("ForeignFXTransfersROI"),
    
    FOREIGN_FX_FORWARD_TRANS("ForeignFXForwardTrans"),
    
    FOREIGN_EX_MAINTENANCE("ForeignExMaintenance"),
    
    FOREIGN_FX_INWARDS_NON_CUST("ForeignFXInwardsNonCust"),
    
    FOREIGN_FX_OUTWARDS("ForeignFXOutwards"),
    
    FOREIGN_PURCHASE("ForeignPurchase"),
    
    FOREIGN_STATUS_REP("ForeignStatusRep"),
    
    FOREIGN_CHQ_DRAFT("ForeignChqDraft"),
    
    FOREIGN_CHQ_C_LESS("ForeignChqCLess"),
    
    FOREIGN_CHQ_M_LESS("ForeignChqMLess"),
    
    FOREIGN_CHQ_OTHER("ForeignChqOther"),
    
    FOREIGN_CHQ_M_PLUS("ForeignChqMPlus"),
    
    FOREIGN_CHQ_CCC("ForeignChqCCC"),
    
    SERVICE_C_ACCOUNT_FEE("ServiceCAccountFee"),
    
    SERVICE_C_ACCOUNT_FEE_MONTHLY("ServiceCAccountFeeMonthly"),
    
    SERVICE_C_ACCOUNT_FEE_QUARTERLY("ServiceCAccountFeeQuarterly"),
    
    SERVICE_C_FIXED_TARIFF("ServiceCFixedTariff"),
    
    SERVICE_C_BUSI_DEP_ACC_BREAKAGE("ServiceCBusiDepAccBreakage"),
    
    SERVICE_C_MONITOR_DAILY("ServiceCMonitorDaily"),
    
    SERVICE_C_MINIMUM_MONTHLY_FEE("ServiceCMinimumMonthlyFee"),
    
    SERVICE_C_MONITOR_MONTHLY("ServiceCMonitorMonthly"),
    
    SERVICE_C_MONITOR_WEEKLY("ServiceCMonitorWeekly"),
    
    SERVICE_CMT940_ACCOUNT_FIRST("ServiceCMT940AccountFirst"),
    
    SERVICE_CMT940_ACCOUNT_SUBSEQUENT("ServiceCMT940AccountSubsequent"),
    
    SERVICE_C_OTHER("ServiceCOther"),
    
    COUNTER_COIN_HANDLING("CounterCoinHandling"),
    
    COUNTER_CASH_IN("CounterCashIn"),
    
    COUNTER_CASH_IN_NOT_US("CounterCashInNotUs"),
    
    COUNTER_CASH_OUT("CounterCashOut"),
    
    COUNTER_CASH_X("CounterCashX"),
    
    COUNTER_FOREIGN_NOTE_HANDLING("CounterForeignNoteHandling"),
    
    COUNTER_CASH_FEE_RATE("CounterCashFeeRate"),
    
    COUNTER_FOREIGN_CASH_OUT_TX("CounterForeignCashOutTx"),
    
    COUNTER_COUNTER_LODGEMENT("CounterCounterLodgement"),
    
    COUNTER_CASH_DROP_LODGEMENT("CounterCashDropLodgement"),
    
    COUNTER_NOTES_LODGED("CounterNotesLodged"),
    
    COUNTER_NOTES_OUT("CounterNotesOut"),
    
    COUNTER_CASH_IN_OWN("CounterCashInOwn"),
    
    COUNTER_CASH_FEE_PERCENT("CounterCashFeePercent");

    private String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeTypeEnum fromValue(String value) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_TYPE = "FeeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private FeeTypeEnum feeType;

  public static final String SERIALIZED_NAME_INCLUDED_IN_MONTHLY_CHARGE_INDICATOR = "IncludedInMonthlyChargeIndicator";
  @SerializedName(SERIALIZED_NAME_INCLUDED_IN_MONTHLY_CHARGE_INDICATOR)
  private Boolean includedInMonthlyChargeIndicator;

  public static final String SERIALIZED_NAME_NEGOTIABLE_INDICATOR = "NegotiableIndicator";
  @SerializedName(SERIALIZED_NAME_NEGOTIABLE_INDICATOR)
  private Boolean negotiableIndicator;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_APPLICATION_FREQUENCY = "OtherApplicationFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_APPLICATION_FREQUENCY)
  private Object otherApplicationFrequency;

  public static final String SERIALIZED_NAME_OTHER_CALCULATION_FREQUENCY = "OtherCalculationFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_CALCULATION_FREQUENCY)
  private Object otherCalculationFrequency;

  public static final String SERIALIZED_NAME_OTHER_FEE_CATEGORY = "OtherFeeCategory";
  @SerializedName(SERIALIZED_NAME_OTHER_FEE_CATEGORY)
  private Object otherFeeCategory;

  public static final String SERIALIZED_NAME_OTHER_FEE_RATE_TYPE = "OtherFeeRateType";
  @SerializedName(SERIALIZED_NAME_OTHER_FEE_RATE_TYPE)
  private Object otherFeeRateType;

  public static final String SERIALIZED_NAME_OTHER_FEE_TYPE = "OtherFeeType";
  @SerializedName(SERIALIZED_NAME_OTHER_FEE_TYPE)
  private Object otherFeeType;

  public FeeChargeDetailInner() {
  }

  public FeeChargeDetailInner applicationFrequency(ApplicationFrequencyEnum applicationFrequency) {
    this.applicationFrequency = applicationFrequency;
    return this;
  }

  /**
   * How frequently the fee/charge is applied to the account
   * @return applicationFrequency
   */
  @javax.annotation.Nonnull
  public ApplicationFrequencyEnum getApplicationFrequency() {
    return applicationFrequency;
  }

  public void setApplicationFrequency(ApplicationFrequencyEnum applicationFrequency) {
    this.applicationFrequency = applicationFrequency;
  }


  public FeeChargeDetailInner calculationFrequency(CalculationFrequencyEnum calculationFrequency) {
    this.calculationFrequency = calculationFrequency;
    return this;
  }

  /**
   * How frequently the fee/charge is calculated
   * @return calculationFrequency
   */
  @javax.annotation.Nonnull
  public CalculationFrequencyEnum getCalculationFrequency() {
    return calculationFrequency;
  }

  public void setCalculationFrequency(CalculationFrequencyEnum calculationFrequency) {
    this.calculationFrequency = calculationFrequency;
  }


  public FeeChargeDetailInner feeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
   * @return feeAmount
   */
  @javax.annotation.Nullable
  public String getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }


  public FeeChargeDetailInner feeApplicableRange(Object feeApplicableRange) {
    this.feeApplicableRange = feeApplicableRange;
    return this;
  }

  /**
   * Range or amounts or rates for which the fee/charge applies
   * @return feeApplicableRange
   */
  @javax.annotation.Nullable
  public Object getFeeApplicableRange() {
    return feeApplicableRange;
  }

  public void setFeeApplicableRange(Object feeApplicableRange) {
    this.feeApplicableRange = feeApplicableRange;
  }


  public FeeChargeDetailInner feeCategory(FeeCategoryEnum feeCategory) {
    this.feeCategory = feeCategory;
    return this;
  }

  /**
   * Categorisation of fees and charges into standard categories.
   * @return feeCategory
   */
  @javax.annotation.Nonnull
  public FeeCategoryEnum getFeeCategory() {
    return feeCategory;
  }

  public void setFeeCategory(FeeCategoryEnum feeCategory) {
    this.feeCategory = feeCategory;
  }


  public FeeChargeDetailInner feeRate(String feeRate) {
    this.feeRate = feeRate;
    return this;
  }

  /**
   * Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
   * @return feeRate
   */
  @javax.annotation.Nullable
  public String getFeeRate() {
    return feeRate;
  }

  public void setFeeRate(String feeRate) {
    this.feeRate = feeRate;
  }


  public FeeChargeDetailInner feeRateType(FeeRateTypeEnum feeRateType) {
    this.feeRateType = feeRateType;
    return this;
  }

  /**
   * Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
   * @return feeRateType
   */
  @javax.annotation.Nullable
  public FeeRateTypeEnum getFeeRateType() {
    return feeRateType;
  }

  public void setFeeRateType(FeeRateTypeEnum feeRateType) {
    this.feeRateType = feeRateType;
  }


  public FeeChargeDetailInner feeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
    return this;
  }

  /**
   * Fee/Charge Type
   * @return feeType
   */
  @javax.annotation.Nonnull
  public FeeTypeEnum getFeeType() {
    return feeType;
  }

  public void setFeeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
  }


  public FeeChargeDetailInner includedInMonthlyChargeIndicator(Boolean includedInMonthlyChargeIndicator) {
    this.includedInMonthlyChargeIndicator = includedInMonthlyChargeIndicator;
    return this;
  }

  /**
   * Indicates that fee/charge is already included in the monthly charge.
   * @return includedInMonthlyChargeIndicator
   */
  @javax.annotation.Nullable
  public Boolean getIncludedInMonthlyChargeIndicator() {
    return includedInMonthlyChargeIndicator;
  }

  public void setIncludedInMonthlyChargeIndicator(Boolean includedInMonthlyChargeIndicator) {
    this.includedInMonthlyChargeIndicator = includedInMonthlyChargeIndicator;
  }


  public FeeChargeDetailInner negotiableIndicator(Boolean negotiableIndicator) {
    this.negotiableIndicator = negotiableIndicator;
    return this;
  }

  /**
   * Fee/charge which is usually negotiable rather than a fixed amount
   * @return negotiableIndicator
   */
  @javax.annotation.Nullable
  public Boolean getNegotiableIndicator() {
    return negotiableIndicator;
  }

  public void setNegotiableIndicator(Boolean negotiableIndicator) {
    this.negotiableIndicator = negotiableIndicator;
  }


  public FeeChargeDetailInner notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public FeeChargeDetailInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Optional additional notes to supplement the fee/charge details.
   * @return notes
   */
  @javax.annotation.Nullable
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public FeeChargeDetailInner otherApplicationFrequency(Object otherApplicationFrequency) {
    this.otherApplicationFrequency = otherApplicationFrequency;
    return this;
  }

  /**
   * Other application frequencies not covered in the standard code list
   * @return otherApplicationFrequency
   */
  @javax.annotation.Nullable
  public Object getOtherApplicationFrequency() {
    return otherApplicationFrequency;
  }

  public void setOtherApplicationFrequency(Object otherApplicationFrequency) {
    this.otherApplicationFrequency = otherApplicationFrequency;
  }


  public FeeChargeDetailInner otherCalculationFrequency(Object otherCalculationFrequency) {
    this.otherCalculationFrequency = otherCalculationFrequency;
    return this;
  }

  /**
   * Other calculation frequency which is not available in standard code set.
   * @return otherCalculationFrequency
   */
  @javax.annotation.Nullable
  public Object getOtherCalculationFrequency() {
    return otherCalculationFrequency;
  }

  public void setOtherCalculationFrequency(Object otherCalculationFrequency) {
    this.otherCalculationFrequency = otherCalculationFrequency;
  }


  public FeeChargeDetailInner otherFeeCategory(Object otherFeeCategory) {
    this.otherFeeCategory = otherFeeCategory;
    return this;
  }

  /**
   * Get otherFeeCategory
   * @return otherFeeCategory
   */
  @javax.annotation.Nullable
  public Object getOtherFeeCategory() {
    return otherFeeCategory;
  }

  public void setOtherFeeCategory(Object otherFeeCategory) {
    this.otherFeeCategory = otherFeeCategory;
  }


  public FeeChargeDetailInner otherFeeRateType(Object otherFeeRateType) {
    this.otherFeeRateType = otherFeeRateType;
    return this;
  }

  /**
   * Other fee rate type which is not available in the standard code set
   * @return otherFeeRateType
   */
  @javax.annotation.Nullable
  public Object getOtherFeeRateType() {
    return otherFeeRateType;
  }

  public void setOtherFeeRateType(Object otherFeeRateType) {
    this.otherFeeRateType = otherFeeRateType;
  }


  public FeeChargeDetailInner otherFeeType(Object otherFeeType) {
    this.otherFeeType = otherFeeType;
    return this;
  }

  /**
   * Other Fee/charge type which is not available in the standard code set
   * @return otherFeeType
   */
  @javax.annotation.Nullable
  public Object getOtherFeeType() {
    return otherFeeType;
  }

  public void setOtherFeeType(Object otherFeeType) {
    this.otherFeeType = otherFeeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeChargeDetailInner feeChargeDetailInner = (FeeChargeDetailInner) o;
    return Objects.equals(this.applicationFrequency, feeChargeDetailInner.applicationFrequency) &&
        Objects.equals(this.calculationFrequency, feeChargeDetailInner.calculationFrequency) &&
        Objects.equals(this.feeAmount, feeChargeDetailInner.feeAmount) &&
        Objects.equals(this.feeApplicableRange, feeChargeDetailInner.feeApplicableRange) &&
        Objects.equals(this.feeCategory, feeChargeDetailInner.feeCategory) &&
        Objects.equals(this.feeRate, feeChargeDetailInner.feeRate) &&
        Objects.equals(this.feeRateType, feeChargeDetailInner.feeRateType) &&
        Objects.equals(this.feeType, feeChargeDetailInner.feeType) &&
        Objects.equals(this.includedInMonthlyChargeIndicator, feeChargeDetailInner.includedInMonthlyChargeIndicator) &&
        Objects.equals(this.negotiableIndicator, feeChargeDetailInner.negotiableIndicator) &&
        Objects.equals(this.notes, feeChargeDetailInner.notes) &&
        Objects.equals(this.otherApplicationFrequency, feeChargeDetailInner.otherApplicationFrequency) &&
        Objects.equals(this.otherCalculationFrequency, feeChargeDetailInner.otherCalculationFrequency) &&
        Objects.equals(this.otherFeeCategory, feeChargeDetailInner.otherFeeCategory) &&
        Objects.equals(this.otherFeeRateType, feeChargeDetailInner.otherFeeRateType) &&
        Objects.equals(this.otherFeeType, feeChargeDetailInner.otherFeeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationFrequency, calculationFrequency, feeAmount, feeApplicableRange, feeCategory, feeRate, feeRateType, feeType, includedInMonthlyChargeIndicator, negotiableIndicator, notes, otherApplicationFrequency, otherCalculationFrequency, otherFeeCategory, otherFeeRateType, otherFeeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeChargeDetailInner {\n");
    sb.append("    applicationFrequency: ").append(toIndentedString(applicationFrequency)).append("\n");
    sb.append("    calculationFrequency: ").append(toIndentedString(calculationFrequency)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    feeApplicableRange: ").append(toIndentedString(feeApplicableRange)).append("\n");
    sb.append("    feeCategory: ").append(toIndentedString(feeCategory)).append("\n");
    sb.append("    feeRate: ").append(toIndentedString(feeRate)).append("\n");
    sb.append("    feeRateType: ").append(toIndentedString(feeRateType)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    includedInMonthlyChargeIndicator: ").append(toIndentedString(includedInMonthlyChargeIndicator)).append("\n");
    sb.append("    negotiableIndicator: ").append(toIndentedString(negotiableIndicator)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherApplicationFrequency: ").append(toIndentedString(otherApplicationFrequency)).append("\n");
    sb.append("    otherCalculationFrequency: ").append(toIndentedString(otherCalculationFrequency)).append("\n");
    sb.append("    otherFeeCategory: ").append(toIndentedString(otherFeeCategory)).append("\n");
    sb.append("    otherFeeRateType: ").append(toIndentedString(otherFeeRateType)).append("\n");
    sb.append("    otherFeeType: ").append(toIndentedString(otherFeeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationFrequency");
    openapiFields.add("CalculationFrequency");
    openapiFields.add("FeeAmount");
    openapiFields.add("FeeApplicableRange");
    openapiFields.add("FeeCategory");
    openapiFields.add("FeeRate");
    openapiFields.add("FeeRateType");
    openapiFields.add("FeeType");
    openapiFields.add("IncludedInMonthlyChargeIndicator");
    openapiFields.add("NegotiableIndicator");
    openapiFields.add("Notes");
    openapiFields.add("OtherApplicationFrequency");
    openapiFields.add("OtherCalculationFrequency");
    openapiFields.add("OtherFeeCategory");
    openapiFields.add("OtherFeeRateType");
    openapiFields.add("OtherFeeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationFrequency");
    openapiRequiredFields.add("CalculationFrequency");
    openapiRequiredFields.add("FeeCategory");
    openapiRequiredFields.add("FeeType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeeChargeDetailInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeeChargeDetailInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeeChargeDetailInner is not found in the empty JSON string", FeeChargeDetailInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeeChargeDetailInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeeChargeDetailInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeeChargeDetailInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ApplicationFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationFrequency").toString()));
      }
      // validate the required field `ApplicationFrequency`
      ApplicationFrequencyEnum.validateJsonElement(jsonObj.get("ApplicationFrequency"));
      if (!jsonObj.get("CalculationFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CalculationFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CalculationFrequency").toString()));
      }
      // validate the required field `CalculationFrequency`
      CalculationFrequencyEnum.validateJsonElement(jsonObj.get("CalculationFrequency"));
      if ((jsonObj.get("FeeAmount") != null && !jsonObj.get("FeeAmount").isJsonNull()) && !jsonObj.get("FeeAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeAmount").toString()));
      }
      if (!jsonObj.get("FeeCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeCategory").toString()));
      }
      // validate the required field `FeeCategory`
      FeeCategoryEnum.validateJsonElement(jsonObj.get("FeeCategory"));
      if ((jsonObj.get("FeeRate") != null && !jsonObj.get("FeeRate").isJsonNull()) && !jsonObj.get("FeeRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeRate").toString()));
      }
      if ((jsonObj.get("FeeRateType") != null && !jsonObj.get("FeeRateType").isJsonNull()) && !jsonObj.get("FeeRateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeRateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeRateType").toString()));
      }
      // validate the optional field `FeeRateType`
      if (jsonObj.get("FeeRateType") != null && !jsonObj.get("FeeRateType").isJsonNull()) {
        FeeRateTypeEnum.validateJsonElement(jsonObj.get("FeeRateType"));
      }
      if (!jsonObj.get("FeeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeType").toString()));
      }
      // validate the required field `FeeType`
      FeeTypeEnum.validateJsonElement(jsonObj.get("FeeType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull() && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeeChargeDetailInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeeChargeDetailInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeeChargeDetailInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeeChargeDetailInner.class));

       return (TypeAdapter<T>) new TypeAdapter<FeeChargeDetailInner>() {
           @Override
           public void write(JsonWriter out, FeeChargeDetailInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeeChargeDetailInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeeChargeDetailInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeeChargeDetailInner
   * @throws IOException if the JSON string is invalid with respect to FeeChargeDetailInner
   */
  public static FeeChargeDetailInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeeChargeDetailInner.class);
  }

  /**
   * Convert an instance of FeeChargeDetailInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

