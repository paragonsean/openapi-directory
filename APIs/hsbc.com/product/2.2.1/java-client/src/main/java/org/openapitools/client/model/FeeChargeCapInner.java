/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OtherFeeTypeInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about any caps (maximum charges) that apply to a particular fee/charge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeeChargeCapInner {
  /**
   * Period e.g. day, week, month etc. for which the fee/charge is capped
   */
  @JsonAdapter(CappingPeriodEnum.Adapter.class)
  public enum CappingPeriodEnum {
    DAY("Day"),
    
    HALF_YEAR("Half Year"),
    
    MONTH("Month"),
    
    QUARTER("Quarter"),
    
    WEEK("Week"),
    
    ACADEMIC_TERM("AcademicTerm"),
    
    YEAR("Year");

    private String value;

    CappingPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CappingPeriodEnum fromValue(String value) {
      for (CappingPeriodEnum b : CappingPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CappingPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CappingPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CappingPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CappingPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CappingPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAPPING_PERIOD = "CappingPeriod";
  @SerializedName(SERIALIZED_NAME_CAPPING_PERIOD)
  private CappingPeriodEnum cappingPeriod;

  public static final String SERIALIZED_NAME_FEE_CAP_AMOUNT = "FeeCapAmount";
  @SerializedName(SERIALIZED_NAME_FEE_CAP_AMOUNT)
  private String feeCapAmount;

  public static final String SERIALIZED_NAME_FEE_CAP_OCCURRENCE = "FeeCapOccurrence";
  @SerializedName(SERIALIZED_NAME_FEE_CAP_OCCURRENCE)
  private Float feeCapOccurrence;

  /**
   * Fee/charge type which is being capped
   */
  @JsonAdapter(FeeTypeEnum.Adapter.class)
  public enum FeeTypeEnum {
    ATM_DEPOS_ATM_PAID_IN("ATMDeposATMPaidIn"),
    
    REPORT_CERT_BALANCE("ReportCertBalance"),
    
    ATM_ABROAD_CON_VISA_DEBIT("ATMAbroadConVisaDebit"),
    
    ATM_CARDNET_ENV_IN("ATMCardnetEnvIn"),
    
    ATM_CASH_GROUP_ATM_DEBIT_CARD("ATMCashGroupATMDebitCard"),
    
    ATM_CASH_NON_GROUP_ATM_DEBITCARD("ATMCashNonGroupATMDebitcard"),
    
    ATM_CON_GROUP_ATM("ATMConGroupATM"),
    
    ATM_ABROAD("ATMAbroad"),
    
    ATM_FOREIGN_CASH_DEB_CARD("ATMForeignCashDebCard"),
    
    ATM_ABROAD_GOLD_VISA_DEBIT("ATMAbroadGoldVisaDebit"),
    
    ATM_NON_STERLING_WITHDRAWAL("ATMNonSterlingWithdrawal"),
    
    ATM_ABROAD_VISA_DEBIT("ATMAbroadVisaDebit"),
    
    ATM_WITHDRAW_CASH("ATMWithdrawCash"),
    
    BACSON_LINE_ANCILLIARY("BACSOnLineAncilliary"),
    
    BACS_BATCH("BACSBatch"),
    
    BACSON_LINE_FILE("BACSOnLineFile"),
    
    BACS_ITEM("BACSItem"),
    
    BACS_BULK_BATCH("BACSBulkBatch"),
    
    BACSON_LINE_OVERLIMIT("BACSOnLineOverlimit"),
    
    BACSON_LINE_PAYMENT("BACSOnLinePayment"),
    
    BACSON_LINE_SERVICE("BACSOnLineService"),
    
    BACS_BULK_INTERNET("BACSBulkInternet"),
    
    BACSTEL_DIR_DEB_SMART_CARD("BACSTELDirDebSmartCard"),
    
    BACSTEL_DIR_DEB_WEB_INIT("BACSTELDirDebWebInit"),
    
    BACSTE_LIR_DEB_WEB_INIT("BACSTELirDebWebInit"),
    
    BACSTEL_DIR_DEB_OVERLIMIT("BACSTELDirDebOverlimit"),
    
    BACSTEL_DIR_DEB_PAYMENT("BACSTELDirDebPayment"),
    
    BACSTEL_DIR_DEB_SERVICE("BACSTELDirDebService"),
    
    BACSTEL_DIR_DEB_ANCILLIARY("BACSTELDirDebAncilliary"),
    
    BACSTEL_ANCILLIARY("BACSTELAncilliary"),
    
    BACSTEL_SMART_CARD("BACSTELSmartCard"),
    
    BACSTEL_FILE("BACSTELFile"),
    
    BACSTEL_OVERLIMIT("BACSTELOverlimit"),
    
    BACSTEL_PAYMENT("BACSTELPayment"),
    
    BACSTEL_SERVICE("BACSTELService"),
    
    CHAPS_OUT_BRANCH("CHAPSOutBranch"),
    
    CHAPS_OUT_ONLINE_DEPOSIT_ACC("CHAPSOutOnlineDepositAcc"),
    
    CHAPSIN("CHAPSIn"),
    
    CHAPS_OUT_POST("CHAPSOutPost"),
    
    CHAPS_OUT("CHAPSOut"),
    
    CHAPS_OUT_ONLINE("CHAPSOutOnline"),
    
    CHAPS_OUT_MANUAL("CHAPSOutManual"),
    
    CARD_CARD_REPLACEMENT("CardCardReplacement"),
    
    DRAFTS_BANKERS("DraftsBankers"),
    
    DRAFTS_CANCELLATION("DraftsCancellation"),
    
    CARD_GUARANTEED("CardGuaranteed"),
    
    DRAFTS_INTL_PAYABLE_ABROAD("DraftsIntlPayableAbroad"),
    
    DRAFTS_INTL_STOPPED_CANCELLED("DraftsIntlStoppedCancelled"),
    
    EURO_CHQ_X_LESS("EuroChqXLess"),
    
    EURO_CHQ_X_PLUS("EuroChqXPlus"),
    
    FPS_OUT("FPSOut"),
    
    FPS_OUT_OWN("FPSOutOwn"),
    
    FPSIN_BRANCH("FPSInBranch"),
    
    LEGAL_ARTICLES_REPORT("LegalArticlesReport"),
    
    LEGAL_SEALING("LegalSealing"),
    
    LEGAL_BOND_AND_GUARANTEE("LegalBondAndGuarantee"),
    
    LEGAL_CO_SEARCH("LegalCoSearch"),
    
    LEGAL_DEPOSIT_ASSIGNMENT("LegalDepositAssignment"),
    
    LEGAL_GUARANTEE_PREP("LegalGuaranteePrep"),
    
    LEGAL_LIFE_POLICY_PREP_CO("LegalLifePolicyPrepCo"),
    
    LEGAL_LIFE_POLICY_PREP_PERSONAL("LegalLifePolicyPrepPersonal"),
    
    LEGAL_PRIORITY_PARI_PASSU("LegalPriorityPariPassu"),
    
    LEGAL_SUBORDINATION_AGREEMENT("LegalSubordinationAgreement"),
    
    DIR_DEB_DIRECT_DEBIT_ADMIN("DirDebDirectDebitAdmin"),
    
    DIR_DEB_DIRECT_DEBIT_CANCEL("DirDebDirectDebitCancel"),
    
    INTL_PAY_BIB_FOREIGN_LIMIT("IntlPayBIBForeignLimit"),
    
    INTL_PAY_CREDIT_TRANS_CUST("IntlPayCreditTransCust"),
    
    INTL_PAY_CREDIT_TRANS_NON_CUST("IntlPayCreditTransNonCust"),
    
    INTL_PAY_EXPRESS_MONEY_MOVER("IntlPayExpressMoneyMover"),
    
    INTL_PAY_EEA_PAY_URGENT("IntlPayEEAPayUrgent"),
    
    INTL_PAY_IRISH_PAY_URGENT("IntlPayIrishPayUrgent"),
    
    INTL_PAY_EEA_PAY("IntlPayEEAPay"),
    
    INTL_PAY_FX_PAYMENT_IN("IntlPayFXPaymentIn"),
    
    INTL_PAY_FOREIGN_IN1_C_PLUS("IntlPayForeignIn1CPlus"),
    
    INTL_PAY_FOREIGN_CHARGE("IntlPayForeignCharge"),
    
    INTL_PAY_FOREIGN_INTERNET("IntlPayForeignInternet"),
    
    INTL_PAY_FOREIGN_IN_SUB1_C("IntlPayForeignInSub1C"),
    
    INTL_PAY_PURCHASE_NON_STERLING("IntlPayPurchaseNonSterling"),
    
    INTL_PAY_PAYMENT_TRACING("IntlPayPaymentTracing"),
    
    INTL_PAY_STANDARD_MONEY_MOVER("IntlPayStandardMoneyMover"),
    
    INTL_PAY_MT101_TRANSACTION("IntlPayMT101Transaction"),
    
    INTL_PAY_WORLDPAY_PAYMENT("IntlPayWorldpayPayment"),
    
    INV_PAY_BANK_DETAILS_WRONG("InvPayBankDetailsWrong"),
    
    INV_PAY_FOREIGN_BCNR("InvPayForeignBCNR"),
    
    INV_PAY_FOREIGN_RECALL("InvPayForeignRecall"),
    
    INV_GENERAL_INQ("InvGeneralInq"),
    
    INV_OLD_INSTRUCTION("InvOldInstruction"),
    
    INV_PAY_RETURN_DEBIT_XV_LESS("InvPayReturnDebitXVLess"),
    
    INV_PAY_RETURN_DEBIT_XV_PLUS("InvPayReturnDebitXVPlus"),
    
    INV_PAY_STOP_PAYMENT("InvPayStopPayment"),
    
    INV_PAY_STANDING_ORD_UNPAID("InvPayStandingOrdUnpaid"),
    
    SAFE_KEEP_ACCESS("SafeKeepAccess"),
    
    SAFE_KEEP_DEED_MEDIUM("SafeKeepDeedMedium"),
    
    SAFE_KEEPING_ENVELOPE("SafeKeepingEnvelope"),
    
    SAFE_KEEPING_INSPECTION("SafeKeepingInspection"),
    
    SAFE_KEEPING_LARGE_ITEM("SafeKeepingLargeItem"),
    
    SAFE_KEEP_MULTIPLE_ITEMS("SafeKeepMultipleItems"),
    
    SAFE_KEEPING_PARCEL("SafeKeepingParcel"),
    
    SAFE_KEEP_DEED_SMALL("SafeKeepDeedSmall"),
    
    SAFE_KEEP_ONE_ITEM("SafeKeepOneItem"),
    
    LOAN_ARRANGEMENT("LoanArrangement"),
    
    NIGHT_SAFE_NIGHT_SAFE_BANK_OPEN("NightSafeNightSafeBankOpen"),
    
    NIGHT_SAFE_CREDIT_SUB5_K("NightSafeCreditSub5K"),
    
    NIGHT_SAFE_NIGHT_SAFE("NightSafeNightSafe"),
    
    NIGHT_SAFE_NIGHT_SAFE_PAID_IN("NightSafeNightSafePaidIn"),
    
    PO_POST_OFFICE_COUNTER_CREDIT("POPostOfficeCounterCredit"),
    
    PO_POST_OFFICE_CASH_CREDIT("POPostOfficeCashCredit"),
    
    PO_POST_OFFICE_CASH_OUT("POPostOfficeCashOut"),
    
    PO_POST_OFFICE_WITHDRAWAL("POPostOfficeWithdrawal"),
    
    CHQ_BOOK_THEFT_LOSS_ALL_STOPPED("ChqBookTheftLossAllStopped"),
    
    CHQ_ISSUED_CURRENCY_ACC("ChqIssuedCurrencyAcc"),
    
    CHQ_COPY("ChqCopy"),
    
    CHQ_DRAFT("ChqDraft"),
    
    CHQ_IN("ChqIn"),
    
    CHQ_SPECIAL_CHQ_CLEARANCE("ChqSpecialChqClearance"),
    
    CHQ_OUT_ISSUED("ChqOutIssued"),
    
    CHQ_SPECIAL_CHQ_PRESENTATION("ChqSpecialChqPresentation"),
    
    CHQ_COUNTER_CHEQUE("ChqCounterCheque"),
    
    CHQ_CHEQUESWITH_STATEMENT("ChqChequeswithStatement"),
    
    CHQ_STOPPED("ChqStopped"),
    
    CHQ_TRANS("ChqTrans"),
    
    CHQ_DRAFT_FX("ChqDraftFX"),
    
    CHQ_FOREIGN_COURIER("ChqForeignCourier"),
    
    CHQ_FOREIGN_NEG_TEN_THOU("ChqForeignNegTenThou"),
    
    CHQ_FOREIGN_NEG_HUNDRED("ChqForeignNegHundred"),
    
    CHEQUE_FOREIGN_BANK_DIVI("ChequeForeignBankDivi"),
    
    CHQ_FOREIGN_NEG_FIFTY_THOU("ChqForeignNegFiftyThou"),
    
    CHQ_PENSION_CHEQUE("ChqPensionCheque"),
    
    CHEQUE_FOREIGN_OTHER_DIVI("ChequeForeignOtherDivi"),
    
    CHQ_FOREIGN_NEG_FIVE_THOU("ChqForeignNegFiveThou"),
    
    CHQ_FOREIGN_NEG_MAX("ChqForeignNegMax"),
    
    CHQ_FOREIGN_GBPMMD_PLUS("ChqForeignGBPMMDPlus"),
    
    CHQ_GIFT_CHEQUE("ChqGiftCheque"),
    
    CHQ_COUNTER_LODGEMENT("ChqCounterLodgement"),
    
    CHQ_CASH_DROP_LODGEMENT("ChqCashDropLodgement"),
    
    CHQ_FOREIGN("ChqForeign"),
    
    CHQ_CHEQUE_PHOTOCOPY("ChqChequePhotocopy"),
    
    CHQ_POST_OFFICE_CREDIT("ChqPostOfficeCredit"),
    
    CHQ_POST_OFFICE_CHEQUE_COLLECTED("ChqPostOfficeChequeCollected"),
    
    CHQ_CHEQUE_RETRIEVAL("ChqChequeRetrieval"),
    
    CHQ_RECONCILLIATION_PER_TRANS("ChqReconcilliationPerTrans"),
    
    CHQ_SPECIAL_PRESENTATION_COUNT("ChqSpecialPresentationCount"),
    
    CHQ_SPECIAL_PRESENTATION_PTT("ChqSpecialPresentationPTT"),
    
    CHQ_DRAFT_STERLING("ChqDraftSterling"),
    
    CHQ_UNPAID_CHARGE("ChqUnpaidCharge"),
    
    CHQ_UNPAID_TRANS_IN("ChqUnpaidTransIn"),
    
    CHQ_UNPAID_TRANS_OUT("ChqUnpaidTransOut"),
    
    CHQ_UNPAID_CHEQUE("ChqUnpaidCheque"),
    
    REPORT_AUDIT_LETTER("ReportAuditLetter"),
    
    REPORT_FAX_ADVICE_ADDITIONAL("ReportFAXAdviceAdditional"),
    
    REPORT_TEL_ADVICE_ADDITIONAL("ReportTelAdviceAdditional"),
    
    REPORT_CREDIT_HISTORY("ReportCreditHistory"),
    
    REPORT_CERT_INTEREST_DUPLICATE("ReportCertInterestDuplicate"),
    
    REPORT_CERT_INTEREST("ReportCertInterest"),
    
    REPORT_CREDIT_HISTORY_ADDITIONAL_IN_YEAR("ReportCreditHistoryAdditionalInYear"),
    
    REPORT_FOREIGN_STATUS_ENQ_ELEC("ReportForeignStatusEnqElec"),
    
    REPORT_FOREIGN_STATUS_ENQ("ReportForeignStatusEnq"),
    
    REPORT_STATEMENT_CHQ_DAILY("ReportStatementChqDaily"),
    
    REPORT_STATEMENT_CHQ_FORTNIGHTLY("ReportStatementChqFortnightly"),
    
    REPORT_STATEMENT_CHQ_MONTHLY("ReportStatementChqMonthly"),
    
    REPORT_STATEMENT_CHQ_WEEKLY("ReportStatementChqWeekly"),
    
    REPORT_STATEMENT_AND_DIVI_CHQ("ReportStatementAndDiviChq"),
    
    REPORT_REFERRAL_ITEM("ReportReferralItem"),
    
    REPORT_STATEMENT_BY_ATM("ReportStatementByATM"),
    
    REPORT_STATEMENT_BY_BRANCH("ReportStatementByBranch"),
    
    REPORT_STATEMENT_COPY_REGULAR("ReportStatementCopyRegular"),
    
    REPORT_STATEMENT_DAILY("ReportStatementDaily"),
    
    REPORT_STATUS_ENQUIRY("ReportStatusEnquiry"),
    
    REPORT_STATEMENT_FREQUENT("ReportStatementFrequent"),
    
    REPORT_STATEMENT_MONTHLY("ReportStatementMonthly"),
    
    REPORT_STATEMENT_COPY1("ReportStatementCopy1"),
    
    REPORT_STATEMENT_TO_BRANCH("ReportStatementToBranch"),
    
    REPORT_SMS_TEXT_MINI_STATEMENTOR_ALERT("ReportSMSTextMiniStatementorAlert"),
    
    REPORT_STATEMENT_FORTNIGHTLY("ReportStatementFortnightly"),
    
    REPORT_SMS_TEXT_MINI_STATEMENT_WO_M("ReportSMSTextMiniStatementWoM"),
    
    REPORT_SMS_TEXT_ALERT_BALANCE("ReportSMSTextAlertBalance"),
    
    REPORT_SMS_TEXT_ALERT("ReportSMSTextAlert"),
    
    REPORT_TAX_CERT("ReportTaxCert"),
    
    REPORT_WEEKLY_STATEMENT("ReportWeeklyStatement"),
    
    SEPA_BRANCH("SEPABranch"),
    
    SEPA_CREDIT("SEPACredit"),
    
    SEPA_DIRECT_DEBIT("SEPADirectDebit"),
    
    SEPAIN("SEPAIn"),
    
    SEPA_EURO("SEPAEuro"),
    
    SEPA_OUT("SEPAOut"),
    
    SEPA_UNPAID("SEPAUnpaid"),
    
    SEPA_WINBITS_TRANSACTION("SEPAWinbitsTransaction"),
    
    TRANS_BILL_PAYMENT_BRANCH("TransBillPaymentBranch"),
    
    TRANS_BILL_COLLECT("TransBillCollect"),
    
    TRANS_TELEPHONE_BILL_PAYMENT("TransTelephoneBillPayment"),
    
    TRANS_BANK_PAYMENT("TransBankPayment"),
    
    TRANS_BILL_PAYMENT_TELEPHONE("TransBillPaymentTelephone"),
    
    TRANS_CORRESPONDENT_BANK_FEE("TransCorrespondentBankFee"),
    
    TRANS_CREDIT_TRANSFER_UK_DIFFERENT("TransCreditTransferUKDifferent"),
    
    TRANS_CREDIT_TRANSFER_UK_SAME("TransCreditTransferUKSame"),
    
    TRANS_CREDIT("TransCredit"),
    
    TRANS_CREDIT_TRANSFER("TransCreditTransfer"),
    
    TRANS_BRANCH_CREDIT("TransBranchCredit"),
    
    TRANS_DEBIT("TransDebit"),
    
    TRANS_DEB_CARD_DEB("TransDebCardDeb"),
    
    TRANS_UK_DIR_DEB("TransUKDirDeb"),
    
    TRANS_MANUAL_DEB("TransManualDeb"),
    
    TITLE_DEEDS("TitleDeeds"),
    
    TRANS_BUY_FOREIGN_WITH_GBP("TransBuyForeignWithGBP"),
    
    TRANS_GOOD_VALUE_REQ("TransGoodValueReq"),
    
    TRANS_SWIFT_OUT_UK_FOREIGN("TransSWIFTOutUKForeign"),
    
    TRANS_INCONPLETE_INSTRUCTION("TransInconpleteInstruction"),
    
    TRANS_MANUAL_ENTRIES("TransManualEntries"),
    
    TRANS_MANUAL_TRANS("TransManualTrans"),
    
    TRANS_NON_STERLING("TransNonSterling"),
    
    OTHER("Other"),
    
    TRANS_POS_SALE_FOREIGN("TransPOSSaleForeign"),
    
    TRANS_PRI_PAYMENT_POST("TransPriPaymentPost"),
    
    TRANS_POS_SALE_UK("TransPOSSaleUK"),
    
    TRANS_RECONCILIATION_PER_TRANS("TransReconciliationPerTrans"),
    
    TRANS_STANDING_ORD_ADMIN("TransStandingOrdAdmin"),
    
    TRANS_STANDING_ORD("TransStandingOrd"),
    
    TRANS_STANDING_ORD_MAN_PAY("TransStandingOrdManPay"),
    
    TRANS_TEL_BUSI_PRI_PAYMENT_FOREIGN_TO_UK_ACC("TransTelBusiPriPaymentForeignToUKAcc"),
    
    TRANS_TELE_ITEM("TransTeleItem"),
    
    TRANS_TEL_BUSI_PRI_PAYMENT_TO_GRP_ACC("TransTelBusiPriPaymentToGrpAcc"),
    
    TRANS_TRANSFER_EX_GROUP("TransTransferExGroup"),
    
    TRANS_TEL_BUSI_PRI_PAYMENT_TO_NON_GRP_ACC("TransTelBusiPriPaymentToNonGrpAcc"),
    
    TRANS_SWIFT_OUT_NON_EEA_STERLING("TransSWIFTOutNonEEASterling"),
    
    AUTO_AUTO_CREDIT("AutoAutoCredit"),
    
    AUTO_AUTOMATED_ENTRIES("AutoAutomatedEntries"),
    
    AUTO_AUTO_CREDIT_PHONE_INET("AutoAutoCreditPhoneInet"),
    
    AUTO_AUTOMATED_TRANS("AutoAutomatedTrans"),
    
    AUTO_DEBIT_CARD_COMMERCIAL("AutoDebitCardCommercial"),
    
    AUTO_FPS_AUTO_CREDIT("AutoFPSAutoCredit"),
    
    VISA_TRAVELLERS_CHQOR_CURRENCY("VisaTravellersChqorCurrency"),
    
    ONLINE_INTERNET_BILL_PAYMENT("OnlineInternetBillPayment"),
    
    ONLINE_BUSINESS_ONLINE_EURO_PAYMENT("OnlineBusinessOnlineEuroPayment"),
    
    ONLINE_BUSINESS_ONLINE_URGENT_EURO_PAYMENT("OnlineBusinessOnlineUrgentEuroPayment"),
    
    ONLINE_BUSINESS_ONLINE_FOREIGN_PAYMENT("OnlineBusinessOnlineForeignPayment"),
    
    ONLINE_INTERBANK_TRANSFER("OnlineInterbankTransfer"),
    
    ONLINE_INTERBANK_PER_TRANSFER("OnlineInterbankPerTransfer"),
    
    ONLINE_INTERBRANCH_TRANSFER("OnlineInterbranchTransfer"),
    
    ONLINE_INTERBRANCH_PER_TRANSFER("OnlineInterbranchPerTransfer"),
    
    ONLINE_SUBSCRIPTION_MONTHLY("OnlineSubscriptionMonthly"),
    
    ONLINE_BANKING_PAYMENT("OnlineBankingPayment"),
    
    ONLINE_REPLACEMENT_CARD_READER("OnlineReplacementCardReader"),
    
    ONLINE_PAYMENTIN_GB_PTO_UK("OnlinePaymentinGBPtoUK"),
    
    ONLINE_URGENT_PAYMENT("OnlineUrgentPayment"),
    
    ONLINE_PAYMENTIN_US_DTO_US("OnlinePaymentinUSDtoUS"),
    
    ONLINE_BULK_DIRECT_DEB_STERLING("OnlineBulkDirectDebSterling"),
    
    FOREIGN_CHQ_SENT("ForeignChqSent"),
    
    FOREIGN_CHQ_SELF("ForeignChqSelf"),
    
    FOREIGN_CHQ_ENCASHMENT("ForeignChqEncashment"),
    
    FOREIGN_FX_INWARDS_CUST("ForeignFXInwardsCust"),
    
    FOREIGN_FX_TRANSFERS_ROI("ForeignFXTransfersROI"),
    
    FOREIGN_FX_FORWARD_TRANS("ForeignFXForwardTrans"),
    
    FOREIGN_EX_MAINTENANCE("ForeignExMaintenance"),
    
    FOREIGN_FX_INWARDS_NON_CUST("ForeignFXInwardsNonCust"),
    
    FOREIGN_FX_OUTWARDS("ForeignFXOutwards"),
    
    FOREIGN_PURCHASE("ForeignPurchase"),
    
    FOREIGN_STATUS_REP("ForeignStatusRep"),
    
    FOREIGN_CHQ_DRAFT("ForeignChqDraft"),
    
    FOREIGN_CHQ_C_LESS("ForeignChqCLess"),
    
    FOREIGN_CHQ_M_LESS("ForeignChqMLess"),
    
    FOREIGN_CHQ_OTHER("ForeignChqOther"),
    
    FOREIGN_CHQ_M_PLUS("ForeignChqMPlus"),
    
    FOREIGN_CHQ_CCC("ForeignChqCCC"),
    
    SERVICE_C_ACCOUNT_FEE("ServiceCAccountFee"),
    
    SERVICE_C_ACCOUNT_FEE_MONTHLY("ServiceCAccountFeeMonthly"),
    
    SERVICE_C_ACCOUNT_FEE_QUARTERLY("ServiceCAccountFeeQuarterly"),
    
    SERVICE_C_FIXED_TARIFF("ServiceCFixedTariff"),
    
    SERVICE_C_BUSI_DEP_ACC_BREAKAGE("ServiceCBusiDepAccBreakage"),
    
    SERVICE_C_MONITOR_DAILY("ServiceCMonitorDaily"),
    
    SERVICE_C_MINIMUM_MONTHLY_FEE("ServiceCMinimumMonthlyFee"),
    
    SERVICE_C_MONITOR_MONTHLY("ServiceCMonitorMonthly"),
    
    SERVICE_C_MONITOR_WEEKLY("ServiceCMonitorWeekly"),
    
    SERVICE_CMT940_ACCOUNT_FIRST("ServiceCMT940AccountFirst"),
    
    SERVICE_CMT940_ACCOUNT_SUBSEQUENT("ServiceCMT940AccountSubsequent"),
    
    SERVICE_C_OTHER("ServiceCOther"),
    
    COUNTER_COIN_HANDLING("CounterCoinHandling"),
    
    COUNTER_CASH_IN("CounterCashIn"),
    
    COUNTER_CASH_IN_NOT_US("CounterCashInNotUs"),
    
    COUNTER_CASH_OUT("CounterCashOut"),
    
    COUNTER_CASH_X("CounterCashX"),
    
    COUNTER_FOREIGN_NOTE_HANDLING("CounterForeignNoteHandling"),
    
    COUNTER_CASH_FEE_RATE("CounterCashFeeRate"),
    
    COUNTER_FOREIGN_CASH_OUT_TX("CounterForeignCashOutTx"),
    
    COUNTER_COUNTER_LODGEMENT("CounterCounterLodgement"),
    
    COUNTER_CASH_DROP_LODGEMENT("CounterCashDropLodgement"),
    
    COUNTER_NOTES_LODGED("CounterNotesLodged"),
    
    COUNTER_NOTES_OUT("CounterNotesOut"),
    
    COUNTER_CASH_IN_OWN("CounterCashInOwn"),
    
    COUNTER_CASH_FEE_PERCENT("CounterCashFeePercent");

    private String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeTypeEnum fromValue(String value) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEE_TYPE = "FeeType";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private List<FeeTypeEnum> feeType = new ArrayList<>();

  /**
   * Min Max type
   */
  @JsonAdapter(MinMaxTypeEnum.Adapter.class)
  public enum MinMaxTypeEnum {
    MINIMUM("Minimum"),
    
    MAXIMUM("Maximum");

    private String value;

    MinMaxTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinMaxTypeEnum fromValue(String value) {
      for (MinMaxTypeEnum b : MinMaxTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinMaxTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinMaxTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinMaxTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinMaxTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinMaxTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIN_MAX_TYPE = "MinMaxType";
  @SerializedName(SERIALIZED_NAME_MIN_MAX_TYPE)
  private MinMaxTypeEnum minMaxType;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_FEE_TYPE = "OtherFeeType";
  @SerializedName(SERIALIZED_NAME_OTHER_FEE_TYPE)
  private List<OtherFeeTypeInner> otherFeeType = new ArrayList<>();

  public FeeChargeCapInner() {
  }

  public FeeChargeCapInner cappingPeriod(CappingPeriodEnum cappingPeriod) {
    this.cappingPeriod = cappingPeriod;
    return this;
  }

  /**
   * Period e.g. day, week, month etc. for which the fee/charge is capped
   * @return cappingPeriod
   */
  @javax.annotation.Nullable
  public CappingPeriodEnum getCappingPeriod() {
    return cappingPeriod;
  }

  public void setCappingPeriod(CappingPeriodEnum cappingPeriod) {
    this.cappingPeriod = cappingPeriod;
  }


  public FeeChargeCapInner feeCapAmount(String feeCapAmount) {
    this.feeCapAmount = feeCapAmount;
    return this;
  }

  /**
   * Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
   * @return feeCapAmount
   */
  @javax.annotation.Nullable
  public String getFeeCapAmount() {
    return feeCapAmount;
  }

  public void setFeeCapAmount(String feeCapAmount) {
    this.feeCapAmount = feeCapAmount;
  }


  public FeeChargeCapInner feeCapOccurrence(Float feeCapOccurrence) {
    this.feeCapOccurrence = feeCapOccurrence;
    return this;
  }

  /**
   * fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
   * @return feeCapOccurrence
   */
  @javax.annotation.Nullable
  public Float getFeeCapOccurrence() {
    return feeCapOccurrence;
  }

  public void setFeeCapOccurrence(Float feeCapOccurrence) {
    this.feeCapOccurrence = feeCapOccurrence;
  }


  public FeeChargeCapInner feeType(List<FeeTypeEnum> feeType) {
    this.feeType = feeType;
    return this;
  }

  public FeeChargeCapInner addFeeTypeItem(FeeTypeEnum feeTypeItem) {
    if (this.feeType == null) {
      this.feeType = new ArrayList<>();
    }
    this.feeType.add(feeTypeItem);
    return this;
  }

  /**
   * Fee/charge type which is being capped
   * @return feeType
   */
  @javax.annotation.Nonnull
  public List<FeeTypeEnum> getFeeType() {
    return feeType;
  }

  public void setFeeType(List<FeeTypeEnum> feeType) {
    this.feeType = feeType;
  }


  public FeeChargeCapInner minMaxType(MinMaxTypeEnum minMaxType) {
    this.minMaxType = minMaxType;
    return this;
  }

  /**
   * Min Max type
   * @return minMaxType
   */
  @javax.annotation.Nonnull
  public MinMaxTypeEnum getMinMaxType() {
    return minMaxType;
  }

  public void setMinMaxType(MinMaxTypeEnum minMaxType) {
    this.minMaxType = minMaxType;
  }


  public FeeChargeCapInner notes(List<String> notes) {
    this.notes = notes;
    return this;
  }

  public FeeChargeCapInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

  /**
   * Free text for adding  extra details for fee charge cap
   * @return notes
   */
  @javax.annotation.Nullable
  public List<String> getNotes() {
    return notes;
  }

  public void setNotes(List<String> notes) {
    this.notes = notes;
  }


  public FeeChargeCapInner otherFeeType(List<OtherFeeTypeInner> otherFeeType) {
    this.otherFeeType = otherFeeType;
    return this;
  }

  public FeeChargeCapInner addOtherFeeTypeItem(OtherFeeTypeInner otherFeeTypeItem) {
    if (this.otherFeeType == null) {
      this.otherFeeType = new ArrayList<>();
    }
    this.otherFeeType.add(otherFeeTypeItem);
    return this;
  }

  /**
   * Other fee type code which is not available in the standard code set
   * @return otherFeeType
   */
  @javax.annotation.Nullable
  public List<OtherFeeTypeInner> getOtherFeeType() {
    return otherFeeType;
  }

  public void setOtherFeeType(List<OtherFeeTypeInner> otherFeeType) {
    this.otherFeeType = otherFeeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeChargeCapInner feeChargeCapInner = (FeeChargeCapInner) o;
    return Objects.equals(this.cappingPeriod, feeChargeCapInner.cappingPeriod) &&
        Objects.equals(this.feeCapAmount, feeChargeCapInner.feeCapAmount) &&
        Objects.equals(this.feeCapOccurrence, feeChargeCapInner.feeCapOccurrence) &&
        Objects.equals(this.feeType, feeChargeCapInner.feeType) &&
        Objects.equals(this.minMaxType, feeChargeCapInner.minMaxType) &&
        Objects.equals(this.notes, feeChargeCapInner.notes) &&
        Objects.equals(this.otherFeeType, feeChargeCapInner.otherFeeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cappingPeriod, feeCapAmount, feeCapOccurrence, feeType, minMaxType, notes, otherFeeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeChargeCapInner {\n");
    sb.append("    cappingPeriod: ").append(toIndentedString(cappingPeriod)).append("\n");
    sb.append("    feeCapAmount: ").append(toIndentedString(feeCapAmount)).append("\n");
    sb.append("    feeCapOccurrence: ").append(toIndentedString(feeCapOccurrence)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    minMaxType: ").append(toIndentedString(minMaxType)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherFeeType: ").append(toIndentedString(otherFeeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CappingPeriod");
    openapiFields.add("FeeCapAmount");
    openapiFields.add("FeeCapOccurrence");
    openapiFields.add("FeeType");
    openapiFields.add("MinMaxType");
    openapiFields.add("Notes");
    openapiFields.add("OtherFeeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FeeType");
    openapiRequiredFields.add("MinMaxType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeeChargeCapInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeeChargeCapInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeeChargeCapInner is not found in the empty JSON string", FeeChargeCapInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeeChargeCapInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeeChargeCapInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeeChargeCapInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CappingPeriod") != null && !jsonObj.get("CappingPeriod").isJsonNull()) && !jsonObj.get("CappingPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CappingPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CappingPeriod").toString()));
      }
      // validate the optional field `CappingPeriod`
      if (jsonObj.get("CappingPeriod") != null && !jsonObj.get("CappingPeriod").isJsonNull()) {
        CappingPeriodEnum.validateJsonElement(jsonObj.get("CappingPeriod"));
      }
      if ((jsonObj.get("FeeCapAmount") != null && !jsonObj.get("FeeCapAmount").isJsonNull()) && !jsonObj.get("FeeCapAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeCapAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeCapAmount").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("FeeType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("FeeType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeType` to be an array in the JSON string but got `%s`", jsonObj.get("FeeType").toString()));
      }
      if (!jsonObj.get("MinMaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MinMaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MinMaxType").toString()));
      }
      // validate the required field `MinMaxType`
      MinMaxTypeEnum.validateJsonElement(jsonObj.get("MinMaxType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull() && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if (jsonObj.get("OtherFeeType") != null && !jsonObj.get("OtherFeeType").isJsonNull()) {
        JsonArray jsonArrayotherFeeType = jsonObj.getAsJsonArray("OtherFeeType");
        if (jsonArrayotherFeeType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OtherFeeType").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OtherFeeType` to be an array in the JSON string but got `%s`", jsonObj.get("OtherFeeType").toString()));
          }

          // validate the optional field `OtherFeeType` (array)
          for (int i = 0; i < jsonArrayotherFeeType.size(); i++) {
            OtherFeeTypeInner.validateJsonElement(jsonArrayotherFeeType.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeeChargeCapInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeeChargeCapInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeeChargeCapInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeeChargeCapInner.class));

       return (TypeAdapter<T>) new TypeAdapter<FeeChargeCapInner>() {
           @Override
           public void write(JsonWriter out, FeeChargeCapInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeeChargeCapInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeeChargeCapInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeeChargeCapInner
   * @throws IOException if the JSON string is invalid with respect to FeeChargeCapInner
   */
  public static FeeChargeCapInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeeChargeCapInner.class);
  }

  /**
   * Convert an instance of FeeChargeCapInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

