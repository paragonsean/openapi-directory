/*
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeeChargeCapInner;
import org.openapitools.client.model.FeeChargeDetailInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details of fees and charges which are not associated with either Overdraft or features/benefits
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:49.501647-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OtherFeesChargesInner {
  public static final String SERIALIZED_NAME_FEE_CHARGE_CAP = "FeeChargeCap";
  @SerializedName(SERIALIZED_NAME_FEE_CHARGE_CAP)
  private List<FeeChargeCapInner> feeChargeCap = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEE_CHARGE_DETAIL = "FeeChargeDetail";
  @SerializedName(SERIALIZED_NAME_FEE_CHARGE_DETAIL)
  private List<FeeChargeDetailInner> feeChargeDetail = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_TARIFF_TYPE = "OtherTariffType";
  @SerializedName(SERIALIZED_NAME_OTHER_TARIFF_TYPE)
  private Object otherTariffType;

  public static final String SERIALIZED_NAME_TARIFF_NAME = "TariffName";
  @SerializedName(SERIALIZED_NAME_TARIFF_NAME)
  private String tariffName;

  /**
   * TariffType which defines the fee and charges.
   */
  @JsonAdapter(TariffTypeEnum.Adapter.class)
  public enum TariffTypeEnum {
    ELECTRONIC("Electronic"),
    
    MIXED("Mixed"),
    
    OTHER("Other");

    private String value;

    TariffTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TariffTypeEnum fromValue(String value) {
      for (TariffTypeEnum b : TariffTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TariffTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TariffTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TariffTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TariffTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TariffTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARIFF_TYPE = "TariffType";
  @SerializedName(SERIALIZED_NAME_TARIFF_TYPE)
  private TariffTypeEnum tariffType;

  public OtherFeesChargesInner() {
  }

  public OtherFeesChargesInner feeChargeCap(List<FeeChargeCapInner> feeChargeCap) {
    this.feeChargeCap = feeChargeCap;
    return this;
  }

  public OtherFeesChargesInner addFeeChargeCapItem(FeeChargeCapInner feeChargeCapItem) {
    if (this.feeChargeCap == null) {
      this.feeChargeCap = new ArrayList<>();
    }
    this.feeChargeCap.add(feeChargeCapItem);
    return this;
  }

  /**
   * Details about any caps (maximum charges) that apply to a particular fee/charge
   * @return feeChargeCap
   */
  @javax.annotation.Nullable
  public List<FeeChargeCapInner> getFeeChargeCap() {
    return feeChargeCap;
  }

  public void setFeeChargeCap(List<FeeChargeCapInner> feeChargeCap) {
    this.feeChargeCap = feeChargeCap;
  }


  public OtherFeesChargesInner feeChargeDetail(List<FeeChargeDetailInner> feeChargeDetail) {
    this.feeChargeDetail = feeChargeDetail;
    return this;
  }

  public OtherFeesChargesInner addFeeChargeDetailItem(FeeChargeDetailInner feeChargeDetailItem) {
    if (this.feeChargeDetail == null) {
      this.feeChargeDetail = new ArrayList<>();
    }
    this.feeChargeDetail.add(feeChargeDetailItem);
    return this;
  }

  /**
   * Other fees/charges details
   * @return feeChargeDetail
   */
  @javax.annotation.Nonnull
  public List<FeeChargeDetailInner> getFeeChargeDetail() {
    return feeChargeDetail;
  }

  public void setFeeChargeDetail(List<FeeChargeDetailInner> feeChargeDetail) {
    this.feeChargeDetail = feeChargeDetail;
  }


  public OtherFeesChargesInner otherTariffType(Object otherTariffType) {
    this.otherTariffType = otherTariffType;
    return this;
  }

  /**
   * Other tariff type which is not in the standard list.
   * @return otherTariffType
   */
  @javax.annotation.Nullable
  public Object getOtherTariffType() {
    return otherTariffType;
  }

  public void setOtherTariffType(Object otherTariffType) {
    this.otherTariffType = otherTariffType;
  }


  public OtherFeesChargesInner tariffName(String tariffName) {
    this.tariffName = tariffName;
    return this;
  }

  /**
   * Name of the tariff
   * @return tariffName
   */
  @javax.annotation.Nullable
  public String getTariffName() {
    return tariffName;
  }

  public void setTariffName(String tariffName) {
    this.tariffName = tariffName;
  }


  public OtherFeesChargesInner tariffType(TariffTypeEnum tariffType) {
    this.tariffType = tariffType;
    return this;
  }

  /**
   * TariffType which defines the fee and charges.
   * @return tariffType
   */
  @javax.annotation.Nullable
  public TariffTypeEnum getTariffType() {
    return tariffType;
  }

  public void setTariffType(TariffTypeEnum tariffType) {
    this.tariffType = tariffType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtherFeesChargesInner otherFeesChargesInner = (OtherFeesChargesInner) o;
    return Objects.equals(this.feeChargeCap, otherFeesChargesInner.feeChargeCap) &&
        Objects.equals(this.feeChargeDetail, otherFeesChargesInner.feeChargeDetail) &&
        Objects.equals(this.otherTariffType, otherFeesChargesInner.otherTariffType) &&
        Objects.equals(this.tariffName, otherFeesChargesInner.tariffName) &&
        Objects.equals(this.tariffType, otherFeesChargesInner.tariffType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feeChargeCap, feeChargeDetail, otherTariffType, tariffName, tariffType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtherFeesChargesInner {\n");
    sb.append("    feeChargeCap: ").append(toIndentedString(feeChargeCap)).append("\n");
    sb.append("    feeChargeDetail: ").append(toIndentedString(feeChargeDetail)).append("\n");
    sb.append("    otherTariffType: ").append(toIndentedString(otherTariffType)).append("\n");
    sb.append("    tariffName: ").append(toIndentedString(tariffName)).append("\n");
    sb.append("    tariffType: ").append(toIndentedString(tariffType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeeChargeCap");
    openapiFields.add("FeeChargeDetail");
    openapiFields.add("OtherTariffType");
    openapiFields.add("TariffName");
    openapiFields.add("TariffType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FeeChargeDetail");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtherFeesChargesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtherFeesChargesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtherFeesChargesInner is not found in the empty JSON string", OtherFeesChargesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtherFeesChargesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtherFeesChargesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OtherFeesChargesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("FeeChargeCap") != null && !jsonObj.get("FeeChargeCap").isJsonNull()) {
        JsonArray jsonArrayfeeChargeCap = jsonObj.getAsJsonArray("FeeChargeCap");
        if (jsonArrayfeeChargeCap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FeeChargeCap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FeeChargeCap` to be an array in the JSON string but got `%s`", jsonObj.get("FeeChargeCap").toString()));
          }

          // validate the optional field `FeeChargeCap` (array)
          for (int i = 0; i < jsonArrayfeeChargeCap.size(); i++) {
            FeeChargeCapInner.validateJsonElement(jsonArrayfeeChargeCap.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("FeeChargeDetail").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeChargeDetail` to be an array in the JSON string but got `%s`", jsonObj.get("FeeChargeDetail").toString()));
      }

      JsonArray jsonArrayfeeChargeDetail = jsonObj.getAsJsonArray("FeeChargeDetail");
      // validate the required field `FeeChargeDetail` (array)
      for (int i = 0; i < jsonArrayfeeChargeDetail.size(); i++) {
        FeeChargeDetailInner.validateJsonElement(jsonArrayfeeChargeDetail.get(i));
      };
      if ((jsonObj.get("TariffName") != null && !jsonObj.get("TariffName").isJsonNull()) && !jsonObj.get("TariffName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TariffName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TariffName").toString()));
      }
      if ((jsonObj.get("TariffType") != null && !jsonObj.get("TariffType").isJsonNull()) && !jsonObj.get("TariffType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TariffType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TariffType").toString()));
      }
      // validate the optional field `TariffType`
      if (jsonObj.get("TariffType") != null && !jsonObj.get("TariffType").isJsonNull()) {
        TariffTypeEnum.validateJsonElement(jsonObj.get("TariffType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtherFeesChargesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtherFeesChargesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtherFeesChargesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtherFeesChargesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OtherFeesChargesInner>() {
           @Override
           public void write(JsonWriter out, OtherFeesChargesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtherFeesChargesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtherFeesChargesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtherFeesChargesInner
   * @throws IOException if the JSON string is invalid with respect to OtherFeesChargesInner
   */
  public static OtherFeesChargesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtherFeesChargesInner.class);
  }

  /**
   * Convert an instance of OtherFeesChargesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

