/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepaymentHolidayInner from './RepaymentHolidayInner';

/**
 * The RepaymentInner model module.
 * @module model/RepaymentInner
 * @version 2.2.1
 */
class RepaymentInner {
    /**
     * Constructs a new <code>RepaymentInner</code>.
     * Repayment details of the Loan product
     * @alias module:model/RepaymentInner
     */
    constructor() { 
        
        RepaymentInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepaymentInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepaymentInner} obj Optional instance to populate.
     * @return {module:model/RepaymentInner} The populated <code>RepaymentInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepaymentInner();

            if (data.hasOwnProperty('AmountType')) {
                obj['AmountType'] = ApiClient.convertToType(data['AmountType'], 'String');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], ['String']);
            }
            if (data.hasOwnProperty('OtherAmountType')) {
                obj['OtherAmountType'] = ApiClient.convertToType(data['OtherAmountType'], Object);
            }
            if (data.hasOwnProperty('OtherRepaymentFrequency')) {
                obj['OtherRepaymentFrequency'] = ApiClient.convertToType(data['OtherRepaymentFrequency'], Object);
            }
            if (data.hasOwnProperty('OtherRepaymentType')) {
                obj['OtherRepaymentType'] = ApiClient.convertToType(data['OtherRepaymentType'], Object);
            }
            if (data.hasOwnProperty('RepaymentFeeCharges')) {
                obj['RepaymentFeeCharges'] = ApiClient.convertToType(data['RepaymentFeeCharges'], Object);
            }
            if (data.hasOwnProperty('RepaymentFrequency')) {
                obj['RepaymentFrequency'] = ApiClient.convertToType(data['RepaymentFrequency'], 'String');
            }
            if (data.hasOwnProperty('RepaymentHoliday')) {
                obj['RepaymentHoliday'] = ApiClient.convertToType(data['RepaymentHoliday'], [RepaymentHolidayInner]);
            }
            if (data.hasOwnProperty('RepaymentType')) {
                obj['RepaymentType'] = ApiClient.convertToType(data['RepaymentType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepaymentInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepaymentInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AmountType'] && !(typeof data['AmountType'] === 'string' || data['AmountType'] instanceof String)) {
            throw new Error("Expected the field `AmountType` to be a primitive type in the JSON string but got " + data['AmountType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Notes'])) {
            throw new Error("Expected the field `Notes` to be an array in the JSON data but got " + data['Notes']);
        }
        // ensure the json data is a string
        if (data['RepaymentFrequency'] && !(typeof data['RepaymentFrequency'] === 'string' || data['RepaymentFrequency'] instanceof String)) {
            throw new Error("Expected the field `RepaymentFrequency` to be a primitive type in the JSON string but got " + data['RepaymentFrequency']);
        }
        if (data['RepaymentHoliday']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['RepaymentHoliday'])) {
                throw new Error("Expected the field `RepaymentHoliday` to be an array in the JSON data but got " + data['RepaymentHoliday']);
            }
            // validate the optional field `RepaymentHoliday` (array)
            for (const item of data['RepaymentHoliday']) {
                RepaymentHolidayInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['RepaymentType'] && !(typeof data['RepaymentType'] === 'string' || data['RepaymentType'] instanceof String)) {
            throw new Error("Expected the field `RepaymentType` to be a primitive type in the JSON string but got " + data['RepaymentType']);
        }

        return true;
    }


}



/**
 * The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
 * @member {module:model/RepaymentInner.AmountTypeEnum} AmountType
 */
RepaymentInner.prototype['AmountType'] = undefined;

/**
 * Optional additional notes to supplement the Repayment
 * @member {Array.<String>} Notes
 */
RepaymentInner.prototype['Notes'] = undefined;

/**
 * Other amount type which is not in the standard code list
 * @member {Object} OtherAmountType
 */
RepaymentInner.prototype['OtherAmountType'] = undefined;

/**
 * Other repayment frequency which is not in the standard code list
 * @member {Object} OtherRepaymentFrequency
 */
RepaymentInner.prototype['OtherRepaymentFrequency'] = undefined;

/**
 * Other repayment type which is not in the standard code list
 * @member {Object} OtherRepaymentType
 */
RepaymentInner.prototype['OtherRepaymentType'] = undefined;

/**
 * Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.
 * @member {Object} RepaymentFeeCharges
 */
RepaymentInner.prototype['RepaymentFeeCharges'] = undefined;

/**
 * Repayment frequency
 * @member {module:model/RepaymentInner.RepaymentFrequencyEnum} RepaymentFrequency
 */
RepaymentInner.prototype['RepaymentFrequency'] = undefined;

/**
 * Details of capital repayment holiday if any
 * @member {Array.<module:model/RepaymentHolidayInner>} RepaymentHoliday
 */
RepaymentInner.prototype['RepaymentHoliday'] = undefined;

/**
 * Repayment type
 * @member {module:model/RepaymentInner.RepaymentTypeEnum} RepaymentType
 */
RepaymentInner.prototype['RepaymentType'] = undefined;





/**
 * Allowed values for the <code>AmountType</code> property.
 * @enum {String}
 * @readonly
 */
RepaymentInner['AmountTypeEnum'] = {

    /**
     * value: "BalanceToDate"
     * @const
     */
    "BalanceToDate": "BalanceToDate",

    /**
     * value: "Balloon"
     * @const
     */
    "Balloon": "Balloon",

    /**
     * value: "CapitalAndInterest"
     * @const
     */
    "CapitalAndInterest": "CapitalAndInterest",

    /**
     * value: "FeeChargeCap"
     * @const
     */
    "FeeChargeCap": "FeeChargeCap",

    /**
     * value: "InterestOnly"
     * @const
     */
    "InterestOnly": "InterestOnly",

    /**
     * value: "Bullet"
     * @const
     */
    "Bullet": "Bullet",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>RepaymentFrequency</code> property.
 * @enum {String}
 * @readonly
 */
RepaymentInner['RepaymentFrequencyEnum'] = {

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "Flexible"
     * @const
     */
    "Flexible": "Flexible",

    /**
     * value: "Fortnightly"
     * @const
     */
    "Fortnightly": "Fortnightly",

    /**
     * value: "HalfYearly"
     * @const
     */
    "HalfYearly": "HalfYearly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Quarterly"
     * @const
     */
    "Quarterly": "Quarterly",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Yearly"
     * @const
     */
    "Yearly": "Yearly"
};


/**
 * Allowed values for the <code>RepaymentType</code> property.
 * @enum {String}
 * @readonly
 */
RepaymentInner['RepaymentTypeEnum'] = {

    /**
     * value: "Balloon"
     * @const
     */
    "Balloon": "Balloon",

    /**
     * value: "Bullet"
     * @const
     */
    "Bullet": "Bullet",

    /**
     * value: "CapitalAndInterest"
     * @const
     */
    "CapitalAndInterest": "CapitalAndInterest",

    /**
     * value: "CustomSchedule"
     * @const
     */
    "CustomSchedule": "CustomSchedule",

    /**
     * value: "EarlyRepayment"
     * @const
     */
    "EarlyRepayment": "EarlyRepayment",

    /**
     * value: "FixedCapitalFullyAmortising"
     * @const
     */
    "FixedCapitalFullyAmortising": "FixedCapitalFullyAmortising",

    /**
     * value: "FixedCapitalWithBullet"
     * @const
     */
    "FixedCapitalWithBullet": "FixedCapitalWithBullet",

    /**
     * value: "FixedCapitalAndInterestReducingBalance"
     * @const
     */
    "FixedCapitalAndInterestReducingBalance": "FixedCapitalAndInterestReducingBalance",

    /**
     * value: "InterestOnly"
     * @const
     */
    "InterestOnly": "InterestOnly",

    /**
     * value: "PrepaymentFee"
     * @const
     */
    "PrepaymentFee": "PrepaymentFee",

    /**
     * value: "RepaymentWithBullet"
     * @const
     */
    "RepaymentWithBullet": "RepaymentWithBullet",

    /**
     * value: "StraightLineInterestOnly"
     * @const
     */
    "StraightLineInterestOnly": "StraightLineInterestOnly"
};



export default RepaymentInner;

