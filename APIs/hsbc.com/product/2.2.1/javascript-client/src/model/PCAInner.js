/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PCAMarketingStateInner from './PCAMarketingStateInner';

/**
 * The PCAInner model module.
 * @module model/PCAInner
 * @version 2.2.1
 */
class PCAInner {
    /**
     * Constructs a new <code>PCAInner</code>.
     * PCA&#39; means a personal current account. That is an account marketed to individuals rather than businesses, which provides the facility to place funds, withdraw cash, hold deposits and to execute payment transaction to and from third parties but does not include any of the following types of accounts:  (a) an account in which money is held on deposit in a currency other than sterling;  (b) current account mortgage, ie a single account comprising both a personal current account and a mortgage, which is regulated and marketed principally as a mortgage;   (c) savings accounts (including instant access savings accounts);   (d) credit card accounts where funds are usually paid in for the sole purpose of repaying a credit card debt; and  (e) e-money accounts.
     * @alias module:model/PCAInner
     * @param identification {String} The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
     * @param name {String} The name of the PCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
     * @param pCAMarketingState {Array.<module:model/PCAMarketingStateInner>} Describes the type of the known state (regular, promotional )  of the product.
     */
    constructor(identification, name, pCAMarketingState) { 
        
        PCAInner.initialize(this, identification, name, pCAMarketingState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identification, name, pCAMarketingState) { 
        obj['Identification'] = identification;
        obj['Name'] = name;
        obj['PCAMarketingState'] = pCAMarketingState;
    }

    /**
     * Constructs a <code>PCAInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PCAInner} obj Optional instance to populate.
     * @return {module:model/PCAInner} The populated <code>PCAInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PCAInner();

            if (data.hasOwnProperty('Identification')) {
                obj['Identification'] = ApiClient.convertToType(data['Identification'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], ['String']);
            }
            if (data.hasOwnProperty('OnSaleIndicator')) {
                obj['OnSaleIndicator'] = ApiClient.convertToType(data['OnSaleIndicator'], 'Boolean');
            }
            if (data.hasOwnProperty('PCAMarketingState')) {
                obj['PCAMarketingState'] = ApiClient.convertToType(data['PCAMarketingState'], [PCAMarketingStateInner]);
            }
            if (data.hasOwnProperty('Segment')) {
                obj['Segment'] = ApiClient.convertToType(data['Segment'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PCAInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PCAInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PCAInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Identification'] && !(typeof data['Identification'] === 'string' || data['Identification'] instanceof String)) {
            throw new Error("Expected the field `Identification` to be a primitive type in the JSON string but got " + data['Identification']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Notes'])) {
            throw new Error("Expected the field `Notes` to be an array in the JSON data but got " + data['Notes']);
        }
        if (data['PCAMarketingState']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PCAMarketingState'])) {
                throw new Error("Expected the field `PCAMarketingState` to be an array in the JSON data but got " + data['PCAMarketingState']);
            }
            // validate the optional field `PCAMarketingState` (array)
            for (const item of data['PCAMarketingState']) {
                PCAMarketingStateInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Segment'])) {
            throw new Error("Expected the field `Segment` to be an array in the JSON data but got " + data['Segment']);
        }

        return true;
    }


}

PCAInner.RequiredProperties = ["Identification", "Name", "PCAMarketingState"];

/**
 * The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
 * @member {String} Identification
 */
PCAInner.prototype['Identification'] = undefined;

/**
 * The name of the PCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
 * @member {String} Name
 */
PCAInner.prototype['Name'] = undefined;

/**
 * Optional additional notes to supplement the product details
 * @member {Array.<String>} Notes
 */
PCAInner.prototype['Notes'] = undefined;

/**
 * Indicates that the published product is OnSale(value 1) or Back Book (value 0) 
 * @member {Boolean} OnSaleIndicator
 */
PCAInner.prototype['OnSaleIndicator'] = undefined;

/**
 * Describes the type of the known state (regular, promotional )  of the product.
 * @member {Array.<module:model/PCAMarketingStateInner>} PCAMarketingState
 */
PCAInner.prototype['PCAMarketingState'] = undefined;

/**
 * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. For example, Basic PCA products target consumers with poor credit history, Reward PCA products target consumers who spend a lot, and Premium products target High Net Worth individuals.
 * @member {Array.<module:model/PCAInner.SegmentEnum>} Segment
 */
PCAInner.prototype['Segment'] = undefined;





/**
 * Allowed values for the <code>segment</code> property.
 * @enum {String}
 * @readonly
 */
PCAInner['SegmentEnum'] = {

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic",

    /**
     * value: "BenefitAndReward"
     * @const
     */
    "BenefitAndReward": "BenefitAndReward",

    /**
     * value: "CreditInterest"
     * @const
     */
    "CreditInterest": "CreditInterest",

    /**
     * value: "Cashback"
     * @const
     */
    "Cashback": "Cashback",

    /**
     * value: "General"
     * @const
     */
    "General": "General",

    /**
     * value: "Graduate"
     * @const
     */
    "Graduate": "Graduate",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "Overdraft"
     * @const
     */
    "Overdraft": "Overdraft",

    /**
     * value: "Packaged"
     * @const
     */
    "Packaged": "Packaged",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "Reward"
     * @const
     */
    "Reward": "Reward",

    /**
     * value: "Student"
     * @const
     */
    "Student": "Student",

    /**
     * value: "YoungAdult"
     * @const
     */
    "YoungAdult": "YoungAdult",

    /**
     * value: "Youth"
     * @const
     */
    "Youth": "Youth"
};



export default PCAInner;

