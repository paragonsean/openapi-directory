/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeeChargeCapInner from './FeeChargeCapInner';
import FeeChargeDetailInner from './FeeChargeDetailInner';

/**
 * The OtherFeesChargesInner model module.
 * @module model/OtherFeesChargesInner
 * @version 2.2.1
 */
class OtherFeesChargesInner {
    /**
     * Constructs a new <code>OtherFeesChargesInner</code>.
     * Contains details of fees and charges which are not associated with either Overdraft or features/benefits
     * @alias module:model/OtherFeesChargesInner
     * @param feeChargeDetail {Array.<module:model/FeeChargeDetailInner>} Other fees/charges details
     */
    constructor(feeChargeDetail) { 
        
        OtherFeesChargesInner.initialize(this, feeChargeDetail);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feeChargeDetail) { 
        obj['FeeChargeDetail'] = feeChargeDetail;
    }

    /**
     * Constructs a <code>OtherFeesChargesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OtherFeesChargesInner} obj Optional instance to populate.
     * @return {module:model/OtherFeesChargesInner} The populated <code>OtherFeesChargesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OtherFeesChargesInner();

            if (data.hasOwnProperty('FeeChargeCap')) {
                obj['FeeChargeCap'] = ApiClient.convertToType(data['FeeChargeCap'], [FeeChargeCapInner]);
            }
            if (data.hasOwnProperty('FeeChargeDetail')) {
                obj['FeeChargeDetail'] = ApiClient.convertToType(data['FeeChargeDetail'], [FeeChargeDetailInner]);
            }
            if (data.hasOwnProperty('OtherTariffType')) {
                obj['OtherTariffType'] = ApiClient.convertToType(data['OtherTariffType'], Object);
            }
            if (data.hasOwnProperty('TariffName')) {
                obj['TariffName'] = ApiClient.convertToType(data['TariffName'], 'String');
            }
            if (data.hasOwnProperty('TariffType')) {
                obj['TariffType'] = ApiClient.convertToType(data['TariffType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OtherFeesChargesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OtherFeesChargesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OtherFeesChargesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['FeeChargeCap']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['FeeChargeCap'])) {
                throw new Error("Expected the field `FeeChargeCap` to be an array in the JSON data but got " + data['FeeChargeCap']);
            }
            // validate the optional field `FeeChargeCap` (array)
            for (const item of data['FeeChargeCap']) {
                FeeChargeCapInner.validateJSON(item);
            };
        }
        if (data['FeeChargeDetail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['FeeChargeDetail'])) {
                throw new Error("Expected the field `FeeChargeDetail` to be an array in the JSON data but got " + data['FeeChargeDetail']);
            }
            // validate the optional field `FeeChargeDetail` (array)
            for (const item of data['FeeChargeDetail']) {
                FeeChargeDetailInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TariffName'] && !(typeof data['TariffName'] === 'string' || data['TariffName'] instanceof String)) {
            throw new Error("Expected the field `TariffName` to be a primitive type in the JSON string but got " + data['TariffName']);
        }
        // ensure the json data is a string
        if (data['TariffType'] && !(typeof data['TariffType'] === 'string' || data['TariffType'] instanceof String)) {
            throw new Error("Expected the field `TariffType` to be a primitive type in the JSON string but got " + data['TariffType']);
        }

        return true;
    }


}

OtherFeesChargesInner.RequiredProperties = ["FeeChargeDetail"];

/**
 * Details about any caps (maximum charges) that apply to a particular fee/charge
 * @member {Array.<module:model/FeeChargeCapInner>} FeeChargeCap
 */
OtherFeesChargesInner.prototype['FeeChargeCap'] = undefined;

/**
 * Other fees/charges details
 * @member {Array.<module:model/FeeChargeDetailInner>} FeeChargeDetail
 */
OtherFeesChargesInner.prototype['FeeChargeDetail'] = undefined;

/**
 * Other tariff type which is not in the standard list.
 * @member {Object} OtherTariffType
 */
OtherFeesChargesInner.prototype['OtherTariffType'] = undefined;

/**
 * Name of the tariff
 * @member {String} TariffName
 */
OtherFeesChargesInner.prototype['TariffName'] = undefined;

/**
 * TariffType which defines the fee and charges.
 * @member {module:model/OtherFeesChargesInner.TariffTypeEnum} TariffType
 */
OtherFeesChargesInner.prototype['TariffType'] = undefined;





/**
 * Allowed values for the <code>TariffType</code> property.
 * @enum {String}
 * @readonly
 */
OtherFeesChargesInner['TariffTypeEnum'] = {

    /**
     * value: "Electronic"
     * @const
     */
    "Electronic": "Electronic",

    /**
     * value: "Mixed"
     * @const
     */
    "Mixed": "Mixed",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default OtherFeesChargesInner;

