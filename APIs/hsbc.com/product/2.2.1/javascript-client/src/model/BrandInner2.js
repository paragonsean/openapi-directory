/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PCAInner from './PCAInner';

/**
 * The BrandInner2 model module.
 * @module model/BrandInner2
 * @version 2.2.1
 */
class BrandInner2 {
    /**
     * Constructs a new <code>BrandInner2</code>.
     * Brand registered by the banking group at https://register.fca.org.uk/
     * @alias module:model/BrandInner2
     * @param brandName {String} Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/
     * @param PCA {Array.<module:model/PCAInner>} PCA' means a personal current account. That is an account marketed to individuals rather than businesses, which provides the facility to place funds, withdraw cash, hold deposits and to execute payment transaction to and from third parties but does not include any of the following types of accounts:  (a) an account in which money is held on deposit in a currency other than sterling;  (b) current account mortgage, ie a single account comprising both a personal current account and a mortgage, which is regulated and marketed principally as a mortgage;   (c) savings accounts (including instant access savings accounts);   (d) credit card accounts where funds are usually paid in for the sole purpose of repaying a credit card debt; and  (e) e-money accounts.
     */
    constructor(brandName, PCA) { 
        
        BrandInner2.initialize(this, brandName, PCA);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brandName, PCA) { 
        obj['BrandName'] = brandName;
        obj['PCA'] = PCA;
    }

    /**
     * Constructs a <code>BrandInner2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrandInner2} obj Optional instance to populate.
     * @return {module:model/BrandInner2} The populated <code>BrandInner2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrandInner2();

            if (data.hasOwnProperty('BrandName')) {
                obj['BrandName'] = ApiClient.convertToType(data['BrandName'], 'String');
            }
            if (data.hasOwnProperty('PCA')) {
                obj['PCA'] = ApiClient.convertToType(data['PCA'], [PCAInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrandInner2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrandInner2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BrandInner2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['BrandName'] && !(typeof data['BrandName'] === 'string' || data['BrandName'] instanceof String)) {
            throw new Error("Expected the field `BrandName` to be a primitive type in the JSON string but got " + data['BrandName']);
        }
        if (data['PCA']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PCA'])) {
                throw new Error("Expected the field `PCA` to be an array in the JSON data but got " + data['PCA']);
            }
            // validate the optional field `PCA` (array)
            for (const item of data['PCA']) {
                PCAInner.validateJSON(item);
            };
        }

        return true;
    }


}

BrandInner2.RequiredProperties = ["BrandName", "PCA"];

/**
 * Brand Name that an organisation uses to market its products or services to a consumer as registered at https://register.fca.org.uk/
 * @member {String} BrandName
 */
BrandInner2.prototype['BrandName'] = undefined;

/**
 * PCA' means a personal current account. That is an account marketed to individuals rather than businesses, which provides the facility to place funds, withdraw cash, hold deposits and to execute payment transaction to and from third parties but does not include any of the following types of accounts:  (a) an account in which money is held on deposit in a currency other than sterling;  (b) current account mortgage, ie a single account comprising both a personal current account and a mortgage, which is regulated and marketed principally as a mortgage;   (c) savings accounts (including instant access savings accounts);   (d) credit card accounts where funds are usually paid in for the sole purpose of repaying a credit card debt; and  (e) e-money accounts.
 * @member {Array.<module:model/PCAInner>} PCA
 */
BrandInner2.prototype['PCA'] = undefined;






export default BrandInner2;

