/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BCAMarketingStateInner from './BCAMarketingStateInner';

/**
 * The BCAInner model module.
 * @module model/BCAInner
 * @version 2.2.1
 */
class BCAInner {
    /**
     * Constructs a new <code>BCAInner</code>.
     * BCA means a Business Current Account.
     * @alias module:model/BCAInner
     * @param bCAMarketingState {Array.<module:model/BCAMarketingStateInner>} The marketing state (promotional or regular) of the BCA Product.
     * @param identification {String} The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
     * @param name {String} The name of the BCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
     */
    constructor(bCAMarketingState, identification, name) { 
        
        BCAInner.initialize(this, bCAMarketingState, identification, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bCAMarketingState, identification, name) { 
        obj['BCAMarketingState'] = bCAMarketingState;
        obj['Identification'] = identification;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>BCAInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BCAInner} obj Optional instance to populate.
     * @return {module:model/BCAInner} The populated <code>BCAInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BCAInner();

            if (data.hasOwnProperty('BCAMarketingState')) {
                obj['BCAMarketingState'] = ApiClient.convertToType(data['BCAMarketingState'], [BCAMarketingStateInner]);
            }
            if (data.hasOwnProperty('FeeFreeLength')) {
                obj['FeeFreeLength'] = ApiClient.convertToType(data['FeeFreeLength'], 'Number');
            }
            if (data.hasOwnProperty('FeeFreeLengthPeriod')) {
                obj['FeeFreeLengthPeriod'] = ApiClient.convertToType(data['FeeFreeLengthPeriod'], 'String');
            }
            if (data.hasOwnProperty('Identification')) {
                obj['Identification'] = ApiClient.convertToType(data['Identification'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], ['String']);
            }
            if (data.hasOwnProperty('OnSaleIndicator')) {
                obj['OnSaleIndicator'] = ApiClient.convertToType(data['OnSaleIndicator'], 'Boolean');
            }
            if (data.hasOwnProperty('Segment')) {
                obj['Segment'] = ApiClient.convertToType(data['Segment'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BCAInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BCAInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BCAInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['BCAMarketingState']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['BCAMarketingState'])) {
                throw new Error("Expected the field `BCAMarketingState` to be an array in the JSON data but got " + data['BCAMarketingState']);
            }
            // validate the optional field `BCAMarketingState` (array)
            for (const item of data['BCAMarketingState']) {
                BCAMarketingStateInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['FeeFreeLengthPeriod'] && !(typeof data['FeeFreeLengthPeriod'] === 'string' || data['FeeFreeLengthPeriod'] instanceof String)) {
            throw new Error("Expected the field `FeeFreeLengthPeriod` to be a primitive type in the JSON string but got " + data['FeeFreeLengthPeriod']);
        }
        // ensure the json data is a string
        if (data['Identification'] && !(typeof data['Identification'] === 'string' || data['Identification'] instanceof String)) {
            throw new Error("Expected the field `Identification` to be a primitive type in the JSON string but got " + data['Identification']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Notes'])) {
            throw new Error("Expected the field `Notes` to be an array in the JSON data but got " + data['Notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Segment'])) {
            throw new Error("Expected the field `Segment` to be an array in the JSON data but got " + data['Segment']);
        }

        return true;
    }


}

BCAInner.RequiredProperties = ["BCAMarketingState", "Identification", "Name"];

/**
 * The marketing state (promotional or regular) of the BCA Product.
 * @member {Array.<module:model/BCAMarketingStateInner>} BCAMarketingState
 */
BCAInner.prototype['BCAMarketingState'] = undefined;

/**
 * The length/duration of the fee free period
 * @member {Number} FeeFreeLength
 */
BCAInner.prototype['FeeFreeLength'] = undefined;

/**
 * The unit of period (days, weeks, months etc.) of the promotional length
 * @member {module:model/BCAInner.FeeFreeLengthPeriodEnum} FeeFreeLengthPeriod
 */
BCAInner.prototype['FeeFreeLengthPeriod'] = undefined;

/**
 * The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
 * @member {String} Identification
 */
BCAInner.prototype['Identification'] = undefined;

/**
 * The name of the BCA product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
 * @member {String} Name
 */
BCAInner.prototype['Name'] = undefined;

/**
 * Optional additional notes to supplement the product details
 * @member {Array.<String>} Notes
 */
BCAInner.prototype['Notes'] = undefined;

/**
 * Indicates that the published product is OnSale(value 1) or Back Book (value 0) 
 * @member {Boolean} OnSaleIndicator
 */
BCAInner.prototype['OnSaleIndicator'] = undefined;

/**
 * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on.
 * @member {Array.<module:model/BCAInner.SegmentEnum>} Segment
 */
BCAInner.prototype['Segment'] = undefined;





/**
 * Allowed values for the <code>FeeFreeLengthPeriod</code> property.
 * @enum {String}
 * @readonly
 */
BCAInner['FeeFreeLengthPeriodEnum'] = {

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day",

    /**
     * value: "Half Year"
     * @const
     */
    "Half Year": "Half Year",

    /**
     * value: "Month"
     * @const
     */
    "Month": "Month",

    /**
     * value: "Quarter"
     * @const
     */
    "Quarter": "Quarter",

    /**
     * value: "Week"
     * @const
     */
    "Week": "Week",

    /**
     * value: "AcademicTerm"
     * @const
     */
    "AcademicTerm": "AcademicTerm",

    /**
     * value: "Year"
     * @const
     */
    "Year": "Year"
};


/**
 * Allowed values for the <code>segment</code> property.
 * @enum {String}
 * @readonly
 */
BCAInner['SegmentEnum'] = {

    /**
     * value: "ClientAccount"
     * @const
     */
    "ClientAccount": "ClientAccount",

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "NonCommercialChaitiesClbSoc"
     * @const
     */
    "NonCommercialChaitiesClbSoc": "NonCommercialChaitiesClbSoc",

    /**
     * value: "NonCommercialPublicAuthGovt"
     * @const
     */
    "NonCommercialPublicAuthGovt": "NonCommercialPublicAuthGovt",

    /**
     * value: "Religious"
     * @const
     */
    "Religious": "Religious",

    /**
     * value: "SectorSpecific"
     * @const
     */
    "SectorSpecific": "SectorSpecific",

    /**
     * value: "Startup"
     * @const
     */
    "Startup": "Startup",

    /**
     * value: "Switcher"
     * @const
     */
    "Switcher": "Switcher",

    /**
     * value: "NonCommercial"
     * @const
     */
    "NonCommercial": "NonCommercial"
};



export default BCAInner;

