/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CCCMarketingStateInner from './CCCMarketingStateInner';

/**
 * The CCCInner model module.
 * @module model/CCCInner
 * @version 2.2.1
 */
class CCCInner {
    /**
     * Constructs a new <code>CCCInner</code>.
     * CCC means a Commercial Credit Card.
     * @alias module:model/CCCInner
     * @param cCCMarketingState {Array.<module:model/CCCMarketingStateInner>} The marketing state (promotional or regular) of the CCC Product.
     * @param identification {String} The unique ID that has been internally assigned by the financial institution to each of the Commercial Credit Card products they market to their retail and/or small to medium enterprise (SME) customers.
     * @param name {String} The name of the CCC product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
     * @param segment {Array.<module:model/CCCInner.SegmentEnum>} Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to CCC products, they are segmented in relation to different markets that they wish to focus on.
     */
    constructor(cCCMarketingState, identification, name, segment) { 
        
        CCCInner.initialize(this, cCCMarketingState, identification, name, segment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cCCMarketingState, identification, name, segment) { 
        obj['CCCMarketingState'] = cCCMarketingState;
        obj['Identification'] = identification;
        obj['Name'] = name;
        obj['Segment'] = segment;
    }

    /**
     * Constructs a <code>CCCInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CCCInner} obj Optional instance to populate.
     * @return {module:model/CCCInner} The populated <code>CCCInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CCCInner();

            if (data.hasOwnProperty('CCCMarketingState')) {
                obj['CCCMarketingState'] = ApiClient.convertToType(data['CCCMarketingState'], [CCCMarketingStateInner]);
            }
            if (data.hasOwnProperty('Identification')) {
                obj['Identification'] = ApiClient.convertToType(data['Identification'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Segment')) {
                obj['Segment'] = ApiClient.convertToType(data['Segment'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CCCInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CCCInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CCCInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['CCCMarketingState']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CCCMarketingState'])) {
                throw new Error("Expected the field `CCCMarketingState` to be an array in the JSON data but got " + data['CCCMarketingState']);
            }
            // validate the optional field `CCCMarketingState` (array)
            for (const item of data['CCCMarketingState']) {
                CCCMarketingStateInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Identification'] && !(typeof data['Identification'] === 'string' || data['Identification'] instanceof String)) {
            throw new Error("Expected the field `Identification` to be a primitive type in the JSON string but got " + data['Identification']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Segment'])) {
            throw new Error("Expected the field `Segment` to be an array in the JSON data but got " + data['Segment']);
        }

        return true;
    }


}

CCCInner.RequiredProperties = ["CCCMarketingState", "Identification", "Name", "Segment"];

/**
 * The marketing state (promotional or regular) of the CCC Product.
 * @member {Array.<module:model/CCCMarketingStateInner>} CCCMarketingState
 */
CCCInner.prototype['CCCMarketingState'] = undefined;

/**
 * The unique ID that has been internally assigned by the financial institution to each of the Commercial Credit Card products they market to their retail and/or small to medium enterprise (SME) customers.
 * @member {String} Identification
 */
CCCInner.prototype['Identification'] = undefined;

/**
 * The name of the CCC product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
 * @member {String} Name
 */
CCCInner.prototype['Name'] = undefined;

/**
 * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  Follow us: Investopedia on Facebook  With respect to CCC products, they are segmented in relation to different markets that they wish to focus on.
 * @member {Array.<module:model/CCCInner.SegmentEnum>} Segment
 */
CCCInner.prototype['Segment'] = undefined;





/**
 * Allowed values for the <code>segment</code> property.
 * @enum {String}
 * @readonly
 */
CCCInner['SegmentEnum'] = {

    /**
     * value: "General"
     * @const
     */
    "General": "General"
};



export default CCCInner;

