/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeeChargeDetail_inner.h
 *
 * Other fees/charges details
 */

#ifndef OAIFeeChargeDetail_inner_H
#define OAIFeeChargeDetail_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFeeChargeDetail_inner : public OAIObject {
public:
    OAIFeeChargeDetail_inner();
    OAIFeeChargeDetail_inner(QString json);
    ~OAIFeeChargeDetail_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationFrequency() const;
    void setApplicationFrequency(const QString &application_frequency);
    bool is_application_frequency_Set() const;
    bool is_application_frequency_Valid() const;

    QString getCalculationFrequency() const;
    void setCalculationFrequency(const QString &calculation_frequency);
    bool is_calculation_frequency_Set() const;
    bool is_calculation_frequency_Valid() const;

    QString getFeeAmount() const;
    void setFeeAmount(const QString &fee_amount);
    bool is_fee_amount_Set() const;
    bool is_fee_amount_Valid() const;

    OAIObject getFeeApplicableRange() const;
    void setFeeApplicableRange(const OAIObject &fee_applicable_range);
    bool is_fee_applicable_range_Set() const;
    bool is_fee_applicable_range_Valid() const;

    QString getFeeCategory() const;
    void setFeeCategory(const QString &fee_category);
    bool is_fee_category_Set() const;
    bool is_fee_category_Valid() const;

    QString getFeeRate() const;
    void setFeeRate(const QString &fee_rate);
    bool is_fee_rate_Set() const;
    bool is_fee_rate_Valid() const;

    QString getFeeRateType() const;
    void setFeeRateType(const QString &fee_rate_type);
    bool is_fee_rate_type_Set() const;
    bool is_fee_rate_type_Valid() const;

    QString getFeeType() const;
    void setFeeType(const QString &fee_type);
    bool is_fee_type_Set() const;
    bool is_fee_type_Valid() const;

    bool isIncludedInMonthlyChargeIndicator() const;
    void setIncludedInMonthlyChargeIndicator(const bool &included_in_monthly_charge_indicator);
    bool is_included_in_monthly_charge_indicator_Set() const;
    bool is_included_in_monthly_charge_indicator_Valid() const;

    bool isNegotiableIndicator() const;
    void setNegotiableIndicator(const bool &negotiable_indicator);
    bool is_negotiable_indicator_Set() const;
    bool is_negotiable_indicator_Valid() const;

    QList<QString> getNotes() const;
    void setNotes(const QList<QString> &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    OAIObject getOtherApplicationFrequency() const;
    void setOtherApplicationFrequency(const OAIObject &other_application_frequency);
    bool is_other_application_frequency_Set() const;
    bool is_other_application_frequency_Valid() const;

    OAIObject getOtherCalculationFrequency() const;
    void setOtherCalculationFrequency(const OAIObject &other_calculation_frequency);
    bool is_other_calculation_frequency_Set() const;
    bool is_other_calculation_frequency_Valid() const;

    OAIObject getOtherFeeCategory() const;
    void setOtherFeeCategory(const OAIObject &other_fee_category);
    bool is_other_fee_category_Set() const;
    bool is_other_fee_category_Valid() const;

    OAIObject getOtherFeeRateType() const;
    void setOtherFeeRateType(const OAIObject &other_fee_rate_type);
    bool is_other_fee_rate_type_Set() const;
    bool is_other_fee_rate_type_Valid() const;

    OAIObject getOtherFeeType() const;
    void setOtherFeeType(const OAIObject &other_fee_type);
    bool is_other_fee_type_Set() const;
    bool is_other_fee_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_frequency;
    bool m_application_frequency_isSet;
    bool m_application_frequency_isValid;

    QString m_calculation_frequency;
    bool m_calculation_frequency_isSet;
    bool m_calculation_frequency_isValid;

    QString m_fee_amount;
    bool m_fee_amount_isSet;
    bool m_fee_amount_isValid;

    OAIObject m_fee_applicable_range;
    bool m_fee_applicable_range_isSet;
    bool m_fee_applicable_range_isValid;

    QString m_fee_category;
    bool m_fee_category_isSet;
    bool m_fee_category_isValid;

    QString m_fee_rate;
    bool m_fee_rate_isSet;
    bool m_fee_rate_isValid;

    QString m_fee_rate_type;
    bool m_fee_rate_type_isSet;
    bool m_fee_rate_type_isValid;

    QString m_fee_type;
    bool m_fee_type_isSet;
    bool m_fee_type_isValid;

    bool m_included_in_monthly_charge_indicator;
    bool m_included_in_monthly_charge_indicator_isSet;
    bool m_included_in_monthly_charge_indicator_isValid;

    bool m_negotiable_indicator;
    bool m_negotiable_indicator_isSet;
    bool m_negotiable_indicator_isValid;

    QList<QString> m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    OAIObject m_other_application_frequency;
    bool m_other_application_frequency_isSet;
    bool m_other_application_frequency_isValid;

    OAIObject m_other_calculation_frequency;
    bool m_other_calculation_frequency_isSet;
    bool m_other_calculation_frequency_isValid;

    OAIObject m_other_fee_category;
    bool m_other_fee_category_isSet;
    bool m_other_fee_category_isValid;

    OAIObject m_other_fee_rate_type;
    bool m_other_fee_rate_type_isSet;
    bool m_other_fee_rate_type_isValid;

    OAIObject m_other_fee_type;
    bool m_other_fee_type_isSet;
    bool m_other_fee_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeeChargeDetail_inner)

#endif // OAIFeeChargeDetail_inner_H
