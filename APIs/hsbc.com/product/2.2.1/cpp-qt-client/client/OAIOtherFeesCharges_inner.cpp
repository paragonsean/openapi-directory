/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtherFeesCharges_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOtherFeesCharges_inner::OAIOtherFeesCharges_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOtherFeesCharges_inner::OAIOtherFeesCharges_inner() {
    this->initializeModel();
}

OAIOtherFeesCharges_inner::~OAIOtherFeesCharges_inner() {}

void OAIOtherFeesCharges_inner::initializeModel() {

    m_fee_charge_cap_isSet = false;
    m_fee_charge_cap_isValid = false;

    m_fee_charge_detail_isSet = false;
    m_fee_charge_detail_isValid = false;

    m_other_tariff_type_isSet = false;
    m_other_tariff_type_isValid = false;

    m_tariff_name_isSet = false;
    m_tariff_name_isValid = false;

    m_tariff_type_isSet = false;
    m_tariff_type_isValid = false;
}

void OAIOtherFeesCharges_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOtherFeesCharges_inner::fromJsonObject(QJsonObject json) {

    m_fee_charge_cap_isValid = ::OpenAPI::fromJsonValue(m_fee_charge_cap, json[QString("FeeChargeCap")]);
    m_fee_charge_cap_isSet = !json[QString("FeeChargeCap")].isNull() && m_fee_charge_cap_isValid;

    m_fee_charge_detail_isValid = ::OpenAPI::fromJsonValue(m_fee_charge_detail, json[QString("FeeChargeDetail")]);
    m_fee_charge_detail_isSet = !json[QString("FeeChargeDetail")].isNull() && m_fee_charge_detail_isValid;

    m_other_tariff_type_isValid = ::OpenAPI::fromJsonValue(m_other_tariff_type, json[QString("OtherTariffType")]);
    m_other_tariff_type_isSet = !json[QString("OtherTariffType")].isNull() && m_other_tariff_type_isValid;

    m_tariff_name_isValid = ::OpenAPI::fromJsonValue(m_tariff_name, json[QString("TariffName")]);
    m_tariff_name_isSet = !json[QString("TariffName")].isNull() && m_tariff_name_isValid;

    m_tariff_type_isValid = ::OpenAPI::fromJsonValue(m_tariff_type, json[QString("TariffType")]);
    m_tariff_type_isSet = !json[QString("TariffType")].isNull() && m_tariff_type_isValid;
}

QString OAIOtherFeesCharges_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOtherFeesCharges_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_fee_charge_cap.size() > 0) {
        obj.insert(QString("FeeChargeCap"), ::OpenAPI::toJsonValue(m_fee_charge_cap));
    }
    if (m_fee_charge_detail.size() > 0) {
        obj.insert(QString("FeeChargeDetail"), ::OpenAPI::toJsonValue(m_fee_charge_detail));
    }
    if (m_other_tariff_type_isSet) {
        obj.insert(QString("OtherTariffType"), ::OpenAPI::toJsonValue(m_other_tariff_type));
    }
    if (m_tariff_name_isSet) {
        obj.insert(QString("TariffName"), ::OpenAPI::toJsonValue(m_tariff_name));
    }
    if (m_tariff_type_isSet) {
        obj.insert(QString("TariffType"), ::OpenAPI::toJsonValue(m_tariff_type));
    }
    return obj;
}

QList<OAIFeeChargeCap_inner> OAIOtherFeesCharges_inner::getFeeChargeCap() const {
    return m_fee_charge_cap;
}
void OAIOtherFeesCharges_inner::setFeeChargeCap(const QList<OAIFeeChargeCap_inner> &fee_charge_cap) {
    m_fee_charge_cap = fee_charge_cap;
    m_fee_charge_cap_isSet = true;
}

bool OAIOtherFeesCharges_inner::is_fee_charge_cap_Set() const{
    return m_fee_charge_cap_isSet;
}

bool OAIOtherFeesCharges_inner::is_fee_charge_cap_Valid() const{
    return m_fee_charge_cap_isValid;
}

QList<OAIFeeChargeDetail_inner> OAIOtherFeesCharges_inner::getFeeChargeDetail() const {
    return m_fee_charge_detail;
}
void OAIOtherFeesCharges_inner::setFeeChargeDetail(const QList<OAIFeeChargeDetail_inner> &fee_charge_detail) {
    m_fee_charge_detail = fee_charge_detail;
    m_fee_charge_detail_isSet = true;
}

bool OAIOtherFeesCharges_inner::is_fee_charge_detail_Set() const{
    return m_fee_charge_detail_isSet;
}

bool OAIOtherFeesCharges_inner::is_fee_charge_detail_Valid() const{
    return m_fee_charge_detail_isValid;
}

OAIObject OAIOtherFeesCharges_inner::getOtherTariffType() const {
    return m_other_tariff_type;
}
void OAIOtherFeesCharges_inner::setOtherTariffType(const OAIObject &other_tariff_type) {
    m_other_tariff_type = other_tariff_type;
    m_other_tariff_type_isSet = true;
}

bool OAIOtherFeesCharges_inner::is_other_tariff_type_Set() const{
    return m_other_tariff_type_isSet;
}

bool OAIOtherFeesCharges_inner::is_other_tariff_type_Valid() const{
    return m_other_tariff_type_isValid;
}

QString OAIOtherFeesCharges_inner::getTariffName() const {
    return m_tariff_name;
}
void OAIOtherFeesCharges_inner::setTariffName(const QString &tariff_name) {
    m_tariff_name = tariff_name;
    m_tariff_name_isSet = true;
}

bool OAIOtherFeesCharges_inner::is_tariff_name_Set() const{
    return m_tariff_name_isSet;
}

bool OAIOtherFeesCharges_inner::is_tariff_name_Valid() const{
    return m_tariff_name_isValid;
}

QString OAIOtherFeesCharges_inner::getTariffType() const {
    return m_tariff_type;
}
void OAIOtherFeesCharges_inner::setTariffType(const QString &tariff_type) {
    m_tariff_type = tariff_type;
    m_tariff_type_isSet = true;
}

bool OAIOtherFeesCharges_inner::is_tariff_type_Set() const{
    return m_tariff_type_isSet;
}

bool OAIOtherFeesCharges_inner::is_tariff_type_Valid() const{
    return m_tariff_type_isValid;
}

bool OAIOtherFeesCharges_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fee_charge_cap.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_charge_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_tariff_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tariff_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tariff_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOtherFeesCharges_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fee_charge_detail_isValid && true;
}

} // namespace OpenAPI
