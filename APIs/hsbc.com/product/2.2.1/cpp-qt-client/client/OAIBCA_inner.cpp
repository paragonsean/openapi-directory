/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBCA_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBCA_inner::OAIBCA_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBCA_inner::OAIBCA_inner() {
    this->initializeModel();
}

OAIBCA_inner::~OAIBCA_inner() {}

void OAIBCA_inner::initializeModel() {

    m_bca_marketing_state_isSet = false;
    m_bca_marketing_state_isValid = false;

    m_fee_free_length_isSet = false;
    m_fee_free_length_isValid = false;

    m_fee_free_length_period_isSet = false;
    m_fee_free_length_period_isValid = false;

    m_identification_isSet = false;
    m_identification_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_on_sale_indicator_isSet = false;
    m_on_sale_indicator_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;
}

void OAIBCA_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBCA_inner::fromJsonObject(QJsonObject json) {

    m_bca_marketing_state_isValid = ::OpenAPI::fromJsonValue(m_bca_marketing_state, json[QString("BCAMarketingState")]);
    m_bca_marketing_state_isSet = !json[QString("BCAMarketingState")].isNull() && m_bca_marketing_state_isValid;

    m_fee_free_length_isValid = ::OpenAPI::fromJsonValue(m_fee_free_length, json[QString("FeeFreeLength")]);
    m_fee_free_length_isSet = !json[QString("FeeFreeLength")].isNull() && m_fee_free_length_isValid;

    m_fee_free_length_period_isValid = ::OpenAPI::fromJsonValue(m_fee_free_length_period, json[QString("FeeFreeLengthPeriod")]);
    m_fee_free_length_period_isSet = !json[QString("FeeFreeLengthPeriod")].isNull() && m_fee_free_length_period_isValid;

    m_identification_isValid = ::OpenAPI::fromJsonValue(m_identification, json[QString("Identification")]);
    m_identification_isSet = !json[QString("Identification")].isNull() && m_identification_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_on_sale_indicator_isValid = ::OpenAPI::fromJsonValue(m_on_sale_indicator, json[QString("OnSaleIndicator")]);
    m_on_sale_indicator_isSet = !json[QString("OnSaleIndicator")].isNull() && m_on_sale_indicator_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("Segment")]);
    m_segment_isSet = !json[QString("Segment")].isNull() && m_segment_isValid;
}

QString OAIBCA_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBCA_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_bca_marketing_state.size() > 0) {
        obj.insert(QString("BCAMarketingState"), ::OpenAPI::toJsonValue(m_bca_marketing_state));
    }
    if (m_fee_free_length_isSet) {
        obj.insert(QString("FeeFreeLength"), ::OpenAPI::toJsonValue(m_fee_free_length));
    }
    if (m_fee_free_length_period_isSet) {
        obj.insert(QString("FeeFreeLengthPeriod"), ::OpenAPI::toJsonValue(m_fee_free_length_period));
    }
    if (m_identification_isSet) {
        obj.insert(QString("Identification"), ::OpenAPI::toJsonValue(m_identification));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_on_sale_indicator_isSet) {
        obj.insert(QString("OnSaleIndicator"), ::OpenAPI::toJsonValue(m_on_sale_indicator));
    }
    if (m_segment.size() > 0) {
        obj.insert(QString("Segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    return obj;
}

QList<OAIBCAMarketingState_inner> OAIBCA_inner::getBcaMarketingState() const {
    return m_bca_marketing_state;
}
void OAIBCA_inner::setBcaMarketingState(const QList<OAIBCAMarketingState_inner> &bca_marketing_state) {
    m_bca_marketing_state = bca_marketing_state;
    m_bca_marketing_state_isSet = true;
}

bool OAIBCA_inner::is_bca_marketing_state_Set() const{
    return m_bca_marketing_state_isSet;
}

bool OAIBCA_inner::is_bca_marketing_state_Valid() const{
    return m_bca_marketing_state_isValid;
}

float OAIBCA_inner::getFeeFreeLength() const {
    return m_fee_free_length;
}
void OAIBCA_inner::setFeeFreeLength(const float &fee_free_length) {
    m_fee_free_length = fee_free_length;
    m_fee_free_length_isSet = true;
}

bool OAIBCA_inner::is_fee_free_length_Set() const{
    return m_fee_free_length_isSet;
}

bool OAIBCA_inner::is_fee_free_length_Valid() const{
    return m_fee_free_length_isValid;
}

QString OAIBCA_inner::getFeeFreeLengthPeriod() const {
    return m_fee_free_length_period;
}
void OAIBCA_inner::setFeeFreeLengthPeriod(const QString &fee_free_length_period) {
    m_fee_free_length_period = fee_free_length_period;
    m_fee_free_length_period_isSet = true;
}

bool OAIBCA_inner::is_fee_free_length_period_Set() const{
    return m_fee_free_length_period_isSet;
}

bool OAIBCA_inner::is_fee_free_length_period_Valid() const{
    return m_fee_free_length_period_isValid;
}

QString OAIBCA_inner::getIdentification() const {
    return m_identification;
}
void OAIBCA_inner::setIdentification(const QString &identification) {
    m_identification = identification;
    m_identification_isSet = true;
}

bool OAIBCA_inner::is_identification_Set() const{
    return m_identification_isSet;
}

bool OAIBCA_inner::is_identification_Valid() const{
    return m_identification_isValid;
}

QString OAIBCA_inner::getName() const {
    return m_name;
}
void OAIBCA_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBCA_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBCA_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIBCA_inner::getNotes() const {
    return m_notes;
}
void OAIBCA_inner::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIBCA_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIBCA_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIBCA_inner::isOnSaleIndicator() const {
    return m_on_sale_indicator;
}
void OAIBCA_inner::setOnSaleIndicator(const bool &on_sale_indicator) {
    m_on_sale_indicator = on_sale_indicator;
    m_on_sale_indicator_isSet = true;
}

bool OAIBCA_inner::is_on_sale_indicator_Set() const{
    return m_on_sale_indicator_isSet;
}

bool OAIBCA_inner::is_on_sale_indicator_Valid() const{
    return m_on_sale_indicator_isValid;
}

QList<QString> OAIBCA_inner::getSegment() const {
    return m_segment;
}
void OAIBCA_inner::setSegment(const QList<QString> &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIBCA_inner::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIBCA_inner::is_segment_Valid() const{
    return m_segment_isValid;
}

bool OAIBCA_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bca_marketing_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_free_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_free_length_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_sale_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBCA_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bca_marketing_state_isValid && m_identification_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
