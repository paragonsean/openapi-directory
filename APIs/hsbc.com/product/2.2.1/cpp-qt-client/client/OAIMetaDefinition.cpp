/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetaDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetaDefinition::OAIMetaDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetaDefinition::OAIMetaDefinition() {
    this->initializeModel();
}

OAIMetaDefinition::~OAIMetaDefinition() {}

void OAIMetaDefinition::initializeModel() {

    m_agreement_isSet = false;
    m_agreement_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_terms_of_use_isSet = false;
    m_terms_of_use_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAIMetaDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetaDefinition::fromJsonObject(QJsonObject json) {

    m_agreement_isValid = ::OpenAPI::fromJsonValue(m_agreement, json[QString("Agreement")]);
    m_agreement_isSet = !json[QString("Agreement")].isNull() && m_agreement_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("License")]);
    m_license_isSet = !json[QString("License")].isNull() && m_license_isValid;

    m_terms_of_use_isValid = ::OpenAPI::fromJsonValue(m_terms_of_use, json[QString("TermsOfUse")]);
    m_terms_of_use_isSet = !json[QString("TermsOfUse")].isNull() && m_terms_of_use_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("TotalResults")]);
    m_total_results_isSet = !json[QString("TotalResults")].isNull() && m_total_results_isValid;
}

QString OAIMetaDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetaDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_isSet) {
        obj.insert(QString("Agreement"), ::OpenAPI::toJsonValue(m_agreement));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_license_isSet) {
        obj.insert(QString("License"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_terms_of_use_isSet) {
        obj.insert(QString("TermsOfUse"), ::OpenAPI::toJsonValue(m_terms_of_use));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("TotalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QString OAIMetaDefinition::getAgreement() const {
    return m_agreement;
}
void OAIMetaDefinition::setAgreement(const QString &agreement) {
    m_agreement = agreement;
    m_agreement_isSet = true;
}

bool OAIMetaDefinition::is_agreement_Set() const{
    return m_agreement_isSet;
}

bool OAIMetaDefinition::is_agreement_Valid() const{
    return m_agreement_isValid;
}

QDateTime OAIMetaDefinition::getLastUpdated() const {
    return m_last_updated;
}
void OAIMetaDefinition::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIMetaDefinition::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIMetaDefinition::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIMetaDefinition::getLicense() const {
    return m_license;
}
void OAIMetaDefinition::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIMetaDefinition::is_license_Set() const{
    return m_license_isSet;
}

bool OAIMetaDefinition::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIMetaDefinition::getTermsOfUse() const {
    return m_terms_of_use;
}
void OAIMetaDefinition::setTermsOfUse(const QString &terms_of_use) {
    m_terms_of_use = terms_of_use;
    m_terms_of_use_isSet = true;
}

bool OAIMetaDefinition::is_terms_of_use_Set() const{
    return m_terms_of_use_isSet;
}

bool OAIMetaDefinition::is_terms_of_use_Valid() const{
    return m_terms_of_use_isValid;
}

qint32 OAIMetaDefinition::getTotalResults() const {
    return m_total_results;
}
void OAIMetaDefinition::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIMetaDefinition::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIMetaDefinition::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIMetaDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetaDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agreement_isValid && m_last_updated_isValid && m_license_isValid && m_terms_of_use_isValid && m_total_results_isValid && true;
}

} // namespace OpenAPI
