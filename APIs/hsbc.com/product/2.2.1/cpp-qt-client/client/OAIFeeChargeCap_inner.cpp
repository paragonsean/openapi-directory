/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeeChargeCap_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeeChargeCap_inner::OAIFeeChargeCap_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeeChargeCap_inner::OAIFeeChargeCap_inner() {
    this->initializeModel();
}

OAIFeeChargeCap_inner::~OAIFeeChargeCap_inner() {}

void OAIFeeChargeCap_inner::initializeModel() {

    m_capping_period_isSet = false;
    m_capping_period_isValid = false;

    m_fee_cap_amount_isSet = false;
    m_fee_cap_amount_isValid = false;

    m_fee_cap_occurrence_isSet = false;
    m_fee_cap_occurrence_isValid = false;

    m_fee_type_isSet = false;
    m_fee_type_isValid = false;

    m_min_max_type_isSet = false;
    m_min_max_type_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_other_fee_type_isSet = false;
    m_other_fee_type_isValid = false;
}

void OAIFeeChargeCap_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeeChargeCap_inner::fromJsonObject(QJsonObject json) {

    m_capping_period_isValid = ::OpenAPI::fromJsonValue(m_capping_period, json[QString("CappingPeriod")]);
    m_capping_period_isSet = !json[QString("CappingPeriod")].isNull() && m_capping_period_isValid;

    m_fee_cap_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_cap_amount, json[QString("FeeCapAmount")]);
    m_fee_cap_amount_isSet = !json[QString("FeeCapAmount")].isNull() && m_fee_cap_amount_isValid;

    m_fee_cap_occurrence_isValid = ::OpenAPI::fromJsonValue(m_fee_cap_occurrence, json[QString("FeeCapOccurrence")]);
    m_fee_cap_occurrence_isSet = !json[QString("FeeCapOccurrence")].isNull() && m_fee_cap_occurrence_isValid;

    m_fee_type_isValid = ::OpenAPI::fromJsonValue(m_fee_type, json[QString("FeeType")]);
    m_fee_type_isSet = !json[QString("FeeType")].isNull() && m_fee_type_isValid;

    m_min_max_type_isValid = ::OpenAPI::fromJsonValue(m_min_max_type, json[QString("MinMaxType")]);
    m_min_max_type_isSet = !json[QString("MinMaxType")].isNull() && m_min_max_type_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_other_fee_type_isValid = ::OpenAPI::fromJsonValue(m_other_fee_type, json[QString("OtherFeeType")]);
    m_other_fee_type_isSet = !json[QString("OtherFeeType")].isNull() && m_other_fee_type_isValid;
}

QString OAIFeeChargeCap_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeeChargeCap_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_capping_period_isSet) {
        obj.insert(QString("CappingPeriod"), ::OpenAPI::toJsonValue(m_capping_period));
    }
    if (m_fee_cap_amount_isSet) {
        obj.insert(QString("FeeCapAmount"), ::OpenAPI::toJsonValue(m_fee_cap_amount));
    }
    if (m_fee_cap_occurrence_isSet) {
        obj.insert(QString("FeeCapOccurrence"), ::OpenAPI::toJsonValue(m_fee_cap_occurrence));
    }
    if (m_fee_type.size() > 0) {
        obj.insert(QString("FeeType"), ::OpenAPI::toJsonValue(m_fee_type));
    }
    if (m_min_max_type_isSet) {
        obj.insert(QString("MinMaxType"), ::OpenAPI::toJsonValue(m_min_max_type));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_other_fee_type.size() > 0) {
        obj.insert(QString("OtherFeeType"), ::OpenAPI::toJsonValue(m_other_fee_type));
    }
    return obj;
}

QString OAIFeeChargeCap_inner::getCappingPeriod() const {
    return m_capping_period;
}
void OAIFeeChargeCap_inner::setCappingPeriod(const QString &capping_period) {
    m_capping_period = capping_period;
    m_capping_period_isSet = true;
}

bool OAIFeeChargeCap_inner::is_capping_period_Set() const{
    return m_capping_period_isSet;
}

bool OAIFeeChargeCap_inner::is_capping_period_Valid() const{
    return m_capping_period_isValid;
}

QString OAIFeeChargeCap_inner::getFeeCapAmount() const {
    return m_fee_cap_amount;
}
void OAIFeeChargeCap_inner::setFeeCapAmount(const QString &fee_cap_amount) {
    m_fee_cap_amount = fee_cap_amount;
    m_fee_cap_amount_isSet = true;
}

bool OAIFeeChargeCap_inner::is_fee_cap_amount_Set() const{
    return m_fee_cap_amount_isSet;
}

bool OAIFeeChargeCap_inner::is_fee_cap_amount_Valid() const{
    return m_fee_cap_amount_isValid;
}

float OAIFeeChargeCap_inner::getFeeCapOccurrence() const {
    return m_fee_cap_occurrence;
}
void OAIFeeChargeCap_inner::setFeeCapOccurrence(const float &fee_cap_occurrence) {
    m_fee_cap_occurrence = fee_cap_occurrence;
    m_fee_cap_occurrence_isSet = true;
}

bool OAIFeeChargeCap_inner::is_fee_cap_occurrence_Set() const{
    return m_fee_cap_occurrence_isSet;
}

bool OAIFeeChargeCap_inner::is_fee_cap_occurrence_Valid() const{
    return m_fee_cap_occurrence_isValid;
}

QList<QString> OAIFeeChargeCap_inner::getFeeType() const {
    return m_fee_type;
}
void OAIFeeChargeCap_inner::setFeeType(const QList<QString> &fee_type) {
    m_fee_type = fee_type;
    m_fee_type_isSet = true;
}

bool OAIFeeChargeCap_inner::is_fee_type_Set() const{
    return m_fee_type_isSet;
}

bool OAIFeeChargeCap_inner::is_fee_type_Valid() const{
    return m_fee_type_isValid;
}

QString OAIFeeChargeCap_inner::getMinMaxType() const {
    return m_min_max_type;
}
void OAIFeeChargeCap_inner::setMinMaxType(const QString &min_max_type) {
    m_min_max_type = min_max_type;
    m_min_max_type_isSet = true;
}

bool OAIFeeChargeCap_inner::is_min_max_type_Set() const{
    return m_min_max_type_isSet;
}

bool OAIFeeChargeCap_inner::is_min_max_type_Valid() const{
    return m_min_max_type_isValid;
}

QList<QString> OAIFeeChargeCap_inner::getNotes() const {
    return m_notes;
}
void OAIFeeChargeCap_inner::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFeeChargeCap_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFeeChargeCap_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIOtherFeeType_inner> OAIFeeChargeCap_inner::getOtherFeeType() const {
    return m_other_fee_type;
}
void OAIFeeChargeCap_inner::setOtherFeeType(const QList<OAIOtherFeeType_inner> &other_fee_type) {
    m_other_fee_type = other_fee_type;
    m_other_fee_type_isSet = true;
}

bool OAIFeeChargeCap_inner::is_other_fee_type_Set() const{
    return m_other_fee_type_isSet;
}

bool OAIFeeChargeCap_inner::is_other_fee_type_Valid() const{
    return m_other_fee_type_isValid;
}

bool OAIFeeChargeCap_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capping_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_cap_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_cap_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_max_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_fee_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeeChargeCap_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fee_type_isValid && m_min_max_type_isValid && true;
}

} // namespace OpenAPI
