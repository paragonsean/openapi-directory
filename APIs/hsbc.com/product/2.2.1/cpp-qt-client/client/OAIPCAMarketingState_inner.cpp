/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPCAMarketingState_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPCAMarketingState_inner::OAIPCAMarketingState_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPCAMarketingState_inner::OAIPCAMarketingState_inner() {
    this->initializeModel();
}

OAIPCAMarketingState_inner::~OAIPCAMarketingState_inner() {}

void OAIPCAMarketingState_inner::initializeModel() {

    m_core_product_isSet = false;
    m_core_product_isValid = false;

    m_credit_interest_isSet = false;
    m_credit_interest_isValid = false;

    m_eligibility_isSet = false;
    m_eligibility_isValid = false;

    m_features_and_benefits_isSet = false;
    m_features_and_benefits_isValid = false;

    m_first_marketed_date_isSet = false;
    m_first_marketed_date_isValid = false;

    m_identification_isSet = false;
    m_identification_isValid = false;

    m_last_marketed_date_isSet = false;
    m_last_marketed_date_isValid = false;

    m_marketing_state_isSet = false;
    m_marketing_state_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_other_fees_charges_isSet = false;
    m_other_fees_charges_isValid = false;

    m_overdraft_isSet = false;
    m_overdraft_isValid = false;

    m_predecessor_id_isSet = false;
    m_predecessor_id_isValid = false;

    m_state_tenure_length_isSet = false;
    m_state_tenure_length_isValid = false;

    m_state_tenure_period_isSet = false;
    m_state_tenure_period_isValid = false;
}

void OAIPCAMarketingState_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPCAMarketingState_inner::fromJsonObject(QJsonObject json) {

    m_core_product_isValid = ::OpenAPI::fromJsonValue(m_core_product, json[QString("CoreProduct")]);
    m_core_product_isSet = !json[QString("CoreProduct")].isNull() && m_core_product_isValid;

    m_credit_interest_isValid = ::OpenAPI::fromJsonValue(m_credit_interest, json[QString("CreditInterest")]);
    m_credit_interest_isSet = !json[QString("CreditInterest")].isNull() && m_credit_interest_isValid;

    m_eligibility_isValid = ::OpenAPI::fromJsonValue(m_eligibility, json[QString("Eligibility")]);
    m_eligibility_isSet = !json[QString("Eligibility")].isNull() && m_eligibility_isValid;

    m_features_and_benefits_isValid = ::OpenAPI::fromJsonValue(m_features_and_benefits, json[QString("FeaturesAndBenefits")]);
    m_features_and_benefits_isSet = !json[QString("FeaturesAndBenefits")].isNull() && m_features_and_benefits_isValid;

    m_first_marketed_date_isValid = ::OpenAPI::fromJsonValue(m_first_marketed_date, json[QString("FirstMarketedDate")]);
    m_first_marketed_date_isSet = !json[QString("FirstMarketedDate")].isNull() && m_first_marketed_date_isValid;

    m_identification_isValid = ::OpenAPI::fromJsonValue(m_identification, json[QString("Identification")]);
    m_identification_isSet = !json[QString("Identification")].isNull() && m_identification_isValid;

    m_last_marketed_date_isValid = ::OpenAPI::fromJsonValue(m_last_marketed_date, json[QString("LastMarketedDate")]);
    m_last_marketed_date_isSet = !json[QString("LastMarketedDate")].isNull() && m_last_marketed_date_isValid;

    m_marketing_state_isValid = ::OpenAPI::fromJsonValue(m_marketing_state, json[QString("MarketingState")]);
    m_marketing_state_isSet = !json[QString("MarketingState")].isNull() && m_marketing_state_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_other_fees_charges_isValid = ::OpenAPI::fromJsonValue(m_other_fees_charges, json[QString("OtherFeesCharges")]);
    m_other_fees_charges_isSet = !json[QString("OtherFeesCharges")].isNull() && m_other_fees_charges_isValid;

    m_overdraft_isValid = ::OpenAPI::fromJsonValue(m_overdraft, json[QString("Overdraft")]);
    m_overdraft_isSet = !json[QString("Overdraft")].isNull() && m_overdraft_isValid;

    m_predecessor_id_isValid = ::OpenAPI::fromJsonValue(m_predecessor_id, json[QString("PredecessorID")]);
    m_predecessor_id_isSet = !json[QString("PredecessorID")].isNull() && m_predecessor_id_isValid;

    m_state_tenure_length_isValid = ::OpenAPI::fromJsonValue(m_state_tenure_length, json[QString("StateTenureLength")]);
    m_state_tenure_length_isSet = !json[QString("StateTenureLength")].isNull() && m_state_tenure_length_isValid;

    m_state_tenure_period_isValid = ::OpenAPI::fromJsonValue(m_state_tenure_period, json[QString("StateTenurePeriod")]);
    m_state_tenure_period_isSet = !json[QString("StateTenurePeriod")].isNull() && m_state_tenure_period_isValid;
}

QString OAIPCAMarketingState_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPCAMarketingState_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_core_product_isSet) {
        obj.insert(QString("CoreProduct"), ::OpenAPI::toJsonValue(m_core_product));
    }
    if (m_credit_interest_isSet) {
        obj.insert(QString("CreditInterest"), ::OpenAPI::toJsonValue(m_credit_interest));
    }
    if (m_eligibility_isSet) {
        obj.insert(QString("Eligibility"), ::OpenAPI::toJsonValue(m_eligibility));
    }
    if (m_features_and_benefits_isSet) {
        obj.insert(QString("FeaturesAndBenefits"), ::OpenAPI::toJsonValue(m_features_and_benefits));
    }
    if (m_first_marketed_date_isSet) {
        obj.insert(QString("FirstMarketedDate"), ::OpenAPI::toJsonValue(m_first_marketed_date));
    }
    if (m_identification_isSet) {
        obj.insert(QString("Identification"), ::OpenAPI::toJsonValue(m_identification));
    }
    if (m_last_marketed_date_isSet) {
        obj.insert(QString("LastMarketedDate"), ::OpenAPI::toJsonValue(m_last_marketed_date));
    }
    if (m_marketing_state_isSet) {
        obj.insert(QString("MarketingState"), ::OpenAPI::toJsonValue(m_marketing_state));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_other_fees_charges_isSet) {
        obj.insert(QString("OtherFeesCharges"), ::OpenAPI::toJsonValue(m_other_fees_charges));
    }
    if (m_overdraft_isSet) {
        obj.insert(QString("Overdraft"), ::OpenAPI::toJsonValue(m_overdraft));
    }
    if (m_predecessor_id_isSet) {
        obj.insert(QString("PredecessorID"), ::OpenAPI::toJsonValue(m_predecessor_id));
    }
    if (m_state_tenure_length_isSet) {
        obj.insert(QString("StateTenureLength"), ::OpenAPI::toJsonValue(m_state_tenure_length));
    }
    if (m_state_tenure_period_isSet) {
        obj.insert(QString("StateTenurePeriod"), ::OpenAPI::toJsonValue(m_state_tenure_period));
    }
    return obj;
}

OAIObject OAIPCAMarketingState_inner::getCoreProduct() const {
    return m_core_product;
}
void OAIPCAMarketingState_inner::setCoreProduct(const OAIObject &core_product) {
    m_core_product = core_product;
    m_core_product_isSet = true;
}

bool OAIPCAMarketingState_inner::is_core_product_Set() const{
    return m_core_product_isSet;
}

bool OAIPCAMarketingState_inner::is_core_product_Valid() const{
    return m_core_product_isValid;
}

OAIObject OAIPCAMarketingState_inner::getCreditInterest() const {
    return m_credit_interest;
}
void OAIPCAMarketingState_inner::setCreditInterest(const OAIObject &credit_interest) {
    m_credit_interest = credit_interest;
    m_credit_interest_isSet = true;
}

bool OAIPCAMarketingState_inner::is_credit_interest_Set() const{
    return m_credit_interest_isSet;
}

bool OAIPCAMarketingState_inner::is_credit_interest_Valid() const{
    return m_credit_interest_isValid;
}

OAIObject OAIPCAMarketingState_inner::getEligibility() const {
    return m_eligibility;
}
void OAIPCAMarketingState_inner::setEligibility(const OAIObject &eligibility) {
    m_eligibility = eligibility;
    m_eligibility_isSet = true;
}

bool OAIPCAMarketingState_inner::is_eligibility_Set() const{
    return m_eligibility_isSet;
}

bool OAIPCAMarketingState_inner::is_eligibility_Valid() const{
    return m_eligibility_isValid;
}

OAIObject OAIPCAMarketingState_inner::getFeaturesAndBenefits() const {
    return m_features_and_benefits;
}
void OAIPCAMarketingState_inner::setFeaturesAndBenefits(const OAIObject &features_and_benefits) {
    m_features_and_benefits = features_and_benefits;
    m_features_and_benefits_isSet = true;
}

bool OAIPCAMarketingState_inner::is_features_and_benefits_Set() const{
    return m_features_and_benefits_isSet;
}

bool OAIPCAMarketingState_inner::is_features_and_benefits_Valid() const{
    return m_features_and_benefits_isValid;
}

QDate OAIPCAMarketingState_inner::getFirstMarketedDate() const {
    return m_first_marketed_date;
}
void OAIPCAMarketingState_inner::setFirstMarketedDate(const QDate &first_marketed_date) {
    m_first_marketed_date = first_marketed_date;
    m_first_marketed_date_isSet = true;
}

bool OAIPCAMarketingState_inner::is_first_marketed_date_Set() const{
    return m_first_marketed_date_isSet;
}

bool OAIPCAMarketingState_inner::is_first_marketed_date_Valid() const{
    return m_first_marketed_date_isValid;
}

QString OAIPCAMarketingState_inner::getIdentification() const {
    return m_identification;
}
void OAIPCAMarketingState_inner::setIdentification(const QString &identification) {
    m_identification = identification;
    m_identification_isSet = true;
}

bool OAIPCAMarketingState_inner::is_identification_Set() const{
    return m_identification_isSet;
}

bool OAIPCAMarketingState_inner::is_identification_Valid() const{
    return m_identification_isValid;
}

QDate OAIPCAMarketingState_inner::getLastMarketedDate() const {
    return m_last_marketed_date;
}
void OAIPCAMarketingState_inner::setLastMarketedDate(const QDate &last_marketed_date) {
    m_last_marketed_date = last_marketed_date;
    m_last_marketed_date_isSet = true;
}

bool OAIPCAMarketingState_inner::is_last_marketed_date_Set() const{
    return m_last_marketed_date_isSet;
}

bool OAIPCAMarketingState_inner::is_last_marketed_date_Valid() const{
    return m_last_marketed_date_isValid;
}

QString OAIPCAMarketingState_inner::getMarketingState() const {
    return m_marketing_state;
}
void OAIPCAMarketingState_inner::setMarketingState(const QString &marketing_state) {
    m_marketing_state = marketing_state;
    m_marketing_state_isSet = true;
}

bool OAIPCAMarketingState_inner::is_marketing_state_Set() const{
    return m_marketing_state_isSet;
}

bool OAIPCAMarketingState_inner::is_marketing_state_Valid() const{
    return m_marketing_state_isValid;
}

QList<QString> OAIPCAMarketingState_inner::getNotes() const {
    return m_notes;
}
void OAIPCAMarketingState_inner::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPCAMarketingState_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPCAMarketingState_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIObject OAIPCAMarketingState_inner::getOtherFeesCharges() const {
    return m_other_fees_charges;
}
void OAIPCAMarketingState_inner::setOtherFeesCharges(const OAIObject &other_fees_charges) {
    m_other_fees_charges = other_fees_charges;
    m_other_fees_charges_isSet = true;
}

bool OAIPCAMarketingState_inner::is_other_fees_charges_Set() const{
    return m_other_fees_charges_isSet;
}

bool OAIPCAMarketingState_inner::is_other_fees_charges_Valid() const{
    return m_other_fees_charges_isValid;
}

OAIObject OAIPCAMarketingState_inner::getOverdraft() const {
    return m_overdraft;
}
void OAIPCAMarketingState_inner::setOverdraft(const OAIObject &overdraft) {
    m_overdraft = overdraft;
    m_overdraft_isSet = true;
}

bool OAIPCAMarketingState_inner::is_overdraft_Set() const{
    return m_overdraft_isSet;
}

bool OAIPCAMarketingState_inner::is_overdraft_Valid() const{
    return m_overdraft_isValid;
}

QString OAIPCAMarketingState_inner::getPredecessorId() const {
    return m_predecessor_id;
}
void OAIPCAMarketingState_inner::setPredecessorId(const QString &predecessor_id) {
    m_predecessor_id = predecessor_id;
    m_predecessor_id_isSet = true;
}

bool OAIPCAMarketingState_inner::is_predecessor_id_Set() const{
    return m_predecessor_id_isSet;
}

bool OAIPCAMarketingState_inner::is_predecessor_id_Valid() const{
    return m_predecessor_id_isValid;
}

float OAIPCAMarketingState_inner::getStateTenureLength() const {
    return m_state_tenure_length;
}
void OAIPCAMarketingState_inner::setStateTenureLength(const float &state_tenure_length) {
    m_state_tenure_length = state_tenure_length;
    m_state_tenure_length_isSet = true;
}

bool OAIPCAMarketingState_inner::is_state_tenure_length_Set() const{
    return m_state_tenure_length_isSet;
}

bool OAIPCAMarketingState_inner::is_state_tenure_length_Valid() const{
    return m_state_tenure_length_isValid;
}

QString OAIPCAMarketingState_inner::getStateTenurePeriod() const {
    return m_state_tenure_period;
}
void OAIPCAMarketingState_inner::setStateTenurePeriod(const QString &state_tenure_period) {
    m_state_tenure_period = state_tenure_period;
    m_state_tenure_period_isSet = true;
}

bool OAIPCAMarketingState_inner::is_state_tenure_period_Set() const{
    return m_state_tenure_period_isSet;
}

bool OAIPCAMarketingState_inner::is_state_tenure_period_Valid() const{
    return m_state_tenure_period_isValid;
}

bool OAIPCAMarketingState_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_core_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_and_benefits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_marketed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_marketed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_fees_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overdraft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predecessor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_tenure_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_tenure_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPCAMarketingState_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identification_isValid && m_marketing_state_isValid && m_other_fees_charges_isValid && true;
}

} // namespace OpenAPI
