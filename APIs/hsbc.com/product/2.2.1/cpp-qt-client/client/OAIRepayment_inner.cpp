/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepayment_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepayment_inner::OAIRepayment_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepayment_inner::OAIRepayment_inner() {
    this->initializeModel();
}

OAIRepayment_inner::~OAIRepayment_inner() {}

void OAIRepayment_inner::initializeModel() {

    m_amount_type_isSet = false;
    m_amount_type_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_other_amount_type_isSet = false;
    m_other_amount_type_isValid = false;

    m_other_repayment_frequency_isSet = false;
    m_other_repayment_frequency_isValid = false;

    m_other_repayment_type_isSet = false;
    m_other_repayment_type_isValid = false;

    m_repayment_fee_charges_isSet = false;
    m_repayment_fee_charges_isValid = false;

    m_repayment_frequency_isSet = false;
    m_repayment_frequency_isValid = false;

    m_repayment_holiday_isSet = false;
    m_repayment_holiday_isValid = false;

    m_repayment_type_isSet = false;
    m_repayment_type_isValid = false;
}

void OAIRepayment_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepayment_inner::fromJsonObject(QJsonObject json) {

    m_amount_type_isValid = ::OpenAPI::fromJsonValue(m_amount_type, json[QString("AmountType")]);
    m_amount_type_isSet = !json[QString("AmountType")].isNull() && m_amount_type_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_other_amount_type_isValid = ::OpenAPI::fromJsonValue(m_other_amount_type, json[QString("OtherAmountType")]);
    m_other_amount_type_isSet = !json[QString("OtherAmountType")].isNull() && m_other_amount_type_isValid;

    m_other_repayment_frequency_isValid = ::OpenAPI::fromJsonValue(m_other_repayment_frequency, json[QString("OtherRepaymentFrequency")]);
    m_other_repayment_frequency_isSet = !json[QString("OtherRepaymentFrequency")].isNull() && m_other_repayment_frequency_isValid;

    m_other_repayment_type_isValid = ::OpenAPI::fromJsonValue(m_other_repayment_type, json[QString("OtherRepaymentType")]);
    m_other_repayment_type_isSet = !json[QString("OtherRepaymentType")].isNull() && m_other_repayment_type_isValid;

    m_repayment_fee_charges_isValid = ::OpenAPI::fromJsonValue(m_repayment_fee_charges, json[QString("RepaymentFeeCharges")]);
    m_repayment_fee_charges_isSet = !json[QString("RepaymentFeeCharges")].isNull() && m_repayment_fee_charges_isValid;

    m_repayment_frequency_isValid = ::OpenAPI::fromJsonValue(m_repayment_frequency, json[QString("RepaymentFrequency")]);
    m_repayment_frequency_isSet = !json[QString("RepaymentFrequency")].isNull() && m_repayment_frequency_isValid;

    m_repayment_holiday_isValid = ::OpenAPI::fromJsonValue(m_repayment_holiday, json[QString("RepaymentHoliday")]);
    m_repayment_holiday_isSet = !json[QString("RepaymentHoliday")].isNull() && m_repayment_holiday_isValid;

    m_repayment_type_isValid = ::OpenAPI::fromJsonValue(m_repayment_type, json[QString("RepaymentType")]);
    m_repayment_type_isSet = !json[QString("RepaymentType")].isNull() && m_repayment_type_isValid;
}

QString OAIRepayment_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepayment_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_type_isSet) {
        obj.insert(QString("AmountType"), ::OpenAPI::toJsonValue(m_amount_type));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_other_amount_type_isSet) {
        obj.insert(QString("OtherAmountType"), ::OpenAPI::toJsonValue(m_other_amount_type));
    }
    if (m_other_repayment_frequency_isSet) {
        obj.insert(QString("OtherRepaymentFrequency"), ::OpenAPI::toJsonValue(m_other_repayment_frequency));
    }
    if (m_other_repayment_type_isSet) {
        obj.insert(QString("OtherRepaymentType"), ::OpenAPI::toJsonValue(m_other_repayment_type));
    }
    if (m_repayment_fee_charges_isSet) {
        obj.insert(QString("RepaymentFeeCharges"), ::OpenAPI::toJsonValue(m_repayment_fee_charges));
    }
    if (m_repayment_frequency_isSet) {
        obj.insert(QString("RepaymentFrequency"), ::OpenAPI::toJsonValue(m_repayment_frequency));
    }
    if (m_repayment_holiday.size() > 0) {
        obj.insert(QString("RepaymentHoliday"), ::OpenAPI::toJsonValue(m_repayment_holiday));
    }
    if (m_repayment_type_isSet) {
        obj.insert(QString("RepaymentType"), ::OpenAPI::toJsonValue(m_repayment_type));
    }
    return obj;
}

QString OAIRepayment_inner::getAmountType() const {
    return m_amount_type;
}
void OAIRepayment_inner::setAmountType(const QString &amount_type) {
    m_amount_type = amount_type;
    m_amount_type_isSet = true;
}

bool OAIRepayment_inner::is_amount_type_Set() const{
    return m_amount_type_isSet;
}

bool OAIRepayment_inner::is_amount_type_Valid() const{
    return m_amount_type_isValid;
}

QList<QString> OAIRepayment_inner::getNotes() const {
    return m_notes;
}
void OAIRepayment_inner::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIRepayment_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIRepayment_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIObject OAIRepayment_inner::getOtherAmountType() const {
    return m_other_amount_type;
}
void OAIRepayment_inner::setOtherAmountType(const OAIObject &other_amount_type) {
    m_other_amount_type = other_amount_type;
    m_other_amount_type_isSet = true;
}

bool OAIRepayment_inner::is_other_amount_type_Set() const{
    return m_other_amount_type_isSet;
}

bool OAIRepayment_inner::is_other_amount_type_Valid() const{
    return m_other_amount_type_isValid;
}

OAIObject OAIRepayment_inner::getOtherRepaymentFrequency() const {
    return m_other_repayment_frequency;
}
void OAIRepayment_inner::setOtherRepaymentFrequency(const OAIObject &other_repayment_frequency) {
    m_other_repayment_frequency = other_repayment_frequency;
    m_other_repayment_frequency_isSet = true;
}

bool OAIRepayment_inner::is_other_repayment_frequency_Set() const{
    return m_other_repayment_frequency_isSet;
}

bool OAIRepayment_inner::is_other_repayment_frequency_Valid() const{
    return m_other_repayment_frequency_isValid;
}

OAIObject OAIRepayment_inner::getOtherRepaymentType() const {
    return m_other_repayment_type;
}
void OAIRepayment_inner::setOtherRepaymentType(const OAIObject &other_repayment_type) {
    m_other_repayment_type = other_repayment_type;
    m_other_repayment_type_isSet = true;
}

bool OAIRepayment_inner::is_other_repayment_type_Set() const{
    return m_other_repayment_type_isSet;
}

bool OAIRepayment_inner::is_other_repayment_type_Valid() const{
    return m_other_repayment_type_isValid;
}

OAIObject OAIRepayment_inner::getRepaymentFeeCharges() const {
    return m_repayment_fee_charges;
}
void OAIRepayment_inner::setRepaymentFeeCharges(const OAIObject &repayment_fee_charges) {
    m_repayment_fee_charges = repayment_fee_charges;
    m_repayment_fee_charges_isSet = true;
}

bool OAIRepayment_inner::is_repayment_fee_charges_Set() const{
    return m_repayment_fee_charges_isSet;
}

bool OAIRepayment_inner::is_repayment_fee_charges_Valid() const{
    return m_repayment_fee_charges_isValid;
}

QString OAIRepayment_inner::getRepaymentFrequency() const {
    return m_repayment_frequency;
}
void OAIRepayment_inner::setRepaymentFrequency(const QString &repayment_frequency) {
    m_repayment_frequency = repayment_frequency;
    m_repayment_frequency_isSet = true;
}

bool OAIRepayment_inner::is_repayment_frequency_Set() const{
    return m_repayment_frequency_isSet;
}

bool OAIRepayment_inner::is_repayment_frequency_Valid() const{
    return m_repayment_frequency_isValid;
}

QList<OAIRepaymentHoliday_inner> OAIRepayment_inner::getRepaymentHoliday() const {
    return m_repayment_holiday;
}
void OAIRepayment_inner::setRepaymentHoliday(const QList<OAIRepaymentHoliday_inner> &repayment_holiday) {
    m_repayment_holiday = repayment_holiday;
    m_repayment_holiday_isSet = true;
}

bool OAIRepayment_inner::is_repayment_holiday_Set() const{
    return m_repayment_holiday_isSet;
}

bool OAIRepayment_inner::is_repayment_holiday_Valid() const{
    return m_repayment_holiday_isValid;
}

QString OAIRepayment_inner::getRepaymentType() const {
    return m_repayment_type;
}
void OAIRepayment_inner::setRepaymentType(const QString &repayment_type) {
    m_repayment_type = repayment_type;
    m_repayment_type_isSet = true;
}

bool OAIRepayment_inner::is_repayment_type_Set() const{
    return m_repayment_type_isSet;
}

bool OAIRepayment_inner::is_repayment_type_Valid() const{
    return m_repayment_type_isValid;
}

bool OAIRepayment_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_amount_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_repayment_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_repayment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_fee_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_holiday.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepayment_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
