/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepaymentHoliday_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepaymentHoliday_inner::OAIRepaymentHoliday_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepaymentHoliday_inner::OAIRepaymentHoliday_inner() {
    this->initializeModel();
}

OAIRepaymentHoliday_inner::~OAIRepaymentHoliday_inner() {}

void OAIRepaymentHoliday_inner::initializeModel() {

    m_max_holiday_length_isSet = false;
    m_max_holiday_length_isValid = false;

    m_max_holiday_period_isSet = false;
    m_max_holiday_period_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;
}

void OAIRepaymentHoliday_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepaymentHoliday_inner::fromJsonObject(QJsonObject json) {

    m_max_holiday_length_isValid = ::OpenAPI::fromJsonValue(m_max_holiday_length, json[QString("MaxHolidayLength")]);
    m_max_holiday_length_isSet = !json[QString("MaxHolidayLength")].isNull() && m_max_holiday_length_isValid;

    m_max_holiday_period_isValid = ::OpenAPI::fromJsonValue(m_max_holiday_period, json[QString("MaxHolidayPeriod")]);
    m_max_holiday_period_isSet = !json[QString("MaxHolidayPeriod")].isNull() && m_max_holiday_period_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;
}

QString OAIRepaymentHoliday_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepaymentHoliday_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_max_holiday_length_isSet) {
        obj.insert(QString("MaxHolidayLength"), ::OpenAPI::toJsonValue(m_max_holiday_length));
    }
    if (m_max_holiday_period_isSet) {
        obj.insert(QString("MaxHolidayPeriod"), ::OpenAPI::toJsonValue(m_max_holiday_period));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    return obj;
}

float OAIRepaymentHoliday_inner::getMaxHolidayLength() const {
    return m_max_holiday_length;
}
void OAIRepaymentHoliday_inner::setMaxHolidayLength(const float &max_holiday_length) {
    m_max_holiday_length = max_holiday_length;
    m_max_holiday_length_isSet = true;
}

bool OAIRepaymentHoliday_inner::is_max_holiday_length_Set() const{
    return m_max_holiday_length_isSet;
}

bool OAIRepaymentHoliday_inner::is_max_holiday_length_Valid() const{
    return m_max_holiday_length_isValid;
}

QString OAIRepaymentHoliday_inner::getMaxHolidayPeriod() const {
    return m_max_holiday_period;
}
void OAIRepaymentHoliday_inner::setMaxHolidayPeriod(const QString &max_holiday_period) {
    m_max_holiday_period = max_holiday_period;
    m_max_holiday_period_isSet = true;
}

bool OAIRepaymentHoliday_inner::is_max_holiday_period_Set() const{
    return m_max_holiday_period_isSet;
}

bool OAIRepaymentHoliday_inner::is_max_holiday_period_Valid() const{
    return m_max_holiday_period_isValid;
}

QList<QString> OAIRepaymentHoliday_inner::getNotes() const {
    return m_notes;
}
void OAIRepaymentHoliday_inner::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIRepaymentHoliday_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIRepaymentHoliday_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIRepaymentHoliday_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_holiday_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_holiday_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepaymentHoliday_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
