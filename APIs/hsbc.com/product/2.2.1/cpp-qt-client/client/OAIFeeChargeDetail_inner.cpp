/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeeChargeDetail_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeeChargeDetail_inner::OAIFeeChargeDetail_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeeChargeDetail_inner::OAIFeeChargeDetail_inner() {
    this->initializeModel();
}

OAIFeeChargeDetail_inner::~OAIFeeChargeDetail_inner() {}

void OAIFeeChargeDetail_inner::initializeModel() {

    m_application_frequency_isSet = false;
    m_application_frequency_isValid = false;

    m_calculation_frequency_isSet = false;
    m_calculation_frequency_isValid = false;

    m_fee_amount_isSet = false;
    m_fee_amount_isValid = false;

    m_fee_applicable_range_isSet = false;
    m_fee_applicable_range_isValid = false;

    m_fee_category_isSet = false;
    m_fee_category_isValid = false;

    m_fee_rate_isSet = false;
    m_fee_rate_isValid = false;

    m_fee_rate_type_isSet = false;
    m_fee_rate_type_isValid = false;

    m_fee_type_isSet = false;
    m_fee_type_isValid = false;

    m_included_in_monthly_charge_indicator_isSet = false;
    m_included_in_monthly_charge_indicator_isValid = false;

    m_negotiable_indicator_isSet = false;
    m_negotiable_indicator_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_other_application_frequency_isSet = false;
    m_other_application_frequency_isValid = false;

    m_other_calculation_frequency_isSet = false;
    m_other_calculation_frequency_isValid = false;

    m_other_fee_category_isSet = false;
    m_other_fee_category_isValid = false;

    m_other_fee_rate_type_isSet = false;
    m_other_fee_rate_type_isValid = false;

    m_other_fee_type_isSet = false;
    m_other_fee_type_isValid = false;
}

void OAIFeeChargeDetail_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeeChargeDetail_inner::fromJsonObject(QJsonObject json) {

    m_application_frequency_isValid = ::OpenAPI::fromJsonValue(m_application_frequency, json[QString("ApplicationFrequency")]);
    m_application_frequency_isSet = !json[QString("ApplicationFrequency")].isNull() && m_application_frequency_isValid;

    m_calculation_frequency_isValid = ::OpenAPI::fromJsonValue(m_calculation_frequency, json[QString("CalculationFrequency")]);
    m_calculation_frequency_isSet = !json[QString("CalculationFrequency")].isNull() && m_calculation_frequency_isValid;

    m_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_amount, json[QString("FeeAmount")]);
    m_fee_amount_isSet = !json[QString("FeeAmount")].isNull() && m_fee_amount_isValid;

    m_fee_applicable_range_isValid = ::OpenAPI::fromJsonValue(m_fee_applicable_range, json[QString("FeeApplicableRange")]);
    m_fee_applicable_range_isSet = !json[QString("FeeApplicableRange")].isNull() && m_fee_applicable_range_isValid;

    m_fee_category_isValid = ::OpenAPI::fromJsonValue(m_fee_category, json[QString("FeeCategory")]);
    m_fee_category_isSet = !json[QString("FeeCategory")].isNull() && m_fee_category_isValid;

    m_fee_rate_isValid = ::OpenAPI::fromJsonValue(m_fee_rate, json[QString("FeeRate")]);
    m_fee_rate_isSet = !json[QString("FeeRate")].isNull() && m_fee_rate_isValid;

    m_fee_rate_type_isValid = ::OpenAPI::fromJsonValue(m_fee_rate_type, json[QString("FeeRateType")]);
    m_fee_rate_type_isSet = !json[QString("FeeRateType")].isNull() && m_fee_rate_type_isValid;

    m_fee_type_isValid = ::OpenAPI::fromJsonValue(m_fee_type, json[QString("FeeType")]);
    m_fee_type_isSet = !json[QString("FeeType")].isNull() && m_fee_type_isValid;

    m_included_in_monthly_charge_indicator_isValid = ::OpenAPI::fromJsonValue(m_included_in_monthly_charge_indicator, json[QString("IncludedInMonthlyChargeIndicator")]);
    m_included_in_monthly_charge_indicator_isSet = !json[QString("IncludedInMonthlyChargeIndicator")].isNull() && m_included_in_monthly_charge_indicator_isValid;

    m_negotiable_indicator_isValid = ::OpenAPI::fromJsonValue(m_negotiable_indicator, json[QString("NegotiableIndicator")]);
    m_negotiable_indicator_isSet = !json[QString("NegotiableIndicator")].isNull() && m_negotiable_indicator_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_other_application_frequency_isValid = ::OpenAPI::fromJsonValue(m_other_application_frequency, json[QString("OtherApplicationFrequency")]);
    m_other_application_frequency_isSet = !json[QString("OtherApplicationFrequency")].isNull() && m_other_application_frequency_isValid;

    m_other_calculation_frequency_isValid = ::OpenAPI::fromJsonValue(m_other_calculation_frequency, json[QString("OtherCalculationFrequency")]);
    m_other_calculation_frequency_isSet = !json[QString("OtherCalculationFrequency")].isNull() && m_other_calculation_frequency_isValid;

    m_other_fee_category_isValid = ::OpenAPI::fromJsonValue(m_other_fee_category, json[QString("OtherFeeCategory")]);
    m_other_fee_category_isSet = !json[QString("OtherFeeCategory")].isNull() && m_other_fee_category_isValid;

    m_other_fee_rate_type_isValid = ::OpenAPI::fromJsonValue(m_other_fee_rate_type, json[QString("OtherFeeRateType")]);
    m_other_fee_rate_type_isSet = !json[QString("OtherFeeRateType")].isNull() && m_other_fee_rate_type_isValid;

    m_other_fee_type_isValid = ::OpenAPI::fromJsonValue(m_other_fee_type, json[QString("OtherFeeType")]);
    m_other_fee_type_isSet = !json[QString("OtherFeeType")].isNull() && m_other_fee_type_isValid;
}

QString OAIFeeChargeDetail_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeeChargeDetail_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_application_frequency_isSet) {
        obj.insert(QString("ApplicationFrequency"), ::OpenAPI::toJsonValue(m_application_frequency));
    }
    if (m_calculation_frequency_isSet) {
        obj.insert(QString("CalculationFrequency"), ::OpenAPI::toJsonValue(m_calculation_frequency));
    }
    if (m_fee_amount_isSet) {
        obj.insert(QString("FeeAmount"), ::OpenAPI::toJsonValue(m_fee_amount));
    }
    if (m_fee_applicable_range_isSet) {
        obj.insert(QString("FeeApplicableRange"), ::OpenAPI::toJsonValue(m_fee_applicable_range));
    }
    if (m_fee_category_isSet) {
        obj.insert(QString("FeeCategory"), ::OpenAPI::toJsonValue(m_fee_category));
    }
    if (m_fee_rate_isSet) {
        obj.insert(QString("FeeRate"), ::OpenAPI::toJsonValue(m_fee_rate));
    }
    if (m_fee_rate_type_isSet) {
        obj.insert(QString("FeeRateType"), ::OpenAPI::toJsonValue(m_fee_rate_type));
    }
    if (m_fee_type_isSet) {
        obj.insert(QString("FeeType"), ::OpenAPI::toJsonValue(m_fee_type));
    }
    if (m_included_in_monthly_charge_indicator_isSet) {
        obj.insert(QString("IncludedInMonthlyChargeIndicator"), ::OpenAPI::toJsonValue(m_included_in_monthly_charge_indicator));
    }
    if (m_negotiable_indicator_isSet) {
        obj.insert(QString("NegotiableIndicator"), ::OpenAPI::toJsonValue(m_negotiable_indicator));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_other_application_frequency_isSet) {
        obj.insert(QString("OtherApplicationFrequency"), ::OpenAPI::toJsonValue(m_other_application_frequency));
    }
    if (m_other_calculation_frequency_isSet) {
        obj.insert(QString("OtherCalculationFrequency"), ::OpenAPI::toJsonValue(m_other_calculation_frequency));
    }
    if (m_other_fee_category_isSet) {
        obj.insert(QString("OtherFeeCategory"), ::OpenAPI::toJsonValue(m_other_fee_category));
    }
    if (m_other_fee_rate_type_isSet) {
        obj.insert(QString("OtherFeeRateType"), ::OpenAPI::toJsonValue(m_other_fee_rate_type));
    }
    if (m_other_fee_type_isSet) {
        obj.insert(QString("OtherFeeType"), ::OpenAPI::toJsonValue(m_other_fee_type));
    }
    return obj;
}

QString OAIFeeChargeDetail_inner::getApplicationFrequency() const {
    return m_application_frequency;
}
void OAIFeeChargeDetail_inner::setApplicationFrequency(const QString &application_frequency) {
    m_application_frequency = application_frequency;
    m_application_frequency_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_application_frequency_Set() const{
    return m_application_frequency_isSet;
}

bool OAIFeeChargeDetail_inner::is_application_frequency_Valid() const{
    return m_application_frequency_isValid;
}

QString OAIFeeChargeDetail_inner::getCalculationFrequency() const {
    return m_calculation_frequency;
}
void OAIFeeChargeDetail_inner::setCalculationFrequency(const QString &calculation_frequency) {
    m_calculation_frequency = calculation_frequency;
    m_calculation_frequency_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_calculation_frequency_Set() const{
    return m_calculation_frequency_isSet;
}

bool OAIFeeChargeDetail_inner::is_calculation_frequency_Valid() const{
    return m_calculation_frequency_isValid;
}

QString OAIFeeChargeDetail_inner::getFeeAmount() const {
    return m_fee_amount;
}
void OAIFeeChargeDetail_inner::setFeeAmount(const QString &fee_amount) {
    m_fee_amount = fee_amount;
    m_fee_amount_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_fee_amount_Set() const{
    return m_fee_amount_isSet;
}

bool OAIFeeChargeDetail_inner::is_fee_amount_Valid() const{
    return m_fee_amount_isValid;
}

OAIObject OAIFeeChargeDetail_inner::getFeeApplicableRange() const {
    return m_fee_applicable_range;
}
void OAIFeeChargeDetail_inner::setFeeApplicableRange(const OAIObject &fee_applicable_range) {
    m_fee_applicable_range = fee_applicable_range;
    m_fee_applicable_range_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_fee_applicable_range_Set() const{
    return m_fee_applicable_range_isSet;
}

bool OAIFeeChargeDetail_inner::is_fee_applicable_range_Valid() const{
    return m_fee_applicable_range_isValid;
}

QString OAIFeeChargeDetail_inner::getFeeCategory() const {
    return m_fee_category;
}
void OAIFeeChargeDetail_inner::setFeeCategory(const QString &fee_category) {
    m_fee_category = fee_category;
    m_fee_category_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_fee_category_Set() const{
    return m_fee_category_isSet;
}

bool OAIFeeChargeDetail_inner::is_fee_category_Valid() const{
    return m_fee_category_isValid;
}

QString OAIFeeChargeDetail_inner::getFeeRate() const {
    return m_fee_rate;
}
void OAIFeeChargeDetail_inner::setFeeRate(const QString &fee_rate) {
    m_fee_rate = fee_rate;
    m_fee_rate_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_fee_rate_Set() const{
    return m_fee_rate_isSet;
}

bool OAIFeeChargeDetail_inner::is_fee_rate_Valid() const{
    return m_fee_rate_isValid;
}

QString OAIFeeChargeDetail_inner::getFeeRateType() const {
    return m_fee_rate_type;
}
void OAIFeeChargeDetail_inner::setFeeRateType(const QString &fee_rate_type) {
    m_fee_rate_type = fee_rate_type;
    m_fee_rate_type_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_fee_rate_type_Set() const{
    return m_fee_rate_type_isSet;
}

bool OAIFeeChargeDetail_inner::is_fee_rate_type_Valid() const{
    return m_fee_rate_type_isValid;
}

QString OAIFeeChargeDetail_inner::getFeeType() const {
    return m_fee_type;
}
void OAIFeeChargeDetail_inner::setFeeType(const QString &fee_type) {
    m_fee_type = fee_type;
    m_fee_type_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_fee_type_Set() const{
    return m_fee_type_isSet;
}

bool OAIFeeChargeDetail_inner::is_fee_type_Valid() const{
    return m_fee_type_isValid;
}

bool OAIFeeChargeDetail_inner::isIncludedInMonthlyChargeIndicator() const {
    return m_included_in_monthly_charge_indicator;
}
void OAIFeeChargeDetail_inner::setIncludedInMonthlyChargeIndicator(const bool &included_in_monthly_charge_indicator) {
    m_included_in_monthly_charge_indicator = included_in_monthly_charge_indicator;
    m_included_in_monthly_charge_indicator_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_included_in_monthly_charge_indicator_Set() const{
    return m_included_in_monthly_charge_indicator_isSet;
}

bool OAIFeeChargeDetail_inner::is_included_in_monthly_charge_indicator_Valid() const{
    return m_included_in_monthly_charge_indicator_isValid;
}

bool OAIFeeChargeDetail_inner::isNegotiableIndicator() const {
    return m_negotiable_indicator;
}
void OAIFeeChargeDetail_inner::setNegotiableIndicator(const bool &negotiable_indicator) {
    m_negotiable_indicator = negotiable_indicator;
    m_negotiable_indicator_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_negotiable_indicator_Set() const{
    return m_negotiable_indicator_isSet;
}

bool OAIFeeChargeDetail_inner::is_negotiable_indicator_Valid() const{
    return m_negotiable_indicator_isValid;
}

QList<QString> OAIFeeChargeDetail_inner::getNotes() const {
    return m_notes;
}
void OAIFeeChargeDetail_inner::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFeeChargeDetail_inner::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIObject OAIFeeChargeDetail_inner::getOtherApplicationFrequency() const {
    return m_other_application_frequency;
}
void OAIFeeChargeDetail_inner::setOtherApplicationFrequency(const OAIObject &other_application_frequency) {
    m_other_application_frequency = other_application_frequency;
    m_other_application_frequency_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_other_application_frequency_Set() const{
    return m_other_application_frequency_isSet;
}

bool OAIFeeChargeDetail_inner::is_other_application_frequency_Valid() const{
    return m_other_application_frequency_isValid;
}

OAIObject OAIFeeChargeDetail_inner::getOtherCalculationFrequency() const {
    return m_other_calculation_frequency;
}
void OAIFeeChargeDetail_inner::setOtherCalculationFrequency(const OAIObject &other_calculation_frequency) {
    m_other_calculation_frequency = other_calculation_frequency;
    m_other_calculation_frequency_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_other_calculation_frequency_Set() const{
    return m_other_calculation_frequency_isSet;
}

bool OAIFeeChargeDetail_inner::is_other_calculation_frequency_Valid() const{
    return m_other_calculation_frequency_isValid;
}

OAIObject OAIFeeChargeDetail_inner::getOtherFeeCategory() const {
    return m_other_fee_category;
}
void OAIFeeChargeDetail_inner::setOtherFeeCategory(const OAIObject &other_fee_category) {
    m_other_fee_category = other_fee_category;
    m_other_fee_category_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_other_fee_category_Set() const{
    return m_other_fee_category_isSet;
}

bool OAIFeeChargeDetail_inner::is_other_fee_category_Valid() const{
    return m_other_fee_category_isValid;
}

OAIObject OAIFeeChargeDetail_inner::getOtherFeeRateType() const {
    return m_other_fee_rate_type;
}
void OAIFeeChargeDetail_inner::setOtherFeeRateType(const OAIObject &other_fee_rate_type) {
    m_other_fee_rate_type = other_fee_rate_type;
    m_other_fee_rate_type_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_other_fee_rate_type_Set() const{
    return m_other_fee_rate_type_isSet;
}

bool OAIFeeChargeDetail_inner::is_other_fee_rate_type_Valid() const{
    return m_other_fee_rate_type_isValid;
}

OAIObject OAIFeeChargeDetail_inner::getOtherFeeType() const {
    return m_other_fee_type;
}
void OAIFeeChargeDetail_inner::setOtherFeeType(const OAIObject &other_fee_type) {
    m_other_fee_type = other_fee_type;
    m_other_fee_type_isSet = true;
}

bool OAIFeeChargeDetail_inner::is_other_fee_type_Set() const{
    return m_other_fee_type_isSet;
}

bool OAIFeeChargeDetail_inner::is_other_fee_type_Valid() const{
    return m_other_fee_type_isValid;
}

bool OAIFeeChargeDetail_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_applicable_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_in_monthly_charge_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiable_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_application_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_calculation_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_fee_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_fee_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_fee_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeeChargeDetail_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_frequency_isValid && m_calculation_frequency_isValid && m_fee_category_isValid && m_fee_type_isValid && true;
}

} // namespace OpenAPI
