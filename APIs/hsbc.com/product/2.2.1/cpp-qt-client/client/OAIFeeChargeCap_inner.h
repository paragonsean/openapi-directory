/**
 * Product Finder API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeeChargeCap_inner.h
 *
 * Details about any caps (maximum charges) that apply to a particular fee/charge
 */

#ifndef OAIFeeChargeCap_inner_H
#define OAIFeeChargeCap_inner_H

#include <QJsonObject>

#include "OAIOtherFeeType_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOtherFeeType_inner;

class OAIFeeChargeCap_inner : public OAIObject {
public:
    OAIFeeChargeCap_inner();
    OAIFeeChargeCap_inner(QString json);
    ~OAIFeeChargeCap_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCappingPeriod() const;
    void setCappingPeriod(const QString &capping_period);
    bool is_capping_period_Set() const;
    bool is_capping_period_Valid() const;

    QString getFeeCapAmount() const;
    void setFeeCapAmount(const QString &fee_cap_amount);
    bool is_fee_cap_amount_Set() const;
    bool is_fee_cap_amount_Valid() const;

    float getFeeCapOccurrence() const;
    void setFeeCapOccurrence(const float &fee_cap_occurrence);
    bool is_fee_cap_occurrence_Set() const;
    bool is_fee_cap_occurrence_Valid() const;

    QList<QString> getFeeType() const;
    void setFeeType(const QList<QString> &fee_type);
    bool is_fee_type_Set() const;
    bool is_fee_type_Valid() const;

    QString getMinMaxType() const;
    void setMinMaxType(const QString &min_max_type);
    bool is_min_max_type_Set() const;
    bool is_min_max_type_Valid() const;

    QList<QString> getNotes() const;
    void setNotes(const QList<QString> &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QList<OAIOtherFeeType_inner> getOtherFeeType() const;
    void setOtherFeeType(const QList<OAIOtherFeeType_inner> &other_fee_type);
    bool is_other_fee_type_Set() const;
    bool is_other_fee_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_capping_period;
    bool m_capping_period_isSet;
    bool m_capping_period_isValid;

    QString m_fee_cap_amount;
    bool m_fee_cap_amount_isSet;
    bool m_fee_cap_amount_isValid;

    float m_fee_cap_occurrence;
    bool m_fee_cap_occurrence_isSet;
    bool m_fee_cap_occurrence_isValid;

    QList<QString> m_fee_type;
    bool m_fee_type_isSet;
    bool m_fee_type_isValid;

    QString m_min_max_type;
    bool m_min_max_type_isSet;
    bool m_min_max_type_isValid;

    QList<QString> m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QList<OAIOtherFeeType_inner> m_other_fee_type;
    bool m_other_fee_type_isSet;
    bool m_other_fee_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeeChargeCap_inner)

#endif // OAIFeeChargeCap_inner_H
