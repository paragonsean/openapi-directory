/**
 * defaultTitle
 * defaultDescription
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DefaultTitle);
  }
}(this, function(expect, DefaultTitle) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DefaultTitle.InlineResponse200Predictions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse200Predictions', function() {
    it('should create an instance of InlineResponse200Predictions', function() {
      // uncomment below and update the code to test InlineResponse200Predictions
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be.a(DefaultTitle.InlineResponse200Predictions);
    });

    it('should have the property _1girl (base name: "1girl")', function() {
      // uncomment below and update the code to test the property _1girl
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property abs (base name: "abs")', function() {
      // uncomment below and update the code to test the property abs
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property artificialImages (base name: "artificial-images")', function() {
      // uncomment below and update the code to test the property artificialImages
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property bikini (base name: "bikini")', function() {
      // uncomment below and update the code to test the property bikini
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property blackBikini (base name: "black bikini")', function() {
      // uncomment below and update the code to test the property blackBikini
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property blackHair (base name: "black hair")', function() {
      // uncomment below and update the code to test the property blackHair
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property breasts (base name: "breasts")', function() {
      // uncomment below and update the code to test the property breasts
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property choker (base name: "choker")', function() {
      // uncomment below and update the code to test the property choker
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property compositionOneFemale (base name: "composition_one_female")', function() {
      // uncomment below and update the code to test the property compositionOneFemale
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property darkSkin (base name: "dark skin")', function() {
      // uncomment below and update the code to test the property darkSkin
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property darkSkinnedFemale (base name: "dark-skinned female")', function() {
      // uncomment below and update the code to test the property darkSkinnedFemale
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property englishCommentary (base name: "english commentary")', function() {
      // uncomment below and update the code to test the property englishCommentary
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property forehead (base name: "forehead")', function() {
      // uncomment below and update the code to test the property forehead
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property jewelry (base name: "jewelry")', function() {
      // uncomment below and update the code to test the property jewelry
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property largeBreasts (base name: "large breasts")', function() {
      // uncomment below and update the code to test the property largeBreasts
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property lips (base name: "lips")', function() {
      // uncomment below and update the code to test the property lips
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property longHair (base name: "long hair")', function() {
      // uncomment below and update the code to test the property longHair
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property lookingAtViewer (base name: "looking at viewer")', function() {
      // uncomment below and update the code to test the property lookingAtViewer
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property muscular (base name: "muscular")', function() {
      // uncomment below and update the code to test the property muscular
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property muscularFemale (base name: "muscular female")', function() {
      // uncomment below and update the code to test the property muscularFemale
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property navel (base name: "navel")', function() {
      // uncomment below and update the code to test the property navel
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property original (base name: "original")', function() {
      // uncomment below and update the code to test the property original
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property patreonUsername (base name: "patreon username")', function() {
      // uncomment below and update the code to test the property patreonUsername
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property solo (base name: "solo")', function() {
      // uncomment below and update the code to test the property solo
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property swimsuit (base name: "swimsuit")', function() {
      // uncomment below and update the code to test the property swimsuit
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property thighs (base name: "thighs")', function() {
      // uncomment below and update the code to test the property thighs
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property toned (base name: "toned")', function() {
      // uncomment below and update the code to test the property toned
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

    it('should have the property unsafe (base name: "unsafe")', function() {
      // uncomment below and update the code to test the property unsafe
      //var instance = new DefaultTitle.InlineResponse200Predictions();
      //expect(instance).to.be();
    });

  });

}));
