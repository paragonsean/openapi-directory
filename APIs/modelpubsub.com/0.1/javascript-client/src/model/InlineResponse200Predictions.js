/**
 * defaultTitle
 * defaultDescription
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse200Predictions model module.
 * @module model/InlineResponse200Predictions
 * @version 0.1
 */
class InlineResponse200Predictions {
    /**
     * Constructs a new <code>InlineResponse200Predictions</code>.
     * @alias module:model/InlineResponse200Predictions
     */
    constructor() { 
        
        InlineResponse200Predictions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse200Predictions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse200Predictions} obj Optional instance to populate.
     * @return {module:model/InlineResponse200Predictions} The populated <code>InlineResponse200Predictions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse200Predictions();

            if (data.hasOwnProperty('1girl')) {
                obj['1girl'] = ApiClient.convertToType(data['1girl'], 'Number');
            }
            if (data.hasOwnProperty('abs')) {
                obj['abs'] = ApiClient.convertToType(data['abs'], 'Number');
            }
            if (data.hasOwnProperty('artificial-images')) {
                obj['artificial-images'] = ApiClient.convertToType(data['artificial-images'], 'Number');
            }
            if (data.hasOwnProperty('bikini')) {
                obj['bikini'] = ApiClient.convertToType(data['bikini'], 'Number');
            }
            if (data.hasOwnProperty('black bikini')) {
                obj['black bikini'] = ApiClient.convertToType(data['black bikini'], 'Number');
            }
            if (data.hasOwnProperty('black hair')) {
                obj['black hair'] = ApiClient.convertToType(data['black hair'], 'Number');
            }
            if (data.hasOwnProperty('breasts')) {
                obj['breasts'] = ApiClient.convertToType(data['breasts'], 'Number');
            }
            if (data.hasOwnProperty('choker')) {
                obj['choker'] = ApiClient.convertToType(data['choker'], 'Number');
            }
            if (data.hasOwnProperty('composition_one_female')) {
                obj['composition_one_female'] = ApiClient.convertToType(data['composition_one_female'], 'Number');
            }
            if (data.hasOwnProperty('dark skin')) {
                obj['dark skin'] = ApiClient.convertToType(data['dark skin'], 'Number');
            }
            if (data.hasOwnProperty('dark-skinned female')) {
                obj['dark-skinned female'] = ApiClient.convertToType(data['dark-skinned female'], 'Number');
            }
            if (data.hasOwnProperty('english commentary')) {
                obj['english commentary'] = ApiClient.convertToType(data['english commentary'], 'Number');
            }
            if (data.hasOwnProperty('forehead')) {
                obj['forehead'] = ApiClient.convertToType(data['forehead'], 'Number');
            }
            if (data.hasOwnProperty('jewelry')) {
                obj['jewelry'] = ApiClient.convertToType(data['jewelry'], 'Number');
            }
            if (data.hasOwnProperty('large breasts')) {
                obj['large breasts'] = ApiClient.convertToType(data['large breasts'], 'Number');
            }
            if (data.hasOwnProperty('lips')) {
                obj['lips'] = ApiClient.convertToType(data['lips'], 'Number');
            }
            if (data.hasOwnProperty('long hair')) {
                obj['long hair'] = ApiClient.convertToType(data['long hair'], 'Number');
            }
            if (data.hasOwnProperty('looking at viewer')) {
                obj['looking at viewer'] = ApiClient.convertToType(data['looking at viewer'], 'Number');
            }
            if (data.hasOwnProperty('muscular')) {
                obj['muscular'] = ApiClient.convertToType(data['muscular'], 'Number');
            }
            if (data.hasOwnProperty('muscular female')) {
                obj['muscular female'] = ApiClient.convertToType(data['muscular female'], 'Number');
            }
            if (data.hasOwnProperty('navel')) {
                obj['navel'] = ApiClient.convertToType(data['navel'], 'Number');
            }
            if (data.hasOwnProperty('original')) {
                obj['original'] = ApiClient.convertToType(data['original'], 'Number');
            }
            if (data.hasOwnProperty('patreon username')) {
                obj['patreon username'] = ApiClient.convertToType(data['patreon username'], 'Number');
            }
            if (data.hasOwnProperty('solo')) {
                obj['solo'] = ApiClient.convertToType(data['solo'], 'Number');
            }
            if (data.hasOwnProperty('swimsuit')) {
                obj['swimsuit'] = ApiClient.convertToType(data['swimsuit'], 'Number');
            }
            if (data.hasOwnProperty('thighs')) {
                obj['thighs'] = ApiClient.convertToType(data['thighs'], 'Number');
            }
            if (data.hasOwnProperty('toned')) {
                obj['toned'] = ApiClient.convertToType(data['toned'], 'Number');
            }
            if (data.hasOwnProperty('unsafe')) {
                obj['unsafe'] = ApiClient.convertToType(data['unsafe'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InlineResponse200Predictions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InlineResponse200Predictions</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Number} 1girl
 */
InlineResponse200Predictions.prototype['1girl'] = undefined;

/**
 * @member {Number} abs
 */
InlineResponse200Predictions.prototype['abs'] = undefined;

/**
 * @member {Number} artificial-images
 */
InlineResponse200Predictions.prototype['artificial-images'] = undefined;

/**
 * @member {Number} bikini
 */
InlineResponse200Predictions.prototype['bikini'] = undefined;

/**
 * @member {Number} black bikini
 */
InlineResponse200Predictions.prototype['black bikini'] = undefined;

/**
 * @member {Number} black hair
 */
InlineResponse200Predictions.prototype['black hair'] = undefined;

/**
 * @member {Number} breasts
 */
InlineResponse200Predictions.prototype['breasts'] = undefined;

/**
 * @member {Number} choker
 */
InlineResponse200Predictions.prototype['choker'] = undefined;

/**
 * @member {Number} composition_one_female
 */
InlineResponse200Predictions.prototype['composition_one_female'] = undefined;

/**
 * @member {Number} dark skin
 */
InlineResponse200Predictions.prototype['dark skin'] = undefined;

/**
 * @member {Number} dark-skinned female
 */
InlineResponse200Predictions.prototype['dark-skinned female'] = undefined;

/**
 * @member {Number} english commentary
 */
InlineResponse200Predictions.prototype['english commentary'] = undefined;

/**
 * @member {Number} forehead
 */
InlineResponse200Predictions.prototype['forehead'] = undefined;

/**
 * @member {Number} jewelry
 */
InlineResponse200Predictions.prototype['jewelry'] = undefined;

/**
 * @member {Number} large breasts
 */
InlineResponse200Predictions.prototype['large breasts'] = undefined;

/**
 * @member {Number} lips
 */
InlineResponse200Predictions.prototype['lips'] = undefined;

/**
 * @member {Number} long hair
 */
InlineResponse200Predictions.prototype['long hair'] = undefined;

/**
 * @member {Number} looking at viewer
 */
InlineResponse200Predictions.prototype['looking at viewer'] = undefined;

/**
 * @member {Number} muscular
 */
InlineResponse200Predictions.prototype['muscular'] = undefined;

/**
 * @member {Number} muscular female
 */
InlineResponse200Predictions.prototype['muscular female'] = undefined;

/**
 * @member {Number} navel
 */
InlineResponse200Predictions.prototype['navel'] = undefined;

/**
 * @member {Number} original
 */
InlineResponse200Predictions.prototype['original'] = undefined;

/**
 * @member {Number} patreon username
 */
InlineResponse200Predictions.prototype['patreon username'] = undefined;

/**
 * @member {Number} solo
 */
InlineResponse200Predictions.prototype['solo'] = undefined;

/**
 * @member {Number} swimsuit
 */
InlineResponse200Predictions.prototype['swimsuit'] = undefined;

/**
 * @member {Number} thighs
 */
InlineResponse200Predictions.prototype['thighs'] = undefined;

/**
 * @member {Number} toned
 */
InlineResponse200Predictions.prototype['toned'] = undefined;

/**
 * @member {Number} unsafe
 */
InlineResponse200Predictions.prototype['unsafe'] = undefined;






export default InlineResponse200Predictions;

