/**
 * defaultTitle
 * defaultDescription
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiv1_0_SafeUnsafeImageWithTags_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiv1_0_SafeUnsafeImageWithTags_body::OAIApiv1_0_SafeUnsafeImageWithTags_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiv1_0_SafeUnsafeImageWithTags_body::OAIApiv1_0_SafeUnsafeImageWithTags_body() {
    this->initializeModel();
}

OAIApiv1_0_SafeUnsafeImageWithTags_body::~OAIApiv1_0_SafeUnsafeImageWithTags_body() {}

void OAIApiv1_0_SafeUnsafeImageWithTags_body::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_base64_image_isSet = false;
    m_base64_image_isValid = false;
}

void OAIApiv1_0_SafeUnsafeImageWithTags_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiv1_0_SafeUnsafeImageWithTags_body::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api_key")]);
    m_api_key_isSet = !json[QString("api_key")].isNull() && m_api_key_isValid;

    m_base64_image_isValid = ::OpenAPI::fromJsonValue(m_base64_image, json[QString("base64_image")]);
    m_base64_image_isSet = !json[QString("base64_image")].isNull() && m_base64_image_isValid;
}

QString OAIApiv1_0_SafeUnsafeImageWithTags_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiv1_0_SafeUnsafeImageWithTags_body::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("api_key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_base64_image_isSet) {
        obj.insert(QString("base64_image"), ::OpenAPI::toJsonValue(m_base64_image));
    }
    return obj;
}

QString OAIApiv1_0_SafeUnsafeImageWithTags_body::getApiKey() const {
    return m_api_key;
}
void OAIApiv1_0_SafeUnsafeImageWithTags_body::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIApiv1_0_SafeUnsafeImageWithTags_body::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIApiv1_0_SafeUnsafeImageWithTags_body::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIApiv1_0_SafeUnsafeImageWithTags_body::getBase64Image() const {
    return m_base64_image;
}
void OAIApiv1_0_SafeUnsafeImageWithTags_body::setBase64Image(const QString &base64_image) {
    m_base64_image = base64_image;
    m_base64_image_isSet = true;
}

bool OAIApiv1_0_SafeUnsafeImageWithTags_body::is_base64_image_Set() const{
    return m_base64_image_isSet;
}

bool OAIApiv1_0_SafeUnsafeImageWithTags_body::is_base64_image_Valid() const{
    return m_base64_image_isValid;
}

bool OAIApiv1_0_SafeUnsafeImageWithTags_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base64_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiv1_0_SafeUnsafeImageWithTags_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
