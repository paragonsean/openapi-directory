/**
 * defaultTitle
 * defaultDescription
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200_predictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200_predictions::OAIInline_response_200_predictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200_predictions::OAIInline_response_200_predictions() {
    this->initializeModel();
}

OAIInline_response_200_predictions::~OAIInline_response_200_predictions() {}

void OAIInline_response_200_predictions::initializeModel() {

    m_r_1girl_isSet = false;
    m_r_1girl_isValid = false;

    m_abs_isSet = false;
    m_abs_isValid = false;

    m_artificial_images_isSet = false;
    m_artificial_images_isValid = false;

    m_bikini_isSet = false;
    m_bikini_isValid = false;

    m_black_bikini_isSet = false;
    m_black_bikini_isValid = false;

    m_black_hair_isSet = false;
    m_black_hair_isValid = false;

    m_breasts_isSet = false;
    m_breasts_isValid = false;

    m_choker_isSet = false;
    m_choker_isValid = false;

    m_composition_one_female_isSet = false;
    m_composition_one_female_isValid = false;

    m_dark_skin_isSet = false;
    m_dark_skin_isValid = false;

    m_dark_skinned_female_isSet = false;
    m_dark_skinned_female_isValid = false;

    m_english_commentary_isSet = false;
    m_english_commentary_isValid = false;

    m_forehead_isSet = false;
    m_forehead_isValid = false;

    m_jewelry_isSet = false;
    m_jewelry_isValid = false;

    m_large_breasts_isSet = false;
    m_large_breasts_isValid = false;

    m_lips_isSet = false;
    m_lips_isValid = false;

    m_long_hair_isSet = false;
    m_long_hair_isValid = false;

    m_looking_at_viewer_isSet = false;
    m_looking_at_viewer_isValid = false;

    m_muscular_isSet = false;
    m_muscular_isValid = false;

    m_muscular_female_isSet = false;
    m_muscular_female_isValid = false;

    m_navel_isSet = false;
    m_navel_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;

    m_patreon_username_isSet = false;
    m_patreon_username_isValid = false;

    m_solo_isSet = false;
    m_solo_isValid = false;

    m_swimsuit_isSet = false;
    m_swimsuit_isValid = false;

    m_thighs_isSet = false;
    m_thighs_isValid = false;

    m_toned_isSet = false;
    m_toned_isValid = false;

    m_unsafe_isSet = false;
    m_unsafe_isValid = false;
}

void OAIInline_response_200_predictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200_predictions::fromJsonObject(QJsonObject json) {

    m_r_1girl_isValid = ::OpenAPI::fromJsonValue(m_r_1girl, json[QString("1girl")]);
    m_r_1girl_isSet = !json[QString("1girl")].isNull() && m_r_1girl_isValid;

    m_abs_isValid = ::OpenAPI::fromJsonValue(m_abs, json[QString("abs")]);
    m_abs_isSet = !json[QString("abs")].isNull() && m_abs_isValid;

    m_artificial_images_isValid = ::OpenAPI::fromJsonValue(m_artificial_images, json[QString("artificial-images")]);
    m_artificial_images_isSet = !json[QString("artificial-images")].isNull() && m_artificial_images_isValid;

    m_bikini_isValid = ::OpenAPI::fromJsonValue(m_bikini, json[QString("bikini")]);
    m_bikini_isSet = !json[QString("bikini")].isNull() && m_bikini_isValid;

    m_black_bikini_isValid = ::OpenAPI::fromJsonValue(m_black_bikini, json[QString("black bikini")]);
    m_black_bikini_isSet = !json[QString("black bikini")].isNull() && m_black_bikini_isValid;

    m_black_hair_isValid = ::OpenAPI::fromJsonValue(m_black_hair, json[QString("black hair")]);
    m_black_hair_isSet = !json[QString("black hair")].isNull() && m_black_hair_isValid;

    m_breasts_isValid = ::OpenAPI::fromJsonValue(m_breasts, json[QString("breasts")]);
    m_breasts_isSet = !json[QString("breasts")].isNull() && m_breasts_isValid;

    m_choker_isValid = ::OpenAPI::fromJsonValue(m_choker, json[QString("choker")]);
    m_choker_isSet = !json[QString("choker")].isNull() && m_choker_isValid;

    m_composition_one_female_isValid = ::OpenAPI::fromJsonValue(m_composition_one_female, json[QString("composition_one_female")]);
    m_composition_one_female_isSet = !json[QString("composition_one_female")].isNull() && m_composition_one_female_isValid;

    m_dark_skin_isValid = ::OpenAPI::fromJsonValue(m_dark_skin, json[QString("dark skin")]);
    m_dark_skin_isSet = !json[QString("dark skin")].isNull() && m_dark_skin_isValid;

    m_dark_skinned_female_isValid = ::OpenAPI::fromJsonValue(m_dark_skinned_female, json[QString("dark-skinned female")]);
    m_dark_skinned_female_isSet = !json[QString("dark-skinned female")].isNull() && m_dark_skinned_female_isValid;

    m_english_commentary_isValid = ::OpenAPI::fromJsonValue(m_english_commentary, json[QString("english commentary")]);
    m_english_commentary_isSet = !json[QString("english commentary")].isNull() && m_english_commentary_isValid;

    m_forehead_isValid = ::OpenAPI::fromJsonValue(m_forehead, json[QString("forehead")]);
    m_forehead_isSet = !json[QString("forehead")].isNull() && m_forehead_isValid;

    m_jewelry_isValid = ::OpenAPI::fromJsonValue(m_jewelry, json[QString("jewelry")]);
    m_jewelry_isSet = !json[QString("jewelry")].isNull() && m_jewelry_isValid;

    m_large_breasts_isValid = ::OpenAPI::fromJsonValue(m_large_breasts, json[QString("large breasts")]);
    m_large_breasts_isSet = !json[QString("large breasts")].isNull() && m_large_breasts_isValid;

    m_lips_isValid = ::OpenAPI::fromJsonValue(m_lips, json[QString("lips")]);
    m_lips_isSet = !json[QString("lips")].isNull() && m_lips_isValid;

    m_long_hair_isValid = ::OpenAPI::fromJsonValue(m_long_hair, json[QString("long hair")]);
    m_long_hair_isSet = !json[QString("long hair")].isNull() && m_long_hair_isValid;

    m_looking_at_viewer_isValid = ::OpenAPI::fromJsonValue(m_looking_at_viewer, json[QString("looking at viewer")]);
    m_looking_at_viewer_isSet = !json[QString("looking at viewer")].isNull() && m_looking_at_viewer_isValid;

    m_muscular_isValid = ::OpenAPI::fromJsonValue(m_muscular, json[QString("muscular")]);
    m_muscular_isSet = !json[QString("muscular")].isNull() && m_muscular_isValid;

    m_muscular_female_isValid = ::OpenAPI::fromJsonValue(m_muscular_female, json[QString("muscular female")]);
    m_muscular_female_isSet = !json[QString("muscular female")].isNull() && m_muscular_female_isValid;

    m_navel_isValid = ::OpenAPI::fromJsonValue(m_navel, json[QString("navel")]);
    m_navel_isSet = !json[QString("navel")].isNull() && m_navel_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;

    m_patreon_username_isValid = ::OpenAPI::fromJsonValue(m_patreon_username, json[QString("patreon username")]);
    m_patreon_username_isSet = !json[QString("patreon username")].isNull() && m_patreon_username_isValid;

    m_solo_isValid = ::OpenAPI::fromJsonValue(m_solo, json[QString("solo")]);
    m_solo_isSet = !json[QString("solo")].isNull() && m_solo_isValid;

    m_swimsuit_isValid = ::OpenAPI::fromJsonValue(m_swimsuit, json[QString("swimsuit")]);
    m_swimsuit_isSet = !json[QString("swimsuit")].isNull() && m_swimsuit_isValid;

    m_thighs_isValid = ::OpenAPI::fromJsonValue(m_thighs, json[QString("thighs")]);
    m_thighs_isSet = !json[QString("thighs")].isNull() && m_thighs_isValid;

    m_toned_isValid = ::OpenAPI::fromJsonValue(m_toned, json[QString("toned")]);
    m_toned_isSet = !json[QString("toned")].isNull() && m_toned_isValid;

    m_unsafe_isValid = ::OpenAPI::fromJsonValue(m_unsafe, json[QString("unsafe")]);
    m_unsafe_isSet = !json[QString("unsafe")].isNull() && m_unsafe_isValid;
}

QString OAIInline_response_200_predictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200_predictions::asJsonObject() const {
    QJsonObject obj;
    if (m_r_1girl_isSet) {
        obj.insert(QString("1girl"), ::OpenAPI::toJsonValue(m_r_1girl));
    }
    if (m_abs_isSet) {
        obj.insert(QString("abs"), ::OpenAPI::toJsonValue(m_abs));
    }
    if (m_artificial_images_isSet) {
        obj.insert(QString("artificial-images"), ::OpenAPI::toJsonValue(m_artificial_images));
    }
    if (m_bikini_isSet) {
        obj.insert(QString("bikini"), ::OpenAPI::toJsonValue(m_bikini));
    }
    if (m_black_bikini_isSet) {
        obj.insert(QString("black bikini"), ::OpenAPI::toJsonValue(m_black_bikini));
    }
    if (m_black_hair_isSet) {
        obj.insert(QString("black hair"), ::OpenAPI::toJsonValue(m_black_hair));
    }
    if (m_breasts_isSet) {
        obj.insert(QString("breasts"), ::OpenAPI::toJsonValue(m_breasts));
    }
    if (m_choker_isSet) {
        obj.insert(QString("choker"), ::OpenAPI::toJsonValue(m_choker));
    }
    if (m_composition_one_female_isSet) {
        obj.insert(QString("composition_one_female"), ::OpenAPI::toJsonValue(m_composition_one_female));
    }
    if (m_dark_skin_isSet) {
        obj.insert(QString("dark skin"), ::OpenAPI::toJsonValue(m_dark_skin));
    }
    if (m_dark_skinned_female_isSet) {
        obj.insert(QString("dark-skinned female"), ::OpenAPI::toJsonValue(m_dark_skinned_female));
    }
    if (m_english_commentary_isSet) {
        obj.insert(QString("english commentary"), ::OpenAPI::toJsonValue(m_english_commentary));
    }
    if (m_forehead_isSet) {
        obj.insert(QString("forehead"), ::OpenAPI::toJsonValue(m_forehead));
    }
    if (m_jewelry_isSet) {
        obj.insert(QString("jewelry"), ::OpenAPI::toJsonValue(m_jewelry));
    }
    if (m_large_breasts_isSet) {
        obj.insert(QString("large breasts"), ::OpenAPI::toJsonValue(m_large_breasts));
    }
    if (m_lips_isSet) {
        obj.insert(QString("lips"), ::OpenAPI::toJsonValue(m_lips));
    }
    if (m_long_hair_isSet) {
        obj.insert(QString("long hair"), ::OpenAPI::toJsonValue(m_long_hair));
    }
    if (m_looking_at_viewer_isSet) {
        obj.insert(QString("looking at viewer"), ::OpenAPI::toJsonValue(m_looking_at_viewer));
    }
    if (m_muscular_isSet) {
        obj.insert(QString("muscular"), ::OpenAPI::toJsonValue(m_muscular));
    }
    if (m_muscular_female_isSet) {
        obj.insert(QString("muscular female"), ::OpenAPI::toJsonValue(m_muscular_female));
    }
    if (m_navel_isSet) {
        obj.insert(QString("navel"), ::OpenAPI::toJsonValue(m_navel));
    }
    if (m_original_isSet) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    if (m_patreon_username_isSet) {
        obj.insert(QString("patreon username"), ::OpenAPI::toJsonValue(m_patreon_username));
    }
    if (m_solo_isSet) {
        obj.insert(QString("solo"), ::OpenAPI::toJsonValue(m_solo));
    }
    if (m_swimsuit_isSet) {
        obj.insert(QString("swimsuit"), ::OpenAPI::toJsonValue(m_swimsuit));
    }
    if (m_thighs_isSet) {
        obj.insert(QString("thighs"), ::OpenAPI::toJsonValue(m_thighs));
    }
    if (m_toned_isSet) {
        obj.insert(QString("toned"), ::OpenAPI::toJsonValue(m_toned));
    }
    if (m_unsafe_isSet) {
        obj.insert(QString("unsafe"), ::OpenAPI::toJsonValue(m_unsafe));
    }
    return obj;
}

double OAIInline_response_200_predictions::getR1girl() const {
    return m_r_1girl;
}
void OAIInline_response_200_predictions::setR1girl(const double &r_1girl) {
    m_r_1girl = r_1girl;
    m_r_1girl_isSet = true;
}

bool OAIInline_response_200_predictions::is_r_1girl_Set() const{
    return m_r_1girl_isSet;
}

bool OAIInline_response_200_predictions::is_r_1girl_Valid() const{
    return m_r_1girl_isValid;
}

double OAIInline_response_200_predictions::getAbs() const {
    return m_abs;
}
void OAIInline_response_200_predictions::setAbs(const double &abs) {
    m_abs = abs;
    m_abs_isSet = true;
}

bool OAIInline_response_200_predictions::is_abs_Set() const{
    return m_abs_isSet;
}

bool OAIInline_response_200_predictions::is_abs_Valid() const{
    return m_abs_isValid;
}

double OAIInline_response_200_predictions::getArtificialImages() const {
    return m_artificial_images;
}
void OAIInline_response_200_predictions::setArtificialImages(const double &artificial_images) {
    m_artificial_images = artificial_images;
    m_artificial_images_isSet = true;
}

bool OAIInline_response_200_predictions::is_artificial_images_Set() const{
    return m_artificial_images_isSet;
}

bool OAIInline_response_200_predictions::is_artificial_images_Valid() const{
    return m_artificial_images_isValid;
}

double OAIInline_response_200_predictions::getBikini() const {
    return m_bikini;
}
void OAIInline_response_200_predictions::setBikini(const double &bikini) {
    m_bikini = bikini;
    m_bikini_isSet = true;
}

bool OAIInline_response_200_predictions::is_bikini_Set() const{
    return m_bikini_isSet;
}

bool OAIInline_response_200_predictions::is_bikini_Valid() const{
    return m_bikini_isValid;
}

double OAIInline_response_200_predictions::getBlackBikini() const {
    return m_black_bikini;
}
void OAIInline_response_200_predictions::setBlackBikini(const double &black_bikini) {
    m_black_bikini = black_bikini;
    m_black_bikini_isSet = true;
}

bool OAIInline_response_200_predictions::is_black_bikini_Set() const{
    return m_black_bikini_isSet;
}

bool OAIInline_response_200_predictions::is_black_bikini_Valid() const{
    return m_black_bikini_isValid;
}

double OAIInline_response_200_predictions::getBlackHair() const {
    return m_black_hair;
}
void OAIInline_response_200_predictions::setBlackHair(const double &black_hair) {
    m_black_hair = black_hair;
    m_black_hair_isSet = true;
}

bool OAIInline_response_200_predictions::is_black_hair_Set() const{
    return m_black_hair_isSet;
}

bool OAIInline_response_200_predictions::is_black_hair_Valid() const{
    return m_black_hair_isValid;
}

double OAIInline_response_200_predictions::getBreasts() const {
    return m_breasts;
}
void OAIInline_response_200_predictions::setBreasts(const double &breasts) {
    m_breasts = breasts;
    m_breasts_isSet = true;
}

bool OAIInline_response_200_predictions::is_breasts_Set() const{
    return m_breasts_isSet;
}

bool OAIInline_response_200_predictions::is_breasts_Valid() const{
    return m_breasts_isValid;
}

double OAIInline_response_200_predictions::getChoker() const {
    return m_choker;
}
void OAIInline_response_200_predictions::setChoker(const double &choker) {
    m_choker = choker;
    m_choker_isSet = true;
}

bool OAIInline_response_200_predictions::is_choker_Set() const{
    return m_choker_isSet;
}

bool OAIInline_response_200_predictions::is_choker_Valid() const{
    return m_choker_isValid;
}

double OAIInline_response_200_predictions::getCompositionOneFemale() const {
    return m_composition_one_female;
}
void OAIInline_response_200_predictions::setCompositionOneFemale(const double &composition_one_female) {
    m_composition_one_female = composition_one_female;
    m_composition_one_female_isSet = true;
}

bool OAIInline_response_200_predictions::is_composition_one_female_Set() const{
    return m_composition_one_female_isSet;
}

bool OAIInline_response_200_predictions::is_composition_one_female_Valid() const{
    return m_composition_one_female_isValid;
}

double OAIInline_response_200_predictions::getDarkSkin() const {
    return m_dark_skin;
}
void OAIInline_response_200_predictions::setDarkSkin(const double &dark_skin) {
    m_dark_skin = dark_skin;
    m_dark_skin_isSet = true;
}

bool OAIInline_response_200_predictions::is_dark_skin_Set() const{
    return m_dark_skin_isSet;
}

bool OAIInline_response_200_predictions::is_dark_skin_Valid() const{
    return m_dark_skin_isValid;
}

double OAIInline_response_200_predictions::getDarkSkinnedFemale() const {
    return m_dark_skinned_female;
}
void OAIInline_response_200_predictions::setDarkSkinnedFemale(const double &dark_skinned_female) {
    m_dark_skinned_female = dark_skinned_female;
    m_dark_skinned_female_isSet = true;
}

bool OAIInline_response_200_predictions::is_dark_skinned_female_Set() const{
    return m_dark_skinned_female_isSet;
}

bool OAIInline_response_200_predictions::is_dark_skinned_female_Valid() const{
    return m_dark_skinned_female_isValid;
}

double OAIInline_response_200_predictions::getEnglishCommentary() const {
    return m_english_commentary;
}
void OAIInline_response_200_predictions::setEnglishCommentary(const double &english_commentary) {
    m_english_commentary = english_commentary;
    m_english_commentary_isSet = true;
}

bool OAIInline_response_200_predictions::is_english_commentary_Set() const{
    return m_english_commentary_isSet;
}

bool OAIInline_response_200_predictions::is_english_commentary_Valid() const{
    return m_english_commentary_isValid;
}

double OAIInline_response_200_predictions::getForehead() const {
    return m_forehead;
}
void OAIInline_response_200_predictions::setForehead(const double &forehead) {
    m_forehead = forehead;
    m_forehead_isSet = true;
}

bool OAIInline_response_200_predictions::is_forehead_Set() const{
    return m_forehead_isSet;
}

bool OAIInline_response_200_predictions::is_forehead_Valid() const{
    return m_forehead_isValid;
}

double OAIInline_response_200_predictions::getJewelry() const {
    return m_jewelry;
}
void OAIInline_response_200_predictions::setJewelry(const double &jewelry) {
    m_jewelry = jewelry;
    m_jewelry_isSet = true;
}

bool OAIInline_response_200_predictions::is_jewelry_Set() const{
    return m_jewelry_isSet;
}

bool OAIInline_response_200_predictions::is_jewelry_Valid() const{
    return m_jewelry_isValid;
}

double OAIInline_response_200_predictions::getLargeBreasts() const {
    return m_large_breasts;
}
void OAIInline_response_200_predictions::setLargeBreasts(const double &large_breasts) {
    m_large_breasts = large_breasts;
    m_large_breasts_isSet = true;
}

bool OAIInline_response_200_predictions::is_large_breasts_Set() const{
    return m_large_breasts_isSet;
}

bool OAIInline_response_200_predictions::is_large_breasts_Valid() const{
    return m_large_breasts_isValid;
}

double OAIInline_response_200_predictions::getLips() const {
    return m_lips;
}
void OAIInline_response_200_predictions::setLips(const double &lips) {
    m_lips = lips;
    m_lips_isSet = true;
}

bool OAIInline_response_200_predictions::is_lips_Set() const{
    return m_lips_isSet;
}

bool OAIInline_response_200_predictions::is_lips_Valid() const{
    return m_lips_isValid;
}

double OAIInline_response_200_predictions::getLongHair() const {
    return m_long_hair;
}
void OAIInline_response_200_predictions::setLongHair(const double &long_hair) {
    m_long_hair = long_hair;
    m_long_hair_isSet = true;
}

bool OAIInline_response_200_predictions::is_long_hair_Set() const{
    return m_long_hair_isSet;
}

bool OAIInline_response_200_predictions::is_long_hair_Valid() const{
    return m_long_hair_isValid;
}

double OAIInline_response_200_predictions::getLookingAtViewer() const {
    return m_looking_at_viewer;
}
void OAIInline_response_200_predictions::setLookingAtViewer(const double &looking_at_viewer) {
    m_looking_at_viewer = looking_at_viewer;
    m_looking_at_viewer_isSet = true;
}

bool OAIInline_response_200_predictions::is_looking_at_viewer_Set() const{
    return m_looking_at_viewer_isSet;
}

bool OAIInline_response_200_predictions::is_looking_at_viewer_Valid() const{
    return m_looking_at_viewer_isValid;
}

double OAIInline_response_200_predictions::getMuscular() const {
    return m_muscular;
}
void OAIInline_response_200_predictions::setMuscular(const double &muscular) {
    m_muscular = muscular;
    m_muscular_isSet = true;
}

bool OAIInline_response_200_predictions::is_muscular_Set() const{
    return m_muscular_isSet;
}

bool OAIInline_response_200_predictions::is_muscular_Valid() const{
    return m_muscular_isValid;
}

double OAIInline_response_200_predictions::getMuscularFemale() const {
    return m_muscular_female;
}
void OAIInline_response_200_predictions::setMuscularFemale(const double &muscular_female) {
    m_muscular_female = muscular_female;
    m_muscular_female_isSet = true;
}

bool OAIInline_response_200_predictions::is_muscular_female_Set() const{
    return m_muscular_female_isSet;
}

bool OAIInline_response_200_predictions::is_muscular_female_Valid() const{
    return m_muscular_female_isValid;
}

double OAIInline_response_200_predictions::getNavel() const {
    return m_navel;
}
void OAIInline_response_200_predictions::setNavel(const double &navel) {
    m_navel = navel;
    m_navel_isSet = true;
}

bool OAIInline_response_200_predictions::is_navel_Set() const{
    return m_navel_isSet;
}

bool OAIInline_response_200_predictions::is_navel_Valid() const{
    return m_navel_isValid;
}

double OAIInline_response_200_predictions::getOriginal() const {
    return m_original;
}
void OAIInline_response_200_predictions::setOriginal(const double &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIInline_response_200_predictions::is_original_Set() const{
    return m_original_isSet;
}

bool OAIInline_response_200_predictions::is_original_Valid() const{
    return m_original_isValid;
}

double OAIInline_response_200_predictions::getPatreonUsername() const {
    return m_patreon_username;
}
void OAIInline_response_200_predictions::setPatreonUsername(const double &patreon_username) {
    m_patreon_username = patreon_username;
    m_patreon_username_isSet = true;
}

bool OAIInline_response_200_predictions::is_patreon_username_Set() const{
    return m_patreon_username_isSet;
}

bool OAIInline_response_200_predictions::is_patreon_username_Valid() const{
    return m_patreon_username_isValid;
}

double OAIInline_response_200_predictions::getSolo() const {
    return m_solo;
}
void OAIInline_response_200_predictions::setSolo(const double &solo) {
    m_solo = solo;
    m_solo_isSet = true;
}

bool OAIInline_response_200_predictions::is_solo_Set() const{
    return m_solo_isSet;
}

bool OAIInline_response_200_predictions::is_solo_Valid() const{
    return m_solo_isValid;
}

double OAIInline_response_200_predictions::getSwimsuit() const {
    return m_swimsuit;
}
void OAIInline_response_200_predictions::setSwimsuit(const double &swimsuit) {
    m_swimsuit = swimsuit;
    m_swimsuit_isSet = true;
}

bool OAIInline_response_200_predictions::is_swimsuit_Set() const{
    return m_swimsuit_isSet;
}

bool OAIInline_response_200_predictions::is_swimsuit_Valid() const{
    return m_swimsuit_isValid;
}

double OAIInline_response_200_predictions::getThighs() const {
    return m_thighs;
}
void OAIInline_response_200_predictions::setThighs(const double &thighs) {
    m_thighs = thighs;
    m_thighs_isSet = true;
}

bool OAIInline_response_200_predictions::is_thighs_Set() const{
    return m_thighs_isSet;
}

bool OAIInline_response_200_predictions::is_thighs_Valid() const{
    return m_thighs_isValid;
}

double OAIInline_response_200_predictions::getToned() const {
    return m_toned;
}
void OAIInline_response_200_predictions::setToned(const double &toned) {
    m_toned = toned;
    m_toned_isSet = true;
}

bool OAIInline_response_200_predictions::is_toned_Set() const{
    return m_toned_isSet;
}

bool OAIInline_response_200_predictions::is_toned_Valid() const{
    return m_toned_isValid;
}

double OAIInline_response_200_predictions::getUnsafe() const {
    return m_unsafe;
}
void OAIInline_response_200_predictions::setUnsafe(const double &unsafe) {
    m_unsafe = unsafe;
    m_unsafe_isSet = true;
}

bool OAIInline_response_200_predictions::is_unsafe_Set() const{
    return m_unsafe_isSet;
}

bool OAIInline_response_200_predictions::is_unsafe_Valid() const{
    return m_unsafe_isValid;
}

bool OAIInline_response_200_predictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_1girl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artificial_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bikini_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_black_bikini_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_black_hair_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breasts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_choker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composition_one_female_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dark_skin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dark_skinned_female_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_english_commentary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forehead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jewelry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_breasts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_hair_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looking_at_viewer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muscular_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muscular_female_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patreon_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swimsuit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thighs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsafe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200_predictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
