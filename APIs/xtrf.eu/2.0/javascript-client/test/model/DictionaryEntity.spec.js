/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.DictionaryEntity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DictionaryEntity', function() {
    it('should create an instance of DictionaryEntity', function() {
      // uncomment below and update the code to test DictionaryEntity
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be.a(XtrfHomePortalApi.DictionaryEntity);
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property andClearEventsQueue (base name: "andClearEventsQueue")', function() {
      // uncomment below and update the code to test the property andClearEventsQueue
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property auditDisplayName (base name: "auditDisplayName")', function() {
      // uncomment below and update the code to test the property auditDisplayName
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property auditPath (base name: "auditPath")', function() {
      // uncomment below and update the code to test the property auditPath
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property classNameKey (base name: "classNameKey")', function() {
      // uncomment below and update the code to test the property classNameKey
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property classSimpleName (base name: "classSimpleName")', function() {
      // uncomment below and update the code to test the property classSimpleName
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property compoundId (base name: "compoundId")', function() {
      // uncomment below and update the code to test the property compoundId
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property defaultEntity (base name: "defaultEntity")', function() {
      // uncomment below and update the code to test the property defaultEntity
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property entityMarkedAsNotSupposedToBePersisted (base name: "entityMarkedAsNotSupposedToBePersisted")', function() {
      // uncomment below and update the code to test the property entityMarkedAsNotSupposedToBePersisted
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property eventsQueueReadyToBeDispatched (base name: "eventsQueueReadyToBeDispatched")', function() {
      // uncomment below and update the code to test the property eventsQueueReadyToBeDispatched
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property identifier (base name: "identifier")', function() {
      // uncomment below and update the code to test the property identifier
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property internalDescription (base name: "internalDescription")', function() {
      // uncomment below and update the code to test the property internalDescription
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property lastModificationDate (base name: "lastModificationDate")', function() {
      // uncomment below and update the code to test the property lastModificationDate
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property packedCompoundId (base name: "packedCompoundId")', function() {
      // uncomment below and update the code to test the property packedCompoundId
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property preferedEntity (base name: "preferedEntity")', function() {
      // uncomment below and update the code to test the property preferedEntity
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property preferred (base name: "preferred")', function() {
      // uncomment below and update the code to test the property preferred
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new XtrfHomePortalApi.DictionaryEntity();
      //expect(instance).to.be();
    });

  });

}));
