/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.FormDataBodyPart();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FormDataBodyPart', function() {
    it('should create an instance of FormDataBodyPart', function() {
      // uncomment below and update the code to test FormDataBodyPart
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be.a(XtrfHomePortalApi.FormDataBodyPart);
    });

    it('should have the property contentDisposition (base name: "contentDisposition")', function() {
      // uncomment below and update the code to test the property contentDisposition
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property entity (base name: "entity")', function() {
      // uncomment below and update the code to test the property entity
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property formDataContentDisposition (base name: "formDataContentDisposition")', function() {
      // uncomment below and update the code to test the property formDataContentDisposition
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property headers (base name: "headers")', function() {
      // uncomment below and update the code to test the property headers
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property mediaType (base name: "mediaType")', function() {
      // uncomment below and update the code to test the property mediaType
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property messageBodyWorkers (base name: "messageBodyWorkers")', function() {
      // uncomment below and update the code to test the property messageBodyWorkers
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property parameterizedHeaders (base name: "parameterizedHeaders")', function() {
      // uncomment below and update the code to test the property parameterizedHeaders
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property providers (base name: "providers")', function() {
      // uncomment below and update the code to test the property providers
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property simple (base name: "simple")', function() {
      // uncomment below and update the code to test the property simple
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new XtrfHomePortalApi.FormDataBodyPart();
      //expect(instance).to.be();
    });

  });

}));
