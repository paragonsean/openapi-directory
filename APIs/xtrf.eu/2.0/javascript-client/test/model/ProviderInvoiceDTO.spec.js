/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProviderInvoiceDTO', function() {
    it('should create an instance of ProviderInvoiceDTO', function() {
      // uncomment below and update the code to test ProviderInvoiceDTO
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be.a(XtrfHomePortalApi.ProviderInvoiceDTO);
    });

    it('should have the property currencyId (base name: "currencyId")', function() {
      // uncomment below and update the code to test the property currencyId
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property dates (base name: "dates")', function() {
      // uncomment below and update the code to test the property dates
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property draftNumber (base name: "draftNumber")', function() {
      // uncomment below and update the code to test the property draftNumber
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property finalNumber (base name: "finalNumber")', function() {
      // uncomment below and update the code to test the property finalNumber
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property internalNumber (base name: "internalNumber")', function() {
      // uncomment below and update the code to test the property internalNumber
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property jobsNetValue (base name: "jobsNetValue")', function() {
      // uncomment below and update the code to test the property jobsNetValue
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property notesFromProvider (base name: "notesFromProvider")', function() {
      // uncomment below and update the code to test the property notesFromProvider
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property paymentStatus (base name: "paymentStatus")', function() {
      // uncomment below and update the code to test the property paymentStatus
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property providerId (base name: "providerId")', function() {
      // uncomment below and update the code to test the property providerId
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property totalGross (base name: "totalGross")', function() {
      // uncomment below and update the code to test the property totalGross
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property totalGrossInWords (base name: "totalGrossInWords")', function() {
      // uncomment below and update the code to test the property totalGrossInWords
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

    it('should have the property totalNetto (base name: "totalNetto")', function() {
      // uncomment below and update the code to test the property totalNetto
      //var instance = new XtrfHomePortalApi.ProviderInvoiceDTO();
      //expect(instance).to.be();
    });

  });

}));
