/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.PayableCreateDTO();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PayableCreateDTO', function() {
    it('should create an instance of PayableCreateDTO', function() {
      // uncomment below and update the code to test PayableCreateDTO
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be.a(XtrfHomePortalApi.PayableCreateDTO);
    });

    it('should have the property calculationUnitId (base name: "calculationUnitId")', function() {
      // uncomment below and update the code to test the property calculationUnitId
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property catLogFile (base name: "catLogFile")', function() {
      // uncomment below and update the code to test the property catLogFile
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property currencyId (base name: "currencyId")', function() {
      // uncomment below and update the code to test the property currencyId
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property ignoreMinimumCharge (base name: "ignoreMinimumCharge")', function() {
      // uncomment below and update the code to test the property ignoreMinimumCharge
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property invoiceId (base name: "invoiceId")', function() {
      // uncomment below and update the code to test the property invoiceId
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property jobId (base name: "jobId")', function() {
      // uncomment below and update the code to test the property jobId
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property jobTypeId (base name: "jobTypeId")', function() {
      // uncomment below and update the code to test the property jobTypeId
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property languageCombination (base name: "languageCombination")', function() {
      // uncomment below and update the code to test the property languageCombination
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property languageCombinationIdNumber (base name: "languageCombinationIdNumber")', function() {
      // uncomment below and update the code to test the property languageCombinationIdNumber
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property minimumCharge (base name: "minimumCharge")', function() {
      // uncomment below and update the code to test the property minimumCharge
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property rate (base name: "rate")', function() {
      // uncomment below and update the code to test the property rate
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property rateOrigin (base name: "rateOrigin")', function() {
      // uncomment below and update the code to test the property rateOrigin
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new XtrfHomePortalApi.PayableCreateDTO();
      //expect(instance).to.be();
    });

  });

}));
