/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.ClientInvoicesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClientInvoicesApi', function() {
    describe('create1', function() {
      it('should call create1 successfully', function(done) {
        //uncomment below and update the code to test create1
        //instance.create1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPayment', function() {
      it('should call createPayment successfully', function(done) {
        //uncomment below and update the code to test createPayment
        //instance.createPayment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete1', function() {
      it('should call delete1 successfully', function(done) {
        //uncomment below and update the code to test delete1
        //instance.delete1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete2', function() {
      it('should call delete2 successfully', function(done) {
        //uncomment below and update the code to test delete2
        //instance.delete2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadDocuments', function() {
      it('should call downloadDocuments successfully', function(done) {
        //uncomment below and update the code to test downloadDocuments
        //instance.downloadDocuments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('duplicate', function() {
      it('should call duplicate successfully', function(done) {
        //uncomment below and update the code to test duplicate
        //instance.duplicate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('duplicateAsProForma', function() {
      it('should call duplicateAsProForma successfully', function(done) {
        //uncomment below and update the code to test duplicateAsProForma
        //instance.duplicateAsProForma(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAll', function() {
      it('should call getAll successfully', function(done) {
        //uncomment below and update the code to test getAll
        //instance.getAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllIds', function() {
      it('should call getAllIds successfully', function(done) {
        //uncomment below and update the code to test getAllIds
        //instance.getAllIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById', function() {
      it('should call getById successfully', function(done) {
        //uncomment below and update the code to test getById
        //instance.getById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDates', function() {
      it('should call getDates successfully', function(done) {
        //uncomment below and update the code to test getDates
        //instance.getDates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocument', function() {
      it('should call getDocument successfully', function(done) {
        //uncomment below and update the code to test getDocument
        //instance.getDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPaymentTerms', function() {
      it('should call getPaymentTerms successfully', function(done) {
        //uncomment below and update the code to test getPaymentTerms
        //instance.getPaymentTerms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPayments', function() {
      it('should call getPayments successfully', function(done) {
        //uncomment below and update the code to test getPayments
        //instance.getPayments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendReminder', function() {
      it('should call sendReminder successfully', function(done) {
        //uncomment below and update the code to test sendReminder
        //instance.sendReminder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendReminders', function() {
      it('should call sendReminders successfully', function(done) {
        //uncomment below and update the code to test sendReminders
        //instance.sendReminders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
