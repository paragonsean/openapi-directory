/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.ProjectsSmartV2Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsSmartV2Api', function() {
    describe('addExternalFileLinks', function() {
      it('should call addExternalFileLinks successfully', function(done) {
        //uncomment below and update the code to test addExternalFileLinks
        //instance.addExternalFileLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFileLinks1', function() {
      it('should call addFileLinks1 successfully', function(done) {
        //uncomment below and update the code to test addFileLinks1
        //instance.addFileLinks1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFiles1', function() {
      it('should call addFiles1 successfully', function(done) {
        //uncomment below and update the code to test addFiles1
        //instance.addFiles1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addJobToProcess', function() {
      it('should call addJobToProcess successfully', function(done) {
        //uncomment below and update the code to test addJobToProcess
        //instance.addJobToProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('archive', function() {
      it('should call archive successfully', function(done) {
        //uncomment below and update the code to test archive
        //instance.archive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeStatus2', function() {
      it('should call changeStatus2 successfully', function(done) {
        //uncomment below and update the code to test changeStatus2
        //instance.changeStatus2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('create6', function() {
      it('should call create6 successfully', function(done) {
        //uncomment below and update the code to test create6
        //instance.create6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPayable2', function() {
      it('should call createPayable2 successfully', function(done) {
        //uncomment below and update the code to test createPayable2
        //instance.createPayable2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReceivable2', function() {
      it('should call createReceivable2 successfully', function(done) {
        //uncomment below and update the code to test createReceivable2
        //instance.createReceivable2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePayable2', function() {
      it('should call deletePayable2 successfully', function(done) {
        //uncomment below and update the code to test deletePayable2
        //instance.deletePayable2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReceivable2', function() {
      it('should call deleteReceivable2 successfully', function(done) {
        //uncomment below and update the code to test deleteReceivable2
        //instance.deleteReceivable2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getByExternalId1', function() {
      it('should call getByExternalId1 successfully', function(done) {
        //uncomment below and update the code to test getByExternalId1
        //instance.getByExternalId1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById9', function() {
      it('should call getById9 successfully', function(done) {
        //uncomment below and update the code to test getById9
        //instance.getById9(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCATToolProjectInfo', function() {
      it('should call getCATToolProjectInfo successfully', function(done) {
        //uncomment below and update the code to test getCATToolProjectInfo
        //instance.getCATToolProjectInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContacts2', function() {
      it('should call getContacts2 successfully', function(done) {
        //uncomment below and update the code to test getContacts2
        //instance.getContacts2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields8', function() {
      it('should call getCustomFields8 successfully', function(done) {
        //uncomment below and update the code to test getCustomFields8
        //instance.getCustomFields8(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeliverableFiles', function() {
      it('should call getDeliverableFiles successfully', function(done) {
        //uncomment below and update the code to test getDeliverableFiles
        //instance.getDeliverableFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFileById2', function() {
      it('should call getFileById2 successfully', function(done) {
        //uncomment below and update the code to test getFileById2
        //instance.getFileById2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFileContentById', function() {
      it('should call getFileContentById successfully', function(done) {
        //uncomment below and update the code to test getFileContentById
        //instance.getFileContentById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFiles', function() {
      it('should call getFiles successfully', function(done) {
        //uncomment below and update the code to test getFiles
        //instance.getFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFinance2', function() {
      it('should call getFinance2 successfully', function(done) {
        //uncomment below and update the code to test getFinance2
        //instance.getFinance2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getJobs', function() {
      it('should call getJobs successfully', function(done) {
        //uncomment below and update the code to test getJobs
        //instance.getJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProcessId', function() {
      it('should call getProcessId successfully', function(done) {
        //uncomment below and update the code to test getProcessId
        //instance.getProcessId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClientDeadline', function() {
      it('should call updateClientDeadline successfully', function(done) {
        //uncomment below and update the code to test updateClientDeadline
        //instance.updateClientDeadline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClientNotes', function() {
      it('should call updateClientNotes successfully', function(done) {
        //uncomment below and update the code to test updateClientNotes
        //instance.updateClientNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClientReferenceNumber', function() {
      it('should call updateClientReferenceNumber successfully', function(done) {
        //uncomment below and update the code to test updateClientReferenceNumber
        //instance.updateClientReferenceNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContacts2', function() {
      it('should call updateContacts2 successfully', function(done) {
        //uncomment below and update the code to test updateContacts2
        //instance.updateContacts2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomField2', function() {
      it('should call updateCustomField2 successfully', function(done) {
        //uncomment below and update the code to test updateCustomField2
        //instance.updateCustomField2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInternalNotes', function() {
      it('should call updateInternalNotes successfully', function(done) {
        //uncomment below and update the code to test updateInternalNotes
        //instance.updateInternalNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOrderedOn', function() {
      it('should call updateOrderedOn successfully', function(done) {
        //uncomment below and update the code to test updateOrderedOn
        //instance.updateOrderedOn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePayable2', function() {
      it('should call updatePayable2 successfully', function(done) {
        //uncomment below and update the code to test updatePayable2
        //instance.updatePayable2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReceivable2', function() {
      it('should call updateReceivable2 successfully', function(done) {
        //uncomment below and update the code to test updateReceivable2
        //instance.updateReceivable2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSourceLanguage', function() {
      it('should call updateSourceLanguage successfully', function(done) {
        //uncomment below and update the code to test updateSourceLanguage
        //instance.updateSourceLanguage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSpecialization', function() {
      it('should call updateSpecialization successfully', function(done) {
        //uncomment below and update the code to test updateSpecialization
        //instance.updateSpecialization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTargetLanguages', function() {
      it('should call updateTargetLanguages successfully', function(done) {
        //uncomment below and update the code to test updateTargetLanguages
        //instance.updateTargetLanguages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVendorInstructions', function() {
      it('should call updateVendorInstructions successfully', function(done) {
        //uncomment below and update the code to test updateVendorInstructions
        //instance.updateVendorInstructions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVolume', function() {
      it('should call updateVolume successfully', function(done) {
        //uncomment below and update the code to test updateVolume
        //instance.updateVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadFile2', function() {
      it('should call uploadFile2 successfully', function(done) {
        //uncomment below and update the code to test uploadFile2
        //instance.uploadFile2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
