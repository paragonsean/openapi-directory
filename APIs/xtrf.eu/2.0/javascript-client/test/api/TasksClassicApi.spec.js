/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.TasksClassicApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TasksClassicApi', function() {
    describe('addFile', function() {
      it('should call addFile successfully', function(done) {
        //uncomment below and update the code to test addFile
        //instance.addFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete14', function() {
      it('should call delete14 successfully', function(done) {
        //uncomment below and update the code to test delete14
        //instance.delete14(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContacts1', function() {
      it('should call getContacts1 successfully', function(done) {
        //uncomment below and update the code to test getContacts1
        //instance.getContacts1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields7', function() {
      it('should call getCustomFields7 successfully', function(done) {
        //uncomment below and update the code to test getCustomFields7
        //instance.getCustomFields7(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDates3', function() {
      it('should call getDates3 successfully', function(done) {
        //uncomment below and update the code to test getDates3
        //instance.getDates3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstructions2', function() {
      it('should call getInstructions2 successfully', function(done) {
        //uncomment below and update the code to test getInstructions2
        //instance.getInstructions2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProgress', function() {
      it('should call getProgress successfully', function(done) {
        //uncomment below and update the code to test getProgress
        //instance.getProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTaskFiles', function() {
      it('should call getTaskFiles successfully', function(done) {
        //uncomment below and update the code to test getTaskFiles
        //instance.getTaskFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('start1', function() {
      it('should call start1 successfully', function(done) {
        //uncomment below and update the code to test start1
        //instance.start1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateClientTaskPONumber', function() {
      it('should call updateClientTaskPONumber successfully', function(done) {
        //uncomment below and update the code to test updateClientTaskPONumber
        //instance.updateClientTaskPONumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContacts1', function() {
      it('should call updateContacts1 successfully', function(done) {
        //uncomment below and update the code to test updateContacts1
        //instance.updateContacts1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomFields5', function() {
      it('should call updateCustomFields5 successfully', function(done) {
        //uncomment below and update the code to test updateCustomFields5
        //instance.updateCustomFields5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDates2', function() {
      it('should call updateDates2 successfully', function(done) {
        //uncomment below and update the code to test updateDates2
        //instance.updateDates2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstructions3', function() {
      it('should call updateInstructions3 successfully', function(done) {
        //uncomment below and update the code to test updateInstructions3
        //instance.updateInstructions3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateName', function() {
      it('should call updateName successfully', function(done) {
        //uncomment below and update the code to test updateName
        //instance.updateName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
