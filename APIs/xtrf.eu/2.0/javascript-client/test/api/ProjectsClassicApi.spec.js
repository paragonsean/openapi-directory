/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.ProjectsClassicApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsClassicApi', function() {
    describe('create5', function() {
      it('should call create5 successfully', function(done) {
        //uncomment below and update the code to test create5
        //instance.create5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLanguageCombination', function() {
      it('should call createLanguageCombination successfully', function(done) {
        //uncomment below and update the code to test createLanguageCombination
        //instance.createLanguageCombination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPayable', function() {
      it('should call createPayable successfully', function(done) {
        //uncomment below and update the code to test createPayable
        //instance.createPayable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReceivable', function() {
      it('should call createReceivable successfully', function(done) {
        //uncomment below and update the code to test createReceivable
        //instance.createReceivable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTask', function() {
      it('should call createTask successfully', function(done) {
        //uncomment below and update the code to test createTask
        //instance.createTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete12', function() {
      it('should call delete12 successfully', function(done) {
        //uncomment below and update the code to test delete12
        //instance.delete12(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePayable', function() {
      it('should call deletePayable successfully', function(done) {
        //uncomment below and update the code to test deletePayable
        //instance.deletePayable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReceivable', function() {
      it('should call deleteReceivable successfully', function(done) {
        //uncomment below and update the code to test deleteReceivable
        //instance.deleteReceivable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllIds6', function() {
      it('should call getAllIds6 successfully', function(done) {
        //uncomment below and update the code to test getAllIds6
        //instance.getAllIds6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById7', function() {
      it('should call getById7 successfully', function(done) {
        //uncomment below and update the code to test getById7
        //instance.getById7(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContacts', function() {
      it('should call getContacts successfully', function(done) {
        //uncomment below and update the code to test getContacts
        //instance.getContacts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields5', function() {
      it('should call getCustomFields5 successfully', function(done) {
        //uncomment below and update the code to test getCustomFields5
        //instance.getCustomFields5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDates1', function() {
      it('should call getDates1 successfully', function(done) {
        //uncomment below and update the code to test getDates1
        //instance.getDates1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFileById', function() {
      it('should call getFileById successfully', function(done) {
        //uncomment below and update the code to test getFileById
        //instance.getFileById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFinance', function() {
      it('should call getFinance successfully', function(done) {
        //uncomment below and update the code to test getFinance
        //instance.getFinance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstructions', function() {
      it('should call getInstructions successfully', function(done) {
        //uncomment below and update the code to test getInstructions
        //instance.getInstructions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContacts', function() {
      it('should call updateContacts successfully', function(done) {
        //uncomment below and update the code to test updateContacts
        //instance.updateContacts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomFields3', function() {
      it('should call updateCustomFields3 successfully', function(done) {
        //uncomment below and update the code to test updateCustomFields3
        //instance.updateCustomFields3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDates1', function() {
      it('should call updateDates1 successfully', function(done) {
        //uncomment below and update the code to test updateDates1
        //instance.updateDates1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstructions1', function() {
      it('should call updateInstructions1 successfully', function(done) {
        //uncomment below and update the code to test updateInstructions1
        //instance.updateInstructions1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePayable', function() {
      it('should call updatePayable successfully', function(done) {
        //uncomment below and update the code to test updatePayable
        //instance.updatePayable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReceivable', function() {
      it('should call updateReceivable successfully', function(done) {
        //uncomment below and update the code to test updateReceivable
        //instance.updateReceivable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
