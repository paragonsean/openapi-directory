/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.VendorsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VendorsApi', function() {
    describe('delete10', function() {
      it('should call delete10 successfully', function(done) {
        //uncomment below and update the code to test delete10
        //instance.delete10(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete8', function() {
      it('should call delete8 successfully', function(done) {
        //uncomment below and update the code to test delete8
        //instance.delete8(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete9', function() {
      it('should call delete9 successfully', function(done) {
        //uncomment below and update the code to test delete9
        //instance.delete9(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAddress1', function() {
      it('should call getAddress1 successfully', function(done) {
        //uncomment below and update the code to test getAddress1
        //instance.getAddress1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllIds4', function() {
      it('should call getAllIds4 successfully', function(done) {
        //uncomment below and update the code to test getAllIds4
        //instance.getAllIds4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllIds5', function() {
      it('should call getAllIds5 successfully', function(done) {
        //uncomment below and update the code to test getAllIds5
        //instance.getAllIds5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById4', function() {
      it('should call getById4 successfully', function(done) {
        //uncomment below and update the code to test getById4
        //instance.getById4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById5', function() {
      it('should call getById5 successfully', function(done) {
        //uncomment below and update the code to test getById5
        //instance.getById5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompetencies', function() {
      it('should call getCompetencies successfully', function(done) {
        //uncomment below and update the code to test getCompetencies
        //instance.getCompetencies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContact2', function() {
      it('should call getContact2 successfully', function(done) {
        //uncomment below and update the code to test getContact2
        //instance.getContact2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContact3', function() {
      it('should call getContact3 successfully', function(done) {
        //uncomment below and update the code to test getContact3
        //instance.getContact3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCorrespondenceAddress1', function() {
      it('should call getCorrespondenceAddress1 successfully', function(done) {
        //uncomment below and update the code to test getCorrespondenceAddress1
        //instance.getCorrespondenceAddress1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields2', function() {
      it('should call getCustomFields2 successfully', function(done) {
        //uncomment below and update the code to test getCustomFields2
        //instance.getCustomFields2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields3', function() {
      it('should call getCustomFields3 successfully', function(done) {
        //uncomment below and update the code to test getCustomFields3
        //instance.getCustomFields3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendInvitations', function() {
      it('should call sendInvitations successfully', function(done) {
        //uncomment below and update the code to test sendInvitations
        //instance.sendInvitations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendInvitations1', function() {
      it('should call sendInvitations1 successfully', function(done) {
        //uncomment below and update the code to test sendInvitations1
        //instance.sendInvitations1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
