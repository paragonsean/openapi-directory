/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.ClientsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClientsApi', function() {
    describe('create2', function() {
      it('should call create2 successfully', function(done) {
        //uncomment below and update the code to test create2
        //instance.create2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('create3', function() {
      it('should call create3 successfully', function(done) {
        //uncomment below and update the code to test create3
        //instance.create3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete3', function() {
      it('should call delete3 successfully', function(done) {
        //uncomment below and update the code to test delete3
        //instance.delete3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete4', function() {
      it('should call delete4 successfully', function(done) {
        //uncomment below and update the code to test delete4
        //instance.delete4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete5', function() {
      it('should call delete5 successfully', function(done) {
        //uncomment below and update the code to test delete5
        //instance.delete5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateSingleUseSignInToken', function() {
      it('should call generateSingleUseSignInToken successfully', function(done) {
        //uncomment below and update the code to test generateSingleUseSignInToken
        //instance.generateSingleUseSignInToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAddress', function() {
      it('should call getAddress successfully', function(done) {
        //uncomment below and update the code to test getAddress
        //instance.getAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllIds1', function() {
      it('should call getAllIds1 successfully', function(done) {
        //uncomment below and update the code to test getAllIds1
        //instance.getAllIds1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllIds2', function() {
      it('should call getAllIds2 successfully', function(done) {
        //uncomment below and update the code to test getAllIds2
        //instance.getAllIds2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllNamesWithIds', function() {
      it('should call getAllNamesWithIds successfully', function(done) {
        //uncomment below and update the code to test getAllNamesWithIds
        //instance.getAllNamesWithIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById1', function() {
      it('should call getById1 successfully', function(done) {
        //uncomment below and update the code to test getById1
        //instance.getById1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById2', function() {
      it('should call getById2 successfully', function(done) {
        //uncomment below and update the code to test getById2
        //instance.getById2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCategories', function() {
      it('should call getCategories successfully', function(done) {
        //uncomment below and update the code to test getCategories
        //instance.getCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContact', function() {
      it('should call getContact successfully', function(done) {
        //uncomment below and update the code to test getContact
        //instance.getContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContact1', function() {
      it('should call getContact1 successfully', function(done) {
        //uncomment below and update the code to test getContact1
        //instance.getContact1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCorrespondenceAddress', function() {
      it('should call getCorrespondenceAddress successfully', function(done) {
        //uncomment below and update the code to test getCorrespondenceAddress
        //instance.getCorrespondenceAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomField', function() {
      it('should call getCustomField successfully', function(done) {
        //uncomment below and update the code to test getCustomField
        //instance.getCustomField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields', function() {
      it('should call getCustomFields successfully', function(done) {
        //uncomment below and update the code to test getCustomFields
        //instance.getCustomFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields1', function() {
      it('should call getCustomFields1 successfully', function(done) {
        //uncomment below and update the code to test getCustomFields1
        //instance.getCustomFields1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIndustries', function() {
      it('should call getIndustries successfully', function(done) {
        //uncomment below and update the code to test getIndustries
        //instance.getIndustries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update1', function() {
      it('should call update1 successfully', function(done) {
        //uncomment below and update the code to test update1
        //instance.update1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('update2', function() {
      it('should call update2 successfully', function(done) {
        //uncomment below and update the code to test update2
        //instance.update2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAddress', function() {
      it('should call updateAddress successfully', function(done) {
        //uncomment below and update the code to test updateAddress
        //instance.updateAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCategories', function() {
      it('should call updateCategories successfully', function(done) {
        //uncomment below and update the code to test updateCategories
        //instance.updateCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContact', function() {
      it('should call updateContact successfully', function(done) {
        //uncomment below and update the code to test updateContact
        //instance.updateContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContact1', function() {
      it('should call updateContact1 successfully', function(done) {
        //uncomment below and update the code to test updateContact1
        //instance.updateContact1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCorrespondenceAddress', function() {
      it('should call updateCorrespondenceAddress successfully', function(done) {
        //uncomment below and update the code to test updateCorrespondenceAddress
        //instance.updateCorrespondenceAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomField', function() {
      it('should call updateCustomField successfully', function(done) {
        //uncomment below and update the code to test updateCustomField
        //instance.updateCustomField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomFields', function() {
      it('should call updateCustomFields successfully', function(done) {
        //uncomment below and update the code to test updateCustomFields
        //instance.updateCustomFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomFields1', function() {
      it('should call updateCustomFields1 successfully', function(done) {
        //uncomment below and update the code to test updateCustomFields1
        //instance.updateCustomFields1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIndustries', function() {
      it('should call updateIndustries successfully', function(done) {
        //uncomment below and update the code to test updateIndustries
        //instance.updateIndustries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
