/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.QuotesClassicApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuotesClassicApi', function() {
    describe('createLanguageCombination1', function() {
      it('should call createLanguageCombination1 successfully', function(done) {
        //uncomment below and update the code to test createLanguageCombination1
        //instance.createLanguageCombination1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPayable1', function() {
      it('should call createPayable1 successfully', function(done) {
        //uncomment below and update the code to test createPayable1
        //instance.createPayable1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReceivable1', function() {
      it('should call createReceivable1 successfully', function(done) {
        //uncomment below and update the code to test createReceivable1
        //instance.createReceivable1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTask1', function() {
      it('should call createTask1 successfully', function(done) {
        //uncomment below and update the code to test createTask1
        //instance.createTask1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delete13', function() {
      it('should call delete13 successfully', function(done) {
        //uncomment below and update the code to test delete13
        //instance.delete13(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePayable1', function() {
      it('should call deletePayable1 successfully', function(done) {
        //uncomment below and update the code to test deletePayable1
        //instance.deletePayable1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReceivable1', function() {
      it('should call deleteReceivable1 successfully', function(done) {
        //uncomment below and update the code to test deleteReceivable1
        //instance.deleteReceivable1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllIds7', function() {
      it('should call getAllIds7 successfully', function(done) {
        //uncomment below and update the code to test getAllIds7
        //instance.getAllIds7(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getById8', function() {
      it('should call getById8 successfully', function(done) {
        //uncomment below and update the code to test getById8
        //instance.getById8(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCustomFields6', function() {
      it('should call getCustomFields6 successfully', function(done) {
        //uncomment below and update the code to test getCustomFields6
        //instance.getCustomFields6(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDates2', function() {
      it('should call getDates2 successfully', function(done) {
        //uncomment below and update the code to test getDates2
        //instance.getDates2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFinance1', function() {
      it('should call getFinance1 successfully', function(done) {
        //uncomment below and update the code to test getFinance1
        //instance.getFinance1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstructions1', function() {
      it('should call getInstructions1 successfully', function(done) {
        //uncomment below and update the code to test getInstructions1
        //instance.getInstructions1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('send1', function() {
      it('should call send1 successfully', function(done) {
        //uncomment below and update the code to test send1
        //instance.send1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('start', function() {
      it('should call start successfully', function(done) {
        //uncomment below and update the code to test start
        //instance.start(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCustomFields4', function() {
      it('should call updateCustomFields4 successfully', function(done) {
        //uncomment below and update the code to test updateCustomFields4
        //instance.updateCustomFields4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstructions2', function() {
      it('should call updateInstructions2 successfully', function(done) {
        //uncomment below and update the code to test updateInstructions2
        //instance.updateInstructions2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePayable1', function() {
      it('should call updatePayable1 successfully', function(done) {
        //uncomment below and update the code to test updatePayable1
        //instance.updatePayable1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReceivable1', function() {
      it('should call updateReceivable1 successfully', function(done) {
        //uncomment below and update the code to test updateReceivable1
        //instance.updateReceivable1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
