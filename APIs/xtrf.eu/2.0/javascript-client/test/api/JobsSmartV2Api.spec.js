/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XtrfHomePortalApi);
  }
}(this, function(expect, XtrfHomePortalApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XtrfHomePortalApi.JobsSmartV2Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JobsSmartV2Api', function() {
    describe('addExternalFileLink', function() {
      it('should call addExternalFileLink successfully', function(done) {
        //uncomment below and update the code to test addExternalFileLink
        //instance.addExternalFileLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFileLinks', function() {
      it('should call addFileLinks successfully', function(done) {
        //uncomment below and update the code to test addFileLinks
        //instance.addFileLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFiles', function() {
      it('should call addFiles successfully', function(done) {
        //uncomment below and update the code to test addFiles
        //instance.addFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assignVendor1', function() {
      it('should call assignVendor1 successfully', function(done) {
        //uncomment below and update the code to test assignVendor1
        //instance.assignVendor1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeDates', function() {
      it('should call changeDates successfully', function(done) {
        //uncomment below and update the code to test changeDates
        //instance.changeDates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeStatus1', function() {
      it('should call changeStatus1 successfully', function(done) {
        //uncomment below and update the code to test changeStatus1
        //instance.changeStatus1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getByExternalId', function() {
      it('should call getByExternalId successfully', function(done) {
        //uncomment below and update the code to test getByExternalId
        //instance.getByExternalId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeliveredFiles', function() {
      it('should call getDeliveredFiles successfully', function(done) {
        //uncomment below and update the code to test getDeliveredFiles
        //instance.getDeliveredFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFileById1', function() {
      it('should call getFileById1 successfully', function(done) {
        //uncomment below and update the code to test getFileById1
        //instance.getFileById1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSharedReferenceFiles', function() {
      it('should call getSharedReferenceFiles successfully', function(done) {
        //uncomment below and update the code to test getSharedReferenceFiles
        //instance.getSharedReferenceFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSharedWorkFiles', function() {
      it('should call getSharedWorkFiles successfully', function(done) {
        //uncomment below and update the code to test getSharedWorkFiles
        //instance.getSharedWorkFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shareAsReferenceFiles', function() {
      it('should call shareAsReferenceFiles successfully', function(done) {
        //uncomment below and update the code to test shareAsReferenceFiles
        //instance.shareAsReferenceFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shareAsWorkFiles', function() {
      it('should call shareAsWorkFiles successfully', function(done) {
        //uncomment below and update the code to test shareAsWorkFiles
        //instance.shareAsWorkFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopSharing', function() {
      it('should call stopSharing successfully', function(done) {
        //uncomment below and update the code to test stopSharing
        //instance.stopSharing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstructions4', function() {
      it('should call updateInstructions4 successfully', function(done) {
        //uncomment below and update the code to test updateInstructions4
        //instance.updateInstructions4(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadFile1', function() {
      it('should call uploadFile1 successfully', function(done) {
        //uncomment below and update the code to test uploadFile1
        //instance.uploadFile1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
