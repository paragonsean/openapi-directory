/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CalculationUnitDTO from './CalculationUnitDTO';
import CategoryDTO from './CategoryDTO';
import CountryDTO from './CountryDTO';
import CurrencyDTO from './CurrencyDTO';
import IndustryDTO from './IndustryDTO';
import JobTypeDTO from './JobTypeDTO';
import LanguageDTO from './LanguageDTO';
import LanguageSpecializationDTO from './LanguageSpecializationDTO';
import LeadSourceDTO from './LeadSourceDTO';
import PersonDepartmentDTO from './PersonDepartmentDTO';
import PersonPositionDTO from './PersonPositionDTO';
import ProvinceDTO from './ProvinceDTO';

/**
 * The ManyValuesPerTypeDTO model module.
 * @module model/ManyValuesPerTypeDTO
 * @version 2.0
 */
class ManyValuesPerTypeDTO {
    /**
     * Constructs a new <code>ManyValuesPerTypeDTO</code>.
     * @alias module:model/ManyValuesPerTypeDTO
     */
    constructor() { 
        
        ManyValuesPerTypeDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManyValuesPerTypeDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManyValuesPerTypeDTO} obj Optional instance to populate.
     * @return {module:model/ManyValuesPerTypeDTO} The populated <code>ManyValuesPerTypeDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManyValuesPerTypeDTO();

            if (data.hasOwnProperty('calculationUnit')) {
                obj['calculationUnit'] = ApiClient.convertToType(data['calculationUnit'], [CalculationUnitDTO]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], [CategoryDTO]);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], [CountryDTO]);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], [CurrencyDTO]);
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], [IndustryDTO]);
            }
            if (data.hasOwnProperty('jobType')) {
                obj['jobType'] = ApiClient.convertToType(data['jobType'], [JobTypeDTO]);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], [LanguageDTO]);
            }
            if (data.hasOwnProperty('leadSource')) {
                obj['leadSource'] = ApiClient.convertToType(data['leadSource'], [LeadSourceDTO]);
            }
            if (data.hasOwnProperty('personDepartment')) {
                obj['personDepartment'] = ApiClient.convertToType(data['personDepartment'], [PersonDepartmentDTO]);
            }
            if (data.hasOwnProperty('personPosition')) {
                obj['personPosition'] = ApiClient.convertToType(data['personPosition'], [PersonPositionDTO]);
            }
            if (data.hasOwnProperty('province')) {
                obj['province'] = ApiClient.convertToType(data['province'], [ProvinceDTO]);
            }
            if (data.hasOwnProperty('specialization')) {
                obj['specialization'] = ApiClient.convertToType(data['specialization'], [LanguageSpecializationDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManyValuesPerTypeDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManyValuesPerTypeDTO</code>.
     */
    static validateJSON(data) {
        if (data['calculationUnit']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['calculationUnit'])) {
                throw new Error("Expected the field `calculationUnit` to be an array in the JSON data but got " + data['calculationUnit']);
            }
            // validate the optional field `calculationUnit` (array)
            for (const item of data['calculationUnit']) {
                CalculationUnitDTO.validateJSON(item);
            };
        }
        if (data['category']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category'])) {
                throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
            }
            // validate the optional field `category` (array)
            for (const item of data['category']) {
                CategoryDTO.validateJSON(item);
            };
        }
        if (data['country']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['country'])) {
                throw new Error("Expected the field `country` to be an array in the JSON data but got " + data['country']);
            }
            // validate the optional field `country` (array)
            for (const item of data['country']) {
                CountryDTO.validateJSON(item);
            };
        }
        if (data['currency']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['currency'])) {
                throw new Error("Expected the field `currency` to be an array in the JSON data but got " + data['currency']);
            }
            // validate the optional field `currency` (array)
            for (const item of data['currency']) {
                CurrencyDTO.validateJSON(item);
            };
        }
        if (data['industry']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['industry'])) {
                throw new Error("Expected the field `industry` to be an array in the JSON data but got " + data['industry']);
            }
            // validate the optional field `industry` (array)
            for (const item of data['industry']) {
                IndustryDTO.validateJSON(item);
            };
        }
        if (data['jobType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['jobType'])) {
                throw new Error("Expected the field `jobType` to be an array in the JSON data but got " + data['jobType']);
            }
            // validate the optional field `jobType` (array)
            for (const item of data['jobType']) {
                JobTypeDTO.validateJSON(item);
            };
        }
        if (data['language']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['language'])) {
                throw new Error("Expected the field `language` to be an array in the JSON data but got " + data['language']);
            }
            // validate the optional field `language` (array)
            for (const item of data['language']) {
                LanguageDTO.validateJSON(item);
            };
        }
        if (data['leadSource']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['leadSource'])) {
                throw new Error("Expected the field `leadSource` to be an array in the JSON data but got " + data['leadSource']);
            }
            // validate the optional field `leadSource` (array)
            for (const item of data['leadSource']) {
                LeadSourceDTO.validateJSON(item);
            };
        }
        if (data['personDepartment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['personDepartment'])) {
                throw new Error("Expected the field `personDepartment` to be an array in the JSON data but got " + data['personDepartment']);
            }
            // validate the optional field `personDepartment` (array)
            for (const item of data['personDepartment']) {
                PersonDepartmentDTO.validateJSON(item);
            };
        }
        if (data['personPosition']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['personPosition'])) {
                throw new Error("Expected the field `personPosition` to be an array in the JSON data but got " + data['personPosition']);
            }
            // validate the optional field `personPosition` (array)
            for (const item of data['personPosition']) {
                PersonPositionDTO.validateJSON(item);
            };
        }
        if (data['province']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['province'])) {
                throw new Error("Expected the field `province` to be an array in the JSON data but got " + data['province']);
            }
            // validate the optional field `province` (array)
            for (const item of data['province']) {
                ProvinceDTO.validateJSON(item);
            };
        }
        if (data['specialization']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['specialization'])) {
                throw new Error("Expected the field `specialization` to be an array in the JSON data but got " + data['specialization']);
            }
            // validate the optional field `specialization` (array)
            for (const item of data['specialization']) {
                LanguageSpecializationDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CalculationUnitDTO>} calculationUnit
 */
ManyValuesPerTypeDTO.prototype['calculationUnit'] = undefined;

/**
 * @member {Array.<module:model/CategoryDTO>} category
 */
ManyValuesPerTypeDTO.prototype['category'] = undefined;

/**
 * @member {Array.<module:model/CountryDTO>} country
 */
ManyValuesPerTypeDTO.prototype['country'] = undefined;

/**
 * @member {Array.<module:model/CurrencyDTO>} currency
 */
ManyValuesPerTypeDTO.prototype['currency'] = undefined;

/**
 * @member {Array.<module:model/IndustryDTO>} industry
 */
ManyValuesPerTypeDTO.prototype['industry'] = undefined;

/**
 * @member {Array.<module:model/JobTypeDTO>} jobType
 */
ManyValuesPerTypeDTO.prototype['jobType'] = undefined;

/**
 * @member {Array.<module:model/LanguageDTO>} language
 */
ManyValuesPerTypeDTO.prototype['language'] = undefined;

/**
 * @member {Array.<module:model/LeadSourceDTO>} leadSource
 */
ManyValuesPerTypeDTO.prototype['leadSource'] = undefined;

/**
 * @member {Array.<module:model/PersonDepartmentDTO>} personDepartment
 */
ManyValuesPerTypeDTO.prototype['personDepartment'] = undefined;

/**
 * @member {Array.<module:model/PersonPositionDTO>} personPosition
 */
ManyValuesPerTypeDTO.prototype['personPosition'] = undefined;

/**
 * @member {Array.<module:model/ProvinceDTO>} province
 */
ManyValuesPerTypeDTO.prototype['province'] = undefined;

/**
 * @member {Array.<module:model/LanguageSpecializationDTO>} specialization
 */
ManyValuesPerTypeDTO.prototype['specialization'] = undefined;






export default ManyValuesPerTypeDTO;

