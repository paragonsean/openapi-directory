/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomFieldDTO from '../model/CustomFieldDTO';
import EntityWithNameDTO from '../model/EntityWithNameDTO';
import TimeZoneDTO from '../model/TimeZoneDTO';
import UserDTO from '../model/UserDTO';

/**
* Users service.
* @module api/UsersApi
* @version 2.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/UsersApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets user's password to a new value.
     * Sets user's password to a new value.
     * @param {Number} userId user's internal identifier
     * @param {Object} opts Optional parameters
     * @param {String} [newPassword] new password
     * @param {String} [oldPassword] old password
     * @param {module:api/UsersApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling changePassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'newPassword': opts['newPassword'],
        'oldPassword': opts['oldPassword']
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllNamesWithIds1 operation.
     * @callback module:api/UsersApi~getAllNamesWithIds1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityWithNameDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of simple users representations
     * Returns list of simple users representations
     * @param {module:api/UsersApi~getAllNamesWithIds1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityWithNameDTO>}
     */
    getAllNamesWithIds1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [EntityWithNameDTO];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById6 operation.
     * @callback module:api/UsersApi~getById6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns user details.
     * Returns user details.
     * @param {Number} userId user's internal identifier
     * @param {module:api/UsersApi~getById6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    getById6(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getById6");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomField1 operation.
     * @callback module:api/UsersApi~getCustomField1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom field of a given user.
     * Returns custom field of a given user.
     * @param {Number} userId user's internal identifier
     * @param {String} customFieldKey custom field's key
     * @param {module:api/UsersApi~getCustomField1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFieldDTO}
     */
    getCustomField1(userId, customFieldKey, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getCustomField1");
      }
      // verify the required parameter 'customFieldKey' is set
      if (customFieldKey === undefined || customFieldKey === null) {
        throw new Error("Missing the required parameter 'customFieldKey' when calling getCustomField1");
      }

      let pathParams = {
        'userId': userId,
        'customFieldKey': customFieldKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomFieldDTO;
      return this.apiClient.callApi(
        '/users/{userId}/customFields/{customFieldKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields4 operation.
     * @callback module:api/UsersApi~getCustomFields4Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given user.
     * Returns custom fields of a given user.
     * @param {Number} userId user's internal identifier
     * @param {module:api/UsersApi~getCustomFields4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields4(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getCustomFields4");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/users/{userId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMe operation.
     * @callback module:api/UsersApi~getMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns currently signed in user details.
     * Returns currently signed in user details.
     * @param {module:api/UsersApi~getMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    getMe(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeZone operation.
     * @callback module:api/UsersApi~getTimeZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeZoneDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns time zone preferred by user currently signed in.
     * Returns time zone preferred by user currently signed in.
     * @param {module:api/UsersApi~getTimeZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeZoneDTO}
     */
    getTimeZone(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = TimeZoneDTO;
      return this.apiClient.callApi(
        '/users/me/timeZone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update3 operation.
     * @callback module:api/UsersApi~update3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing user.
     * Updates an existing user.
     * @param {Number} userId user's internal identifier
     * @param {module:model/UserDTO} userDTO Updated existing user.
     * @param {module:api/UsersApi~update3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    update3(userId, userDTO, callback) {
      let postBody = userDTO;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling update3");
      }
      // verify the required parameter 'userDTO' is set
      if (userDTO === undefined || userDTO === null) {
        throw new Error("Missing the required parameter 'userDTO' when calling update3");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomField1 operation.
     * @callback module:api/UsersApi~updateCustomField1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates given custom field of a given user.
     * Updates given custom field of a given user.
     * @param {Number} userId user's internal identifier
     * @param {String} customFieldKey custom field's key
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom fields of a given user.
     * @param {module:api/UsersApi~updateCustomField1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFieldDTO}
     */
    updateCustomField1(userId, customFieldKey, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateCustomField1");
      }
      // verify the required parameter 'customFieldKey' is set
      if (customFieldKey === undefined || customFieldKey === null) {
        throw new Error("Missing the required parameter 'customFieldKey' when calling updateCustomField1");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomField1");
      }

      let pathParams = {
        'userId': userId,
        'customFieldKey': customFieldKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomFieldDTO;
      return this.apiClient.callApi(
        '/users/{userId}/customFields/{customFieldKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFields2 operation.
     * @callback module:api/UsersApi~updateCustomFields2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom fields of a given user.
     * Updates custom fields of a given user.
     * @param {Number} userId user's internal identifier
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom fields of a given user.
     * @param {module:api/UsersApi~updateCustomFields2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    updateCustomFields2(userId, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateCustomFields2");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomFields2");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/users/{userId}/customFields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
