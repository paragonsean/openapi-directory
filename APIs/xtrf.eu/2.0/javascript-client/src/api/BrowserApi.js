/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ColumnDTO from '../model/ColumnDTO';
import FilterDTO from '../model/FilterDTO';
import FilterPropertyDTO from '../model/FilterPropertyDTO';
import LocalSettingsDTO from '../model/LocalSettingsDTO';
import OrderDTO from '../model/OrderDTO';
import PermissionsDTO from '../model/PermissionsDTO';
import SettingsDTO from '../model/SettingsDTO';
import ViewDTO from '../model/ViewDTO';
import ViewDetailsDTO from '../model/ViewDetailsDTO';
import ViewWithIdDTO from '../model/ViewWithIdDTO';
import ViewsBriefDTO from '../model/ViewsBriefDTO';

/**
* Browser service.
* @module api/BrowserApi
* @version 2.0
*/
export default class BrowserApi {

    /**
    * Constructs a new BrowserApi. 
    * @alias module:api/BrowserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the browseCSV operation.
     * @callback module:api/BrowserApi~browseCSVCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * @param {Object} opts Optional parameters
     * @param {Number} [viewId] view's identifier
     * @param {String} [separator] csv field separator
     * @param {String} [secondarySeparator] secondary csv field separator
     * @param {String} [additionalOrder] 
     * @param {module:api/BrowserApi~browseCSVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    browseCSV(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'viewId': opts['viewId'],
        'separator': opts['separator'],
        'secondarySeparator': opts['secondarySeparator'],
        'additionalOrder': opts['additionalOrder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/browser/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the browseJSON operation.
     * @callback module:api/BrowserApi~browseJSONCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * @param {Object} opts Optional parameters
     * @param {Number} [viewId] view's identifier
     * @param {Number} [page = 0)] 
     * @param {String} [additionalOrder] 
     * @param {String} [useDeferredColumns] 
     * @param {Number} [maxRows = 0)] overrides view's default rows limit, supported values 10 to 1000
     * @param {module:api/BrowserApi~browseJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    browseJSON(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'viewId': opts['viewId'],
        'page': opts['page'],
        'additionalOrder': opts['additionalOrder'],
        'useDeferredColumns': opts['useDeferredColumns'],
        'maxRows': opts['maxRows']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/browser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/BrowserApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a view.
     * Removes a view. No content is returned upon success (204).
     * @param {Number} viewId view's internal identifier
     * @param {module:api/BrowserApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling callDelete");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/browser/views/{viewId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/BrowserApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewWithIdDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates view for given class.
     * Creates view for given class.
     * @param {String} className view's class name
     * @param {module:model/ViewDTO} viewDTO Created view for given class.
     * @param {module:api/BrowserApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewWithIdDTO}
     */
    create(className, viewDTO, callback) {
      let postBody = viewDTO;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling create");
      }
      // verify the required parameter 'viewDTO' is set
      if (viewDTO === undefined || viewDTO === null) {
        throw new Error("Missing the required parameter 'viewDTO' when calling create");
      }

      let pathParams = {
        'className': className
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ViewWithIdDTO;
      return this.apiClient.callApi(
        '/browser/views/for/{className}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteColumn operation.
     * @callback module:api/BrowserApi~deleteColumnCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ColumnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single column from view.
     * Deletes a single column from view.
     * @param {Number} viewId view's identifier
     * @param {String} columnName column's name
     * @param {module:api/BrowserApi~deleteColumnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ColumnDTO>}
     */
    deleteColumn(viewId, columnName, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling deleteColumn");
      }
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling deleteColumn");
      }

      let pathParams = {
        'viewId': viewId,
        'columnName': columnName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [ColumnDTO];
      return this.apiClient.callApi(
        '/browser/views/{viewId}/columns/{columnName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/BrowserApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all view's information.
     * Returns all view's information (ie. name, columns, filters, etc).
     * @param {Number} viewId view's identifier
     * @param {module:api/BrowserApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewDTO}
     */
    get(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling get");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ViewDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getColumnSettings operation.
     * @callback module:api/BrowserApi~getColumnSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns column's specific settings.
     * Returns column's specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param {Number} viewId view's identifier
     * @param {String} columnName column's name
     * @param {module:api/BrowserApi~getColumnSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getColumnSettings(viewId, columnName, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getColumnSettings");
      }
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling getColumnSettings");
      }

      let pathParams = {
        'viewId': viewId,
        'columnName': columnName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/columns/{columnName}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getColumns operation.
     * @callback module:api/BrowserApi~getColumnsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ColumnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns columns defined in view.
     * Returns columns defined in view.
     * @param {Number} viewId view's identifier
     * @param {module:api/BrowserApi~getColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ColumnDTO>}
     */
    getColumns(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getColumns");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [ColumnDTO];
      return this.apiClient.callApi(
        '/browser/views/{viewId}/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentViewDetails operation.
     * @callback module:api/BrowserApi~getCurrentViewDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewDetailsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current view's detailed information, suitable for browser.
     * Returns current view's detailed information, suitable for browser.
     * @param {String} className views' class name
     * @param {Object} opts Optional parameters
     * @param {String} [placeName = 'default')] place name (denotes specific place in system with the table)
     * @param {module:api/BrowserApi~getCurrentViewDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewDetailsDTO}
     */
    getCurrentViewDetails(className, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling getCurrentViewDetails");
      }

      let pathParams = {
        'className': className
      };
      let queryParams = {
        'placeName': opts['placeName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ViewDetailsDTO;
      return this.apiClient.callApi(
        '/browser/views/details/for/{className}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilter operation.
     * @callback module:api/BrowserApi~getFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilterDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns view's filter.
     * Returns view's filter.
     * @param {Number} viewId view's identifier
     * @param {module:api/BrowserApi~getFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilterDTO}
     */
    getFilter(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getFilter");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = FilterDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocalSettings operation.
     * @callback module:api/BrowserApi~getLocalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocalSettingsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns view's local settings (for current user).
     * Returns view's local settings (for current user).
     * @param {Number} viewId view's identifier
     * @param {module:api/BrowserApi~getLocalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocalSettingsDTO}
     */
    getLocalSettings(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getLocalSettings");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = LocalSettingsDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/settings/local', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/BrowserApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns view's order settings.
     * Returns view's order settings.
     * @param {Number} viewId view's identifier
     * @param {module:api/BrowserApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderDTO}
     */
    getOrder(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getOrder");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = OrderDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissions operation.
     * @callback module:api/BrowserApi~getPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns view's permissions.
     * Returns view's permissions.
     * @param {Number} viewId view's identifier
     * @param {module:api/BrowserApi~getPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionsDTO}
     */
    getPermissions(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getPermissions");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = PermissionsDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSettings operation.
     * @callback module:api/BrowserApi~getSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns view's settings.
     * Returns view's settings (ie. name).
     * @param {Number} viewId view's identifier
     * @param {module:api/BrowserApi~getSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsDTO}
     */
    getSettings(viewId, callback) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getSettings");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = SettingsDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getViewDetails operation.
     * @callback module:api/BrowserApi~getViewDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewDetailsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns view's detailed information, suitable for browser.
     * Returns view's detailed information, suitable for browser.
     * @param {String} className views' class name
     * @param {Number} viewId 
     * @param {Object} opts Optional parameters
     * @param {String} [placeName = 'default')] place name (denotes specific place in system with the table)
     * @param {module:api/BrowserApi~getViewDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewDetailsDTO}
     */
    getViewDetails(className, viewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling getViewDetails");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling getViewDetails");
      }

      let pathParams = {
        'className': className,
        'viewId': viewId
      };
      let queryParams = {
        'placeName': opts['placeName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ViewDetailsDTO;
      return this.apiClient.callApi(
        '/browser/views/details/for/{className}/{viewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getViewsBrief operation.
     * @callback module:api/BrowserApi~getViewsBriefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewsBriefDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns views' brief.
     * Returns views' brief.
     * @param {String} className views' class name
     * @param {Object} opts Optional parameters
     * @param {String} [placeName = 'default')] place name (denotes specific place in system with the table)
     * @param {module:api/BrowserApi~getViewsBriefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewsBriefDTO}
     */
    getViewsBrief(className, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling getViewsBrief");
      }

      let pathParams = {
        'className': className
      };
      let queryParams = {
        'placeName': opts['placeName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ViewsBriefDTO;
      return this.apiClient.callApi(
        '/browser/views/for/{className}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selectViewAndGetItsDetails operation.
     * @callback module:api/BrowserApi~selectViewAndGetItsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewDetailsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Selects given view as current and returns its detailed information, suitable for browser.
     * Selects given view as current and returns its detailed information, suitable for browser.
     * @param {String} className views' class name
     * @param {Number} viewId 
     * @param {Object} opts Optional parameters
     * @param {String} [placeNameDenotesSpecificPlaceInSystemWithTheTable = 'default')] 
     * @param {module:api/BrowserApi~selectViewAndGetItsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewDetailsDTO}
     */
    selectViewAndGetItsDetails(className, viewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling selectViewAndGetItsDetails");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling selectViewAndGetItsDetails");
      }

      let pathParams = {
        'className': className,
        'viewId': viewId
      };
      let queryParams = {
        'place name (denotes specific place in system with the table)': opts['placeNameDenotesSpecificPlaceInSystemWithTheTable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ViewDetailsDTO;
      return this.apiClient.callApi(
        '/browser/views/details/for/{className}/{viewId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/BrowserApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates all view's information.
     * Updates all view's information (ie. name, columns, filters, etc).
     * @param {Number} viewId view's identifier
     * @param {module:model/ViewDTO} viewDTO Updated all view's information.
     * @param {module:api/BrowserApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewDTO}
     */
    update(viewId, viewDTO, callback) {
      let postBody = viewDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling update");
      }
      // verify the required parameter 'viewDTO' is set
      if (viewDTO === undefined || viewDTO === null) {
        throw new Error("Missing the required parameter 'viewDTO' when calling update");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ViewDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateColumnSettings operation.
     * @callback module:api/BrowserApi~updateColumnSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates column's specific settings.
     * Updates column's specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param {Number} viewId view's identifier
     * @param {String} columnName column's name
     * @param {Object.<String, Object>} body Updated column's specific settings.
     * @param {module:api/BrowserApi~updateColumnSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateColumnSettings(viewId, columnName, body, callback) {
      let postBody = body;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateColumnSettings");
      }
      // verify the required parameter 'columnName' is set
      if (columnName === undefined || columnName === null) {
        throw new Error("Missing the required parameter 'columnName' when calling updateColumnSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateColumnSettings");
      }

      let pathParams = {
        'viewId': viewId,
        'columnName': columnName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/columns/{columnName}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateColumns operation.
     * @callback module:api/BrowserApi~updateColumnsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ColumnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates columns in view.
     * Updates columns in view.
     * @param {Number} viewId view's identifier
     * @param {Array.<module:model/ColumnDTO>} columnDTO Updated columns in view.
     * @param {module:api/BrowserApi~updateColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ColumnDTO>}
     */
    updateColumns(viewId, columnDTO, callback) {
      let postBody = columnDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateColumns");
      }
      // verify the required parameter 'columnDTO' is set
      if (columnDTO === undefined || columnDTO === null) {
        throw new Error("Missing the required parameter 'columnDTO' when calling updateColumns");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [ColumnDTO];
      return this.apiClient.callApi(
        '/browser/views/{viewId}/columns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFilter operation.
     * @callback module:api/BrowserApi~updateFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilterDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates view's filter.
     * Updates view's filter.
     * @param {Number} viewId view's identifier
     * @param {Array.<module:model/FilterPropertyDTO>} filterPropertyDTO Updated view's filter.
     * @param {module:api/BrowserApi~updateFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilterDTO}
     */
    updateFilter(viewId, filterPropertyDTO, callback) {
      let postBody = filterPropertyDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateFilter");
      }
      // verify the required parameter 'filterPropertyDTO' is set
      if (filterPropertyDTO === undefined || filterPropertyDTO === null) {
        throw new Error("Missing the required parameter 'filterPropertyDTO' when calling updateFilter");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = FilterDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/filter', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFilterProperty operation.
     * @callback module:api/BrowserApi~updateFilterPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates view's filter property.
     * Updates view's filter property.
     * @param {Number} viewId view's identifier
     * @param {String} filterProperty view's filter property name
     * @param {module:model/FilterPropertyDTO} filterPropertyDTO Updated view's filter property.
     * @param {module:api/BrowserApi~updateFilterPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateFilterProperty(viewId, filterProperty, filterPropertyDTO, callback) {
      let postBody = filterPropertyDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateFilterProperty");
      }
      // verify the required parameter 'filterProperty' is set
      if (filterProperty === undefined || filterProperty === null) {
        throw new Error("Missing the required parameter 'filterProperty' when calling updateFilterProperty");
      }
      // verify the required parameter 'filterPropertyDTO' is set
      if (filterPropertyDTO === undefined || filterPropertyDTO === null) {
        throw new Error("Missing the required parameter 'filterPropertyDTO' when calling updateFilterProperty");
      }

      let pathParams = {
        'viewId': viewId,
        'filterProperty': filterProperty
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/filter/{filterProperty}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocalSettings operation.
     * @callback module:api/BrowserApi~updateLocalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocalSettingsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates view's local settings (for current user).
     * Updates view's local settings (for current user).
     * @param {Number} viewId view's identifier
     * @param {module:model/LocalSettingsDTO} localSettingsDTO Updated view's local settings (for current user).
     * @param {module:api/BrowserApi~updateLocalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocalSettingsDTO}
     */
    updateLocalSettings(viewId, localSettingsDTO, callback) {
      let postBody = localSettingsDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateLocalSettings");
      }
      // verify the required parameter 'localSettingsDTO' is set
      if (localSettingsDTO === undefined || localSettingsDTO === null) {
        throw new Error("Missing the required parameter 'localSettingsDTO' when calling updateLocalSettings");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = LocalSettingsDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/settings/local', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrder operation.
     * @callback module:api/BrowserApi~updateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates view's order settings.
     * Updates view's order settings.
     * @param {Number} viewId view's identifier
     * @param {module:model/OrderDTO} orderDTO Updated view's order settings.
     * @param {module:api/BrowserApi~updateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderDTO}
     */
    updateOrder(viewId, orderDTO, callback) {
      let postBody = orderDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateOrder");
      }
      // verify the required parameter 'orderDTO' is set
      if (orderDTO === undefined || orderDTO === null) {
        throw new Error("Missing the required parameter 'orderDTO' when calling updateOrder");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = OrderDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/order', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissions operation.
     * @callback module:api/BrowserApi~updatePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates view's permissions.
     * Updates view's permissions.
     * @param {Number} viewId view's identifier
     * @param {module:model/PermissionsDTO} permissionsDTO Updated view's permissions.
     * @param {module:api/BrowserApi~updatePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionsDTO}
     */
    updatePermissions(viewId, permissionsDTO, callback) {
      let postBody = permissionsDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updatePermissions");
      }
      // verify the required parameter 'permissionsDTO' is set
      if (permissionsDTO === undefined || permissionsDTO === null) {
        throw new Error("Missing the required parameter 'permissionsDTO' when calling updatePermissions");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = PermissionsDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSettings operation.
     * @callback module:api/BrowserApi~updateSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettingsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates view's settings.
     * Updates view's settings.
     * @param {Number} viewId view's identifier
     * @param {module:model/SettingsDTO} settingsDTO Updated view's settings.
     * @param {module:api/BrowserApi~updateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettingsDTO}
     */
    updateSettings(viewId, settingsDTO, callback) {
      let postBody = settingsDTO;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateSettings");
      }
      // verify the required parameter 'settingsDTO' is set
      if (settingsDTO === undefined || settingsDTO === null) {
        throw new Error("Missing the required parameter 'settingsDTO' when calling updateSettings");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = SettingsDTO;
      return this.apiClient.callApi(
        '/browser/views/{viewId}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
