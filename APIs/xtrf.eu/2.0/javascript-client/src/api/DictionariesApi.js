/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DictionaryEntity from '../model/DictionaryEntity';
import ManyValuesPerTypeDTO from '../model/ManyValuesPerTypeDTO';
import ServiceDTO from '../model/ServiceDTO';

/**
* Dictionaries service.
* @module api/DictionariesApi
* @version 2.0
*/
export default class DictionariesApi {

    /**
    * Constructs a new DictionariesApi. 
    * @alias module:api/DictionariesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getActive operation.
     * @callback module:api/DictionariesApi~getActiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManyValuesPerTypeDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns active dictionary entities for all types.
     * Returns active dictionary entities for all types.
     * @param {module:api/DictionariesApi~getActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManyValuesPerTypeDTO}
     */
    getActive(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ManyValuesPerTypeDTO;
      return this.apiClient.callApi(
        '/dictionaries/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveByType operation.
     * @callback module:api/DictionariesApi~getActiveByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DictionaryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns active values from a given dictionary.
     * Returns active values from a given dictionary.
     * @param {String} type dictionary type
     * @param {Object} opts Optional parameters
     * @param {String} [nameEquals] exact name of entity
     * @param {module:api/DictionariesApi~getActiveByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DictionaryEntity}
     */
    getActiveByType(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getActiveByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'nameEquals': opts['nameEquals']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = DictionaryEntity;
      return this.apiClient.callApi(
        '/dictionaries/{type}/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll1 operation.
     * @callback module:api/DictionariesApi~getAll1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManyValuesPerTypeDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns dictionary entities for all types. Both active and not active ones.
     * <div>   <p>     XTRF holds many user-defined dictionaries (ie. countries).     Each dictionary contains a set of values (ie. Poland or Germany).     A default value may be defined for a dictionary.   </p>   <p>     Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.     Please note that name used in dictionary values is presented in the locale of the current identity.     The same dictionary value can have different names, ie. \"Poland\" for one user, \"Polska\" for another one.   </p>   <p>     Possible dictionary types with short explanation:     <ul>       <li>calculationUnit - predefined values of how to calculate the volume of work into the price</li>       <li>category - labels to organize data on the platform</li>       <li>country - list of countries used on the platform</li>       <li>currency - currencies used in financial operations in the system</li>       <li>industry - industry sectors which clients specialize in</li>       <li>jobType - services offered by a company used in customized workflows</li>       <li>language - list of languages and its values used on the platform</li>       <li>leadSource - lead/recruitment places where new clients and vendors may be found</li>       <li>personDepartment - departments in which contact person may be assigned to</li>       <li>personPosition - positions in which user may be associated with</li>       <li>province - states and provinces used in various documents on the platform</li>       <li>specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military</li>     </ul>   </p> </div>
     * @param {module:api/DictionariesApi~getAll1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManyValuesPerTypeDTO}
     */
    getAll1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ManyValuesPerTypeDTO;
      return this.apiClient.callApi(
        '/dictionaries/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll3 operation.
     * @callback module:api/DictionariesApi~getAll3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns services list
     * Returns workflows list. Both active and not active ones.
     * @param {Object} opts Optional parameters
     * @param {String} [nameEquals] exact name of entity
     * @param {module:api/DictionariesApi~getAll3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDTO}
     */
    getAll3(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nameEquals': opts['nameEquals']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ServiceDTO;
      return this.apiClient.callApi(
        '/services/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllActive operation.
     * @callback module:api/DictionariesApi~getAllActiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns active services list
     * Returns active workflows list
     * @param {Object} opts Optional parameters
     * @param {String} [nameEquals] exact name of entity
     * @param {module:api/DictionariesApi~getAllActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceDTO}
     */
    getAllActive(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nameEquals': opts['nameEquals']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ServiceDTO;
      return this.apiClient.callApi(
        '/services/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllByType operation.
     * @callback module:api/DictionariesApi~getAllByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DictionaryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all values (both active and not active) from a given dictionary.
     * Returns all values (both active and not active) from a given dictionary.
     * @param {String} type dictionary type
     * @param {Object} opts Optional parameters
     * @param {String} [nameEquals] exact name of entity
     * @param {module:api/DictionariesApi~getAllByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DictionaryEntity}
     */
    getAllByType(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getAllByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'nameEquals': opts['nameEquals']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = DictionaryEntity;
      return this.apiClient.callApi(
        '/dictionaries/{type}/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByTypeAndId operation.
     * @callback module:api/DictionariesApi~getByTypeAndIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DictionaryEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns specific value from a given dictionary.
     * Returns specific value from a given dictionary.
     * @param {String} type dictionary type
     * @param {Number} id dictionary value identifier
     * @param {module:api/DictionariesApi~getByTypeAndIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DictionaryEntity}
     */
    getByTypeAndId(type, id, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getByTypeAndId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByTypeAndId");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = DictionaryEntity;
      return this.apiClient.callApi(
        '/dictionaries/{type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
