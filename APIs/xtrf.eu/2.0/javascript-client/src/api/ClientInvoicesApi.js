/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomerInvoiceCreateDTO from '../model/CustomerInvoiceCreateDTO';
import CustomerInvoiceCreateResultDTO from '../model/CustomerInvoiceCreateResultDTO';
import CustomerInvoiceDTO from '../model/CustomerInvoiceDTO';
import CustomerInvoiceDatesDTO from '../model/CustomerInvoiceDatesDTO';
import DownloadDocumentsRequestDTO from '../model/DownloadDocumentsRequestDTO';
import PaymentDTO from '../model/PaymentDTO';
import PaymentTermsDTO from '../model/PaymentTermsDTO';
import SendRemindersRequestDTO from '../model/SendRemindersRequestDTO';
import SendRemindersResponseDTO from '../model/SendRemindersResponseDTO';
import UrlResultDTO from '../model/UrlResultDTO';

/**
* ClientInvoices service.
* @module api/ClientInvoicesApi
* @version 2.0
*/
export default class ClientInvoicesApi {

    /**
    * Constructs a new ClientInvoicesApi. 
    * @alias module:api/ClientInvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the create1 operation.
     * @callback module:api/ClientInvoicesApi~create1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerInvoiceCreateResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new invoice.
     * Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
     * @param {module:model/CustomerInvoiceCreateDTO} customerInvoiceCreateDTO Created new invoice.
     * @param {module:api/ClientInvoicesApi~create1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerInvoiceCreateResultDTO}
     */
    create1(customerInvoiceCreateDTO, callback) {
      let postBody = customerInvoiceCreateDTO;
      // verify the required parameter 'customerInvoiceCreateDTO' is set
      if (customerInvoiceCreateDTO === undefined || customerInvoiceCreateDTO === null) {
        throw new Error("Missing the required parameter 'customerInvoiceCreateDTO' when calling create1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerInvoiceCreateResultDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback module:api/ClientInvoicesApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:model/PaymentDTO} paymentDTO New payment.
     * @param {module:api/ClientInvoicesApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPayment(invoiceId, paymentDTO, callback) {
      let postBody = paymentDTO;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling createPayment");
      }
      // verify the required parameter 'paymentDTO' is set
      if (paymentDTO === undefined || paymentDTO === null) {
        throw new Error("Missing the required parameter 'paymentDTO' when calling createPayment");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete1 operation.
     * @callback module:api/ClientInvoicesApi~delete1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a client invoice.
     * Removes a client invoice.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~delete1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete1(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling delete1");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete2 operation.
     * @callback module:api/ClientInvoicesApi~delete2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a customer payment.
     * Removes a customer payment.
     * @param {Number} paymentId customer payment's internal identifier
     * @param {module:api/ClientInvoicesApi~delete2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete2(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling delete2");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/customers/payments/{paymentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDocuments operation.
     * @callback module:api/ClientInvoicesApi~downloadDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates client invoices' documents.
     * Generates client invoices' documents.
     * @param {module:model/DownloadDocumentsRequestDTO} downloadDocumentsRequestDTO Generated client invoices documents.
     * @param {module:api/ClientInvoicesApi~downloadDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlResultDTO}
     */
    downloadDocuments(downloadDocumentsRequestDTO, callback) {
      let postBody = downloadDocumentsRequestDTO;
      // verify the required parameter 'downloadDocumentsRequestDTO' is set
      if (downloadDocumentsRequestDTO === undefined || downloadDocumentsRequestDTO === null) {
        throw new Error("Missing the required parameter 'downloadDocumentsRequestDTO' when calling downloadDocuments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = UrlResultDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicate operation.
     * @callback module:api/ClientInvoicesApi~duplicateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerInvoiceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate client invoice.
     * Duplicate client invoice.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~duplicateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerInvoiceDTO}
     */
    duplicate(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling duplicate");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerInvoiceDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateAsProForma operation.
     * @callback module:api/ClientInvoicesApi~duplicateAsProFormaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerInvoiceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate client invoice as pro forma.
     * Duplicate client invoice as pro forma.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~duplicateAsProFormaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerInvoiceDTO}
     */
    duplicateAsProForma(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling duplicateAsProForma");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerInvoiceDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/duplicate/proForma', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll operation.
     * @callback module:api/ClientInvoicesApi~getAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomerInvoiceDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only client invoices modified since this timestamp
     * @param {module:api/ClientInvoicesApi~getAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomerInvoiceDTO>}
     */
    getAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomerInvoiceDTO];
      return this.apiClient.callApi(
        '/accounting/customers/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds operation.
     * @callback module:api/ClientInvoicesApi~getAllIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns client invoices' internal identifiers.
     * Returns client invoices' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only client invoices modified since this timestamp
     * @param {module:api/ClientInvoicesApi~getAllIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/accounting/customers/invoices/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/ClientInvoicesApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerInvoiceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns client invoice details.
     * Returns client invoice details.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {Object} opts Optional parameters
     * @param {String} [embed] list of adittional fields which should be embedded in the response (ie. tasks)
     * @param {module:api/ClientInvoicesApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerInvoiceDTO}
     */
    getById(invoiceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getById");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
        'embed': opts['embed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerInvoiceDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDates operation.
     * @callback module:api/ClientInvoicesApi~getDatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerInvoiceDatesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns dates of a given client invoice.
     * Returns dates of a given client invoice.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~getDatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerInvoiceDatesDTO}
     */
    getDates(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getDates");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerInvoiceDatesDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback module:api/ClientInvoicesApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates client invoice document (PDF).
     * Generates client invoice document (PDF).
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlResultDTO}
     */
    getDocument(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getDocument");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = UrlResultDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/document', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentTerms operation.
     * @callback module:api/ClientInvoicesApi~getPaymentTermsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentTermsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns payment terms of a given client invoice.
     * Returns payment terms of a given client invoice.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~getPaymentTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentTermsDTO}
     */
    getPaymentTerms(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getPaymentTerms");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = PaymentTermsDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/paymentTerms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayments operation.
     * @callback module:api/ClientInvoicesApi~getPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all payments for the client invoice.
     * Returns all payments for the client invoice.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~getPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentDTO>}
     */
    getPayments(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getPayments");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [PaymentDTO];
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendReminder operation.
     * @callback module:api/ClientInvoicesApi~sendReminderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends reminder.
     * Sends reminder.
     * @param {Number} invoiceId client invoice's internal identifier
     * @param {module:api/ClientInvoicesApi~sendReminderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendReminder(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling sendReminder");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/{invoiceId}/sendReminder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendReminders operation.
     * @callback module:api/ClientInvoicesApi~sendRemindersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendRemindersResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends reminders. Returns number of sent e-mails.
     * Sends reminders. Returns number of sent e-mails.
     * @param {module:model/SendRemindersRequestDTO} sendRemindersRequestDTO Number of sent e-mails.
     * @param {module:api/ClientInvoicesApi~sendRemindersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendRemindersResponseDTO}
     */
    sendReminders(sendRemindersRequestDTO, callback) {
      let postBody = sendRemindersRequestDTO;
      // verify the required parameter 'sendRemindersRequestDTO' is set
      if (sendRemindersRequestDTO === undefined || sendRemindersRequestDTO === null) {
        throw new Error("Missing the required parameter 'sendRemindersRequestDTO' when calling sendReminders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = SendRemindersResponseDTO;
      return this.apiClient.callApi(
        '/accounting/customers/invoices/sendReminders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
