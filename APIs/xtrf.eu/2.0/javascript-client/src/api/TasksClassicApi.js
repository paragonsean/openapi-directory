/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactsDTO from '../model/ContactsDTO';
import CustomFieldDTO from '../model/CustomFieldDTO';
import FileDTO from '../model/FileDTO';
import InstructionsDTO from '../model/InstructionsDTO';
import ProjectDatesDTO from '../model/ProjectDatesDTO';
import StringDTO from '../model/StringDTO';
import TaskFilesDTO from '../model/TaskFilesDTO';
import TaskProgressDTO from '../model/TaskProgressDTO';

/**
* TasksClassic service.
* @module api/TasksClassicApi
* @version 2.0
*/
export default class TasksClassicApi {

    /**
    * Constructs a new TasksClassicApi. 
    * @alias module:api/TasksClassicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFile operation.
     * @callback module:api/TasksClassicApi~addFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds files to a given task.
     * Adds files to a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:model/FileDTO} fileDTO 
     * @param {module:api/TasksClassicApi~addFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFile(taskId, fileDTO, callback) {
      let postBody = fileDTO;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling addFile");
      }
      // verify the required parameter 'fileDTO' is set
      if (fileDTO === undefined || fileDTO === null) {
        throw new Error("Missing the required parameter 'fileDTO' when calling addFile");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskId}/files/input', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete14 operation.
     * @callback module:api/TasksClassicApi~delete14Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a task.
     * Removes a task.
     * @param {String} taskId task's internal identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [removeFilesFromDisc] remove files from disc
     * @param {Boolean} [removeExternalProjects] remove external projects (ie. from CAT Tool)
     * @param {Boolean} [forceJobsRemoval] force jobs removal (ie. started or ready)
     * @param {module:api/TasksClassicApi~delete14Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete14(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling delete14");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
        'removeFilesFromDisc': opts['removeFilesFromDisc'],
        'removeExternalProjects': opts['removeExternalProjects'],
        'forceJobsRemoval': opts['forceJobsRemoval']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts1 operation.
     * @callback module:api/TasksClassicApi~getContacts1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contacts of a given task.
     * Returns contacts of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:api/TasksClassicApi~getContacts1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactsDTO}
     */
    getContacts1(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getContacts1");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ContactsDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields7 operation.
     * @callback module:api/TasksClassicApi~getCustomFields7Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given task.
     * Returns custom fields of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:api/TasksClassicApi~getCustomFields7Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields7(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getCustomFields7");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/tasks/{taskId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDates3 operation.
     * @callback module:api/TasksClassicApi~getDates3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDatesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns dates of a given task.
     * Returns dates of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:api/TasksClassicApi~getDates3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDatesDTO}
     */
    getDates3(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getDates3");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProjectDatesDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstructions2 operation.
     * @callback module:api/TasksClassicApi~getInstructions2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InstructionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns instructions of a given task.
     * Returns instructions of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:api/TasksClassicApi~getInstructions2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstructionsDTO}
     */
    getInstructions2(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getInstructions2");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InstructionsDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/instructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgress operation.
     * @callback module:api/TasksClassicApi~getProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskProgressDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns progress of a given task.
     * Returns progress of a given task. Progress contains information about task's status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included.
     * @param {String} taskId task's internal identifier
     * @param {module:api/TasksClassicApi~getProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskProgressDTO}
     */
    getProgress(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getProgress");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = TaskProgressDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskFiles operation.
     * @callback module:api/TasksClassicApi~getTaskFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskFilesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns lists of files of a given task.
     * Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files.
     * @param {String} taskId task's internal identifier
     * @param {module:api/TasksClassicApi~getTaskFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskFilesDTO}
     */
    getTaskFiles(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTaskFiles");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = TaskFilesDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the start1 operation.
     * @callback module:api/TasksClassicApi~start1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a task.
     * Starts a task.
     * @param {String} taskId task's internal identifier
     * @param {module:api/TasksClassicApi~start1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    start1(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling start1");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/{taskId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientTaskPONumber operation.
     * @callback module:api/TasksClassicApi~updateClientTaskPONumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Task PO Number of a given task.
     * Updates Client Task PO Number of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated Client Task PO Number of a given task.
     * @param {module:api/TasksClassicApi~updateClientTaskPONumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDTO}
     */
    updateClientTaskPONumber(taskId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateClientTaskPONumber");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateClientTaskPONumber");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = StringDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/clientTaskPONumber', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContacts1 operation.
     * @callback module:api/TasksClassicApi~updateContacts1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates contacts of a given task.
     * Updates contacts of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:model/ContactsDTO} contactsDTO Updated contacts of given task.
     * @param {module:api/TasksClassicApi~updateContacts1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactsDTO}
     */
    updateContacts1(taskId, contactsDTO, callback) {
      let postBody = contactsDTO;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateContacts1");
      }
      // verify the required parameter 'contactsDTO' is set
      if (contactsDTO === undefined || contactsDTO === null) {
        throw new Error("Missing the required parameter 'contactsDTO' when calling updateContacts1");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ContactsDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/contacts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFields5 operation.
     * @callback module:api/TasksClassicApi~updateCustomFields5Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom fields of a given task.
     * Updates custom fields of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom fields
     * @param {module:api/TasksClassicApi~updateCustomFields5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    updateCustomFields5(taskId, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateCustomFields5");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomFields5");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/tasks/{taskId}/customFields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDates2 operation.
     * @callback module:api/TasksClassicApi~updateDates2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDatesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates dates of a given task.
     * Updates dates of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:model/ProjectDatesDTO} projectDatesDTO Updated dates of a given task.
     * @param {module:api/TasksClassicApi~updateDates2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDatesDTO}
     */
    updateDates2(taskId, projectDatesDTO, callback) {
      let postBody = projectDatesDTO;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateDates2");
      }
      // verify the required parameter 'projectDatesDTO' is set
      if (projectDatesDTO === undefined || projectDatesDTO === null) {
        throw new Error("Missing the required parameter 'projectDatesDTO' when calling updateDates2");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProjectDatesDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/dates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstructions3 operation.
     * @callback module:api/TasksClassicApi~updateInstructions3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InstructionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates instructions of a given task.
     * Updates instructions of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:model/InstructionsDTO} instructionsDTO Updated instructions of a given task.
     * @param {module:api/TasksClassicApi~updateInstructions3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstructionsDTO}
     */
    updateInstructions3(taskId, instructionsDTO, callback) {
      let postBody = instructionsDTO;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateInstructions3");
      }
      // verify the required parameter 'instructionsDTO' is set
      if (instructionsDTO === undefined || instructionsDTO === null) {
        throw new Error("Missing the required parameter 'instructionsDTO' when calling updateInstructions3");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InstructionsDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/instructions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateName operation.
     * @callback module:api/TasksClassicApi~updateNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates name of a given task.
     * Updates name of a given task.
     * @param {String} taskId task's internal identifier
     * @param {module:model/StringDTO} stringDTO 
     * @param {module:api/TasksClassicApi~updateNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDTO}
     */
    updateName(taskId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling updateName");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateName");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = StringDTO;
      return this.apiClient.callApi(
        '/tasks/{taskId}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
