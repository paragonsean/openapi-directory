/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveSubscriptionDTO from '../model/ActiveSubscriptionDTO';
import SubscriptionDTO from '../model/SubscriptionDTO';

/**
* Subscription service.
* @module api/SubscriptionApi
* @version 2.0
*/
export default class SubscriptionApi {

    /**
    * Constructs a new SubscriptionApi. 
    * @alias module:api/SubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the areHooksSupported operation.
     * @callback module:api/SubscriptionApi~areHooksSupportedCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method can be used to determine if hooks are supported.
     * This method can be used to determine if hooks are supported.
     * @param {module:api/SubscriptionApi~areHooksSupportedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    areHooksSupported(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/subscription/supports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll4 operation.
     * @callback module:api/SubscriptionApi~getAll4Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActiveSubscriptionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all subscriptions
     * Returns all subscriptions. Subscriptions are automatically removed if they do not work (ie. if 404 status is returned). To improve notification reliability one can use this method to check if subscription is still active and re-subscribe if necessary.
     * @param {module:api/SubscriptionApi~getAll4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActiveSubscriptionDTO>}
     */
    getAll4(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [ActiveSubscriptionDTO];
      return this.apiClient.callApi(
        '/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribe operation.
     * @callback module:api/SubscriptionApi~subscribeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to event
     * Subscribe to event. Returns subscription Id.
     * @param {module:model/SubscriptionDTO} subscriptionDTO Returns subscription Id.
     * @param {module:api/SubscriptionApi~subscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    subscribe(subscriptionDTO, callback) {
      let postBody = subscriptionDTO;
      // verify the required parameter 'subscriptionDTO' is set
      if (subscriptionDTO === undefined || subscriptionDTO === null) {
        throw new Error("Missing the required parameter 'subscriptionDTO' when calling subscribe");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribe operation.
     * @callback module:api/SubscriptionApi~unsubscribeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe from event
     * Unsubscribe from job status changed event
     * @param {String} subscriptionId 
     * @param {module:api/SubscriptionApi~unsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unsubscribe(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling unsubscribe");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscription/{subscriptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
