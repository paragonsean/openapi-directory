/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BigDecimalDTO from '../model/BigDecimalDTO';
import CATToolProjectDTO from '../model/CATToolProjectDTO';
import CustomFieldDTO from '../model/CustomFieldDTO';
import ExternalFileDto from '../model/ExternalFileDto';
import FileCategorizationsDto from '../model/FileCategorizationsDto';
import FileDto from '../model/FileDto';
import FileLinkCategorizationsDto from '../model/FileLinkCategorizationsDto';
import FilesArchiveDto from '../model/FilesArchiveDto';
import FilesDto from '../model/FilesDto';
import FinanceDTO from '../model/FinanceDTO';
import JobDto from '../model/JobDto';
import PayableCreateDTO from '../model/PayableCreateDTO';
import PayableDTO from '../model/PayableDTO';
import ProjectCreateDTO from '../model/ProjectCreateDTO';
import ProjectDTOv2 from '../model/ProjectDTOv2';
import ProjectFileDto from '../model/ProjectFileDto';
import ProjectStatusDTO from '../model/ProjectStatusDTO';
import ReceivableCreateDTO from '../model/ReceivableCreateDTO';
import ReceivableDTO from '../model/ReceivableDTO';
import SmartContactsDTO from '../model/SmartContactsDTO';
import SmartCustomFieldDTO from '../model/SmartCustomFieldDTO';
import SourceLanguageDTO from '../model/SourceLanguageDTO';
import SpecializationDTO from '../model/SpecializationDTO';
import StringDTO from '../model/StringDTO';
import TargetLanguagesDTO from '../model/TargetLanguagesDTO';
import TimeDTO from '../model/TimeDTO';

/**
* ProjectsSmartV2 service.
* @module api/ProjectsSmartV2Api
* @version 2.0
*/
export default class ProjectsSmartV2Api {

    /**
    * Constructs a new ProjectsSmartV2Api. 
    * @alias module:api/ProjectsSmartV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addExternalFileLinks operation.
     * @callback module:api/ProjectsSmartV2Api~addExternalFileLinksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectId project's internal identifier
     * @param {module:model/ExternalFileDto} externalFileDto Added file links to the project as added by PM.
     * @param {module:api/ProjectsSmartV2Api~addExternalFileLinksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addExternalFileLinks(projectId, externalFileDto, callback) {
      let postBody = externalFileDto;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addExternalFileLinks");
      }
      // verify the required parameter 'externalFileDto' is set
      if (externalFileDto === undefined || externalFileDto === null) {
        throw new Error("Missing the required parameter 'externalFileDto' when calling addExternalFileLinks");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/files/addExternalLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFileLinks1 operation.
     * @callback module:api/ProjectsSmartV2Api~addFileLinks1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds file links to the project as added by PM.
     * Adds file links to the project as added by PM. The following properties can be specified for each file link:<ul><li>url (required, 400 Bad Request is returned otherwise)</li><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * @param {String} projectId project's internal identifier
     * @param {module:model/FileLinkCategorizationsDto} fileLinkCategorizationsDto Added file links to the project as added by PM.
     * @param {module:api/ProjectsSmartV2Api~addFileLinks1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesDto}
     */
    addFileLinks1(projectId, fileLinkCategorizationsDto, callback) {
      let postBody = fileLinkCategorizationsDto;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addFileLinks1");
      }
      // verify the required parameter 'fileLinkCategorizationsDto' is set
      if (fileLinkCategorizationsDto === undefined || fileLinkCategorizationsDto === null) {
        throw new Error("Missing the required parameter 'fileLinkCategorizationsDto' when calling addFileLinks1");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FilesDto;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/files/addLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFiles1 operation.
     * @callback module:api/ProjectsSmartV2Api~addFiles1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds files to the project as added by PM.
     * Adds files to the project as added by PM. The files have to be uploaded beforehand (see \"POST /v2/projects/{projectId}/files/upload\" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * @param {String} projectId project's internal identifier
     * @param {module:model/FileCategorizationsDto} fileCategorizationsDto Added files to the project as added by PM.
     * @param {module:api/ProjectsSmartV2Api~addFiles1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addFiles1(projectId, fileCategorizationsDto, callback) {
      let postBody = fileCategorizationsDto;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addFiles1");
      }
      // verify the required parameter 'fileCategorizationsDto' is set
      if (fileCategorizationsDto === undefined || fileCategorizationsDto === null) {
        throw new Error("Missing the required parameter 'fileCategorizationsDto' when calling addFiles1");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/files/add', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addJobToProcess operation.
     * @callback module:api/ProjectsSmartV2Api~addJobToProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CATToolProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns process id.
     * @param {String} projectId 
     * @param {module:api/ProjectsSmartV2Api~addJobToProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CATToolProjectDTO}
     */
    addJobToProcess(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addJobToProcess");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = CATToolProjectDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/addJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archive operation.
     * @callback module:api/ProjectsSmartV2Api~archiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesArchiveDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param {module:model/FilesDto} filesDto Prepared ZIP archive that contains the specified files.
     * @param {module:api/ProjectsSmartV2Api~archiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesArchiveDto}
     */
    archive(filesDto, callback) {
      let postBody = filesDto;
      // verify the required parameter 'filesDto' is set
      if (filesDto === undefined || filesDto === null) {
        throw new Error("Missing the required parameter 'filesDto' when calling archive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FilesArchiveDto;
      return this.apiClient.callApi(
        '/v2/projects/files/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeStatus2 operation.
     * @callback module:api/ProjectsSmartV2Api~changeStatus2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes project status if possible (400 Bad Request is returned otherwise).
     * Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>CANCELLED – available when the job has one of the following statuses: OPEN, STARTED</li></ul>
     * @param {String} projectId project's internal identifier
     * @param {module:model/ProjectStatusDTO} projectStatusDTO Changed project status.
     * @param {module:api/ProjectsSmartV2Api~changeStatus2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    changeStatus2(projectId, projectStatusDTO, callback) {
      let postBody = projectStatusDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling changeStatus2");
      }
      // verify the required parameter 'projectStatusDTO' is set
      if (projectStatusDTO === undefined || projectStatusDTO === null) {
        throw new Error("Missing the required parameter 'projectStatusDTO' when calling changeStatus2");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create6 operation.
     * @callback module:api/ProjectsSmartV2Api~create6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDTOv2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Smart Project.
     * Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectCreateDTO} [projectCreateDTO] 
     * @param {module:api/ProjectsSmartV2Api~create6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDTOv2}
     */
    create6(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectCreateDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProjectDTOv2;
      return this.apiClient.callApi(
        '/v2/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayable2 operation.
     * @callback module:api/ProjectsSmartV2Api~createPayable2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a payable to a project.
     * Adds a payable to a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/PayableCreateDTO} payableCreateDTO 
     * @param {module:api/ProjectsSmartV2Api~createPayable2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    createPayable2(projectId, payableCreateDTO, callback) {
      let postBody = payableCreateDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createPayable2");
      }
      // verify the required parameter 'payableCreateDTO' is set
      if (payableCreateDTO === undefined || payableCreateDTO === null) {
        throw new Error("Missing the required parameter 'payableCreateDTO' when calling createPayable2");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/finance/payables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReceivable2 operation.
     * @callback module:api/ProjectsSmartV2Api~createReceivable2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a receivable to a project.
     * Adds a receivable to a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/ReceivableCreateDTO} receivableCreateDTO 
     * @param {module:api/ProjectsSmartV2Api~createReceivable2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    createReceivable2(projectId, receivableCreateDTO, callback) {
      let postBody = receivableCreateDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createReceivable2");
      }
      // verify the required parameter 'receivableCreateDTO' is set
      if (receivableCreateDTO === undefined || receivableCreateDTO === null) {
        throw new Error("Missing the required parameter 'receivableCreateDTO' when calling createReceivable2");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/finance/receivables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayable2 operation.
     * @callback module:api/ProjectsSmartV2Api~deletePayable2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param {String} projectId project's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:api/ProjectsSmartV2Api~deletePayable2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayable2(projectId, payableId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deletePayable2");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling deletePayable2");
      }

      let pathParams = {
        'projectId': projectId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/finance/payables/{payableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceivable2 operation.
     * @callback module:api/ProjectsSmartV2Api~deleteReceivable2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param {String} projectId project's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:api/ProjectsSmartV2Api~deleteReceivable2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceivable2(projectId, receivableId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteReceivable2");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling deleteReceivable2");
      }

      let pathParams = {
        'projectId': projectId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/finance/receivables/{receivableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByExternalId1 operation.
     * @callback module:api/ProjectsSmartV2Api~getByExternalId1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDTOv2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns project details.
     * Returns project details.
     * @param {String} externalProjectId project's external identifier
     * @param {module:api/ProjectsSmartV2Api~getByExternalId1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDTOv2}
     */
    getByExternalId1(externalProjectId, callback) {
      let postBody = null;
      // verify the required parameter 'externalProjectId' is set
      if (externalProjectId === undefined || externalProjectId === null) {
        throw new Error("Missing the required parameter 'externalProjectId' when calling getByExternalId1");
      }

      let pathParams = {
        'externalProjectId': externalProjectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProjectDTOv2;
      return this.apiClient.callApi(
        '/v2/projects/for-external-id/{externalProjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById9 operation.
     * @callback module:api/ProjectsSmartV2Api~getById9Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDTOv2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns project details.
     * Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getById9Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDTOv2}
     */
    getById9(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getById9");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProjectDTOv2;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCATToolProjectInfo operation.
     * @callback module:api/ProjectsSmartV2Api~getCATToolProjectInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CATToolProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns if cat tool project is created or queued.
     * @param {String} projectId 
     * @param {module:api/ProjectsSmartV2Api~getCATToolProjectInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CATToolProjectDTO}
     */
    getCATToolProjectInfo(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCATToolProjectInfo");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = CATToolProjectDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/catToolProject', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts2 operation.
     * @callback module:api/ProjectsSmartV2Api~getContacts2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Client Contacts information for a project.
     * Returns Client Contacts information for a project
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getContacts2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartContactsDTO}
     */
    getContacts2(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContacts2");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SmartContactsDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/clientContacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields8 operation.
     * @callback module:api/ProjectsSmartV2Api~getCustomFields8Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getCustomFields8Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields8(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCustomFields8");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliverableFiles operation.
     * @callback module:api/ProjectsSmartV2Api~getDeliverableFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFileDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of files in a project, that are ready to be delivered to client.
     * Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:<ul><li>the file was added to a job in the last step in the process</li><li>the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)</li><li>the job is finished (has Ready status)</li></ul>
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getDeliverableFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFileDto>}
     */
    getDeliverableFiles(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDeliverableFiles");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ProjectFileDto];
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/files/deliverable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileById2 operation.
     * @callback module:api/ProjectsSmartV2Api~getFileById2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFileDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param {String} fileId file's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getFileById2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFileDto}
     */
    getFileById2(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileById2");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProjectFileDto;
      return this.apiClient.callApi(
        '/v2/projects/files/{fileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileContentById operation.
     * @callback module:api/ProjectsSmartV2Api~getFileContentByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param {String} fileId file's internal identifier
     * @param {String} fileName file's name
     * @param {module:api/ProjectsSmartV2Api~getFileContentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFileContentById(fileId, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileContentById");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getFileContentById");
      }

      let pathParams = {
        'fileId': fileId,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['multipart/form-data'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/files/{fileId}/download/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFiles operation.
     * @callback module:api/ProjectsSmartV2Api~getFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFileDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of files in a project.
     * Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFileDto>}
     */
    getFiles(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFiles");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ProjectFileDto];
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinance2 operation.
     * @callback module:api/ProjectsSmartV2Api~getFinance2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns finance information for a project.
     * Returns finance information for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getFinance2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceDTO}
     */
    getFinance2(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFinance2");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FinanceDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/finance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobs operation.
     * @callback module:api/ProjectsSmartV2Api~getJobsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of jobs in a project.
     * Returns list of jobs in a project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsSmartV2Api~getJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JobDto>}
     */
    getJobs(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getJobs");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [JobDto];
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessId operation.
     * @callback module:api/ProjectsSmartV2Api~getProcessIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CATToolProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns process id.
     * @param {String} projectId 
     * @param {module:api/ProjectsSmartV2Api~getProcessIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CATToolProjectDTO}
     */
    getProcessId(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProcessId");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = CATToolProjectDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/process', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientDeadline operation.
     * @callback module:api/ProjectsSmartV2Api~updateClientDeadlineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Deadline for a project.
     * Updates Client Deadline for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/TimeDTO} timeDTO Updated Client Deadline for a project.
     * @param {module:api/ProjectsSmartV2Api~updateClientDeadlineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClientDeadline(projectId, timeDTO, callback) {
      let postBody = timeDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateClientDeadline");
      }
      // verify the required parameter 'timeDTO' is set
      if (timeDTO === undefined || timeDTO === null) {
        throw new Error("Missing the required parameter 'timeDTO' when calling updateClientDeadline");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/clientDeadline', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientNotes operation.
     * @callback module:api/ProjectsSmartV2Api~updateClientNotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Notes for a project.
     * Updates Client Notes for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated Client Notes for a project.
     * @param {module:api/ProjectsSmartV2Api~updateClientNotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClientNotes(projectId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateClientNotes");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateClientNotes");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/clientNotes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientReferenceNumber operation.
     * @callback module:api/ProjectsSmartV2Api~updateClientReferenceNumberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Reference Number for a project.
     * Updates Client Reference Number for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated Client Reference Number for a project.
     * @param {module:api/ProjectsSmartV2Api~updateClientReferenceNumberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClientReferenceNumber(projectId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateClientReferenceNumber");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateClientReferenceNumber");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/clientReferenceNumber', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContacts2 operation.
     * @callback module:api/ProjectsSmartV2Api~updateContacts2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Contacts for a project.
     * Updates Client Contacts for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/SmartContactsDTO} smartContactsDTO Updated Client Contacts for a project.
     * @param {module:api/ProjectsSmartV2Api~updateContacts2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartContactsDTO}
     */
    updateContacts2(projectId, smartContactsDTO, callback) {
      let postBody = smartContactsDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateContacts2");
      }
      // verify the required parameter 'smartContactsDTO' is set
      if (smartContactsDTO === undefined || smartContactsDTO === null) {
        throw new Error("Missing the required parameter 'smartContactsDTO' when calling updateContacts2");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SmartContactsDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/clientContacts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomField2 operation.
     * @callback module:api/ProjectsSmartV2Api~updateCustomField2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a custom field with a specified key in a project
     * Updates a custom field with a specified key in a project
     * @param {String} projectId project's internal identifier
     * @param {String} key custom field's key
     * @param {module:model/SmartCustomFieldDTO} smartCustomFieldDTO Updated custom field with a specified key in a project.
     * @param {module:api/ProjectsSmartV2Api~updateCustomField2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCustomField2(projectId, key, smartCustomFieldDTO, callback) {
      let postBody = smartCustomFieldDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateCustomField2");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCustomField2");
      }
      // verify the required parameter 'smartCustomFieldDTO' is set
      if (smartCustomFieldDTO === undefined || smartCustomFieldDTO === null) {
        throw new Error("Missing the required parameter 'smartCustomFieldDTO' when calling updateCustomField2");
      }

      let pathParams = {
        'projectId': projectId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/customFields/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInternalNotes operation.
     * @callback module:api/ProjectsSmartV2Api~updateInternalNotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Internal Notes for a project.
     * Updates Internal Notes for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated Internal Notes for a project.
     * @param {module:api/ProjectsSmartV2Api~updateInternalNotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInternalNotes(projectId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateInternalNotes");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateInternalNotes");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/internalNotes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderedOn operation.
     * @callback module:api/ProjectsSmartV2Api~updateOrderedOnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Order Date for a project.
     * Updates Order Date for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/TimeDTO} timeDTO Updated Order Date for a project.
     * @param {module:api/ProjectsSmartV2Api~updateOrderedOnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrderedOn(projectId, timeDTO, callback) {
      let postBody = timeDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateOrderedOn");
      }
      // verify the required parameter 'timeDTO' is set
      if (timeDTO === undefined || timeDTO === null) {
        throw new Error("Missing the required parameter 'timeDTO' when calling updateOrderedOn");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/orderDate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayable2 operation.
     * @callback module:api/ProjectsSmartV2Api~updatePayable2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a payable.
     * Updates a payable.
     * @param {String} projectId project's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:model/PayableDTO} payableDTO 
     * @param {module:api/ProjectsSmartV2Api~updatePayable2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    updatePayable2(projectId, payableId, payableDTO, callback) {
      let postBody = payableDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updatePayable2");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling updatePayable2");
      }
      // verify the required parameter 'payableDTO' is set
      if (payableDTO === undefined || payableDTO === null) {
        throw new Error("Missing the required parameter 'payableDTO' when calling updatePayable2");
      }

      let pathParams = {
        'projectId': projectId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/finance/payables/{payableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReceivable2 operation.
     * @callback module:api/ProjectsSmartV2Api~updateReceivable2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param {String} projectId project's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:model/ReceivableDTO} receivableDTO 
     * @param {module:api/ProjectsSmartV2Api~updateReceivable2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    updateReceivable2(projectId, receivableId, receivableDTO, callback) {
      let postBody = receivableDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateReceivable2");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling updateReceivable2");
      }
      // verify the required parameter 'receivableDTO' is set
      if (receivableDTO === undefined || receivableDTO === null) {
        throw new Error("Missing the required parameter 'receivableDTO' when calling updateReceivable2");
      }

      let pathParams = {
        'projectId': projectId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/finance/receivables/{receivableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceLanguage operation.
     * @callback module:api/ProjectsSmartV2Api~updateSourceLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates source language for a project.
     * Updates source language for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/SourceLanguageDTO} sourceLanguageDTO Updated source language for a project.
     * @param {module:api/ProjectsSmartV2Api~updateSourceLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSourceLanguage(projectId, sourceLanguageDTO, callback) {
      let postBody = sourceLanguageDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateSourceLanguage");
      }
      // verify the required parameter 'sourceLanguageDTO' is set
      if (sourceLanguageDTO === undefined || sourceLanguageDTO === null) {
        throw new Error("Missing the required parameter 'sourceLanguageDTO' when calling updateSourceLanguage");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/sourceLanguage', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpecialization operation.
     * @callback module:api/ProjectsSmartV2Api~updateSpecializationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specialization for a project.
     * Updates specialization for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/SpecializationDTO} specializationDTO Updated specialization for a project.
     * @param {module:api/ProjectsSmartV2Api~updateSpecializationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSpecialization(projectId, specializationDTO, callback) {
      let postBody = specializationDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateSpecialization");
      }
      // verify the required parameter 'specializationDTO' is set
      if (specializationDTO === undefined || specializationDTO === null) {
        throw new Error("Missing the required parameter 'specializationDTO' when calling updateSpecialization");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/specialization', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTargetLanguages operation.
     * @callback module:api/ProjectsSmartV2Api~updateTargetLanguagesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates target languages for a project.
     * Updates target languages for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/TargetLanguagesDTO} targetLanguagesDTO Updated target languages for a project.
     * @param {module:api/ProjectsSmartV2Api~updateTargetLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTargetLanguages(projectId, targetLanguagesDTO, callback) {
      let postBody = targetLanguagesDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateTargetLanguages");
      }
      // verify the required parameter 'targetLanguagesDTO' is set
      if (targetLanguagesDTO === undefined || targetLanguagesDTO === null) {
        throw new Error("Missing the required parameter 'targetLanguagesDTO' when calling updateTargetLanguages");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/targetLanguages', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVendorInstructions operation.
     * @callback module:api/ProjectsSmartV2Api~updateVendorInstructionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates instructions for all vendors performing the jobs in a project.
     * Updates instructions for all vendors performing the jobs in a project. See also \"PUT /jobs/{jobId}/instructions\" for updating instructions for a specific job in a project or quote.
     * @param {String} projectId project's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated instructions for all vendors performing the jobs in a project.
     * @param {module:api/ProjectsSmartV2Api~updateVendorInstructionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVendorInstructions(projectId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateVendorInstructions");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateVendorInstructions");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/vendorInstructions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVolume operation.
     * @callback module:api/ProjectsSmartV2Api~updateVolumeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates volume for a project.
     * Updates volume for a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/BigDecimalDTO} bigDecimalDTO Updated volume for a project.
     * @param {module:api/ProjectsSmartV2Api~updateVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVolume(projectId, bigDecimalDTO, callback) {
      let postBody = bigDecimalDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateVolume");
      }
      // verify the required parameter 'bigDecimalDTO' is set
      if (bigDecimalDTO === undefined || bigDecimalDTO === null) {
        throw new Error("Missing the required parameter 'bigDecimalDTO' when calling updateVolume");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/volume', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile2 operation.
     * @callback module:api/ProjectsSmartV2Api~uploadFile2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads file to the project as a file uploaded by PM.
     * Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \"PUT /v2/projects/{projectId}/files/add\" operation
     * @param {String} projectId project's internal identifier
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/ProjectsSmartV2Api~uploadFile2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDto}
     */
    uploadFile2(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling uploadFile2");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FileDto;
      return this.apiClient.callApi(
        '/v2/projects/{projectId}/files/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
