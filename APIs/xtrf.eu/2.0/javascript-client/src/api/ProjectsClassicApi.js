/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClassicProjectCreateDTO from '../model/ClassicProjectCreateDTO';
import CommonLanguageCombinationDTO from '../model/CommonLanguageCombinationDTO';
import ContactsDTO from '../model/ContactsDTO';
import CustomFieldDTO from '../model/CustomFieldDTO';
import FinanceDTO from '../model/FinanceDTO';
import InstructionsDTO from '../model/InstructionsDTO';
import PayableCreateDTO from '../model/PayableCreateDTO';
import PayableDTO from '../model/PayableDTO';
import ProjectDTOv1 from '../model/ProjectDTOv1';
import ProjectDatesDTO from '../model/ProjectDatesDTO';
import ReceivableCreateDTO from '../model/ReceivableCreateDTO';
import ReceivableDTO from '../model/ReceivableDTO';
import TaskCreateDTO from '../model/TaskCreateDTO';
import TaskDTO from '../model/TaskDTO';

/**
* ProjectsClassic service.
* @module api/ProjectsClassicApi
* @version 2.0
*/
export default class ProjectsClassicApi {

    /**
    * Constructs a new ProjectsClassicApi. 
    * @alias module:api/ProjectsClassicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the create5 operation.
     * @callback module:api/ProjectsClassicApi~create5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDTOv1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Classic Project.
     * Creates a new Classic Project. If the specified service ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param {module:model/ClassicProjectCreateDTO} classicProjectCreateDTO Created a new Classic Project.
     * @param {module:api/ProjectsClassicApi~create5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDTOv1}
     */
    create5(classicProjectCreateDTO, callback) {
      let postBody = classicProjectCreateDTO;
      // verify the required parameter 'classicProjectCreateDTO' is set
      if (classicProjectCreateDTO === undefined || classicProjectCreateDTO === null) {
        throw new Error("Missing the required parameter 'classicProjectCreateDTO' when calling create5");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProjectDTOv1;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLanguageCombination operation.
     * @callback module:api/ProjectsClassicApi~createLanguageCombinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommonLanguageCombinationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new language combination for a given project without creating a task.
     * Creates a new language combination for a given project without creating a task.
     * @param {String} projectId project's internal identifier
     * @param {module:model/CommonLanguageCombinationDTO} commonLanguageCombinationDTO Created language combination for a given project without creating a task.
     * @param {module:api/ProjectsClassicApi~createLanguageCombinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommonLanguageCombinationDTO}
     */
    createLanguageCombination(projectId, commonLanguageCombinationDTO, callback) {
      let postBody = commonLanguageCombinationDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createLanguageCombination");
      }
      // verify the required parameter 'commonLanguageCombinationDTO' is set
      if (commonLanguageCombinationDTO === undefined || commonLanguageCombinationDTO === null) {
        throw new Error("Missing the required parameter 'commonLanguageCombinationDTO' when calling createLanguageCombination");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CommonLanguageCombinationDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/languageCombinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayable operation.
     * @callback module:api/ProjectsClassicApi~createPayableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a payable to a project.
     * Adds a payable to a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/PayableCreateDTO} payableCreateDTO 
     * @param {module:api/ProjectsClassicApi~createPayableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    createPayable(projectId, payableCreateDTO, callback) {
      let postBody = payableCreateDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createPayable");
      }
      // verify the required parameter 'payableCreateDTO' is set
      if (payableCreateDTO === undefined || payableCreateDTO === null) {
        throw new Error("Missing the required parameter 'payableCreateDTO' when calling createPayable");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/finance/payables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReceivable operation.
     * @callback module:api/ProjectsClassicApi~createReceivableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a receivable to a project.
     * Adds a receivable to a project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/ReceivableCreateDTO} receivableCreateDTO 
     * @param {module:api/ProjectsClassicApi~createReceivableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    createReceivable(projectId, receivableCreateDTO, callback) {
      let postBody = receivableCreateDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createReceivable");
      }
      // verify the required parameter 'receivableCreateDTO' is set
      if (receivableCreateDTO === undefined || receivableCreateDTO === null) {
        throw new Error("Missing the required parameter 'receivableCreateDTO' when calling createReceivable");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/finance/receivables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTask operation.
     * @callback module:api/ProjectsClassicApi~createTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new task for a given project.
     * Creates a new task for a given project.<p>   Required fields:   <ul>     <li>languageCombination</li>     <li>specializationId</li>     <li>workflowId</li>   </ul> </p> 
     * @param {String} projectId project's internal identifier
     * @param {module:model/TaskCreateDTO} taskCreateDTO Created new task for a given project.
     * @param {module:api/ProjectsClassicApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskDTO}
     */
    createTask(projectId, taskCreateDTO, callback) {
      let postBody = taskCreateDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createTask");
      }
      // verify the required parameter 'taskCreateDTO' is set
      if (taskCreateDTO === undefined || taskCreateDTO === null) {
        throw new Error("Missing the required parameter 'taskCreateDTO' when calling createTask");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = TaskDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete12 operation.
     * @callback module:api/ProjectsClassicApi~delete12Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a project.
     * Removes a project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsClassicApi~delete12Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete12(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling delete12");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayable operation.
     * @callback module:api/ProjectsClassicApi~deletePayableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param {String} projectId project's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:api/ProjectsClassicApi~deletePayableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayable(projectId, payableId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deletePayable");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling deletePayable");
      }

      let pathParams = {
        'projectId': projectId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}/finance/payables/{payableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceivable operation.
     * @callback module:api/ProjectsClassicApi~deleteReceivableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param {String} projectId project's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:api/ProjectsClassicApi~deleteReceivableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceivable(projectId, receivableId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteReceivable");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling deleteReceivable");
      }

      let pathParams = {
        'projectId': projectId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}/finance/receivables/{receivableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds6 operation.
     * @callback module:api/ProjectsClassicApi~getAllIds6Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns projects' internal identifiers.
     * Returns projects' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only projects modified since this timestamp
     * @param {module:api/ProjectsClassicApi~getAllIds6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds6(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/projects/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById7 operation.
     * @callback module:api/ProjectsClassicApi~getById7Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDTOv1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns project details.
     * Returns project details. If the specified project ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param {String} projectId project's internal identifier
     * @param {Object} opts Optional parameters
     * @param {String} [embed] list of additional fields which should be embedded in the response (available options: tasks)
     * @param {module:api/ProjectsClassicApi~getById7Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDTOv1}
     */
    getById7(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getById7");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'embed': opts['embed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProjectDTOv1;
      return this.apiClient.callApi(
        '/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts operation.
     * @callback module:api/ProjectsClassicApi~getContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contacts of a given project.
     * Returns contacts of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsClassicApi~getContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactsDTO}
     */
    getContacts(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getContacts");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ContactsDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields5 operation.
     * @callback module:api/ProjectsClassicApi~getCustomFields5Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given project.
     * Returns custom fields of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsClassicApi~getCustomFields5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields5(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCustomFields5");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/projects/{projectId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDates1 operation.
     * @callback module:api/ProjectsClassicApi~getDates1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDatesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns dates of a given project.
     * Returns dates of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsClassicApi~getDates1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDatesDTO}
     */
    getDates1(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDates1");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProjectDatesDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileById operation.
     * @callback module:api/ProjectsClassicApi~getFileByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a file.
     * Downloads a file.
     * @param {String} fileId file's internal identifier
     * @param {module:api/ProjectsClassicApi~getFileByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFileById(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileById");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['multipart/form-data'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/files/{fileId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinance operation.
     * @callback module:api/ProjectsClassicApi~getFinanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns finance of a given project.
     * Returns finance of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsClassicApi~getFinanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceDTO}
     */
    getFinance(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFinance");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = FinanceDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/finance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstructions operation.
     * @callback module:api/ProjectsClassicApi~getInstructionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstructionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns instructions of a given project.
     * Returns instructions of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:api/ProjectsClassicApi~getInstructionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstructionsDTO}
     */
    getInstructions(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getInstructions");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InstructionsDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/instructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContacts operation.
     * @callback module:api/ProjectsClassicApi~updateContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates contacts of a given project.
     * Updates contacts of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/ContactsDTO} contactsDTO Updated contacts of a given project.
     * @param {module:api/ProjectsClassicApi~updateContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactsDTO}
     */
    updateContacts(projectId, contactsDTO, callback) {
      let postBody = contactsDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateContacts");
      }
      // verify the required parameter 'contactsDTO' is set
      if (contactsDTO === undefined || contactsDTO === null) {
        throw new Error("Missing the required parameter 'contactsDTO' when calling updateContacts");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ContactsDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/contacts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFields3 operation.
     * @callback module:api/ProjectsClassicApi~updateCustomFields3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom fields of a given project.
     * Updates custom fields of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom fields of a given project.
     * @param {module:api/ProjectsClassicApi~updateCustomFields3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    updateCustomFields3(projectId, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateCustomFields3");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomFields3");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/projects/{projectId}/customFields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDates1 operation.
     * @callback module:api/ProjectsClassicApi~updateDates1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDatesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates dates of a given project.
     * Updates dates of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/ProjectDatesDTO} projectDatesDTO Updated dates of a given project..
     * @param {module:api/ProjectsClassicApi~updateDates1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDatesDTO}
     */
    updateDates1(projectId, projectDatesDTO, callback) {
      let postBody = projectDatesDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateDates1");
      }
      // verify the required parameter 'projectDatesDTO' is set
      if (projectDatesDTO === undefined || projectDatesDTO === null) {
        throw new Error("Missing the required parameter 'projectDatesDTO' when calling updateDates1");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProjectDatesDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/dates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstructions1 operation.
     * @callback module:api/ProjectsClassicApi~updateInstructions1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InstructionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates instructions of a given project.
     * Updates instructions of a given project.
     * @param {String} projectId project's internal identifier
     * @param {module:model/InstructionsDTO} instructionsDTO Updated instructions of a given project.
     * @param {module:api/ProjectsClassicApi~updateInstructions1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstructionsDTO}
     */
    updateInstructions1(projectId, instructionsDTO, callback) {
      let postBody = instructionsDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateInstructions1");
      }
      // verify the required parameter 'instructionsDTO' is set
      if (instructionsDTO === undefined || instructionsDTO === null) {
        throw new Error("Missing the required parameter 'instructionsDTO' when calling updateInstructions1");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InstructionsDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/instructions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayable operation.
     * @callback module:api/ProjectsClassicApi~updatePayableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a payable.
     * Updates a payable.
     * @param {String} projectId project's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:model/PayableDTO} payableDTO 
     * @param {module:api/ProjectsClassicApi~updatePayableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    updatePayable(projectId, payableId, payableDTO, callback) {
      let postBody = payableDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updatePayable");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling updatePayable");
      }
      // verify the required parameter 'payableDTO' is set
      if (payableDTO === undefined || payableDTO === null) {
        throw new Error("Missing the required parameter 'payableDTO' when calling updatePayable");
      }

      let pathParams = {
        'projectId': projectId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/finance/payables/{payableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReceivable operation.
     * @callback module:api/ProjectsClassicApi~updateReceivableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param {String} projectId project's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:model/ReceivableDTO} receivableDTO 
     * @param {module:api/ProjectsClassicApi~updateReceivableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    updateReceivable(projectId, receivableId, receivableDTO, callback) {
      let postBody = receivableDTO;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateReceivable");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling updateReceivable");
      }
      // verify the required parameter 'receivableDTO' is set
      if (receivableDTO === undefined || receivableDTO === null) {
        throw new Error("Missing the required parameter 'receivableDTO' when calling updateReceivable");
      }

      let pathParams = {
        'projectId': projectId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/projects/{projectId}/finance/receivables/{receivableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
