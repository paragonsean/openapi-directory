/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExternalFileDto from '../model/ExternalFileDto';
import FileCategorizationsDto from '../model/FileCategorizationsDto';
import FileDto from '../model/FileDto';
import FileLinkCategorizationsDto from '../model/FileLinkCategorizationsDto';
import FilesDto from '../model/FilesDto';
import FilesShareStatusDto from '../model/FilesShareStatusDto';
import JobDatesDto from '../model/JobDatesDto';
import JobStatusDTO from '../model/JobStatusDTO';
import ProjectFileDto from '../model/ProjectFileDto';
import StringDTO from '../model/StringDTO';
import VendorPriceProfileDTO from '../model/VendorPriceProfileDTO';

/**
* JobsSmartV2 service.
* @module api/JobsSmartV2Api
* @version 2.0
*/
export default class JobsSmartV2Api {

    /**
    * Constructs a new JobsSmartV2Api. 
    * @alias module:api/JobsSmartV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addExternalFileLink operation.
     * @callback module:api/JobsSmartV2Api~addExternalFileLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobId job's internal identifier
     * @param {module:model/ExternalFileDto} externalFileDto Added file links to the project as added by PM.
     * @param {module:api/JobsSmartV2Api~addExternalFileLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addExternalFileLink(jobId, externalFileDto, callback) {
      let postBody = externalFileDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addExternalFileLink");
      }
      // verify the required parameter 'externalFileDto' is set
      if (externalFileDto === undefined || externalFileDto === null) {
        throw new Error("Missing the required parameter 'externalFileDto' when calling addExternalFileLink");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/addExternalLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFileLinks operation.
     * @callback module:api/JobsSmartV2Api~addFileLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds file link to the project as a link delivered in the job.
     * Adds file link to the project as a link delivered in the job. The following properties can be specified for each file link:<ul><li>url (required, 400 Bad Request is returned otherwise)</li><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * @param {String} jobId job's internal identifier
     * @param {module:model/FileLinkCategorizationsDto} fileLinkCategorizationsDto Adds file link to the project as a link delivered in the job.
     * @param {module:api/JobsSmartV2Api~addFileLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesDto}
     */
    addFileLinks(jobId, fileLinkCategorizationsDto, callback) {
      let postBody = fileLinkCategorizationsDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addFileLinks");
      }
      // verify the required parameter 'fileLinkCategorizationsDto' is set
      if (fileLinkCategorizationsDto === undefined || fileLinkCategorizationsDto === null) {
        throw new Error("Missing the required parameter 'fileLinkCategorizationsDto' when calling addFileLinks");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FilesDto;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/delivered/addLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFiles operation.
     * @callback module:api/JobsSmartV2Api~addFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds files to the project as delivered in the job.
     * Adds files to the project as delivered in the job. The files have to be uploaded beforehand (see \"POST /jobs/{jobId}/files/upload\" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * @param {String} jobId job's internal identifier
     * @param {module:model/FileCategorizationsDto} fileCategorizationsDto Added files to the project as delivered in the job.
     * @param {module:api/JobsSmartV2Api~addFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFiles(jobId, fileCategorizationsDto, callback) {
      let postBody = fileCategorizationsDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addFiles");
      }
      // verify the required parameter 'fileCategorizationsDto' is set
      if (fileCategorizationsDto === undefined || fileCategorizationsDto === null) {
        throw new Error("Missing the required parameter 'fileCategorizationsDto' when calling addFiles");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/delivered/add', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignVendor1 operation.
     * @callback module:api/JobsSmartV2Api~assignVendor1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns vendor to a job in a project.
     * Assigns vendor to a job in a project.
     * @param {String} jobId job's internal identifier
     * @param {module:model/VendorPriceProfileDTO} vendorPriceProfileDTO Assigned vendor to a job in a project.
     * @param {module:api/JobsSmartV2Api~assignVendor1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    assignVendor1(jobId, vendorPriceProfileDTO, callback) {
      let postBody = vendorPriceProfileDTO;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling assignVendor1");
      }
      // verify the required parameter 'vendorPriceProfileDTO' is set
      if (vendorPriceProfileDTO === undefined || vendorPriceProfileDTO === null) {
        throw new Error("Missing the required parameter 'vendorPriceProfileDTO' when calling assignVendor1");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/vendor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeDates operation.
     * @callback module:api/JobsSmartV2Api~changeDatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates dates of a given job.
     * Updates dates of a given job.
     * @param {String} jobId job's internal identifier
     * @param {module:model/JobDatesDto} jobDatesDto New job dates.
     * @param {module:api/JobsSmartV2Api~changeDatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeDates(jobId, jobDatesDto, callback) {
      let postBody = jobDatesDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling changeDates");
      }
      // verify the required parameter 'jobDatesDto' is set
      if (jobDatesDto === undefined || jobDatesDto === null) {
        throw new Error("Missing the required parameter 'jobDatesDto' when calling changeDates");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/dates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeStatus1 operation.
     * @callback module:api/JobsSmartV2Api~changeStatus1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes job status if possible (400 Bad Request is returned otherwise).
     * Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:<ul><li>OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED</li><li>ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED</li><li>STARTED – available when the job has one of the following statuses: ACCEPTED, READY</li><li>READY – available when the job has one of the following statuses: STARTED</li><li>CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT</li><li>OFFERS_SENT – not available as a target status for this operation</li></ul>
     * @param {String} jobId job's internal identifier
     * @param {module:model/JobStatusDTO} jobStatusDTO Changed job status.
     * @param {module:api/JobsSmartV2Api~changeStatus1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    changeStatus1(jobId, jobStatusDTO, callback) {
      let postBody = jobStatusDTO;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling changeStatus1");
      }
      // verify the required parameter 'jobStatusDTO' is set
      if (jobStatusDTO === undefined || jobStatusDTO === null) {
        throw new Error("Missing the required parameter 'jobStatusDTO' when calling changeStatus1");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByExternalId operation.
     * @callback module:api/JobsSmartV2Api~getByExternalIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [externalProjectId] job's externalProjectId
     * @param {String} [externalId] job's external identifier
     * @param {module:api/JobsSmartV2Api~getByExternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getByExternalId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'externalProjectId': opts['externalProjectId'],
        'externalId': opts['externalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/jobs/for-external-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveredFiles operation.
     * @callback module:api/JobsSmartV2Api~getDeliveredFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFileDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of files delivered in the job.
     * Returns list of files delivered in the job.
     * @param {String} jobId job's internal identifier
     * @param {module:api/JobsSmartV2Api~getDeliveredFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFileDto>}
     */
    getDeliveredFiles(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getDeliveredFiles");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ProjectFileDto];
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/delivered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileById1 operation.
     * @callback module:api/JobsSmartV2Api~getFileById1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFileDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details for a job.
     * Returns details for a job.
     * @param {String} jobId job's internal identifier
     * @param {module:api/JobsSmartV2Api~getFileById1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFileDto}
     */
    getFileById1(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getFileById1");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProjectFileDto;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSharedReferenceFiles operation.
     * @callback module:api/JobsSmartV2Api~getSharedReferenceFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFileDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of files shared with the job as Reference Files.
     * Returns list of files shared with the job as Reference Files.
     * @param {String} jobId job's internal identifier
     * @param {module:api/JobsSmartV2Api~getSharedReferenceFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFileDto>}
     */
    getSharedReferenceFiles(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getSharedReferenceFiles");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ProjectFileDto];
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/sharedReferenceFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSharedWorkFiles operation.
     * @callback module:api/JobsSmartV2Api~getSharedWorkFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFileDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of files shared with the job as Work Files.
     * Returns list of files shared with the job as Work Files.
     * @param {String} jobId job's internal identifier
     * @param {module:api/JobsSmartV2Api~getSharedWorkFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFileDto>}
     */
    getSharedWorkFiles(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getSharedWorkFiles");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ProjectFileDto];
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/sharedWorkFiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareAsReferenceFiles operation.
     * @callback module:api/JobsSmartV2Api~shareAsReferenceFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesShareStatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shares selected files as Reference Files with a job in a project.
     * Shares selected files as Reference Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Work File, it will now be shared as Reference File (and not as Work File).
     * @param {String} jobId job's internal identifier
     * @param {module:model/FilesDto} filesDto Shared selected files as Reference Files with a job in a project.
     * @param {module:api/JobsSmartV2Api~shareAsReferenceFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesShareStatusDto}
     */
    shareAsReferenceFiles(jobId, filesDto, callback) {
      let postBody = filesDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling shareAsReferenceFiles");
      }
      // verify the required parameter 'filesDto' is set
      if (filesDto === undefined || filesDto === null) {
        throw new Error("Missing the required parameter 'filesDto' when calling shareAsReferenceFiles");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FilesShareStatusDto;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/sharedReferenceFiles/share', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareAsWorkFiles operation.
     * @callback module:api/JobsSmartV2Api~shareAsWorkFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesShareStatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shares selected files as Work Files with a job in a project.
     * Shares selected files as Work Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Reference File, it will now be shared as Work File (and not as Reference File).
     * @param {String} jobId job's internal identifier
     * @param {module:model/FilesDto} filesDto Shared selected files as Work Files with a job in a project.
     * @param {module:api/JobsSmartV2Api~shareAsWorkFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesShareStatusDto}
     */
    shareAsWorkFiles(jobId, filesDto, callback) {
      let postBody = filesDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling shareAsWorkFiles");
      }
      // verify the required parameter 'filesDto' is set
      if (filesDto === undefined || filesDto === null) {
        throw new Error("Missing the required parameter 'filesDto' when calling shareAsWorkFiles");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FilesShareStatusDto;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/sharedWorkFiles/share', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopSharing operation.
     * @callback module:api/JobsSmartV2Api~stopSharingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesShareStatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops sharing selected files with a job in a project.
     * Stops sharing selected files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were not shared with the job.
     * @param {String} jobId job's internal identifier
     * @param {module:model/FilesDto} filesDto File sharing stopped for a project task.
     * @param {module:api/JobsSmartV2Api~stopSharingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesShareStatusDto}
     */
    stopSharing(jobId, filesDto, callback) {
      let postBody = filesDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling stopSharing");
      }
      // verify the required parameter 'filesDto' is set
      if (filesDto === undefined || filesDto === null) {
        throw new Error("Missing the required parameter 'filesDto' when calling stopSharing");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FilesShareStatusDto;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/stopSharing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstructions4 operation.
     * @callback module:api/JobsSmartV2Api~updateInstructions4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates instructions for a job.
     * Updates instructions for a job. See also \"PUT /projects/{projectId}/vendorInstructions\" and \"PUT /quotes/{quoteId}/vendorInstructions\" for updating instructions for all jobs in a project or quote.
     * @param {String} jobId job's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated instructions for a job.
     * @param {module:api/JobsSmartV2Api~updateInstructions4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInstructions4(jobId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling updateInstructions4");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateInstructions4");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/instructions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile1 operation.
     * @callback module:api/JobsSmartV2Api~uploadFile1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads file to the project as a file delivered in the job.
     * Uploads file to the project as a file delivered in the job. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \"PUT /jobs/{jobId}/files/add\" operation).
     * @param {String} jobId job's internal identifier
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/JobsSmartV2Api~uploadFile1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDto}
     */
    uploadFile1(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling uploadFile1");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FileDto;
      return this.apiClient.callApi(
        '/v2/jobs/{jobId}/files/delivered/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
