/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommonLanguageCombinationDTO from '../model/CommonLanguageCombinationDTO';
import CustomFieldDTO from '../model/CustomFieldDTO';
import FinanceDTO from '../model/FinanceDTO';
import InstructionsDTO from '../model/InstructionsDTO';
import PayableCreateDTO from '../model/PayableCreateDTO';
import PayableDTO from '../model/PayableDTO';
import QuoteDTOv1 from '../model/QuoteDTOv1';
import QuoteDatesDTO from '../model/QuoteDatesDTO';
import ReceivableCreateDTO from '../model/ReceivableCreateDTO';
import ReceivableDTO from '../model/ReceivableDTO';
import TaskDTO from '../model/TaskDTO';

/**
* QuotesClassic service.
* @module api/QuotesClassicApi
* @version 2.0
*/
export default class QuotesClassicApi {

    /**
    * Constructs a new QuotesClassicApi. 
    * @alias module:api/QuotesClassicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLanguageCombination1 operation.
     * @callback module:api/QuotesClassicApi~createLanguageCombination1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CommonLanguageCombinationDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new language combination for a given quote without creating a task.
     * Creates a new language combination for a given quote without creating a task.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/CommonLanguageCombinationDTO} commonLanguageCombinationDTO Created a new language combination for a given quote without creating a task.
     * @param {module:api/QuotesClassicApi~createLanguageCombination1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommonLanguageCombinationDTO}
     */
    createLanguageCombination1(quoteId, commonLanguageCombinationDTO, callback) {
      let postBody = commonLanguageCombinationDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling createLanguageCombination1");
      }
      // verify the required parameter 'commonLanguageCombinationDTO' is set
      if (commonLanguageCombinationDTO === undefined || commonLanguageCombinationDTO === null) {
        throw new Error("Missing the required parameter 'commonLanguageCombinationDTO' when calling createLanguageCombination1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CommonLanguageCombinationDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/languageCombinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayable1 operation.
     * @callback module:api/QuotesClassicApi~createPayable1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a payable.
     * Adds a payable.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/PayableCreateDTO} payableCreateDTO Adds a payable.
     * @param {module:api/QuotesClassicApi~createPayable1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    createPayable1(quoteId, payableCreateDTO, callback) {
      let postBody = payableCreateDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling createPayable1");
      }
      // verify the required parameter 'payableCreateDTO' is set
      if (payableCreateDTO === undefined || payableCreateDTO === null) {
        throw new Error("Missing the required parameter 'payableCreateDTO' when calling createPayable1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/finance/payables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReceivable1 operation.
     * @callback module:api/QuotesClassicApi~createReceivable1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a receivable.
     * Adds a receivable.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/ReceivableCreateDTO} receivableCreateDTO Adds a receivable.
     * @param {module:api/QuotesClassicApi~createReceivable1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    createReceivable1(quoteId, receivableCreateDTO, callback) {
      let postBody = receivableCreateDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling createReceivable1");
      }
      // verify the required parameter 'receivableCreateDTO' is set
      if (receivableCreateDTO === undefined || receivableCreateDTO === null) {
        throw new Error("Missing the required parameter 'receivableCreateDTO' when calling createReceivable1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/finance/receivables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTask1 operation.
     * @callback module:api/QuotesClassicApi~createTask1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new task for a given quote.
     * Creates a new task for a given quote. Required fields are presented in the example.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/TaskDTO} taskDTO Updated custom fields of a given quote.
     * @param {module:api/QuotesClassicApi~createTask1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskDTO}
     */
    createTask1(quoteId, taskDTO, callback) {
      let postBody = taskDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling createTask1");
      }
      // verify the required parameter 'taskDTO' is set
      if (taskDTO === undefined || taskDTO === null) {
        throw new Error("Missing the required parameter 'taskDTO' when calling createTask1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = TaskDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete13 operation.
     * @callback module:api/QuotesClassicApi~delete13Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a quote.
     * Removes a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesClassicApi~delete13Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete13(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling delete13");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quotes/{quoteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayable1 operation.
     * @callback module:api/QuotesClassicApi~deletePayable1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param {String} quoteId quoteId's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:api/QuotesClassicApi~deletePayable1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayable1(quoteId, payableId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling deletePayable1");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling deletePayable1");
      }

      let pathParams = {
        'quoteId': quoteId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/finance/payables/{payableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceivable1 operation.
     * @callback module:api/QuotesClassicApi~deleteReceivable1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param {String} quoteId quoteId's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:api/QuotesClassicApi~deleteReceivable1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceivable1(quoteId, receivableId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling deleteReceivable1");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling deleteReceivable1");
      }

      let pathParams = {
        'quoteId': quoteId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/finance/receivables/{receivableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds7 operation.
     * @callback module:api/QuotesClassicApi~getAllIds7Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns quotes' internal identifiers.
     * Returns quotes' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only quotes modified since this timestamp
     * @param {module:api/QuotesClassicApi~getAllIds7Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds7(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/quotes/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById8 operation.
     * @callback module:api/QuotesClassicApi~getById8Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDTOv1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
     * @param {String} quoteId quote's internal identifier
     * @param {Object} opts Optional parameters
     * @param {String} [embed] list of adittional fields which should be embedded in the response (ie. tasks)
     * @param {module:api/QuotesClassicApi~getById8Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDTOv1}
     */
    getById8(quoteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getById8");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
        'embed': opts['embed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = QuoteDTOv1;
      return this.apiClient.callApi(
        '/quotes/{quoteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields6 operation.
     * @callback module:api/QuotesClassicApi~getCustomFields6Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given quote.
     * Returns custom fields of a given quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesClassicApi~getCustomFields6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields6(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getCustomFields6");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/quotes/{quoteId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDates2 operation.
     * @callback module:api/QuotesClassicApi~getDates2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDatesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns dates of a given quote.
     * Returns dates of a given quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesClassicApi~getDates2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDatesDTO}
     */
    getDates2(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getDates2");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = QuoteDatesDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinance1 operation.
     * @callback module:api/QuotesClassicApi~getFinance1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns finance of a given quote.
     * Returns finance of a given quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesClassicApi~getFinance1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceDTO}
     */
    getFinance1(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getFinance1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = FinanceDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/finance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstructions1 operation.
     * @callback module:api/QuotesClassicApi~getInstructions1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InstructionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns instructions of a given quote.
     * Returns instructions of a given quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesClassicApi~getInstructions1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstructionsDTO}
     */
    getInstructions1(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getInstructions1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InstructionsDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/instructions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the send1 operation.
     * @callback module:api/QuotesClassicApi~send1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a quote for customer confirmation.
     * Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesClassicApi~send1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    send1(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling send1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/confirmation/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the start operation.
     * @callback module:api/QuotesClassicApi~startCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a quote.
     * Starts a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesClassicApi~startCallback} callback The callback function, accepting three arguments: error, data, response
     */
    start(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling start");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFields4 operation.
     * @callback module:api/QuotesClassicApi~updateCustomFields4Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom fields of a given quote.
     * Updates custom fields of a given quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom fields of a given quote.
     * @param {module:api/QuotesClassicApi~updateCustomFields4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    updateCustomFields4(quoteId, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateCustomFields4");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomFields4");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/quotes/{quoteId}/customFields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstructions2 operation.
     * @callback module:api/QuotesClassicApi~updateInstructions2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InstructionsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates instructions of a given quote.
     * Updates instructions of a given quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/InstructionsDTO} instructionsDTO Updated instructions of a given project.
     * @param {module:api/QuotesClassicApi~updateInstructions2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstructionsDTO}
     */
    updateInstructions2(quoteId, instructionsDTO, callback) {
      let postBody = instructionsDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateInstructions2");
      }
      // verify the required parameter 'instructionsDTO' is set
      if (instructionsDTO === undefined || instructionsDTO === null) {
        throw new Error("Missing the required parameter 'instructionsDTO' when calling updateInstructions2");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InstructionsDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/instructions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayable1 operation.
     * @callback module:api/QuotesClassicApi~updatePayable1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a payable.
     * Updates a payable.
     * @param {String} quoteId quote's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:model/PayableDTO} payableDTO Updates a payable.
     * @param {module:api/QuotesClassicApi~updatePayable1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    updatePayable1(quoteId, payableId, payableDTO, callback) {
      let postBody = payableDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updatePayable1");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling updatePayable1");
      }
      // verify the required parameter 'payableDTO' is set
      if (payableDTO === undefined || payableDTO === null) {
        throw new Error("Missing the required parameter 'payableDTO' when calling updatePayable1");
      }

      let pathParams = {
        'quoteId': quoteId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/finance/payables/{payableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReceivable1 operation.
     * @callback module:api/QuotesClassicApi~updateReceivable1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param {String} quoteId quote's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:model/ReceivableDTO} receivableDTO Updates a receivable.
     * @param {module:api/QuotesClassicApi~updateReceivable1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    updateReceivable1(quoteId, receivableId, receivableDTO, callback) {
      let postBody = receivableDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateReceivable1");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling updateReceivable1");
      }
      // verify the required parameter 'receivableDTO' is set
      if (receivableDTO === undefined || receivableDTO === null) {
        throw new Error("Missing the required parameter 'receivableDTO' when calling updateReceivable1");
      }

      let pathParams = {
        'quoteId': quoteId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/quotes/{quoteId}/finance/receivables/{receivableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
