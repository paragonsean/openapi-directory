/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BigDecimalDTO from '../model/BigDecimalDTO';
import CustomFieldDTO from '../model/CustomFieldDTO';
import FileDto from '../model/FileDto';
import FilesArchiveDto from '../model/FilesArchiveDto';
import FilesDto from '../model/FilesDto';
import FinanceDTO from '../model/FinanceDTO';
import JobDto from '../model/JobDto';
import PayableCreateDTO from '../model/PayableCreateDTO';
import PayableDTO from '../model/PayableDTO';
import ProjectFileDto from '../model/ProjectFileDto';
import ProjectStatusDTO from '../model/ProjectStatusDTO';
import QuoteCreateDTO from '../model/QuoteCreateDTO';
import QuoteDTOv2 from '../model/QuoteDTOv2';
import ReceivableCreateDTO from '../model/ReceivableCreateDTO';
import ReceivableDTO from '../model/ReceivableDTO';
import SmartContactsDTO from '../model/SmartContactsDTO';
import SmartCustomFieldDTO from '../model/SmartCustomFieldDTO';
import SourceLanguageDTO from '../model/SourceLanguageDTO';
import SpecializationDTO from '../model/SpecializationDTO';
import StringDTO from '../model/StringDTO';
import TargetLanguagesDTO from '../model/TargetLanguagesDTO';
import TimeDTO from '../model/TimeDTO';

/**
* QuotesSmartV2 service.
* @module api/QuotesSmartV2Api
* @version 2.0
*/
export default class QuotesSmartV2Api {

    /**
    * Constructs a new QuotesSmartV2Api. 
    * @alias module:api/QuotesSmartV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFiles2 operation.
     * @callback module:api/QuotesSmartV2Api~addFiles2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds files to the quote as added by PM.
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \"POST v2/quotes/{quoteId}/files/upload\" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/TimeDTO} timeDTO Added files to the quote as added by PM.
     * @param {module:api/QuotesSmartV2Api~addFiles2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addFiles2(quoteId, timeDTO, callback) {
      let postBody = timeDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling addFiles2");
      }
      // verify the required parameter 'timeDTO' is set
      if (timeDTO === undefined || timeDTO === null) {
        throw new Error("Missing the required parameter 'timeDTO' when calling addFiles2");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/files/add', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archive1 operation.
     * @callback module:api/QuotesSmartV2Api~archive1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesArchiveDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param {module:model/FilesDto} filesDto Prepared ZIP archive that contains the specified files.
     * @param {module:api/QuotesSmartV2Api~archive1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesArchiveDto}
     */
    archive1(filesDto, callback) {
      let postBody = filesDto;
      // verify the required parameter 'filesDto' is set
      if (filesDto === undefined || filesDto === null) {
        throw new Error("Missing the required parameter 'filesDto' when calling archive1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FilesArchiveDto;
      return this.apiClient.callApi(
        '/v2/quotes/files/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeStatus3 operation.
     * @callback module:api/QuotesSmartV2Api~changeStatus3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise).
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED</li><li>SENT – available when the job has one of the following statuses: PENDING</li><li>APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT</li><li>REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT</li></ul>
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/ProjectStatusDTO} projectStatusDTO Changed Quote status.
     * @param {module:api/QuotesSmartV2Api~changeStatus3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    changeStatus3(quoteId, projectStatusDTO, callback) {
      let postBody = projectStatusDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling changeStatus3");
      }
      // verify the required parameter 'projectStatusDTO' is set
      if (projectStatusDTO === undefined || projectStatusDTO === null) {
        throw new Error("Missing the required parameter 'projectStatusDTO' when calling changeStatus3");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create7 operation.
     * @callback module:api/QuotesSmartV2Api~create7Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDTOv2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Smart Quote.
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuoteCreateDTO} [quoteCreateDTO] Project to create
     * @param {module:api/QuotesSmartV2Api~create7Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDTOv2}
     */
    create7(opts, callback) {
      opts = opts || {};
      let postBody = opts['quoteCreateDTO'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = QuoteDTOv2;
      return this.apiClient.callApi(
        '/v2/quotes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayable3 operation.
     * @callback module:api/QuotesSmartV2Api~createPayable3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a payable to a quote.
     * Adds a payable to a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/PayableCreateDTO} payableCreateDTO 
     * @param {module:api/QuotesSmartV2Api~createPayable3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    createPayable3(quoteId, payableCreateDTO, callback) {
      let postBody = payableCreateDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling createPayable3");
      }
      // verify the required parameter 'payableCreateDTO' is set
      if (payableCreateDTO === undefined || payableCreateDTO === null) {
        throw new Error("Missing the required parameter 'payableCreateDTO' when calling createPayable3");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/finance/payables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReceivable3 operation.
     * @callback module:api/QuotesSmartV2Api~createReceivable3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a receivable to a quote.
     * Adds a receivable to a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/ReceivableCreateDTO} receivableCreateDTO 
     * @param {module:api/QuotesSmartV2Api~createReceivable3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    createReceivable3(quoteId, receivableCreateDTO, callback) {
      let postBody = receivableCreateDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling createReceivable3");
      }
      // verify the required parameter 'receivableCreateDTO' is set
      if (receivableCreateDTO === undefined || receivableCreateDTO === null) {
        throw new Error("Missing the required parameter 'receivableCreateDTO' when calling createReceivable3");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/finance/receivables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayable3 operation.
     * @callback module:api/QuotesSmartV2Api~deletePayable3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param {String} quoteId quote's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:api/QuotesSmartV2Api~deletePayable3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePayable3(quoteId, payableId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling deletePayable3");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling deletePayable3");
      }

      let pathParams = {
        'quoteId': quoteId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/finance/payables/{payableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceivable3 operation.
     * @callback module:api/QuotesSmartV2Api~deleteReceivable3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param {String} quoteId quote's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:api/QuotesSmartV2Api~deleteReceivable3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceivable3(quoteId, receivableId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling deleteReceivable3");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling deleteReceivable3");
      }

      let pathParams = {
        'quoteId': quoteId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/finance/receivables/{receivableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById10 operation.
     * @callback module:api/QuotesSmartV2Api~getById10Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDTOv2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesSmartV2Api~getById10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDTOv2}
     */
    getById10(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getById10");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = QuoteDTOv2;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts3 operation.
     * @callback module:api/QuotesSmartV2Api~getContacts3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Client Contacts information for a quote.
     * Returns Client Contacts information for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesSmartV2Api~getContacts3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartContactsDTO}
     */
    getContacts3(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getContacts3");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SmartContactsDTO;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/clientContacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields9 operation.
     * @callback module:api/QuotesSmartV2Api~getCustomFields9Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesSmartV2Api~getCustomFields9Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields9(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getCustomFields9");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileById3 operation.
     * @callback module:api/QuotesSmartV2Api~getFileById3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectFileDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param {String} fileId file's internal identifier
     * @param {module:api/QuotesSmartV2Api~getFileById3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectFileDto}
     */
    getFileById3(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileById3");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProjectFileDto;
      return this.apiClient.callApi(
        '/v2/quotes/files/{fileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileContentById1 operation.
     * @callback module:api/QuotesSmartV2Api~getFileContentById1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param {String} fileId file's internal identifier
     * @param {String} fileName file's name
     * @param {module:api/QuotesSmartV2Api~getFileContentById1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getFileContentById1(fileId, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFileContentById1");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getFileContentById1");
      }

      let pathParams = {
        'fileId': fileId,
        'fileName': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['multipart/form-data'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/files/{fileId}/download/{fileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFiles1 operation.
     * @callback module:api/QuotesSmartV2Api~getFiles1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectFileDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of files in a quote.
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesSmartV2Api~getFiles1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectFileDto>}
     */
    getFiles1(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getFiles1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ProjectFileDto];
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinance3 operation.
     * @callback module:api/QuotesSmartV2Api~getFinance3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FinanceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns finance information for a quote.
     * Returns finance information for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesSmartV2Api~getFinance3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinanceDTO}
     */
    getFinance3(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getFinance3");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FinanceDTO;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/finance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobs1 operation.
     * @callback module:api/QuotesSmartV2Api~getJobs1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of jobs in a quote.
     * Returns list of jobs in a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:api/QuotesSmartV2Api~getJobs1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JobDto>}
     */
    getJobs1(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getJobs1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [JobDto];
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBusinessDays operation.
     * @callback module:api/QuotesSmartV2Api~updateBusinessDaysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Business Days for a quote.
     * Updates Business Days for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {Number} body Updated Business Days for a quote.
     * @param {module:api/QuotesSmartV2Api~updateBusinessDaysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBusinessDays(quoteId, body, callback) {
      let postBody = body;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateBusinessDays");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBusinessDays");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/businessDays', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientNotes1 operation.
     * @callback module:api/QuotesSmartV2Api~updateClientNotes1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Notes for a quote.
     * Updates Client Notes for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated Client Notes for a quote.
     * @param {module:api/QuotesSmartV2Api~updateClientNotes1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClientNotes1(quoteId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateClientNotes1");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateClientNotes1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/clientNotes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientReferenceNumber1 operation.
     * @callback module:api/QuotesSmartV2Api~updateClientReferenceNumber1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Reference Number for a quote.
     * Updates Client Reference Number for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated Client Reference Number for a quote.
     * @param {module:api/QuotesSmartV2Api~updateClientReferenceNumber1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateClientReferenceNumber1(quoteId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateClientReferenceNumber1");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateClientReferenceNumber1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/clientReferenceNumber', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContacts3 operation.
     * @callback module:api/QuotesSmartV2Api~updateContacts3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartContactsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Client Contacts for a quote.
     * Updates Client Contacts for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/SmartContactsDTO} smartContactsDTO Updated Client Contacts for a quote.
     * @param {module:api/QuotesSmartV2Api~updateContacts3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartContactsDTO}
     */
    updateContacts3(quoteId, smartContactsDTO, callback) {
      let postBody = smartContactsDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateContacts3");
      }
      // verify the required parameter 'smartContactsDTO' is set
      if (smartContactsDTO === undefined || smartContactsDTO === null) {
        throw new Error("Missing the required parameter 'smartContactsDTO' when calling updateContacts3");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SmartContactsDTO;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/clientContacts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomField3 operation.
     * @callback module:api/QuotesSmartV2Api~updateCustomField3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a custom field with a specified key in a quote.
     * Updates a custom field with a specified key in a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {String} key custom field's key
     * @param {module:model/SmartCustomFieldDTO} smartCustomFieldDTO Updated custom field with a specified key in a quote.
     * @param {module:api/QuotesSmartV2Api~updateCustomField3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCustomField3(quoteId, key, smartCustomFieldDTO, callback) {
      let postBody = smartCustomFieldDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateCustomField3");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCustomField3");
      }
      // verify the required parameter 'smartCustomFieldDTO' is set
      if (smartCustomFieldDTO === undefined || smartCustomFieldDTO === null) {
        throw new Error("Missing the required parameter 'smartCustomFieldDTO' when calling updateCustomField3");
      }

      let pathParams = {
        'quoteId': quoteId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/customFields/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExpectedDeliveryDate operation.
     * @callback module:api/QuotesSmartV2Api~updateExpectedDeliveryDateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Expected Delivery Date for a quote.
     * Updates Expected Delivery Date for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/TimeDTO} timeDTO Updated Expected Delivery Date for a quote.
     * @param {module:api/QuotesSmartV2Api~updateExpectedDeliveryDateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateExpectedDeliveryDate(quoteId, timeDTO, callback) {
      let postBody = timeDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateExpectedDeliveryDate");
      }
      // verify the required parameter 'timeDTO' is set
      if (timeDTO === undefined || timeDTO === null) {
        throw new Error("Missing the required parameter 'timeDTO' when calling updateExpectedDeliveryDate");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/expectedDeliveryDate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInternalNotes1 operation.
     * @callback module:api/QuotesSmartV2Api~updateInternalNotes1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Internal Notes for a quote.
     * Updates Internal Notes for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated Internal Notes for a quote.
     * @param {module:api/QuotesSmartV2Api~updateInternalNotes1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInternalNotes1(quoteId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateInternalNotes1");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateInternalNotes1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/internalNotes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayable3 operation.
     * @callback module:api/QuotesSmartV2Api~updatePayable3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PayableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a payable.
     * Updates a payable.
     * @param {String} quoteId quote's internal identifier
     * @param {Number} payableId payable's internal identifier
     * @param {module:model/PayableDTO} payableDTO 
     * @param {module:api/QuotesSmartV2Api~updatePayable3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayableDTO}
     */
    updatePayable3(quoteId, payableId, payableDTO, callback) {
      let postBody = payableDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updatePayable3");
      }
      // verify the required parameter 'payableId' is set
      if (payableId === undefined || payableId === null) {
        throw new Error("Missing the required parameter 'payableId' when calling updatePayable3");
      }
      // verify the required parameter 'payableDTO' is set
      if (payableDTO === undefined || payableDTO === null) {
        throw new Error("Missing the required parameter 'payableDTO' when calling updatePayable3");
      }

      let pathParams = {
        'quoteId': quoteId,
        'payableId': payableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PayableDTO;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/finance/payables/{payableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuoteExpiry operation.
     * @callback module:api/QuotesSmartV2Api~updateQuoteExpiryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Quote Expiry Date for a quote.
     * Updates Quote Expiry Date for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/TimeDTO} timeDTO Updated Quote Expiry Date for a quote.
     * @param {module:api/QuotesSmartV2Api~updateQuoteExpiryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateQuoteExpiry(quoteId, timeDTO, callback) {
      let postBody = timeDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateQuoteExpiry");
      }
      // verify the required parameter 'timeDTO' is set
      if (timeDTO === undefined || timeDTO === null) {
        throw new Error("Missing the required parameter 'timeDTO' when calling updateQuoteExpiry");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/quoteExpiry', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReceivable3 operation.
     * @callback module:api/QuotesSmartV2Api~updateReceivable3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceivableDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param {String} quoteId quote's internal identifier
     * @param {Number} receivableId receivable's internal identifier
     * @param {module:model/ReceivableDTO} receivableDTO 
     * @param {module:api/QuotesSmartV2Api~updateReceivable3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceivableDTO}
     */
    updateReceivable3(quoteId, receivableId, receivableDTO, callback) {
      let postBody = receivableDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateReceivable3");
      }
      // verify the required parameter 'receivableId' is set
      if (receivableId === undefined || receivableId === null) {
        throw new Error("Missing the required parameter 'receivableId' when calling updateReceivable3");
      }
      // verify the required parameter 'receivableDTO' is set
      if (receivableDTO === undefined || receivableDTO === null) {
        throw new Error("Missing the required parameter 'receivableDTO' when calling updateReceivable3");
      }

      let pathParams = {
        'quoteId': quoteId,
        'receivableId': receivableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReceivableDTO;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/finance/receivables/{receivableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceLanguage1 operation.
     * @callback module:api/QuotesSmartV2Api~updateSourceLanguage1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates source language for a quote.
     * Updates source language for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/SourceLanguageDTO} sourceLanguageDTO Updated source language for a quote.
     * @param {module:api/QuotesSmartV2Api~updateSourceLanguage1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSourceLanguage1(quoteId, sourceLanguageDTO, callback) {
      let postBody = sourceLanguageDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateSourceLanguage1");
      }
      // verify the required parameter 'sourceLanguageDTO' is set
      if (sourceLanguageDTO === undefined || sourceLanguageDTO === null) {
        throw new Error("Missing the required parameter 'sourceLanguageDTO' when calling updateSourceLanguage1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/sourceLanguage', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpecialization1 operation.
     * @callback module:api/QuotesSmartV2Api~updateSpecialization1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specialization for a quote.
     * Updates specialization for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/SpecializationDTO} specializationDTO Updated specialization for a quote.
     * @param {module:api/QuotesSmartV2Api~updateSpecialization1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSpecialization1(quoteId, specializationDTO, callback) {
      let postBody = specializationDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateSpecialization1");
      }
      // verify the required parameter 'specializationDTO' is set
      if (specializationDTO === undefined || specializationDTO === null) {
        throw new Error("Missing the required parameter 'specializationDTO' when calling updateSpecialization1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/specialization', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTargetLanguages1 operation.
     * @callback module:api/QuotesSmartV2Api~updateTargetLanguages1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates target languages for a quote.
     * Updates target languages for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/TargetLanguagesDTO} targetLanguagesDTO Updated target languages for a quote.
     * @param {module:api/QuotesSmartV2Api~updateTargetLanguages1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTargetLanguages1(quoteId, targetLanguagesDTO, callback) {
      let postBody = targetLanguagesDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateTargetLanguages1");
      }
      // verify the required parameter 'targetLanguagesDTO' is set
      if (targetLanguagesDTO === undefined || targetLanguagesDTO === null) {
        throw new Error("Missing the required parameter 'targetLanguagesDTO' when calling updateTargetLanguages1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/targetLanguages', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVendorInstructions1 operation.
     * @callback module:api/QuotesSmartV2Api~updateVendorInstructions1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates instructions for all vendors performing the jobs in a quote.
     * Updates instructions for all vendors performing the jobs in a quote. See also \"PUT /jobs/{jobId}/instructions\" for updating instructions for a specific job in a project or quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/StringDTO} stringDTO Updated instructions for all vendors performing the jobs in a quote.
     * @param {module:api/QuotesSmartV2Api~updateVendorInstructions1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVendorInstructions1(quoteId, stringDTO, callback) {
      let postBody = stringDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateVendorInstructions1");
      }
      // verify the required parameter 'stringDTO' is set
      if (stringDTO === undefined || stringDTO === null) {
        throw new Error("Missing the required parameter 'stringDTO' when calling updateVendorInstructions1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/vendorInstructions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVolume1 operation.
     * @callback module:api/QuotesSmartV2Api~updateVolume1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates volume for a quote.
     * Updates volume for a quote.
     * @param {String} quoteId quote's internal identifier
     * @param {module:model/BigDecimalDTO} bigDecimalDTO Updated volume for a quote.
     * @param {module:api/QuotesSmartV2Api~updateVolume1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVolume1(quoteId, bigDecimalDTO, callback) {
      let postBody = bigDecimalDTO;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling updateVolume1");
      }
      // verify the required parameter 'bigDecimalDTO' is set
      if (bigDecimalDTO === undefined || bigDecimalDTO === null) {
        throw new Error("Missing the required parameter 'bigDecimalDTO' when calling updateVolume1");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/volume', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile3 operation.
     * @callback module:api/QuotesSmartV2Api~uploadFile3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads file to the quote as a file uploaded by PM.
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \"PUT /v2/quotes/{quoteId}/files/add\" operation).
     * @param {String} quoteId quote's internal identifier
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:api/QuotesSmartV2Api~uploadFile3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDto}
     */
    uploadFile3(quoteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling uploadFile3");
      }

      let pathParams = {
        'quoteId': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = FileDto;
      return this.apiClient.callApi(
        '/v2/quotes/{quoteId}/files/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
