/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExportRequestDTO from '../model/ExportRequestDTO';
import ImportRequestDTO from '../model/ImportRequestDTO';
import ImportResultDTO from '../model/ImportResultDTO';
import PreferredRequestDTO from '../model/PreferredRequestDTO';
import ReportResultDTO from '../model/ReportResultDTO';

/**
* Reports service.
* @module api/ReportsApi
* @version 2.0
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the delete11 operation.
     * @callback module:api/ReportsApi~delete11Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a report.
     * Removes a report.
     * @param {Number} reportId report's internal identifier
     * @param {module:api/ReportsApi~delete11Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete11(reportId, callback) {
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling delete11");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reports/{reportId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicate1 operation.
     * @callback module:api/ReportsApi~duplicate1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicates a report.
     * Duplicates a report.
     * @param {Number} reportId report's internal identifier
     * @param {module:api/ReportsApi~duplicate1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    duplicate1(reportId, callback) {
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling duplicate1");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reports/{reportId}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportToXML operation.
     * @callback module:api/ReportsApi~exportToXMLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports reports definition to XML.
     * Exports reports definition to XML.
     * @param {module:model/ExportRequestDTO} exportRequestDTO Exported reports definition to XML.
     * @param {module:api/ReportsApi~exportToXMLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportResultDTO}
     */
    exportToXML(exportRequestDTO, callback) {
      let postBody = exportRequestDTO;
      // verify the required parameter 'exportRequestDTO' is set
      if (exportRequestDTO === undefined || exportRequestDTO === null) {
        throw new Error("Missing the required parameter 'exportRequestDTO' when calling exportToXML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ReportResultDTO;
      return this.apiClient.callApi(
        '/reports/export/xml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateCSV operation.
     * @callback module:api/ReportsApi~generateCSVCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates CSV content for a report.
     * Generates CSV content for a report.
     * @param {Number} reportId report's internal identifier
     * @param {module:api/ReportsApi~generateCSVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportResultDTO}
     */
    generateCSV(reportId, callback) {
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling generateCSV");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ReportResultDTO;
      return this.apiClient.callApi(
        '/reports/{reportId}/result/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePrinterFriendly operation.
     * @callback module:api/ReportsApi~generatePrinterFriendlyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates printer friendly content for a report.
     * Generates printer friendly content for a report.
     * @param {Number} reportId report's internal identifier
     * @param {module:api/ReportsApi~generatePrinterFriendlyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportResultDTO}
     */
    generatePrinterFriendly(reportId, callback) {
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling generatePrinterFriendly");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ReportResultDTO;
      return this.apiClient.callApi(
        '/reports/{reportId}/result/printerFriendly', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importFromXML operation.
     * @callback module:api/ReportsApi~importFromXMLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports reports definition from XML.
     * Imports a report definition from an XML using a file token. To obtain the token, you first need to upload a temporary XML file, as specified in the Files section. Note that the name of the imported report must be unique.
     * @param {module:model/ImportRequestDTO} importRequestDTO Imported reports definition from XML.
     * @param {module:api/ReportsApi~importFromXMLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportResultDTO}
     */
    importFromXML(importRequestDTO, callback) {
      let postBody = importRequestDTO;
      // verify the required parameter 'importRequestDTO' is set
      if (importRequestDTO === undefined || importRequestDTO === null) {
        throw new Error("Missing the required parameter 'importRequestDTO' when calling importFromXML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ImportResultDTO;
      return this.apiClient.callApi(
        '/reports/import/xml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPreferred operation.
     * @callback module:api/ReportsApi~setPreferredCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks report as preferred or not.
     * Marks report as preferred or not.
     * @param {Number} reportId report's internal identifier
     * @param {module:model/PreferredRequestDTO} preferredRequestDTO Marked report as preferred or not.
     * @param {module:api/ReportsApi~setPreferredCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setPreferred(reportId, preferredRequestDTO, callback) {
      let postBody = preferredRequestDTO;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling setPreferred");
      }
      // verify the required parameter 'preferredRequestDTO' is set
      if (preferredRequestDTO === undefined || preferredRequestDTO === null) {
        throw new Error("Missing the required parameter 'preferredRequestDTO' when calling setPreferred");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reports/{reportId}/preferred', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
