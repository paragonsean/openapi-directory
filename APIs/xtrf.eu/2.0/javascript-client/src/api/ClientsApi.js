/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessTokenDTO from '../model/AccessTokenDTO';
import AccessTokenRequestDTO from '../model/AccessTokenRequestDTO';
import AddressDTO from '../model/AddressDTO';
import ContactDTO from '../model/ContactDTO';
import CustomFieldDTO from '../model/CustomFieldDTO';
import CustomerDTO from '../model/CustomerDTO';
import CustomerPersonDTO from '../model/CustomerPersonDTO';
import EntityWithNameDTO from '../model/EntityWithNameDTO';
import PersonContactDTO from '../model/PersonContactDTO';

/**
* Clients service.
* @module api/ClientsApi
* @version 2.0
*/
export default class ClientsApi {

    /**
    * Constructs a new ClientsApi. 
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the create2 operation.
     * @callback module:api/ClientsApi~create2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPersonDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new person.
     * Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here.
     * @param {module:model/CustomerPersonDTO} customerPersonDTO Brand new person.
     * @param {module:api/ClientsApi~create2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPersonDTO}
     */
    create2(customerPersonDTO, callback) {
      let postBody = customerPersonDTO;
      // verify the required parameter 'customerPersonDTO' is set
      if (customerPersonDTO === undefined || customerPersonDTO === null) {
        throw new Error("Missing the required parameter 'customerPersonDTO' when calling create2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerPersonDTO;
      return this.apiClient.callApi(
        '/customers/persons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create3 operation.
     * @callback module:api/ClientsApi~create3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new client.
     * Creates a new client. All available fields are presented in PUT request.<p>   Required fields:   <ul>     <li>name</li>     <li>fullName</li>     <li>contact -> emails -> primary</li>   </ul> </p> 
     * @param {module:model/CustomerDTO} customerDTO Created user object
     * @param {module:api/ClientsApi~create3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDTO}
     */
    create3(customerDTO, callback) {
      let postBody = customerDTO;
      // verify the required parameter 'customerDTO' is set
      if (customerDTO === undefined || customerDTO === null) {
        throw new Error("Missing the required parameter 'customerDTO' when calling create3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerDTO;
      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete3 operation.
     * @callback module:api/ClientsApi~delete3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a person.
     * Removes a person.
     * @param {Number} personId person's internal identifier
     * @param {module:api/ClientsApi~delete3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete3(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling delete3");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customers/persons/{personId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete4 operation.
     * @callback module:api/ClientsApi~delete4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a customer price list.
     * Removes a customer price list.
     * @param {Number} priceListId customer price list's internal identifier
     * @param {module:api/ClientsApi~delete4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete4(priceListId, callback) {
      let postBody = null;
      // verify the required parameter 'priceListId' is set
      if (priceListId === undefined || priceListId === null) {
        throw new Error("Missing the required parameter 'priceListId' when calling delete4");
      }

      let pathParams = {
        'priceListId': priceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customers/priceLists/{priceListId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete5 operation.
     * @callback module:api/ClientsApi~delete5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a client.
     * Removes a client.
     * @param {Number} customerId client's internal identifier
     * @param {module:api/ClientsApi~delete5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete5(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling delete5");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customers/{customerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateSingleUseSignInToken operation.
     * @callback module:api/ClientsApi~generateSingleUseSignInTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessTokenDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a single use sign-in token.
     * Generates a single use sign-in token for the customer person found for given login or e-mail. Returns 'url' and 'token' which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post 'token' provided as the 'accessToken' form param to the 'url' using POST method.Detailed description is available in the Customer API <a href=\"/api-doc/customer-api/authentication\">authentication</a>.
     * @param {module:model/AccessTokenRequestDTO} accessTokenRequestDTO Generated sign-in token.
     * @param {module:api/ClientsApi~generateSingleUseSignInTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessTokenDTO}
     */
    generateSingleUseSignInToken(accessTokenRequestDTO, callback) {
      let postBody = accessTokenRequestDTO;
      // verify the required parameter 'accessTokenRequestDTO' is set
      if (accessTokenRequestDTO === undefined || accessTokenRequestDTO === null) {
        throw new Error("Missing the required parameter 'accessTokenRequestDTO' when calling generateSingleUseSignInToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = AccessTokenDTO;
      return this.apiClient.callApi(
        '/customers/persons/accessToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddress operation.
     * @callback module:api/ClientsApi~getAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address of a given client.
     * Returns address of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:api/ClientsApi~getAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressDTO}
     */
    getAddress(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getAddress");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = AddressDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds1 operation.
     * @callback module:api/ClientsApi~getAllIds1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns persons' internal identifiers.
     * Returns persons' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only persons modified since this timestamp
     * @param {module:api/ClientsApi~getAllIds1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/customers/persons/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds2 operation.
     * @callback module:api/ClientsApi~getAllIds2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns clients' internal identifiers.
     * Returns clients' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only clients modified since this timestamp
     * @param {String} [nameEquals] exact name of client
     * @param {String} [emailEquals] exact email of client
     * @param {module:api/ClientsApi~getAllIds2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince'],
        'nameEquals': opts['nameEquals'],
        'emailEquals': opts['emailEquals']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/customers/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllNamesWithIds operation.
     * @callback module:api/ClientsApi~getAllNamesWithIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityWithNameDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of simple clients representations
     * Returns list of simple clients representations
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only clients modified since this timestamp
     * @param {module:api/ClientsApi~getAllNamesWithIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityWithNameDTO>}
     */
    getAllNamesWithIds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [EntityWithNameDTO];
      return this.apiClient.callApi(
        '/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById1 operation.
     * @callback module:api/ClientsApi~getById1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPersonDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns person details.
     * Returns person details.
     * @param {Number} personId person's internal identifier
     * @param {module:api/ClientsApi~getById1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPersonDTO}
     */
    getById1(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getById1");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerPersonDTO;
      return this.apiClient.callApi(
        '/customers/persons/{personId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById2 operation.
     * @callback module:api/ClientsApi~getById2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns client details.
     * Returns client details.
     * @param {Number} customerId client's internal identifier
     * @param {Object} opts Optional parameters
     * @param {String} [embed] list of additional fields which should be embedded in the response (available options: persons)
     * @param {module:api/ClientsApi~getById2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDTO}
     */
    getById2(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getById2");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        'embed': opts['embed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategories operation.
     * @callback module:api/ClientsApi~getCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns categories of a given client.
     * Returns categories of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:api/ClientsApi~getCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getCategories(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCategories");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/customers/{customerId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact operation.
     * @callback module:api/ClientsApi~getContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonContactDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contact of a given person.
     * Returns contact of a given person.
     * @param {Number} personId person's internal identifier
     * @param {module:api/ClientsApi~getContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonContactDTO}
     */
    getContact(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getContact");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = PersonContactDTO;
      return this.apiClient.callApi(
        '/customers/persons/{personId}/contact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact1 operation.
     * @callback module:api/ClientsApi~getContact1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contact of a given client.
     * Returns contact of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:api/ClientsApi~getContact1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactDTO}
     */
    getContact1(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getContact1");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ContactDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/contact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorrespondenceAddress operation.
     * @callback module:api/ClientsApi~getCorrespondenceAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns correspondence address of a given client.
     * Returns correspondence address of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:api/ClientsApi~getCorrespondenceAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressDTO}
     */
    getCorrespondenceAddress(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCorrespondenceAddress");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = AddressDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/correspondenceAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomField operation.
     * @callback module:api/ClientsApi~getCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom field of a given client.
     * Returns custom field of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {String} customFieldKey custom field's key
     * @param {module:api/ClientsApi~getCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFieldDTO}
     */
    getCustomField(customerId, customFieldKey, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomField");
      }
      // verify the required parameter 'customFieldKey' is set
      if (customFieldKey === undefined || customFieldKey === null) {
        throw new Error("Missing the required parameter 'customFieldKey' when calling getCustomField");
      }

      let pathParams = {
        'customerId': customerId,
        'customFieldKey': customFieldKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomFieldDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/customFields/{customFieldKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields operation.
     * @callback module:api/ClientsApi~getCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given person.
     * Returns custom fields of a given person.
     * @param {Number} personId person's internal identifier
     * @param {module:api/ClientsApi~getCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getCustomFields");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/customers/persons/{personId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields1 operation.
     * @callback module:api/ClientsApi~getCustomFields1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given client.
     * Returns custom fields of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:api/ClientsApi~getCustomFields1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields1(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomFields1");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/customers/{customerId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndustries operation.
     * @callback module:api/ClientsApi~getIndustriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns industries of a given client.
     * Returns industries of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:api/ClientsApi~getIndustriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getIndustries(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getIndustries");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/customers/{customerId}/industries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update1 operation.
     * @callback module:api/ClientsApi~update1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerPersonDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing person.
     * Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them.
     * @param {Number} personId person's internal identifier
     * @param {module:model/CustomerPersonDTO} customerPersonDTO Updated existing person.
     * @param {module:api/ClientsApi~update1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerPersonDTO}
     */
    update1(personId, customerPersonDTO, callback) {
      let postBody = customerPersonDTO;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling update1");
      }
      // verify the required parameter 'customerPersonDTO' is set
      if (customerPersonDTO === undefined || customerPersonDTO === null) {
        throw new Error("Missing the required parameter 'customerPersonDTO' when calling update1");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerPersonDTO;
      return this.apiClient.callApi(
        '/customers/persons/{personId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update2 operation.
     * @callback module:api/ClientsApi~update2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing client.
     * Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them.
     * @param {Number} customerId client's internal identifier
     * @param {module:model/CustomerDTO} customerDTO Updated client
     * @param {module:api/ClientsApi~update2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDTO}
     */
    update2(customerId, customerDTO, callback) {
      let postBody = customerDTO;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling update2");
      }
      // verify the required parameter 'customerDTO' is set
      if (customerDTO === undefined || customerDTO === null) {
        throw new Error("Missing the required parameter 'customerDTO' when calling update2");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomerDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAddress operation.
     * @callback module:api/ClientsApi~updateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates address of a given client.
     * Updates address of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:model/AddressDTO} addressDTO Updated address of a given client.
     * @param {module:api/ClientsApi~updateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressDTO}
     */
    updateAddress(customerId, addressDTO, callback) {
      let postBody = addressDTO;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateAddress");
      }
      // verify the required parameter 'addressDTO' is set
      if (addressDTO === undefined || addressDTO === null) {
        throw new Error("Missing the required parameter 'addressDTO' when calling updateAddress");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = AddressDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategories operation.
     * @callback module:api/ClientsApi~updateCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates categories of a given client.
     * Updates categories of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {Number} requestBody Updated categories of a given client.
     * @param {module:api/ClientsApi~updateCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    updateCategories(customerId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCategories");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateCategories");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/customers/{customerId}/categories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/ClientsApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonContactDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates contact of a given person.
     * Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer).
     * @param {Number} personId person's internal identifier
     * @param {module:model/PersonContactDTO} personContactDTO Updated contact of a given person.
     * @param {module:api/ClientsApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonContactDTO}
     */
    updateContact(personId, personContactDTO, callback) {
      let postBody = personContactDTO;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling updateContact");
      }
      // verify the required parameter 'personContactDTO' is set
      if (personContactDTO === undefined || personContactDTO === null) {
        throw new Error("Missing the required parameter 'personContactDTO' when calling updateContact");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = PersonContactDTO;
      return this.apiClient.callApi(
        '/customers/persons/{personId}/contact', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact1 operation.
     * @callback module:api/ClientsApi~updateContact1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates contact of a given client.
     * Updates contact of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:model/ContactDTO} contactDTO Updated contact of a given client.
     * @param {module:api/ClientsApi~updateContact1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactDTO}
     */
    updateContact1(customerId, contactDTO, callback) {
      let postBody = contactDTO;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateContact1");
      }
      // verify the required parameter 'contactDTO' is set
      if (contactDTO === undefined || contactDTO === null) {
        throw new Error("Missing the required parameter 'contactDTO' when calling updateContact1");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ContactDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/contact', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCorrespondenceAddress operation.
     * @callback module:api/ClientsApi~updateCorrespondenceAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates correspondence address of a given client.
     * Updates correspondence address of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:model/AddressDTO} addressDTO Updated address of a given client.
     * @param {module:api/ClientsApi~updateCorrespondenceAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressDTO}
     */
    updateCorrespondenceAddress(customerId, addressDTO, callback) {
      let postBody = addressDTO;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCorrespondenceAddress");
      }
      // verify the required parameter 'addressDTO' is set
      if (addressDTO === undefined || addressDTO === null) {
        throw new Error("Missing the required parameter 'addressDTO' when calling updateCorrespondenceAddress");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = AddressDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/correspondenceAddress', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomField operation.
     * @callback module:api/ClientsApi~updateCustomFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomFieldDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates given custom field of a given client.
     * Updates given custom field of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {String} customFieldKey custom field's key
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom field of a given client.
     * @param {module:api/ClientsApi~updateCustomFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomFieldDTO}
     */
    updateCustomField(customerId, customFieldKey, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomField");
      }
      // verify the required parameter 'customFieldKey' is set
      if (customFieldKey === undefined || customFieldKey === null) {
        throw new Error("Missing the required parameter 'customFieldKey' when calling updateCustomField");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomField");
      }

      let pathParams = {
        'customerId': customerId,
        'customFieldKey': customFieldKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CustomFieldDTO;
      return this.apiClient.callApi(
        '/customers/{customerId}/customFields/{customFieldKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFields operation.
     * @callback module:api/ClientsApi~updateCustomFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom fields of a given person.
     * Updates custom fields of a given person.
     * @param {Number} personId person's internal identifier
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom fields of a given person.
     * @param {module:api/ClientsApi~updateCustomFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    updateCustomFields(personId, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling updateCustomFields");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomFields");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/customers/persons/{personId}/customFields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomFields1 operation.
     * @callback module:api/ClientsApi~updateCustomFields1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom fields of a given client.
     * Updates custom fields of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {module:model/CustomFieldDTO} customFieldDTO Updated custom fields of a given client.
     * @param {module:api/ClientsApi~updateCustomFields1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    updateCustomFields1(customerId, customFieldDTO, callback) {
      let postBody = customFieldDTO;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomFields1");
      }
      // verify the required parameter 'customFieldDTO' is set
      if (customFieldDTO === undefined || customFieldDTO === null) {
        throw new Error("Missing the required parameter 'customFieldDTO' when calling updateCustomFields1");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/customers/{customerId}/customFields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIndustries operation.
     * @callback module:api/ClientsApi~updateIndustriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates industries of a given client.
     * Updates industries of a given client.
     * @param {Number} customerId client's internal identifier
     * @param {Number} requestBody Updated industries of a given client.
     * @param {module:api/ClientsApi~updateIndustriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    updateIndustries(customerId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateIndustries");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateIndustries");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/customers/{customerId}/industries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
