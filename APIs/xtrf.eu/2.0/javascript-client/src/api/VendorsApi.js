/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressDTO from '../model/AddressDTO';
import CompetenciesDTO from '../model/CompetenciesDTO';
import ContactDTO from '../model/ContactDTO';
import CustomFieldDTO from '../model/CustomFieldDTO';
import InvitationStatisticsDTO from '../model/InvitationStatisticsDTO';
import PersonContactDTO from '../model/PersonContactDTO';
import ProviderDTO from '../model/ProviderDTO';
import ProviderPersonDTO from '../model/ProviderPersonDTO';

/**
* Vendors service.
* @module api/VendorsApi
* @version 2.0
*/
export default class VendorsApi {

    /**
    * Constructs a new VendorsApi. 
    * @alias module:api/VendorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the delete10 operation.
     * @callback module:api/VendorsApi~delete10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a provider.
     * Removes a provider.
     * @param {Number} providerId provider's internal identifier
     * @param {module:api/VendorsApi~delete10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete10(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling delete10");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/{providerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete8 operation.
     * @callback module:api/VendorsApi~delete8Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a person.
     * Removes a person.
     * @param {Number} personId person's internal identifier
     * @param {module:api/VendorsApi~delete8Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete8(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling delete8");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/persons/{personId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete9 operation.
     * @callback module:api/VendorsApi~delete9Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a provider price list.
     * Removes a provider price list.
     * @param {Number} priceListId provider price list's internal identifier
     * @param {module:api/VendorsApi~delete9Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete9(priceListId, callback) {
      let postBody = null;
      // verify the required parameter 'priceListId' is set
      if (priceListId === undefined || priceListId === null) {
        throw new Error("Missing the required parameter 'priceListId' when calling delete9");
      }

      let pathParams = {
        'priceListId': priceListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/priceLists/{priceListId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAddress1 operation.
     * @callback module:api/VendorsApi~getAddress1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns address of a given provider.
     * Returns address of a given provider.
     * @param {Number} providerId provider's internal identifier
     * @param {module:api/VendorsApi~getAddress1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressDTO}
     */
    getAddress1(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getAddress1");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = AddressDTO;
      return this.apiClient.callApi(
        '/providers/{providerId}/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds4 operation.
     * @callback module:api/VendorsApi~getAllIds4Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns persons' internal identifiers.
     * Returns persons' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only persons modified since this timestamp
     * @param {module:api/VendorsApi~getAllIds4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds4(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/providers/persons/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds5 operation.
     * @callback module:api/VendorsApi~getAllIds5Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns providers' internal identifiers.
     * Returns providers' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only providers modified since this timestamp
     * @param {module:api/VendorsApi~getAllIds5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds5(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/providers/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById4 operation.
     * @callback module:api/VendorsApi~getById4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderPersonDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns person details.
     * Returns person details.
     * @param {Number} personId person's internal identifier
     * @param {module:api/VendorsApi~getById4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderPersonDTO}
     */
    getById4(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getById4");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProviderPersonDTO;
      return this.apiClient.callApi(
        '/providers/persons/{personId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById5 operation.
     * @callback module:api/VendorsApi~getById5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns provider details.
     * Returns provider details.
     * @param {Number} providerId provider's internal identifier
     * @param {Object} opts Optional parameters
     * @param {String} [embed] list of adittional fields which should be embedded in the response (ie. persons)
     * @param {module:api/VendorsApi~getById5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderDTO}
     */
    getById5(providerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getById5");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
        'embed': opts['embed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProviderDTO;
      return this.apiClient.callApi(
        '/providers/{providerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetencies operation.
     * @callback module:api/VendorsApi~getCompetenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetenciesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns competencies of a given provider.
     * Returns competencies of a given provider.
     * @param {Number} providerId provider's internal identifier
     * @param {module:api/VendorsApi~getCompetenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetenciesDTO}
     */
    getCompetencies(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getCompetencies");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = CompetenciesDTO;
      return this.apiClient.callApi(
        '/providers/{providerId}/competencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact2 operation.
     * @callback module:api/VendorsApi~getContact2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonContactDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contact of a given person.
     * Returns contact of a given person.
     * @param {Number} personId person's internal identifier
     * @param {module:api/VendorsApi~getContact2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonContactDTO}
     */
    getContact2(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getContact2");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = PersonContactDTO;
      return this.apiClient.callApi(
        '/providers/persons/{personId}/contact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact3 operation.
     * @callback module:api/VendorsApi~getContact3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns contact of a given provider.
     * Returns contact of a given provider.
     * @param {Number} providerId provider's internal identifier
     * @param {module:api/VendorsApi~getContact3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactDTO}
     */
    getContact3(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getContact3");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ContactDTO;
      return this.apiClient.callApi(
        '/providers/{providerId}/contact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorrespondenceAddress1 operation.
     * @callback module:api/VendorsApi~getCorrespondenceAddress1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns correspondence address of a given provider.
     * Returns correspondence address of a given provider.
     * @param {Number} providerId provider's internal identifier
     * @param {module:api/VendorsApi~getCorrespondenceAddress1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressDTO}
     */
    getCorrespondenceAddress1(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getCorrespondenceAddress1");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = AddressDTO;
      return this.apiClient.callApi(
        '/providers/{providerId}/correspondenceAddress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields2 operation.
     * @callback module:api/VendorsApi~getCustomFields2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given person.
     * Returns custom fields of a given person.
     * @param {Number} personId person's internal identifier
     * @param {module:api/VendorsApi~getCustomFields2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields2(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getCustomFields2");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/providers/persons/{personId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomFields3 operation.
     * @callback module:api/VendorsApi~getCustomFields3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomFieldDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom fields of a given provider.
     * Returns custom fields of a given provider.
     * @param {Number} providerId provider's internal identifier
     * @param {module:api/VendorsApi~getCustomFields3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomFieldDTO>}
     */
    getCustomFields3(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getCustomFields3");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [CustomFieldDTO];
      return this.apiClient.callApi(
        '/providers/{providerId}/customFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendInvitations operation.
     * @callback module:api/VendorsApi~sendInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvitationStatisticsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends invitation to Vendor Portal.
     * Sends invitation to Vendor Portal.
     * @param {Number} personId person's internal identifier
     * @param {module:api/VendorsApi~sendInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvitationStatisticsDTO}
     */
    sendInvitations(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling sendInvitations");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InvitationStatisticsDTO;
      return this.apiClient.callApi(
        '/providers/persons/{personId}/notification/invitation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendInvitations1 operation.
     * @callback module:api/VendorsApi~sendInvitations1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InvitationStatisticsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends invitations to Vendor Portal.
     * Sends invitations to Vendor Portal.
     * @param {Number} providerId provider's internal identifier
     * @param {module:api/VendorsApi~sendInvitations1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvitationStatisticsDTO}
     */
    sendInvitations1(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling sendInvitations1");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = InvitationStatisticsDTO;
      return this.apiClient.callApi(
        '/providers/{providerId}/notification/invitation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
