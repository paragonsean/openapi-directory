/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaymentDTO from '../model/PaymentDTO';
import ProviderInvoiceCreateDTO from '../model/ProviderInvoiceCreateDTO';
import ProviderInvoiceCreateResultDTO from '../model/ProviderInvoiceCreateResultDTO';
import ProviderInvoiceDTO from '../model/ProviderInvoiceDTO';
import StatusRequestDTO from '../model/StatusRequestDTO';
import UrlResultDTO from '../model/UrlResultDTO';

/**
* VendorInvoices service.
* @module api/VendorInvoicesApi
* @version 2.0
*/
export default class VendorInvoicesApi {

    /**
    * Constructs a new VendorInvoicesApi. 
    * @alias module:api/VendorInvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the create4 operation.
     * @callback module:api/VendorInvoicesApi~create4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderInvoiceCreateResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new invoice.
     * Creates a new invoice from jobs. Jobs are grouped by provider and currency, therefore multiple invoices can be created.If any of the jobs cannot be invoiced (ie. it is already invoiced) then an error is reported.
     * @param {module:model/ProviderInvoiceCreateDTO} providerInvoiceCreateDTO Created new invoice.
     * @param {module:api/VendorInvoicesApi~create4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderInvoiceCreateResultDTO}
     */
    create4(providerInvoiceCreateDTO, callback) {
      let postBody = providerInvoiceCreateDTO;
      // verify the required parameter 'providerInvoiceCreateDTO' is set
      if (providerInvoiceCreateDTO === undefined || providerInvoiceCreateDTO === null) {
        throw new Error("Missing the required parameter 'providerInvoiceCreateDTO' when calling create4");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProviderInvoiceCreateResultDTO;
      return this.apiClient.callApi(
        '/accounting/providers/invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayment1 operation.
     * @callback module:api/VendorInvoicesApi~createPayment1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new payment on the vendor account and assigns the payment to the invoice.
     * Creates a new payment on the vendor account and assigns the payment to the invoice.
     * @param {Number} invoiceId vendor invoice's internal identifier
     * @param {module:model/PaymentDTO} paymentDTO New payment.
     * @param {module:api/VendorInvoicesApi~createPayment1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    createPayment1(invoiceId, paymentDTO, callback) {
      let postBody = paymentDTO;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling createPayment1");
      }
      // verify the required parameter 'paymentDTO' is set
      if (paymentDTO === undefined || paymentDTO === null) {
        throw new Error("Missing the required parameter 'paymentDTO' when calling createPayment1");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/providers/invoices/{invoiceId}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete6 operation.
     * @callback module:api/VendorInvoicesApi~delete6Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a provider invoice.
     * Removes a provider invoice.
     * @param {Number} invoiceId provider invoice's internal identifier
     * @param {module:api/VendorInvoicesApi~delete6Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete6(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling delete6");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/providers/invoices/{invoiceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delete7 operation.
     * @callback module:api/VendorInvoicesApi~delete7Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a provider payment.
     * Removes a provider payment.
     * @param {Number} paymentId provider payment's internal identifier
     * @param {module:api/VendorInvoicesApi~delete7Callback} callback The callback function, accepting three arguments: error, data, response
     */
    delete7(paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling delete7");
      }

      let pathParams = {
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/providers/payments/{paymentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAll2 operation.
     * @callback module:api/VendorInvoicesApi~getAll2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProviderInvoiceDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * Lists all vendor invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only vendor invoices modified since this timestamp
     * @param {module:api/VendorInvoicesApi~getAll2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProviderInvoiceDTO>}
     */
    getAll2(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [ProviderInvoiceDTO];
      return this.apiClient.callApi(
        '/accounting/providers/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIds3 operation.
     * @callback module:api/VendorInvoicesApi~getAllIds3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns vendor invoices' internal identifiers.
     * Returns vendor invoices' internal identifiers.
     * @param {Object} opts Optional parameters
     * @param {Number} [updatedSince] only vendor invoices modified since this timestamp
     * @param {module:api/VendorInvoicesApi~getAllIds3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    getAllIds3(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'updatedSince': opts['updatedSince']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/accounting/providers/invoices/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById3 operation.
     * @callback module:api/VendorInvoicesApi~getById3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderInvoiceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns provider invoice details.
     * Returns provider invoice details.
     * @param {Number} invoiceId provider invoice's internal identifier
     * @param {module:api/VendorInvoicesApi~getById3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderInvoiceDTO}
     */
    getById3(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getById3");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = ProviderInvoiceDTO;
      return this.apiClient.callApi(
        '/accounting/providers/invoices/{invoiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument1 operation.
     * @callback module:api/VendorInvoicesApi~getDocument1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlResultDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates provider invoice document (PDF).
     * Generates provider invoice document (PDF).
     * @param {Number} invoiceId provider invoice's internal identifier
     * @param {module:api/VendorInvoicesApi~getDocument1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlResultDTO}
     */
    getDocument1(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getDocument1");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = UrlResultDTO;
      return this.apiClient.callApi(
        '/accounting/providers/invoices/{invoiceId}/document', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayments1 operation.
     * @callback module:api/VendorInvoicesApi~getPayments1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all payments for the vendor invoice.
     * Returns all payments for the vendor invoice.
     * @param {Number} invoiceId vendor invoice's internal identifier
     * @param {module:api/VendorInvoicesApi~getPayments1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentDTO>}
     */
    getPayments1(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getPayments1");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = [PaymentDTO];
      return this.apiClient.callApi(
        '/accounting/providers/invoices/{invoiceId}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the send operation.
     * @callback module:api/VendorInvoicesApi~sendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a provider invoice.
     * Sends a provider invoice.
     * @param {Number} invoiceId provider invoice's internal identifier
     * @param {module:api/VendorInvoicesApi~sendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    send(invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling send");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/providers/invoices/{invoiceId}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setStatus operation.
     * @callback module:api/VendorInvoicesApi~setStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes invoice status to given status.
     * Changes invoice status to given status.
     * @param {Number} invoiceId provider invoice's internal identifier
     * @param {module:model/StatusRequestDTO} statusRequestDTO Changed invoice status to given status.
     * @param {module:api/VendorInvoicesApi~setStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setStatus(invoiceId, statusRequestDTO, callback) {
      let postBody = statusRequestDTO;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling setStatus");
      }
      // verify the required parameter 'statusRequestDTO' is set
      if (statusRequestDTO === undefined || statusRequestDTO === null) {
        throw new Error("Missing the required parameter 'statusRequestDTO' when calling setStatus");
      }

      let pathParams = {
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounting/providers/invoices/{invoiceId}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
