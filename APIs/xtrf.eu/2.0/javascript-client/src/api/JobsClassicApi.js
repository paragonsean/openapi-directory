/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignVendorDTO from '../model/AssignVendorDTO';
import FileMetadataDTO from '../model/FileMetadataDTO';
import InstructionsDTO from '../model/InstructionsDTO';
import JobDatesDto from '../model/JobDatesDto';
import JobDto from '../model/JobDto';
import JobFilesDTO from '../model/JobFilesDTO';
import JobStatusDTO from '../model/JobStatusDTO';
import TaskFileDTO from '../model/TaskFileDTO';

/**
* JobsClassic service.
* @module api/JobsClassicApi
* @version 2.0
*/
export default class JobsClassicApi {

    /**
    * Constructs a new JobsClassicApi. 
    * @alias module:api/JobsClassicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignFileToJobOutput operation.
     * @callback module:api/JobsClassicApi~assignFileToJobOutputCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} jobId job's internal identifier
     * @param {module:model/TaskFileDTO} taskFileDTO Assigns file to job output files.
     * @param {module:api/JobsClassicApi~assignFileToJobOutputCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assignFileToJobOutput(jobId, taskFileDTO, callback) {
      let postBody = taskFileDTO;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling assignFileToJobOutput");
      }
      // verify the required parameter 'taskFileDTO' is set
      if (taskFileDTO === undefined || taskFileDTO === null) {
        throw new Error("Missing the required parameter 'taskFileDTO' when calling assignFileToJobOutput");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json;charset=UTF-8'];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/files/output', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignVendor operation.
     * @callback module:api/JobsClassicApi~assignVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns vendor to a job in a project.
     * Assigns vendor to a job in a project.
     * @param {String} jobId job's internal identifier
     * @param {module:model/AssignVendorDTO} assignVendorDTO Assigned vendor to a job in a project.
     * @param {module:api/JobsClassicApi~assignVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assignVendor(jobId, assignVendorDTO, callback) {
      let postBody = assignVendorDTO;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling assignVendor");
      }
      // verify the required parameter 'assignVendorDTO' is set
      if (assignVendorDTO === undefined || assignVendorDTO === null) {
        throw new Error("Missing the required parameter 'assignVendorDTO' when calling assignVendor");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/vendor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeStatus operation.
     * @callback module:api/JobsClassicApi~changeStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes job status if possible (400 Bad Request is returned otherwise).
     * Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:<ul><li>OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED</li><li>ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED</li><li>STARTED – available when the job has one of the following statuses: ACCEPTED, READY</li><li>READY – available when the job has one of the following statuses: STARTED</li><li>CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT</li><li>OFFERS_SENT – not available as a target status for this operation</li></ul>
     * @param {String} jobId job's internal identifier
     * @param {module:model/JobStatusDTO} jobStatusDTO Changed job status.
     * @param {module:api/JobsClassicApi~changeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeStatus(jobId, jobStatusDTO, callback) {
      let postBody = jobStatusDTO;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling changeStatus");
      }
      // verify the required parameter 'jobStatusDTO' is set
      if (jobStatusDTO === undefined || jobStatusDTO === null) {
        throw new Error("Missing the required parameter 'jobStatusDTO' when calling changeStatus");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobDetails operation.
     * @callback module:api/JobsClassicApi~getJobDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns job details by jobId.
     * Returns job details by jobId.
     * @param {String} jobId job's internal identifier
     * @param {module:api/JobsClassicApi~getJobDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDto}
     */
    getJobDetails(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobDetails");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = JobDto;
      return this.apiClient.callApi(
        '/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobFiles operation.
     * @callback module:api/JobsClassicApi~getJobFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobFilesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of input and output files of a job.
     * Returns list of input and output files of a job.
     * @param {String} jobId job's internal identifier
     * @param {module:api/JobsClassicApi~getJobFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobFilesDTO}
     */
    getJobFiles(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobFiles");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = JobFilesDTO;
      return this.apiClient.callApi(
        '/jobs/{jobId}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobFiles1 operation.
     * @callback module:api/JobsClassicApi~getJobFiles1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetadataDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns file metadata.
     * Returns file metadata.
     * @param {String} jobId job's internal identifier
     * @param {Number} fileId file's internal identifier
     * @param {module:api/JobsClassicApi~getJobFiles1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetadataDTO}
     */
    getJobFiles1(jobId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobFiles1");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getJobFiles1");
      }

      let pathParams = {
        'jobId': jobId,
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = [];
      let accepts = ['application/vnd.xtrf-v1+json;charset=UTF-8'];
      let returnType = FileMetadataDTO;
      return this.apiClient.callApi(
        '/jobs/{jobId}/files/{fileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDates operation.
     * @callback module:api/JobsClassicApi~updateDatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates dates of a given job.
     * Updates dates of a given job.
     * @param {String} jobId job's internal identifier
     * @param {module:model/JobDatesDto} jobDatesDto New job dates.
     * @param {module:api/JobsClassicApi~updateDatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDates(jobId, jobDatesDto, callback) {
      let postBody = jobDatesDto;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling updateDates");
      }
      // verify the required parameter 'jobDatesDto' is set
      if (jobDatesDto === undefined || jobDatesDto === null) {
        throw new Error("Missing the required parameter 'jobDatesDto' when calling updateDates");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/dates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstructions operation.
     * @callback module:api/JobsClassicApi~updateInstructionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates instructions for a job.
     * Updates instructions for a job.
     * @param {String} jobId job's internal identifier
     * @param {module:model/InstructionsDTO} instructionsDTO Updated instructions for a job.
     * @param {module:api/JobsClassicApi~updateInstructionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInstructions(jobId, instructionsDTO, callback) {
      let postBody = instructionsDTO;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling updateInstructions");
      }
      // verify the required parameter 'instructionsDTO' is set
      if (instructionsDTO === undefined || instructionsDTO === null) {
        throw new Error("Missing the required parameter 'instructionsDTO' when calling updateInstructions");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-AUTH-ACCESS-TOKEN'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/instructions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
