# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstructionsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, for_provider: str=None, from_customer: str=None, internal: str=None, notes: str=None, payment_note_for_customer: str=None, payment_note_for_vendor: str=None):
        """InstructionsDTO - a model defined in OpenAPI

        :param for_provider: The for_provider of this InstructionsDTO.
        :param from_customer: The from_customer of this InstructionsDTO.
        :param internal: The internal of this InstructionsDTO.
        :param notes: The notes of this InstructionsDTO.
        :param payment_note_for_customer: The payment_note_for_customer of this InstructionsDTO.
        :param payment_note_for_vendor: The payment_note_for_vendor of this InstructionsDTO.
        """
        self.openapi_types = {
            'for_provider': str,
            'from_customer': str,
            'internal': str,
            'notes': str,
            'payment_note_for_customer': str,
            'payment_note_for_vendor': str
        }

        self.attribute_map = {
            'for_provider': 'forProvider',
            'from_customer': 'fromCustomer',
            'internal': 'internal',
            'notes': 'notes',
            'payment_note_for_customer': 'paymentNoteForCustomer',
            'payment_note_for_vendor': 'paymentNoteForVendor'
        }

        self._for_provider = for_provider
        self._from_customer = from_customer
        self._internal = internal
        self._notes = notes
        self._payment_note_for_customer = payment_note_for_customer
        self._payment_note_for_vendor = payment_note_for_vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstructionsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstructionsDTO of this InstructionsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def for_provider(self):
        """Gets the for_provider of this InstructionsDTO.


        :return: The for_provider of this InstructionsDTO.
        :rtype: str
        """
        return self._for_provider

    @for_provider.setter
    def for_provider(self, for_provider):
        """Sets the for_provider of this InstructionsDTO.


        :param for_provider: The for_provider of this InstructionsDTO.
        :type for_provider: str
        """

        self._for_provider = for_provider

    @property
    def from_customer(self):
        """Gets the from_customer of this InstructionsDTO.


        :return: The from_customer of this InstructionsDTO.
        :rtype: str
        """
        return self._from_customer

    @from_customer.setter
    def from_customer(self, from_customer):
        """Sets the from_customer of this InstructionsDTO.


        :param from_customer: The from_customer of this InstructionsDTO.
        :type from_customer: str
        """

        self._from_customer = from_customer

    @property
    def internal(self):
        """Gets the internal of this InstructionsDTO.


        :return: The internal of this InstructionsDTO.
        :rtype: str
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this InstructionsDTO.


        :param internal: The internal of this InstructionsDTO.
        :type internal: str
        """

        self._internal = internal

    @property
    def notes(self):
        """Gets the notes of this InstructionsDTO.


        :return: The notes of this InstructionsDTO.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InstructionsDTO.


        :param notes: The notes of this InstructionsDTO.
        :type notes: str
        """

        self._notes = notes

    @property
    def payment_note_for_customer(self):
        """Gets the payment_note_for_customer of this InstructionsDTO.


        :return: The payment_note_for_customer of this InstructionsDTO.
        :rtype: str
        """
        return self._payment_note_for_customer

    @payment_note_for_customer.setter
    def payment_note_for_customer(self, payment_note_for_customer):
        """Sets the payment_note_for_customer of this InstructionsDTO.


        :param payment_note_for_customer: The payment_note_for_customer of this InstructionsDTO.
        :type payment_note_for_customer: str
        """

        self._payment_note_for_customer = payment_note_for_customer

    @property
    def payment_note_for_vendor(self):
        """Gets the payment_note_for_vendor of this InstructionsDTO.


        :return: The payment_note_for_vendor of this InstructionsDTO.
        :rtype: str
        """
        return self._payment_note_for_vendor

    @payment_note_for_vendor.setter
    def payment_note_for_vendor(self, payment_note_for_vendor):
        """Sets the payment_note_for_vendor of this InstructionsDTO.


        :param payment_note_for_vendor: The payment_note_for_vendor of this InstructionsDTO.
        :type payment_note_for_vendor: str
        """

        self._payment_note_for_vendor = payment_note_for_vendor
