# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embed: str=None, event: str=None, filter: str=None, url: str=None):
        """SubscriptionDTO - a model defined in OpenAPI

        :param embed: The embed of this SubscriptionDTO.
        :param event: The event of this SubscriptionDTO.
        :param filter: The filter of this SubscriptionDTO.
        :param url: The url of this SubscriptionDTO.
        """
        self.openapi_types = {
            'embed': str,
            'event': str,
            'filter': str,
            'url': str
        }

        self.attribute_map = {
            'embed': 'embed',
            'event': 'event',
            'filter': 'filter',
            'url': 'url'
        }

        self._embed = embed
        self._event = event
        self._filter = filter
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionDTO of this SubscriptionDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embed(self):
        """Gets the embed of this SubscriptionDTO.

        additional fields which should be embedded in the event

        :return: The embed of this SubscriptionDTO.
        :rtype: str
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this SubscriptionDTO.

        additional fields which should be embedded in the event

        :param embed: The embed of this SubscriptionDTO.
        :type embed: str
        """

        self._embed = embed

    @property
    def event(self):
        """Gets the event of this SubscriptionDTO.

        event to which you want to subscribe

        :return: The event of this SubscriptionDTO.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this SubscriptionDTO.

        event to which you want to subscribe

        :param event: The event of this SubscriptionDTO.
        :type event: str
        """

        self._event = event

    @property
    def filter(self):
        """Gets the filter of this SubscriptionDTO.

        filter expression in the form 'attribute=value'

        :return: The filter of this SubscriptionDTO.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SubscriptionDTO.

        filter expression in the form 'attribute=value'

        :param filter: The filter of this SubscriptionDTO.
        :type filter: str
        """

        self._filter = filter

    @property
    def url(self):
        """Gets the url of this SubscriptionDTO.

        url that will be invoked by XTRF on event

        :return: The url of this SubscriptionDTO.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SubscriptionDTO.

        url that will be invoked by XTRF on event

        :param url: The url of this SubscriptionDTO.
        :type url: str
        """

        self._url = url
