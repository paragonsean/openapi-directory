# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobCommunicationDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instructions_for_all_jobs: str=None, instructions_for_job: str=None, note_from_vendor: str=None):
        """JobCommunicationDto - a model defined in OpenAPI

        :param instructions_for_all_jobs: The instructions_for_all_jobs of this JobCommunicationDto.
        :param instructions_for_job: The instructions_for_job of this JobCommunicationDto.
        :param note_from_vendor: The note_from_vendor of this JobCommunicationDto.
        """
        self.openapi_types = {
            'instructions_for_all_jobs': str,
            'instructions_for_job': str,
            'note_from_vendor': str
        }

        self.attribute_map = {
            'instructions_for_all_jobs': 'instructionsForAllJobs',
            'instructions_for_job': 'instructionsForJob',
            'note_from_vendor': 'noteFromVendor'
        }

        self._instructions_for_all_jobs = instructions_for_all_jobs
        self._instructions_for_job = instructions_for_job
        self._note_from_vendor = note_from_vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobCommunicationDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobCommunicationDto of this JobCommunicationDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instructions_for_all_jobs(self):
        """Gets the instructions_for_all_jobs of this JobCommunicationDto.


        :return: The instructions_for_all_jobs of this JobCommunicationDto.
        :rtype: str
        """
        return self._instructions_for_all_jobs

    @instructions_for_all_jobs.setter
    def instructions_for_all_jobs(self, instructions_for_all_jobs):
        """Sets the instructions_for_all_jobs of this JobCommunicationDto.


        :param instructions_for_all_jobs: The instructions_for_all_jobs of this JobCommunicationDto.
        :type instructions_for_all_jobs: str
        """

        self._instructions_for_all_jobs = instructions_for_all_jobs

    @property
    def instructions_for_job(self):
        """Gets the instructions_for_job of this JobCommunicationDto.


        :return: The instructions_for_job of this JobCommunicationDto.
        :rtype: str
        """
        return self._instructions_for_job

    @instructions_for_job.setter
    def instructions_for_job(self, instructions_for_job):
        """Sets the instructions_for_job of this JobCommunicationDto.


        :param instructions_for_job: The instructions_for_job of this JobCommunicationDto.
        :type instructions_for_job: str
        """

        self._instructions_for_job = instructions_for_job

    @property
    def note_from_vendor(self):
        """Gets the note_from_vendor of this JobCommunicationDto.


        :return: The note_from_vendor of this JobCommunicationDto.
        :rtype: str
        """
        return self._note_from_vendor

    @note_from_vendor.setter
    def note_from_vendor(self, note_from_vendor):
        """Sets the note_from_vendor of this JobCommunicationDto.


        :param note_from_vendor: The note_from_vendor of this JobCommunicationDto.
        :type note_from_vendor: str
        """

        self._note_from_vendor = note_from_vendor
