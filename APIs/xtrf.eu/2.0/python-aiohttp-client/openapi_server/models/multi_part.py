# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.body_part import BodyPart
from openapi_server.models.body_part_headers import BodyPartHeaders
from openapi_server.models.body_part_media_type import BodyPartMediaType
from openapi_server.models.body_part_parameterized_headers import BodyPartParameterizedHeaders
from openapi_server.models.content_disposition import ContentDisposition
from openapi_server import util


class MultiPart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_parts: List[BodyPart]=None, content_disposition: ContentDisposition=None, entity: object=None, headers: BodyPartHeaders=None, media_type: BodyPartMediaType=None, message_body_workers: object=None, parameterized_headers: BodyPartParameterizedHeaders=None, parent: MultiPart=None, providers: object=None):
        """MultiPart - a model defined in OpenAPI

        :param body_parts: The body_parts of this MultiPart.
        :param content_disposition: The content_disposition of this MultiPart.
        :param entity: The entity of this MultiPart.
        :param headers: The headers of this MultiPart.
        :param media_type: The media_type of this MultiPart.
        :param message_body_workers: The message_body_workers of this MultiPart.
        :param parameterized_headers: The parameterized_headers of this MultiPart.
        :param parent: The parent of this MultiPart.
        :param providers: The providers of this MultiPart.
        """
        self.openapi_types = {
            'body_parts': List[BodyPart],
            'content_disposition': ContentDisposition,
            'entity': object,
            'headers': BodyPartHeaders,
            'media_type': BodyPartMediaType,
            'message_body_workers': object,
            'parameterized_headers': BodyPartParameterizedHeaders,
            'parent': MultiPart,
            'providers': object
        }

        self.attribute_map = {
            'body_parts': 'bodyParts',
            'content_disposition': 'contentDisposition',
            'entity': 'entity',
            'headers': 'headers',
            'media_type': 'mediaType',
            'message_body_workers': 'messageBodyWorkers',
            'parameterized_headers': 'parameterizedHeaders',
            'parent': 'parent',
            'providers': 'providers'
        }

        self._body_parts = body_parts
        self._content_disposition = content_disposition
        self._entity = entity
        self._headers = headers
        self._media_type = media_type
        self._message_body_workers = message_body_workers
        self._parameterized_headers = parameterized_headers
        self._parent = parent
        self._providers = providers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiPart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiPart of this MultiPart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_parts(self):
        """Gets the body_parts of this MultiPart.


        :return: The body_parts of this MultiPart.
        :rtype: List[BodyPart]
        """
        return self._body_parts

    @body_parts.setter
    def body_parts(self, body_parts):
        """Sets the body_parts of this MultiPart.


        :param body_parts: The body_parts of this MultiPart.
        :type body_parts: List[BodyPart]
        """

        self._body_parts = body_parts

    @property
    def content_disposition(self):
        """Gets the content_disposition of this MultiPart.


        :return: The content_disposition of this MultiPart.
        :rtype: ContentDisposition
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """Sets the content_disposition of this MultiPart.


        :param content_disposition: The content_disposition of this MultiPart.
        :type content_disposition: ContentDisposition
        """

        self._content_disposition = content_disposition

    @property
    def entity(self):
        """Gets the entity of this MultiPart.


        :return: The entity of this MultiPart.
        :rtype: object
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this MultiPart.


        :param entity: The entity of this MultiPart.
        :type entity: object
        """

        self._entity = entity

    @property
    def headers(self):
        """Gets the headers of this MultiPart.


        :return: The headers of this MultiPart.
        :rtype: BodyPartHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this MultiPart.


        :param headers: The headers of this MultiPart.
        :type headers: BodyPartHeaders
        """

        self._headers = headers

    @property
    def media_type(self):
        """Gets the media_type of this MultiPart.


        :return: The media_type of this MultiPart.
        :rtype: BodyPartMediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this MultiPart.


        :param media_type: The media_type of this MultiPart.
        :type media_type: BodyPartMediaType
        """

        self._media_type = media_type

    @property
    def message_body_workers(self):
        """Gets the message_body_workers of this MultiPart.


        :return: The message_body_workers of this MultiPart.
        :rtype: object
        """
        return self._message_body_workers

    @message_body_workers.setter
    def message_body_workers(self, message_body_workers):
        """Sets the message_body_workers of this MultiPart.


        :param message_body_workers: The message_body_workers of this MultiPart.
        :type message_body_workers: object
        """

        self._message_body_workers = message_body_workers

    @property
    def parameterized_headers(self):
        """Gets the parameterized_headers of this MultiPart.


        :return: The parameterized_headers of this MultiPart.
        :rtype: BodyPartParameterizedHeaders
        """
        return self._parameterized_headers

    @parameterized_headers.setter
    def parameterized_headers(self, parameterized_headers):
        """Sets the parameterized_headers of this MultiPart.


        :param parameterized_headers: The parameterized_headers of this MultiPart.
        :type parameterized_headers: BodyPartParameterizedHeaders
        """

        self._parameterized_headers = parameterized_headers

    @property
    def parent(self):
        """Gets the parent of this MultiPart.


        :return: The parent of this MultiPart.
        :rtype: MultiPart
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this MultiPart.


        :param parent: The parent of this MultiPart.
        :type parent: MultiPart
        """

        self._parent = parent

    @property
    def providers(self):
        """Gets the providers of this MultiPart.


        :return: The providers of this MultiPart.
        :rtype: object
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this MultiPart.


        :param providers: The providers of this MultiPart.
        :type providers: object
        """

        self._providers = providers
