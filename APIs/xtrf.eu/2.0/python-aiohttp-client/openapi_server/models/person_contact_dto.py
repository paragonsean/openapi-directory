# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person_contact_emails_dto import PersonContactEmailsDTO
from openapi_server import util


class PersonContactDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emails: PersonContactEmailsDTO=None, fax: str=None, phones: List[str]=None, sms: str=None):
        """PersonContactDTO - a model defined in OpenAPI

        :param emails: The emails of this PersonContactDTO.
        :param fax: The fax of this PersonContactDTO.
        :param phones: The phones of this PersonContactDTO.
        :param sms: The sms of this PersonContactDTO.
        """
        self.openapi_types = {
            'emails': PersonContactEmailsDTO,
            'fax': str,
            'phones': List[str],
            'sms': str
        }

        self.attribute_map = {
            'emails': 'emails',
            'fax': 'fax',
            'phones': 'phones',
            'sms': 'sms'
        }

        self._emails = emails
        self._fax = fax
        self._phones = phones
        self._sms = sms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonContactDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonContactDTO of this PersonContactDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emails(self):
        """Gets the emails of this PersonContactDTO.


        :return: The emails of this PersonContactDTO.
        :rtype: PersonContactEmailsDTO
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this PersonContactDTO.


        :param emails: The emails of this PersonContactDTO.
        :type emails: PersonContactEmailsDTO
        """

        self._emails = emails

    @property
    def fax(self):
        """Gets the fax of this PersonContactDTO.

        fax number

        :return: The fax of this PersonContactDTO.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this PersonContactDTO.

        fax number

        :param fax: The fax of this PersonContactDTO.
        :type fax: str
        """

        self._fax = fax

    @property
    def phones(self):
        """Gets the phones of this PersonContactDTO.

        phones' numbers

        :return: The phones of this PersonContactDTO.
        :rtype: List[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this PersonContactDTO.

        phones' numbers

        :param phones: The phones of this PersonContactDTO.
        :type phones: List[str]
        """

        self._phones = phones

    @property
    def sms(self):
        """Gets the sms of this PersonContactDTO.

        mobile phone for which SMS notifications will be sent (if configured)

        :return: The sms of this PersonContactDTO.
        :rtype: str
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this PersonContactDTO.

        mobile phone for which SMS notifications will be sent (if configured)

        :param sms: The sms of this PersonContactDTO.
        :type sms: str
        """

        self._sms = sms
