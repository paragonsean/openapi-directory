# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_dto import AddressDTO
from openapi_server.models.contact_dto import ContactDTO
from openapi_server.models.custom_field_dto import CustomFieldDTO
from openapi_server.models.customer_accounting_dto import CustomerAccountingDTO
from openapi_server.models.customer_person_dto import CustomerPersonDTO
from openapi_server.models.customer_responsible_persons_dto import CustomerResponsiblePersonsDTO
from openapi_server import util


class CustomerDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_on_customer_server: str=None, accounting: CustomerAccountingDTO=None, billing_address: AddressDTO=None, branch_id: int=None, categories_ids: List[int]=None, client_first_project_date: datetime=None, client_first_quote_date: datetime=None, client_last_project_date: datetime=None, client_last_quote_date: datetime=None, client_number_of_projects: int=None, client_number_of_quotes: int=None, contact: ContactDTO=None, contract_number: str=None, correspondence_address: AddressDTO=None, custom_fields: List[CustomFieldDTO]=None, full_name: str=None, id: int=None, id_number: str=None, industries_ids: List[int]=None, lead_source_id: int=None, limit_access_to_people_responsible: bool=None, name: str=None, notes: str=None, persons: List[CustomerPersonDTO]=None, responsible_persons: CustomerResponsiblePersonsDTO=None, sales_notes: str=None, status: str=None):
        """CustomerDTO - a model defined in OpenAPI

        :param account_on_customer_server: The account_on_customer_server of this CustomerDTO.
        :param accounting: The accounting of this CustomerDTO.
        :param billing_address: The billing_address of this CustomerDTO.
        :param branch_id: The branch_id of this CustomerDTO.
        :param categories_ids: The categories_ids of this CustomerDTO.
        :param client_first_project_date: The client_first_project_date of this CustomerDTO.
        :param client_first_quote_date: The client_first_quote_date of this CustomerDTO.
        :param client_last_project_date: The client_last_project_date of this CustomerDTO.
        :param client_last_quote_date: The client_last_quote_date of this CustomerDTO.
        :param client_number_of_projects: The client_number_of_projects of this CustomerDTO.
        :param client_number_of_quotes: The client_number_of_quotes of this CustomerDTO.
        :param contact: The contact of this CustomerDTO.
        :param contract_number: The contract_number of this CustomerDTO.
        :param correspondence_address: The correspondence_address of this CustomerDTO.
        :param custom_fields: The custom_fields of this CustomerDTO.
        :param full_name: The full_name of this CustomerDTO.
        :param id: The id of this CustomerDTO.
        :param id_number: The id_number of this CustomerDTO.
        :param industries_ids: The industries_ids of this CustomerDTO.
        :param lead_source_id: The lead_source_id of this CustomerDTO.
        :param limit_access_to_people_responsible: The limit_access_to_people_responsible of this CustomerDTO.
        :param name: The name of this CustomerDTO.
        :param notes: The notes of this CustomerDTO.
        :param persons: The persons of this CustomerDTO.
        :param responsible_persons: The responsible_persons of this CustomerDTO.
        :param sales_notes: The sales_notes of this CustomerDTO.
        :param status: The status of this CustomerDTO.
        """
        self.openapi_types = {
            'account_on_customer_server': str,
            'accounting': CustomerAccountingDTO,
            'billing_address': AddressDTO,
            'branch_id': int,
            'categories_ids': List[int],
            'client_first_project_date': datetime,
            'client_first_quote_date': datetime,
            'client_last_project_date': datetime,
            'client_last_quote_date': datetime,
            'client_number_of_projects': int,
            'client_number_of_quotes': int,
            'contact': ContactDTO,
            'contract_number': str,
            'correspondence_address': AddressDTO,
            'custom_fields': List[CustomFieldDTO],
            'full_name': str,
            'id': int,
            'id_number': str,
            'industries_ids': List[int],
            'lead_source_id': int,
            'limit_access_to_people_responsible': bool,
            'name': str,
            'notes': str,
            'persons': List[CustomerPersonDTO],
            'responsible_persons': CustomerResponsiblePersonsDTO,
            'sales_notes': str,
            'status': str
        }

        self.attribute_map = {
            'account_on_customer_server': 'accountOnCustomerServer',
            'accounting': 'accounting',
            'billing_address': 'billingAddress',
            'branch_id': 'branchId',
            'categories_ids': 'categoriesIds',
            'client_first_project_date': 'clientFirstProjectDate',
            'client_first_quote_date': 'clientFirstQuoteDate',
            'client_last_project_date': 'clientLastProjectDate',
            'client_last_quote_date': 'clientLastQuoteDate',
            'client_number_of_projects': 'clientNumberOfProjects',
            'client_number_of_quotes': 'clientNumberOfQuotes',
            'contact': 'contact',
            'contract_number': 'contractNumber',
            'correspondence_address': 'correspondenceAddress',
            'custom_fields': 'customFields',
            'full_name': 'fullName',
            'id': 'id',
            'id_number': 'idNumber',
            'industries_ids': 'industriesIds',
            'lead_source_id': 'leadSourceId',
            'limit_access_to_people_responsible': 'limitAccessToPeopleResponsible',
            'name': 'name',
            'notes': 'notes',
            'persons': 'persons',
            'responsible_persons': 'responsiblePersons',
            'sales_notes': 'salesNotes',
            'status': 'status'
        }

        self._account_on_customer_server = account_on_customer_server
        self._accounting = accounting
        self._billing_address = billing_address
        self._branch_id = branch_id
        self._categories_ids = categories_ids
        self._client_first_project_date = client_first_project_date
        self._client_first_quote_date = client_first_quote_date
        self._client_last_project_date = client_last_project_date
        self._client_last_quote_date = client_last_quote_date
        self._client_number_of_projects = client_number_of_projects
        self._client_number_of_quotes = client_number_of_quotes
        self._contact = contact
        self._contract_number = contract_number
        self._correspondence_address = correspondence_address
        self._custom_fields = custom_fields
        self._full_name = full_name
        self._id = id
        self._id_number = id_number
        self._industries_ids = industries_ids
        self._lead_source_id = lead_source_id
        self._limit_access_to_people_responsible = limit_access_to_people_responsible
        self._name = name
        self._notes = notes
        self._persons = persons
        self._responsible_persons = responsible_persons
        self._sales_notes = sales_notes
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerDTO of this CustomerDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_on_customer_server(self):
        """Gets the account_on_customer_server of this CustomerDTO.


        :return: The account_on_customer_server of this CustomerDTO.
        :rtype: str
        """
        return self._account_on_customer_server

    @account_on_customer_server.setter
    def account_on_customer_server(self, account_on_customer_server):
        """Sets the account_on_customer_server of this CustomerDTO.


        :param account_on_customer_server: The account_on_customer_server of this CustomerDTO.
        :type account_on_customer_server: str
        """

        self._account_on_customer_server = account_on_customer_server

    @property
    def accounting(self):
        """Gets the accounting of this CustomerDTO.


        :return: The accounting of this CustomerDTO.
        :rtype: CustomerAccountingDTO
        """
        return self._accounting

    @accounting.setter
    def accounting(self, accounting):
        """Sets the accounting of this CustomerDTO.


        :param accounting: The accounting of this CustomerDTO.
        :type accounting: CustomerAccountingDTO
        """

        self._accounting = accounting

    @property
    def billing_address(self):
        """Gets the billing_address of this CustomerDTO.


        :return: The billing_address of this CustomerDTO.
        :rtype: AddressDTO
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CustomerDTO.


        :param billing_address: The billing_address of this CustomerDTO.
        :type billing_address: AddressDTO
        """

        self._billing_address = billing_address

    @property
    def branch_id(self):
        """Gets the branch_id of this CustomerDTO.


        :return: The branch_id of this CustomerDTO.
        :rtype: int
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this CustomerDTO.


        :param branch_id: The branch_id of this CustomerDTO.
        :type branch_id: int
        """

        self._branch_id = branch_id

    @property
    def categories_ids(self):
        """Gets the categories_ids of this CustomerDTO.


        :return: The categories_ids of this CustomerDTO.
        :rtype: List[int]
        """
        return self._categories_ids

    @categories_ids.setter
    def categories_ids(self, categories_ids):
        """Sets the categories_ids of this CustomerDTO.


        :param categories_ids: The categories_ids of this CustomerDTO.
        :type categories_ids: List[int]
        """

        self._categories_ids = categories_ids

    @property
    def client_first_project_date(self):
        """Gets the client_first_project_date of this CustomerDTO.


        :return: The client_first_project_date of this CustomerDTO.
        :rtype: datetime
        """
        return self._client_first_project_date

    @client_first_project_date.setter
    def client_first_project_date(self, client_first_project_date):
        """Sets the client_first_project_date of this CustomerDTO.


        :param client_first_project_date: The client_first_project_date of this CustomerDTO.
        :type client_first_project_date: datetime
        """

        self._client_first_project_date = client_first_project_date

    @property
    def client_first_quote_date(self):
        """Gets the client_first_quote_date of this CustomerDTO.


        :return: The client_first_quote_date of this CustomerDTO.
        :rtype: datetime
        """
        return self._client_first_quote_date

    @client_first_quote_date.setter
    def client_first_quote_date(self, client_first_quote_date):
        """Sets the client_first_quote_date of this CustomerDTO.


        :param client_first_quote_date: The client_first_quote_date of this CustomerDTO.
        :type client_first_quote_date: datetime
        """

        self._client_first_quote_date = client_first_quote_date

    @property
    def client_last_project_date(self):
        """Gets the client_last_project_date of this CustomerDTO.


        :return: The client_last_project_date of this CustomerDTO.
        :rtype: datetime
        """
        return self._client_last_project_date

    @client_last_project_date.setter
    def client_last_project_date(self, client_last_project_date):
        """Sets the client_last_project_date of this CustomerDTO.


        :param client_last_project_date: The client_last_project_date of this CustomerDTO.
        :type client_last_project_date: datetime
        """

        self._client_last_project_date = client_last_project_date

    @property
    def client_last_quote_date(self):
        """Gets the client_last_quote_date of this CustomerDTO.


        :return: The client_last_quote_date of this CustomerDTO.
        :rtype: datetime
        """
        return self._client_last_quote_date

    @client_last_quote_date.setter
    def client_last_quote_date(self, client_last_quote_date):
        """Sets the client_last_quote_date of this CustomerDTO.


        :param client_last_quote_date: The client_last_quote_date of this CustomerDTO.
        :type client_last_quote_date: datetime
        """

        self._client_last_quote_date = client_last_quote_date

    @property
    def client_number_of_projects(self):
        """Gets the client_number_of_projects of this CustomerDTO.


        :return: The client_number_of_projects of this CustomerDTO.
        :rtype: int
        """
        return self._client_number_of_projects

    @client_number_of_projects.setter
    def client_number_of_projects(self, client_number_of_projects):
        """Sets the client_number_of_projects of this CustomerDTO.


        :param client_number_of_projects: The client_number_of_projects of this CustomerDTO.
        :type client_number_of_projects: int
        """

        self._client_number_of_projects = client_number_of_projects

    @property
    def client_number_of_quotes(self):
        """Gets the client_number_of_quotes of this CustomerDTO.


        :return: The client_number_of_quotes of this CustomerDTO.
        :rtype: int
        """
        return self._client_number_of_quotes

    @client_number_of_quotes.setter
    def client_number_of_quotes(self, client_number_of_quotes):
        """Sets the client_number_of_quotes of this CustomerDTO.


        :param client_number_of_quotes: The client_number_of_quotes of this CustomerDTO.
        :type client_number_of_quotes: int
        """

        self._client_number_of_quotes = client_number_of_quotes

    @property
    def contact(self):
        """Gets the contact of this CustomerDTO.


        :return: The contact of this CustomerDTO.
        :rtype: ContactDTO
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CustomerDTO.


        :param contact: The contact of this CustomerDTO.
        :type contact: ContactDTO
        """

        self._contact = contact

    @property
    def contract_number(self):
        """Gets the contract_number of this CustomerDTO.


        :return: The contract_number of this CustomerDTO.
        :rtype: str
        """
        return self._contract_number

    @contract_number.setter
    def contract_number(self, contract_number):
        """Sets the contract_number of this CustomerDTO.


        :param contract_number: The contract_number of this CustomerDTO.
        :type contract_number: str
        """

        self._contract_number = contract_number

    @property
    def correspondence_address(self):
        """Gets the correspondence_address of this CustomerDTO.


        :return: The correspondence_address of this CustomerDTO.
        :rtype: AddressDTO
        """
        return self._correspondence_address

    @correspondence_address.setter
    def correspondence_address(self, correspondence_address):
        """Sets the correspondence_address of this CustomerDTO.


        :param correspondence_address: The correspondence_address of this CustomerDTO.
        :type correspondence_address: AddressDTO
        """

        self._correspondence_address = correspondence_address

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CustomerDTO.


        :return: The custom_fields of this CustomerDTO.
        :rtype: List[CustomFieldDTO]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CustomerDTO.


        :param custom_fields: The custom_fields of this CustomerDTO.
        :type custom_fields: List[CustomFieldDTO]
        """

        self._custom_fields = custom_fields

    @property
    def full_name(self):
        """Gets the full_name of this CustomerDTO.


        :return: The full_name of this CustomerDTO.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CustomerDTO.


        :param full_name: The full_name of this CustomerDTO.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this CustomerDTO.


        :return: The id of this CustomerDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerDTO.


        :param id: The id of this CustomerDTO.
        :type id: int
        """

        self._id = id

    @property
    def id_number(self):
        """Gets the id_number of this CustomerDTO.


        :return: The id_number of this CustomerDTO.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this CustomerDTO.


        :param id_number: The id_number of this CustomerDTO.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def industries_ids(self):
        """Gets the industries_ids of this CustomerDTO.


        :return: The industries_ids of this CustomerDTO.
        :rtype: List[int]
        """
        return self._industries_ids

    @industries_ids.setter
    def industries_ids(self, industries_ids):
        """Sets the industries_ids of this CustomerDTO.


        :param industries_ids: The industries_ids of this CustomerDTO.
        :type industries_ids: List[int]
        """

        self._industries_ids = industries_ids

    @property
    def lead_source_id(self):
        """Gets the lead_source_id of this CustomerDTO.


        :return: The lead_source_id of this CustomerDTO.
        :rtype: int
        """
        return self._lead_source_id

    @lead_source_id.setter
    def lead_source_id(self, lead_source_id):
        """Sets the lead_source_id of this CustomerDTO.


        :param lead_source_id: The lead_source_id of this CustomerDTO.
        :type lead_source_id: int
        """

        self._lead_source_id = lead_source_id

    @property
    def limit_access_to_people_responsible(self):
        """Gets the limit_access_to_people_responsible of this CustomerDTO.


        :return: The limit_access_to_people_responsible of this CustomerDTO.
        :rtype: bool
        """
        return self._limit_access_to_people_responsible

    @limit_access_to_people_responsible.setter
    def limit_access_to_people_responsible(self, limit_access_to_people_responsible):
        """Sets the limit_access_to_people_responsible of this CustomerDTO.


        :param limit_access_to_people_responsible: The limit_access_to_people_responsible of this CustomerDTO.
        :type limit_access_to_people_responsible: bool
        """

        self._limit_access_to_people_responsible = limit_access_to_people_responsible

    @property
    def name(self):
        """Gets the name of this CustomerDTO.


        :return: The name of this CustomerDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerDTO.


        :param name: The name of this CustomerDTO.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this CustomerDTO.


        :return: The notes of this CustomerDTO.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CustomerDTO.


        :param notes: The notes of this CustomerDTO.
        :type notes: str
        """

        self._notes = notes

    @property
    def persons(self):
        """Gets the persons of this CustomerDTO.


        :return: The persons of this CustomerDTO.
        :rtype: List[CustomerPersonDTO]
        """
        return self._persons

    @persons.setter
    def persons(self, persons):
        """Sets the persons of this CustomerDTO.


        :param persons: The persons of this CustomerDTO.
        :type persons: List[CustomerPersonDTO]
        """

        self._persons = persons

    @property
    def responsible_persons(self):
        """Gets the responsible_persons of this CustomerDTO.


        :return: The responsible_persons of this CustomerDTO.
        :rtype: CustomerResponsiblePersonsDTO
        """
        return self._responsible_persons

    @responsible_persons.setter
    def responsible_persons(self, responsible_persons):
        """Sets the responsible_persons of this CustomerDTO.


        :param responsible_persons: The responsible_persons of this CustomerDTO.
        :type responsible_persons: CustomerResponsiblePersonsDTO
        """

        self._responsible_persons = responsible_persons

    @property
    def sales_notes(self):
        """Gets the sales_notes of this CustomerDTO.


        :return: The sales_notes of this CustomerDTO.
        :rtype: str
        """
        return self._sales_notes

    @sales_notes.setter
    def sales_notes(self, sales_notes):
        """Sets the sales_notes of this CustomerDTO.


        :param sales_notes: The sales_notes of this CustomerDTO.
        :type sales_notes: str
        """

        self._sales_notes = sales_notes

    @property
    def status(self):
        """Gets the status of this CustomerDTO.


        :return: The status of this CustomerDTO.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerDTO.


        :param status: The status of this CustomerDTO.
        :type status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "POTENTIAL"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
