# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classic_people_dto import ClassicPeopleDTO
from openapi_server.models.instructions_dto import InstructionsDTO
from openapi_server.models.project_dates_dto import ProjectDatesDTO
from openapi_server.models.task_file_dto import TaskFileDTO
from openapi_server import util


class ClassicProjectCreateDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories_ids: List[int]=None, customer_id: int=None, dates: ProjectDatesDTO=None, input_files: List[TaskFileDTO]=None, instructions: InstructionsDTO=None, name: str=None, people: ClassicPeopleDTO=None, service_id: int=None, source_language_id: int=None, specialization_id: int=None, target_languages_ids: List[int]=None):
        """ClassicProjectCreateDTO - a model defined in OpenAPI

        :param categories_ids: The categories_ids of this ClassicProjectCreateDTO.
        :param customer_id: The customer_id of this ClassicProjectCreateDTO.
        :param dates: The dates of this ClassicProjectCreateDTO.
        :param input_files: The input_files of this ClassicProjectCreateDTO.
        :param instructions: The instructions of this ClassicProjectCreateDTO.
        :param name: The name of this ClassicProjectCreateDTO.
        :param people: The people of this ClassicProjectCreateDTO.
        :param service_id: The service_id of this ClassicProjectCreateDTO.
        :param source_language_id: The source_language_id of this ClassicProjectCreateDTO.
        :param specialization_id: The specialization_id of this ClassicProjectCreateDTO.
        :param target_languages_ids: The target_languages_ids of this ClassicProjectCreateDTO.
        """
        self.openapi_types = {
            'categories_ids': List[int],
            'customer_id': int,
            'dates': ProjectDatesDTO,
            'input_files': List[TaskFileDTO],
            'instructions': InstructionsDTO,
            'name': str,
            'people': ClassicPeopleDTO,
            'service_id': int,
            'source_language_id': int,
            'specialization_id': int,
            'target_languages_ids': List[int]
        }

        self.attribute_map = {
            'categories_ids': 'categoriesIds',
            'customer_id': 'customerId',
            'dates': 'dates',
            'input_files': 'inputFiles',
            'instructions': 'instructions',
            'name': 'name',
            'people': 'people',
            'service_id': 'serviceId',
            'source_language_id': 'sourceLanguageId',
            'specialization_id': 'specializationId',
            'target_languages_ids': 'targetLanguagesIds'
        }

        self._categories_ids = categories_ids
        self._customer_id = customer_id
        self._dates = dates
        self._input_files = input_files
        self._instructions = instructions
        self._name = name
        self._people = people
        self._service_id = service_id
        self._source_language_id = source_language_id
        self._specialization_id = specialization_id
        self._target_languages_ids = target_languages_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClassicProjectCreateDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClassicProjectCreateDTO of this ClassicProjectCreateDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories_ids(self):
        """Gets the categories_ids of this ClassicProjectCreateDTO.

        list of language categories

        :return: The categories_ids of this ClassicProjectCreateDTO.
        :rtype: List[int]
        """
        return self._categories_ids

    @categories_ids.setter
    def categories_ids(self, categories_ids):
        """Sets the categories_ids of this ClassicProjectCreateDTO.

        list of language categories

        :param categories_ids: The categories_ids of this ClassicProjectCreateDTO.
        :type categories_ids: List[int]
        """

        self._categories_ids = categories_ids

    @property
    def customer_id(self):
        """Gets the customer_id of this ClassicProjectCreateDTO.


        :return: The customer_id of this ClassicProjectCreateDTO.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ClassicProjectCreateDTO.


        :param customer_id: The customer_id of this ClassicProjectCreateDTO.
        :type customer_id: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def dates(self):
        """Gets the dates of this ClassicProjectCreateDTO.


        :return: The dates of this ClassicProjectCreateDTO.
        :rtype: ProjectDatesDTO
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this ClassicProjectCreateDTO.


        :param dates: The dates of this ClassicProjectCreateDTO.
        :type dates: ProjectDatesDTO
        """

        self._dates = dates

    @property
    def input_files(self):
        """Gets the input_files of this ClassicProjectCreateDTO.

        input files

        :return: The input_files of this ClassicProjectCreateDTO.
        :rtype: List[TaskFileDTO]
        """
        return self._input_files

    @input_files.setter
    def input_files(self, input_files):
        """Sets the input_files of this ClassicProjectCreateDTO.

        input files

        :param input_files: The input_files of this ClassicProjectCreateDTO.
        :type input_files: List[TaskFileDTO]
        """

        self._input_files = input_files

    @property
    def instructions(self):
        """Gets the instructions of this ClassicProjectCreateDTO.


        :return: The instructions of this ClassicProjectCreateDTO.
        :rtype: InstructionsDTO
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this ClassicProjectCreateDTO.


        :param instructions: The instructions of this ClassicProjectCreateDTO.
        :type instructions: InstructionsDTO
        """

        self._instructions = instructions

    @property
    def name(self):
        """Gets the name of this ClassicProjectCreateDTO.


        :return: The name of this ClassicProjectCreateDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClassicProjectCreateDTO.


        :param name: The name of this ClassicProjectCreateDTO.
        :type name: str
        """

        self._name = name

    @property
    def people(self):
        """Gets the people of this ClassicProjectCreateDTO.


        :return: The people of this ClassicProjectCreateDTO.
        :rtype: ClassicPeopleDTO
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this ClassicProjectCreateDTO.


        :param people: The people of this ClassicProjectCreateDTO.
        :type people: ClassicPeopleDTO
        """

        self._people = people

    @property
    def service_id(self):
        """Gets the service_id of this ClassicProjectCreateDTO.


        :return: The service_id of this ClassicProjectCreateDTO.
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ClassicProjectCreateDTO.


        :param service_id: The service_id of this ClassicProjectCreateDTO.
        :type service_id: int
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def source_language_id(self):
        """Gets the source_language_id of this ClassicProjectCreateDTO.


        :return: The source_language_id of this ClassicProjectCreateDTO.
        :rtype: int
        """
        return self._source_language_id

    @source_language_id.setter
    def source_language_id(self, source_language_id):
        """Sets the source_language_id of this ClassicProjectCreateDTO.


        :param source_language_id: The source_language_id of this ClassicProjectCreateDTO.
        :type source_language_id: int
        """

        self._source_language_id = source_language_id

    @property
    def specialization_id(self):
        """Gets the specialization_id of this ClassicProjectCreateDTO.


        :return: The specialization_id of this ClassicProjectCreateDTO.
        :rtype: int
        """
        return self._specialization_id

    @specialization_id.setter
    def specialization_id(self, specialization_id):
        """Sets the specialization_id of this ClassicProjectCreateDTO.


        :param specialization_id: The specialization_id of this ClassicProjectCreateDTO.
        :type specialization_id: int
        """
        if specialization_id is None:
            raise ValueError("Invalid value for `specialization_id`, must not be `None`")

        self._specialization_id = specialization_id

    @property
    def target_languages_ids(self):
        """Gets the target_languages_ids of this ClassicProjectCreateDTO.


        :return: The target_languages_ids of this ClassicProjectCreateDTO.
        :rtype: List[int]
        """
        return self._target_languages_ids

    @target_languages_ids.setter
    def target_languages_ids(self, target_languages_ids):
        """Sets the target_languages_ids of this ClassicProjectCreateDTO.


        :param target_languages_ids: The target_languages_ids of this ClassicProjectCreateDTO.
        :type target_languages_ids: List[int]
        """

        self._target_languages_ids = target_languages_ids
