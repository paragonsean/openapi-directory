# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddressDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, city: str=None, country_id: int=None, postal_code: str=None, province_id: int=None, same_as_billing_address: bool=None):
        """AddressDTO - a model defined in OpenAPI

        :param address_line1: The address_line1 of this AddressDTO.
        :param address_line2: The address_line2 of this AddressDTO.
        :param city: The city of this AddressDTO.
        :param country_id: The country_id of this AddressDTO.
        :param postal_code: The postal_code of this AddressDTO.
        :param province_id: The province_id of this AddressDTO.
        :param same_as_billing_address: The same_as_billing_address of this AddressDTO.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'city': str,
            'country_id': int,
            'postal_code': str,
            'province_id': int,
            'same_as_billing_address': bool
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'city': 'city',
            'country_id': 'countryId',
            'postal_code': 'postalCode',
            'province_id': 'provinceId',
            'same_as_billing_address': 'sameAsBillingAddress'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._country_id = country_id
        self._postal_code = postal_code
        self._province_id = province_id
        self._same_as_billing_address = same_as_billing_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressDTO of this AddressDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this AddressDTO.

        first line of address

        :return: The address_line1 of this AddressDTO.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this AddressDTO.

        first line of address

        :param address_line1: The address_line1 of this AddressDTO.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this AddressDTO.

        second line of address

        :return: The address_line2 of this AddressDTO.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this AddressDTO.

        second line of address

        :param address_line2: The address_line2 of this AddressDTO.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this AddressDTO.

        city

        :return: The city of this AddressDTO.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressDTO.

        city

        :param city: The city of this AddressDTO.
        :type city: str
        """

        self._city = city

    @property
    def country_id(self):
        """Gets the country_id of this AddressDTO.

        country

        :return: The country_id of this AddressDTO.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this AddressDTO.

        country

        :param country_id: The country_id of this AddressDTO.
        :type country_id: int
        """

        self._country_id = country_id

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressDTO.

        postal code

        :return: The postal_code of this AddressDTO.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressDTO.

        postal code

        :param postal_code: The postal_code of this AddressDTO.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def province_id(self):
        """Gets the province_id of this AddressDTO.

        province

        :return: The province_id of this AddressDTO.
        :rtype: int
        """
        return self._province_id

    @province_id.setter
    def province_id(self, province_id):
        """Sets the province_id of this AddressDTO.

        province

        :param province_id: The province_id of this AddressDTO.
        :type province_id: int
        """

        self._province_id = province_id

    @property
    def same_as_billing_address(self):
        """Gets the same_as_billing_address of this AddressDTO.

        should billing address be used instead of this one

        :return: The same_as_billing_address of this AddressDTO.
        :rtype: bool
        """
        return self._same_as_billing_address

    @same_as_billing_address.setter
    def same_as_billing_address(self, same_as_billing_address):
        """Sets the same_as_billing_address of this AddressDTO.

        should billing address be used instead of this one

        :param same_as_billing_address: The same_as_billing_address of this AddressDTO.
        :type same_as_billing_address: bool
        """

        self._same_as_billing_address = same_as_billing_address
