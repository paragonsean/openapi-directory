# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.charge_language_combination_dto import ChargeLanguageCombinationDTO
from openapi_server import util


class PayableDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculation_unit_id: int=None, currency_id: int=None, description: str=None, id: int=None, ignore_minimum_charge: bool=None, invoice_id: str=None, job_id: object=None, job_type_id: int=None, language_combination: ChargeLanguageCombinationDTO=None, language_combination_id_number: str=None, minimum_charge: float=None, quantity: float=None, rate: float=None, rate_origin: str=None, total: float=None, type: str=None):
        """PayableDTO - a model defined in OpenAPI

        :param calculation_unit_id: The calculation_unit_id of this PayableDTO.
        :param currency_id: The currency_id of this PayableDTO.
        :param description: The description of this PayableDTO.
        :param id: The id of this PayableDTO.
        :param ignore_minimum_charge: The ignore_minimum_charge of this PayableDTO.
        :param invoice_id: The invoice_id of this PayableDTO.
        :param job_id: The job_id of this PayableDTO.
        :param job_type_id: The job_type_id of this PayableDTO.
        :param language_combination: The language_combination of this PayableDTO.
        :param language_combination_id_number: The language_combination_id_number of this PayableDTO.
        :param minimum_charge: The minimum_charge of this PayableDTO.
        :param quantity: The quantity of this PayableDTO.
        :param rate: The rate of this PayableDTO.
        :param rate_origin: The rate_origin of this PayableDTO.
        :param total: The total of this PayableDTO.
        :param type: The type of this PayableDTO.
        """
        self.openapi_types = {
            'calculation_unit_id': int,
            'currency_id': int,
            'description': str,
            'id': int,
            'ignore_minimum_charge': bool,
            'invoice_id': str,
            'job_id': object,
            'job_type_id': int,
            'language_combination': ChargeLanguageCombinationDTO,
            'language_combination_id_number': str,
            'minimum_charge': float,
            'quantity': float,
            'rate': float,
            'rate_origin': str,
            'total': float,
            'type': str
        }

        self.attribute_map = {
            'calculation_unit_id': 'calculationUnitId',
            'currency_id': 'currencyId',
            'description': 'description',
            'id': 'id',
            'ignore_minimum_charge': 'ignoreMinimumCharge',
            'invoice_id': 'invoiceId',
            'job_id': 'jobId',
            'job_type_id': 'jobTypeId',
            'language_combination': 'languageCombination',
            'language_combination_id_number': 'languageCombinationIdNumber',
            'minimum_charge': 'minimumCharge',
            'quantity': 'quantity',
            'rate': 'rate',
            'rate_origin': 'rateOrigin',
            'total': 'total',
            'type': 'type'
        }

        self._calculation_unit_id = calculation_unit_id
        self._currency_id = currency_id
        self._description = description
        self._id = id
        self._ignore_minimum_charge = ignore_minimum_charge
        self._invoice_id = invoice_id
        self._job_id = job_id
        self._job_type_id = job_type_id
        self._language_combination = language_combination
        self._language_combination_id_number = language_combination_id_number
        self._minimum_charge = minimum_charge
        self._quantity = quantity
        self._rate = rate
        self._rate_origin = rate_origin
        self._total = total
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayableDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayableDTO of this PayableDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculation_unit_id(self):
        """Gets the calculation_unit_id of this PayableDTO.


        :return: The calculation_unit_id of this PayableDTO.
        :rtype: int
        """
        return self._calculation_unit_id

    @calculation_unit_id.setter
    def calculation_unit_id(self, calculation_unit_id):
        """Sets the calculation_unit_id of this PayableDTO.


        :param calculation_unit_id: The calculation_unit_id of this PayableDTO.
        :type calculation_unit_id: int
        """

        self._calculation_unit_id = calculation_unit_id

    @property
    def currency_id(self):
        """Gets the currency_id of this PayableDTO.


        :return: The currency_id of this PayableDTO.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this PayableDTO.


        :param currency_id: The currency_id of this PayableDTO.
        :type currency_id: int
        """

        self._currency_id = currency_id

    @property
    def description(self):
        """Gets the description of this PayableDTO.


        :return: The description of this PayableDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PayableDTO.


        :param description: The description of this PayableDTO.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PayableDTO.


        :return: The id of this PayableDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PayableDTO.


        :param id: The id of this PayableDTO.
        :type id: int
        """

        self._id = id

    @property
    def ignore_minimum_charge(self):
        """Gets the ignore_minimum_charge of this PayableDTO.


        :return: The ignore_minimum_charge of this PayableDTO.
        :rtype: bool
        """
        return self._ignore_minimum_charge

    @ignore_minimum_charge.setter
    def ignore_minimum_charge(self, ignore_minimum_charge):
        """Sets the ignore_minimum_charge of this PayableDTO.


        :param ignore_minimum_charge: The ignore_minimum_charge of this PayableDTO.
        :type ignore_minimum_charge: bool
        """

        self._ignore_minimum_charge = ignore_minimum_charge

    @property
    def invoice_id(self):
        """Gets the invoice_id of this PayableDTO.


        :return: The invoice_id of this PayableDTO.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this PayableDTO.


        :param invoice_id: The invoice_id of this PayableDTO.
        :type invoice_id: str
        """

        self._invoice_id = invoice_id

    @property
    def job_id(self):
        """Gets the job_id of this PayableDTO.


        :return: The job_id of this PayableDTO.
        :rtype: object
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this PayableDTO.


        :param job_id: The job_id of this PayableDTO.
        :type job_id: object
        """

        self._job_id = job_id

    @property
    def job_type_id(self):
        """Gets the job_type_id of this PayableDTO.


        :return: The job_type_id of this PayableDTO.
        :rtype: int
        """
        return self._job_type_id

    @job_type_id.setter
    def job_type_id(self, job_type_id):
        """Sets the job_type_id of this PayableDTO.


        :param job_type_id: The job_type_id of this PayableDTO.
        :type job_type_id: int
        """

        self._job_type_id = job_type_id

    @property
    def language_combination(self):
        """Gets the language_combination of this PayableDTO.


        :return: The language_combination of this PayableDTO.
        :rtype: ChargeLanguageCombinationDTO
        """
        return self._language_combination

    @language_combination.setter
    def language_combination(self, language_combination):
        """Sets the language_combination of this PayableDTO.


        :param language_combination: The language_combination of this PayableDTO.
        :type language_combination: ChargeLanguageCombinationDTO
        """

        self._language_combination = language_combination

    @property
    def language_combination_id_number(self):
        """Gets the language_combination_id_number of this PayableDTO.


        :return: The language_combination_id_number of this PayableDTO.
        :rtype: str
        """
        return self._language_combination_id_number

    @language_combination_id_number.setter
    def language_combination_id_number(self, language_combination_id_number):
        """Sets the language_combination_id_number of this PayableDTO.


        :param language_combination_id_number: The language_combination_id_number of this PayableDTO.
        :type language_combination_id_number: str
        """

        self._language_combination_id_number = language_combination_id_number

    @property
    def minimum_charge(self):
        """Gets the minimum_charge of this PayableDTO.


        :return: The minimum_charge of this PayableDTO.
        :rtype: float
        """
        return self._minimum_charge

    @minimum_charge.setter
    def minimum_charge(self, minimum_charge):
        """Sets the minimum_charge of this PayableDTO.


        :param minimum_charge: The minimum_charge of this PayableDTO.
        :type minimum_charge: float
        """

        self._minimum_charge = minimum_charge

    @property
    def quantity(self):
        """Gets the quantity of this PayableDTO.


        :return: The quantity of this PayableDTO.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PayableDTO.


        :param quantity: The quantity of this PayableDTO.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def rate(self):
        """Gets the rate of this PayableDTO.


        :return: The rate of this PayableDTO.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this PayableDTO.


        :param rate: The rate of this PayableDTO.
        :type rate: float
        """

        self._rate = rate

    @property
    def rate_origin(self):
        """Gets the rate_origin of this PayableDTO.


        :return: The rate_origin of this PayableDTO.
        :rtype: str
        """
        return self._rate_origin

    @rate_origin.setter
    def rate_origin(self, rate_origin):
        """Sets the rate_origin of this PayableDTO.


        :param rate_origin: The rate_origin of this PayableDTO.
        :type rate_origin: str
        """
        allowed_values = ["PRICE_PROFILE", "PRICE_LIST", "FILLED_MANUALLY", "AUTOCALCULATED"]  # noqa: E501
        if rate_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `rate_origin` ({0}), must be one of {1}"
                .format(rate_origin, allowed_values)
            )

        self._rate_origin = rate_origin

    @property
    def total(self):
        """Gets the total of this PayableDTO.


        :return: The total of this PayableDTO.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PayableDTO.


        :param total: The total of this PayableDTO.
        :type total: float
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this PayableDTO.


        :return: The type of this PayableDTO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PayableDTO.


        :param type: The type of this PayableDTO.
        :type type: str
        """
        allowed_values = ["SIMPLE", "CAT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
