# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.charge_dto import ChargeDTO
from openapi_server import util


class FinanceDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, roi: float=None, currency_id: int=None, margin: float=None, payables: List[ChargeDTO]=None, profit: float=None, receivables: List[ChargeDTO]=None, total_agreed: float=None, total_cost: float=None):
        """FinanceDTO - a model defined in OpenAPI

        :param roi: The roi of this FinanceDTO.
        :param currency_id: The currency_id of this FinanceDTO.
        :param margin: The margin of this FinanceDTO.
        :param payables: The payables of this FinanceDTO.
        :param profit: The profit of this FinanceDTO.
        :param receivables: The receivables of this FinanceDTO.
        :param total_agreed: The total_agreed of this FinanceDTO.
        :param total_cost: The total_cost of this FinanceDTO.
        """
        self.openapi_types = {
            'roi': float,
            'currency_id': int,
            'margin': float,
            'payables': List[ChargeDTO],
            'profit': float,
            'receivables': List[ChargeDTO],
            'total_agreed': float,
            'total_cost': float
        }

        self.attribute_map = {
            'roi': 'ROI',
            'currency_id': 'currencyId',
            'margin': 'margin',
            'payables': 'payables',
            'profit': 'profit',
            'receivables': 'receivables',
            'total_agreed': 'totalAgreed',
            'total_cost': 'totalCost'
        }

        self._roi = roi
        self._currency_id = currency_id
        self._margin = margin
        self._payables = payables
        self._profit = profit
        self._receivables = receivables
        self._total_agreed = total_agreed
        self._total_cost = total_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinanceDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FinanceDTO of this FinanceDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def roi(self):
        """Gets the roi of this FinanceDTO.


        :return: The roi of this FinanceDTO.
        :rtype: float
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this FinanceDTO.


        :param roi: The roi of this FinanceDTO.
        :type roi: float
        """

        self._roi = roi

    @property
    def currency_id(self):
        """Gets the currency_id of this FinanceDTO.


        :return: The currency_id of this FinanceDTO.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this FinanceDTO.


        :param currency_id: The currency_id of this FinanceDTO.
        :type currency_id: int
        """

        self._currency_id = currency_id

    @property
    def margin(self):
        """Gets the margin of this FinanceDTO.


        :return: The margin of this FinanceDTO.
        :rtype: float
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this FinanceDTO.


        :param margin: The margin of this FinanceDTO.
        :type margin: float
        """

        self._margin = margin

    @property
    def payables(self):
        """Gets the payables of this FinanceDTO.


        :return: The payables of this FinanceDTO.
        :rtype: List[ChargeDTO]
        """
        return self._payables

    @payables.setter
    def payables(self, payables):
        """Sets the payables of this FinanceDTO.


        :param payables: The payables of this FinanceDTO.
        :type payables: List[ChargeDTO]
        """

        self._payables = payables

    @property
    def profit(self):
        """Gets the profit of this FinanceDTO.


        :return: The profit of this FinanceDTO.
        :rtype: float
        """
        return self._profit

    @profit.setter
    def profit(self, profit):
        """Sets the profit of this FinanceDTO.


        :param profit: The profit of this FinanceDTO.
        :type profit: float
        """

        self._profit = profit

    @property
    def receivables(self):
        """Gets the receivables of this FinanceDTO.


        :return: The receivables of this FinanceDTO.
        :rtype: List[ChargeDTO]
        """
        return self._receivables

    @receivables.setter
    def receivables(self, receivables):
        """Sets the receivables of this FinanceDTO.


        :param receivables: The receivables of this FinanceDTO.
        :type receivables: List[ChargeDTO]
        """

        self._receivables = receivables

    @property
    def total_agreed(self):
        """Gets the total_agreed of this FinanceDTO.


        :return: The total_agreed of this FinanceDTO.
        :rtype: float
        """
        return self._total_agreed

    @total_agreed.setter
    def total_agreed(self, total_agreed):
        """Sets the total_agreed of this FinanceDTO.


        :param total_agreed: The total_agreed of this FinanceDTO.
        :type total_agreed: float
        """

        self._total_agreed = total_agreed

    @property
    def total_cost(self):
        """Gets the total_cost of this FinanceDTO.


        :return: The total_cost of this FinanceDTO.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this FinanceDTO.


        :param total_cost: The total_cost of this FinanceDTO.
        :type total_cost: float
        """

        self._total_cost = total_cost
