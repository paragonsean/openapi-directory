# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerResponsiblePersonsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_manager_id: int=None, project_coordinator_id: int=None, project_manager_id: int=None, sales_person_id: int=None):
        """CustomerResponsiblePersonsDTO - a model defined in OpenAPI

        :param account_manager_id: The account_manager_id of this CustomerResponsiblePersonsDTO.
        :param project_coordinator_id: The project_coordinator_id of this CustomerResponsiblePersonsDTO.
        :param project_manager_id: The project_manager_id of this CustomerResponsiblePersonsDTO.
        :param sales_person_id: The sales_person_id of this CustomerResponsiblePersonsDTO.
        """
        self.openapi_types = {
            'account_manager_id': int,
            'project_coordinator_id': int,
            'project_manager_id': int,
            'sales_person_id': int
        }

        self.attribute_map = {
            'account_manager_id': 'accountManagerId',
            'project_coordinator_id': 'projectCoordinatorId',
            'project_manager_id': 'projectManagerId',
            'sales_person_id': 'salesPersonId'
        }

        self._account_manager_id = account_manager_id
        self._project_coordinator_id = project_coordinator_id
        self._project_manager_id = project_manager_id
        self._sales_person_id = sales_person_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerResponsiblePersonsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerResponsiblePersonsDTO of this CustomerResponsiblePersonsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_manager_id(self):
        """Gets the account_manager_id of this CustomerResponsiblePersonsDTO.

        account manager

        :return: The account_manager_id of this CustomerResponsiblePersonsDTO.
        :rtype: int
        """
        return self._account_manager_id

    @account_manager_id.setter
    def account_manager_id(self, account_manager_id):
        """Sets the account_manager_id of this CustomerResponsiblePersonsDTO.

        account manager

        :param account_manager_id: The account_manager_id of this CustomerResponsiblePersonsDTO.
        :type account_manager_id: int
        """

        self._account_manager_id = account_manager_id

    @property
    def project_coordinator_id(self):
        """Gets the project_coordinator_id of this CustomerResponsiblePersonsDTO.

        project coordinator

        :return: The project_coordinator_id of this CustomerResponsiblePersonsDTO.
        :rtype: int
        """
        return self._project_coordinator_id

    @project_coordinator_id.setter
    def project_coordinator_id(self, project_coordinator_id):
        """Sets the project_coordinator_id of this CustomerResponsiblePersonsDTO.

        project coordinator

        :param project_coordinator_id: The project_coordinator_id of this CustomerResponsiblePersonsDTO.
        :type project_coordinator_id: int
        """

        self._project_coordinator_id = project_coordinator_id

    @property
    def project_manager_id(self):
        """Gets the project_manager_id of this CustomerResponsiblePersonsDTO.

        project manager

        :return: The project_manager_id of this CustomerResponsiblePersonsDTO.
        :rtype: int
        """
        return self._project_manager_id

    @project_manager_id.setter
    def project_manager_id(self, project_manager_id):
        """Sets the project_manager_id of this CustomerResponsiblePersonsDTO.

        project manager

        :param project_manager_id: The project_manager_id of this CustomerResponsiblePersonsDTO.
        :type project_manager_id: int
        """
        if project_manager_id is None:
            raise ValueError("Invalid value for `project_manager_id`, must not be `None`")

        self._project_manager_id = project_manager_id

    @property
    def sales_person_id(self):
        """Gets the sales_person_id of this CustomerResponsiblePersonsDTO.

        sales person

        :return: The sales_person_id of this CustomerResponsiblePersonsDTO.
        :rtype: int
        """
        return self._sales_person_id

    @sales_person_id.setter
    def sales_person_id(self, sales_person_id):
        """Sets the sales_person_id of this CustomerResponsiblePersonsDTO.

        sales person

        :param sales_person_id: The sales_person_id of this CustomerResponsiblePersonsDTO.
        :type sales_person_id: int
        """
        if sales_person_id is None:
            raise ValueError("Invalid value for `sales_person_id`, must not be `None`")

        self._sales_person_id = sales_person_id
