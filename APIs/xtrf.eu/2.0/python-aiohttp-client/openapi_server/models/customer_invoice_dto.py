# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_details_dto import CustomerDetailsDTO
from openapi_server.models.customer_invoice_dates_dto import CustomerInvoiceDatesDTO
from openapi_server.models.payment_terms_dto import PaymentTermsDTO
from openapi_server.models.task_dto import TaskDTO
from openapi_server import util


class CustomerInvoiceDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_id: int=None, customer_details: CustomerDetailsDTO=None, customer_id: int=None, dates: CustomerInvoiceDatesDTO=None, id: int=None, invoice_number: str=None, payment_method_id: int=None, payment_terms: PaymentTermsDTO=None, status: str=None, tasks: List[TaskDTO]=None, tasks_value: float=None, total_gross: float=None, total_in_words: str=None, total_netto: float=None, type: str=None, vat_calculation_rule: str=None):
        """CustomerInvoiceDTO - a model defined in OpenAPI

        :param currency_id: The currency_id of this CustomerInvoiceDTO.
        :param customer_details: The customer_details of this CustomerInvoiceDTO.
        :param customer_id: The customer_id of this CustomerInvoiceDTO.
        :param dates: The dates of this CustomerInvoiceDTO.
        :param id: The id of this CustomerInvoiceDTO.
        :param invoice_number: The invoice_number of this CustomerInvoiceDTO.
        :param payment_method_id: The payment_method_id of this CustomerInvoiceDTO.
        :param payment_terms: The payment_terms of this CustomerInvoiceDTO.
        :param status: The status of this CustomerInvoiceDTO.
        :param tasks: The tasks of this CustomerInvoiceDTO.
        :param tasks_value: The tasks_value of this CustomerInvoiceDTO.
        :param total_gross: The total_gross of this CustomerInvoiceDTO.
        :param total_in_words: The total_in_words of this CustomerInvoiceDTO.
        :param total_netto: The total_netto of this CustomerInvoiceDTO.
        :param type: The type of this CustomerInvoiceDTO.
        :param vat_calculation_rule: The vat_calculation_rule of this CustomerInvoiceDTO.
        """
        self.openapi_types = {
            'currency_id': int,
            'customer_details': CustomerDetailsDTO,
            'customer_id': int,
            'dates': CustomerInvoiceDatesDTO,
            'id': int,
            'invoice_number': str,
            'payment_method_id': int,
            'payment_terms': PaymentTermsDTO,
            'status': str,
            'tasks': List[TaskDTO],
            'tasks_value': float,
            'total_gross': float,
            'total_in_words': str,
            'total_netto': float,
            'type': str,
            'vat_calculation_rule': str
        }

        self.attribute_map = {
            'currency_id': 'currencyId',
            'customer_details': 'customerDetails',
            'customer_id': 'customerId',
            'dates': 'dates',
            'id': 'id',
            'invoice_number': 'invoiceNumber',
            'payment_method_id': 'paymentMethodId',
            'payment_terms': 'paymentTerms',
            'status': 'status',
            'tasks': 'tasks',
            'tasks_value': 'tasksValue',
            'total_gross': 'totalGross',
            'total_in_words': 'totalInWords',
            'total_netto': 'totalNetto',
            'type': 'type',
            'vat_calculation_rule': 'vatCalculationRule'
        }

        self._currency_id = currency_id
        self._customer_details = customer_details
        self._customer_id = customer_id
        self._dates = dates
        self._id = id
        self._invoice_number = invoice_number
        self._payment_method_id = payment_method_id
        self._payment_terms = payment_terms
        self._status = status
        self._tasks = tasks
        self._tasks_value = tasks_value
        self._total_gross = total_gross
        self._total_in_words = total_in_words
        self._total_netto = total_netto
        self._type = type
        self._vat_calculation_rule = vat_calculation_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerInvoiceDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerInvoiceDTO of this CustomerInvoiceDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_id(self):
        """Gets the currency_id of this CustomerInvoiceDTO.


        :return: The currency_id of this CustomerInvoiceDTO.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this CustomerInvoiceDTO.


        :param currency_id: The currency_id of this CustomerInvoiceDTO.
        :type currency_id: int
        """

        self._currency_id = currency_id

    @property
    def customer_details(self):
        """Gets the customer_details of this CustomerInvoiceDTO.


        :return: The customer_details of this CustomerInvoiceDTO.
        :rtype: CustomerDetailsDTO
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """Sets the customer_details of this CustomerInvoiceDTO.


        :param customer_details: The customer_details of this CustomerInvoiceDTO.
        :type customer_details: CustomerDetailsDTO
        """

        self._customer_details = customer_details

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerInvoiceDTO.


        :return: The customer_id of this CustomerInvoiceDTO.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerInvoiceDTO.


        :param customer_id: The customer_id of this CustomerInvoiceDTO.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def dates(self):
        """Gets the dates of this CustomerInvoiceDTO.


        :return: The dates of this CustomerInvoiceDTO.
        :rtype: CustomerInvoiceDatesDTO
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this CustomerInvoiceDTO.


        :param dates: The dates of this CustomerInvoiceDTO.
        :type dates: CustomerInvoiceDatesDTO
        """

        self._dates = dates

    @property
    def id(self):
        """Gets the id of this CustomerInvoiceDTO.


        :return: The id of this CustomerInvoiceDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerInvoiceDTO.


        :param id: The id of this CustomerInvoiceDTO.
        :type id: int
        """

        self._id = id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this CustomerInvoiceDTO.


        :return: The invoice_number of this CustomerInvoiceDTO.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this CustomerInvoiceDTO.


        :param invoice_number: The invoice_number of this CustomerInvoiceDTO.
        :type invoice_number: str
        """

        self._invoice_number = invoice_number

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this CustomerInvoiceDTO.


        :return: The payment_method_id of this CustomerInvoiceDTO.
        :rtype: int
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this CustomerInvoiceDTO.


        :param payment_method_id: The payment_method_id of this CustomerInvoiceDTO.
        :type payment_method_id: int
        """

        self._payment_method_id = payment_method_id

    @property
    def payment_terms(self):
        """Gets the payment_terms of this CustomerInvoiceDTO.


        :return: The payment_terms of this CustomerInvoiceDTO.
        :rtype: PaymentTermsDTO
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this CustomerInvoiceDTO.


        :param payment_terms: The payment_terms of this CustomerInvoiceDTO.
        :type payment_terms: PaymentTermsDTO
        """

        self._payment_terms = payment_terms

    @property
    def status(self):
        """Gets the status of this CustomerInvoiceDTO.


        :return: The status of this CustomerInvoiceDTO.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerInvoiceDTO.


        :param status: The status of this CustomerInvoiceDTO.
        :type status: str
        """
        allowed_values = ["NOT_READY", "READY", "SENT"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tasks(self):
        """Gets the tasks of this CustomerInvoiceDTO.


        :return: The tasks of this CustomerInvoiceDTO.
        :rtype: List[TaskDTO]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this CustomerInvoiceDTO.


        :param tasks: The tasks of this CustomerInvoiceDTO.
        :type tasks: List[TaskDTO]
        """

        self._tasks = tasks

    @property
    def tasks_value(self):
        """Gets the tasks_value of this CustomerInvoiceDTO.


        :return: The tasks_value of this CustomerInvoiceDTO.
        :rtype: float
        """
        return self._tasks_value

    @tasks_value.setter
    def tasks_value(self, tasks_value):
        """Sets the tasks_value of this CustomerInvoiceDTO.


        :param tasks_value: The tasks_value of this CustomerInvoiceDTO.
        :type tasks_value: float
        """

        self._tasks_value = tasks_value

    @property
    def total_gross(self):
        """Gets the total_gross of this CustomerInvoiceDTO.


        :return: The total_gross of this CustomerInvoiceDTO.
        :rtype: float
        """
        return self._total_gross

    @total_gross.setter
    def total_gross(self, total_gross):
        """Sets the total_gross of this CustomerInvoiceDTO.


        :param total_gross: The total_gross of this CustomerInvoiceDTO.
        :type total_gross: float
        """

        self._total_gross = total_gross

    @property
    def total_in_words(self):
        """Gets the total_in_words of this CustomerInvoiceDTO.


        :return: The total_in_words of this CustomerInvoiceDTO.
        :rtype: str
        """
        return self._total_in_words

    @total_in_words.setter
    def total_in_words(self, total_in_words):
        """Sets the total_in_words of this CustomerInvoiceDTO.


        :param total_in_words: The total_in_words of this CustomerInvoiceDTO.
        :type total_in_words: str
        """

        self._total_in_words = total_in_words

    @property
    def total_netto(self):
        """Gets the total_netto of this CustomerInvoiceDTO.


        :return: The total_netto of this CustomerInvoiceDTO.
        :rtype: float
        """
        return self._total_netto

    @total_netto.setter
    def total_netto(self, total_netto):
        """Sets the total_netto of this CustomerInvoiceDTO.


        :param total_netto: The total_netto of this CustomerInvoiceDTO.
        :type total_netto: float
        """

        self._total_netto = total_netto

    @property
    def type(self):
        """Gets the type of this CustomerInvoiceDTO.


        :return: The type of this CustomerInvoiceDTO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomerInvoiceDTO.


        :param type: The type of this CustomerInvoiceDTO.
        :type type: str
        """
        allowed_values = ["FINAL", "DRAFT", "CREDIT_NOTE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vat_calculation_rule(self):
        """Gets the vat_calculation_rule of this CustomerInvoiceDTO.


        :return: The vat_calculation_rule of this CustomerInvoiceDTO.
        :rtype: str
        """
        return self._vat_calculation_rule

    @vat_calculation_rule.setter
    def vat_calculation_rule(self, vat_calculation_rule):
        """Sets the vat_calculation_rule of this CustomerInvoiceDTO.


        :param vat_calculation_rule: The vat_calculation_rule of this CustomerInvoiceDTO.
        :type vat_calculation_rule: str
        """
        allowed_values = ["SUM_ITEMS", "BY_NET_TOTAL"]  # noqa: E501
        if vat_calculation_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `vat_calculation_rule` ({0}), must be one of {1}"
                .format(vat_calculation_rule, allowed_values)
            )

        self._vat_calculation_rule = vat_calculation_rule
