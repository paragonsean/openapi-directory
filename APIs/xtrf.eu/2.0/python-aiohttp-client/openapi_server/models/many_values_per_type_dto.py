# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calculation_unit_dto import CalculationUnitDTO
from openapi_server.models.category_dto import CategoryDTO
from openapi_server.models.country_dto import CountryDTO
from openapi_server.models.currency_dto import CurrencyDTO
from openapi_server.models.industry_dto import IndustryDTO
from openapi_server.models.job_type_dto import JobTypeDTO
from openapi_server.models.language_dto import LanguageDTO
from openapi_server.models.language_specialization_dto import LanguageSpecializationDTO
from openapi_server.models.lead_source_dto import LeadSourceDTO
from openapi_server.models.person_department_dto import PersonDepartmentDTO
from openapi_server.models.person_position_dto import PersonPositionDTO
from openapi_server.models.province_dto import ProvinceDTO
from openapi_server import util


class ManyValuesPerTypeDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculation_unit: List[CalculationUnitDTO]=None, category: List[CategoryDTO]=None, country: List[CountryDTO]=None, currency: List[CurrencyDTO]=None, industry: List[IndustryDTO]=None, job_type: List[JobTypeDTO]=None, language: List[LanguageDTO]=None, lead_source: List[LeadSourceDTO]=None, person_department: List[PersonDepartmentDTO]=None, person_position: List[PersonPositionDTO]=None, province: List[ProvinceDTO]=None, specialization: List[LanguageSpecializationDTO]=None):
        """ManyValuesPerTypeDTO - a model defined in OpenAPI

        :param calculation_unit: The calculation_unit of this ManyValuesPerTypeDTO.
        :param category: The category of this ManyValuesPerTypeDTO.
        :param country: The country of this ManyValuesPerTypeDTO.
        :param currency: The currency of this ManyValuesPerTypeDTO.
        :param industry: The industry of this ManyValuesPerTypeDTO.
        :param job_type: The job_type of this ManyValuesPerTypeDTO.
        :param language: The language of this ManyValuesPerTypeDTO.
        :param lead_source: The lead_source of this ManyValuesPerTypeDTO.
        :param person_department: The person_department of this ManyValuesPerTypeDTO.
        :param person_position: The person_position of this ManyValuesPerTypeDTO.
        :param province: The province of this ManyValuesPerTypeDTO.
        :param specialization: The specialization of this ManyValuesPerTypeDTO.
        """
        self.openapi_types = {
            'calculation_unit': List[CalculationUnitDTO],
            'category': List[CategoryDTO],
            'country': List[CountryDTO],
            'currency': List[CurrencyDTO],
            'industry': List[IndustryDTO],
            'job_type': List[JobTypeDTO],
            'language': List[LanguageDTO],
            'lead_source': List[LeadSourceDTO],
            'person_department': List[PersonDepartmentDTO],
            'person_position': List[PersonPositionDTO],
            'province': List[ProvinceDTO],
            'specialization': List[LanguageSpecializationDTO]
        }

        self.attribute_map = {
            'calculation_unit': 'calculationUnit',
            'category': 'category',
            'country': 'country',
            'currency': 'currency',
            'industry': 'industry',
            'job_type': 'jobType',
            'language': 'language',
            'lead_source': 'leadSource',
            'person_department': 'personDepartment',
            'person_position': 'personPosition',
            'province': 'province',
            'specialization': 'specialization'
        }

        self._calculation_unit = calculation_unit
        self._category = category
        self._country = country
        self._currency = currency
        self._industry = industry
        self._job_type = job_type
        self._language = language
        self._lead_source = lead_source
        self._person_department = person_department
        self._person_position = person_position
        self._province = province
        self._specialization = specialization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManyValuesPerTypeDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManyValuesPerTypeDTO of this ManyValuesPerTypeDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculation_unit(self):
        """Gets the calculation_unit of this ManyValuesPerTypeDTO.


        :return: The calculation_unit of this ManyValuesPerTypeDTO.
        :rtype: List[CalculationUnitDTO]
        """
        return self._calculation_unit

    @calculation_unit.setter
    def calculation_unit(self, calculation_unit):
        """Sets the calculation_unit of this ManyValuesPerTypeDTO.


        :param calculation_unit: The calculation_unit of this ManyValuesPerTypeDTO.
        :type calculation_unit: List[CalculationUnitDTO]
        """

        self._calculation_unit = calculation_unit

    @property
    def category(self):
        """Gets the category of this ManyValuesPerTypeDTO.


        :return: The category of this ManyValuesPerTypeDTO.
        :rtype: List[CategoryDTO]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ManyValuesPerTypeDTO.


        :param category: The category of this ManyValuesPerTypeDTO.
        :type category: List[CategoryDTO]
        """

        self._category = category

    @property
    def country(self):
        """Gets the country of this ManyValuesPerTypeDTO.


        :return: The country of this ManyValuesPerTypeDTO.
        :rtype: List[CountryDTO]
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ManyValuesPerTypeDTO.


        :param country: The country of this ManyValuesPerTypeDTO.
        :type country: List[CountryDTO]
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this ManyValuesPerTypeDTO.


        :return: The currency of this ManyValuesPerTypeDTO.
        :rtype: List[CurrencyDTO]
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ManyValuesPerTypeDTO.


        :param currency: The currency of this ManyValuesPerTypeDTO.
        :type currency: List[CurrencyDTO]
        """

        self._currency = currency

    @property
    def industry(self):
        """Gets the industry of this ManyValuesPerTypeDTO.


        :return: The industry of this ManyValuesPerTypeDTO.
        :rtype: List[IndustryDTO]
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this ManyValuesPerTypeDTO.


        :param industry: The industry of this ManyValuesPerTypeDTO.
        :type industry: List[IndustryDTO]
        """

        self._industry = industry

    @property
    def job_type(self):
        """Gets the job_type of this ManyValuesPerTypeDTO.


        :return: The job_type of this ManyValuesPerTypeDTO.
        :rtype: List[JobTypeDTO]
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this ManyValuesPerTypeDTO.


        :param job_type: The job_type of this ManyValuesPerTypeDTO.
        :type job_type: List[JobTypeDTO]
        """

        self._job_type = job_type

    @property
    def language(self):
        """Gets the language of this ManyValuesPerTypeDTO.


        :return: The language of this ManyValuesPerTypeDTO.
        :rtype: List[LanguageDTO]
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ManyValuesPerTypeDTO.


        :param language: The language of this ManyValuesPerTypeDTO.
        :type language: List[LanguageDTO]
        """

        self._language = language

    @property
    def lead_source(self):
        """Gets the lead_source of this ManyValuesPerTypeDTO.


        :return: The lead_source of this ManyValuesPerTypeDTO.
        :rtype: List[LeadSourceDTO]
        """
        return self._lead_source

    @lead_source.setter
    def lead_source(self, lead_source):
        """Sets the lead_source of this ManyValuesPerTypeDTO.


        :param lead_source: The lead_source of this ManyValuesPerTypeDTO.
        :type lead_source: List[LeadSourceDTO]
        """

        self._lead_source = lead_source

    @property
    def person_department(self):
        """Gets the person_department of this ManyValuesPerTypeDTO.


        :return: The person_department of this ManyValuesPerTypeDTO.
        :rtype: List[PersonDepartmentDTO]
        """
        return self._person_department

    @person_department.setter
    def person_department(self, person_department):
        """Sets the person_department of this ManyValuesPerTypeDTO.


        :param person_department: The person_department of this ManyValuesPerTypeDTO.
        :type person_department: List[PersonDepartmentDTO]
        """

        self._person_department = person_department

    @property
    def person_position(self):
        """Gets the person_position of this ManyValuesPerTypeDTO.


        :return: The person_position of this ManyValuesPerTypeDTO.
        :rtype: List[PersonPositionDTO]
        """
        return self._person_position

    @person_position.setter
    def person_position(self, person_position):
        """Sets the person_position of this ManyValuesPerTypeDTO.


        :param person_position: The person_position of this ManyValuesPerTypeDTO.
        :type person_position: List[PersonPositionDTO]
        """

        self._person_position = person_position

    @property
    def province(self):
        """Gets the province of this ManyValuesPerTypeDTO.


        :return: The province of this ManyValuesPerTypeDTO.
        :rtype: List[ProvinceDTO]
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this ManyValuesPerTypeDTO.


        :param province: The province of this ManyValuesPerTypeDTO.
        :type province: List[ProvinceDTO]
        """

        self._province = province

    @property
    def specialization(self):
        """Gets the specialization of this ManyValuesPerTypeDTO.


        :return: The specialization of this ManyValuesPerTypeDTO.
        :rtype: List[LanguageSpecializationDTO]
        """
        return self._specialization

    @specialization.setter
    def specialization(self, specialization):
        """Sets the specialization of this ManyValuesPerTypeDTO.


        :param specialization: The specialization of this ManyValuesPerTypeDTO.
        :type specialization: List[LanguageSpecializationDTO]
        """

        self._specialization = specialization
