# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.documents_dto import DocumentsDTO
from openapi_server.models.people_dto import PeopleDTO
from openapi_server.models.project_languages_dto import ProjectLanguagesDTO
from openapi_server.models.volume_dto import VolumeDTO
from openapi_server import util


class ProjectDTOv2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_code: str=None, category_ids: list[int]=None, client_deadline: int=None, client_id: int=None, client_notes: str=None, client_reference_number: str=None, documents: DocumentsDTO=None, id: str=None, instructions_for_all_jobs: str=None, internal_notes: str=None, is_classic_project: bool=None, languages: ProjectLanguagesDTO=None, name: str=None, ordered_on: int=None, origin: str=None, people: PeopleDTO=None, project_id: str=None, project_id_number: str=None, quote_id_number: str=None, service_id: int=None, status: str=None, volume: VolumeDTO=None):
        """ProjectDTOv2 - a model defined in OpenAPI

        :param budget_code: The budget_code of this ProjectDTOv2.
        :param category_ids: The category_ids of this ProjectDTOv2.
        :param client_deadline: The client_deadline of this ProjectDTOv2.
        :param client_id: The client_id of this ProjectDTOv2.
        :param client_notes: The client_notes of this ProjectDTOv2.
        :param client_reference_number: The client_reference_number of this ProjectDTOv2.
        :param documents: The documents of this ProjectDTOv2.
        :param id: The id of this ProjectDTOv2.
        :param instructions_for_all_jobs: The instructions_for_all_jobs of this ProjectDTOv2.
        :param internal_notes: The internal_notes of this ProjectDTOv2.
        :param is_classic_project: The is_classic_project of this ProjectDTOv2.
        :param languages: The languages of this ProjectDTOv2.
        :param name: The name of this ProjectDTOv2.
        :param ordered_on: The ordered_on of this ProjectDTOv2.
        :param origin: The origin of this ProjectDTOv2.
        :param people: The people of this ProjectDTOv2.
        :param project_id: The project_id of this ProjectDTOv2.
        :param project_id_number: The project_id_number of this ProjectDTOv2.
        :param quote_id_number: The quote_id_number of this ProjectDTOv2.
        :param service_id: The service_id of this ProjectDTOv2.
        :param status: The status of this ProjectDTOv2.
        :param volume: The volume of this ProjectDTOv2.
        """
        self.openapi_types = {
            'budget_code': str,
            'category_ids': list[int],
            'client_deadline': int,
            'client_id': int,
            'client_notes': str,
            'client_reference_number': str,
            'documents': DocumentsDTO,
            'id': str,
            'instructions_for_all_jobs': str,
            'internal_notes': str,
            'is_classic_project': bool,
            'languages': ProjectLanguagesDTO,
            'name': str,
            'ordered_on': int,
            'origin': str,
            'people': PeopleDTO,
            'project_id': str,
            'project_id_number': str,
            'quote_id_number': str,
            'service_id': int,
            'status': str,
            'volume': VolumeDTO
        }

        self.attribute_map = {
            'budget_code': 'budgetCode',
            'category_ids': 'categoryIds',
            'client_deadline': 'clientDeadline',
            'client_id': 'clientId',
            'client_notes': 'clientNotes',
            'client_reference_number': 'clientReferenceNumber',
            'documents': 'documents',
            'id': 'id',
            'instructions_for_all_jobs': 'instructionsForAllJobs',
            'internal_notes': 'internalNotes',
            'is_classic_project': 'isClassicProject',
            'languages': 'languages',
            'name': 'name',
            'ordered_on': 'orderedOn',
            'origin': 'origin',
            'people': 'people',
            'project_id': 'projectId',
            'project_id_number': 'projectIdNumber',
            'quote_id_number': 'quoteIdNumber',
            'service_id': 'serviceId',
            'status': 'status',
            'volume': 'volume'
        }

        self._budget_code = budget_code
        self._category_ids = category_ids
        self._client_deadline = client_deadline
        self._client_id = client_id
        self._client_notes = client_notes
        self._client_reference_number = client_reference_number
        self._documents = documents
        self._id = id
        self._instructions_for_all_jobs = instructions_for_all_jobs
        self._internal_notes = internal_notes
        self._is_classic_project = is_classic_project
        self._languages = languages
        self._name = name
        self._ordered_on = ordered_on
        self._origin = origin
        self._people = people
        self._project_id = project_id
        self._project_id_number = project_id_number
        self._quote_id_number = quote_id_number
        self._service_id = service_id
        self._status = status
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectDTOv2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectDTOv2 of this ProjectDTOv2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_code(self):
        """Gets the budget_code of this ProjectDTOv2.


        :return: The budget_code of this ProjectDTOv2.
        :rtype: str
        """
        return self._budget_code

    @budget_code.setter
    def budget_code(self, budget_code):
        """Sets the budget_code of this ProjectDTOv2.


        :param budget_code: The budget_code of this ProjectDTOv2.
        :type budget_code: str
        """

        self._budget_code = budget_code

    @property
    def category_ids(self):
        """Gets the category_ids of this ProjectDTOv2.


        :return: The category_ids of this ProjectDTOv2.
        :rtype: list[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this ProjectDTOv2.


        :param category_ids: The category_ids of this ProjectDTOv2.
        :type category_ids: list[int]
        """

        self._category_ids = category_ids

    @property
    def client_deadline(self):
        """Gets the client_deadline of this ProjectDTOv2.


        :return: The client_deadline of this ProjectDTOv2.
        :rtype: int
        """
        return self._client_deadline

    @client_deadline.setter
    def client_deadline(self, client_deadline):
        """Sets the client_deadline of this ProjectDTOv2.


        :param client_deadline: The client_deadline of this ProjectDTOv2.
        :type client_deadline: int
        """

        self._client_deadline = client_deadline

    @property
    def client_id(self):
        """Gets the client_id of this ProjectDTOv2.


        :return: The client_id of this ProjectDTOv2.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ProjectDTOv2.


        :param client_id: The client_id of this ProjectDTOv2.
        :type client_id: int
        """

        self._client_id = client_id

    @property
    def client_notes(self):
        """Gets the client_notes of this ProjectDTOv2.


        :return: The client_notes of this ProjectDTOv2.
        :rtype: str
        """
        return self._client_notes

    @client_notes.setter
    def client_notes(self, client_notes):
        """Sets the client_notes of this ProjectDTOv2.


        :param client_notes: The client_notes of this ProjectDTOv2.
        :type client_notes: str
        """

        self._client_notes = client_notes

    @property
    def client_reference_number(self):
        """Gets the client_reference_number of this ProjectDTOv2.


        :return: The client_reference_number of this ProjectDTOv2.
        :rtype: str
        """
        return self._client_reference_number

    @client_reference_number.setter
    def client_reference_number(self, client_reference_number):
        """Sets the client_reference_number of this ProjectDTOv2.


        :param client_reference_number: The client_reference_number of this ProjectDTOv2.
        :type client_reference_number: str
        """

        self._client_reference_number = client_reference_number

    @property
    def documents(self):
        """Gets the documents of this ProjectDTOv2.


        :return: The documents of this ProjectDTOv2.
        :rtype: DocumentsDTO
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this ProjectDTOv2.


        :param documents: The documents of this ProjectDTOv2.
        :type documents: DocumentsDTO
        """

        self._documents = documents

    @property
    def id(self):
        """Gets the id of this ProjectDTOv2.


        :return: The id of this ProjectDTOv2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectDTOv2.


        :param id: The id of this ProjectDTOv2.
        :type id: str
        """

        self._id = id

    @property
    def instructions_for_all_jobs(self):
        """Gets the instructions_for_all_jobs of this ProjectDTOv2.


        :return: The instructions_for_all_jobs of this ProjectDTOv2.
        :rtype: str
        """
        return self._instructions_for_all_jobs

    @instructions_for_all_jobs.setter
    def instructions_for_all_jobs(self, instructions_for_all_jobs):
        """Sets the instructions_for_all_jobs of this ProjectDTOv2.


        :param instructions_for_all_jobs: The instructions_for_all_jobs of this ProjectDTOv2.
        :type instructions_for_all_jobs: str
        """

        self._instructions_for_all_jobs = instructions_for_all_jobs

    @property
    def internal_notes(self):
        """Gets the internal_notes of this ProjectDTOv2.


        :return: The internal_notes of this ProjectDTOv2.
        :rtype: str
        """
        return self._internal_notes

    @internal_notes.setter
    def internal_notes(self, internal_notes):
        """Sets the internal_notes of this ProjectDTOv2.


        :param internal_notes: The internal_notes of this ProjectDTOv2.
        :type internal_notes: str
        """

        self._internal_notes = internal_notes

    @property
    def is_classic_project(self):
        """Gets the is_classic_project of this ProjectDTOv2.


        :return: The is_classic_project of this ProjectDTOv2.
        :rtype: bool
        """
        return self._is_classic_project

    @is_classic_project.setter
    def is_classic_project(self, is_classic_project):
        """Sets the is_classic_project of this ProjectDTOv2.


        :param is_classic_project: The is_classic_project of this ProjectDTOv2.
        :type is_classic_project: bool
        """

        self._is_classic_project = is_classic_project

    @property
    def languages(self):
        """Gets the languages of this ProjectDTOv2.


        :return: The languages of this ProjectDTOv2.
        :rtype: ProjectLanguagesDTO
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ProjectDTOv2.


        :param languages: The languages of this ProjectDTOv2.
        :type languages: ProjectLanguagesDTO
        """

        self._languages = languages

    @property
    def name(self):
        """Gets the name of this ProjectDTOv2.


        :return: The name of this ProjectDTOv2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectDTOv2.


        :param name: The name of this ProjectDTOv2.
        :type name: str
        """

        self._name = name

    @property
    def ordered_on(self):
        """Gets the ordered_on of this ProjectDTOv2.


        :return: The ordered_on of this ProjectDTOv2.
        :rtype: int
        """
        return self._ordered_on

    @ordered_on.setter
    def ordered_on(self, ordered_on):
        """Sets the ordered_on of this ProjectDTOv2.


        :param ordered_on: The ordered_on of this ProjectDTOv2.
        :type ordered_on: int
        """

        self._ordered_on = ordered_on

    @property
    def origin(self):
        """Gets the origin of this ProjectDTOv2.


        :return: The origin of this ProjectDTOv2.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ProjectDTOv2.


        :param origin: The origin of this ProjectDTOv2.
        :type origin: str
        """

        self._origin = origin

    @property
    def people(self):
        """Gets the people of this ProjectDTOv2.


        :return: The people of this ProjectDTOv2.
        :rtype: PeopleDTO
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this ProjectDTOv2.


        :param people: The people of this ProjectDTOv2.
        :type people: PeopleDTO
        """

        self._people = people

    @property
    def project_id(self):
        """Gets the project_id of this ProjectDTOv2.


        :return: The project_id of this ProjectDTOv2.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectDTOv2.


        :param project_id: The project_id of this ProjectDTOv2.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_id_number(self):
        """Gets the project_id_number of this ProjectDTOv2.


        :return: The project_id_number of this ProjectDTOv2.
        :rtype: str
        """
        return self._project_id_number

    @project_id_number.setter
    def project_id_number(self, project_id_number):
        """Sets the project_id_number of this ProjectDTOv2.


        :param project_id_number: The project_id_number of this ProjectDTOv2.
        :type project_id_number: str
        """

        self._project_id_number = project_id_number

    @property
    def quote_id_number(self):
        """Gets the quote_id_number of this ProjectDTOv2.


        :return: The quote_id_number of this ProjectDTOv2.
        :rtype: str
        """
        return self._quote_id_number

    @quote_id_number.setter
    def quote_id_number(self, quote_id_number):
        """Sets the quote_id_number of this ProjectDTOv2.


        :param quote_id_number: The quote_id_number of this ProjectDTOv2.
        :type quote_id_number: str
        """

        self._quote_id_number = quote_id_number

    @property
    def service_id(self):
        """Gets the service_id of this ProjectDTOv2.


        :return: The service_id of this ProjectDTOv2.
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ProjectDTOv2.


        :param service_id: The service_id of this ProjectDTOv2.
        :type service_id: int
        """

        self._service_id = service_id

    @property
    def status(self):
        """Gets the status of this ProjectDTOv2.


        :return: The status of this ProjectDTOv2.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectDTOv2.


        :param status: The status of this ProjectDTOv2.
        :type status: str
        """

        self._status = status

    @property
    def volume(self):
        """Gets the volume of this ProjectDTOv2.


        :return: The volume of this ProjectDTOv2.
        :rtype: VolumeDTO
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ProjectDTOv2.


        :param volume: The volume of this ProjectDTOv2.
        :type volume: VolumeDTO
        """

        self._volume = volume
