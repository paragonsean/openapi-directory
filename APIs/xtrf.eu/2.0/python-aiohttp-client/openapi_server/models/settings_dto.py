# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.local_settings_dto import LocalSettingsDTO
from openapi_server import util


class SettingsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local: LocalSettingsDTO=None, name: str=None):
        """SettingsDTO - a model defined in OpenAPI

        :param local: The local of this SettingsDTO.
        :param name: The name of this SettingsDTO.
        """
        self.openapi_types = {
            'local': LocalSettingsDTO,
            'name': str
        }

        self.attribute_map = {
            'local': 'local',
            'name': 'name'
        }

        self._local = local
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SettingsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SettingsDTO of this SettingsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local(self):
        """Gets the local of this SettingsDTO.


        :return: The local of this SettingsDTO.
        :rtype: LocalSettingsDTO
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this SettingsDTO.


        :param local: The local of this SettingsDTO.
        :type local: LocalSettingsDTO
        """

        self._local = local

    @property
    def name(self):
        """Gets the name of this SettingsDTO.


        :return: The name of this SettingsDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SettingsDTO.


        :param name: The name of this SettingsDTO.
        :type name: str
        """

        self._name = name
