# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalculationUnitDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, can_be_used_in_cat_analysis: bool=None, cat_quantity_conversion_expression: str=None, default: bool=None, exchange_ratio: float=None, file_stats_conversion_expression: str=None, id: int=None, job_type_ids: List[int]=None, name: str=None, preferred: bool=None, symbol: str=None, time_to_quantity_conversion_expression: str=None, type: str=None):
        """CalculationUnitDTO - a model defined in OpenAPI

        :param active: The active of this CalculationUnitDTO.
        :param can_be_used_in_cat_analysis: The can_be_used_in_cat_analysis of this CalculationUnitDTO.
        :param cat_quantity_conversion_expression: The cat_quantity_conversion_expression of this CalculationUnitDTO.
        :param default: The default of this CalculationUnitDTO.
        :param exchange_ratio: The exchange_ratio of this CalculationUnitDTO.
        :param file_stats_conversion_expression: The file_stats_conversion_expression of this CalculationUnitDTO.
        :param id: The id of this CalculationUnitDTO.
        :param job_type_ids: The job_type_ids of this CalculationUnitDTO.
        :param name: The name of this CalculationUnitDTO.
        :param preferred: The preferred of this CalculationUnitDTO.
        :param symbol: The symbol of this CalculationUnitDTO.
        :param time_to_quantity_conversion_expression: The time_to_quantity_conversion_expression of this CalculationUnitDTO.
        :param type: The type of this CalculationUnitDTO.
        """
        self.openapi_types = {
            'active': bool,
            'can_be_used_in_cat_analysis': bool,
            'cat_quantity_conversion_expression': str,
            'default': bool,
            'exchange_ratio': float,
            'file_stats_conversion_expression': str,
            'id': int,
            'job_type_ids': List[int],
            'name': str,
            'preferred': bool,
            'symbol': str,
            'time_to_quantity_conversion_expression': str,
            'type': str
        }

        self.attribute_map = {
            'active': 'active',
            'can_be_used_in_cat_analysis': 'canBeUsedInCatAnalysis',
            'cat_quantity_conversion_expression': 'catQuantityConversionExpression',
            'default': 'default',
            'exchange_ratio': 'exchangeRatio',
            'file_stats_conversion_expression': 'fileStatsConversionExpression',
            'id': 'id',
            'job_type_ids': 'jobTypeIds',
            'name': 'name',
            'preferred': 'preferred',
            'symbol': 'symbol',
            'time_to_quantity_conversion_expression': 'timeToQuantityConversionExpression',
            'type': 'type'
        }

        self._active = active
        self._can_be_used_in_cat_analysis = can_be_used_in_cat_analysis
        self._cat_quantity_conversion_expression = cat_quantity_conversion_expression
        self._default = default
        self._exchange_ratio = exchange_ratio
        self._file_stats_conversion_expression = file_stats_conversion_expression
        self._id = id
        self._job_type_ids = job_type_ids
        self._name = name
        self._preferred = preferred
        self._symbol = symbol
        self._time_to_quantity_conversion_expression = time_to_quantity_conversion_expression
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculationUnitDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculationUnitDTO of this CalculationUnitDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this CalculationUnitDTO.

        should this value be available on the XTRF selection lists

        :return: The active of this CalculationUnitDTO.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CalculationUnitDTO.

        should this value be available on the XTRF selection lists

        :param active: The active of this CalculationUnitDTO.
        :type active: bool
        """

        self._active = active

    @property
    def can_be_used_in_cat_analysis(self):
        """Gets the can_be_used_in_cat_analysis of this CalculationUnitDTO.


        :return: The can_be_used_in_cat_analysis of this CalculationUnitDTO.
        :rtype: bool
        """
        return self._can_be_used_in_cat_analysis

    @can_be_used_in_cat_analysis.setter
    def can_be_used_in_cat_analysis(self, can_be_used_in_cat_analysis):
        """Sets the can_be_used_in_cat_analysis of this CalculationUnitDTO.


        :param can_be_used_in_cat_analysis: The can_be_used_in_cat_analysis of this CalculationUnitDTO.
        :type can_be_used_in_cat_analysis: bool
        """

        self._can_be_used_in_cat_analysis = can_be_used_in_cat_analysis

    @property
    def cat_quantity_conversion_expression(self):
        """Gets the cat_quantity_conversion_expression of this CalculationUnitDTO.


        :return: The cat_quantity_conversion_expression of this CalculationUnitDTO.
        :rtype: str
        """
        return self._cat_quantity_conversion_expression

    @cat_quantity_conversion_expression.setter
    def cat_quantity_conversion_expression(self, cat_quantity_conversion_expression):
        """Sets the cat_quantity_conversion_expression of this CalculationUnitDTO.


        :param cat_quantity_conversion_expression: The cat_quantity_conversion_expression of this CalculationUnitDTO.
        :type cat_quantity_conversion_expression: str
        """

        self._cat_quantity_conversion_expression = cat_quantity_conversion_expression

    @property
    def default(self):
        """Gets the default of this CalculationUnitDTO.

        should this value be set by default in XTRF selection lists

        :return: The default of this CalculationUnitDTO.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CalculationUnitDTO.

        should this value be set by default in XTRF selection lists

        :param default: The default of this CalculationUnitDTO.
        :type default: bool
        """

        self._default = default

    @property
    def exchange_ratio(self):
        """Gets the exchange_ratio of this CalculationUnitDTO.


        :return: The exchange_ratio of this CalculationUnitDTO.
        :rtype: float
        """
        return self._exchange_ratio

    @exchange_ratio.setter
    def exchange_ratio(self, exchange_ratio):
        """Sets the exchange_ratio of this CalculationUnitDTO.


        :param exchange_ratio: The exchange_ratio of this CalculationUnitDTO.
        :type exchange_ratio: float
        """

        self._exchange_ratio = exchange_ratio

    @property
    def file_stats_conversion_expression(self):
        """Gets the file_stats_conversion_expression of this CalculationUnitDTO.


        :return: The file_stats_conversion_expression of this CalculationUnitDTO.
        :rtype: str
        """
        return self._file_stats_conversion_expression

    @file_stats_conversion_expression.setter
    def file_stats_conversion_expression(self, file_stats_conversion_expression):
        """Sets the file_stats_conversion_expression of this CalculationUnitDTO.


        :param file_stats_conversion_expression: The file_stats_conversion_expression of this CalculationUnitDTO.
        :type file_stats_conversion_expression: str
        """

        self._file_stats_conversion_expression = file_stats_conversion_expression

    @property
    def id(self):
        """Gets the id of this CalculationUnitDTO.

        internal identifier

        :return: The id of this CalculationUnitDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculationUnitDTO.

        internal identifier

        :param id: The id of this CalculationUnitDTO.
        :type id: int
        """

        self._id = id

    @property
    def job_type_ids(self):
        """Gets the job_type_ids of this CalculationUnitDTO.


        :return: The job_type_ids of this CalculationUnitDTO.
        :rtype: List[int]
        """
        return self._job_type_ids

    @job_type_ids.setter
    def job_type_ids(self, job_type_ids):
        """Sets the job_type_ids of this CalculationUnitDTO.


        :param job_type_ids: The job_type_ids of this CalculationUnitDTO.
        :type job_type_ids: List[int]
        """

        self._job_type_ids = job_type_ids

    @property
    def name(self):
        """Gets the name of this CalculationUnitDTO.

        localised name (formatted in the current user's locale)

        :return: The name of this CalculationUnitDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalculationUnitDTO.

        localised name (formatted in the current user's locale)

        :param name: The name of this CalculationUnitDTO.
        :type name: str
        """

        self._name = name

    @property
    def preferred(self):
        """Gets the preferred of this CalculationUnitDTO.

        should this value be available on the top of XTRF selection lists, in the Preferred section

        :return: The preferred of this CalculationUnitDTO.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this CalculationUnitDTO.

        should this value be available on the top of XTRF selection lists, in the Preferred section

        :param preferred: The preferred of this CalculationUnitDTO.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def symbol(self):
        """Gets the symbol of this CalculationUnitDTO.


        :return: The symbol of this CalculationUnitDTO.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CalculationUnitDTO.


        :param symbol: The symbol of this CalculationUnitDTO.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def time_to_quantity_conversion_expression(self):
        """Gets the time_to_quantity_conversion_expression of this CalculationUnitDTO.


        :return: The time_to_quantity_conversion_expression of this CalculationUnitDTO.
        :rtype: str
        """
        return self._time_to_quantity_conversion_expression

    @time_to_quantity_conversion_expression.setter
    def time_to_quantity_conversion_expression(self, time_to_quantity_conversion_expression):
        """Sets the time_to_quantity_conversion_expression of this CalculationUnitDTO.


        :param time_to_quantity_conversion_expression: The time_to_quantity_conversion_expression of this CalculationUnitDTO.
        :type time_to_quantity_conversion_expression: str
        """

        self._time_to_quantity_conversion_expression = time_to_quantity_conversion_expression

    @property
    def type(self):
        """Gets the type of this CalculationUnitDTO.


        :return: The type of this CalculationUnitDTO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalculationUnitDTO.


        :param type: The type of this CalculationUnitDTO.
        :type type: str
        """
        allowed_values = ["TIME", "VOLUME", "PERCENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
