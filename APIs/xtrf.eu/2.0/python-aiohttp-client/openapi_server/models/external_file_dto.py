# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_combination_dto import LanguageCombinationDto
from openapi_server import util


class ExternalFileDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, external_info: Dict[str, str]=None, filename: str=None, language_combination_ids: List[LanguageCombinationDto]=None, language_ids: List[int]=None):
        """ExternalFileDto - a model defined in OpenAPI

        :param category: The category of this ExternalFileDto.
        :param external_info: The external_info of this ExternalFileDto.
        :param filename: The filename of this ExternalFileDto.
        :param language_combination_ids: The language_combination_ids of this ExternalFileDto.
        :param language_ids: The language_ids of this ExternalFileDto.
        """
        self.openapi_types = {
            'category': str,
            'external_info': Dict[str, str],
            'filename': str,
            'language_combination_ids': List[LanguageCombinationDto],
            'language_ids': List[int]
        }

        self.attribute_map = {
            'category': 'category',
            'external_info': 'externalInfo',
            'filename': 'filename',
            'language_combination_ids': 'languageCombinationIds',
            'language_ids': 'languageIds'
        }

        self._category = category
        self._external_info = external_info
        self._filename = filename
        self._language_combination_ids = language_combination_ids
        self._language_ids = language_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalFileDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalFileDto of this ExternalFileDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ExternalFileDto.


        :return: The category of this ExternalFileDto.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ExternalFileDto.


        :param category: The category of this ExternalFileDto.
        :type category: str
        """

        self._category = category

    @property
    def external_info(self):
        """Gets the external_info of this ExternalFileDto.


        :return: The external_info of this ExternalFileDto.
        :rtype: Dict[str, str]
        """
        return self._external_info

    @external_info.setter
    def external_info(self, external_info):
        """Sets the external_info of this ExternalFileDto.


        :param external_info: The external_info of this ExternalFileDto.
        :type external_info: Dict[str, str]
        """

        self._external_info = external_info

    @property
    def filename(self):
        """Gets the filename of this ExternalFileDto.


        :return: The filename of this ExternalFileDto.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ExternalFileDto.


        :param filename: The filename of this ExternalFileDto.
        :type filename: str
        """

        self._filename = filename

    @property
    def language_combination_ids(self):
        """Gets the language_combination_ids of this ExternalFileDto.


        :return: The language_combination_ids of this ExternalFileDto.
        :rtype: List[LanguageCombinationDto]
        """
        return self._language_combination_ids

    @language_combination_ids.setter
    def language_combination_ids(self, language_combination_ids):
        """Sets the language_combination_ids of this ExternalFileDto.


        :param language_combination_ids: The language_combination_ids of this ExternalFileDto.
        :type language_combination_ids: List[LanguageCombinationDto]
        """

        self._language_combination_ids = language_combination_ids

    @property
    def language_ids(self):
        """Gets the language_ids of this ExternalFileDto.


        :return: The language_ids of this ExternalFileDto.
        :rtype: List[int]
        """
        return self._language_ids

    @language_ids.setter
    def language_ids(self, language_ids):
        """Sets the language_ids of this ExternalFileDto.


        :param language_ids: The language_ids of this ExternalFileDto.
        :type language_ids: List[int]
        """

        self._language_ids = language_ids
