# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvitationStatisticsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, already_registered_persons_count: int=None, invited_persons_count: int=None, providers_with_already_registered_person_count: int=None, providers_with_invited_person_count: int=None, providers_without_person_count: int=None):
        """InvitationStatisticsDTO - a model defined in OpenAPI

        :param already_registered_persons_count: The already_registered_persons_count of this InvitationStatisticsDTO.
        :param invited_persons_count: The invited_persons_count of this InvitationStatisticsDTO.
        :param providers_with_already_registered_person_count: The providers_with_already_registered_person_count of this InvitationStatisticsDTO.
        :param providers_with_invited_person_count: The providers_with_invited_person_count of this InvitationStatisticsDTO.
        :param providers_without_person_count: The providers_without_person_count of this InvitationStatisticsDTO.
        """
        self.openapi_types = {
            'already_registered_persons_count': int,
            'invited_persons_count': int,
            'providers_with_already_registered_person_count': int,
            'providers_with_invited_person_count': int,
            'providers_without_person_count': int
        }

        self.attribute_map = {
            'already_registered_persons_count': 'alreadyRegisteredPersonsCount',
            'invited_persons_count': 'invitedPersonsCount',
            'providers_with_already_registered_person_count': 'providersWithAlreadyRegisteredPersonCount',
            'providers_with_invited_person_count': 'providersWithInvitedPersonCount',
            'providers_without_person_count': 'providersWithoutPersonCount'
        }

        self._already_registered_persons_count = already_registered_persons_count
        self._invited_persons_count = invited_persons_count
        self._providers_with_already_registered_person_count = providers_with_already_registered_person_count
        self._providers_with_invited_person_count = providers_with_invited_person_count
        self._providers_without_person_count = providers_without_person_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvitationStatisticsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvitationStatisticsDTO of this InvitationStatisticsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def already_registered_persons_count(self):
        """Gets the already_registered_persons_count of this InvitationStatisticsDTO.


        :return: The already_registered_persons_count of this InvitationStatisticsDTO.
        :rtype: int
        """
        return self._already_registered_persons_count

    @already_registered_persons_count.setter
    def already_registered_persons_count(self, already_registered_persons_count):
        """Sets the already_registered_persons_count of this InvitationStatisticsDTO.


        :param already_registered_persons_count: The already_registered_persons_count of this InvitationStatisticsDTO.
        :type already_registered_persons_count: int
        """

        self._already_registered_persons_count = already_registered_persons_count

    @property
    def invited_persons_count(self):
        """Gets the invited_persons_count of this InvitationStatisticsDTO.


        :return: The invited_persons_count of this InvitationStatisticsDTO.
        :rtype: int
        """
        return self._invited_persons_count

    @invited_persons_count.setter
    def invited_persons_count(self, invited_persons_count):
        """Sets the invited_persons_count of this InvitationStatisticsDTO.


        :param invited_persons_count: The invited_persons_count of this InvitationStatisticsDTO.
        :type invited_persons_count: int
        """

        self._invited_persons_count = invited_persons_count

    @property
    def providers_with_already_registered_person_count(self):
        """Gets the providers_with_already_registered_person_count of this InvitationStatisticsDTO.


        :return: The providers_with_already_registered_person_count of this InvitationStatisticsDTO.
        :rtype: int
        """
        return self._providers_with_already_registered_person_count

    @providers_with_already_registered_person_count.setter
    def providers_with_already_registered_person_count(self, providers_with_already_registered_person_count):
        """Sets the providers_with_already_registered_person_count of this InvitationStatisticsDTO.


        :param providers_with_already_registered_person_count: The providers_with_already_registered_person_count of this InvitationStatisticsDTO.
        :type providers_with_already_registered_person_count: int
        """

        self._providers_with_already_registered_person_count = providers_with_already_registered_person_count

    @property
    def providers_with_invited_person_count(self):
        """Gets the providers_with_invited_person_count of this InvitationStatisticsDTO.


        :return: The providers_with_invited_person_count of this InvitationStatisticsDTO.
        :rtype: int
        """
        return self._providers_with_invited_person_count

    @providers_with_invited_person_count.setter
    def providers_with_invited_person_count(self, providers_with_invited_person_count):
        """Sets the providers_with_invited_person_count of this InvitationStatisticsDTO.


        :param providers_with_invited_person_count: The providers_with_invited_person_count of this InvitationStatisticsDTO.
        :type providers_with_invited_person_count: int
        """

        self._providers_with_invited_person_count = providers_with_invited_person_count

    @property
    def providers_without_person_count(self):
        """Gets the providers_without_person_count of this InvitationStatisticsDTO.


        :return: The providers_without_person_count of this InvitationStatisticsDTO.
        :rtype: int
        """
        return self._providers_without_person_count

    @providers_without_person_count.setter
    def providers_without_person_count(self, providers_without_person_count):
        """Sets the providers_without_person_count of this InvitationStatisticsDTO.


        :param providers_without_person_count: The providers_without_person_count of this InvitationStatisticsDTO.
        :type providers_without_person_count: int
        """

        self._providers_without_person_count = providers_without_person_count
