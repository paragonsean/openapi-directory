# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provider_invoice_dates_dto import ProviderInvoiceDatesDTO
from openapi_server import util


class ProviderInvoiceDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_id: int=None, dates: ProviderInvoiceDatesDTO=None, draft_number: str=None, final_number: str=None, id: int=None, internal_number: str=None, jobs_net_value: float=None, notes_from_provider: str=None, payment_status: str=None, provider_id: int=None, status: str=None, total_gross: float=None, total_gross_in_words: str=None, total_netto: float=None):
        """ProviderInvoiceDTO - a model defined in OpenAPI

        :param currency_id: The currency_id of this ProviderInvoiceDTO.
        :param dates: The dates of this ProviderInvoiceDTO.
        :param draft_number: The draft_number of this ProviderInvoiceDTO.
        :param final_number: The final_number of this ProviderInvoiceDTO.
        :param id: The id of this ProviderInvoiceDTO.
        :param internal_number: The internal_number of this ProviderInvoiceDTO.
        :param jobs_net_value: The jobs_net_value of this ProviderInvoiceDTO.
        :param notes_from_provider: The notes_from_provider of this ProviderInvoiceDTO.
        :param payment_status: The payment_status of this ProviderInvoiceDTO.
        :param provider_id: The provider_id of this ProviderInvoiceDTO.
        :param status: The status of this ProviderInvoiceDTO.
        :param total_gross: The total_gross of this ProviderInvoiceDTO.
        :param total_gross_in_words: The total_gross_in_words of this ProviderInvoiceDTO.
        :param total_netto: The total_netto of this ProviderInvoiceDTO.
        """
        self.openapi_types = {
            'currency_id': int,
            'dates': ProviderInvoiceDatesDTO,
            'draft_number': str,
            'final_number': str,
            'id': int,
            'internal_number': str,
            'jobs_net_value': float,
            'notes_from_provider': str,
            'payment_status': str,
            'provider_id': int,
            'status': str,
            'total_gross': float,
            'total_gross_in_words': str,
            'total_netto': float
        }

        self.attribute_map = {
            'currency_id': 'currencyId',
            'dates': 'dates',
            'draft_number': 'draftNumber',
            'final_number': 'finalNumber',
            'id': 'id',
            'internal_number': 'internalNumber',
            'jobs_net_value': 'jobsNetValue',
            'notes_from_provider': 'notesFromProvider',
            'payment_status': 'paymentStatus',
            'provider_id': 'providerId',
            'status': 'status',
            'total_gross': 'totalGross',
            'total_gross_in_words': 'totalGrossInWords',
            'total_netto': 'totalNetto'
        }

        self._currency_id = currency_id
        self._dates = dates
        self._draft_number = draft_number
        self._final_number = final_number
        self._id = id
        self._internal_number = internal_number
        self._jobs_net_value = jobs_net_value
        self._notes_from_provider = notes_from_provider
        self._payment_status = payment_status
        self._provider_id = provider_id
        self._status = status
        self._total_gross = total_gross
        self._total_gross_in_words = total_gross_in_words
        self._total_netto = total_netto

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProviderInvoiceDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProviderInvoiceDTO of this ProviderInvoiceDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_id(self):
        """Gets the currency_id of this ProviderInvoiceDTO.


        :return: The currency_id of this ProviderInvoiceDTO.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ProviderInvoiceDTO.


        :param currency_id: The currency_id of this ProviderInvoiceDTO.
        :type currency_id: int
        """

        self._currency_id = currency_id

    @property
    def dates(self):
        """Gets the dates of this ProviderInvoiceDTO.


        :return: The dates of this ProviderInvoiceDTO.
        :rtype: ProviderInvoiceDatesDTO
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this ProviderInvoiceDTO.


        :param dates: The dates of this ProviderInvoiceDTO.
        :type dates: ProviderInvoiceDatesDTO
        """

        self._dates = dates

    @property
    def draft_number(self):
        """Gets the draft_number of this ProviderInvoiceDTO.


        :return: The draft_number of this ProviderInvoiceDTO.
        :rtype: str
        """
        return self._draft_number

    @draft_number.setter
    def draft_number(self, draft_number):
        """Sets the draft_number of this ProviderInvoiceDTO.


        :param draft_number: The draft_number of this ProviderInvoiceDTO.
        :type draft_number: str
        """

        self._draft_number = draft_number

    @property
    def final_number(self):
        """Gets the final_number of this ProviderInvoiceDTO.


        :return: The final_number of this ProviderInvoiceDTO.
        :rtype: str
        """
        return self._final_number

    @final_number.setter
    def final_number(self, final_number):
        """Sets the final_number of this ProviderInvoiceDTO.


        :param final_number: The final_number of this ProviderInvoiceDTO.
        :type final_number: str
        """

        self._final_number = final_number

    @property
    def id(self):
        """Gets the id of this ProviderInvoiceDTO.


        :return: The id of this ProviderInvoiceDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderInvoiceDTO.


        :param id: The id of this ProviderInvoiceDTO.
        :type id: int
        """

        self._id = id

    @property
    def internal_number(self):
        """Gets the internal_number of this ProviderInvoiceDTO.


        :return: The internal_number of this ProviderInvoiceDTO.
        :rtype: str
        """
        return self._internal_number

    @internal_number.setter
    def internal_number(self, internal_number):
        """Sets the internal_number of this ProviderInvoiceDTO.


        :param internal_number: The internal_number of this ProviderInvoiceDTO.
        :type internal_number: str
        """

        self._internal_number = internal_number

    @property
    def jobs_net_value(self):
        """Gets the jobs_net_value of this ProviderInvoiceDTO.


        :return: The jobs_net_value of this ProviderInvoiceDTO.
        :rtype: float
        """
        return self._jobs_net_value

    @jobs_net_value.setter
    def jobs_net_value(self, jobs_net_value):
        """Sets the jobs_net_value of this ProviderInvoiceDTO.


        :param jobs_net_value: The jobs_net_value of this ProviderInvoiceDTO.
        :type jobs_net_value: float
        """

        self._jobs_net_value = jobs_net_value

    @property
    def notes_from_provider(self):
        """Gets the notes_from_provider of this ProviderInvoiceDTO.


        :return: The notes_from_provider of this ProviderInvoiceDTO.
        :rtype: str
        """
        return self._notes_from_provider

    @notes_from_provider.setter
    def notes_from_provider(self, notes_from_provider):
        """Sets the notes_from_provider of this ProviderInvoiceDTO.


        :param notes_from_provider: The notes_from_provider of this ProviderInvoiceDTO.
        :type notes_from_provider: str
        """

        self._notes_from_provider = notes_from_provider

    @property
    def payment_status(self):
        """Gets the payment_status of this ProviderInvoiceDTO.


        :return: The payment_status of this ProviderInvoiceDTO.
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this ProviderInvoiceDTO.


        :param payment_status: The payment_status of this ProviderInvoiceDTO.
        :type payment_status: str
        """
        allowed_values = ["NOT_PAID", "FULLY_PAID", "IRRECOVERABLE", "PARTIALLY_PAID"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def provider_id(self):
        """Gets the provider_id of this ProviderInvoiceDTO.


        :return: The provider_id of this ProviderInvoiceDTO.
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ProviderInvoiceDTO.


        :param provider_id: The provider_id of this ProviderInvoiceDTO.
        :type provider_id: int
        """

        self._provider_id = provider_id

    @property
    def status(self):
        """Gets the status of this ProviderInvoiceDTO.


        :return: The status of this ProviderInvoiceDTO.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProviderInvoiceDTO.


        :param status: The status of this ProviderInvoiceDTO.
        :type status: str
        """
        allowed_values = ["POSTPONED", "TO_BE_SENT", "SENT", "CONFIRMED", "BILL_CREATED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_gross(self):
        """Gets the total_gross of this ProviderInvoiceDTO.


        :return: The total_gross of this ProviderInvoiceDTO.
        :rtype: float
        """
        return self._total_gross

    @total_gross.setter
    def total_gross(self, total_gross):
        """Sets the total_gross of this ProviderInvoiceDTO.


        :param total_gross: The total_gross of this ProviderInvoiceDTO.
        :type total_gross: float
        """

        self._total_gross = total_gross

    @property
    def total_gross_in_words(self):
        """Gets the total_gross_in_words of this ProviderInvoiceDTO.


        :return: The total_gross_in_words of this ProviderInvoiceDTO.
        :rtype: str
        """
        return self._total_gross_in_words

    @total_gross_in_words.setter
    def total_gross_in_words(self, total_gross_in_words):
        """Sets the total_gross_in_words of this ProviderInvoiceDTO.


        :param total_gross_in_words: The total_gross_in_words of this ProviderInvoiceDTO.
        :type total_gross_in_words: str
        """

        self._total_gross_in_words = total_gross_in_words

    @property
    def total_netto(self):
        """Gets the total_netto of this ProviderInvoiceDTO.


        :return: The total_netto of this ProviderInvoiceDTO.
        :rtype: float
        """
        return self._total_netto

    @total_netto.setter
    def total_netto(self, total_netto):
        """Sets the total_netto of this ProviderInvoiceDTO.


        :param total_netto: The total_netto of this ProviderInvoiceDTO.
        :type total_netto: float
        """

        self._total_netto = total_netto
