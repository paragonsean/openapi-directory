# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerDetailsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line: str=None, city: str=None, country: str=None, country_id: int=None, name: str=None, postal_code: str=None, vat_ue: str=None):
        """CustomerDetailsDTO - a model defined in OpenAPI

        :param address_line: The address_line of this CustomerDetailsDTO.
        :param city: The city of this CustomerDetailsDTO.
        :param country: The country of this CustomerDetailsDTO.
        :param country_id: The country_id of this CustomerDetailsDTO.
        :param name: The name of this CustomerDetailsDTO.
        :param postal_code: The postal_code of this CustomerDetailsDTO.
        :param vat_ue: The vat_ue of this CustomerDetailsDTO.
        """
        self.openapi_types = {
            'address_line': str,
            'city': str,
            'country': str,
            'country_id': int,
            'name': str,
            'postal_code': str,
            'vat_ue': str
        }

        self.attribute_map = {
            'address_line': 'addressLine',
            'city': 'city',
            'country': 'country',
            'country_id': 'countryId',
            'name': 'name',
            'postal_code': 'postalCode',
            'vat_ue': 'vatUE'
        }

        self._address_line = address_line
        self._city = city
        self._country = country
        self._country_id = country_id
        self._name = name
        self._postal_code = postal_code
        self._vat_ue = vat_ue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDetailsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerDetailsDTO of this CustomerDetailsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line(self):
        """Gets the address_line of this CustomerDetailsDTO.


        :return: The address_line of this CustomerDetailsDTO.
        :rtype: str
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line):
        """Sets the address_line of this CustomerDetailsDTO.


        :param address_line: The address_line of this CustomerDetailsDTO.
        :type address_line: str
        """

        self._address_line = address_line

    @property
    def city(self):
        """Gets the city of this CustomerDetailsDTO.


        :return: The city of this CustomerDetailsDTO.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerDetailsDTO.


        :param city: The city of this CustomerDetailsDTO.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this CustomerDetailsDTO.


        :return: The country of this CustomerDetailsDTO.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomerDetailsDTO.


        :param country: The country of this CustomerDetailsDTO.
        :type country: str
        """

        self._country = country

    @property
    def country_id(self):
        """Gets the country_id of this CustomerDetailsDTO.


        :return: The country_id of this CustomerDetailsDTO.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CustomerDetailsDTO.


        :param country_id: The country_id of this CustomerDetailsDTO.
        :type country_id: int
        """

        self._country_id = country_id

    @property
    def name(self):
        """Gets the name of this CustomerDetailsDTO.


        :return: The name of this CustomerDetailsDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomerDetailsDTO.


        :param name: The name of this CustomerDetailsDTO.
        :type name: str
        """

        self._name = name

    @property
    def postal_code(self):
        """Gets the postal_code of this CustomerDetailsDTO.


        :return: The postal_code of this CustomerDetailsDTO.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CustomerDetailsDTO.


        :param postal_code: The postal_code of this CustomerDetailsDTO.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def vat_ue(self):
        """Gets the vat_ue of this CustomerDetailsDTO.


        :return: The vat_ue of this CustomerDetailsDTO.
        :rtype: str
        """
        return self._vat_ue

    @vat_ue.setter
    def vat_ue(self, vat_ue):
        """Sets the vat_ue of this CustomerDetailsDTO.


        :param vat_ue: The vat_ue of this CustomerDetailsDTO.
        :type vat_ue: str
        """

        self._vat_ue = vat_ue
