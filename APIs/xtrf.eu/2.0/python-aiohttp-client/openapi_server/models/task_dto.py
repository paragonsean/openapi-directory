# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classic_people_dto import ClassicPeopleDTO
from openapi_server.models.common_language_combination_dto import CommonLanguageCombinationDTO
from openapi_server.models.custom_field_dto import CustomFieldDTO
from openapi_server.models.instructions_dto import InstructionsDTO
from openapi_server.models.project_dates_dto import ProjectDatesDTO
from openapi_server.models.task_finance_dto import TaskFinanceDTO
from openapi_server.models.task_jobs_dto import TaskJobsDTO
from openapi_server import util


class TaskDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_task_po_number: str=None, custom_fields: List[CustomFieldDTO]=None, dates: ProjectDatesDTO=None, finance: TaskFinanceDTO=None, id: int=None, id_number: str=None, instructions: InstructionsDTO=None, jobs: TaskJobsDTO=None, language_combination: CommonLanguageCombinationDTO=None, name: str=None, people: ClassicPeopleDTO=None, project_id: int=None, quote_id: int=None):
        """TaskDTO - a model defined in OpenAPI

        :param client_task_po_number: The client_task_po_number of this TaskDTO.
        :param custom_fields: The custom_fields of this TaskDTO.
        :param dates: The dates of this TaskDTO.
        :param finance: The finance of this TaskDTO.
        :param id: The id of this TaskDTO.
        :param id_number: The id_number of this TaskDTO.
        :param instructions: The instructions of this TaskDTO.
        :param jobs: The jobs of this TaskDTO.
        :param language_combination: The language_combination of this TaskDTO.
        :param name: The name of this TaskDTO.
        :param people: The people of this TaskDTO.
        :param project_id: The project_id of this TaskDTO.
        :param quote_id: The quote_id of this TaskDTO.
        """
        self.openapi_types = {
            'client_task_po_number': str,
            'custom_fields': List[CustomFieldDTO],
            'dates': ProjectDatesDTO,
            'finance': TaskFinanceDTO,
            'id': int,
            'id_number': str,
            'instructions': InstructionsDTO,
            'jobs': TaskJobsDTO,
            'language_combination': CommonLanguageCombinationDTO,
            'name': str,
            'people': ClassicPeopleDTO,
            'project_id': int,
            'quote_id': int
        }

        self.attribute_map = {
            'client_task_po_number': 'clientTaskPONumber',
            'custom_fields': 'customFields',
            'dates': 'dates',
            'finance': 'finance',
            'id': 'id',
            'id_number': 'idNumber',
            'instructions': 'instructions',
            'jobs': 'jobs',
            'language_combination': 'languageCombination',
            'name': 'name',
            'people': 'people',
            'project_id': 'projectId',
            'quote_id': 'quoteId'
        }

        self._client_task_po_number = client_task_po_number
        self._custom_fields = custom_fields
        self._dates = dates
        self._finance = finance
        self._id = id
        self._id_number = id_number
        self._instructions = instructions
        self._jobs = jobs
        self._language_combination = language_combination
        self._name = name
        self._people = people
        self._project_id = project_id
        self._quote_id = quote_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskDTO of this TaskDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_task_po_number(self):
        """Gets the client_task_po_number of this TaskDTO.

        client task PO number

        :return: The client_task_po_number of this TaskDTO.
        :rtype: str
        """
        return self._client_task_po_number

    @client_task_po_number.setter
    def client_task_po_number(self, client_task_po_number):
        """Sets the client_task_po_number of this TaskDTO.

        client task PO number

        :param client_task_po_number: The client_task_po_number of this TaskDTO.
        :type client_task_po_number: str
        """

        self._client_task_po_number = client_task_po_number

    @property
    def custom_fields(self):
        """Gets the custom_fields of this TaskDTO.


        :return: The custom_fields of this TaskDTO.
        :rtype: List[CustomFieldDTO]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this TaskDTO.


        :param custom_fields: The custom_fields of this TaskDTO.
        :type custom_fields: List[CustomFieldDTO]
        """

        self._custom_fields = custom_fields

    @property
    def dates(self):
        """Gets the dates of this TaskDTO.


        :return: The dates of this TaskDTO.
        :rtype: ProjectDatesDTO
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this TaskDTO.


        :param dates: The dates of this TaskDTO.
        :type dates: ProjectDatesDTO
        """

        self._dates = dates

    @property
    def finance(self):
        """Gets the finance of this TaskDTO.


        :return: The finance of this TaskDTO.
        :rtype: TaskFinanceDTO
        """
        return self._finance

    @finance.setter
    def finance(self, finance):
        """Sets the finance of this TaskDTO.


        :param finance: The finance of this TaskDTO.
        :type finance: TaskFinanceDTO
        """

        self._finance = finance

    @property
    def id(self):
        """Gets the id of this TaskDTO.

        internal identifier

        :return: The id of this TaskDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskDTO.

        internal identifier

        :param id: The id of this TaskDTO.
        :type id: int
        """

        self._id = id

    @property
    def id_number(self):
        """Gets the id_number of this TaskDTO.

        identifier

        :return: The id_number of this TaskDTO.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this TaskDTO.

        identifier

        :param id_number: The id_number of this TaskDTO.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def instructions(self):
        """Gets the instructions of this TaskDTO.


        :return: The instructions of this TaskDTO.
        :rtype: InstructionsDTO
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this TaskDTO.


        :param instructions: The instructions of this TaskDTO.
        :type instructions: InstructionsDTO
        """

        self._instructions = instructions

    @property
    def jobs(self):
        """Gets the jobs of this TaskDTO.


        :return: The jobs of this TaskDTO.
        :rtype: TaskJobsDTO
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this TaskDTO.


        :param jobs: The jobs of this TaskDTO.
        :type jobs: TaskJobsDTO
        """

        self._jobs = jobs

    @property
    def language_combination(self):
        """Gets the language_combination of this TaskDTO.


        :return: The language_combination of this TaskDTO.
        :rtype: CommonLanguageCombinationDTO
        """
        return self._language_combination

    @language_combination.setter
    def language_combination(self, language_combination):
        """Sets the language_combination of this TaskDTO.


        :param language_combination: The language_combination of this TaskDTO.
        :type language_combination: CommonLanguageCombinationDTO
        """

        self._language_combination = language_combination

    @property
    def name(self):
        """Gets the name of this TaskDTO.

        name

        :return: The name of this TaskDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskDTO.

        name

        :param name: The name of this TaskDTO.
        :type name: str
        """

        self._name = name

    @property
    def people(self):
        """Gets the people of this TaskDTO.


        :return: The people of this TaskDTO.
        :rtype: ClassicPeopleDTO
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this TaskDTO.


        :param people: The people of this TaskDTO.
        :type people: ClassicPeopleDTO
        """

        self._people = people

    @property
    def project_id(self):
        """Gets the project_id of this TaskDTO.

        project's internal identifier

        :return: The project_id of this TaskDTO.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TaskDTO.

        project's internal identifier

        :param project_id: The project_id of this TaskDTO.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def quote_id(self):
        """Gets the quote_id of this TaskDTO.

        quote's internal identifier

        :return: The quote_id of this TaskDTO.
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this TaskDTO.

        quote's internal identifier

        :param quote_id: The quote_id of this TaskDTO.
        :type quote_id: int
        """

        self._quote_id = quote_id
