# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.events_queue import EventsQueue
from openapi_server.models.identifier import Identifier
from openapi_server import util


class DictionaryEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, and_clear_events_queue: EventsQueue=None, audit_display_name: str=None, audit_path: str=None, class_name_key: str=None, class_simple_name: str=None, compound_id: str=None, default_entity: bool=None, display_name: str=None, entity_marked_as_not_supposed_to_be_persisted: bool=None, events_queue_ready_to_be_dispatched: bool=None, id: int=None, identifier: Identifier=None, internal_description: str=None, last_modification_date: datetime=None, name: str=None, packed_compound_id: str=None, prefered_entity: bool=None, preferred: bool=None, version: int=None):
        """DictionaryEntity - a model defined in OpenAPI

        :param active: The active of this DictionaryEntity.
        :param and_clear_events_queue: The and_clear_events_queue of this DictionaryEntity.
        :param audit_display_name: The audit_display_name of this DictionaryEntity.
        :param audit_path: The audit_path of this DictionaryEntity.
        :param class_name_key: The class_name_key of this DictionaryEntity.
        :param class_simple_name: The class_simple_name of this DictionaryEntity.
        :param compound_id: The compound_id of this DictionaryEntity.
        :param default_entity: The default_entity of this DictionaryEntity.
        :param display_name: The display_name of this DictionaryEntity.
        :param entity_marked_as_not_supposed_to_be_persisted: The entity_marked_as_not_supposed_to_be_persisted of this DictionaryEntity.
        :param events_queue_ready_to_be_dispatched: The events_queue_ready_to_be_dispatched of this DictionaryEntity.
        :param id: The id of this DictionaryEntity.
        :param identifier: The identifier of this DictionaryEntity.
        :param internal_description: The internal_description of this DictionaryEntity.
        :param last_modification_date: The last_modification_date of this DictionaryEntity.
        :param name: The name of this DictionaryEntity.
        :param packed_compound_id: The packed_compound_id of this DictionaryEntity.
        :param prefered_entity: The prefered_entity of this DictionaryEntity.
        :param preferred: The preferred of this DictionaryEntity.
        :param version: The version of this DictionaryEntity.
        """
        self.openapi_types = {
            'active': bool,
            'and_clear_events_queue': EventsQueue,
            'audit_display_name': str,
            'audit_path': str,
            'class_name_key': str,
            'class_simple_name': str,
            'compound_id': str,
            'default_entity': bool,
            'display_name': str,
            'entity_marked_as_not_supposed_to_be_persisted': bool,
            'events_queue_ready_to_be_dispatched': bool,
            'id': int,
            'identifier': Identifier,
            'internal_description': str,
            'last_modification_date': datetime,
            'name': str,
            'packed_compound_id': str,
            'prefered_entity': bool,
            'preferred': bool,
            'version': int
        }

        self.attribute_map = {
            'active': 'active',
            'and_clear_events_queue': 'andClearEventsQueue',
            'audit_display_name': 'auditDisplayName',
            'audit_path': 'auditPath',
            'class_name_key': 'classNameKey',
            'class_simple_name': 'classSimpleName',
            'compound_id': 'compoundId',
            'default_entity': 'defaultEntity',
            'display_name': 'displayName',
            'entity_marked_as_not_supposed_to_be_persisted': 'entityMarkedAsNotSupposedToBePersisted',
            'events_queue_ready_to_be_dispatched': 'eventsQueueReadyToBeDispatched',
            'id': 'id',
            'identifier': 'identifier',
            'internal_description': 'internalDescription',
            'last_modification_date': 'lastModificationDate',
            'name': 'name',
            'packed_compound_id': 'packedCompoundId',
            'prefered_entity': 'preferedEntity',
            'preferred': 'preferred',
            'version': 'version'
        }

        self._active = active
        self._and_clear_events_queue = and_clear_events_queue
        self._audit_display_name = audit_display_name
        self._audit_path = audit_path
        self._class_name_key = class_name_key
        self._class_simple_name = class_simple_name
        self._compound_id = compound_id
        self._default_entity = default_entity
        self._display_name = display_name
        self._entity_marked_as_not_supposed_to_be_persisted = entity_marked_as_not_supposed_to_be_persisted
        self._events_queue_ready_to_be_dispatched = events_queue_ready_to_be_dispatched
        self._id = id
        self._identifier = identifier
        self._internal_description = internal_description
        self._last_modification_date = last_modification_date
        self._name = name
        self._packed_compound_id = packed_compound_id
        self._prefered_entity = prefered_entity
        self._preferred = preferred
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DictionaryEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DictionaryEntity of this DictionaryEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this DictionaryEntity.


        :return: The active of this DictionaryEntity.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DictionaryEntity.


        :param active: The active of this DictionaryEntity.
        :type active: bool
        """

        self._active = active

    @property
    def and_clear_events_queue(self):
        """Gets the and_clear_events_queue of this DictionaryEntity.


        :return: The and_clear_events_queue of this DictionaryEntity.
        :rtype: EventsQueue
        """
        return self._and_clear_events_queue

    @and_clear_events_queue.setter
    def and_clear_events_queue(self, and_clear_events_queue):
        """Sets the and_clear_events_queue of this DictionaryEntity.


        :param and_clear_events_queue: The and_clear_events_queue of this DictionaryEntity.
        :type and_clear_events_queue: EventsQueue
        """

        self._and_clear_events_queue = and_clear_events_queue

    @property
    def audit_display_name(self):
        """Gets the audit_display_name of this DictionaryEntity.


        :return: The audit_display_name of this DictionaryEntity.
        :rtype: str
        """
        return self._audit_display_name

    @audit_display_name.setter
    def audit_display_name(self, audit_display_name):
        """Sets the audit_display_name of this DictionaryEntity.


        :param audit_display_name: The audit_display_name of this DictionaryEntity.
        :type audit_display_name: str
        """

        self._audit_display_name = audit_display_name

    @property
    def audit_path(self):
        """Gets the audit_path of this DictionaryEntity.


        :return: The audit_path of this DictionaryEntity.
        :rtype: str
        """
        return self._audit_path

    @audit_path.setter
    def audit_path(self, audit_path):
        """Sets the audit_path of this DictionaryEntity.


        :param audit_path: The audit_path of this DictionaryEntity.
        :type audit_path: str
        """

        self._audit_path = audit_path

    @property
    def class_name_key(self):
        """Gets the class_name_key of this DictionaryEntity.


        :return: The class_name_key of this DictionaryEntity.
        :rtype: str
        """
        return self._class_name_key

    @class_name_key.setter
    def class_name_key(self, class_name_key):
        """Sets the class_name_key of this DictionaryEntity.


        :param class_name_key: The class_name_key of this DictionaryEntity.
        :type class_name_key: str
        """

        self._class_name_key = class_name_key

    @property
    def class_simple_name(self):
        """Gets the class_simple_name of this DictionaryEntity.


        :return: The class_simple_name of this DictionaryEntity.
        :rtype: str
        """
        return self._class_simple_name

    @class_simple_name.setter
    def class_simple_name(self, class_simple_name):
        """Sets the class_simple_name of this DictionaryEntity.


        :param class_simple_name: The class_simple_name of this DictionaryEntity.
        :type class_simple_name: str
        """

        self._class_simple_name = class_simple_name

    @property
    def compound_id(self):
        """Gets the compound_id of this DictionaryEntity.


        :return: The compound_id of this DictionaryEntity.
        :rtype: str
        """
        return self._compound_id

    @compound_id.setter
    def compound_id(self, compound_id):
        """Sets the compound_id of this DictionaryEntity.


        :param compound_id: The compound_id of this DictionaryEntity.
        :type compound_id: str
        """

        self._compound_id = compound_id

    @property
    def default_entity(self):
        """Gets the default_entity of this DictionaryEntity.


        :return: The default_entity of this DictionaryEntity.
        :rtype: bool
        """
        return self._default_entity

    @default_entity.setter
    def default_entity(self, default_entity):
        """Sets the default_entity of this DictionaryEntity.


        :param default_entity: The default_entity of this DictionaryEntity.
        :type default_entity: bool
        """

        self._default_entity = default_entity

    @property
    def display_name(self):
        """Gets the display_name of this DictionaryEntity.


        :return: The display_name of this DictionaryEntity.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DictionaryEntity.


        :param display_name: The display_name of this DictionaryEntity.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_marked_as_not_supposed_to_be_persisted(self):
        """Gets the entity_marked_as_not_supposed_to_be_persisted of this DictionaryEntity.


        :return: The entity_marked_as_not_supposed_to_be_persisted of this DictionaryEntity.
        :rtype: bool
        """
        return self._entity_marked_as_not_supposed_to_be_persisted

    @entity_marked_as_not_supposed_to_be_persisted.setter
    def entity_marked_as_not_supposed_to_be_persisted(self, entity_marked_as_not_supposed_to_be_persisted):
        """Sets the entity_marked_as_not_supposed_to_be_persisted of this DictionaryEntity.


        :param entity_marked_as_not_supposed_to_be_persisted: The entity_marked_as_not_supposed_to_be_persisted of this DictionaryEntity.
        :type entity_marked_as_not_supposed_to_be_persisted: bool
        """

        self._entity_marked_as_not_supposed_to_be_persisted = entity_marked_as_not_supposed_to_be_persisted

    @property
    def events_queue_ready_to_be_dispatched(self):
        """Gets the events_queue_ready_to_be_dispatched of this DictionaryEntity.


        :return: The events_queue_ready_to_be_dispatched of this DictionaryEntity.
        :rtype: bool
        """
        return self._events_queue_ready_to_be_dispatched

    @events_queue_ready_to_be_dispatched.setter
    def events_queue_ready_to_be_dispatched(self, events_queue_ready_to_be_dispatched):
        """Sets the events_queue_ready_to_be_dispatched of this DictionaryEntity.


        :param events_queue_ready_to_be_dispatched: The events_queue_ready_to_be_dispatched of this DictionaryEntity.
        :type events_queue_ready_to_be_dispatched: bool
        """

        self._events_queue_ready_to_be_dispatched = events_queue_ready_to_be_dispatched

    @property
    def id(self):
        """Gets the id of this DictionaryEntity.


        :return: The id of this DictionaryEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DictionaryEntity.


        :param id: The id of this DictionaryEntity.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this DictionaryEntity.


        :return: The identifier of this DictionaryEntity.
        :rtype: Identifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DictionaryEntity.


        :param identifier: The identifier of this DictionaryEntity.
        :type identifier: Identifier
        """

        self._identifier = identifier

    @property
    def internal_description(self):
        """Gets the internal_description of this DictionaryEntity.


        :return: The internal_description of this DictionaryEntity.
        :rtype: str
        """
        return self._internal_description

    @internal_description.setter
    def internal_description(self, internal_description):
        """Sets the internal_description of this DictionaryEntity.


        :param internal_description: The internal_description of this DictionaryEntity.
        :type internal_description: str
        """

        self._internal_description = internal_description

    @property
    def last_modification_date(self):
        """Gets the last_modification_date of this DictionaryEntity.


        :return: The last_modification_date of this DictionaryEntity.
        :rtype: datetime
        """
        return self._last_modification_date

    @last_modification_date.setter
    def last_modification_date(self, last_modification_date):
        """Sets the last_modification_date of this DictionaryEntity.


        :param last_modification_date: The last_modification_date of this DictionaryEntity.
        :type last_modification_date: datetime
        """

        self._last_modification_date = last_modification_date

    @property
    def name(self):
        """Gets the name of this DictionaryEntity.


        :return: The name of this DictionaryEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DictionaryEntity.


        :param name: The name of this DictionaryEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def packed_compound_id(self):
        """Gets the packed_compound_id of this DictionaryEntity.


        :return: The packed_compound_id of this DictionaryEntity.
        :rtype: str
        """
        return self._packed_compound_id

    @packed_compound_id.setter
    def packed_compound_id(self, packed_compound_id):
        """Sets the packed_compound_id of this DictionaryEntity.


        :param packed_compound_id: The packed_compound_id of this DictionaryEntity.
        :type packed_compound_id: str
        """

        self._packed_compound_id = packed_compound_id

    @property
    def prefered_entity(self):
        """Gets the prefered_entity of this DictionaryEntity.


        :return: The prefered_entity of this DictionaryEntity.
        :rtype: bool
        """
        return self._prefered_entity

    @prefered_entity.setter
    def prefered_entity(self, prefered_entity):
        """Sets the prefered_entity of this DictionaryEntity.


        :param prefered_entity: The prefered_entity of this DictionaryEntity.
        :type prefered_entity: bool
        """
        if prefered_entity is None:
            raise ValueError("Invalid value for `prefered_entity`, must not be `None`")

        self._prefered_entity = prefered_entity

    @property
    def preferred(self):
        """Gets the preferred of this DictionaryEntity.


        :return: The preferred of this DictionaryEntity.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this DictionaryEntity.


        :param preferred: The preferred of this DictionaryEntity.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def version(self):
        """Gets the version of this DictionaryEntity.


        :return: The version of this DictionaryEntity.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DictionaryEntity.


        :param version: The version of this DictionaryEntity.
        :type version: int
        """

        self._version = version
