# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_dto import AccessDTO
from openapi_server.models.action_dto import ActionDTO
from openapi_server.models.filter_dto import FilterDTO
from openapi_server.models.view_dto import ViewDTO
from openapi_server import util


class ViewDetailsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: AccessDTO=None, actions: List[ActionDTO]=None, filter: FilterDTO=None, view: ViewDTO=None, view_id: int=None):
        """ViewDetailsDTO - a model defined in OpenAPI

        :param access: The access of this ViewDetailsDTO.
        :param actions: The actions of this ViewDetailsDTO.
        :param filter: The filter of this ViewDetailsDTO.
        :param view: The view of this ViewDetailsDTO.
        :param view_id: The view_id of this ViewDetailsDTO.
        """
        self.openapi_types = {
            'access': AccessDTO,
            'actions': List[ActionDTO],
            'filter': FilterDTO,
            'view': ViewDTO,
            'view_id': int
        }

        self.attribute_map = {
            'access': 'access',
            'actions': 'actions',
            'filter': 'filter',
            'view': 'view',
            'view_id': 'viewId'
        }

        self._access = access
        self._actions = actions
        self._filter = filter
        self._view = view
        self._view_id = view_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViewDetailsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViewDetailsDTO of this ViewDetailsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this ViewDetailsDTO.


        :return: The access of this ViewDetailsDTO.
        :rtype: AccessDTO
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this ViewDetailsDTO.


        :param access: The access of this ViewDetailsDTO.
        :type access: AccessDTO
        """

        self._access = access

    @property
    def actions(self):
        """Gets the actions of this ViewDetailsDTO.


        :return: The actions of this ViewDetailsDTO.
        :rtype: List[ActionDTO]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ViewDetailsDTO.


        :param actions: The actions of this ViewDetailsDTO.
        :type actions: List[ActionDTO]
        """

        self._actions = actions

    @property
    def filter(self):
        """Gets the filter of this ViewDetailsDTO.


        :return: The filter of this ViewDetailsDTO.
        :rtype: FilterDTO
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ViewDetailsDTO.


        :param filter: The filter of this ViewDetailsDTO.
        :type filter: FilterDTO
        """

        self._filter = filter

    @property
    def view(self):
        """Gets the view of this ViewDetailsDTO.


        :return: The view of this ViewDetailsDTO.
        :rtype: ViewDTO
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this ViewDetailsDTO.


        :param view: The view of this ViewDetailsDTO.
        :type view: ViewDTO
        """

        self._view = view

    @property
    def view_id(self):
        """Gets the view_id of this ViewDetailsDTO.


        :return: The view_id of this ViewDetailsDTO.
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ViewDetailsDTO.


        :param view_id: The view_id of this ViewDetailsDTO.
        :type view_id: int
        """

        self._view_id = view_id
