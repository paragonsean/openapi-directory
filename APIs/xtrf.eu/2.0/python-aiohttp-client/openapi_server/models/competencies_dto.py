# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_language_combination_dto import CommonLanguageCombinationDTO
from openapi_server import util


class CompetenciesDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_combinations: List[CommonLanguageCombinationDTO]=None):
        """CompetenciesDTO - a model defined in OpenAPI

        :param language_combinations: The language_combinations of this CompetenciesDTO.
        """
        self.openapi_types = {
            'language_combinations': List[CommonLanguageCombinationDTO]
        }

        self.attribute_map = {
            'language_combinations': 'languageCombinations'
        }

        self._language_combinations = language_combinations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompetenciesDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompetenciesDTO of this CompetenciesDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_combinations(self):
        """Gets the language_combinations of this CompetenciesDTO.


        :return: The language_combinations of this CompetenciesDTO.
        :rtype: List[CommonLanguageCombinationDTO]
        """
        return self._language_combinations

    @language_combinations.setter
    def language_combinations(self, language_combinations):
        """Sets the language_combinations of this CompetenciesDTO.


        :param language_combinations: The language_combinations of this CompetenciesDTO.
        :type language_combinations: List[CommonLanguageCombinationDTO]
        """

        self._language_combinations = language_combinations
