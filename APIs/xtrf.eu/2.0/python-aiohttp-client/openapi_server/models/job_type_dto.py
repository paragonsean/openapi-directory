# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobTypeDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, calculation_unit_ids: List[int]=None, default: bool=None, files_needed: bool=None, id: int=None, name: str=None, preferred: bool=None, provided_by_client: bool=None, relation_to_language: str=None, vendor_productivity: float=None, vendor_productivity_calculation_unit_id: int=None):
        """JobTypeDTO - a model defined in OpenAPI

        :param active: The active of this JobTypeDTO.
        :param calculation_unit_ids: The calculation_unit_ids of this JobTypeDTO.
        :param default: The default of this JobTypeDTO.
        :param files_needed: The files_needed of this JobTypeDTO.
        :param id: The id of this JobTypeDTO.
        :param name: The name of this JobTypeDTO.
        :param preferred: The preferred of this JobTypeDTO.
        :param provided_by_client: The provided_by_client of this JobTypeDTO.
        :param relation_to_language: The relation_to_language of this JobTypeDTO.
        :param vendor_productivity: The vendor_productivity of this JobTypeDTO.
        :param vendor_productivity_calculation_unit_id: The vendor_productivity_calculation_unit_id of this JobTypeDTO.
        """
        self.openapi_types = {
            'active': bool,
            'calculation_unit_ids': List[int],
            'default': bool,
            'files_needed': bool,
            'id': int,
            'name': str,
            'preferred': bool,
            'provided_by_client': bool,
            'relation_to_language': str,
            'vendor_productivity': float,
            'vendor_productivity_calculation_unit_id': int
        }

        self.attribute_map = {
            'active': 'active',
            'calculation_unit_ids': 'calculationUnitIds',
            'default': 'default',
            'files_needed': 'filesNeeded',
            'id': 'id',
            'name': 'name',
            'preferred': 'preferred',
            'provided_by_client': 'providedByClient',
            'relation_to_language': 'relationToLanguage',
            'vendor_productivity': 'vendorProductivity',
            'vendor_productivity_calculation_unit_id': 'vendorProductivityCalculationUnitId'
        }

        self._active = active
        self._calculation_unit_ids = calculation_unit_ids
        self._default = default
        self._files_needed = files_needed
        self._id = id
        self._name = name
        self._preferred = preferred
        self._provided_by_client = provided_by_client
        self._relation_to_language = relation_to_language
        self._vendor_productivity = vendor_productivity
        self._vendor_productivity_calculation_unit_id = vendor_productivity_calculation_unit_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobTypeDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobTypeDTO of this JobTypeDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this JobTypeDTO.

        should this value be available on the XTRF selection lists

        :return: The active of this JobTypeDTO.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this JobTypeDTO.

        should this value be available on the XTRF selection lists

        :param active: The active of this JobTypeDTO.
        :type active: bool
        """

        self._active = active

    @property
    def calculation_unit_ids(self):
        """Gets the calculation_unit_ids of this JobTypeDTO.


        :return: The calculation_unit_ids of this JobTypeDTO.
        :rtype: List[int]
        """
        return self._calculation_unit_ids

    @calculation_unit_ids.setter
    def calculation_unit_ids(self, calculation_unit_ids):
        """Sets the calculation_unit_ids of this JobTypeDTO.


        :param calculation_unit_ids: The calculation_unit_ids of this JobTypeDTO.
        :type calculation_unit_ids: List[int]
        """

        self._calculation_unit_ids = calculation_unit_ids

    @property
    def default(self):
        """Gets the default of this JobTypeDTO.

        should this value be set by default in XTRF selection lists

        :return: The default of this JobTypeDTO.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this JobTypeDTO.

        should this value be set by default in XTRF selection lists

        :param default: The default of this JobTypeDTO.
        :type default: bool
        """

        self._default = default

    @property
    def files_needed(self):
        """Gets the files_needed of this JobTypeDTO.


        :return: The files_needed of this JobTypeDTO.
        :rtype: bool
        """
        return self._files_needed

    @files_needed.setter
    def files_needed(self, files_needed):
        """Sets the files_needed of this JobTypeDTO.


        :param files_needed: The files_needed of this JobTypeDTO.
        :type files_needed: bool
        """

        self._files_needed = files_needed

    @property
    def id(self):
        """Gets the id of this JobTypeDTO.

        internal identifier

        :return: The id of this JobTypeDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobTypeDTO.

        internal identifier

        :param id: The id of this JobTypeDTO.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JobTypeDTO.

        localised name (formatted in the current user's locale)

        :return: The name of this JobTypeDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobTypeDTO.

        localised name (formatted in the current user's locale)

        :param name: The name of this JobTypeDTO.
        :type name: str
        """

        self._name = name

    @property
    def preferred(self):
        """Gets the preferred of this JobTypeDTO.

        should this value be available on the top of XTRF selection lists, in the Preferred section

        :return: The preferred of this JobTypeDTO.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this JobTypeDTO.

        should this value be available on the top of XTRF selection lists, in the Preferred section

        :param preferred: The preferred of this JobTypeDTO.
        :type preferred: bool
        """

        self._preferred = preferred

    @property
    def provided_by_client(self):
        """Gets the provided_by_client of this JobTypeDTO.


        :return: The provided_by_client of this JobTypeDTO.
        :rtype: bool
        """
        return self._provided_by_client

    @provided_by_client.setter
    def provided_by_client(self, provided_by_client):
        """Sets the provided_by_client of this JobTypeDTO.


        :param provided_by_client: The provided_by_client of this JobTypeDTO.
        :type provided_by_client: bool
        """

        self._provided_by_client = provided_by_client

    @property
    def relation_to_language(self):
        """Gets the relation_to_language of this JobTypeDTO.


        :return: The relation_to_language of this JobTypeDTO.
        :rtype: str
        """
        return self._relation_to_language

    @relation_to_language.setter
    def relation_to_language(self, relation_to_language):
        """Sets the relation_to_language of this JobTypeDTO.


        :param relation_to_language: The relation_to_language of this JobTypeDTO.
        :type relation_to_language: str
        """
        allowed_values = ["LANGUAGE_COMBINATION_RELATED", "SOURCE_LANGUAGE_RELATED_ONLY", "TARGET_LANGUAGE_RELATED_ONLY", "LANGUAGE_INDEPENDENT"]  # noqa: E501
        if relation_to_language not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_to_language` ({0}), must be one of {1}"
                .format(relation_to_language, allowed_values)
            )

        self._relation_to_language = relation_to_language

    @property
    def vendor_productivity(self):
        """Gets the vendor_productivity of this JobTypeDTO.


        :return: The vendor_productivity of this JobTypeDTO.
        :rtype: float
        """
        return self._vendor_productivity

    @vendor_productivity.setter
    def vendor_productivity(self, vendor_productivity):
        """Sets the vendor_productivity of this JobTypeDTO.


        :param vendor_productivity: The vendor_productivity of this JobTypeDTO.
        :type vendor_productivity: float
        """

        self._vendor_productivity = vendor_productivity

    @property
    def vendor_productivity_calculation_unit_id(self):
        """Gets the vendor_productivity_calculation_unit_id of this JobTypeDTO.


        :return: The vendor_productivity_calculation_unit_id of this JobTypeDTO.
        :rtype: int
        """
        return self._vendor_productivity_calculation_unit_id

    @vendor_productivity_calculation_unit_id.setter
    def vendor_productivity_calculation_unit_id(self, vendor_productivity_calculation_unit_id):
        """Sets the vendor_productivity_calculation_unit_id of this JobTypeDTO.


        :param vendor_productivity_calculation_unit_id: The vendor_productivity_calculation_unit_id of this JobTypeDTO.
        :type vendor_productivity_calculation_unit_id: int
        """

        self._vendor_productivity_calculation_unit_id = vendor_productivity_calculation_unit_id
