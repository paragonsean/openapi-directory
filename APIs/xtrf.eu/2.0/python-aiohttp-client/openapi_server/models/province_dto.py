# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProvinceDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, country_id: int=None, default: bool=None, id: int=None, name: str=None, preferred: bool=None):
        """ProvinceDTO - a model defined in OpenAPI

        :param active: The active of this ProvinceDTO.
        :param country_id: The country_id of this ProvinceDTO.
        :param default: The default of this ProvinceDTO.
        :param id: The id of this ProvinceDTO.
        :param name: The name of this ProvinceDTO.
        :param preferred: The preferred of this ProvinceDTO.
        """
        self.openapi_types = {
            'active': bool,
            'country_id': int,
            'default': bool,
            'id': int,
            'name': str,
            'preferred': bool
        }

        self.attribute_map = {
            'active': 'active',
            'country_id': 'countryId',
            'default': 'default',
            'id': 'id',
            'name': 'name',
            'preferred': 'preferred'
        }

        self._active = active
        self._country_id = country_id
        self._default = default
        self._id = id
        self._name = name
        self._preferred = preferred

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvinceDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvinceDTO of this ProvinceDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ProvinceDTO.

        should this value be available on the XTRF selection lists

        :return: The active of this ProvinceDTO.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProvinceDTO.

        should this value be available on the XTRF selection lists

        :param active: The active of this ProvinceDTO.
        :type active: bool
        """

        self._active = active

    @property
    def country_id(self):
        """Gets the country_id of this ProvinceDTO.

        country's identifier

        :return: The country_id of this ProvinceDTO.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this ProvinceDTO.

        country's identifier

        :param country_id: The country_id of this ProvinceDTO.
        :type country_id: int
        """

        self._country_id = country_id

    @property
    def default(self):
        """Gets the default of this ProvinceDTO.

        should this value be set by default in XTRF selection lists

        :return: The default of this ProvinceDTO.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ProvinceDTO.

        should this value be set by default in XTRF selection lists

        :param default: The default of this ProvinceDTO.
        :type default: bool
        """

        self._default = default

    @property
    def id(self):
        """Gets the id of this ProvinceDTO.

        internal identifier

        :return: The id of this ProvinceDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvinceDTO.

        internal identifier

        :param id: The id of this ProvinceDTO.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProvinceDTO.

        localised name (formatted in the current user's locale)

        :return: The name of this ProvinceDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvinceDTO.

        localised name (formatted in the current user's locale)

        :param name: The name of this ProvinceDTO.
        :type name: str
        """

        self._name = name

    @property
    def preferred(self):
        """Gets the preferred of this ProvinceDTO.

        should this value be available on the top of XTRF selection lists, in the Preferred section

        :return: The preferred of this ProvinceDTO.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this ProvinceDTO.

        should this value be available on the top of XTRF selection lists, in the Preferred section

        :param preferred: The preferred of this ProvinceDTO.
        :type preferred: bool
        """

        self._preferred = preferred
