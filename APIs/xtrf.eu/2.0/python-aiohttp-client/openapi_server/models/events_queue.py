# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event import Event
from openapi_server import util


class EventsQueue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: List[Event]=None, empty: bool=None, ready_to_be_dispatched: bool=None):
        """EventsQueue - a model defined in OpenAPI

        :param all: The all of this EventsQueue.
        :param empty: The empty of this EventsQueue.
        :param ready_to_be_dispatched: The ready_to_be_dispatched of this EventsQueue.
        """
        self.openapi_types = {
            'all': List[Event],
            'empty': bool,
            'ready_to_be_dispatched': bool
        }

        self.attribute_map = {
            'all': 'all',
            'empty': 'empty',
            'ready_to_be_dispatched': 'readyToBeDispatched'
        }

        self._all = all
        self._empty = empty
        self._ready_to_be_dispatched = ready_to_be_dispatched

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsQueue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsQueue of this EventsQueue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this EventsQueue.


        :return: The all of this EventsQueue.
        :rtype: List[Event]
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this EventsQueue.


        :param all: The all of this EventsQueue.
        :type all: List[Event]
        """

        self._all = all

    @property
    def empty(self):
        """Gets the empty of this EventsQueue.


        :return: The empty of this EventsQueue.
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this EventsQueue.


        :param empty: The empty of this EventsQueue.
        :type empty: bool
        """

        self._empty = empty

    @property
    def ready_to_be_dispatched(self):
        """Gets the ready_to_be_dispatched of this EventsQueue.


        :return: The ready_to_be_dispatched of this EventsQueue.
        :rtype: bool
        """
        return self._ready_to_be_dispatched

    @ready_to_be_dispatched.setter
    def ready_to_be_dispatched(self, ready_to_be_dispatched):
        """Sets the ready_to_be_dispatched of this EventsQueue.


        :param ready_to_be_dispatched: The ready_to_be_dispatched of this EventsQueue.
        :type ready_to_be_dispatched: bool
        """

        self._ready_to_be_dispatched = ready_to_be_dispatched
