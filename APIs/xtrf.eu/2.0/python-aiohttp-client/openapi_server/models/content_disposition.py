# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentDisposition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, file_name: str=None, modification_date: datetime=None, parameters: Dict[str, str]=None, read_date: datetime=None, size: int=None, type: str=None):
        """ContentDisposition - a model defined in OpenAPI

        :param creation_date: The creation_date of this ContentDisposition.
        :param file_name: The file_name of this ContentDisposition.
        :param modification_date: The modification_date of this ContentDisposition.
        :param parameters: The parameters of this ContentDisposition.
        :param read_date: The read_date of this ContentDisposition.
        :param size: The size of this ContentDisposition.
        :param type: The type of this ContentDisposition.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'file_name': str,
            'modification_date': datetime,
            'parameters': Dict[str, str],
            'read_date': datetime,
            'size': int,
            'type': str
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'file_name': 'fileName',
            'modification_date': 'modificationDate',
            'parameters': 'parameters',
            'read_date': 'readDate',
            'size': 'size',
            'type': 'type'
        }

        self._creation_date = creation_date
        self._file_name = file_name
        self._modification_date = modification_date
        self._parameters = parameters
        self._read_date = read_date
        self._size = size
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentDisposition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentDisposition of this ContentDisposition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this ContentDisposition.


        :return: The creation_date of this ContentDisposition.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ContentDisposition.


        :param creation_date: The creation_date of this ContentDisposition.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def file_name(self):
        """Gets the file_name of this ContentDisposition.


        :return: The file_name of this ContentDisposition.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ContentDisposition.


        :param file_name: The file_name of this ContentDisposition.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def modification_date(self):
        """Gets the modification_date of this ContentDisposition.


        :return: The modification_date of this ContentDisposition.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this ContentDisposition.


        :param modification_date: The modification_date of this ContentDisposition.
        :type modification_date: datetime
        """

        self._modification_date = modification_date

    @property
    def parameters(self):
        """Gets the parameters of this ContentDisposition.


        :return: The parameters of this ContentDisposition.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ContentDisposition.


        :param parameters: The parameters of this ContentDisposition.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def read_date(self):
        """Gets the read_date of this ContentDisposition.


        :return: The read_date of this ContentDisposition.
        :rtype: datetime
        """
        return self._read_date

    @read_date.setter
    def read_date(self, read_date):
        """Sets the read_date of this ContentDisposition.


        :param read_date: The read_date of this ContentDisposition.
        :type read_date: datetime
        """

        self._read_date = read_date

    @property
    def size(self):
        """Gets the size of this ContentDisposition.


        :return: The size of this ContentDisposition.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ContentDisposition.


        :param size: The size of this ContentDisposition.
        :type size: int
        """

        self._size = size

    @property
    def type(self):
        """Gets the type of this ContentDisposition.


        :return: The type of this ContentDisposition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContentDisposition.


        :param type: The type of this ContentDisposition.
        :type type: str
        """

        self._type = type
