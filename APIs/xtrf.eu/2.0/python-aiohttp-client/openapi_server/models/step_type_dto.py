# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.step_type_semantics_dto import StepTypeSemanticsDto
from openapi_server import util


class StepTypeDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, job_type_id: int=None, name: str=None, semantics: StepTypeSemanticsDto=None):
        """StepTypeDto - a model defined in OpenAPI

        :param id: The id of this StepTypeDto.
        :param job_type_id: The job_type_id of this StepTypeDto.
        :param name: The name of this StepTypeDto.
        :param semantics: The semantics of this StepTypeDto.
        """
        self.openapi_types = {
            'id': str,
            'job_type_id': int,
            'name': str,
            'semantics': StepTypeSemanticsDto
        }

        self.attribute_map = {
            'id': 'id',
            'job_type_id': 'jobTypeId',
            'name': 'name',
            'semantics': 'semantics'
        }

        self._id = id
        self._job_type_id = job_type_id
        self._name = name
        self._semantics = semantics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StepTypeDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StepTypeDto of this StepTypeDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StepTypeDto.


        :return: The id of this StepTypeDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StepTypeDto.


        :param id: The id of this StepTypeDto.
        :type id: str
        """

        self._id = id

    @property
    def job_type_id(self):
        """Gets the job_type_id of this StepTypeDto.


        :return: The job_type_id of this StepTypeDto.
        :rtype: int
        """
        return self._job_type_id

    @job_type_id.setter
    def job_type_id(self, job_type_id):
        """Sets the job_type_id of this StepTypeDto.


        :param job_type_id: The job_type_id of this StepTypeDto.
        :type job_type_id: int
        """

        self._job_type_id = job_type_id

    @property
    def name(self):
        """Gets the name of this StepTypeDto.


        :return: The name of this StepTypeDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StepTypeDto.


        :param name: The name of this StepTypeDto.
        :type name: str
        """

        self._name = name

    @property
    def semantics(self):
        """Gets the semantics of this StepTypeDto.


        :return: The semantics of this StepTypeDto.
        :rtype: StepTypeSemanticsDto
        """
        return self._semantics

    @semantics.setter
    def semantics(self, semantics):
        """Sets the semantics of this StepTypeDto.


        :param semantics: The semantics of this StepTypeDto.
        :type semantics: StepTypeSemanticsDto
        """

        self._semantics = semantics
