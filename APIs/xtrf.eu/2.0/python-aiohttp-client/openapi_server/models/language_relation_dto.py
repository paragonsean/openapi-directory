# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_combination_dto import LanguageCombinationDto
from openapi_server import util


class LanguageRelationDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_combinations: List[LanguageCombinationDto]=None, languages: list[int]=None):
        """LanguageRelationDto - a model defined in OpenAPI

        :param language_combinations: The language_combinations of this LanguageRelationDto.
        :param languages: The languages of this LanguageRelationDto.
        """
        self.openapi_types = {
            'language_combinations': List[LanguageCombinationDto],
            'languages': list[int]
        }

        self.attribute_map = {
            'language_combinations': 'languageCombinations',
            'languages': 'languages'
        }

        self._language_combinations = language_combinations
        self._languages = languages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguageRelationDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguageRelationDto of this LanguageRelationDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_combinations(self):
        """Gets the language_combinations of this LanguageRelationDto.


        :return: The language_combinations of this LanguageRelationDto.
        :rtype: List[LanguageCombinationDto]
        """
        return self._language_combinations

    @language_combinations.setter
    def language_combinations(self, language_combinations):
        """Sets the language_combinations of this LanguageRelationDto.


        :param language_combinations: The language_combinations of this LanguageRelationDto.
        :type language_combinations: List[LanguageCombinationDto]
        """

        self._language_combinations = language_combinations

    @property
    def languages(self):
        """Gets the languages of this LanguageRelationDto.


        :return: The languages of this LanguageRelationDto.
        :rtype: list[int]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this LanguageRelationDto.


        :param languages: The languages of this LanguageRelationDto.
        :type languages: list[int]
        """

        self._languages = languages
