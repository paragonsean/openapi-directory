# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerContactEmailsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional: List[str]=None, cc: List[str]=None, primary: str=None):
        """CustomerContactEmailsDTO - a model defined in OpenAPI

        :param additional: The additional of this CustomerContactEmailsDTO.
        :param cc: The cc of this CustomerContactEmailsDTO.
        :param primary: The primary of this CustomerContactEmailsDTO.
        """
        self.openapi_types = {
            'additional': List[str],
            'cc': List[str],
            'primary': str
        }

        self.attribute_map = {
            'additional': 'additional',
            'cc': 'cc',
            'primary': 'primary'
        }

        self._additional = additional
        self._cc = cc
        self._primary = primary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerContactEmailsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerContactEmailsDTO of this CustomerContactEmailsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional(self):
        """Gets the additional of this CustomerContactEmailsDTO.

        additional e-mails addresses

        :return: The additional of this CustomerContactEmailsDTO.
        :rtype: List[str]
        """
        return self._additional

    @additional.setter
    def additional(self, additional):
        """Sets the additional of this CustomerContactEmailsDTO.

        additional e-mails addresses

        :param additional: The additional of this CustomerContactEmailsDTO.
        :type additional: List[str]
        """

        self._additional = additional

    @property
    def cc(self):
        """Gets the cc of this CustomerContactEmailsDTO.

        e-mails which will be included in the CC list

        :return: The cc of this CustomerContactEmailsDTO.
        :rtype: List[str]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this CustomerContactEmailsDTO.

        e-mails which will be included in the CC list

        :param cc: The cc of this CustomerContactEmailsDTO.
        :type cc: List[str]
        """

        self._cc = cc

    @property
    def primary(self):
        """Gets the primary of this CustomerContactEmailsDTO.

        primary e-mail

        :return: The primary of this CustomerContactEmailsDTO.
        :rtype: str
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this CustomerContactEmailsDTO.

        primary e-mail

        :param primary: The primary of this CustomerContactEmailsDTO.
        :type primary: str
        """
        if primary is None:
            raise ValueError("Invalid value for `primary`, must not be `None`")

        self._primary = primary
