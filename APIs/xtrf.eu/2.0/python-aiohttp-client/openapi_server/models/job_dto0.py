# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_communication_dto import JobCommunicationDto
from openapi_server.models.job_dates_dto import JobDatesDto
from openapi_server.models.job_documents_dto import JobDocumentsDto
from openapi_server.models.job_files_dto import JobFilesDto
from openapi_server.models.job_language_combination_dto import JobLanguageCombinationDto
from openapi_server.models.step_type_dto import StepTypeDto
from openapi_server import util


class JobDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, communication: JobCommunicationDto=None, dates: JobDatesDto=None, documents: JobDocumentsDto=None, files: JobFilesDto=None, id: str=None, id_number: str=None, languages: List[JobLanguageCombinationDto]=None, name: str=None, status: str=None, step_number: int=None, step_type: StepTypeDto=None, vendor_id: int=None, vendor_price_profile_id: int=None):
        """JobDto - a model defined in OpenAPI

        :param communication: The communication of this JobDto.
        :param dates: The dates of this JobDto.
        :param documents: The documents of this JobDto.
        :param files: The files of this JobDto.
        :param id: The id of this JobDto.
        :param id_number: The id_number of this JobDto.
        :param languages: The languages of this JobDto.
        :param name: The name of this JobDto.
        :param status: The status of this JobDto.
        :param step_number: The step_number of this JobDto.
        :param step_type: The step_type of this JobDto.
        :param vendor_id: The vendor_id of this JobDto.
        :param vendor_price_profile_id: The vendor_price_profile_id of this JobDto.
        """
        self.openapi_types = {
            'communication': JobCommunicationDto,
            'dates': JobDatesDto,
            'documents': JobDocumentsDto,
            'files': JobFilesDto,
            'id': str,
            'id_number': str,
            'languages': List[JobLanguageCombinationDto],
            'name': str,
            'status': str,
            'step_number': int,
            'step_type': StepTypeDto,
            'vendor_id': int,
            'vendor_price_profile_id': int
        }

        self.attribute_map = {
            'communication': 'communication',
            'dates': 'dates',
            'documents': 'documents',
            'files': 'files',
            'id': 'id',
            'id_number': 'idNumber',
            'languages': 'languages',
            'name': 'name',
            'status': 'status',
            'step_number': 'stepNumber',
            'step_type': 'stepType',
            'vendor_id': 'vendorId',
            'vendor_price_profile_id': 'vendorPriceProfileId'
        }

        self._communication = communication
        self._dates = dates
        self._documents = documents
        self._files = files
        self._id = id
        self._id_number = id_number
        self._languages = languages
        self._name = name
        self._status = status
        self._step_number = step_number
        self._step_type = step_type
        self._vendor_id = vendor_id
        self._vendor_price_profile_id = vendor_price_profile_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDto of this JobDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def communication(self):
        """Gets the communication of this JobDto.


        :return: The communication of this JobDto.
        :rtype: JobCommunicationDto
        """
        return self._communication

    @communication.setter
    def communication(self, communication):
        """Sets the communication of this JobDto.


        :param communication: The communication of this JobDto.
        :type communication: JobCommunicationDto
        """

        self._communication = communication

    @property
    def dates(self):
        """Gets the dates of this JobDto.


        :return: The dates of this JobDto.
        :rtype: JobDatesDto
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this JobDto.


        :param dates: The dates of this JobDto.
        :type dates: JobDatesDto
        """

        self._dates = dates

    @property
    def documents(self):
        """Gets the documents of this JobDto.


        :return: The documents of this JobDto.
        :rtype: JobDocumentsDto
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this JobDto.


        :param documents: The documents of this JobDto.
        :type documents: JobDocumentsDto
        """

        self._documents = documents

    @property
    def files(self):
        """Gets the files of this JobDto.


        :return: The files of this JobDto.
        :rtype: JobFilesDto
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this JobDto.


        :param files: The files of this JobDto.
        :type files: JobFilesDto
        """

        self._files = files

    @property
    def id(self):
        """Gets the id of this JobDto.


        :return: The id of this JobDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobDto.


        :param id: The id of this JobDto.
        :type id: str
        """

        self._id = id

    @property
    def id_number(self):
        """Gets the id_number of this JobDto.


        :return: The id_number of this JobDto.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this JobDto.


        :param id_number: The id_number of this JobDto.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def languages(self):
        """Gets the languages of this JobDto.


        :return: The languages of this JobDto.
        :rtype: List[JobLanguageCombinationDto]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this JobDto.


        :param languages: The languages of this JobDto.
        :type languages: List[JobLanguageCombinationDto]
        """

        self._languages = languages

    @property
    def name(self):
        """Gets the name of this JobDto.


        :return: The name of this JobDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobDto.


        :param name: The name of this JobDto.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this JobDto.


        :return: The status of this JobDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobDto.


        :param status: The status of this JobDto.
        :type status: str
        """

        self._status = status

    @property
    def step_number(self):
        """Gets the step_number of this JobDto.


        :return: The step_number of this JobDto.
        :rtype: int
        """
        return self._step_number

    @step_number.setter
    def step_number(self, step_number):
        """Sets the step_number of this JobDto.


        :param step_number: The step_number of this JobDto.
        :type step_number: int
        """

        self._step_number = step_number

    @property
    def step_type(self):
        """Gets the step_type of this JobDto.


        :return: The step_type of this JobDto.
        :rtype: StepTypeDto
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this JobDto.


        :param step_type: The step_type of this JobDto.
        :type step_type: StepTypeDto
        """

        self._step_type = step_type

    @property
    def vendor_id(self):
        """Gets the vendor_id of this JobDto.


        :return: The vendor_id of this JobDto.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this JobDto.


        :param vendor_id: The vendor_id of this JobDto.
        :type vendor_id: int
        """

        self._vendor_id = vendor_id

    @property
    def vendor_price_profile_id(self):
        """Gets the vendor_price_profile_id of this JobDto.


        :return: The vendor_price_profile_id of this JobDto.
        :rtype: int
        """
        return self._vendor_price_profile_id

    @vendor_price_profile_id.setter
    def vendor_price_profile_id(self, vendor_price_profile_id):
        """Sets the vendor_price_profile_id of this JobDto.


        :param vendor_price_profile_id: The vendor_price_profile_id of this JobDto.
        :type vendor_price_profile_id: int
        """

        self._vendor_price_profile_id = vendor_price_profile_id
