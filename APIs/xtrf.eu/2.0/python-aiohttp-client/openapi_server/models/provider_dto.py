# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_dto import AddressDTO
from openapi_server.models.competencies_dto import CompetenciesDTO
from openapi_server.models.contact_dto import ContactDTO
from openapi_server.models.custom_field_dto import CustomFieldDTO
from openapi_server.models.provider_person_dto import ProviderPersonDTO
from openapi_server import util


class ProviderDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: AddressDTO=None, branch_id: int=None, competencies: CompetenciesDTO=None, contact: ContactDTO=None, correspondence_address: AddressDTO=None, custom_fields: List[CustomFieldDTO]=None, full_name: str=None, id: int=None, id_number: str=None, lead_source_id: int=None, name: str=None, notes: str=None, persons: List[ProviderPersonDTO]=None, status: str=None):
        """ProviderDTO - a model defined in OpenAPI

        :param billing_address: The billing_address of this ProviderDTO.
        :param branch_id: The branch_id of this ProviderDTO.
        :param competencies: The competencies of this ProviderDTO.
        :param contact: The contact of this ProviderDTO.
        :param correspondence_address: The correspondence_address of this ProviderDTO.
        :param custom_fields: The custom_fields of this ProviderDTO.
        :param full_name: The full_name of this ProviderDTO.
        :param id: The id of this ProviderDTO.
        :param id_number: The id_number of this ProviderDTO.
        :param lead_source_id: The lead_source_id of this ProviderDTO.
        :param name: The name of this ProviderDTO.
        :param notes: The notes of this ProviderDTO.
        :param persons: The persons of this ProviderDTO.
        :param status: The status of this ProviderDTO.
        """
        self.openapi_types = {
            'billing_address': AddressDTO,
            'branch_id': int,
            'competencies': CompetenciesDTO,
            'contact': ContactDTO,
            'correspondence_address': AddressDTO,
            'custom_fields': List[CustomFieldDTO],
            'full_name': str,
            'id': int,
            'id_number': str,
            'lead_source_id': int,
            'name': str,
            'notes': str,
            'persons': List[ProviderPersonDTO],
            'status': str
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'branch_id': 'branchId',
            'competencies': 'competencies',
            'contact': 'contact',
            'correspondence_address': 'correspondenceAddress',
            'custom_fields': 'customFields',
            'full_name': 'fullName',
            'id': 'id',
            'id_number': 'idNumber',
            'lead_source_id': 'leadSourceId',
            'name': 'name',
            'notes': 'notes',
            'persons': 'persons',
            'status': 'status'
        }

        self._billing_address = billing_address
        self._branch_id = branch_id
        self._competencies = competencies
        self._contact = contact
        self._correspondence_address = correspondence_address
        self._custom_fields = custom_fields
        self._full_name = full_name
        self._id = id
        self._id_number = id_number
        self._lead_source_id = lead_source_id
        self._name = name
        self._notes = notes
        self._persons = persons
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProviderDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProviderDTO of this ProviderDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this ProviderDTO.


        :return: The billing_address of this ProviderDTO.
        :rtype: AddressDTO
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this ProviderDTO.


        :param billing_address: The billing_address of this ProviderDTO.
        :type billing_address: AddressDTO
        """

        self._billing_address = billing_address

    @property
    def branch_id(self):
        """Gets the branch_id of this ProviderDTO.


        :return: The branch_id of this ProviderDTO.
        :rtype: int
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this ProviderDTO.


        :param branch_id: The branch_id of this ProviderDTO.
        :type branch_id: int
        """

        self._branch_id = branch_id

    @property
    def competencies(self):
        """Gets the competencies of this ProviderDTO.


        :return: The competencies of this ProviderDTO.
        :rtype: CompetenciesDTO
        """
        return self._competencies

    @competencies.setter
    def competencies(self, competencies):
        """Sets the competencies of this ProviderDTO.


        :param competencies: The competencies of this ProviderDTO.
        :type competencies: CompetenciesDTO
        """

        self._competencies = competencies

    @property
    def contact(self):
        """Gets the contact of this ProviderDTO.


        :return: The contact of this ProviderDTO.
        :rtype: ContactDTO
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ProviderDTO.


        :param contact: The contact of this ProviderDTO.
        :type contact: ContactDTO
        """

        self._contact = contact

    @property
    def correspondence_address(self):
        """Gets the correspondence_address of this ProviderDTO.


        :return: The correspondence_address of this ProviderDTO.
        :rtype: AddressDTO
        """
        return self._correspondence_address

    @correspondence_address.setter
    def correspondence_address(self, correspondence_address):
        """Sets the correspondence_address of this ProviderDTO.


        :param correspondence_address: The correspondence_address of this ProviderDTO.
        :type correspondence_address: AddressDTO
        """

        self._correspondence_address = correspondence_address

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProviderDTO.


        :return: The custom_fields of this ProviderDTO.
        :rtype: List[CustomFieldDTO]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProviderDTO.


        :param custom_fields: The custom_fields of this ProviderDTO.
        :type custom_fields: List[CustomFieldDTO]
        """

        self._custom_fields = custom_fields

    @property
    def full_name(self):
        """Gets the full_name of this ProviderDTO.


        :return: The full_name of this ProviderDTO.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ProviderDTO.


        :param full_name: The full_name of this ProviderDTO.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this ProviderDTO.


        :return: The id of this ProviderDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderDTO.


        :param id: The id of this ProviderDTO.
        :type id: int
        """

        self._id = id

    @property
    def id_number(self):
        """Gets the id_number of this ProviderDTO.


        :return: The id_number of this ProviderDTO.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this ProviderDTO.


        :param id_number: The id_number of this ProviderDTO.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def lead_source_id(self):
        """Gets the lead_source_id of this ProviderDTO.


        :return: The lead_source_id of this ProviderDTO.
        :rtype: int
        """
        return self._lead_source_id

    @lead_source_id.setter
    def lead_source_id(self, lead_source_id):
        """Sets the lead_source_id of this ProviderDTO.


        :param lead_source_id: The lead_source_id of this ProviderDTO.
        :type lead_source_id: int
        """

        self._lead_source_id = lead_source_id

    @property
    def name(self):
        """Gets the name of this ProviderDTO.


        :return: The name of this ProviderDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProviderDTO.


        :param name: The name of this ProviderDTO.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this ProviderDTO.


        :return: The notes of this ProviderDTO.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ProviderDTO.


        :param notes: The notes of this ProviderDTO.
        :type notes: str
        """

        self._notes = notes

    @property
    def persons(self):
        """Gets the persons of this ProviderDTO.


        :return: The persons of this ProviderDTO.
        :rtype: List[ProviderPersonDTO]
        """
        return self._persons

    @persons.setter
    def persons(self, persons):
        """Sets the persons of this ProviderDTO.


        :param persons: The persons of this ProviderDTO.
        :type persons: List[ProviderPersonDTO]
        """

        self._persons = persons

    @property
    def status(self):
        """Gets the status of this ProviderDTO.


        :return: The status of this ProviderDTO.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProviderDTO.


        :param status: The status of this ProviderDTO.
        :type status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "WAITING_FOR_APPROVAL", "REJECTED", "TOO_EXPENSIVE", "INCOMPLETE_DATA", "POTENTIAL", "NOT_CONFIRMED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
