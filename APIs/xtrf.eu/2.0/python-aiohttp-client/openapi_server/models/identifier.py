# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Identifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compound_id: str=None, id: int=None):
        """Identifier - a model defined in OpenAPI

        :param compound_id: The compound_id of this Identifier.
        :param id: The id of this Identifier.
        """
        self.openapi_types = {
            'compound_id': str,
            'id': int
        }

        self.attribute_map = {
            'compound_id': 'compoundId',
            'id': 'id'
        }

        self._compound_id = compound_id
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Identifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Identifier of this Identifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compound_id(self):
        """Gets the compound_id of this Identifier.


        :return: The compound_id of this Identifier.
        :rtype: str
        """
        return self._compound_id

    @compound_id.setter
    def compound_id(self, compound_id):
        """Sets the compound_id of this Identifier.


        :param compound_id: The compound_id of this Identifier.
        :type compound_id: str
        """

        self._compound_id = compound_id

    @property
    def id(self):
        """Gets the id of this Identifier.


        :return: The id of this Identifier.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Identifier.


        :param id: The id of this Identifier.
        :type id: int
        """

        self._id = id
