/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvitationStatisticsDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvitationStatisticsDTO {
  public static final String SERIALIZED_NAME_ALREADY_REGISTERED_PERSONS_COUNT = "alreadyRegisteredPersonsCount";
  @SerializedName(SERIALIZED_NAME_ALREADY_REGISTERED_PERSONS_COUNT)
  private Integer alreadyRegisteredPersonsCount;

  public static final String SERIALIZED_NAME_INVITED_PERSONS_COUNT = "invitedPersonsCount";
  @SerializedName(SERIALIZED_NAME_INVITED_PERSONS_COUNT)
  private Integer invitedPersonsCount;

  public static final String SERIALIZED_NAME_PROVIDERS_WITH_ALREADY_REGISTERED_PERSON_COUNT = "providersWithAlreadyRegisteredPersonCount";
  @SerializedName(SERIALIZED_NAME_PROVIDERS_WITH_ALREADY_REGISTERED_PERSON_COUNT)
  private Integer providersWithAlreadyRegisteredPersonCount;

  public static final String SERIALIZED_NAME_PROVIDERS_WITH_INVITED_PERSON_COUNT = "providersWithInvitedPersonCount";
  @SerializedName(SERIALIZED_NAME_PROVIDERS_WITH_INVITED_PERSON_COUNT)
  private Integer providersWithInvitedPersonCount;

  public static final String SERIALIZED_NAME_PROVIDERS_WITHOUT_PERSON_COUNT = "providersWithoutPersonCount";
  @SerializedName(SERIALIZED_NAME_PROVIDERS_WITHOUT_PERSON_COUNT)
  private Integer providersWithoutPersonCount;

  public InvitationStatisticsDTO() {
  }

  public InvitationStatisticsDTO alreadyRegisteredPersonsCount(Integer alreadyRegisteredPersonsCount) {
    this.alreadyRegisteredPersonsCount = alreadyRegisteredPersonsCount;
    return this;
  }

  /**
   * Get alreadyRegisteredPersonsCount
   * @return alreadyRegisteredPersonsCount
   */
  @javax.annotation.Nullable
  public Integer getAlreadyRegisteredPersonsCount() {
    return alreadyRegisteredPersonsCount;
  }

  public void setAlreadyRegisteredPersonsCount(Integer alreadyRegisteredPersonsCount) {
    this.alreadyRegisteredPersonsCount = alreadyRegisteredPersonsCount;
  }


  public InvitationStatisticsDTO invitedPersonsCount(Integer invitedPersonsCount) {
    this.invitedPersonsCount = invitedPersonsCount;
    return this;
  }

  /**
   * Get invitedPersonsCount
   * @return invitedPersonsCount
   */
  @javax.annotation.Nullable
  public Integer getInvitedPersonsCount() {
    return invitedPersonsCount;
  }

  public void setInvitedPersonsCount(Integer invitedPersonsCount) {
    this.invitedPersonsCount = invitedPersonsCount;
  }


  public InvitationStatisticsDTO providersWithAlreadyRegisteredPersonCount(Integer providersWithAlreadyRegisteredPersonCount) {
    this.providersWithAlreadyRegisteredPersonCount = providersWithAlreadyRegisteredPersonCount;
    return this;
  }

  /**
   * Get providersWithAlreadyRegisteredPersonCount
   * @return providersWithAlreadyRegisteredPersonCount
   */
  @javax.annotation.Nullable
  public Integer getProvidersWithAlreadyRegisteredPersonCount() {
    return providersWithAlreadyRegisteredPersonCount;
  }

  public void setProvidersWithAlreadyRegisteredPersonCount(Integer providersWithAlreadyRegisteredPersonCount) {
    this.providersWithAlreadyRegisteredPersonCount = providersWithAlreadyRegisteredPersonCount;
  }


  public InvitationStatisticsDTO providersWithInvitedPersonCount(Integer providersWithInvitedPersonCount) {
    this.providersWithInvitedPersonCount = providersWithInvitedPersonCount;
    return this;
  }

  /**
   * Get providersWithInvitedPersonCount
   * @return providersWithInvitedPersonCount
   */
  @javax.annotation.Nullable
  public Integer getProvidersWithInvitedPersonCount() {
    return providersWithInvitedPersonCount;
  }

  public void setProvidersWithInvitedPersonCount(Integer providersWithInvitedPersonCount) {
    this.providersWithInvitedPersonCount = providersWithInvitedPersonCount;
  }


  public InvitationStatisticsDTO providersWithoutPersonCount(Integer providersWithoutPersonCount) {
    this.providersWithoutPersonCount = providersWithoutPersonCount;
    return this;
  }

  /**
   * Get providersWithoutPersonCount
   * @return providersWithoutPersonCount
   */
  @javax.annotation.Nullable
  public Integer getProvidersWithoutPersonCount() {
    return providersWithoutPersonCount;
  }

  public void setProvidersWithoutPersonCount(Integer providersWithoutPersonCount) {
    this.providersWithoutPersonCount = providersWithoutPersonCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvitationStatisticsDTO invitationStatisticsDTO = (InvitationStatisticsDTO) o;
    return Objects.equals(this.alreadyRegisteredPersonsCount, invitationStatisticsDTO.alreadyRegisteredPersonsCount) &&
        Objects.equals(this.invitedPersonsCount, invitationStatisticsDTO.invitedPersonsCount) &&
        Objects.equals(this.providersWithAlreadyRegisteredPersonCount, invitationStatisticsDTO.providersWithAlreadyRegisteredPersonCount) &&
        Objects.equals(this.providersWithInvitedPersonCount, invitationStatisticsDTO.providersWithInvitedPersonCount) &&
        Objects.equals(this.providersWithoutPersonCount, invitationStatisticsDTO.providersWithoutPersonCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alreadyRegisteredPersonsCount, invitedPersonsCount, providersWithAlreadyRegisteredPersonCount, providersWithInvitedPersonCount, providersWithoutPersonCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvitationStatisticsDTO {\n");
    sb.append("    alreadyRegisteredPersonsCount: ").append(toIndentedString(alreadyRegisteredPersonsCount)).append("\n");
    sb.append("    invitedPersonsCount: ").append(toIndentedString(invitedPersonsCount)).append("\n");
    sb.append("    providersWithAlreadyRegisteredPersonCount: ").append(toIndentedString(providersWithAlreadyRegisteredPersonCount)).append("\n");
    sb.append("    providersWithInvitedPersonCount: ").append(toIndentedString(providersWithInvitedPersonCount)).append("\n");
    sb.append("    providersWithoutPersonCount: ").append(toIndentedString(providersWithoutPersonCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alreadyRegisteredPersonsCount");
    openapiFields.add("invitedPersonsCount");
    openapiFields.add("providersWithAlreadyRegisteredPersonCount");
    openapiFields.add("providersWithInvitedPersonCount");
    openapiFields.add("providersWithoutPersonCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvitationStatisticsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvitationStatisticsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvitationStatisticsDTO is not found in the empty JSON string", InvitationStatisticsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvitationStatisticsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvitationStatisticsDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvitationStatisticsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvitationStatisticsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvitationStatisticsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvitationStatisticsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<InvitationStatisticsDTO>() {
           @Override
           public void write(JsonWriter out, InvitationStatisticsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvitationStatisticsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvitationStatisticsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvitationStatisticsDTO
   * @throws IOException if the JSON string is invalid with respect to InvitationStatisticsDTO
   */
  public static InvitationStatisticsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvitationStatisticsDTO.class);
  }

  /**
   * Convert an instance of InvitationStatisticsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

