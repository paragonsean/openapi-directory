/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClassicPeopleDTO;
import org.openapitools.client.model.CommonLanguageCombinationDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.ProjectDatesDTO;
import org.openapitools.client.model.TaskFinanceDTO;
import org.openapitools.client.model.TaskJobsDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskDTO {
  public static final String SERIALIZED_NAME_CLIENT_TASK_P_O_NUMBER = "clientTaskPONumber";
  @SerializedName(SERIALIZED_NAME_CLIENT_TASK_P_O_NUMBER)
  private String clientTaskPONumber;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFieldDTO> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private ProjectDatesDTO dates;

  public static final String SERIALIZED_NAME_FINANCE = "finance";
  @SerializedName(SERIALIZED_NAME_FINANCE)
  private TaskFinanceDTO finance;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private InstructionsDTO instructions;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private TaskJobsDTO jobs;

  public static final String SERIALIZED_NAME_LANGUAGE_COMBINATION = "languageCombination";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_COMBINATION)
  private CommonLanguageCombinationDTO languageCombination;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEOPLE = "people";
  @SerializedName(SERIALIZED_NAME_PEOPLE)
  private ClassicPeopleDTO people;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private Long quoteId;

  public TaskDTO() {
  }

  public TaskDTO clientTaskPONumber(String clientTaskPONumber) {
    this.clientTaskPONumber = clientTaskPONumber;
    return this;
  }

  /**
   * client task PO number
   * @return clientTaskPONumber
   */
  @javax.annotation.Nullable
  public String getClientTaskPONumber() {
    return clientTaskPONumber;
  }

  public void setClientTaskPONumber(String clientTaskPONumber) {
    this.clientTaskPONumber = clientTaskPONumber;
  }


  public TaskDTO customFields(List<CustomFieldDTO> customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<CustomFieldDTO> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomFieldDTO> customFields) {
    this.customFields = customFields;
  }


  public TaskDTO dates(ProjectDatesDTO dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public ProjectDatesDTO getDates() {
    return dates;
  }

  public void setDates(ProjectDatesDTO dates) {
    this.dates = dates;
  }


  public TaskDTO finance(TaskFinanceDTO finance) {
    this.finance = finance;
    return this;
  }

  /**
   * Get finance
   * @return finance
   */
  @javax.annotation.Nullable
  public TaskFinanceDTO getFinance() {
    return finance;
  }

  public void setFinance(TaskFinanceDTO finance) {
    this.finance = finance;
  }


  public TaskDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * internal identifier
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public TaskDTO idNumber(String idNumber) {
    this.idNumber = idNumber;
    return this;
  }

  /**
   * identifier
   * @return idNumber
   */
  @javax.annotation.Nullable
  public String getIdNumber() {
    return idNumber;
  }

  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }


  public TaskDTO instructions(InstructionsDTO instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * Get instructions
   * @return instructions
   */
  @javax.annotation.Nullable
  public InstructionsDTO getInstructions() {
    return instructions;
  }

  public void setInstructions(InstructionsDTO instructions) {
    this.instructions = instructions;
  }


  public TaskDTO jobs(TaskJobsDTO jobs) {
    this.jobs = jobs;
    return this;
  }

  /**
   * Get jobs
   * @return jobs
   */
  @javax.annotation.Nullable
  public TaskJobsDTO getJobs() {
    return jobs;
  }

  public void setJobs(TaskJobsDTO jobs) {
    this.jobs = jobs;
  }


  public TaskDTO languageCombination(CommonLanguageCombinationDTO languageCombination) {
    this.languageCombination = languageCombination;
    return this;
  }

  /**
   * Get languageCombination
   * @return languageCombination
   */
  @javax.annotation.Nullable
  public CommonLanguageCombinationDTO getLanguageCombination() {
    return languageCombination;
  }

  public void setLanguageCombination(CommonLanguageCombinationDTO languageCombination) {
    this.languageCombination = languageCombination;
  }


  public TaskDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TaskDTO people(ClassicPeopleDTO people) {
    this.people = people;
    return this;
  }

  /**
   * Get people
   * @return people
   */
  @javax.annotation.Nullable
  public ClassicPeopleDTO getPeople() {
    return people;
  }

  public void setPeople(ClassicPeopleDTO people) {
    this.people = people;
  }


  public TaskDTO projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * project&#39;s internal identifier
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public TaskDTO quoteId(Long quoteId) {
    this.quoteId = quoteId;
    return this;
  }

  /**
   * quote&#39;s internal identifier
   * @return quoteId
   */
  @javax.annotation.Nullable
  public Long getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(Long quoteId) {
    this.quoteId = quoteId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskDTO taskDTO = (TaskDTO) o;
    return Objects.equals(this.clientTaskPONumber, taskDTO.clientTaskPONumber) &&
        Objects.equals(this.customFields, taskDTO.customFields) &&
        Objects.equals(this.dates, taskDTO.dates) &&
        Objects.equals(this.finance, taskDTO.finance) &&
        Objects.equals(this.id, taskDTO.id) &&
        Objects.equals(this.idNumber, taskDTO.idNumber) &&
        Objects.equals(this.instructions, taskDTO.instructions) &&
        Objects.equals(this.jobs, taskDTO.jobs) &&
        Objects.equals(this.languageCombination, taskDTO.languageCombination) &&
        Objects.equals(this.name, taskDTO.name) &&
        Objects.equals(this.people, taskDTO.people) &&
        Objects.equals(this.projectId, taskDTO.projectId) &&
        Objects.equals(this.quoteId, taskDTO.quoteId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientTaskPONumber, customFields, dates, finance, id, idNumber, instructions, jobs, languageCombination, name, people, projectId, quoteId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskDTO {\n");
    sb.append("    clientTaskPONumber: ").append(toIndentedString(clientTaskPONumber)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    finance: ").append(toIndentedString(finance)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    languageCombination: ").append(toIndentedString(languageCombination)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    people: ").append(toIndentedString(people)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientTaskPONumber");
    openapiFields.add("customFields");
    openapiFields.add("dates");
    openapiFields.add("finance");
    openapiFields.add("id");
    openapiFields.add("idNumber");
    openapiFields.add("instructions");
    openapiFields.add("jobs");
    openapiFields.add("languageCombination");
    openapiFields.add("name");
    openapiFields.add("people");
    openapiFields.add("projectId");
    openapiFields.add("quoteId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskDTO is not found in the empty JSON string", TaskDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientTaskPONumber") != null && !jsonObj.get("clientTaskPONumber").isJsonNull()) && !jsonObj.get("clientTaskPONumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTaskPONumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientTaskPONumber").toString()));
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        ProjectDatesDTO.validateJsonElement(jsonObj.get("dates"));
      }
      // validate the optional field `finance`
      if (jsonObj.get("finance") != null && !jsonObj.get("finance").isJsonNull()) {
        TaskFinanceDTO.validateJsonElement(jsonObj.get("finance"));
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
      // validate the optional field `instructions`
      if (jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) {
        InstructionsDTO.validateJsonElement(jsonObj.get("instructions"));
      }
      // validate the optional field `jobs`
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        TaskJobsDTO.validateJsonElement(jsonObj.get("jobs"));
      }
      // validate the optional field `languageCombination`
      if (jsonObj.get("languageCombination") != null && !jsonObj.get("languageCombination").isJsonNull()) {
        CommonLanguageCombinationDTO.validateJsonElement(jsonObj.get("languageCombination"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `people`
      if (jsonObj.get("people") != null && !jsonObj.get("people").isJsonNull()) {
        ClassicPeopleDTO.validateJsonElement(jsonObj.get("people"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskDTO>() {
           @Override
           public void write(JsonWriter out, TaskDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskDTO
   * @throws IOException if the JSON string is invalid with respect to TaskDTO
   */
  public static TaskDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskDTO.class);
  }

  /**
   * Convert an instance of TaskDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

