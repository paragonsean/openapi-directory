/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurrencyHistoryDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrencyHistoryDTO {
  public static final String SERIALIZED_NAME_DATE_FROM = "dateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private TimeDTO dateFrom;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private String exchangeRate;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION = "lastModification";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION)
  private TimeDTO lastModification;

  public static final String SERIALIZED_NAME_ORIGIN_DETAILS = "originDetails";
  @SerializedName(SERIALIZED_NAME_ORIGIN_DETAILS)
  private String originDetails;

  public static final String SERIALIZED_NAME_PUBLICATION_DATE = "publicationDate";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_DATE)
  private TimeDTO publicationDate;

  public CurrencyHistoryDTO() {
  }

  public CurrencyHistoryDTO dateFrom(TimeDTO dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * Get dateFrom
   * @return dateFrom
   */
  @javax.annotation.Nullable
  public TimeDTO getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(TimeDTO dateFrom) {
    this.dateFrom = dateFrom;
  }


  public CurrencyHistoryDTO exchangeRate(String exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

  /**
   * Get exchangeRate
   * @return exchangeRate
   */
  @javax.annotation.Nullable
  public String getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(String exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public CurrencyHistoryDTO lastModification(TimeDTO lastModification) {
    this.lastModification = lastModification;
    return this;
  }

  /**
   * Get lastModification
   * @return lastModification
   */
  @javax.annotation.Nullable
  public TimeDTO getLastModification() {
    return lastModification;
  }

  public void setLastModification(TimeDTO lastModification) {
    this.lastModification = lastModification;
  }


  public CurrencyHistoryDTO originDetails(String originDetails) {
    this.originDetails = originDetails;
    return this;
  }

  /**
   * Get originDetails
   * @return originDetails
   */
  @javax.annotation.Nullable
  public String getOriginDetails() {
    return originDetails;
  }

  public void setOriginDetails(String originDetails) {
    this.originDetails = originDetails;
  }


  public CurrencyHistoryDTO publicationDate(TimeDTO publicationDate) {
    this.publicationDate = publicationDate;
    return this;
  }

  /**
   * Get publicationDate
   * @return publicationDate
   */
  @javax.annotation.Nullable
  public TimeDTO getPublicationDate() {
    return publicationDate;
  }

  public void setPublicationDate(TimeDTO publicationDate) {
    this.publicationDate = publicationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyHistoryDTO currencyHistoryDTO = (CurrencyHistoryDTO) o;
    return Objects.equals(this.dateFrom, currencyHistoryDTO.dateFrom) &&
        Objects.equals(this.exchangeRate, currencyHistoryDTO.exchangeRate) &&
        Objects.equals(this.lastModification, currencyHistoryDTO.lastModification) &&
        Objects.equals(this.originDetails, currencyHistoryDTO.originDetails) &&
        Objects.equals(this.publicationDate, currencyHistoryDTO.publicationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateFrom, exchangeRate, lastModification, originDetails, publicationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyHistoryDTO {\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    lastModification: ").append(toIndentedString(lastModification)).append("\n");
    sb.append("    originDetails: ").append(toIndentedString(originDetails)).append("\n");
    sb.append("    publicationDate: ").append(toIndentedString(publicationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateFrom");
    openapiFields.add("exchangeRate");
    openapiFields.add("lastModification");
    openapiFields.add("originDetails");
    openapiFields.add("publicationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrencyHistoryDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrencyHistoryDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrencyHistoryDTO is not found in the empty JSON string", CurrencyHistoryDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrencyHistoryDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrencyHistoryDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dateFrom`
      if (jsonObj.get("dateFrom") != null && !jsonObj.get("dateFrom").isJsonNull()) {
        TimeDTO.validateJsonElement(jsonObj.get("dateFrom"));
      }
      if ((jsonObj.get("exchangeRate") != null && !jsonObj.get("exchangeRate").isJsonNull()) && !jsonObj.get("exchangeRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeRate").toString()));
      }
      // validate the optional field `lastModification`
      if (jsonObj.get("lastModification") != null && !jsonObj.get("lastModification").isJsonNull()) {
        TimeDTO.validateJsonElement(jsonObj.get("lastModification"));
      }
      if ((jsonObj.get("originDetails") != null && !jsonObj.get("originDetails").isJsonNull()) && !jsonObj.get("originDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originDetails").toString()));
      }
      // validate the optional field `publicationDate`
      if (jsonObj.get("publicationDate") != null && !jsonObj.get("publicationDate").isJsonNull()) {
        TimeDTO.validateJsonElement(jsonObj.get("publicationDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrencyHistoryDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrencyHistoryDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrencyHistoryDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrencyHistoryDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrencyHistoryDTO>() {
           @Override
           public void write(JsonWriter out, CurrencyHistoryDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrencyHistoryDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrencyHistoryDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrencyHistoryDTO
   * @throws IOException if the JSON string is invalid with respect to CurrencyHistoryDTO
   */
  public static CurrencyHistoryDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrencyHistoryDTO.class);
  }

  /**
   * Convert an instance of CurrencyHistoryDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

