/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstructionsDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstructionsDTO {
  public static final String SERIALIZED_NAME_FOR_PROVIDER = "forProvider";
  @SerializedName(SERIALIZED_NAME_FOR_PROVIDER)
  private String forProvider;

  public static final String SERIALIZED_NAME_FROM_CUSTOMER = "fromCustomer";
  @SerializedName(SERIALIZED_NAME_FROM_CUSTOMER)
  private String fromCustomer;

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  private String internal;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PAYMENT_NOTE_FOR_CUSTOMER = "paymentNoteForCustomer";
  @SerializedName(SERIALIZED_NAME_PAYMENT_NOTE_FOR_CUSTOMER)
  private String paymentNoteForCustomer;

  public static final String SERIALIZED_NAME_PAYMENT_NOTE_FOR_VENDOR = "paymentNoteForVendor";
  @SerializedName(SERIALIZED_NAME_PAYMENT_NOTE_FOR_VENDOR)
  private String paymentNoteForVendor;

  public InstructionsDTO() {
  }

  public InstructionsDTO forProvider(String forProvider) {
    this.forProvider = forProvider;
    return this;
  }

  /**
   * Get forProvider
   * @return forProvider
   */
  @javax.annotation.Nullable
  public String getForProvider() {
    return forProvider;
  }

  public void setForProvider(String forProvider) {
    this.forProvider = forProvider;
  }


  public InstructionsDTO fromCustomer(String fromCustomer) {
    this.fromCustomer = fromCustomer;
    return this;
  }

  /**
   * Get fromCustomer
   * @return fromCustomer
   */
  @javax.annotation.Nullable
  public String getFromCustomer() {
    return fromCustomer;
  }

  public void setFromCustomer(String fromCustomer) {
    this.fromCustomer = fromCustomer;
  }


  public InstructionsDTO internal(String internal) {
    this.internal = internal;
    return this;
  }

  /**
   * Get internal
   * @return internal
   */
  @javax.annotation.Nullable
  public String getInternal() {
    return internal;
  }

  public void setInternal(String internal) {
    this.internal = internal;
  }


  public InstructionsDTO notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public InstructionsDTO paymentNoteForCustomer(String paymentNoteForCustomer) {
    this.paymentNoteForCustomer = paymentNoteForCustomer;
    return this;
  }

  /**
   * Get paymentNoteForCustomer
   * @return paymentNoteForCustomer
   */
  @javax.annotation.Nullable
  public String getPaymentNoteForCustomer() {
    return paymentNoteForCustomer;
  }

  public void setPaymentNoteForCustomer(String paymentNoteForCustomer) {
    this.paymentNoteForCustomer = paymentNoteForCustomer;
  }


  public InstructionsDTO paymentNoteForVendor(String paymentNoteForVendor) {
    this.paymentNoteForVendor = paymentNoteForVendor;
    return this;
  }

  /**
   * Get paymentNoteForVendor
   * @return paymentNoteForVendor
   */
  @javax.annotation.Nullable
  public String getPaymentNoteForVendor() {
    return paymentNoteForVendor;
  }

  public void setPaymentNoteForVendor(String paymentNoteForVendor) {
    this.paymentNoteForVendor = paymentNoteForVendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstructionsDTO instructionsDTO = (InstructionsDTO) o;
    return Objects.equals(this.forProvider, instructionsDTO.forProvider) &&
        Objects.equals(this.fromCustomer, instructionsDTO.fromCustomer) &&
        Objects.equals(this.internal, instructionsDTO.internal) &&
        Objects.equals(this.notes, instructionsDTO.notes) &&
        Objects.equals(this.paymentNoteForCustomer, instructionsDTO.paymentNoteForCustomer) &&
        Objects.equals(this.paymentNoteForVendor, instructionsDTO.paymentNoteForVendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forProvider, fromCustomer, internal, notes, paymentNoteForCustomer, paymentNoteForVendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstructionsDTO {\n");
    sb.append("    forProvider: ").append(toIndentedString(forProvider)).append("\n");
    sb.append("    fromCustomer: ").append(toIndentedString(fromCustomer)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    paymentNoteForCustomer: ").append(toIndentedString(paymentNoteForCustomer)).append("\n");
    sb.append("    paymentNoteForVendor: ").append(toIndentedString(paymentNoteForVendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forProvider");
    openapiFields.add("fromCustomer");
    openapiFields.add("internal");
    openapiFields.add("notes");
    openapiFields.add("paymentNoteForCustomer");
    openapiFields.add("paymentNoteForVendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstructionsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstructionsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstructionsDTO is not found in the empty JSON string", InstructionsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstructionsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstructionsDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forProvider") != null && !jsonObj.get("forProvider").isJsonNull()) && !jsonObj.get("forProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forProvider").toString()));
      }
      if ((jsonObj.get("fromCustomer") != null && !jsonObj.get("fromCustomer").isJsonNull()) && !jsonObj.get("fromCustomer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromCustomer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromCustomer").toString()));
      }
      if ((jsonObj.get("internal") != null && !jsonObj.get("internal").isJsonNull()) && !jsonObj.get("internal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internal").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("paymentNoteForCustomer") != null && !jsonObj.get("paymentNoteForCustomer").isJsonNull()) && !jsonObj.get("paymentNoteForCustomer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentNoteForCustomer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentNoteForCustomer").toString()));
      }
      if ((jsonObj.get("paymentNoteForVendor") != null && !jsonObj.get("paymentNoteForVendor").isJsonNull()) && !jsonObj.get("paymentNoteForVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentNoteForVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentNoteForVendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstructionsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstructionsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstructionsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstructionsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<InstructionsDTO>() {
           @Override
           public void write(JsonWriter out, InstructionsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstructionsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstructionsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstructionsDTO
   * @throws IOException if the JSON string is invalid with respect to InstructionsDTO
   */
  public static InstructionsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstructionsDTO.class);
  }

  /**
   * Convert an instance of InstructionsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

