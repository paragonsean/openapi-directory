/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BigDecimalDTO;
import org.openapitools.client.model.CustomFieldDTO;
import java.io.File;
import org.openapitools.client.model.FileDto;
import org.openapitools.client.model.FilesArchiveDto;
import org.openapitools.client.model.FilesDto;
import org.openapitools.client.model.FinanceDTO;
import org.openapitools.client.model.JobDto;
import org.openapitools.client.model.PayableCreateDTO;
import org.openapitools.client.model.PayableDTO;
import org.openapitools.client.model.ProjectFileDto;
import org.openapitools.client.model.ProjectStatusDTO;
import org.openapitools.client.model.QuoteCreateDTO;
import org.openapitools.client.model.QuoteDTOv2;
import org.openapitools.client.model.ReceivableCreateDTO;
import org.openapitools.client.model.ReceivableDTO;
import org.openapitools.client.model.SmartContactsDTO;
import org.openapitools.client.model.SmartCustomFieldDTO;
import org.openapitools.client.model.SourceLanguageDTO;
import org.openapitools.client.model.SpecializationDTO;
import org.openapitools.client.model.StringDTO;
import org.openapitools.client.model.TargetLanguagesDTO;
import org.openapitools.client.model.TimeDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuotesSmartV2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuotesSmartV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public QuotesSmartV2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFiles2
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Added files to the quote as added by PM. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFiles2Call(String quoteId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/files/add"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFiles2ValidateBeforeCall(String quoteId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling addFiles2(Async)");
        }

        // verify the required parameter 'timeDTO' is set
        if (timeDTO == null) {
            throw new ApiException("Missing the required parameter 'timeDTO' when calling addFiles2(Async)");
        }

        return addFiles2Call(quoteId, timeDTO, _callback);

    }

    /**
     * Adds files to the quote as added by PM.
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \&quot;POST v2/quotes/{quoteId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Added files to the quote as added by PM. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addFiles2(String quoteId, TimeDTO timeDTO) throws ApiException {
        addFiles2WithHttpInfo(quoteId, timeDTO);
    }

    /**
     * Adds files to the quote as added by PM.
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \&quot;POST v2/quotes/{quoteId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Added files to the quote as added by PM. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addFiles2WithHttpInfo(String quoteId, TimeDTO timeDTO) throws ApiException {
        okhttp3.Call localVarCall = addFiles2ValidateBeforeCall(quoteId, timeDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds files to the quote as added by PM. (asynchronously)
     * Adds files to the quote as added by PM. The files have to be uploaded beforehand (see \&quot;POST v2/quotes/{quoteId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Added files to the quote as added by PM. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFiles2Async(String quoteId, TimeDTO timeDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFiles2ValidateBeforeCall(quoteId, timeDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for archive1
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archive1Call(FilesDto filesDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesDto;

        // create path and map variables
        String localVarPath = "/v2/quotes/files/archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archive1ValidateBeforeCall(FilesDto filesDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filesDto' is set
        if (filesDto == null) {
            throw new ApiException("Missing the required parameter 'filesDto' when calling archive1(Async)");
        }

        return archive1Call(filesDto, _callback);

    }

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @return FilesArchiveDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FilesArchiveDto archive1(FilesDto filesDto) throws ApiException {
        ApiResponse<FilesArchiveDto> localVarResp = archive1WithHttpInfo(filesDto);
        return localVarResp.getData();
    }

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @return ApiResponse&lt;FilesArchiveDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FilesArchiveDto> archive1WithHttpInfo(FilesDto filesDto) throws ApiException {
        okhttp3.Call localVarCall = archive1ValidateBeforeCall(filesDto, null);
        Type localVarReturnType = new TypeToken<FilesArchiveDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prepares a ZIP archive that contains the specified files. (asynchronously)
     * Prepares a ZIP archive that contains the specified files.
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archive1Async(FilesDto filesDto, final ApiCallback<FilesArchiveDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = archive1ValidateBeforeCall(filesDto, _callback);
        Type localVarReturnType = new TypeToken<FilesArchiveDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeStatus3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param projectStatusDTO Changed Quote status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeStatus3Call(String quoteId, ProjectStatusDTO projectStatusDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectStatusDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/status"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeStatus3ValidateBeforeCall(String quoteId, ProjectStatusDTO projectStatusDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling changeStatus3(Async)");
        }

        // verify the required parameter 'projectStatusDTO' is set
        if (projectStatusDTO == null) {
            throw new ApiException("Missing the required parameter 'projectStatusDTO' when calling changeStatus3(Async)");
        }

        return changeStatus3Call(quoteId, projectStatusDTO, _callback);

    }

    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise).
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED&lt;/li&gt;&lt;li&gt;SENT – available when the job has one of the following statuses: PENDING&lt;/li&gt;&lt;li&gt;APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT&lt;/li&gt;&lt;li&gt;REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT&lt;/li&gt;&lt;/ul&gt;
     * @param quoteId quote&#39;s internal identifier (required)
     * @param projectStatusDTO Changed Quote status. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void changeStatus3(String quoteId, ProjectStatusDTO projectStatusDTO) throws ApiException {
        changeStatus3WithHttpInfo(quoteId, projectStatusDTO);
    }

    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise).
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED&lt;/li&gt;&lt;li&gt;SENT – available when the job has one of the following statuses: PENDING&lt;/li&gt;&lt;li&gt;APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT&lt;/li&gt;&lt;li&gt;REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT&lt;/li&gt;&lt;/ul&gt;
     * @param quoteId quote&#39;s internal identifier (required)
     * @param projectStatusDTO Changed Quote status. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeStatus3WithHttpInfo(String quoteId, ProjectStatusDTO projectStatusDTO) throws ApiException {
        okhttp3.Call localVarCall = changeStatus3ValidateBeforeCall(quoteId, projectStatusDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changes quote status if possible (400 Bad Request is returned otherwise). (asynchronously)
     * Changes quote status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;PENDING – available when the job has one of the following statuses: REQUESTED, REJECTED&lt;/li&gt;&lt;li&gt;SENT – available when the job has one of the following statuses: PENDING&lt;/li&gt;&lt;li&gt;APPROVED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT, APPROVED_BY_CLIENT&lt;/li&gt;&lt;li&gt;REJECTED – available when the job has one of the following statuses: REQUESTED, PENDING, SENT&lt;/li&gt;&lt;/ul&gt;
     * @param quoteId quote&#39;s internal identifier (required)
     * @param projectStatusDTO Changed Quote status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeStatus3Async(String quoteId, ProjectStatusDTO projectStatusDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeStatus3ValidateBeforeCall(quoteId, projectStatusDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for create7
     * @param quoteCreateDTO Project to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create7Call(QuoteCreateDTO quoteCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteCreateDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create7ValidateBeforeCall(QuoteCreateDTO quoteCreateDTO, final ApiCallback _callback) throws ApiException {
        return create7Call(quoteCreateDTO, _callback);

    }

    /**
     * Creates a new Smart Quote.
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteCreateDTO Project to create (optional)
     * @return QuoteDTOv2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteDTOv2 create7(QuoteCreateDTO quoteCreateDTO) throws ApiException {
        ApiResponse<QuoteDTOv2> localVarResp = create7WithHttpInfo(quoteCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new Smart Quote.
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteCreateDTO Project to create (optional)
     * @return ApiResponse&lt;QuoteDTOv2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteDTOv2> create7WithHttpInfo(QuoteCreateDTO quoteCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = create7ValidateBeforeCall(quoteCreateDTO, null);
        Type localVarReturnType = new TypeToken<QuoteDTOv2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Smart Quote. (asynchronously)
     * Creates a new Smart Quote. If the specified service ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteCreateDTO Project to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create7Async(QuoteCreateDTO quoteCreateDTO, final ApiCallback<QuoteDTOv2> _callback) throws ApiException {

        okhttp3.Call localVarCall = create7ValidateBeforeCall(quoteCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<QuoteDTOv2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayable3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayable3Call(String quoteId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableCreateDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/payables"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayable3ValidateBeforeCall(String quoteId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling createPayable3(Async)");
        }

        // verify the required parameter 'payableCreateDTO' is set
        if (payableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'payableCreateDTO' when calling createPayable3(Async)");
        }

        return createPayable3Call(quoteId, payableCreateDTO, _callback);

    }

    /**
     * Adds a payable to a quote.
     * Adds a payable to a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO createPayable3(String quoteId, PayableCreateDTO payableCreateDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = createPayable3WithHttpInfo(quoteId, payableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a payable to a quote.
     * Adds a payable to a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> createPayable3WithHttpInfo(String quoteId, PayableCreateDTO payableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createPayable3ValidateBeforeCall(quoteId, payableCreateDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a payable to a quote. (asynchronously)
     * Adds a payable to a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayable3Async(String quoteId, PayableCreateDTO payableCreateDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayable3ValidateBeforeCall(quoteId, payableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReceivable3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivable3Call(String quoteId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableCreateDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/receivables"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceivable3ValidateBeforeCall(String quoteId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling createReceivable3(Async)");
        }

        // verify the required parameter 'receivableCreateDTO' is set
        if (receivableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableCreateDTO' when calling createReceivable3(Async)");
        }

        return createReceivable3Call(quoteId, receivableCreateDTO, _callback);

    }

    /**
     * Adds a receivable to a quote.
     * Adds a receivable to a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO createReceivable3(String quoteId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = createReceivable3WithHttpInfo(quoteId, receivableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a receivable to a quote.
     * Adds a receivable to a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> createReceivable3WithHttpInfo(String quoteId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createReceivable3ValidateBeforeCall(quoteId, receivableCreateDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a receivable to a quote. (asynchronously)
     * Adds a receivable to a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivable3Async(String quoteId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceivable3ValidateBeforeCall(quoteId, receivableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayable3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayable3Call(String quoteId, Long payableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/payables/{payableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayable3ValidateBeforeCall(String quoteId, Long payableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling deletePayable3(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling deletePayable3(Async)");
        }

        return deletePayable3Call(quoteId, payableId, _callback);

    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayable3(String quoteId, Long payableId) throws ApiException {
        deletePayable3WithHttpInfo(quoteId, payableId);
    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayable3WithHttpInfo(String quoteId, Long payableId) throws ApiException {
        okhttp3.Call localVarCall = deletePayable3ValidateBeforeCall(quoteId, payableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a payable. (asynchronously)
     * Deletes a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayable3Async(String quoteId, Long payableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayable3ValidateBeforeCall(quoteId, payableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReceivable3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivable3Call(String quoteId, Long receivableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/receivables/{receivableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReceivable3ValidateBeforeCall(String quoteId, Long receivableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling deleteReceivable3(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling deleteReceivable3(Async)");
        }

        return deleteReceivable3Call(quoteId, receivableId, _callback);

    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReceivable3(String quoteId, Long receivableId) throws ApiException {
        deleteReceivable3WithHttpInfo(quoteId, receivableId);
    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReceivable3WithHttpInfo(String quoteId, Long receivableId) throws ApiException {
        okhttp3.Call localVarCall = deleteReceivable3ValidateBeforeCall(quoteId, receivableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a receivable. (asynchronously)
     * Deletes a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivable3Async(String quoteId, Long receivableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReceivable3ValidateBeforeCall(quoteId, receivableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById10
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById10Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById10ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getById10(Async)");
        }

        return getById10Call(quoteId, _callback);

    }

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return QuoteDTOv2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteDTOv2 getById10(String quoteId) throws ApiException {
        ApiResponse<QuoteDTOv2> localVarResp = getById10WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;QuoteDTOv2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteDTOv2> getById10WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getById10ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<QuoteDTOv2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns quote details. (asynchronously)
     * Returns quote details. If the specified quote ID refers to Classic Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById10Async(String quoteId, final ApiCallback<QuoteDTOv2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById10ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<QuoteDTOv2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContacts3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContacts3Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientContacts"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContacts3ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getContacts3(Async)");
        }

        return getContacts3Call(quoteId, _callback);

    }

    /**
     * Returns Client Contacts information for a quote.
     * Returns Client Contacts information for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return SmartContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SmartContactsDTO getContacts3(String quoteId) throws ApiException {
        ApiResponse<SmartContactsDTO> localVarResp = getContacts3WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns Client Contacts information for a quote.
     * Returns Client Contacts information for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;SmartContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartContactsDTO> getContacts3WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getContacts3ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns Client Contacts information for a quote. (asynchronously)
     * Returns Client Contacts information for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContacts3Async(String quoteId, final ApiCallback<SmartContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContacts3ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFields9
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields9Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/customFields"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFields9ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getCustomFields9(Async)");
        }

        return getCustomFields9Call(quoteId, _callback);

    }

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> getCustomFields9(String quoteId) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = getCustomFields9WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> getCustomFields9WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFields9ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of custom field keys and values for a project. (asynchronously)
     * Returns a list of custom field keys and values for a project.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields9Async(String quoteId, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFields9ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileById3
     * @param fileId file&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileById3Call(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileById3ValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileById3(Async)");
        }

        return getFileById3Call(fileId, _callback);

    }

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param fileId file&#39;s internal identifier (required)
     * @return ProjectFileDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFileDto getFileById3(String fileId) throws ApiException {
        ApiResponse<ProjectFileDto> localVarResp = getFileById3WithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param fileId file&#39;s internal identifier (required)
     * @return ApiResponse&lt;ProjectFileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFileDto> getFileById3WithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileById3ValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<ProjectFileDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns details of a file. (asynchronously)
     * Returns details of a file.
     * @param fileId file&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileById3Async(String fileId, final ApiCallback<ProjectFileDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileById3ValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<ProjectFileDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileContentById1
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentById1Call(String fileId, String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/files/{fileId}/download/{fileName}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "fileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileContentById1ValidateBeforeCall(String fileId, String fileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileContentById1(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getFileContentById1(Async)");
        }

        return getFileContentById1Call(fileId, fileName, _callback);

    }

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getFileContentById1(String fileId, String fileName) throws ApiException {
        getFileContentById1WithHttpInfo(fileId, fileName);
    }

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getFileContentById1WithHttpInfo(String fileId, String fileName) throws ApiException {
        okhttp3.Call localVarCall = getFileContentById1ValidateBeforeCall(fileId, fileName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Downloads a file content. (asynchronously)
     * Downloads a file content.
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentById1Async(String fileId, String fileName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileContentById1ValidateBeforeCall(fileId, fileName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFiles1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFiles1Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/files"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFiles1ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getFiles1(Async)");
        }

        return getFiles1Call(quoteId, _callback);

    }

    /**
     * Returns list of files in a quote.
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return List&lt;ProjectFileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFileDto> getFiles1(String quoteId) throws ApiException {
        ApiResponse<List<ProjectFileDto>> localVarResp = getFiles1WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns list of files in a quote.
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;ProjectFileDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFileDto>> getFiles1WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getFiles1ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of files in a quote. (asynchronously)
     * Returns list of files in a quote. Only files added to the quote (i.e. files that have assigned category and languages) are listed.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFiles1Async(String quoteId, final ApiCallback<List<ProjectFileDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFiles1ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinance3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinance3Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinance3ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getFinance3(Async)");
        }

        return getFinance3Call(quoteId, _callback);

    }

    /**
     * Returns finance information for a quote.
     * Returns finance information for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return FinanceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FinanceDTO getFinance3(String quoteId) throws ApiException {
        ApiResponse<FinanceDTO> localVarResp = getFinance3WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns finance information for a quote.
     * Returns finance information for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;FinanceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FinanceDTO> getFinance3WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getFinance3ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns finance information for a quote. (asynchronously)
     * Returns finance information for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinance3Async(String quoteId, final ApiCallback<FinanceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinance3ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobs1Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/jobs"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobs1ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getJobs1(Async)");
        }

        return getJobs1Call(quoteId, _callback);

    }

    /**
     * Returns list of jobs in a quote.
     * Returns list of jobs in a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return List&lt;JobDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<JobDto> getJobs1(String quoteId) throws ApiException {
        ApiResponse<List<JobDto>> localVarResp = getJobs1WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns list of jobs in a quote.
     * Returns list of jobs in a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;JobDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobDto>> getJobs1WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getJobs1ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<List<JobDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of jobs in a quote. (asynchronously)
     * Returns list of jobs in a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobs1Async(String quoteId, final ApiCallback<List<JobDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobs1ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<List<JobDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBusinessDays
     * @param quoteId quote&#39;s internal identifier (required)
     * @param body Updated Business Days for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBusinessDaysCall(String quoteId, Integer body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/businessDays"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBusinessDaysValidateBeforeCall(String quoteId, Integer body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateBusinessDays(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateBusinessDays(Async)");
        }

        return updateBusinessDaysCall(quoteId, body, _callback);

    }

    /**
     * Updates Business Days for a quote.
     * Updates Business Days for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param body Updated Business Days for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateBusinessDays(String quoteId, Integer body) throws ApiException {
        updateBusinessDaysWithHttpInfo(quoteId, body);
    }

    /**
     * Updates Business Days for a quote.
     * Updates Business Days for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param body Updated Business Days for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateBusinessDaysWithHttpInfo(String quoteId, Integer body) throws ApiException {
        okhttp3.Call localVarCall = updateBusinessDaysValidateBeforeCall(quoteId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Business Days for a quote. (asynchronously)
     * Updates Business Days for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param body Updated Business Days for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBusinessDaysAsync(String quoteId, Integer body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBusinessDaysValidateBeforeCall(quoteId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientNotes1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientNotes1Call(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientNotes"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientNotes1ValidateBeforeCall(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateClientNotes1(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateClientNotes1(Async)");
        }

        return updateClientNotes1Call(quoteId, stringDTO, _callback);

    }

    /**
     * Updates Client Notes for a quote.
     * Updates Client Notes for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateClientNotes1(String quoteId, StringDTO stringDTO) throws ApiException {
        updateClientNotes1WithHttpInfo(quoteId, stringDTO);
    }

    /**
     * Updates Client Notes for a quote.
     * Updates Client Notes for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateClientNotes1WithHttpInfo(String quoteId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateClientNotes1ValidateBeforeCall(quoteId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Client Notes for a quote. (asynchronously)
     * Updates Client Notes for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientNotes1Async(String quoteId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientNotes1ValidateBeforeCall(quoteId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientReferenceNumber1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientReferenceNumber1Call(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientReferenceNumber"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientReferenceNumber1ValidateBeforeCall(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateClientReferenceNumber1(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateClientReferenceNumber1(Async)");
        }

        return updateClientReferenceNumber1Call(quoteId, stringDTO, _callback);

    }

    /**
     * Updates Client Reference Number for a quote.
     * Updates Client Reference Number for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateClientReferenceNumber1(String quoteId, StringDTO stringDTO) throws ApiException {
        updateClientReferenceNumber1WithHttpInfo(quoteId, stringDTO);
    }

    /**
     * Updates Client Reference Number for a quote.
     * Updates Client Reference Number for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateClientReferenceNumber1WithHttpInfo(String quoteId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateClientReferenceNumber1ValidateBeforeCall(quoteId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Client Reference Number for a quote. (asynchronously)
     * Updates Client Reference Number for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientReferenceNumber1Async(String quoteId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientReferenceNumber1ValidateBeforeCall(quoteId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContacts3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContacts3Call(String quoteId, SmartContactsDTO smartContactsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smartContactsDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/clientContacts"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContacts3ValidateBeforeCall(String quoteId, SmartContactsDTO smartContactsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateContacts3(Async)");
        }

        // verify the required parameter 'smartContactsDTO' is set
        if (smartContactsDTO == null) {
            throw new ApiException("Missing the required parameter 'smartContactsDTO' when calling updateContacts3(Async)");
        }

        return updateContacts3Call(quoteId, smartContactsDTO, _callback);

    }

    /**
     * Updates Client Contacts for a quote.
     * Updates Client Contacts for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a quote. (required)
     * @return SmartContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SmartContactsDTO updateContacts3(String quoteId, SmartContactsDTO smartContactsDTO) throws ApiException {
        ApiResponse<SmartContactsDTO> localVarResp = updateContacts3WithHttpInfo(quoteId, smartContactsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates Client Contacts for a quote.
     * Updates Client Contacts for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a quote. (required)
     * @return ApiResponse&lt;SmartContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartContactsDTO> updateContacts3WithHttpInfo(String quoteId, SmartContactsDTO smartContactsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateContacts3ValidateBeforeCall(quoteId, smartContactsDTO, null);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates Client Contacts for a quote. (asynchronously)
     * Updates Client Contacts for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContacts3Async(String quoteId, SmartContactsDTO smartContactsDTO, final ApiCallback<SmartContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContacts3ValidateBeforeCall(quoteId, smartContactsDTO, _callback);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomField3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomField3Call(String quoteId, String key, SmartCustomFieldDTO smartCustomFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smartCustomFieldDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/customFields/{key}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomField3ValidateBeforeCall(String quoteId, String key, SmartCustomFieldDTO smartCustomFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateCustomField3(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCustomField3(Async)");
        }

        // verify the required parameter 'smartCustomFieldDTO' is set
        if (smartCustomFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'smartCustomFieldDTO' when calling updateCustomField3(Async)");
        }

        return updateCustomField3Call(quoteId, key, smartCustomFieldDTO, _callback);

    }

    /**
     * Updates a custom field with a specified key in a quote.
     * Updates a custom field with a specified key in a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateCustomField3(String quoteId, String key, SmartCustomFieldDTO smartCustomFieldDTO) throws ApiException {
        updateCustomField3WithHttpInfo(quoteId, key, smartCustomFieldDTO);
    }

    /**
     * Updates a custom field with a specified key in a quote.
     * Updates a custom field with a specified key in a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCustomField3WithHttpInfo(String quoteId, String key, SmartCustomFieldDTO smartCustomFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomField3ValidateBeforeCall(quoteId, key, smartCustomFieldDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a custom field with a specified key in a quote. (asynchronously)
     * Updates a custom field with a specified key in a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomField3Async(String quoteId, String key, SmartCustomFieldDTO smartCustomFieldDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomField3ValidateBeforeCall(quoteId, key, smartCustomFieldDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExpectedDeliveryDate
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Expected Delivery Date for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExpectedDeliveryDateCall(String quoteId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/expectedDeliveryDate"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExpectedDeliveryDateValidateBeforeCall(String quoteId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateExpectedDeliveryDate(Async)");
        }

        // verify the required parameter 'timeDTO' is set
        if (timeDTO == null) {
            throw new ApiException("Missing the required parameter 'timeDTO' when calling updateExpectedDeliveryDate(Async)");
        }

        return updateExpectedDeliveryDateCall(quoteId, timeDTO, _callback);

    }

    /**
     * Updates Expected Delivery Date for a quote.
     * Updates Expected Delivery Date for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Expected Delivery Date for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateExpectedDeliveryDate(String quoteId, TimeDTO timeDTO) throws ApiException {
        updateExpectedDeliveryDateWithHttpInfo(quoteId, timeDTO);
    }

    /**
     * Updates Expected Delivery Date for a quote.
     * Updates Expected Delivery Date for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Expected Delivery Date for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateExpectedDeliveryDateWithHttpInfo(String quoteId, TimeDTO timeDTO) throws ApiException {
        okhttp3.Call localVarCall = updateExpectedDeliveryDateValidateBeforeCall(quoteId, timeDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Expected Delivery Date for a quote. (asynchronously)
     * Updates Expected Delivery Date for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Expected Delivery Date for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExpectedDeliveryDateAsync(String quoteId, TimeDTO timeDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExpectedDeliveryDateValidateBeforeCall(quoteId, timeDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInternalNotes1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInternalNotes1Call(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/internalNotes"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInternalNotes1ValidateBeforeCall(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateInternalNotes1(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateInternalNotes1(Async)");
        }

        return updateInternalNotes1Call(quoteId, stringDTO, _callback);

    }

    /**
     * Updates Internal Notes for a quote.
     * Updates Internal Notes for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateInternalNotes1(String quoteId, StringDTO stringDTO) throws ApiException {
        updateInternalNotes1WithHttpInfo(quoteId, stringDTO);
    }

    /**
     * Updates Internal Notes for a quote.
     * Updates Internal Notes for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateInternalNotes1WithHttpInfo(String quoteId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateInternalNotes1ValidateBeforeCall(quoteId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Internal Notes for a quote. (asynchronously)
     * Updates Internal Notes for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInternalNotes1Async(String quoteId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInternalNotes1ValidateBeforeCall(quoteId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayable3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayable3Call(String quoteId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/payables/{payableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayable3ValidateBeforeCall(String quoteId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updatePayable3(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling updatePayable3(Async)");
        }

        // verify the required parameter 'payableDTO' is set
        if (payableDTO == null) {
            throw new ApiException("Missing the required parameter 'payableDTO' when calling updatePayable3(Async)");
        }

        return updatePayable3Call(quoteId, payableId, payableDTO, _callback);

    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO updatePayable3(String quoteId, Long payableId, PayableDTO payableDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = updatePayable3WithHttpInfo(quoteId, payableId, payableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> updatePayable3WithHttpInfo(String quoteId, Long payableId, PayableDTO payableDTO) throws ApiException {
        okhttp3.Call localVarCall = updatePayable3ValidateBeforeCall(quoteId, payableId, payableDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a payable. (asynchronously)
     * Updates a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayable3Async(String quoteId, Long payableId, PayableDTO payableDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayable3ValidateBeforeCall(quoteId, payableId, payableDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateQuoteExpiry
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Quote Expiry Date for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteExpiryCall(String quoteId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/quoteExpiry"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateQuoteExpiryValidateBeforeCall(String quoteId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateQuoteExpiry(Async)");
        }

        // verify the required parameter 'timeDTO' is set
        if (timeDTO == null) {
            throw new ApiException("Missing the required parameter 'timeDTO' when calling updateQuoteExpiry(Async)");
        }

        return updateQuoteExpiryCall(quoteId, timeDTO, _callback);

    }

    /**
     * Updates Quote Expiry Date for a quote.
     * Updates Quote Expiry Date for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Quote Expiry Date for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateQuoteExpiry(String quoteId, TimeDTO timeDTO) throws ApiException {
        updateQuoteExpiryWithHttpInfo(quoteId, timeDTO);
    }

    /**
     * Updates Quote Expiry Date for a quote.
     * Updates Quote Expiry Date for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Quote Expiry Date for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateQuoteExpiryWithHttpInfo(String quoteId, TimeDTO timeDTO) throws ApiException {
        okhttp3.Call localVarCall = updateQuoteExpiryValidateBeforeCall(quoteId, timeDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Quote Expiry Date for a quote. (asynchronously)
     * Updates Quote Expiry Date for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param timeDTO Updated Quote Expiry Date for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteExpiryAsync(String quoteId, TimeDTO timeDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateQuoteExpiryValidateBeforeCall(quoteId, timeDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReceivable3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivable3Call(String quoteId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/finance/receivables/{receivableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReceivable3ValidateBeforeCall(String quoteId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateReceivable3(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling updateReceivable3(Async)");
        }

        // verify the required parameter 'receivableDTO' is set
        if (receivableDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableDTO' when calling updateReceivable3(Async)");
        }

        return updateReceivable3Call(quoteId, receivableId, receivableDTO, _callback);

    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO updateReceivable3(String quoteId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = updateReceivable3WithHttpInfo(quoteId, receivableId, receivableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> updateReceivable3WithHttpInfo(String quoteId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        okhttp3.Call localVarCall = updateReceivable3ValidateBeforeCall(quoteId, receivableId, receivableDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a receivable. (asynchronously)
     * Updates a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivable3Async(String quoteId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReceivable3ValidateBeforeCall(quoteId, receivableId, receivableDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSourceLanguage1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSourceLanguage1Call(String quoteId, SourceLanguageDTO sourceLanguageDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceLanguageDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/sourceLanguage"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSourceLanguage1ValidateBeforeCall(String quoteId, SourceLanguageDTO sourceLanguageDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateSourceLanguage1(Async)");
        }

        // verify the required parameter 'sourceLanguageDTO' is set
        if (sourceLanguageDTO == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguageDTO' when calling updateSourceLanguage1(Async)");
        }

        return updateSourceLanguage1Call(quoteId, sourceLanguageDTO, _callback);

    }

    /**
     * Updates source language for a quote.
     * Updates source language for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateSourceLanguage1(String quoteId, SourceLanguageDTO sourceLanguageDTO) throws ApiException {
        updateSourceLanguage1WithHttpInfo(quoteId, sourceLanguageDTO);
    }

    /**
     * Updates source language for a quote.
     * Updates source language for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSourceLanguage1WithHttpInfo(String quoteId, SourceLanguageDTO sourceLanguageDTO) throws ApiException {
        okhttp3.Call localVarCall = updateSourceLanguage1ValidateBeforeCall(quoteId, sourceLanguageDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates source language for a quote. (asynchronously)
     * Updates source language for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSourceLanguage1Async(String quoteId, SourceLanguageDTO sourceLanguageDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSourceLanguage1ValidateBeforeCall(quoteId, sourceLanguageDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpecialization1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecialization1Call(String quoteId, SpecializationDTO specializationDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = specializationDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/specialization"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecialization1ValidateBeforeCall(String quoteId, SpecializationDTO specializationDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateSpecialization1(Async)");
        }

        // verify the required parameter 'specializationDTO' is set
        if (specializationDTO == null) {
            throw new ApiException("Missing the required parameter 'specializationDTO' when calling updateSpecialization1(Async)");
        }

        return updateSpecialization1Call(quoteId, specializationDTO, _callback);

    }

    /**
     * Updates specialization for a quote.
     * Updates specialization for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateSpecialization1(String quoteId, SpecializationDTO specializationDTO) throws ApiException {
        updateSpecialization1WithHttpInfo(quoteId, specializationDTO);
    }

    /**
     * Updates specialization for a quote.
     * Updates specialization for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSpecialization1WithHttpInfo(String quoteId, SpecializationDTO specializationDTO) throws ApiException {
        okhttp3.Call localVarCall = updateSpecialization1ValidateBeforeCall(quoteId, specializationDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates specialization for a quote. (asynchronously)
     * Updates specialization for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecialization1Async(String quoteId, SpecializationDTO specializationDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecialization1ValidateBeforeCall(quoteId, specializationDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTargetLanguages1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetLanguages1Call(String quoteId, TargetLanguagesDTO targetLanguagesDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetLanguagesDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/targetLanguages"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTargetLanguages1ValidateBeforeCall(String quoteId, TargetLanguagesDTO targetLanguagesDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateTargetLanguages1(Async)");
        }

        // verify the required parameter 'targetLanguagesDTO' is set
        if (targetLanguagesDTO == null) {
            throw new ApiException("Missing the required parameter 'targetLanguagesDTO' when calling updateTargetLanguages1(Async)");
        }

        return updateTargetLanguages1Call(quoteId, targetLanguagesDTO, _callback);

    }

    /**
     * Updates target languages for a quote.
     * Updates target languages for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateTargetLanguages1(String quoteId, TargetLanguagesDTO targetLanguagesDTO) throws ApiException {
        updateTargetLanguages1WithHttpInfo(quoteId, targetLanguagesDTO);
    }

    /**
     * Updates target languages for a quote.
     * Updates target languages for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTargetLanguages1WithHttpInfo(String quoteId, TargetLanguagesDTO targetLanguagesDTO) throws ApiException {
        okhttp3.Call localVarCall = updateTargetLanguages1ValidateBeforeCall(quoteId, targetLanguagesDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates target languages for a quote. (asynchronously)
     * Updates target languages for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetLanguages1Async(String quoteId, TargetLanguagesDTO targetLanguagesDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTargetLanguages1ValidateBeforeCall(quoteId, targetLanguagesDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVendorInstructions1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVendorInstructions1Call(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/vendorInstructions"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVendorInstructions1ValidateBeforeCall(String quoteId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateVendorInstructions1(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateVendorInstructions1(Async)");
        }

        return updateVendorInstructions1Call(quoteId, stringDTO, _callback);

    }

    /**
     * Updates instructions for all vendors performing the jobs in a quote.
     * Updates instructions for all vendors performing the jobs in a quote. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateVendorInstructions1(String quoteId, StringDTO stringDTO) throws ApiException {
        updateVendorInstructions1WithHttpInfo(quoteId, stringDTO);
    }

    /**
     * Updates instructions for all vendors performing the jobs in a quote.
     * Updates instructions for all vendors performing the jobs in a quote. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateVendorInstructions1WithHttpInfo(String quoteId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateVendorInstructions1ValidateBeforeCall(quoteId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates instructions for all vendors performing the jobs in a quote. (asynchronously)
     * Updates instructions for all vendors performing the jobs in a quote. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVendorInstructions1Async(String quoteId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVendorInstructions1ValidateBeforeCall(quoteId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVolume1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVolume1Call(String quoteId, BigDecimalDTO bigDecimalDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bigDecimalDTO;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/volume"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVolume1ValidateBeforeCall(String quoteId, BigDecimalDTO bigDecimalDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateVolume1(Async)");
        }

        // verify the required parameter 'bigDecimalDTO' is set
        if (bigDecimalDTO == null) {
            throw new ApiException("Missing the required parameter 'bigDecimalDTO' when calling updateVolume1(Async)");
        }

        return updateVolume1Call(quoteId, bigDecimalDTO, _callback);

    }

    /**
     * Updates volume for a quote.
     * Updates volume for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a quote. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateVolume1(String quoteId, BigDecimalDTO bigDecimalDTO) throws ApiException {
        updateVolume1WithHttpInfo(quoteId, bigDecimalDTO);
    }

    /**
     * Updates volume for a quote.
     * Updates volume for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a quote. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateVolume1WithHttpInfo(String quoteId, BigDecimalDTO bigDecimalDTO) throws ApiException {
        okhttp3.Call localVarCall = updateVolume1ValidateBeforeCall(quoteId, bigDecimalDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates volume for a quote. (asynchronously)
     * Updates volume for a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVolume1Async(String quoteId, BigDecimalDTO bigDecimalDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVolume1ValidateBeforeCall(quoteId, bigDecimalDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile3
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile3Call(String quoteId, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/quotes/{quoteId}/files/upload"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFile3ValidateBeforeCall(String quoteId, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling uploadFile3(Async)");
        }

        return uploadFile3Call(quoteId, _file, _callback);

    }

    /**
     * Uploads file to the quote as a file uploaded by PM.
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/quotes/{quoteId}/files/add\&quot; operation).
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _file  (optional)
     * @return FileDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FileDto uploadFile3(String quoteId, File _file) throws ApiException {
        ApiResponse<FileDto> localVarResp = uploadFile3WithHttpInfo(quoteId, _file);
        return localVarResp.getData();
    }

    /**
     * Uploads file to the quote as a file uploaded by PM.
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/quotes/{quoteId}/files/add\&quot; operation).
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;FileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileDto> uploadFile3WithHttpInfo(String quoteId, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadFile3ValidateBeforeCall(quoteId, _file, null);
        Type localVarReturnType = new TypeToken<FileDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Uploads file to the quote as a file uploaded by PM. (asynchronously)
     * Uploads file to the quote as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/quotes/{quoteId}/files/add\&quot; operation).
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile3Async(String quoteId, File _file, final ApiCallback<FileDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFile3ValidateBeforeCall(quoteId, _file, _callback);
        Type localVarReturnType = new TypeToken<FileDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
