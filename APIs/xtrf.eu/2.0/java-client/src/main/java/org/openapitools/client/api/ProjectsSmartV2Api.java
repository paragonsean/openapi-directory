/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BigDecimalDTO;
import org.openapitools.client.model.CATToolProjectDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.ExternalFileDto;
import java.io.File;
import org.openapitools.client.model.FileCategorizationsDto;
import org.openapitools.client.model.FileDto;
import org.openapitools.client.model.FileLinkCategorizationsDto;
import org.openapitools.client.model.FilesArchiveDto;
import org.openapitools.client.model.FilesDto;
import org.openapitools.client.model.FinanceDTO;
import org.openapitools.client.model.JobDto;
import org.openapitools.client.model.PayableCreateDTO;
import org.openapitools.client.model.PayableDTO;
import org.openapitools.client.model.ProjectCreateDTO;
import org.openapitools.client.model.ProjectDTOv2;
import org.openapitools.client.model.ProjectFileDto;
import org.openapitools.client.model.ProjectStatusDTO;
import org.openapitools.client.model.ReceivableCreateDTO;
import org.openapitools.client.model.ReceivableDTO;
import org.openapitools.client.model.SmartContactsDTO;
import org.openapitools.client.model.SmartCustomFieldDTO;
import org.openapitools.client.model.SourceLanguageDTO;
import org.openapitools.client.model.SpecializationDTO;
import org.openapitools.client.model.StringDTO;
import org.openapitools.client.model.TargetLanguagesDTO;
import org.openapitools.client.model.TimeDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsSmartV2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsSmartV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsSmartV2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addExternalFileLinks
     * @param projectId project&#39;s internal identifier (required)
     * @param externalFileDto Added file links to the project as added by PM. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExternalFileLinksCall(String projectId, ExternalFileDto externalFileDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalFileDto;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/files/addExternalLink"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExternalFileLinksValidateBeforeCall(String projectId, ExternalFileDto externalFileDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addExternalFileLinks(Async)");
        }

        // verify the required parameter 'externalFileDto' is set
        if (externalFileDto == null) {
            throw new ApiException("Missing the required parameter 'externalFileDto' when calling addExternalFileLinks(Async)");
        }

        return addExternalFileLinksCall(projectId, externalFileDto, _callback);

    }

    /**
     * 
     * 
     * @param projectId project&#39;s internal identifier (required)
     * @param externalFileDto Added file links to the project as added by PM. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public void addExternalFileLinks(String projectId, ExternalFileDto externalFileDto) throws ApiException {
        addExternalFileLinksWithHttpInfo(projectId, externalFileDto);
    }

    /**
     * 
     * 
     * @param projectId project&#39;s internal identifier (required)
     * @param externalFileDto Added file links to the project as added by PM. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addExternalFileLinksWithHttpInfo(String projectId, ExternalFileDto externalFileDto) throws ApiException {
        okhttp3.Call localVarCall = addExternalFileLinksValidateBeforeCall(projectId, externalFileDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectId project&#39;s internal identifier (required)
     * @param externalFileDto Added file links to the project as added by PM. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExternalFileLinksAsync(String projectId, ExternalFileDto externalFileDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExternalFileLinksValidateBeforeCall(projectId, externalFileDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addFileLinks1
     * @param projectId project&#39;s internal identifier (required)
     * @param fileLinkCategorizationsDto Added file links to the project as added by PM. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFileLinks1Call(String projectId, FileLinkCategorizationsDto fileLinkCategorizationsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileLinkCategorizationsDto;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/files/addLink"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFileLinks1ValidateBeforeCall(String projectId, FileLinkCategorizationsDto fileLinkCategorizationsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addFileLinks1(Async)");
        }

        // verify the required parameter 'fileLinkCategorizationsDto' is set
        if (fileLinkCategorizationsDto == null) {
            throw new ApiException("Missing the required parameter 'fileLinkCategorizationsDto' when calling addFileLinks1(Async)");
        }

        return addFileLinks1Call(projectId, fileLinkCategorizationsDto, _callback);

    }

    /**
     * Adds file links to the project as added by PM.
     * Adds file links to the project as added by PM. The following properties can be specified for each file link:&lt;ul&gt;&lt;li&gt;url (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param fileLinkCategorizationsDto Added file links to the project as added by PM. (required)
     * @return FilesDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FilesDto addFileLinks1(String projectId, FileLinkCategorizationsDto fileLinkCategorizationsDto) throws ApiException {
        ApiResponse<FilesDto> localVarResp = addFileLinks1WithHttpInfo(projectId, fileLinkCategorizationsDto);
        return localVarResp.getData();
    }

    /**
     * Adds file links to the project as added by PM.
     * Adds file links to the project as added by PM. The following properties can be specified for each file link:&lt;ul&gt;&lt;li&gt;url (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param fileLinkCategorizationsDto Added file links to the project as added by PM. (required)
     * @return ApiResponse&lt;FilesDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FilesDto> addFileLinks1WithHttpInfo(String projectId, FileLinkCategorizationsDto fileLinkCategorizationsDto) throws ApiException {
        okhttp3.Call localVarCall = addFileLinks1ValidateBeforeCall(projectId, fileLinkCategorizationsDto, null);
        Type localVarReturnType = new TypeToken<FilesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds file links to the project as added by PM. (asynchronously)
     * Adds file links to the project as added by PM. The following properties can be specified for each file link:&lt;ul&gt;&lt;li&gt;url (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param fileLinkCategorizationsDto Added file links to the project as added by PM. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFileLinks1Async(String projectId, FileLinkCategorizationsDto fileLinkCategorizationsDto, final ApiCallback<FilesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFileLinks1ValidateBeforeCall(projectId, fileLinkCategorizationsDto, _callback);
        Type localVarReturnType = new TypeToken<FilesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addFiles1
     * @param projectId project&#39;s internal identifier (required)
     * @param fileCategorizationsDto Added files to the project as added by PM. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFiles1Call(String projectId, FileCategorizationsDto fileCategorizationsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileCategorizationsDto;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/files/add"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFiles1ValidateBeforeCall(String projectId, FileCategorizationsDto fileCategorizationsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addFiles1(Async)");
        }

        // verify the required parameter 'fileCategorizationsDto' is set
        if (fileCategorizationsDto == null) {
            throw new ApiException("Missing the required parameter 'fileCategorizationsDto' when calling addFiles1(Async)");
        }

        return addFiles1Call(projectId, fileCategorizationsDto, _callback);

    }

    /**
     * Adds files to the project as added by PM.
     * Adds files to the project as added by PM. The files have to be uploaded beforehand (see \&quot;POST /v2/projects/{projectId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param fileCategorizationsDto Added files to the project as added by PM. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addFiles1(String projectId, FileCategorizationsDto fileCategorizationsDto) throws ApiException {
        addFiles1WithHttpInfo(projectId, fileCategorizationsDto);
    }

    /**
     * Adds files to the project as added by PM.
     * Adds files to the project as added by PM. The files have to be uploaded beforehand (see \&quot;POST /v2/projects/{projectId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param fileCategorizationsDto Added files to the project as added by PM. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addFiles1WithHttpInfo(String projectId, FileCategorizationsDto fileCategorizationsDto) throws ApiException {
        okhttp3.Call localVarCall = addFiles1ValidateBeforeCall(projectId, fileCategorizationsDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds files to the project as added by PM. (asynchronously)
     * Adds files to the project as added by PM. The files have to be uploaded beforehand (see \&quot;POST /v2/projects/{projectId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param fileCategorizationsDto Added files to the project as added by PM. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFiles1Async(String projectId, FileCategorizationsDto fileCategorizationsDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFiles1ValidateBeforeCall(projectId, fileCategorizationsDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addJobToProcess
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addJobToProcessCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/addJob"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addJobToProcessValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addJobToProcess(Async)");
        }

        return addJobToProcessCall(projectId, _callback);

    }

    /**
     * Returns process id.
     * 
     * @param projectId  (required)
     * @return CATToolProjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CATToolProjectDTO addJobToProcess(String projectId) throws ApiException {
        ApiResponse<CATToolProjectDTO> localVarResp = addJobToProcessWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns process id.
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;CATToolProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CATToolProjectDTO> addJobToProcessWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = addJobToProcessValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<CATToolProjectDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns process id. (asynchronously)
     * 
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addJobToProcessAsync(String projectId, final ApiCallback<CATToolProjectDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addJobToProcessValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<CATToolProjectDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for archive
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveCall(FilesDto filesDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesDto;

        // create path and map variables
        String localVarPath = "/v2/projects/files/archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveValidateBeforeCall(FilesDto filesDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filesDto' is set
        if (filesDto == null) {
            throw new ApiException("Missing the required parameter 'filesDto' when calling archive(Async)");
        }

        return archiveCall(filesDto, _callback);

    }

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @return FilesArchiveDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FilesArchiveDto archive(FilesDto filesDto) throws ApiException {
        ApiResponse<FilesArchiveDto> localVarResp = archiveWithHttpInfo(filesDto);
        return localVarResp.getData();
    }

    /**
     * Prepares a ZIP archive that contains the specified files.
     * Prepares a ZIP archive that contains the specified files.
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @return ApiResponse&lt;FilesArchiveDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FilesArchiveDto> archiveWithHttpInfo(FilesDto filesDto) throws ApiException {
        okhttp3.Call localVarCall = archiveValidateBeforeCall(filesDto, null);
        Type localVarReturnType = new TypeToken<FilesArchiveDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prepares a ZIP archive that contains the specified files. (asynchronously)
     * Prepares a ZIP archive that contains the specified files.
     * @param filesDto Prepared ZIP archive that contains the specified files. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveAsync(FilesDto filesDto, final ApiCallback<FilesArchiveDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveValidateBeforeCall(filesDto, _callback);
        Type localVarReturnType = new TypeToken<FilesArchiveDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeStatus2
     * @param projectId project&#39;s internal identifier (required)
     * @param projectStatusDTO Changed project status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeStatus2Call(String projectId, ProjectStatusDTO projectStatusDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectStatusDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/status"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeStatus2ValidateBeforeCall(String projectId, ProjectStatusDTO projectStatusDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling changeStatus2(Async)");
        }

        // verify the required parameter 'projectStatusDTO' is set
        if (projectStatusDTO == null) {
            throw new ApiException("Missing the required parameter 'projectStatusDTO' when calling changeStatus2(Async)");
        }

        return changeStatus2Call(projectId, projectStatusDTO, _callback);

    }

    /**
     * Changes project status if possible (400 Bad Request is returned otherwise).
     * Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;CANCELLED – available when the job has one of the following statuses: OPEN, STARTED&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param projectStatusDTO Changed project status. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void changeStatus2(String projectId, ProjectStatusDTO projectStatusDTO) throws ApiException {
        changeStatus2WithHttpInfo(projectId, projectStatusDTO);
    }

    /**
     * Changes project status if possible (400 Bad Request is returned otherwise).
     * Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;CANCELLED – available when the job has one of the following statuses: OPEN, STARTED&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param projectStatusDTO Changed project status. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeStatus2WithHttpInfo(String projectId, ProjectStatusDTO projectStatusDTO) throws ApiException {
        okhttp3.Call localVarCall = changeStatus2ValidateBeforeCall(projectId, projectStatusDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changes project status if possible (400 Bad Request is returned otherwise). (asynchronously)
     * Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;CANCELLED – available when the job has one of the following statuses: OPEN, STARTED&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param projectStatusDTO Changed project status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeStatus2Async(String projectId, ProjectStatusDTO projectStatusDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeStatus2ValidateBeforeCall(projectId, projectStatusDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for create6
     * @param projectCreateDTO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create6Call(ProjectCreateDTO projectCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCreateDTO;

        // create path and map variables
        String localVarPath = "/v2/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create6ValidateBeforeCall(ProjectCreateDTO projectCreateDTO, final ApiCallback _callback) throws ApiException {
        return create6Call(projectCreateDTO, _callback);

    }

    /**
     * Creates a new Smart Project.
     * Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param projectCreateDTO  (optional)
     * @return ProjectDTOv2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDTOv2 create6(ProjectCreateDTO projectCreateDTO) throws ApiException {
        ApiResponse<ProjectDTOv2> localVarResp = create6WithHttpInfo(projectCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new Smart Project.
     * Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param projectCreateDTO  (optional)
     * @return ApiResponse&lt;ProjectDTOv2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDTOv2> create6WithHttpInfo(ProjectCreateDTO projectCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = create6ValidateBeforeCall(projectCreateDTO, null);
        Type localVarReturnType = new TypeToken<ProjectDTOv2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Smart Project. (asynchronously)
     * Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param projectCreateDTO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create6Async(ProjectCreateDTO projectCreateDTO, final ApiCallback<ProjectDTOv2> _callback) throws ApiException {

        okhttp3.Call localVarCall = create6ValidateBeforeCall(projectCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ProjectDTOv2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayable2
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayable2Call(String projectId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableCreateDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/finance/payables"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayable2ValidateBeforeCall(String projectId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createPayable2(Async)");
        }

        // verify the required parameter 'payableCreateDTO' is set
        if (payableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'payableCreateDTO' when calling createPayable2(Async)");
        }

        return createPayable2Call(projectId, payableCreateDTO, _callback);

    }

    /**
     * Adds a payable to a project.
     * Adds a payable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO createPayable2(String projectId, PayableCreateDTO payableCreateDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = createPayable2WithHttpInfo(projectId, payableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a payable to a project.
     * Adds a payable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> createPayable2WithHttpInfo(String projectId, PayableCreateDTO payableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createPayable2ValidateBeforeCall(projectId, payableCreateDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a payable to a project. (asynchronously)
     * Adds a payable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayable2Async(String projectId, PayableCreateDTO payableCreateDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayable2ValidateBeforeCall(projectId, payableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReceivable2
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivable2Call(String projectId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableCreateDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/finance/receivables"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceivable2ValidateBeforeCall(String projectId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createReceivable2(Async)");
        }

        // verify the required parameter 'receivableCreateDTO' is set
        if (receivableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableCreateDTO' when calling createReceivable2(Async)");
        }

        return createReceivable2Call(projectId, receivableCreateDTO, _callback);

    }

    /**
     * Adds a receivable to a project.
     * Adds a receivable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO createReceivable2(String projectId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = createReceivable2WithHttpInfo(projectId, receivableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a receivable to a project.
     * Adds a receivable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> createReceivable2WithHttpInfo(String projectId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createReceivable2ValidateBeforeCall(projectId, receivableCreateDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a receivable to a project. (asynchronously)
     * Adds a receivable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivable2Async(String projectId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceivable2ValidateBeforeCall(projectId, receivableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayable2
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayable2Call(String projectId, Long payableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/finance/payables/{payableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayable2ValidateBeforeCall(String projectId, Long payableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deletePayable2(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling deletePayable2(Async)");
        }

        return deletePayable2Call(projectId, payableId, _callback);

    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayable2(String projectId, Long payableId) throws ApiException {
        deletePayable2WithHttpInfo(projectId, payableId);
    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayable2WithHttpInfo(String projectId, Long payableId) throws ApiException {
        okhttp3.Call localVarCall = deletePayable2ValidateBeforeCall(projectId, payableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a payable. (asynchronously)
     * Deletes a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayable2Async(String projectId, Long payableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayable2ValidateBeforeCall(projectId, payableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReceivable2
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivable2Call(String projectId, Long receivableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/finance/receivables/{receivableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReceivable2ValidateBeforeCall(String projectId, Long receivableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteReceivable2(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling deleteReceivable2(Async)");
        }

        return deleteReceivable2Call(projectId, receivableId, _callback);

    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReceivable2(String projectId, Long receivableId) throws ApiException {
        deleteReceivable2WithHttpInfo(projectId, receivableId);
    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReceivable2WithHttpInfo(String projectId, Long receivableId) throws ApiException {
        okhttp3.Call localVarCall = deleteReceivable2ValidateBeforeCall(projectId, receivableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a receivable. (asynchronously)
     * Deletes a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivable2Async(String projectId, Long receivableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReceivable2ValidateBeforeCall(projectId, receivableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByExternalId1
     * @param externalProjectId project&#39;s external identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByExternalId1Call(String externalProjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/for-external-id/{externalProjectId}"
            .replace("{" + "externalProjectId" + "}", localVarApiClient.escapeString(externalProjectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByExternalId1ValidateBeforeCall(String externalProjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalProjectId' is set
        if (externalProjectId == null) {
            throw new ApiException("Missing the required parameter 'externalProjectId' when calling getByExternalId1(Async)");
        }

        return getByExternalId1Call(externalProjectId, _callback);

    }

    /**
     * Returns project details.
     * Returns project details.
     * @param externalProjectId project&#39;s external identifier (required)
     * @return ProjectDTOv2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDTOv2 getByExternalId1(String externalProjectId) throws ApiException {
        ApiResponse<ProjectDTOv2> localVarResp = getByExternalId1WithHttpInfo(externalProjectId);
        return localVarResp.getData();
    }

    /**
     * Returns project details.
     * Returns project details.
     * @param externalProjectId project&#39;s external identifier (required)
     * @return ApiResponse&lt;ProjectDTOv2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDTOv2> getByExternalId1WithHttpInfo(String externalProjectId) throws ApiException {
        okhttp3.Call localVarCall = getByExternalId1ValidateBeforeCall(externalProjectId, null);
        Type localVarReturnType = new TypeToken<ProjectDTOv2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns project details. (asynchronously)
     * Returns project details.
     * @param externalProjectId project&#39;s external identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByExternalId1Async(String externalProjectId, final ApiCallback<ProjectDTOv2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByExternalId1ValidateBeforeCall(externalProjectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectDTOv2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById9
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById9Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById9ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getById9(Async)");
        }

        return getById9Call(projectId, _callback);

    }

    /**
     * Returns project details.
     * Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param projectId project&#39;s internal identifier (required)
     * @return ProjectDTOv2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDTOv2 getById9(String projectId) throws ApiException {
        ApiResponse<ProjectDTOv2> localVarResp = getById9WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns project details.
     * Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;ProjectDTOv2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDTOv2> getById9WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getById9ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectDTOv2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns project details. (asynchronously)
     * Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById9Async(String projectId, final ApiCallback<ProjectDTOv2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById9ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectDTOv2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCATToolProjectInfo
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCATToolProjectInfoCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/catToolProject"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCATToolProjectInfoValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCATToolProjectInfo(Async)");
        }

        return getCATToolProjectInfoCall(projectId, _callback);

    }

    /**
     * Returns if cat tool project is created or queued.
     * 
     * @param projectId  (required)
     * @return CATToolProjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CATToolProjectDTO getCATToolProjectInfo(String projectId) throws ApiException {
        ApiResponse<CATToolProjectDTO> localVarResp = getCATToolProjectInfoWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns if cat tool project is created or queued.
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;CATToolProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CATToolProjectDTO> getCATToolProjectInfoWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getCATToolProjectInfoValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<CATToolProjectDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns if cat tool project is created or queued. (asynchronously)
     * 
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCATToolProjectInfoAsync(String projectId, final ApiCallback<CATToolProjectDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCATToolProjectInfoValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<CATToolProjectDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContacts2
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContacts2Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/clientContacts"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContacts2ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContacts2(Async)");
        }

        return getContacts2Call(projectId, _callback);

    }

    /**
     * Returns Client Contacts information for a project.
     * Returns Client Contacts information for a project
     * @param projectId project&#39;s internal identifier (required)
     * @return SmartContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SmartContactsDTO getContacts2(String projectId) throws ApiException {
        ApiResponse<SmartContactsDTO> localVarResp = getContacts2WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns Client Contacts information for a project.
     * Returns Client Contacts information for a project
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;SmartContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartContactsDTO> getContacts2WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getContacts2ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns Client Contacts information for a project. (asynchronously)
     * Returns Client Contacts information for a project
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContacts2Async(String projectId, final ApiCallback<SmartContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContacts2ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFields8
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields8Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/customFields"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFields8ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCustomFields8(Async)");
        }

        return getCustomFields8Call(projectId, _callback);

    }

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> getCustomFields8(String projectId) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = getCustomFields8WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns a list of custom field keys and values for a project.
     * Returns a list of custom field keys and values for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> getCustomFields8WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFields8ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of custom field keys and values for a project. (asynchronously)
     * Returns a list of custom field keys and values for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields8Async(String projectId, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFields8ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliverableFiles
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliverableFilesCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/files/deliverable"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliverableFilesValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDeliverableFiles(Async)");
        }

        return getDeliverableFilesCall(projectId, _callback);

    }

    /**
     * Returns list of files in a project, that are ready to be delivered to client.
     * Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:&lt;ul&gt;&lt;li&gt;the file was added to a job in the last step in the process&lt;/li&gt;&lt;li&gt;the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)&lt;/li&gt;&lt;li&gt;the job is finished (has Ready status)&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @return List&lt;ProjectFileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFileDto> getDeliverableFiles(String projectId) throws ApiException {
        ApiResponse<List<ProjectFileDto>> localVarResp = getDeliverableFilesWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns list of files in a project, that are ready to be delivered to client.
     * Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:&lt;ul&gt;&lt;li&gt;the file was added to a job in the last step in the process&lt;/li&gt;&lt;li&gt;the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)&lt;/li&gt;&lt;li&gt;the job is finished (has Ready status)&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;ProjectFileDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFileDto>> getDeliverableFilesWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getDeliverableFilesValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of files in a project, that are ready to be delivered to client. (asynchronously)
     * Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:&lt;ul&gt;&lt;li&gt;the file was added to a job in the last step in the process&lt;/li&gt;&lt;li&gt;the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)&lt;/li&gt;&lt;li&gt;the job is finished (has Ready status)&lt;/li&gt;&lt;/ul&gt;
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliverableFilesAsync(String projectId, final ApiCallback<List<ProjectFileDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliverableFilesValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileById2
     * @param fileId file&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileById2Call(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileById2ValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileById2(Async)");
        }

        return getFileById2Call(fileId, _callback);

    }

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param fileId file&#39;s internal identifier (required)
     * @return ProjectFileDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectFileDto getFileById2(String fileId) throws ApiException {
        ApiResponse<ProjectFileDto> localVarResp = getFileById2WithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Returns details of a file.
     * Returns details of a file.
     * @param fileId file&#39;s internal identifier (required)
     * @return ApiResponse&lt;ProjectFileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectFileDto> getFileById2WithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileById2ValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<ProjectFileDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns details of a file. (asynchronously)
     * Returns details of a file.
     * @param fileId file&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileById2Async(String fileId, final ApiCallback<ProjectFileDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileById2ValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<ProjectFileDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileContentById
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentByIdCall(String fileId, String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/files/{fileId}/download/{fileName}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "fileName" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileContentByIdValidateBeforeCall(String fileId, String fileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileContentById(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getFileContentById(Async)");
        }

        return getFileContentByIdCall(fileId, fileName, _callback);

    }

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getFileContentById(String fileId, String fileName) throws ApiException {
        getFileContentByIdWithHttpInfo(fileId, fileName);
    }

    /**
     * Downloads a file content.
     * Downloads a file content.
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getFileContentByIdWithHttpInfo(String fileId, String fileName) throws ApiException {
        okhttp3.Call localVarCall = getFileContentByIdValidateBeforeCall(fileId, fileName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Downloads a file content. (asynchronously)
     * Downloads a file content.
     * @param fileId file&#39;s internal identifier (required)
     * @param fileName file&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileContentByIdAsync(String fileId, String fileName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileContentByIdValidateBeforeCall(fileId, fileName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFiles
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/files"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFiles(Async)");
        }

        return getFilesCall(projectId, _callback);

    }

    /**
     * Returns list of files in a project.
     * Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
     * @param projectId project&#39;s internal identifier (required)
     * @return List&lt;ProjectFileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectFileDto> getFiles(String projectId) throws ApiException {
        ApiResponse<List<ProjectFileDto>> localVarResp = getFilesWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns list of files in a project.
     * Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;ProjectFileDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectFileDto>> getFilesWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getFilesValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of files in a project. (asynchronously)
     * Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAsync(String projectId, final ApiCallback<List<ProjectFileDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<ProjectFileDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinance2
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinance2Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/finance"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinance2ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFinance2(Async)");
        }

        return getFinance2Call(projectId, _callback);

    }

    /**
     * Returns finance information for a project.
     * Returns finance information for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @return FinanceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FinanceDTO getFinance2(String projectId) throws ApiException {
        ApiResponse<FinanceDTO> localVarResp = getFinance2WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns finance information for a project.
     * Returns finance information for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;FinanceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FinanceDTO> getFinance2WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getFinance2ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns finance information for a project. (asynchronously)
     * Returns finance information for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinance2Async(String projectId, final ApiCallback<FinanceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinance2ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/jobs"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getJobs(Async)");
        }

        return getJobsCall(projectId, _callback);

    }

    /**
     * Returns list of jobs in a project.
     * Returns list of jobs in a project.
     * @param projectId project&#39;s internal identifier (required)
     * @return List&lt;JobDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<JobDto> getJobs(String projectId) throws ApiException {
        ApiResponse<List<JobDto>> localVarResp = getJobsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns list of jobs in a project.
     * Returns list of jobs in a project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;JobDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobDto>> getJobsWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<JobDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of jobs in a project. (asynchronously)
     * Returns list of jobs in a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(String projectId, final ApiCallback<List<JobDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<JobDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProcessId
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessIdCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/process"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessIdValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProcessId(Async)");
        }

        return getProcessIdCall(projectId, _callback);

    }

    /**
     * Returns process id.
     * 
     * @param projectId  (required)
     * @return CATToolProjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CATToolProjectDTO getProcessId(String projectId) throws ApiException {
        ApiResponse<CATToolProjectDTO> localVarResp = getProcessIdWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns process id.
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;CATToolProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CATToolProjectDTO> getProcessIdWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProcessIdValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<CATToolProjectDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns process id. (asynchronously)
     * 
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessIdAsync(String projectId, final ApiCallback<CATToolProjectDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessIdValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<CATToolProjectDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientDeadline
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Client Deadline for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientDeadlineCall(String projectId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/clientDeadline"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientDeadlineValidateBeforeCall(String projectId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateClientDeadline(Async)");
        }

        // verify the required parameter 'timeDTO' is set
        if (timeDTO == null) {
            throw new ApiException("Missing the required parameter 'timeDTO' when calling updateClientDeadline(Async)");
        }

        return updateClientDeadlineCall(projectId, timeDTO, _callback);

    }

    /**
     * Updates Client Deadline for a project.
     * Updates Client Deadline for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Client Deadline for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateClientDeadline(String projectId, TimeDTO timeDTO) throws ApiException {
        updateClientDeadlineWithHttpInfo(projectId, timeDTO);
    }

    /**
     * Updates Client Deadline for a project.
     * Updates Client Deadline for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Client Deadline for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateClientDeadlineWithHttpInfo(String projectId, TimeDTO timeDTO) throws ApiException {
        okhttp3.Call localVarCall = updateClientDeadlineValidateBeforeCall(projectId, timeDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Client Deadline for a project. (asynchronously)
     * Updates Client Deadline for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Client Deadline for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientDeadlineAsync(String projectId, TimeDTO timeDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientDeadlineValidateBeforeCall(projectId, timeDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientNotes
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientNotesCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/clientNotes"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientNotesValidateBeforeCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateClientNotes(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateClientNotes(Async)");
        }

        return updateClientNotesCall(projectId, stringDTO, _callback);

    }

    /**
     * Updates Client Notes for a project.
     * Updates Client Notes for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateClientNotes(String projectId, StringDTO stringDTO) throws ApiException {
        updateClientNotesWithHttpInfo(projectId, stringDTO);
    }

    /**
     * Updates Client Notes for a project.
     * Updates Client Notes for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateClientNotesWithHttpInfo(String projectId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateClientNotesValidateBeforeCall(projectId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Client Notes for a project. (asynchronously)
     * Updates Client Notes for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Notes for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientNotesAsync(String projectId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientNotesValidateBeforeCall(projectId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientReferenceNumber
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientReferenceNumberCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/clientReferenceNumber"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientReferenceNumberValidateBeforeCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateClientReferenceNumber(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateClientReferenceNumber(Async)");
        }

        return updateClientReferenceNumberCall(projectId, stringDTO, _callback);

    }

    /**
     * Updates Client Reference Number for a project.
     * Updates Client Reference Number for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateClientReferenceNumber(String projectId, StringDTO stringDTO) throws ApiException {
        updateClientReferenceNumberWithHttpInfo(projectId, stringDTO);
    }

    /**
     * Updates Client Reference Number for a project.
     * Updates Client Reference Number for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateClientReferenceNumberWithHttpInfo(String projectId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateClientReferenceNumberValidateBeforeCall(projectId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Client Reference Number for a project. (asynchronously)
     * Updates Client Reference Number for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Client Reference Number for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientReferenceNumberAsync(String projectId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientReferenceNumberValidateBeforeCall(projectId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContacts2
     * @param projectId project&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContacts2Call(String projectId, SmartContactsDTO smartContactsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smartContactsDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/clientContacts"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContacts2ValidateBeforeCall(String projectId, SmartContactsDTO smartContactsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateContacts2(Async)");
        }

        // verify the required parameter 'smartContactsDTO' is set
        if (smartContactsDTO == null) {
            throw new ApiException("Missing the required parameter 'smartContactsDTO' when calling updateContacts2(Async)");
        }

        return updateContacts2Call(projectId, smartContactsDTO, _callback);

    }

    /**
     * Updates Client Contacts for a project.
     * Updates Client Contacts for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a project. (required)
     * @return SmartContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SmartContactsDTO updateContacts2(String projectId, SmartContactsDTO smartContactsDTO) throws ApiException {
        ApiResponse<SmartContactsDTO> localVarResp = updateContacts2WithHttpInfo(projectId, smartContactsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates Client Contacts for a project.
     * Updates Client Contacts for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a project. (required)
     * @return ApiResponse&lt;SmartContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartContactsDTO> updateContacts2WithHttpInfo(String projectId, SmartContactsDTO smartContactsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateContacts2ValidateBeforeCall(projectId, smartContactsDTO, null);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates Client Contacts for a project. (asynchronously)
     * Updates Client Contacts for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param smartContactsDTO Updated Client Contacts for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContacts2Async(String projectId, SmartContactsDTO smartContactsDTO, final ApiCallback<SmartContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContacts2ValidateBeforeCall(projectId, smartContactsDTO, _callback);
        Type localVarReturnType = new TypeToken<SmartContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomField2
     * @param projectId project&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomField2Call(String projectId, String key, SmartCustomFieldDTO smartCustomFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smartCustomFieldDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/customFields/{key}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomField2ValidateBeforeCall(String projectId, String key, SmartCustomFieldDTO smartCustomFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateCustomField2(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCustomField2(Async)");
        }

        // verify the required parameter 'smartCustomFieldDTO' is set
        if (smartCustomFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'smartCustomFieldDTO' when calling updateCustomField2(Async)");
        }

        return updateCustomField2Call(projectId, key, smartCustomFieldDTO, _callback);

    }

    /**
     * Updates a custom field with a specified key in a project
     * Updates a custom field with a specified key in a project
     * @param projectId project&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateCustomField2(String projectId, String key, SmartCustomFieldDTO smartCustomFieldDTO) throws ApiException {
        updateCustomField2WithHttpInfo(projectId, key, smartCustomFieldDTO);
    }

    /**
     * Updates a custom field with a specified key in a project
     * Updates a custom field with a specified key in a project
     * @param projectId project&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCustomField2WithHttpInfo(String projectId, String key, SmartCustomFieldDTO smartCustomFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomField2ValidateBeforeCall(projectId, key, smartCustomFieldDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a custom field with a specified key in a project (asynchronously)
     * Updates a custom field with a specified key in a project
     * @param projectId project&#39;s internal identifier (required)
     * @param key custom field&#39;s key (required)
     * @param smartCustomFieldDTO Updated custom field with a specified key in a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomField2Async(String projectId, String key, SmartCustomFieldDTO smartCustomFieldDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomField2ValidateBeforeCall(projectId, key, smartCustomFieldDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInternalNotes
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInternalNotesCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/internalNotes"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInternalNotesValidateBeforeCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateInternalNotes(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateInternalNotes(Async)");
        }

        return updateInternalNotesCall(projectId, stringDTO, _callback);

    }

    /**
     * Updates Internal Notes for a project.
     * Updates Internal Notes for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateInternalNotes(String projectId, StringDTO stringDTO) throws ApiException {
        updateInternalNotesWithHttpInfo(projectId, stringDTO);
    }

    /**
     * Updates Internal Notes for a project.
     * Updates Internal Notes for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateInternalNotesWithHttpInfo(String projectId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateInternalNotesValidateBeforeCall(projectId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Internal Notes for a project. (asynchronously)
     * Updates Internal Notes for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated Internal Notes for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInternalNotesAsync(String projectId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInternalNotesValidateBeforeCall(projectId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderedOn
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Order Date for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderedOnCall(String projectId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/orderDate"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderedOnValidateBeforeCall(String projectId, TimeDTO timeDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateOrderedOn(Async)");
        }

        // verify the required parameter 'timeDTO' is set
        if (timeDTO == null) {
            throw new ApiException("Missing the required parameter 'timeDTO' when calling updateOrderedOn(Async)");
        }

        return updateOrderedOnCall(projectId, timeDTO, _callback);

    }

    /**
     * Updates Order Date for a project.
     * Updates Order Date for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Order Date for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateOrderedOn(String projectId, TimeDTO timeDTO) throws ApiException {
        updateOrderedOnWithHttpInfo(projectId, timeDTO);
    }

    /**
     * Updates Order Date for a project.
     * Updates Order Date for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Order Date for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateOrderedOnWithHttpInfo(String projectId, TimeDTO timeDTO) throws ApiException {
        okhttp3.Call localVarCall = updateOrderedOnValidateBeforeCall(projectId, timeDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates Order Date for a project. (asynchronously)
     * Updates Order Date for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param timeDTO Updated Order Date for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderedOnAsync(String projectId, TimeDTO timeDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderedOnValidateBeforeCall(projectId, timeDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayable2
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayable2Call(String projectId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/finance/payables/{payableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayable2ValidateBeforeCall(String projectId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updatePayable2(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling updatePayable2(Async)");
        }

        // verify the required parameter 'payableDTO' is set
        if (payableDTO == null) {
            throw new ApiException("Missing the required parameter 'payableDTO' when calling updatePayable2(Async)");
        }

        return updatePayable2Call(projectId, payableId, payableDTO, _callback);

    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO updatePayable2(String projectId, Long payableId, PayableDTO payableDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = updatePayable2WithHttpInfo(projectId, payableId, payableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> updatePayable2WithHttpInfo(String projectId, Long payableId, PayableDTO payableDTO) throws ApiException {
        okhttp3.Call localVarCall = updatePayable2ValidateBeforeCall(projectId, payableId, payableDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a payable. (asynchronously)
     * Updates a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayable2Async(String projectId, Long payableId, PayableDTO payableDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayable2ValidateBeforeCall(projectId, payableId, payableDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReceivable2
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivable2Call(String projectId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/finance/receivables/{receivableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReceivable2ValidateBeforeCall(String projectId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateReceivable2(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling updateReceivable2(Async)");
        }

        // verify the required parameter 'receivableDTO' is set
        if (receivableDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableDTO' when calling updateReceivable2(Async)");
        }

        return updateReceivable2Call(projectId, receivableId, receivableDTO, _callback);

    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO updateReceivable2(String projectId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = updateReceivable2WithHttpInfo(projectId, receivableId, receivableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> updateReceivable2WithHttpInfo(String projectId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        okhttp3.Call localVarCall = updateReceivable2ValidateBeforeCall(projectId, receivableId, receivableDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a receivable. (asynchronously)
     * Updates a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivable2Async(String projectId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReceivable2ValidateBeforeCall(projectId, receivableId, receivableDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSourceLanguage
     * @param projectId project&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSourceLanguageCall(String projectId, SourceLanguageDTO sourceLanguageDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceLanguageDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/sourceLanguage"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSourceLanguageValidateBeforeCall(String projectId, SourceLanguageDTO sourceLanguageDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateSourceLanguage(Async)");
        }

        // verify the required parameter 'sourceLanguageDTO' is set
        if (sourceLanguageDTO == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguageDTO' when calling updateSourceLanguage(Async)");
        }

        return updateSourceLanguageCall(projectId, sourceLanguageDTO, _callback);

    }

    /**
     * Updates source language for a project.
     * Updates source language for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateSourceLanguage(String projectId, SourceLanguageDTO sourceLanguageDTO) throws ApiException {
        updateSourceLanguageWithHttpInfo(projectId, sourceLanguageDTO);
    }

    /**
     * Updates source language for a project.
     * Updates source language for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSourceLanguageWithHttpInfo(String projectId, SourceLanguageDTO sourceLanguageDTO) throws ApiException {
        okhttp3.Call localVarCall = updateSourceLanguageValidateBeforeCall(projectId, sourceLanguageDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates source language for a project. (asynchronously)
     * Updates source language for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param sourceLanguageDTO Updated source language for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSourceLanguageAsync(String projectId, SourceLanguageDTO sourceLanguageDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSourceLanguageValidateBeforeCall(projectId, sourceLanguageDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpecialization
     * @param projectId project&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecializationCall(String projectId, SpecializationDTO specializationDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = specializationDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/specialization"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecializationValidateBeforeCall(String projectId, SpecializationDTO specializationDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateSpecialization(Async)");
        }

        // verify the required parameter 'specializationDTO' is set
        if (specializationDTO == null) {
            throw new ApiException("Missing the required parameter 'specializationDTO' when calling updateSpecialization(Async)");
        }

        return updateSpecializationCall(projectId, specializationDTO, _callback);

    }

    /**
     * Updates specialization for a project.
     * Updates specialization for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateSpecialization(String projectId, SpecializationDTO specializationDTO) throws ApiException {
        updateSpecializationWithHttpInfo(projectId, specializationDTO);
    }

    /**
     * Updates specialization for a project.
     * Updates specialization for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSpecializationWithHttpInfo(String projectId, SpecializationDTO specializationDTO) throws ApiException {
        okhttp3.Call localVarCall = updateSpecializationValidateBeforeCall(projectId, specializationDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates specialization for a project. (asynchronously)
     * Updates specialization for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param specializationDTO Updated specialization for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecializationAsync(String projectId, SpecializationDTO specializationDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecializationValidateBeforeCall(projectId, specializationDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTargetLanguages
     * @param projectId project&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetLanguagesCall(String projectId, TargetLanguagesDTO targetLanguagesDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = targetLanguagesDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/targetLanguages"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTargetLanguagesValidateBeforeCall(String projectId, TargetLanguagesDTO targetLanguagesDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateTargetLanguages(Async)");
        }

        // verify the required parameter 'targetLanguagesDTO' is set
        if (targetLanguagesDTO == null) {
            throw new ApiException("Missing the required parameter 'targetLanguagesDTO' when calling updateTargetLanguages(Async)");
        }

        return updateTargetLanguagesCall(projectId, targetLanguagesDTO, _callback);

    }

    /**
     * Updates target languages for a project.
     * Updates target languages for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateTargetLanguages(String projectId, TargetLanguagesDTO targetLanguagesDTO) throws ApiException {
        updateTargetLanguagesWithHttpInfo(projectId, targetLanguagesDTO);
    }

    /**
     * Updates target languages for a project.
     * Updates target languages for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTargetLanguagesWithHttpInfo(String projectId, TargetLanguagesDTO targetLanguagesDTO) throws ApiException {
        okhttp3.Call localVarCall = updateTargetLanguagesValidateBeforeCall(projectId, targetLanguagesDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates target languages for a project. (asynchronously)
     * Updates target languages for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param targetLanguagesDTO Updated target languages for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetLanguagesAsync(String projectId, TargetLanguagesDTO targetLanguagesDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTargetLanguagesValidateBeforeCall(projectId, targetLanguagesDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVendorInstructions
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVendorInstructionsCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/vendorInstructions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVendorInstructionsValidateBeforeCall(String projectId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateVendorInstructions(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateVendorInstructions(Async)");
        }

        return updateVendorInstructionsCall(projectId, stringDTO, _callback);

    }

    /**
     * Updates instructions for all vendors performing the jobs in a project.
     * Updates instructions for all vendors performing the jobs in a project. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateVendorInstructions(String projectId, StringDTO stringDTO) throws ApiException {
        updateVendorInstructionsWithHttpInfo(projectId, stringDTO);
    }

    /**
     * Updates instructions for all vendors performing the jobs in a project.
     * Updates instructions for all vendors performing the jobs in a project. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateVendorInstructionsWithHttpInfo(String projectId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateVendorInstructionsValidateBeforeCall(projectId, stringDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates instructions for all vendors performing the jobs in a project. (asynchronously)
     * Updates instructions for all vendors performing the jobs in a project. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     * @param projectId project&#39;s internal identifier (required)
     * @param stringDTO Updated instructions for all vendors performing the jobs in a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVendorInstructionsAsync(String projectId, StringDTO stringDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVendorInstructionsValidateBeforeCall(projectId, stringDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVolume
     * @param projectId project&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVolumeCall(String projectId, BigDecimalDTO bigDecimalDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bigDecimalDTO;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/volume"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVolumeValidateBeforeCall(String projectId, BigDecimalDTO bigDecimalDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateVolume(Async)");
        }

        // verify the required parameter 'bigDecimalDTO' is set
        if (bigDecimalDTO == null) {
            throw new ApiException("Missing the required parameter 'bigDecimalDTO' when calling updateVolume(Async)");
        }

        return updateVolumeCall(projectId, bigDecimalDTO, _callback);

    }

    /**
     * Updates volume for a project.
     * Updates volume for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateVolume(String projectId, BigDecimalDTO bigDecimalDTO) throws ApiException {
        updateVolumeWithHttpInfo(projectId, bigDecimalDTO);
    }

    /**
     * Updates volume for a project.
     * Updates volume for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateVolumeWithHttpInfo(String projectId, BigDecimalDTO bigDecimalDTO) throws ApiException {
        okhttp3.Call localVarCall = updateVolumeValidateBeforeCall(projectId, bigDecimalDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates volume for a project. (asynchronously)
     * Updates volume for a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param bigDecimalDTO Updated volume for a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVolumeAsync(String projectId, BigDecimalDTO bigDecimalDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVolumeValidateBeforeCall(projectId, bigDecimalDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile2
     * @param projectId project&#39;s internal identifier (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile2Call(String projectId, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{projectId}/files/upload"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFile2ValidateBeforeCall(String projectId, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling uploadFile2(Async)");
        }

        return uploadFile2Call(projectId, _file, _callback);

    }

    /**
     * Uploads file to the project as a file uploaded by PM.
     * Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/projects/{projectId}/files/add\&quot; operation
     * @param projectId project&#39;s internal identifier (required)
     * @param _file  (optional)
     * @return FileDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FileDto uploadFile2(String projectId, File _file) throws ApiException {
        ApiResponse<FileDto> localVarResp = uploadFile2WithHttpInfo(projectId, _file);
        return localVarResp.getData();
    }

    /**
     * Uploads file to the project as a file uploaded by PM.
     * Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/projects/{projectId}/files/add\&quot; operation
     * @param projectId project&#39;s internal identifier (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;FileDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileDto> uploadFile2WithHttpInfo(String projectId, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadFile2ValidateBeforeCall(projectId, _file, null);
        Type localVarReturnType = new TypeToken<FileDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Uploads file to the project as a file uploaded by PM. (asynchronously)
     * Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/projects/{projectId}/files/add\&quot; operation
     * @param projectId project&#39;s internal identifier (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFile2Async(String projectId, File _file, final ApiCallback<FileDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFile2ValidateBeforeCall(projectId, _file, _callback);
        Type localVarReturnType = new TypeToken<FileDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
