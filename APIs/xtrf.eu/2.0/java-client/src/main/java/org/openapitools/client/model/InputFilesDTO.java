/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputFilesDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputFilesDTO {
  public static final String SERIALIZED_NAME_LOG_FILES = "logFiles";
  @SerializedName(SERIALIZED_NAME_LOG_FILES)
  private List<FileDTO> logFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE_FILES = "referenceFiles";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FILES)
  private List<FileDTO> referenceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERMINOLOGY = "terminology";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY)
  private List<FileDTO> terminology = new ArrayList<>();

  public static final String SERIALIZED_NAME_TM = "tm";
  @SerializedName(SERIALIZED_NAME_TM)
  private List<FileDTO> tm = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORK_FILES = "workFiles";
  @SerializedName(SERIALIZED_NAME_WORK_FILES)
  private List<FileDTO> workFiles = new ArrayList<>();

  public InputFilesDTO() {
  }

  public InputFilesDTO logFiles(List<FileDTO> logFiles) {
    this.logFiles = logFiles;
    return this;
  }

  public InputFilesDTO addLogFilesItem(FileDTO logFilesItem) {
    if (this.logFiles == null) {
      this.logFiles = new ArrayList<>();
    }
    this.logFiles.add(logFilesItem);
    return this;
  }

  /**
   * Get logFiles
   * @return logFiles
   */
  @javax.annotation.Nullable
  public List<FileDTO> getLogFiles() {
    return logFiles;
  }

  public void setLogFiles(List<FileDTO> logFiles) {
    this.logFiles = logFiles;
  }


  public InputFilesDTO referenceFiles(List<FileDTO> referenceFiles) {
    this.referenceFiles = referenceFiles;
    return this;
  }

  public InputFilesDTO addReferenceFilesItem(FileDTO referenceFilesItem) {
    if (this.referenceFiles == null) {
      this.referenceFiles = new ArrayList<>();
    }
    this.referenceFiles.add(referenceFilesItem);
    return this;
  }

  /**
   * Get referenceFiles
   * @return referenceFiles
   */
  @javax.annotation.Nullable
  public List<FileDTO> getReferenceFiles() {
    return referenceFiles;
  }

  public void setReferenceFiles(List<FileDTO> referenceFiles) {
    this.referenceFiles = referenceFiles;
  }


  public InputFilesDTO terminology(List<FileDTO> terminology) {
    this.terminology = terminology;
    return this;
  }

  public InputFilesDTO addTerminologyItem(FileDTO terminologyItem) {
    if (this.terminology == null) {
      this.terminology = new ArrayList<>();
    }
    this.terminology.add(terminologyItem);
    return this;
  }

  /**
   * Get terminology
   * @return terminology
   */
  @javax.annotation.Nullable
  public List<FileDTO> getTerminology() {
    return terminology;
  }

  public void setTerminology(List<FileDTO> terminology) {
    this.terminology = terminology;
  }


  public InputFilesDTO tm(List<FileDTO> tm) {
    this.tm = tm;
    return this;
  }

  public InputFilesDTO addTmItem(FileDTO tmItem) {
    if (this.tm == null) {
      this.tm = new ArrayList<>();
    }
    this.tm.add(tmItem);
    return this;
  }

  /**
   * Get tm
   * @return tm
   */
  @javax.annotation.Nullable
  public List<FileDTO> getTm() {
    return tm;
  }

  public void setTm(List<FileDTO> tm) {
    this.tm = tm;
  }


  public InputFilesDTO workFiles(List<FileDTO> workFiles) {
    this.workFiles = workFiles;
    return this;
  }

  public InputFilesDTO addWorkFilesItem(FileDTO workFilesItem) {
    if (this.workFiles == null) {
      this.workFiles = new ArrayList<>();
    }
    this.workFiles.add(workFilesItem);
    return this;
  }

  /**
   * Get workFiles
   * @return workFiles
   */
  @javax.annotation.Nullable
  public List<FileDTO> getWorkFiles() {
    return workFiles;
  }

  public void setWorkFiles(List<FileDTO> workFiles) {
    this.workFiles = workFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputFilesDTO inputFilesDTO = (InputFilesDTO) o;
    return Objects.equals(this.logFiles, inputFilesDTO.logFiles) &&
        Objects.equals(this.referenceFiles, inputFilesDTO.referenceFiles) &&
        Objects.equals(this.terminology, inputFilesDTO.terminology) &&
        Objects.equals(this.tm, inputFilesDTO.tm) &&
        Objects.equals(this.workFiles, inputFilesDTO.workFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logFiles, referenceFiles, terminology, tm, workFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputFilesDTO {\n");
    sb.append("    logFiles: ").append(toIndentedString(logFiles)).append("\n");
    sb.append("    referenceFiles: ").append(toIndentedString(referenceFiles)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    tm: ").append(toIndentedString(tm)).append("\n");
    sb.append("    workFiles: ").append(toIndentedString(workFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logFiles");
    openapiFields.add("referenceFiles");
    openapiFields.add("terminology");
    openapiFields.add("tm");
    openapiFields.add("workFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputFilesDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputFilesDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputFilesDTO is not found in the empty JSON string", InputFilesDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputFilesDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputFilesDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("logFiles") != null && !jsonObj.get("logFiles").isJsonNull()) {
        JsonArray jsonArraylogFiles = jsonObj.getAsJsonArray("logFiles");
        if (jsonArraylogFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logFiles` to be an array in the JSON string but got `%s`", jsonObj.get("logFiles").toString()));
          }

          // validate the optional field `logFiles` (array)
          for (int i = 0; i < jsonArraylogFiles.size(); i++) {
            FileDTO.validateJsonElement(jsonArraylogFiles.get(i));
          };
        }
      }
      if (jsonObj.get("referenceFiles") != null && !jsonObj.get("referenceFiles").isJsonNull()) {
        JsonArray jsonArrayreferenceFiles = jsonObj.getAsJsonArray("referenceFiles");
        if (jsonArrayreferenceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referenceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referenceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("referenceFiles").toString()));
          }

          // validate the optional field `referenceFiles` (array)
          for (int i = 0; i < jsonArrayreferenceFiles.size(); i++) {
            FileDTO.validateJsonElement(jsonArrayreferenceFiles.get(i));
          };
        }
      }
      if (jsonObj.get("terminology") != null && !jsonObj.get("terminology").isJsonNull()) {
        JsonArray jsonArrayterminology = jsonObj.getAsJsonArray("terminology");
        if (jsonArrayterminology != null) {
          // ensure the json data is an array
          if (!jsonObj.get("terminology").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `terminology` to be an array in the JSON string but got `%s`", jsonObj.get("terminology").toString()));
          }

          // validate the optional field `terminology` (array)
          for (int i = 0; i < jsonArrayterminology.size(); i++) {
            FileDTO.validateJsonElement(jsonArrayterminology.get(i));
          };
        }
      }
      if (jsonObj.get("tm") != null && !jsonObj.get("tm").isJsonNull()) {
        JsonArray jsonArraytm = jsonObj.getAsJsonArray("tm");
        if (jsonArraytm != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tm").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tm` to be an array in the JSON string but got `%s`", jsonObj.get("tm").toString()));
          }

          // validate the optional field `tm` (array)
          for (int i = 0; i < jsonArraytm.size(); i++) {
            FileDTO.validateJsonElement(jsonArraytm.get(i));
          };
        }
      }
      if (jsonObj.get("workFiles") != null && !jsonObj.get("workFiles").isJsonNull()) {
        JsonArray jsonArrayworkFiles = jsonObj.getAsJsonArray("workFiles");
        if (jsonArrayworkFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workFiles` to be an array in the JSON string but got `%s`", jsonObj.get("workFiles").toString()));
          }

          // validate the optional field `workFiles` (array)
          for (int i = 0; i < jsonArrayworkFiles.size(); i++) {
            FileDTO.validateJsonElement(jsonArrayworkFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputFilesDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputFilesDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputFilesDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputFilesDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<InputFilesDTO>() {
           @Override
           public void write(JsonWriter out, InputFilesDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputFilesDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputFilesDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputFilesDTO
   * @throws IOException if the JSON string is invalid with respect to InputFilesDTO
   */
  public static InputFilesDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputFilesDTO.class);
  }

  /**
   * Convert an instance of InputFilesDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

