/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContactsDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.FileDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.ProjectDatesDTO;
import org.openapitools.client.model.StringDTO;
import org.openapitools.client.model.TaskFilesDTO;
import org.openapitools.client.model.TaskProgressDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksClassicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksClassicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksClassicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFile
     * @param taskId task&#39;s internal identifier (required)
     * @param fileDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFileCall(String taskId, FileDTO fileDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileDTO;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/files/input"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFileValidateBeforeCall(String taskId, FileDTO fileDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addFile(Async)");
        }

        // verify the required parameter 'fileDTO' is set
        if (fileDTO == null) {
            throw new ApiException("Missing the required parameter 'fileDTO' when calling addFile(Async)");
        }

        return addFileCall(taskId, fileDTO, _callback);

    }

    /**
     * Adds files to a given task.
     * Adds files to a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param fileDTO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addFile(String taskId, FileDTO fileDTO) throws ApiException {
        addFileWithHttpInfo(taskId, fileDTO);
    }

    /**
     * Adds files to a given task.
     * Adds files to a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param fileDTO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addFileWithHttpInfo(String taskId, FileDTO fileDTO) throws ApiException {
        okhttp3.Call localVarCall = addFileValidateBeforeCall(taskId, fileDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds files to a given task. (asynchronously)
     * Adds files to a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param fileDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFileAsync(String taskId, FileDTO fileDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFileValidateBeforeCall(taskId, fileDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete14
     * @param taskId task&#39;s internal identifier (required)
     * @param removeFilesFromDisc remove files from disc (optional)
     * @param removeExternalProjects remove external projects (ie. from CAT Tool) (optional)
     * @param forceJobsRemoval force jobs removal (ie. started or ready) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete14Call(String taskId, Boolean removeFilesFromDisc, Boolean removeExternalProjects, Boolean forceJobsRemoval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (removeFilesFromDisc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeFilesFromDisc", removeFilesFromDisc));
        }

        if (removeExternalProjects != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeExternalProjects", removeExternalProjects));
        }

        if (forceJobsRemoval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceJobsRemoval", forceJobsRemoval));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete14ValidateBeforeCall(String taskId, Boolean removeFilesFromDisc, Boolean removeExternalProjects, Boolean forceJobsRemoval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling delete14(Async)");
        }

        return delete14Call(taskId, removeFilesFromDisc, removeExternalProjects, forceJobsRemoval, _callback);

    }

    /**
     * Removes a task.
     * Removes a task.
     * @param taskId task&#39;s internal identifier (required)
     * @param removeFilesFromDisc remove files from disc (optional)
     * @param removeExternalProjects remove external projects (ie. from CAT Tool) (optional)
     * @param forceJobsRemoval force jobs removal (ie. started or ready) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete14(String taskId, Boolean removeFilesFromDisc, Boolean removeExternalProjects, Boolean forceJobsRemoval) throws ApiException {
        delete14WithHttpInfo(taskId, removeFilesFromDisc, removeExternalProjects, forceJobsRemoval);
    }

    /**
     * Removes a task.
     * Removes a task.
     * @param taskId task&#39;s internal identifier (required)
     * @param removeFilesFromDisc remove files from disc (optional)
     * @param removeExternalProjects remove external projects (ie. from CAT Tool) (optional)
     * @param forceJobsRemoval force jobs removal (ie. started or ready) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete14WithHttpInfo(String taskId, Boolean removeFilesFromDisc, Boolean removeExternalProjects, Boolean forceJobsRemoval) throws ApiException {
        okhttp3.Call localVarCall = delete14ValidateBeforeCall(taskId, removeFilesFromDisc, removeExternalProjects, forceJobsRemoval, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a task. (asynchronously)
     * Removes a task.
     * @param taskId task&#39;s internal identifier (required)
     * @param removeFilesFromDisc remove files from disc (optional)
     * @param removeExternalProjects remove external projects (ie. from CAT Tool) (optional)
     * @param forceJobsRemoval force jobs removal (ie. started or ready) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete14Async(String taskId, Boolean removeFilesFromDisc, Boolean removeExternalProjects, Boolean forceJobsRemoval, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete14ValidateBeforeCall(taskId, removeFilesFromDisc, removeExternalProjects, forceJobsRemoval, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContacts1
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContacts1Call(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/contacts"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContacts1ValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getContacts1(Async)");
        }

        return getContacts1Call(taskId, _callback);

    }

    /**
     * Returns contacts of a given task.
     * Returns contacts of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return ContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContactsDTO getContacts1(String taskId) throws ApiException {
        ApiResponse<ContactsDTO> localVarResp = getContacts1WithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Returns contacts of a given task.
     * Returns contacts of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return ApiResponse&lt;ContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactsDTO> getContacts1WithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getContacts1ValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns contacts of a given task. (asynchronously)
     * Returns contacts of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContacts1Async(String taskId, final ApiCallback<ContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContacts1ValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFields7
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields7Call(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/customFields"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFields7ValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getCustomFields7(Async)");
        }

        return getCustomFields7Call(taskId, _callback);

    }

    /**
     * Returns custom fields of a given task.
     * Returns custom fields of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> getCustomFields7(String taskId) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = getCustomFields7WithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Returns custom fields of a given task.
     * Returns custom fields of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> getCustomFields7WithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFields7ValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns custom fields of a given task. (asynchronously)
     * Returns custom fields of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields7Async(String taskId, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFields7ValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDates3
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDates3Call(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/dates"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDates3ValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getDates3(Async)");
        }

        return getDates3Call(taskId, _callback);

    }

    /**
     * Returns dates of a given task.
     * Returns dates of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return ProjectDatesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDatesDTO getDates3(String taskId) throws ApiException {
        ApiResponse<ProjectDatesDTO> localVarResp = getDates3WithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Returns dates of a given task.
     * Returns dates of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return ApiResponse&lt;ProjectDatesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDatesDTO> getDates3WithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getDates3ValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns dates of a given task. (asynchronously)
     * Returns dates of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDates3Async(String taskId, final ApiCallback<ProjectDatesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDates3ValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstructions2
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstructions2Call(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/instructions"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstructions2ValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getInstructions2(Async)");
        }

        return getInstructions2Call(taskId, _callback);

    }

    /**
     * Returns instructions of a given task.
     * Returns instructions of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return InstructionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstructionsDTO getInstructions2(String taskId) throws ApiException {
        ApiResponse<InstructionsDTO> localVarResp = getInstructions2WithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Returns instructions of a given task.
     * Returns instructions of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @return ApiResponse&lt;InstructionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionsDTO> getInstructions2WithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getInstructions2ValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns instructions of a given task. (asynchronously)
     * Returns instructions of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstructions2Async(String taskId, final ApiCallback<InstructionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstructions2ValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProgress
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgressCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/progress"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProgressValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getProgress(Async)");
        }

        return getProgressCall(taskId, _callback);

    }

    /**
     * Returns progress of a given task.
     * Returns progress of a given task. Progress contains information about task&#39;s status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included.
     * @param taskId task&#39;s internal identifier (required)
     * @return TaskProgressDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TaskProgressDTO getProgress(String taskId) throws ApiException {
        ApiResponse<TaskProgressDTO> localVarResp = getProgressWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Returns progress of a given task.
     * Returns progress of a given task. Progress contains information about task&#39;s status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included.
     * @param taskId task&#39;s internal identifier (required)
     * @return ApiResponse&lt;TaskProgressDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskProgressDTO> getProgressWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getProgressValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<TaskProgressDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns progress of a given task. (asynchronously)
     * Returns progress of a given task. Progress contains information about task&#39;s status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included.
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProgressAsync(String taskId, final ApiCallback<TaskProgressDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProgressValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskProgressDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskFiles
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskFilesCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/files"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskFilesValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskFiles(Async)");
        }

        return getTaskFilesCall(taskId, _callback);

    }

    /**
     * Returns lists of files of a given task.
     * Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files.
     * @param taskId task&#39;s internal identifier (required)
     * @return TaskFilesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TaskFilesDTO getTaskFiles(String taskId) throws ApiException {
        ApiResponse<TaskFilesDTO> localVarResp = getTaskFilesWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Returns lists of files of a given task.
     * Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files.
     * @param taskId task&#39;s internal identifier (required)
     * @return ApiResponse&lt;TaskFilesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskFilesDTO> getTaskFilesWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = getTaskFilesValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<TaskFilesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns lists of files of a given task. (asynchronously)
     * Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files.
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskFilesAsync(String taskId, final ApiCallback<TaskFilesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskFilesValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskFilesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for start1
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call start1Call(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/start"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call start1ValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling start1(Async)");
        }

        return start1Call(taskId, _callback);

    }

    /**
     * Starts a task.
     * Starts a task.
     * @param taskId task&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void start1(String taskId) throws ApiException {
        start1WithHttpInfo(taskId);
    }

    /**
     * Starts a task.
     * Starts a task.
     * @param taskId task&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> start1WithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = start1ValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Starts a task. (asynchronously)
     * Starts a task.
     * @param taskId task&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call start1Async(String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = start1ValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientTaskPONumber
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO Updated Client Task PO Number of a given task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientTaskPONumberCall(String taskId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/clientTaskPONumber"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientTaskPONumberValidateBeforeCall(String taskId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateClientTaskPONumber(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateClientTaskPONumber(Async)");
        }

        return updateClientTaskPONumberCall(taskId, stringDTO, _callback);

    }

    /**
     * Updates Client Task PO Number of a given task.
     * Updates Client Task PO Number of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO Updated Client Task PO Number of a given task. (required)
     * @return StringDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StringDTO updateClientTaskPONumber(String taskId, StringDTO stringDTO) throws ApiException {
        ApiResponse<StringDTO> localVarResp = updateClientTaskPONumberWithHttpInfo(taskId, stringDTO);
        return localVarResp.getData();
    }

    /**
     * Updates Client Task PO Number of a given task.
     * Updates Client Task PO Number of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO Updated Client Task PO Number of a given task. (required)
     * @return ApiResponse&lt;StringDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDTO> updateClientTaskPONumberWithHttpInfo(String taskId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateClientTaskPONumberValidateBeforeCall(taskId, stringDTO, null);
        Type localVarReturnType = new TypeToken<StringDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates Client Task PO Number of a given task. (asynchronously)
     * Updates Client Task PO Number of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO Updated Client Task PO Number of a given task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientTaskPONumberAsync(String taskId, StringDTO stringDTO, final ApiCallback<StringDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientTaskPONumberValidateBeforeCall(taskId, stringDTO, _callback);
        Type localVarReturnType = new TypeToken<StringDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContacts1
     * @param taskId task&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of given task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContacts1Call(String taskId, ContactsDTO contactsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactsDTO;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/contacts"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContacts1ValidateBeforeCall(String taskId, ContactsDTO contactsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateContacts1(Async)");
        }

        // verify the required parameter 'contactsDTO' is set
        if (contactsDTO == null) {
            throw new ApiException("Missing the required parameter 'contactsDTO' when calling updateContacts1(Async)");
        }

        return updateContacts1Call(taskId, contactsDTO, _callback);

    }

    /**
     * Updates contacts of a given task.
     * Updates contacts of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of given task. (required)
     * @return ContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContactsDTO updateContacts1(String taskId, ContactsDTO contactsDTO) throws ApiException {
        ApiResponse<ContactsDTO> localVarResp = updateContacts1WithHttpInfo(taskId, contactsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates contacts of a given task.
     * Updates contacts of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of given task. (required)
     * @return ApiResponse&lt;ContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactsDTO> updateContacts1WithHttpInfo(String taskId, ContactsDTO contactsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateContacts1ValidateBeforeCall(taskId, contactsDTO, null);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates contacts of a given task. (asynchronously)
     * Updates contacts of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of given task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContacts1Async(String taskId, ContactsDTO contactsDTO, final ApiCallback<ContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContacts1ValidateBeforeCall(taskId, contactsDTO, _callback);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFields5
     * @param taskId task&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields5Call(String taskId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDTO;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/customFields"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFields5ValidateBeforeCall(String taskId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateCustomFields5(Async)");
        }

        // verify the required parameter 'customFieldDTO' is set
        if (customFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'customFieldDTO' when calling updateCustomFields5(Async)");
        }

        return updateCustomFields5Call(taskId, customFieldDTO, _callback);

    }

    /**
     * Updates custom fields of a given task.
     * Updates custom fields of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> updateCustomFields5(String taskId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = updateCustomFields5WithHttpInfo(taskId, customFieldDTO);
        return localVarResp.getData();
    }

    /**
     * Updates custom fields of a given task.
     * Updates custom fields of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> updateCustomFields5WithHttpInfo(String taskId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFields5ValidateBeforeCall(taskId, customFieldDTO, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates custom fields of a given task. (asynchronously)
     * Updates custom fields of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields5Async(String taskId, List<CustomFieldDTO> customFieldDTO, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFields5ValidateBeforeCall(taskId, customFieldDTO, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDates2
     * @param taskId task&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDates2Call(String taskId, ProjectDatesDTO projectDatesDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectDatesDTO;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/dates"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDates2ValidateBeforeCall(String taskId, ProjectDatesDTO projectDatesDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateDates2(Async)");
        }

        // verify the required parameter 'projectDatesDTO' is set
        if (projectDatesDTO == null) {
            throw new ApiException("Missing the required parameter 'projectDatesDTO' when calling updateDates2(Async)");
        }

        return updateDates2Call(taskId, projectDatesDTO, _callback);

    }

    /**
     * Updates dates of a given task.
     * Updates dates of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given task. (required)
     * @return ProjectDatesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDatesDTO updateDates2(String taskId, ProjectDatesDTO projectDatesDTO) throws ApiException {
        ApiResponse<ProjectDatesDTO> localVarResp = updateDates2WithHttpInfo(taskId, projectDatesDTO);
        return localVarResp.getData();
    }

    /**
     * Updates dates of a given task.
     * Updates dates of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given task. (required)
     * @return ApiResponse&lt;ProjectDatesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDatesDTO> updateDates2WithHttpInfo(String taskId, ProjectDatesDTO projectDatesDTO) throws ApiException {
        okhttp3.Call localVarCall = updateDates2ValidateBeforeCall(taskId, projectDatesDTO, null);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates dates of a given task. (asynchronously)
     * Updates dates of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDates2Async(String taskId, ProjectDatesDTO projectDatesDTO, final ApiCallback<ProjectDatesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDates2ValidateBeforeCall(taskId, projectDatesDTO, _callback);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInstructions3
     * @param taskId task&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInstructions3Call(String taskId, InstructionsDTO instructionsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instructionsDTO;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/instructions"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstructions3ValidateBeforeCall(String taskId, InstructionsDTO instructionsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateInstructions3(Async)");
        }

        // verify the required parameter 'instructionsDTO' is set
        if (instructionsDTO == null) {
            throw new ApiException("Missing the required parameter 'instructionsDTO' when calling updateInstructions3(Async)");
        }

        return updateInstructions3Call(taskId, instructionsDTO, _callback);

    }

    /**
     * Updates instructions of a given task.
     * Updates instructions of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given task. (required)
     * @return InstructionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstructionsDTO updateInstructions3(String taskId, InstructionsDTO instructionsDTO) throws ApiException {
        ApiResponse<InstructionsDTO> localVarResp = updateInstructions3WithHttpInfo(taskId, instructionsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates instructions of a given task.
     * Updates instructions of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given task. (required)
     * @return ApiResponse&lt;InstructionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionsDTO> updateInstructions3WithHttpInfo(String taskId, InstructionsDTO instructionsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateInstructions3ValidateBeforeCall(taskId, instructionsDTO, null);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates instructions of a given task. (asynchronously)
     * Updates instructions of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInstructions3Async(String taskId, InstructionsDTO instructionsDTO, final ApiCallback<InstructionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstructions3ValidateBeforeCall(taskId, instructionsDTO, _callback);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateName
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNameCall(String taskId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stringDTO;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/name"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNameValidateBeforeCall(String taskId, StringDTO stringDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateName(Async)");
        }

        // verify the required parameter 'stringDTO' is set
        if (stringDTO == null) {
            throw new ApiException("Missing the required parameter 'stringDTO' when calling updateName(Async)");
        }

        return updateNameCall(taskId, stringDTO, _callback);

    }

    /**
     * Updates name of a given task.
     * Updates name of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO  (required)
     * @return StringDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StringDTO updateName(String taskId, StringDTO stringDTO) throws ApiException {
        ApiResponse<StringDTO> localVarResp = updateNameWithHttpInfo(taskId, stringDTO);
        return localVarResp.getData();
    }

    /**
     * Updates name of a given task.
     * Updates name of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO  (required)
     * @return ApiResponse&lt;StringDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDTO> updateNameWithHttpInfo(String taskId, StringDTO stringDTO) throws ApiException {
        okhttp3.Call localVarCall = updateNameValidateBeforeCall(taskId, stringDTO, null);
        Type localVarReturnType = new TypeToken<StringDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates name of a given task. (asynchronously)
     * Updates name of a given task.
     * @param taskId task&#39;s internal identifier (required)
     * @param stringDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNameAsync(String taskId, StringDTO stringDTO, final ApiCallback<StringDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNameValidateBeforeCall(taskId, stringDTO, _callback);
        Type localVarReturnType = new TypeToken<StringDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
