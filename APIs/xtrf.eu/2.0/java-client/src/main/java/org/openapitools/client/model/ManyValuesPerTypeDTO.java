/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CalculationUnitDTO;
import org.openapitools.client.model.CategoryDTO;
import org.openapitools.client.model.CountryDTO;
import org.openapitools.client.model.CurrencyDTO;
import org.openapitools.client.model.IndustryDTO;
import org.openapitools.client.model.JobTypeDTO;
import org.openapitools.client.model.LanguageDTO;
import org.openapitools.client.model.LanguageSpecializationDTO;
import org.openapitools.client.model.LeadSourceDTO;
import org.openapitools.client.model.PersonDepartmentDTO;
import org.openapitools.client.model.PersonPositionDTO;
import org.openapitools.client.model.ProvinceDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ManyValuesPerTypeDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManyValuesPerTypeDTO {
  public static final String SERIALIZED_NAME_CALCULATION_UNIT = "calculationUnit";
  @SerializedName(SERIALIZED_NAME_CALCULATION_UNIT)
  private List<CalculationUnitDTO> calculationUnit = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<CategoryDTO> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private List<CountryDTO> country = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private List<CurrencyDTO> currency = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private List<IndustryDTO> industry = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private List<JobTypeDTO> jobType = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private List<LanguageDTO> language = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEAD_SOURCE = "leadSource";
  @SerializedName(SERIALIZED_NAME_LEAD_SOURCE)
  private List<LeadSourceDTO> leadSource = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSON_DEPARTMENT = "personDepartment";
  @SerializedName(SERIALIZED_NAME_PERSON_DEPARTMENT)
  private List<PersonDepartmentDTO> personDepartment = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSON_POSITION = "personPosition";
  @SerializedName(SERIALIZED_NAME_PERSON_POSITION)
  private List<PersonPositionDTO> personPosition = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  private List<ProvinceDTO> province = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPECIALIZATION = "specialization";
  @SerializedName(SERIALIZED_NAME_SPECIALIZATION)
  private List<LanguageSpecializationDTO> specialization = new ArrayList<>();

  public ManyValuesPerTypeDTO() {
  }

  public ManyValuesPerTypeDTO calculationUnit(List<CalculationUnitDTO> calculationUnit) {
    this.calculationUnit = calculationUnit;
    return this;
  }

  public ManyValuesPerTypeDTO addCalculationUnitItem(CalculationUnitDTO calculationUnitItem) {
    if (this.calculationUnit == null) {
      this.calculationUnit = new ArrayList<>();
    }
    this.calculationUnit.add(calculationUnitItem);
    return this;
  }

  /**
   * Get calculationUnit
   * @return calculationUnit
   */
  @javax.annotation.Nullable
  public List<CalculationUnitDTO> getCalculationUnit() {
    return calculationUnit;
  }

  public void setCalculationUnit(List<CalculationUnitDTO> calculationUnit) {
    this.calculationUnit = calculationUnit;
  }


  public ManyValuesPerTypeDTO category(List<CategoryDTO> category) {
    this.category = category;
    return this;
  }

  public ManyValuesPerTypeDTO addCategoryItem(CategoryDTO categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public List<CategoryDTO> getCategory() {
    return category;
  }

  public void setCategory(List<CategoryDTO> category) {
    this.category = category;
  }


  public ManyValuesPerTypeDTO country(List<CountryDTO> country) {
    this.country = country;
    return this;
  }

  public ManyValuesPerTypeDTO addCountryItem(CountryDTO countryItem) {
    if (this.country == null) {
      this.country = new ArrayList<>();
    }
    this.country.add(countryItem);
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public List<CountryDTO> getCountry() {
    return country;
  }

  public void setCountry(List<CountryDTO> country) {
    this.country = country;
  }


  public ManyValuesPerTypeDTO currency(List<CurrencyDTO> currency) {
    this.currency = currency;
    return this;
  }

  public ManyValuesPerTypeDTO addCurrencyItem(CurrencyDTO currencyItem) {
    if (this.currency == null) {
      this.currency = new ArrayList<>();
    }
    this.currency.add(currencyItem);
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public List<CurrencyDTO> getCurrency() {
    return currency;
  }

  public void setCurrency(List<CurrencyDTO> currency) {
    this.currency = currency;
  }


  public ManyValuesPerTypeDTO industry(List<IndustryDTO> industry) {
    this.industry = industry;
    return this;
  }

  public ManyValuesPerTypeDTO addIndustryItem(IndustryDTO industryItem) {
    if (this.industry == null) {
      this.industry = new ArrayList<>();
    }
    this.industry.add(industryItem);
    return this;
  }

  /**
   * Get industry
   * @return industry
   */
  @javax.annotation.Nullable
  public List<IndustryDTO> getIndustry() {
    return industry;
  }

  public void setIndustry(List<IndustryDTO> industry) {
    this.industry = industry;
  }


  public ManyValuesPerTypeDTO jobType(List<JobTypeDTO> jobType) {
    this.jobType = jobType;
    return this;
  }

  public ManyValuesPerTypeDTO addJobTypeItem(JobTypeDTO jobTypeItem) {
    if (this.jobType == null) {
      this.jobType = new ArrayList<>();
    }
    this.jobType.add(jobTypeItem);
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nullable
  public List<JobTypeDTO> getJobType() {
    return jobType;
  }

  public void setJobType(List<JobTypeDTO> jobType) {
    this.jobType = jobType;
  }


  public ManyValuesPerTypeDTO language(List<LanguageDTO> language) {
    this.language = language;
    return this;
  }

  public ManyValuesPerTypeDTO addLanguageItem(LanguageDTO languageItem) {
    if (this.language == null) {
      this.language = new ArrayList<>();
    }
    this.language.add(languageItem);
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public List<LanguageDTO> getLanguage() {
    return language;
  }

  public void setLanguage(List<LanguageDTO> language) {
    this.language = language;
  }


  public ManyValuesPerTypeDTO leadSource(List<LeadSourceDTO> leadSource) {
    this.leadSource = leadSource;
    return this;
  }

  public ManyValuesPerTypeDTO addLeadSourceItem(LeadSourceDTO leadSourceItem) {
    if (this.leadSource == null) {
      this.leadSource = new ArrayList<>();
    }
    this.leadSource.add(leadSourceItem);
    return this;
  }

  /**
   * Get leadSource
   * @return leadSource
   */
  @javax.annotation.Nullable
  public List<LeadSourceDTO> getLeadSource() {
    return leadSource;
  }

  public void setLeadSource(List<LeadSourceDTO> leadSource) {
    this.leadSource = leadSource;
  }


  public ManyValuesPerTypeDTO personDepartment(List<PersonDepartmentDTO> personDepartment) {
    this.personDepartment = personDepartment;
    return this;
  }

  public ManyValuesPerTypeDTO addPersonDepartmentItem(PersonDepartmentDTO personDepartmentItem) {
    if (this.personDepartment == null) {
      this.personDepartment = new ArrayList<>();
    }
    this.personDepartment.add(personDepartmentItem);
    return this;
  }

  /**
   * Get personDepartment
   * @return personDepartment
   */
  @javax.annotation.Nullable
  public List<PersonDepartmentDTO> getPersonDepartment() {
    return personDepartment;
  }

  public void setPersonDepartment(List<PersonDepartmentDTO> personDepartment) {
    this.personDepartment = personDepartment;
  }


  public ManyValuesPerTypeDTO personPosition(List<PersonPositionDTO> personPosition) {
    this.personPosition = personPosition;
    return this;
  }

  public ManyValuesPerTypeDTO addPersonPositionItem(PersonPositionDTO personPositionItem) {
    if (this.personPosition == null) {
      this.personPosition = new ArrayList<>();
    }
    this.personPosition.add(personPositionItem);
    return this;
  }

  /**
   * Get personPosition
   * @return personPosition
   */
  @javax.annotation.Nullable
  public List<PersonPositionDTO> getPersonPosition() {
    return personPosition;
  }

  public void setPersonPosition(List<PersonPositionDTO> personPosition) {
    this.personPosition = personPosition;
  }


  public ManyValuesPerTypeDTO province(List<ProvinceDTO> province) {
    this.province = province;
    return this;
  }

  public ManyValuesPerTypeDTO addProvinceItem(ProvinceDTO provinceItem) {
    if (this.province == null) {
      this.province = new ArrayList<>();
    }
    this.province.add(provinceItem);
    return this;
  }

  /**
   * Get province
   * @return province
   */
  @javax.annotation.Nullable
  public List<ProvinceDTO> getProvince() {
    return province;
  }

  public void setProvince(List<ProvinceDTO> province) {
    this.province = province;
  }


  public ManyValuesPerTypeDTO specialization(List<LanguageSpecializationDTO> specialization) {
    this.specialization = specialization;
    return this;
  }

  public ManyValuesPerTypeDTO addSpecializationItem(LanguageSpecializationDTO specializationItem) {
    if (this.specialization == null) {
      this.specialization = new ArrayList<>();
    }
    this.specialization.add(specializationItem);
    return this;
  }

  /**
   * Get specialization
   * @return specialization
   */
  @javax.annotation.Nullable
  public List<LanguageSpecializationDTO> getSpecialization() {
    return specialization;
  }

  public void setSpecialization(List<LanguageSpecializationDTO> specialization) {
    this.specialization = specialization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManyValuesPerTypeDTO manyValuesPerTypeDTO = (ManyValuesPerTypeDTO) o;
    return Objects.equals(this.calculationUnit, manyValuesPerTypeDTO.calculationUnit) &&
        Objects.equals(this.category, manyValuesPerTypeDTO.category) &&
        Objects.equals(this.country, manyValuesPerTypeDTO.country) &&
        Objects.equals(this.currency, manyValuesPerTypeDTO.currency) &&
        Objects.equals(this.industry, manyValuesPerTypeDTO.industry) &&
        Objects.equals(this.jobType, manyValuesPerTypeDTO.jobType) &&
        Objects.equals(this.language, manyValuesPerTypeDTO.language) &&
        Objects.equals(this.leadSource, manyValuesPerTypeDTO.leadSource) &&
        Objects.equals(this.personDepartment, manyValuesPerTypeDTO.personDepartment) &&
        Objects.equals(this.personPosition, manyValuesPerTypeDTO.personPosition) &&
        Objects.equals(this.province, manyValuesPerTypeDTO.province) &&
        Objects.equals(this.specialization, manyValuesPerTypeDTO.specialization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationUnit, category, country, currency, industry, jobType, language, leadSource, personDepartment, personPosition, province, specialization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManyValuesPerTypeDTO {\n");
    sb.append("    calculationUnit: ").append(toIndentedString(calculationUnit)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    leadSource: ").append(toIndentedString(leadSource)).append("\n");
    sb.append("    personDepartment: ").append(toIndentedString(personDepartment)).append("\n");
    sb.append("    personPosition: ").append(toIndentedString(personPosition)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    specialization: ").append(toIndentedString(specialization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculationUnit");
    openapiFields.add("category");
    openapiFields.add("country");
    openapiFields.add("currency");
    openapiFields.add("industry");
    openapiFields.add("jobType");
    openapiFields.add("language");
    openapiFields.add("leadSource");
    openapiFields.add("personDepartment");
    openapiFields.add("personPosition");
    openapiFields.add("province");
    openapiFields.add("specialization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManyValuesPerTypeDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManyValuesPerTypeDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManyValuesPerTypeDTO is not found in the empty JSON string", ManyValuesPerTypeDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManyValuesPerTypeDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManyValuesPerTypeDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("calculationUnit") != null && !jsonObj.get("calculationUnit").isJsonNull()) {
        JsonArray jsonArraycalculationUnit = jsonObj.getAsJsonArray("calculationUnit");
        if (jsonArraycalculationUnit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("calculationUnit").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `calculationUnit` to be an array in the JSON string but got `%s`", jsonObj.get("calculationUnit").toString()));
          }

          // validate the optional field `calculationUnit` (array)
          for (int i = 0; i < jsonArraycalculationUnit.size(); i++) {
            CalculationUnitDTO.validateJsonElement(jsonArraycalculationUnit.get(i));
          };
        }
      }
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        JsonArray jsonArraycategory = jsonObj.getAsJsonArray("category");
        if (jsonArraycategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("category").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
          }

          // validate the optional field `category` (array)
          for (int i = 0; i < jsonArraycategory.size(); i++) {
            CategoryDTO.validateJsonElement(jsonArraycategory.get(i));
          };
        }
      }
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        JsonArray jsonArraycountry = jsonObj.getAsJsonArray("country");
        if (jsonArraycountry != null) {
          // ensure the json data is an array
          if (!jsonObj.get("country").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `country` to be an array in the JSON string but got `%s`", jsonObj.get("country").toString()));
          }

          // validate the optional field `country` (array)
          for (int i = 0; i < jsonArraycountry.size(); i++) {
            CountryDTO.validateJsonElement(jsonArraycountry.get(i));
          };
        }
      }
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        JsonArray jsonArraycurrency = jsonObj.getAsJsonArray("currency");
        if (jsonArraycurrency != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currency").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currency` to be an array in the JSON string but got `%s`", jsonObj.get("currency").toString()));
          }

          // validate the optional field `currency` (array)
          for (int i = 0; i < jsonArraycurrency.size(); i++) {
            CurrencyDTO.validateJsonElement(jsonArraycurrency.get(i));
          };
        }
      }
      if (jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) {
        JsonArray jsonArrayindustry = jsonObj.getAsJsonArray("industry");
        if (jsonArrayindustry != null) {
          // ensure the json data is an array
          if (!jsonObj.get("industry").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `industry` to be an array in the JSON string but got `%s`", jsonObj.get("industry").toString()));
          }

          // validate the optional field `industry` (array)
          for (int i = 0; i < jsonArrayindustry.size(); i++) {
            IndustryDTO.validateJsonElement(jsonArrayindustry.get(i));
          };
        }
      }
      if (jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) {
        JsonArray jsonArrayjobType = jsonObj.getAsJsonArray("jobType");
        if (jsonArrayjobType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobType").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobType` to be an array in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
          }

          // validate the optional field `jobType` (array)
          for (int i = 0; i < jsonArrayjobType.size(); i++) {
            JobTypeDTO.validateJsonElement(jsonArrayjobType.get(i));
          };
        }
      }
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        JsonArray jsonArraylanguage = jsonObj.getAsJsonArray("language");
        if (jsonArraylanguage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("language").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `language` to be an array in the JSON string but got `%s`", jsonObj.get("language").toString()));
          }

          // validate the optional field `language` (array)
          for (int i = 0; i < jsonArraylanguage.size(); i++) {
            LanguageDTO.validateJsonElement(jsonArraylanguage.get(i));
          };
        }
      }
      if (jsonObj.get("leadSource") != null && !jsonObj.get("leadSource").isJsonNull()) {
        JsonArray jsonArrayleadSource = jsonObj.getAsJsonArray("leadSource");
        if (jsonArrayleadSource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("leadSource").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `leadSource` to be an array in the JSON string but got `%s`", jsonObj.get("leadSource").toString()));
          }

          // validate the optional field `leadSource` (array)
          for (int i = 0; i < jsonArrayleadSource.size(); i++) {
            LeadSourceDTO.validateJsonElement(jsonArrayleadSource.get(i));
          };
        }
      }
      if (jsonObj.get("personDepartment") != null && !jsonObj.get("personDepartment").isJsonNull()) {
        JsonArray jsonArraypersonDepartment = jsonObj.getAsJsonArray("personDepartment");
        if (jsonArraypersonDepartment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("personDepartment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `personDepartment` to be an array in the JSON string but got `%s`", jsonObj.get("personDepartment").toString()));
          }

          // validate the optional field `personDepartment` (array)
          for (int i = 0; i < jsonArraypersonDepartment.size(); i++) {
            PersonDepartmentDTO.validateJsonElement(jsonArraypersonDepartment.get(i));
          };
        }
      }
      if (jsonObj.get("personPosition") != null && !jsonObj.get("personPosition").isJsonNull()) {
        JsonArray jsonArraypersonPosition = jsonObj.getAsJsonArray("personPosition");
        if (jsonArraypersonPosition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("personPosition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `personPosition` to be an array in the JSON string but got `%s`", jsonObj.get("personPosition").toString()));
          }

          // validate the optional field `personPosition` (array)
          for (int i = 0; i < jsonArraypersonPosition.size(); i++) {
            PersonPositionDTO.validateJsonElement(jsonArraypersonPosition.get(i));
          };
        }
      }
      if (jsonObj.get("province") != null && !jsonObj.get("province").isJsonNull()) {
        JsonArray jsonArrayprovince = jsonObj.getAsJsonArray("province");
        if (jsonArrayprovince != null) {
          // ensure the json data is an array
          if (!jsonObj.get("province").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `province` to be an array in the JSON string but got `%s`", jsonObj.get("province").toString()));
          }

          // validate the optional field `province` (array)
          for (int i = 0; i < jsonArrayprovince.size(); i++) {
            ProvinceDTO.validateJsonElement(jsonArrayprovince.get(i));
          };
        }
      }
      if (jsonObj.get("specialization") != null && !jsonObj.get("specialization").isJsonNull()) {
        JsonArray jsonArrayspecialization = jsonObj.getAsJsonArray("specialization");
        if (jsonArrayspecialization != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specialization").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specialization` to be an array in the JSON string but got `%s`", jsonObj.get("specialization").toString()));
          }

          // validate the optional field `specialization` (array)
          for (int i = 0; i < jsonArrayspecialization.size(); i++) {
            LanguageSpecializationDTO.validateJsonElement(jsonArrayspecialization.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManyValuesPerTypeDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManyValuesPerTypeDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManyValuesPerTypeDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManyValuesPerTypeDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ManyValuesPerTypeDTO>() {
           @Override
           public void write(JsonWriter out, ManyValuesPerTypeDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManyValuesPerTypeDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManyValuesPerTypeDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManyValuesPerTypeDTO
   * @throws IOException if the JSON string is invalid with respect to ManyValuesPerTypeDTO
   */
  public static ManyValuesPerTypeDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManyValuesPerTypeDTO.class);
  }

  /**
   * Convert an instance of ManyValuesPerTypeDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

