/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.LanguageRelationDto;
import org.openapitools.client.model.ProjectFileAddedByDto;
import org.openapitools.client.model.RemoteCATToolReferencesDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectFileDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectFileDto {
  public static final String SERIALIZED_NAME_ADDED_BY = "addedBy";
  @SerializedName(SERIALIZED_NAME_ADDED_BY)
  private ProjectFileAddedByDto addedBy;

  public static final String SERIALIZED_NAME_ADDED_IN_JOB = "addedInJob";
  @SerializedName(SERIALIZED_NAME_ADDED_IN_JOB)
  private String addedInJob;

  public static final String SERIALIZED_NAME_ADDED_IN_LAST_STEP = "addedInLastStep";
  @SerializedName(SERIALIZED_NAME_ADDED_IN_LAST_STEP)
  private Boolean addedInLastStep;

  public static final String SERIALIZED_NAME_ADDED_IN_STEP = "addedInStep";
  @SerializedName(SERIALIZED_NAME_ADDED_IN_STEP)
  private Long addedInStep;

  public static final String SERIALIZED_NAME_CATEGORY_KEY = "categoryKey";
  @SerializedName(SERIALIZED_NAME_CATEGORY_KEY)
  private String categoryKey;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACCEPTED = "isAccepted";
  @SerializedName(SERIALIZED_NAME_IS_ACCEPTED)
  private Boolean isAccepted;

  public static final String SERIALIZED_NAME_IS_LINK = "isLink";
  @SerializedName(SERIALIZED_NAME_IS_LINK)
  private Boolean isLink;

  public static final String SERIALIZED_NAME_IS_REMOTE = "isRemote";
  @SerializedName(SERIALIZED_NAME_IS_REMOTE)
  private Boolean isRemote;

  public static final String SERIALIZED_NAME_LANGUAGE_RELATION = "languageRelation";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_RELATION)
  private LanguageRelationDto languageRelation;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_ON = "lastModifiedOn";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_ON)
  private Long lastModifiedOn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REMOTE_C_A_T_TOOL_REFERENCES = "remoteCATToolReferences";
  @SerializedName(SERIALIZED_NAME_REMOTE_C_A_T_TOOL_REFERENCES)
  private RemoteCATToolReferencesDto remoteCATToolReferences;

  public static final String SERIALIZED_NAME_SHARED_WITH_JOBS = "sharedWithJobs";
  @SerializedName(SERIALIZED_NAME_SHARED_WITH_JOBS)
  private Set<String> sharedWithJobs = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ProjectFileDto() {
  }

  public ProjectFileDto addedBy(ProjectFileAddedByDto addedBy) {
    this.addedBy = addedBy;
    return this;
  }

  /**
   * Get addedBy
   * @return addedBy
   */
  @javax.annotation.Nullable
  public ProjectFileAddedByDto getAddedBy() {
    return addedBy;
  }

  public void setAddedBy(ProjectFileAddedByDto addedBy) {
    this.addedBy = addedBy;
  }


  public ProjectFileDto addedInJob(String addedInJob) {
    this.addedInJob = addedInJob;
    return this;
  }

  /**
   * Get addedInJob
   * @return addedInJob
   */
  @javax.annotation.Nullable
  public String getAddedInJob() {
    return addedInJob;
  }

  public void setAddedInJob(String addedInJob) {
    this.addedInJob = addedInJob;
  }


  public ProjectFileDto addedInLastStep(Boolean addedInLastStep) {
    this.addedInLastStep = addedInLastStep;
    return this;
  }

  /**
   * Get addedInLastStep
   * @return addedInLastStep
   */
  @javax.annotation.Nullable
  public Boolean getAddedInLastStep() {
    return addedInLastStep;
  }

  public void setAddedInLastStep(Boolean addedInLastStep) {
    this.addedInLastStep = addedInLastStep;
  }


  public ProjectFileDto addedInStep(Long addedInStep) {
    this.addedInStep = addedInStep;
    return this;
  }

  /**
   * Get addedInStep
   * @return addedInStep
   */
  @javax.annotation.Nullable
  public Long getAddedInStep() {
    return addedInStep;
  }

  public void setAddedInStep(Long addedInStep) {
    this.addedInStep = addedInStep;
  }


  public ProjectFileDto categoryKey(String categoryKey) {
    this.categoryKey = categoryKey;
    return this;
  }

  /**
   * Get categoryKey
   * @return categoryKey
   */
  @javax.annotation.Nullable
  public String getCategoryKey() {
    return categoryKey;
  }

  public void setCategoryKey(String categoryKey) {
    this.categoryKey = categoryKey;
  }


  public ProjectFileDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProjectFileDto isAccepted(Boolean isAccepted) {
    this.isAccepted = isAccepted;
    return this;
  }

  /**
   * Get isAccepted
   * @return isAccepted
   */
  @javax.annotation.Nullable
  public Boolean getIsAccepted() {
    return isAccepted;
  }

  public void setIsAccepted(Boolean isAccepted) {
    this.isAccepted = isAccepted;
  }


  public ProjectFileDto isLink(Boolean isLink) {
    this.isLink = isLink;
    return this;
  }

  /**
   * Get isLink
   * @return isLink
   */
  @javax.annotation.Nullable
  public Boolean getIsLink() {
    return isLink;
  }

  public void setIsLink(Boolean isLink) {
    this.isLink = isLink;
  }


  public ProjectFileDto isRemote(Boolean isRemote) {
    this.isRemote = isRemote;
    return this;
  }

  /**
   * Get isRemote
   * @return isRemote
   */
  @javax.annotation.Nullable
  public Boolean getIsRemote() {
    return isRemote;
  }

  public void setIsRemote(Boolean isRemote) {
    this.isRemote = isRemote;
  }


  public ProjectFileDto languageRelation(LanguageRelationDto languageRelation) {
    this.languageRelation = languageRelation;
    return this;
  }

  /**
   * Get languageRelation
   * @return languageRelation
   */
  @javax.annotation.Nullable
  public LanguageRelationDto getLanguageRelation() {
    return languageRelation;
  }

  public void setLanguageRelation(LanguageRelationDto languageRelation) {
    this.languageRelation = languageRelation;
  }


  public ProjectFileDto lastModifiedOn(Long lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
    return this;
  }

  /**
   * Get lastModifiedOn
   * @return lastModifiedOn
   */
  @javax.annotation.Nullable
  public Long getLastModifiedOn() {
    return lastModifiedOn;
  }

  public void setLastModifiedOn(Long lastModifiedOn) {
    this.lastModifiedOn = lastModifiedOn;
  }


  public ProjectFileDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectFileDto remoteCATToolReferences(RemoteCATToolReferencesDto remoteCATToolReferences) {
    this.remoteCATToolReferences = remoteCATToolReferences;
    return this;
  }

  /**
   * Get remoteCATToolReferences
   * @return remoteCATToolReferences
   */
  @javax.annotation.Nullable
  public RemoteCATToolReferencesDto getRemoteCATToolReferences() {
    return remoteCATToolReferences;
  }

  public void setRemoteCATToolReferences(RemoteCATToolReferencesDto remoteCATToolReferences) {
    this.remoteCATToolReferences = remoteCATToolReferences;
  }


  public ProjectFileDto sharedWithJobs(Set<String> sharedWithJobs) {
    this.sharedWithJobs = sharedWithJobs;
    return this;
  }

  public ProjectFileDto addSharedWithJobsItem(String sharedWithJobsItem) {
    if (this.sharedWithJobs == null) {
      this.sharedWithJobs = new LinkedHashSet<>();
    }
    this.sharedWithJobs.add(sharedWithJobsItem);
    return this;
  }

  /**
   * Get sharedWithJobs
   * @return sharedWithJobs
   */
  @javax.annotation.Nullable
  public Set<String> getSharedWithJobs() {
    return sharedWithJobs;
  }

  public void setSharedWithJobs(Set<String> sharedWithJobs) {
    this.sharedWithJobs = sharedWithJobs;
  }


  public ProjectFileDto size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public ProjectFileDto url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectFileDto projectFileDto = (ProjectFileDto) o;
    return Objects.equals(this.addedBy, projectFileDto.addedBy) &&
        Objects.equals(this.addedInJob, projectFileDto.addedInJob) &&
        Objects.equals(this.addedInLastStep, projectFileDto.addedInLastStep) &&
        Objects.equals(this.addedInStep, projectFileDto.addedInStep) &&
        Objects.equals(this.categoryKey, projectFileDto.categoryKey) &&
        Objects.equals(this.id, projectFileDto.id) &&
        Objects.equals(this.isAccepted, projectFileDto.isAccepted) &&
        Objects.equals(this.isLink, projectFileDto.isLink) &&
        Objects.equals(this.isRemote, projectFileDto.isRemote) &&
        Objects.equals(this.languageRelation, projectFileDto.languageRelation) &&
        Objects.equals(this.lastModifiedOn, projectFileDto.lastModifiedOn) &&
        Objects.equals(this.name, projectFileDto.name) &&
        Objects.equals(this.remoteCATToolReferences, projectFileDto.remoteCATToolReferences) &&
        Objects.equals(this.sharedWithJobs, projectFileDto.sharedWithJobs) &&
        Objects.equals(this.size, projectFileDto.size) &&
        Objects.equals(this.url, projectFileDto.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedBy, addedInJob, addedInLastStep, addedInStep, categoryKey, id, isAccepted, isLink, isRemote, languageRelation, lastModifiedOn, name, remoteCATToolReferences, sharedWithJobs, size, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectFileDto {\n");
    sb.append("    addedBy: ").append(toIndentedString(addedBy)).append("\n");
    sb.append("    addedInJob: ").append(toIndentedString(addedInJob)).append("\n");
    sb.append("    addedInLastStep: ").append(toIndentedString(addedInLastStep)).append("\n");
    sb.append("    addedInStep: ").append(toIndentedString(addedInStep)).append("\n");
    sb.append("    categoryKey: ").append(toIndentedString(categoryKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAccepted: ").append(toIndentedString(isAccepted)).append("\n");
    sb.append("    isLink: ").append(toIndentedString(isLink)).append("\n");
    sb.append("    isRemote: ").append(toIndentedString(isRemote)).append("\n");
    sb.append("    languageRelation: ").append(toIndentedString(languageRelation)).append("\n");
    sb.append("    lastModifiedOn: ").append(toIndentedString(lastModifiedOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    remoteCATToolReferences: ").append(toIndentedString(remoteCATToolReferences)).append("\n");
    sb.append("    sharedWithJobs: ").append(toIndentedString(sharedWithJobs)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addedBy");
    openapiFields.add("addedInJob");
    openapiFields.add("addedInLastStep");
    openapiFields.add("addedInStep");
    openapiFields.add("categoryKey");
    openapiFields.add("id");
    openapiFields.add("isAccepted");
    openapiFields.add("isLink");
    openapiFields.add("isRemote");
    openapiFields.add("languageRelation");
    openapiFields.add("lastModifiedOn");
    openapiFields.add("name");
    openapiFields.add("remoteCATToolReferences");
    openapiFields.add("sharedWithJobs");
    openapiFields.add("size");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectFileDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectFileDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectFileDto is not found in the empty JSON string", ProjectFileDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectFileDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectFileDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addedBy`
      if (jsonObj.get("addedBy") != null && !jsonObj.get("addedBy").isJsonNull()) {
        ProjectFileAddedByDto.validateJsonElement(jsonObj.get("addedBy"));
      }
      if ((jsonObj.get("addedInJob") != null && !jsonObj.get("addedInJob").isJsonNull()) && !jsonObj.get("addedInJob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addedInJob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addedInJob").toString()));
      }
      if ((jsonObj.get("categoryKey") != null && !jsonObj.get("categoryKey").isJsonNull()) && !jsonObj.get("categoryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryKey").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `languageRelation`
      if (jsonObj.get("languageRelation") != null && !jsonObj.get("languageRelation").isJsonNull()) {
        LanguageRelationDto.validateJsonElement(jsonObj.get("languageRelation"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `remoteCATToolReferences`
      if (jsonObj.get("remoteCATToolReferences") != null && !jsonObj.get("remoteCATToolReferences").isJsonNull()) {
        RemoteCATToolReferencesDto.validateJsonElement(jsonObj.get("remoteCATToolReferences"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedWithJobs") != null && !jsonObj.get("sharedWithJobs").isJsonNull() && !jsonObj.get("sharedWithJobs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedWithJobs` to be an array in the JSON string but got `%s`", jsonObj.get("sharedWithJobs").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectFileDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectFileDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectFileDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectFileDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectFileDto>() {
           @Override
           public void write(JsonWriter out, ProjectFileDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectFileDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectFileDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectFileDto
   * @throws IOException if the JSON string is invalid with respect to ProjectFileDto
   */
  public static ProjectFileDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectFileDto.class);
  }

  /**
   * Convert an instance of ProjectFileDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

