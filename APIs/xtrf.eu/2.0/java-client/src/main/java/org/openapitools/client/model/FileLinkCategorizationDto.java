/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LanguageCombinationDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FileLinkCategorizationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileLinkCategorizationDto {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_EXTERNAL_INFO = "externalInfo";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_INFO)
  private Map<String, String> externalInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_LANGUAGE_COMBINATION_IDS = "languageCombinationIds";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_COMBINATION_IDS)
  private List<LanguageCombinationDto> languageCombinationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE_IDS = "languageIds";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_IDS)
  private List<Long> languageIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO_BE_GENERATED = "toBeGenerated";
  @SerializedName(SERIALIZED_NAME_TO_BE_GENERATED)
  private Boolean toBeGenerated;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public FileLinkCategorizationDto() {
  }

  public FileLinkCategorizationDto category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public FileLinkCategorizationDto externalInfo(Map<String, String> externalInfo) {
    this.externalInfo = externalInfo;
    return this;
  }

  public FileLinkCategorizationDto putExternalInfoItem(String key, String externalInfoItem) {
    if (this.externalInfo == null) {
      this.externalInfo = new HashMap<>();
    }
    this.externalInfo.put(key, externalInfoItem);
    return this;
  }

  /**
   * Get externalInfo
   * @return externalInfo
   */
  @javax.annotation.Nullable
  public Map<String, String> getExternalInfo() {
    return externalInfo;
  }

  public void setExternalInfo(Map<String, String> externalInfo) {
    this.externalInfo = externalInfo;
  }


  public FileLinkCategorizationDto filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Get filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public FileLinkCategorizationDto languageCombinationIds(List<LanguageCombinationDto> languageCombinationIds) {
    this.languageCombinationIds = languageCombinationIds;
    return this;
  }

  public FileLinkCategorizationDto addLanguageCombinationIdsItem(LanguageCombinationDto languageCombinationIdsItem) {
    if (this.languageCombinationIds == null) {
      this.languageCombinationIds = new ArrayList<>();
    }
    this.languageCombinationIds.add(languageCombinationIdsItem);
    return this;
  }

  /**
   * Get languageCombinationIds
   * @return languageCombinationIds
   */
  @javax.annotation.Nullable
  public List<LanguageCombinationDto> getLanguageCombinationIds() {
    return languageCombinationIds;
  }

  public void setLanguageCombinationIds(List<LanguageCombinationDto> languageCombinationIds) {
    this.languageCombinationIds = languageCombinationIds;
  }


  public FileLinkCategorizationDto languageIds(List<Long> languageIds) {
    this.languageIds = languageIds;
    return this;
  }

  public FileLinkCategorizationDto addLanguageIdsItem(Long languageIdsItem) {
    if (this.languageIds == null) {
      this.languageIds = new ArrayList<>();
    }
    this.languageIds.add(languageIdsItem);
    return this;
  }

  /**
   * Get languageIds
   * @return languageIds
   */
  @javax.annotation.Nullable
  public List<Long> getLanguageIds() {
    return languageIds;
  }

  public void setLanguageIds(List<Long> languageIds) {
    this.languageIds = languageIds;
  }


  public FileLinkCategorizationDto toBeGenerated(Boolean toBeGenerated) {
    this.toBeGenerated = toBeGenerated;
    return this;
  }

  /**
   * Get toBeGenerated
   * @return toBeGenerated
   */
  @javax.annotation.Nullable
  public Boolean getToBeGenerated() {
    return toBeGenerated;
  }

  public void setToBeGenerated(Boolean toBeGenerated) {
    this.toBeGenerated = toBeGenerated;
  }


  public FileLinkCategorizationDto url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileLinkCategorizationDto fileLinkCategorizationDto = (FileLinkCategorizationDto) o;
    return Objects.equals(this.category, fileLinkCategorizationDto.category) &&
        Objects.equals(this.externalInfo, fileLinkCategorizationDto.externalInfo) &&
        Objects.equals(this.filename, fileLinkCategorizationDto.filename) &&
        Objects.equals(this.languageCombinationIds, fileLinkCategorizationDto.languageCombinationIds) &&
        Objects.equals(this.languageIds, fileLinkCategorizationDto.languageIds) &&
        Objects.equals(this.toBeGenerated, fileLinkCategorizationDto.toBeGenerated) &&
        Objects.equals(this.url, fileLinkCategorizationDto.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, externalInfo, filename, languageCombinationIds, languageIds, toBeGenerated, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileLinkCategorizationDto {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    externalInfo: ").append(toIndentedString(externalInfo)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    languageCombinationIds: ").append(toIndentedString(languageCombinationIds)).append("\n");
    sb.append("    languageIds: ").append(toIndentedString(languageIds)).append("\n");
    sb.append("    toBeGenerated: ").append(toIndentedString(toBeGenerated)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("externalInfo");
    openapiFields.add("filename");
    openapiFields.add("languageCombinationIds");
    openapiFields.add("languageIds");
    openapiFields.add("toBeGenerated");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileLinkCategorizationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileLinkCategorizationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileLinkCategorizationDto is not found in the empty JSON string", FileLinkCategorizationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileLinkCategorizationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileLinkCategorizationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (jsonObj.get("languageCombinationIds") != null && !jsonObj.get("languageCombinationIds").isJsonNull()) {
        JsonArray jsonArraylanguageCombinationIds = jsonObj.getAsJsonArray("languageCombinationIds");
        if (jsonArraylanguageCombinationIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("languageCombinationIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `languageCombinationIds` to be an array in the JSON string but got `%s`", jsonObj.get("languageCombinationIds").toString()));
          }

          // validate the optional field `languageCombinationIds` (array)
          for (int i = 0; i < jsonArraylanguageCombinationIds.size(); i++) {
            LanguageCombinationDto.validateJsonElement(jsonArraylanguageCombinationIds.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languageIds") != null && !jsonObj.get("languageIds").isJsonNull() && !jsonObj.get("languageIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageIds` to be an array in the JSON string but got `%s`", jsonObj.get("languageIds").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileLinkCategorizationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileLinkCategorizationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileLinkCategorizationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileLinkCategorizationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<FileLinkCategorizationDto>() {
           @Override
           public void write(JsonWriter out, FileLinkCategorizationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileLinkCategorizationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileLinkCategorizationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileLinkCategorizationDto
   * @throws IOException if the JSON string is invalid with respect to FileLinkCategorizationDto
   */
  public static FileLinkCategorizationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileLinkCategorizationDto.class);
  }

  /**
   * Convert an instance of FileLinkCategorizationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

