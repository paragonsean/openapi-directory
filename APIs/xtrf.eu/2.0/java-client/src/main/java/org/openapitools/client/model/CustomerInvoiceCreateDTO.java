/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomerInvoiceCreateDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerInvoiceCreateDTO {
  public static final String SERIALIZED_NAME_PREPAYMENTS_IDS = "prepaymentsIds";
  @SerializedName(SERIALIZED_NAME_PREPAYMENTS_IDS)
  private List<Long> prepaymentsIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASKS_IDS = "tasksIds";
  @SerializedName(SERIALIZED_NAME_TASKS_IDS)
  private List<Long> tasksIds = new ArrayList<>();

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FINAL("FINAL"),
    
    DRAFT("DRAFT"),
    
    CREDIT_NOTE("CREDIT_NOTE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CustomerInvoiceCreateDTO() {
  }

  public CustomerInvoiceCreateDTO prepaymentsIds(List<Long> prepaymentsIds) {
    this.prepaymentsIds = prepaymentsIds;
    return this;
  }

  public CustomerInvoiceCreateDTO addPrepaymentsIdsItem(Long prepaymentsIdsItem) {
    if (this.prepaymentsIds == null) {
      this.prepaymentsIds = new ArrayList<>();
    }
    this.prepaymentsIds.add(prepaymentsIdsItem);
    return this;
  }

  /**
   * Get prepaymentsIds
   * @return prepaymentsIds
   */
  @javax.annotation.Nullable
  public List<Long> getPrepaymentsIds() {
    return prepaymentsIds;
  }

  public void setPrepaymentsIds(List<Long> prepaymentsIds) {
    this.prepaymentsIds = prepaymentsIds;
  }


  public CustomerInvoiceCreateDTO tasksIds(List<Long> tasksIds) {
    this.tasksIds = tasksIds;
    return this;
  }

  public CustomerInvoiceCreateDTO addTasksIdsItem(Long tasksIdsItem) {
    if (this.tasksIds == null) {
      this.tasksIds = new ArrayList<>();
    }
    this.tasksIds.add(tasksIdsItem);
    return this;
  }

  /**
   * Get tasksIds
   * @return tasksIds
   */
  @javax.annotation.Nullable
  public List<Long> getTasksIds() {
    return tasksIds;
  }

  public void setTasksIds(List<Long> tasksIds) {
    this.tasksIds = tasksIds;
  }


  public CustomerInvoiceCreateDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerInvoiceCreateDTO customerInvoiceCreateDTO = (CustomerInvoiceCreateDTO) o;
    return Objects.equals(this.prepaymentsIds, customerInvoiceCreateDTO.prepaymentsIds) &&
        Objects.equals(this.tasksIds, customerInvoiceCreateDTO.tasksIds) &&
        Objects.equals(this.type, customerInvoiceCreateDTO.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prepaymentsIds, tasksIds, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerInvoiceCreateDTO {\n");
    sb.append("    prepaymentsIds: ").append(toIndentedString(prepaymentsIds)).append("\n");
    sb.append("    tasksIds: ").append(toIndentedString(tasksIds)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prepaymentsIds");
    openapiFields.add("tasksIds");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerInvoiceCreateDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerInvoiceCreateDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerInvoiceCreateDTO is not found in the empty JSON string", CustomerInvoiceCreateDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerInvoiceCreateDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerInvoiceCreateDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("prepaymentsIds") != null && !jsonObj.get("prepaymentsIds").isJsonNull() && !jsonObj.get("prepaymentsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prepaymentsIds` to be an array in the JSON string but got `%s`", jsonObj.get("prepaymentsIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tasksIds") != null && !jsonObj.get("tasksIds").isJsonNull() && !jsonObj.get("tasksIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tasksIds` to be an array in the JSON string but got `%s`", jsonObj.get("tasksIds").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerInvoiceCreateDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerInvoiceCreateDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerInvoiceCreateDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerInvoiceCreateDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerInvoiceCreateDTO>() {
           @Override
           public void write(JsonWriter out, CustomerInvoiceCreateDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerInvoiceCreateDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerInvoiceCreateDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerInvoiceCreateDTO
   * @throws IOException if the JSON string is invalid with respect to CustomerInvoiceCreateDTO
   */
  public static CustomerInvoiceCreateDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerInvoiceCreateDTO.class);
  }

  /**
   * Convert an instance of CustomerInvoiceCreateDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

