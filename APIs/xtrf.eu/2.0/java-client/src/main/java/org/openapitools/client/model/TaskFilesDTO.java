/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FileDTO;
import org.openapitools.client.model.InputFilesDTO;
import org.openapitools.client.model.JobDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskFilesDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskFilesDTO {
  public static final String SERIALIZED_NAME_BUNDLES = "bundles";
  @SerializedName(SERIALIZED_NAME_BUNDLES)
  private Map<String, List<FileDTO>> bundles = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUT_FILES = "inputFiles";
  @SerializedName(SERIALIZED_NAME_INPUT_FILES)
  private InputFilesDTO inputFiles;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<JobDTO> jobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_FILES = "outputFiles";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILES)
  private List<FileDTO> outputFiles = new ArrayList<>();

  public TaskFilesDTO() {
  }

  public TaskFilesDTO bundles(Map<String, List<FileDTO>> bundles) {
    this.bundles = bundles;
    return this;
  }

  public TaskFilesDTO putBundlesItem(String key, List<FileDTO> bundlesItem) {
    if (this.bundles == null) {
      this.bundles = new HashMap<>();
    }
    this.bundles.put(key, bundlesItem);
    return this;
  }

  /**
   * Get bundles
   * @return bundles
   */
  @javax.annotation.Nullable
  public Map<String, List<FileDTO>> getBundles() {
    return bundles;
  }

  public void setBundles(Map<String, List<FileDTO>> bundles) {
    this.bundles = bundles;
  }


  public TaskFilesDTO inputFiles(InputFilesDTO inputFiles) {
    this.inputFiles = inputFiles;
    return this;
  }

  /**
   * Get inputFiles
   * @return inputFiles
   */
  @javax.annotation.Nullable
  public InputFilesDTO getInputFiles() {
    return inputFiles;
  }

  public void setInputFiles(InputFilesDTO inputFiles) {
    this.inputFiles = inputFiles;
  }


  public TaskFilesDTO jobs(List<JobDTO> jobs) {
    this.jobs = jobs;
    return this;
  }

  public TaskFilesDTO addJobsItem(JobDTO jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

  /**
   * Get jobs
   * @return jobs
   */
  @javax.annotation.Nullable
  public List<JobDTO> getJobs() {
    return jobs;
  }

  public void setJobs(List<JobDTO> jobs) {
    this.jobs = jobs;
  }


  public TaskFilesDTO outputFiles(List<FileDTO> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  public TaskFilesDTO addOutputFilesItem(FileDTO outputFilesItem) {
    if (this.outputFiles == null) {
      this.outputFiles = new ArrayList<>();
    }
    this.outputFiles.add(outputFilesItem);
    return this;
  }

  /**
   * Get outputFiles
   * @return outputFiles
   */
  @javax.annotation.Nullable
  public List<FileDTO> getOutputFiles() {
    return outputFiles;
  }

  public void setOutputFiles(List<FileDTO> outputFiles) {
    this.outputFiles = outputFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskFilesDTO taskFilesDTO = (TaskFilesDTO) o;
    return Objects.equals(this.bundles, taskFilesDTO.bundles) &&
        Objects.equals(this.inputFiles, taskFilesDTO.inputFiles) &&
        Objects.equals(this.jobs, taskFilesDTO.jobs) &&
        Objects.equals(this.outputFiles, taskFilesDTO.outputFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundles, inputFiles, jobs, outputFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskFilesDTO {\n");
    sb.append("    bundles: ").append(toIndentedString(bundles)).append("\n");
    sb.append("    inputFiles: ").append(toIndentedString(inputFiles)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    outputFiles: ").append(toIndentedString(outputFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundles");
    openapiFields.add("inputFiles");
    openapiFields.add("jobs");
    openapiFields.add("outputFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskFilesDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskFilesDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskFilesDTO is not found in the empty JSON string", TaskFilesDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskFilesDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskFilesDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `inputFiles`
      if (jsonObj.get("inputFiles") != null && !jsonObj.get("inputFiles").isJsonNull()) {
        InputFilesDTO.validateJsonElement(jsonObj.get("inputFiles"));
      }
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("jobs");
        if (jsonArrayjobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
          }

          // validate the optional field `jobs` (array)
          for (int i = 0; i < jsonArrayjobs.size(); i++) {
            JobDTO.validateJsonElement(jsonArrayjobs.get(i));
          };
        }
      }
      if (jsonObj.get("outputFiles") != null && !jsonObj.get("outputFiles").isJsonNull()) {
        JsonArray jsonArrayoutputFiles = jsonObj.getAsJsonArray("outputFiles");
        if (jsonArrayoutputFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputFiles` to be an array in the JSON string but got `%s`", jsonObj.get("outputFiles").toString()));
          }

          // validate the optional field `outputFiles` (array)
          for (int i = 0; i < jsonArrayoutputFiles.size(); i++) {
            FileDTO.validateJsonElement(jsonArrayoutputFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskFilesDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskFilesDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskFilesDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskFilesDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskFilesDTO>() {
           @Override
           public void write(JsonWriter out, TaskFilesDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskFilesDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskFilesDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskFilesDTO
   * @throws IOException if the JSON string is invalid with respect to TaskFilesDTO
   */
  public static TaskFilesDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskFilesDTO.class);
  }

  /**
   * Convert an instance of TaskFilesDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

