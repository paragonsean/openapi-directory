/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * origin of a customer (ie. recomendation from another customer)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LeadSourceDTO {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_AVAILABLE_FOR_CUSTOMER = "availableForCustomer";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_FOR_CUSTOMER)
  private Boolean availableForCustomer;

  public static final String SERIALIZED_NAME_AVAILABLE_FOR_PROVIDER = "availableForProvider";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_FOR_PROVIDER)
  private Boolean availableForProvider;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public LeadSourceDTO() {
  }

  public LeadSourceDTO active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * should this value be available on the XTRF selection lists
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public LeadSourceDTO availableForCustomer(Boolean availableForCustomer) {
    this.availableForCustomer = availableForCustomer;
    return this;
  }

  /**
   * should be available for customer
   * @return availableForCustomer
   */
  @javax.annotation.Nullable
  public Boolean getAvailableForCustomer() {
    return availableForCustomer;
  }

  public void setAvailableForCustomer(Boolean availableForCustomer) {
    this.availableForCustomer = availableForCustomer;
  }


  public LeadSourceDTO availableForProvider(Boolean availableForProvider) {
    this.availableForProvider = availableForProvider;
    return this;
  }

  /**
   * should be available for provider
   * @return availableForProvider
   */
  @javax.annotation.Nullable
  public Boolean getAvailableForProvider() {
    return availableForProvider;
  }

  public void setAvailableForProvider(Boolean availableForProvider) {
    this.availableForProvider = availableForProvider;
  }


  public LeadSourceDTO _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * should this value be set by default in XTRF selection lists
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public LeadSourceDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * internal identifier
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public LeadSourceDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * localised name (formatted in the current user&#39;s locale)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LeadSourceDTO preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * should this value be available on the top of XTRF selection lists, in the Preferred section
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeadSourceDTO leadSourceDTO = (LeadSourceDTO) o;
    return Objects.equals(this.active, leadSourceDTO.active) &&
        Objects.equals(this.availableForCustomer, leadSourceDTO.availableForCustomer) &&
        Objects.equals(this.availableForProvider, leadSourceDTO.availableForProvider) &&
        Objects.equals(this._default, leadSourceDTO._default) &&
        Objects.equals(this.id, leadSourceDTO.id) &&
        Objects.equals(this.name, leadSourceDTO.name) &&
        Objects.equals(this.preferred, leadSourceDTO.preferred);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, availableForCustomer, availableForProvider, _default, id, name, preferred);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeadSourceDTO {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    availableForCustomer: ").append(toIndentedString(availableForCustomer)).append("\n");
    sb.append("    availableForProvider: ").append(toIndentedString(availableForProvider)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("availableForCustomer");
    openapiFields.add("availableForProvider");
    openapiFields.add("default");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("preferred");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeadSourceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeadSourceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeadSourceDTO is not found in the empty JSON string", LeadSourceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeadSourceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeadSourceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeadSourceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeadSourceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeadSourceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeadSourceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<LeadSourceDTO>() {
           @Override
           public void write(JsonWriter out, LeadSourceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeadSourceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeadSourceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeadSourceDTO
   * @throws IOException if the JSON string is invalid with respect to LeadSourceDTO
   */
  public static LeadSourceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeadSourceDTO.class);
  }

  /**
   * Convert an instance of LeadSourceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

