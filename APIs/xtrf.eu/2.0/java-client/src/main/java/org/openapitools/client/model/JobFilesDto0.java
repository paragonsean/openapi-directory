/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobFilesDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobFilesDto {
  public static final String SERIALIZED_NAME_DELIVERED_IN_JOB_FILES = "deliveredInJobFiles";
  @SerializedName(SERIALIZED_NAME_DELIVERED_IN_JOB_FILES)
  private Set<String> deliveredInJobFiles = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SHARED_REFERENCE_FILES = "sharedReferenceFiles";
  @SerializedName(SERIALIZED_NAME_SHARED_REFERENCE_FILES)
  private Set<String> sharedReferenceFiles = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SHARED_WORK_FILES = "sharedWorkFiles";
  @SerializedName(SERIALIZED_NAME_SHARED_WORK_FILES)
  private Set<String> sharedWorkFiles = new LinkedHashSet<>();

  public JobFilesDto() {
  }

  public JobFilesDto deliveredInJobFiles(Set<String> deliveredInJobFiles) {
    this.deliveredInJobFiles = deliveredInJobFiles;
    return this;
  }

  public JobFilesDto addDeliveredInJobFilesItem(String deliveredInJobFilesItem) {
    if (this.deliveredInJobFiles == null) {
      this.deliveredInJobFiles = new LinkedHashSet<>();
    }
    this.deliveredInJobFiles.add(deliveredInJobFilesItem);
    return this;
  }

  /**
   * Get deliveredInJobFiles
   * @return deliveredInJobFiles
   */
  @javax.annotation.Nullable
  public Set<String> getDeliveredInJobFiles() {
    return deliveredInJobFiles;
  }

  public void setDeliveredInJobFiles(Set<String> deliveredInJobFiles) {
    this.deliveredInJobFiles = deliveredInJobFiles;
  }


  public JobFilesDto sharedReferenceFiles(Set<String> sharedReferenceFiles) {
    this.sharedReferenceFiles = sharedReferenceFiles;
    return this;
  }

  public JobFilesDto addSharedReferenceFilesItem(String sharedReferenceFilesItem) {
    if (this.sharedReferenceFiles == null) {
      this.sharedReferenceFiles = new LinkedHashSet<>();
    }
    this.sharedReferenceFiles.add(sharedReferenceFilesItem);
    return this;
  }

  /**
   * Get sharedReferenceFiles
   * @return sharedReferenceFiles
   */
  @javax.annotation.Nullable
  public Set<String> getSharedReferenceFiles() {
    return sharedReferenceFiles;
  }

  public void setSharedReferenceFiles(Set<String> sharedReferenceFiles) {
    this.sharedReferenceFiles = sharedReferenceFiles;
  }


  public JobFilesDto sharedWorkFiles(Set<String> sharedWorkFiles) {
    this.sharedWorkFiles = sharedWorkFiles;
    return this;
  }

  public JobFilesDto addSharedWorkFilesItem(String sharedWorkFilesItem) {
    if (this.sharedWorkFiles == null) {
      this.sharedWorkFiles = new LinkedHashSet<>();
    }
    this.sharedWorkFiles.add(sharedWorkFilesItem);
    return this;
  }

  /**
   * Get sharedWorkFiles
   * @return sharedWorkFiles
   */
  @javax.annotation.Nullable
  public Set<String> getSharedWorkFiles() {
    return sharedWorkFiles;
  }

  public void setSharedWorkFiles(Set<String> sharedWorkFiles) {
    this.sharedWorkFiles = sharedWorkFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobFilesDto jobFilesDto = (JobFilesDto) o;
    return Objects.equals(this.deliveredInJobFiles, jobFilesDto.deliveredInJobFiles) &&
        Objects.equals(this.sharedReferenceFiles, jobFilesDto.sharedReferenceFiles) &&
        Objects.equals(this.sharedWorkFiles, jobFilesDto.sharedWorkFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveredInJobFiles, sharedReferenceFiles, sharedWorkFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobFilesDto {\n");
    sb.append("    deliveredInJobFiles: ").append(toIndentedString(deliveredInJobFiles)).append("\n");
    sb.append("    sharedReferenceFiles: ").append(toIndentedString(sharedReferenceFiles)).append("\n");
    sb.append("    sharedWorkFiles: ").append(toIndentedString(sharedWorkFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveredInJobFiles");
    openapiFields.add("sharedReferenceFiles");
    openapiFields.add("sharedWorkFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobFilesDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobFilesDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobFilesDto is not found in the empty JSON string", JobFilesDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobFilesDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobFilesDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("deliveredInJobFiles") != null && !jsonObj.get("deliveredInJobFiles").isJsonNull() && !jsonObj.get("deliveredInJobFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveredInJobFiles` to be an array in the JSON string but got `%s`", jsonObj.get("deliveredInJobFiles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedReferenceFiles") != null && !jsonObj.get("sharedReferenceFiles").isJsonNull() && !jsonObj.get("sharedReferenceFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedReferenceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("sharedReferenceFiles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedWorkFiles") != null && !jsonObj.get("sharedWorkFiles").isJsonNull() && !jsonObj.get("sharedWorkFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedWorkFiles` to be an array in the JSON string but got `%s`", jsonObj.get("sharedWorkFiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobFilesDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobFilesDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobFilesDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobFilesDto.class));

       return (TypeAdapter<T>) new TypeAdapter<JobFilesDto>() {
           @Override
           public void write(JsonWriter out, JobFilesDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobFilesDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobFilesDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobFilesDto
   * @throws IOException if the JSON string is invalid with respect to JobFilesDto
   */
  public static JobFilesDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobFilesDto.class);
  }

  /**
   * Convert an instance of JobFilesDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

