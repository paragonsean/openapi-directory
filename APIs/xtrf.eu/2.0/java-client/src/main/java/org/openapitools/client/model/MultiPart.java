/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BodyPart;
import org.openapitools.client.model.BodyPartHeaders;
import org.openapitools.client.model.BodyPartMediaType;
import org.openapitools.client.model.BodyPartParameterizedHeaders;
import org.openapitools.client.model.ContentDisposition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MultiPart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiPart {
  public static final String SERIALIZED_NAME_BODY_PARTS = "bodyParts";
  @SerializedName(SERIALIZED_NAME_BODY_PARTS)
  private List<BodyPart> bodyParts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_DISPOSITION = "contentDisposition";
  @SerializedName(SERIALIZED_NAME_CONTENT_DISPOSITION)
  private ContentDisposition contentDisposition;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private Object entity;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private BodyPartHeaders headers;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private BodyPartMediaType mediaType;

  public static final String SERIALIZED_NAME_MESSAGE_BODY_WORKERS = "messageBodyWorkers";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BODY_WORKERS)
  private Object messageBodyWorkers;

  public static final String SERIALIZED_NAME_PARAMETERIZED_HEADERS = "parameterizedHeaders";
  @SerializedName(SERIALIZED_NAME_PARAMETERIZED_HEADERS)
  private BodyPartParameterizedHeaders parameterizedHeaders;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private MultiPart parent;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private Object providers;

  public MultiPart() {
  }

  public MultiPart bodyParts(List<BodyPart> bodyParts) {
    this.bodyParts = bodyParts;
    return this;
  }

  public MultiPart addBodyPartsItem(BodyPart bodyPartsItem) {
    if (this.bodyParts == null) {
      this.bodyParts = new ArrayList<>();
    }
    this.bodyParts.add(bodyPartsItem);
    return this;
  }

  /**
   * Get bodyParts
   * @return bodyParts
   */
  @javax.annotation.Nullable
  public List<BodyPart> getBodyParts() {
    return bodyParts;
  }

  public void setBodyParts(List<BodyPart> bodyParts) {
    this.bodyParts = bodyParts;
  }


  public MultiPart contentDisposition(ContentDisposition contentDisposition) {
    this.contentDisposition = contentDisposition;
    return this;
  }

  /**
   * Get contentDisposition
   * @return contentDisposition
   */
  @javax.annotation.Nullable
  public ContentDisposition getContentDisposition() {
    return contentDisposition;
  }

  public void setContentDisposition(ContentDisposition contentDisposition) {
    this.contentDisposition = contentDisposition;
  }


  public MultiPart entity(Object entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Get entity
   * @return entity
   */
  @javax.annotation.Nullable
  public Object getEntity() {
    return entity;
  }

  public void setEntity(Object entity) {
    this.entity = entity;
  }


  public MultiPart headers(BodyPartHeaders headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public BodyPartHeaders getHeaders() {
    return headers;
  }

  public void setHeaders(BodyPartHeaders headers) {
    this.headers = headers;
  }


  public MultiPart mediaType(BodyPartMediaType mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Get mediaType
   * @return mediaType
   */
  @javax.annotation.Nullable
  public BodyPartMediaType getMediaType() {
    return mediaType;
  }

  public void setMediaType(BodyPartMediaType mediaType) {
    this.mediaType = mediaType;
  }


  public MultiPart messageBodyWorkers(Object messageBodyWorkers) {
    this.messageBodyWorkers = messageBodyWorkers;
    return this;
  }

  /**
   * Get messageBodyWorkers
   * @return messageBodyWorkers
   */
  @javax.annotation.Nullable
  public Object getMessageBodyWorkers() {
    return messageBodyWorkers;
  }

  public void setMessageBodyWorkers(Object messageBodyWorkers) {
    this.messageBodyWorkers = messageBodyWorkers;
  }


  public MultiPart parameterizedHeaders(BodyPartParameterizedHeaders parameterizedHeaders) {
    this.parameterizedHeaders = parameterizedHeaders;
    return this;
  }

  /**
   * Get parameterizedHeaders
   * @return parameterizedHeaders
   */
  @javax.annotation.Nullable
  public BodyPartParameterizedHeaders getParameterizedHeaders() {
    return parameterizedHeaders;
  }

  public void setParameterizedHeaders(BodyPartParameterizedHeaders parameterizedHeaders) {
    this.parameterizedHeaders = parameterizedHeaders;
  }


  public MultiPart parent(MultiPart parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public MultiPart getParent() {
    return parent;
  }

  public void setParent(MultiPart parent) {
    this.parent = parent;
  }


  public MultiPart providers(Object providers) {
    this.providers = providers;
    return this;
  }

  /**
   * Get providers
   * @return providers
   */
  @javax.annotation.Nullable
  public Object getProviders() {
    return providers;
  }

  public void setProviders(Object providers) {
    this.providers = providers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiPart multiPart = (MultiPart) o;
    return Objects.equals(this.bodyParts, multiPart.bodyParts) &&
        Objects.equals(this.contentDisposition, multiPart.contentDisposition) &&
        Objects.equals(this.entity, multiPart.entity) &&
        Objects.equals(this.headers, multiPart.headers) &&
        Objects.equals(this.mediaType, multiPart.mediaType) &&
        Objects.equals(this.messageBodyWorkers, multiPart.messageBodyWorkers) &&
        Objects.equals(this.parameterizedHeaders, multiPart.parameterizedHeaders) &&
        Objects.equals(this.parent, multiPart.parent) &&
        Objects.equals(this.providers, multiPart.providers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyParts, contentDisposition, entity, headers, mediaType, messageBodyWorkers, parameterizedHeaders, parent, providers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiPart {\n");
    sb.append("    bodyParts: ").append(toIndentedString(bodyParts)).append("\n");
    sb.append("    contentDisposition: ").append(toIndentedString(contentDisposition)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    messageBodyWorkers: ").append(toIndentedString(messageBodyWorkers)).append("\n");
    sb.append("    parameterizedHeaders: ").append(toIndentedString(parameterizedHeaders)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bodyParts");
    openapiFields.add("contentDisposition");
    openapiFields.add("entity");
    openapiFields.add("headers");
    openapiFields.add("mediaType");
    openapiFields.add("messageBodyWorkers");
    openapiFields.add("parameterizedHeaders");
    openapiFields.add("parent");
    openapiFields.add("providers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiPart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiPart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiPart is not found in the empty JSON string", MultiPart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiPart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiPart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bodyParts") != null && !jsonObj.get("bodyParts").isJsonNull()) {
        JsonArray jsonArraybodyParts = jsonObj.getAsJsonArray("bodyParts");
        if (jsonArraybodyParts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bodyParts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bodyParts` to be an array in the JSON string but got `%s`", jsonObj.get("bodyParts").toString()));
          }

          // validate the optional field `bodyParts` (array)
          for (int i = 0; i < jsonArraybodyParts.size(); i++) {
            BodyPart.validateJsonElement(jsonArraybodyParts.get(i));
          };
        }
      }
      // validate the optional field `contentDisposition`
      if (jsonObj.get("contentDisposition") != null && !jsonObj.get("contentDisposition").isJsonNull()) {
        ContentDisposition.validateJsonElement(jsonObj.get("contentDisposition"));
      }
      // validate the optional field `mediaType`
      if (jsonObj.get("mediaType") != null && !jsonObj.get("mediaType").isJsonNull()) {
        BodyPartMediaType.validateJsonElement(jsonObj.get("mediaType"));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        MultiPart.validateJsonElement(jsonObj.get("parent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiPart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiPart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiPart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiPart.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiPart>() {
           @Override
           public void write(JsonWriter out, MultiPart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiPart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiPart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiPart
   * @throws IOException if the JSON string is invalid with respect to MultiPart
   */
  public static MultiPart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiPart.class);
  }

  /**
   * Convert an instance of MultiPart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

