/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddressDTO;
import org.openapitools.client.model.CompetenciesDTO;
import org.openapitools.client.model.ContactDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.ProviderPersonDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProviderDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderDTO {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private AddressDTO billingAddress;

  public static final String SERIALIZED_NAME_BRANCH_ID = "branchId";
  @SerializedName(SERIALIZED_NAME_BRANCH_ID)
  private Long branchId;

  public static final String SERIALIZED_NAME_COMPETENCIES = "competencies";
  @SerializedName(SERIALIZED_NAME_COMPETENCIES)
  private CompetenciesDTO competencies;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private ContactDTO contact;

  public static final String SERIALIZED_NAME_CORRESPONDENCE_ADDRESS = "correspondenceAddress";
  @SerializedName(SERIALIZED_NAME_CORRESPONDENCE_ADDRESS)
  private AddressDTO correspondenceAddress;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFieldDTO> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public static final String SERIALIZED_NAME_LEAD_SOURCE_ID = "leadSourceId";
  @SerializedName(SERIALIZED_NAME_LEAD_SOURCE_ID)
  private Long leadSourceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PERSONS = "persons";
  @SerializedName(SERIALIZED_NAME_PERSONS)
  private List<ProviderPersonDTO> persons = new ArrayList<>();

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    WAITING_FOR_APPROVAL("WAITING_FOR_APPROVAL"),
    
    REJECTED("REJECTED"),
    
    TOO_EXPENSIVE("TOO_EXPENSIVE"),
    
    INCOMPLETE_DATA("INCOMPLETE_DATA"),
    
    POTENTIAL("POTENTIAL"),
    
    NOT_CONFIRMED("NOT_CONFIRMED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public ProviderDTO() {
  }

  public ProviderDTO billingAddress(AddressDTO billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public AddressDTO getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(AddressDTO billingAddress) {
    this.billingAddress = billingAddress;
  }


  public ProviderDTO branchId(Long branchId) {
    this.branchId = branchId;
    return this;
  }

  /**
   * Get branchId
   * @return branchId
   */
  @javax.annotation.Nullable
  public Long getBranchId() {
    return branchId;
  }

  public void setBranchId(Long branchId) {
    this.branchId = branchId;
  }


  public ProviderDTO competencies(CompetenciesDTO competencies) {
    this.competencies = competencies;
    return this;
  }

  /**
   * Get competencies
   * @return competencies
   */
  @javax.annotation.Nullable
  public CompetenciesDTO getCompetencies() {
    return competencies;
  }

  public void setCompetencies(CompetenciesDTO competencies) {
    this.competencies = competencies;
  }


  public ProviderDTO contact(ContactDTO contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public ContactDTO getContact() {
    return contact;
  }

  public void setContact(ContactDTO contact) {
    this.contact = contact;
  }


  public ProviderDTO correspondenceAddress(AddressDTO correspondenceAddress) {
    this.correspondenceAddress = correspondenceAddress;
    return this;
  }

  /**
   * Get correspondenceAddress
   * @return correspondenceAddress
   */
  @javax.annotation.Nullable
  public AddressDTO getCorrespondenceAddress() {
    return correspondenceAddress;
  }

  public void setCorrespondenceAddress(AddressDTO correspondenceAddress) {
    this.correspondenceAddress = correspondenceAddress;
  }


  public ProviderDTO customFields(List<CustomFieldDTO> customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<CustomFieldDTO> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomFieldDTO> customFields) {
    this.customFields = customFields;
  }


  public ProviderDTO fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public ProviderDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ProviderDTO idNumber(String idNumber) {
    this.idNumber = idNumber;
    return this;
  }

  /**
   * Get idNumber
   * @return idNumber
   */
  @javax.annotation.Nullable
  public String getIdNumber() {
    return idNumber;
  }

  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }


  public ProviderDTO leadSourceId(Long leadSourceId) {
    this.leadSourceId = leadSourceId;
    return this;
  }

  /**
   * Get leadSourceId
   * @return leadSourceId
   */
  @javax.annotation.Nullable
  public Long getLeadSourceId() {
    return leadSourceId;
  }

  public void setLeadSourceId(Long leadSourceId) {
    this.leadSourceId = leadSourceId;
  }


  public ProviderDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProviderDTO notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public ProviderDTO persons(List<ProviderPersonDTO> persons) {
    this.persons = persons;
    return this;
  }

  public ProviderDTO addPersonsItem(ProviderPersonDTO personsItem) {
    if (this.persons == null) {
      this.persons = new ArrayList<>();
    }
    this.persons.add(personsItem);
    return this;
  }

  /**
   * Get persons
   * @return persons
   */
  @javax.annotation.Nullable
  public List<ProviderPersonDTO> getPersons() {
    return persons;
  }

  public void setPersons(List<ProviderPersonDTO> persons) {
    this.persons = persons;
  }


  public ProviderDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderDTO providerDTO = (ProviderDTO) o;
    return Objects.equals(this.billingAddress, providerDTO.billingAddress) &&
        Objects.equals(this.branchId, providerDTO.branchId) &&
        Objects.equals(this.competencies, providerDTO.competencies) &&
        Objects.equals(this.contact, providerDTO.contact) &&
        Objects.equals(this.correspondenceAddress, providerDTO.correspondenceAddress) &&
        Objects.equals(this.customFields, providerDTO.customFields) &&
        Objects.equals(this.fullName, providerDTO.fullName) &&
        Objects.equals(this.id, providerDTO.id) &&
        Objects.equals(this.idNumber, providerDTO.idNumber) &&
        Objects.equals(this.leadSourceId, providerDTO.leadSourceId) &&
        Objects.equals(this.name, providerDTO.name) &&
        Objects.equals(this.notes, providerDTO.notes) &&
        Objects.equals(this.persons, providerDTO.persons) &&
        Objects.equals(this.status, providerDTO.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, branchId, competencies, contact, correspondenceAddress, customFields, fullName, id, idNumber, leadSourceId, name, notes, persons, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderDTO {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    competencies: ").append(toIndentedString(competencies)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    correspondenceAddress: ").append(toIndentedString(correspondenceAddress)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    leadSourceId: ").append(toIndentedString(leadSourceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    persons: ").append(toIndentedString(persons)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAddress");
    openapiFields.add("branchId");
    openapiFields.add("competencies");
    openapiFields.add("contact");
    openapiFields.add("correspondenceAddress");
    openapiFields.add("customFields");
    openapiFields.add("fullName");
    openapiFields.add("id");
    openapiFields.add("idNumber");
    openapiFields.add("leadSourceId");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("persons");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderDTO is not found in the empty JSON string", ProviderDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        AddressDTO.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // validate the optional field `competencies`
      if (jsonObj.get("competencies") != null && !jsonObj.get("competencies").isJsonNull()) {
        CompetenciesDTO.validateJsonElement(jsonObj.get("competencies"));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        ContactDTO.validateJsonElement(jsonObj.get("contact"));
      }
      // validate the optional field `correspondenceAddress`
      if (jsonObj.get("correspondenceAddress") != null && !jsonObj.get("correspondenceAddress").isJsonNull()) {
        AddressDTO.validateJsonElement(jsonObj.get("correspondenceAddress"));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("persons") != null && !jsonObj.get("persons").isJsonNull()) {
        JsonArray jsonArraypersons = jsonObj.getAsJsonArray("persons");
        if (jsonArraypersons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("persons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `persons` to be an array in the JSON string but got `%s`", jsonObj.get("persons").toString()));
          }

          // validate the optional field `persons` (array)
          for (int i = 0; i < jsonArraypersons.size(); i++) {
            ProviderPersonDTO.validateJsonElement(jsonArraypersons.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderDTO>() {
           @Override
           public void write(JsonWriter out, ProviderDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderDTO
   * @throws IOException if the JSON string is invalid with respect to ProviderDTO
   */
  public static ProviderDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderDTO.class);
  }

  /**
   * Convert an instance of ProviderDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

