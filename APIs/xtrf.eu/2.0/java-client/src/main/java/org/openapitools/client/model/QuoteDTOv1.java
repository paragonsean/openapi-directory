/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.FinanceDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.QuoteDatesDTO;
import org.openapitools.client.model.TaskDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuoteDTOv1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuoteDTOv1 {
  public static final String SERIALIZED_NAME_AUTOMATICALLY_ACCEPT_SENT_QUOTE = "automaticallyAcceptSentQuote";
  @SerializedName(SERIALIZED_NAME_AUTOMATICALLY_ACCEPT_SENT_QUOTE)
  private Boolean automaticallyAcceptSentQuote;

  public static final String SERIALIZED_NAME_CATEGORIES_IDS = "categoriesIds";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_IDS)
  private Set<Long> categoriesIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CONTACT_PERSON_ID = "contactPersonId";
  @SerializedName(SERIALIZED_NAME_CONTACT_PERSON_ID)
  private Long contactPersonId;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFieldDTO> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private QuoteDatesDTO dates;

  public static final String SERIALIZED_NAME_FINANCE = "finance";
  @SerializedName(SERIALIZED_NAME_FINANCE)
  private FinanceDTO finance;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private InstructionsDTO instructions;

  public static final String SERIALIZED_NAME_IS_CLASSIC_QUOTE = "isClassicQuote";
  @SerializedName(SERIALIZED_NAME_IS_CLASSIC_QUOTE)
  private Boolean isClassicQuote;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private String quoteId;

  public static final String SERIALIZED_NAME_SALES_PERSON_ID = "salesPersonId";
  @SerializedName(SERIALIZED_NAME_SALES_PERSON_ID)
  private Long salesPersonId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<TaskDTO> tasks = new ArrayList<>();

  public QuoteDTOv1() {
  }

  public QuoteDTOv1 automaticallyAcceptSentQuote(Boolean automaticallyAcceptSentQuote) {
    this.automaticallyAcceptSentQuote = automaticallyAcceptSentQuote;
    return this;
  }

  /**
   * Get automaticallyAcceptSentQuote
   * @return automaticallyAcceptSentQuote
   */
  @javax.annotation.Nullable
  public Boolean getAutomaticallyAcceptSentQuote() {
    return automaticallyAcceptSentQuote;
  }

  public void setAutomaticallyAcceptSentQuote(Boolean automaticallyAcceptSentQuote) {
    this.automaticallyAcceptSentQuote = automaticallyAcceptSentQuote;
  }


  public QuoteDTOv1 categoriesIds(Set<Long> categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  public QuoteDTOv1 addCategoriesIdsItem(Long categoriesIdsItem) {
    if (this.categoriesIds == null) {
      this.categoriesIds = new LinkedHashSet<>();
    }
    this.categoriesIds.add(categoriesIdsItem);
    return this;
  }

  /**
   * Get categoriesIds
   * @return categoriesIds
   */
  @javax.annotation.Nullable
  public Set<Long> getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(Set<Long> categoriesIds) {
    this.categoriesIds = categoriesIds;
  }


  public QuoteDTOv1 contactPersonId(Long contactPersonId) {
    this.contactPersonId = contactPersonId;
    return this;
  }

  /**
   * Get contactPersonId
   * @return contactPersonId
   */
  @javax.annotation.Nullable
  public Long getContactPersonId() {
    return contactPersonId;
  }

  public void setContactPersonId(Long contactPersonId) {
    this.contactPersonId = contactPersonId;
  }


  public QuoteDTOv1 customFields(List<CustomFieldDTO> customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<CustomFieldDTO> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomFieldDTO> customFields) {
    this.customFields = customFields;
  }


  public QuoteDTOv1 customerId(Long customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public Long getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public QuoteDTOv1 dates(QuoteDatesDTO dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public QuoteDatesDTO getDates() {
    return dates;
  }

  public void setDates(QuoteDatesDTO dates) {
    this.dates = dates;
  }


  public QuoteDTOv1 finance(FinanceDTO finance) {
    this.finance = finance;
    return this;
  }

  /**
   * Get finance
   * @return finance
   */
  @javax.annotation.Nullable
  public FinanceDTO getFinance() {
    return finance;
  }

  public void setFinance(FinanceDTO finance) {
    this.finance = finance;
  }


  public QuoteDTOv1 id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public QuoteDTOv1 idNumber(String idNumber) {
    this.idNumber = idNumber;
    return this;
  }

  /**
   * Get idNumber
   * @return idNumber
   */
  @javax.annotation.Nullable
  public String getIdNumber() {
    return idNumber;
  }

  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }


  public QuoteDTOv1 instructions(InstructionsDTO instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * Get instructions
   * @return instructions
   */
  @javax.annotation.Nullable
  public InstructionsDTO getInstructions() {
    return instructions;
  }

  public void setInstructions(InstructionsDTO instructions) {
    this.instructions = instructions;
  }


  public QuoteDTOv1 isClassicQuote(Boolean isClassicQuote) {
    this.isClassicQuote = isClassicQuote;
    return this;
  }

  /**
   * Get isClassicQuote
   * @return isClassicQuote
   */
  @javax.annotation.Nullable
  public Boolean getIsClassicQuote() {
    return isClassicQuote;
  }

  public void setIsClassicQuote(Boolean isClassicQuote) {
    this.isClassicQuote = isClassicQuote;
  }


  public QuoteDTOv1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public QuoteDTOv1 quoteId(String quoteId) {
    this.quoteId = quoteId;
    return this;
  }

  /**
   * Get quoteId
   * @return quoteId
   */
  @javax.annotation.Nullable
  public String getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(String quoteId) {
    this.quoteId = quoteId;
  }


  public QuoteDTOv1 salesPersonId(Long salesPersonId) {
    this.salesPersonId = salesPersonId;
    return this;
  }

  /**
   * Get salesPersonId
   * @return salesPersonId
   */
  @javax.annotation.Nullable
  public Long getSalesPersonId() {
    return salesPersonId;
  }

  public void setSalesPersonId(Long salesPersonId) {
    this.salesPersonId = salesPersonId;
  }


  public QuoteDTOv1 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public QuoteDTOv1 tasks(List<TaskDTO> tasks) {
    this.tasks = tasks;
    return this;
  }

  public QuoteDTOv1 addTasksItem(TaskDTO tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nullable
  public List<TaskDTO> getTasks() {
    return tasks;
  }

  public void setTasks(List<TaskDTO> tasks) {
    this.tasks = tasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteDTOv1 quoteDTOv1 = (QuoteDTOv1) o;
    return Objects.equals(this.automaticallyAcceptSentQuote, quoteDTOv1.automaticallyAcceptSentQuote) &&
        Objects.equals(this.categoriesIds, quoteDTOv1.categoriesIds) &&
        Objects.equals(this.contactPersonId, quoteDTOv1.contactPersonId) &&
        Objects.equals(this.customFields, quoteDTOv1.customFields) &&
        Objects.equals(this.customerId, quoteDTOv1.customerId) &&
        Objects.equals(this.dates, quoteDTOv1.dates) &&
        Objects.equals(this.finance, quoteDTOv1.finance) &&
        Objects.equals(this.id, quoteDTOv1.id) &&
        Objects.equals(this.idNumber, quoteDTOv1.idNumber) &&
        Objects.equals(this.instructions, quoteDTOv1.instructions) &&
        Objects.equals(this.isClassicQuote, quoteDTOv1.isClassicQuote) &&
        Objects.equals(this.name, quoteDTOv1.name) &&
        Objects.equals(this.quoteId, quoteDTOv1.quoteId) &&
        Objects.equals(this.salesPersonId, quoteDTOv1.salesPersonId) &&
        Objects.equals(this.status, quoteDTOv1.status) &&
        Objects.equals(this.tasks, quoteDTOv1.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticallyAcceptSentQuote, categoriesIds, contactPersonId, customFields, customerId, dates, finance, id, idNumber, instructions, isClassicQuote, name, quoteId, salesPersonId, status, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteDTOv1 {\n");
    sb.append("    automaticallyAcceptSentQuote: ").append(toIndentedString(automaticallyAcceptSentQuote)).append("\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    contactPersonId: ").append(toIndentedString(contactPersonId)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    finance: ").append(toIndentedString(finance)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    isClassicQuote: ").append(toIndentedString(isClassicQuote)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    salesPersonId: ").append(toIndentedString(salesPersonId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automaticallyAcceptSentQuote");
    openapiFields.add("categoriesIds");
    openapiFields.add("contactPersonId");
    openapiFields.add("customFields");
    openapiFields.add("customerId");
    openapiFields.add("dates");
    openapiFields.add("finance");
    openapiFields.add("id");
    openapiFields.add("idNumber");
    openapiFields.add("instructions");
    openapiFields.add("isClassicQuote");
    openapiFields.add("name");
    openapiFields.add("quoteId");
    openapiFields.add("salesPersonId");
    openapiFields.add("status");
    openapiFields.add("tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuoteDTOv1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteDTOv1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteDTOv1 is not found in the empty JSON string", QuoteDTOv1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteDTOv1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteDTOv1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoriesIds") != null && !jsonObj.get("categoriesIds").isJsonNull() && !jsonObj.get("categoriesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoriesIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoriesIds").toString()));
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        QuoteDatesDTO.validateJsonElement(jsonObj.get("dates"));
      }
      // validate the optional field `finance`
      if (jsonObj.get("finance") != null && !jsonObj.get("finance").isJsonNull()) {
        FinanceDTO.validateJsonElement(jsonObj.get("finance"));
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
      // validate the optional field `instructions`
      if (jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) {
        InstructionsDTO.validateJsonElement(jsonObj.get("instructions"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("quoteId") != null && !jsonObj.get("quoteId").isJsonNull()) && !jsonObj.get("quoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            TaskDTO.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteDTOv1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteDTOv1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteDTOv1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteDTOv1.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteDTOv1>() {
           @Override
           public void write(JsonWriter out, QuoteDTOv1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteDTOv1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuoteDTOv1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuoteDTOv1
   * @throws IOException if the JSON string is invalid with respect to QuoteDTOv1
   */
  public static QuoteDTOv1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteDTOv1.class);
  }

  /**
   * Convert an instance of QuoteDTOv1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

