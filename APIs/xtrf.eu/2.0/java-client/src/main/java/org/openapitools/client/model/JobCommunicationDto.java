/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobCommunicationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobCommunicationDto {
  public static final String SERIALIZED_NAME_INSTRUCTIONS_FOR_ALL_JOBS = "instructionsForAllJobs";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS_FOR_ALL_JOBS)
  private String instructionsForAllJobs;

  public static final String SERIALIZED_NAME_INSTRUCTIONS_FOR_JOB = "instructionsForJob";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS_FOR_JOB)
  private String instructionsForJob;

  public static final String SERIALIZED_NAME_NOTE_FROM_VENDOR = "noteFromVendor";
  @SerializedName(SERIALIZED_NAME_NOTE_FROM_VENDOR)
  private String noteFromVendor;

  public JobCommunicationDto() {
  }

  public JobCommunicationDto instructionsForAllJobs(String instructionsForAllJobs) {
    this.instructionsForAllJobs = instructionsForAllJobs;
    return this;
  }

  /**
   * Get instructionsForAllJobs
   * @return instructionsForAllJobs
   */
  @javax.annotation.Nullable
  public String getInstructionsForAllJobs() {
    return instructionsForAllJobs;
  }

  public void setInstructionsForAllJobs(String instructionsForAllJobs) {
    this.instructionsForAllJobs = instructionsForAllJobs;
  }


  public JobCommunicationDto instructionsForJob(String instructionsForJob) {
    this.instructionsForJob = instructionsForJob;
    return this;
  }

  /**
   * Get instructionsForJob
   * @return instructionsForJob
   */
  @javax.annotation.Nullable
  public String getInstructionsForJob() {
    return instructionsForJob;
  }

  public void setInstructionsForJob(String instructionsForJob) {
    this.instructionsForJob = instructionsForJob;
  }


  public JobCommunicationDto noteFromVendor(String noteFromVendor) {
    this.noteFromVendor = noteFromVendor;
    return this;
  }

  /**
   * Get noteFromVendor
   * @return noteFromVendor
   */
  @javax.annotation.Nullable
  public String getNoteFromVendor() {
    return noteFromVendor;
  }

  public void setNoteFromVendor(String noteFromVendor) {
    this.noteFromVendor = noteFromVendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobCommunicationDto jobCommunicationDto = (JobCommunicationDto) o;
    return Objects.equals(this.instructionsForAllJobs, jobCommunicationDto.instructionsForAllJobs) &&
        Objects.equals(this.instructionsForJob, jobCommunicationDto.instructionsForJob) &&
        Objects.equals(this.noteFromVendor, jobCommunicationDto.noteFromVendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instructionsForAllJobs, instructionsForJob, noteFromVendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobCommunicationDto {\n");
    sb.append("    instructionsForAllJobs: ").append(toIndentedString(instructionsForAllJobs)).append("\n");
    sb.append("    instructionsForJob: ").append(toIndentedString(instructionsForJob)).append("\n");
    sb.append("    noteFromVendor: ").append(toIndentedString(noteFromVendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instructionsForAllJobs");
    openapiFields.add("instructionsForJob");
    openapiFields.add("noteFromVendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobCommunicationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobCommunicationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobCommunicationDto is not found in the empty JSON string", JobCommunicationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobCommunicationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobCommunicationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instructionsForAllJobs") != null && !jsonObj.get("instructionsForAllJobs").isJsonNull()) && !jsonObj.get("instructionsForAllJobs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionsForAllJobs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionsForAllJobs").toString()));
      }
      if ((jsonObj.get("instructionsForJob") != null && !jsonObj.get("instructionsForJob").isJsonNull()) && !jsonObj.get("instructionsForJob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionsForJob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionsForJob").toString()));
      }
      if ((jsonObj.get("noteFromVendor") != null && !jsonObj.get("noteFromVendor").isJsonNull()) && !jsonObj.get("noteFromVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noteFromVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noteFromVendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobCommunicationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobCommunicationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobCommunicationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobCommunicationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<JobCommunicationDto>() {
           @Override
           public void write(JsonWriter out, JobCommunicationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobCommunicationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobCommunicationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobCommunicationDto
   * @throws IOException if the JSON string is invalid with respect to JobCommunicationDto
   */
  public static JobCommunicationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobCommunicationDto.class);
  }

  /**
   * Convert an instance of JobCommunicationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

