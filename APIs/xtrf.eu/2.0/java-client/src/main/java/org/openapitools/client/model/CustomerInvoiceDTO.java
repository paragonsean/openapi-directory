/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomerDetailsDTO;
import org.openapitools.client.model.CustomerInvoiceDatesDTO;
import org.openapitools.client.model.PaymentTermsDTO;
import org.openapitools.client.model.TaskDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomerInvoiceDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerInvoiceDTO {
  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private Long currencyId;

  public static final String SERIALIZED_NAME_CUSTOMER_DETAILS = "customerDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DETAILS)
  private CustomerDetailsDTO customerDetails;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private CustomerInvoiceDatesDTO dates;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ID = "paymentMethodId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ID)
  private Long paymentMethodId;

  public static final String SERIALIZED_NAME_PAYMENT_TERMS = "paymentTerms";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERMS)
  private PaymentTermsDTO paymentTerms;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_READY("NOT_READY"),
    
    READY("READY"),
    
    SENT("SENT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<TaskDTO> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASKS_VALUE = "tasksValue";
  @SerializedName(SERIALIZED_NAME_TASKS_VALUE)
  private BigDecimal tasksValue;

  public static final String SERIALIZED_NAME_TOTAL_GROSS = "totalGross";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS)
  private BigDecimal totalGross;

  public static final String SERIALIZED_NAME_TOTAL_IN_WORDS = "totalInWords";
  @SerializedName(SERIALIZED_NAME_TOTAL_IN_WORDS)
  private String totalInWords;

  public static final String SERIALIZED_NAME_TOTAL_NETTO = "totalNetto";
  @SerializedName(SERIALIZED_NAME_TOTAL_NETTO)
  private BigDecimal totalNetto;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FINAL("FINAL"),
    
    DRAFT("DRAFT"),
    
    CREDIT_NOTE("CREDIT_NOTE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets vatCalculationRule
   */
  @JsonAdapter(VatCalculationRuleEnum.Adapter.class)
  public enum VatCalculationRuleEnum {
    SUM_ITEMS("SUM_ITEMS"),
    
    BY_NET_TOTAL("BY_NET_TOTAL");

    private String value;

    VatCalculationRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VatCalculationRuleEnum fromValue(String value) {
      for (VatCalculationRuleEnum b : VatCalculationRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VatCalculationRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VatCalculationRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VatCalculationRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VatCalculationRuleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VatCalculationRuleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VAT_CALCULATION_RULE = "vatCalculationRule";
  @SerializedName(SERIALIZED_NAME_VAT_CALCULATION_RULE)
  private VatCalculationRuleEnum vatCalculationRule;

  public CustomerInvoiceDTO() {
  }

  public CustomerInvoiceDTO currencyId(Long currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public Long getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Long currencyId) {
    this.currencyId = currencyId;
  }


  public CustomerInvoiceDTO customerDetails(CustomerDetailsDTO customerDetails) {
    this.customerDetails = customerDetails;
    return this;
  }

  /**
   * Get customerDetails
   * @return customerDetails
   */
  @javax.annotation.Nullable
  public CustomerDetailsDTO getCustomerDetails() {
    return customerDetails;
  }

  public void setCustomerDetails(CustomerDetailsDTO customerDetails) {
    this.customerDetails = customerDetails;
  }


  public CustomerInvoiceDTO customerId(Long customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public Long getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public CustomerInvoiceDTO dates(CustomerInvoiceDatesDTO dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public CustomerInvoiceDatesDTO getDates() {
    return dates;
  }

  public void setDates(CustomerInvoiceDatesDTO dates) {
    this.dates = dates;
  }


  public CustomerInvoiceDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CustomerInvoiceDTO invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Get invoiceNumber
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public CustomerInvoiceDTO paymentMethodId(Long paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
    return this;
  }

  /**
   * Get paymentMethodId
   * @return paymentMethodId
   */
  @javax.annotation.Nullable
  public Long getPaymentMethodId() {
    return paymentMethodId;
  }

  public void setPaymentMethodId(Long paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
  }


  public CustomerInvoiceDTO paymentTerms(PaymentTermsDTO paymentTerms) {
    this.paymentTerms = paymentTerms;
    return this;
  }

  /**
   * Get paymentTerms
   * @return paymentTerms
   */
  @javax.annotation.Nullable
  public PaymentTermsDTO getPaymentTerms() {
    return paymentTerms;
  }

  public void setPaymentTerms(PaymentTermsDTO paymentTerms) {
    this.paymentTerms = paymentTerms;
  }


  public CustomerInvoiceDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CustomerInvoiceDTO tasks(List<TaskDTO> tasks) {
    this.tasks = tasks;
    return this;
  }

  public CustomerInvoiceDTO addTasksItem(TaskDTO tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nullable
  public List<TaskDTO> getTasks() {
    return tasks;
  }

  public void setTasks(List<TaskDTO> tasks) {
    this.tasks = tasks;
  }


  public CustomerInvoiceDTO tasksValue(BigDecimal tasksValue) {
    this.tasksValue = tasksValue;
    return this;
  }

  /**
   * Get tasksValue
   * @return tasksValue
   */
  @javax.annotation.Nullable
  public BigDecimal getTasksValue() {
    return tasksValue;
  }

  public void setTasksValue(BigDecimal tasksValue) {
    this.tasksValue = tasksValue;
  }


  public CustomerInvoiceDTO totalGross(BigDecimal totalGross) {
    this.totalGross = totalGross;
    return this;
  }

  /**
   * Get totalGross
   * @return totalGross
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalGross() {
    return totalGross;
  }

  public void setTotalGross(BigDecimal totalGross) {
    this.totalGross = totalGross;
  }


  public CustomerInvoiceDTO totalInWords(String totalInWords) {
    this.totalInWords = totalInWords;
    return this;
  }

  /**
   * Get totalInWords
   * @return totalInWords
   */
  @javax.annotation.Nullable
  public String getTotalInWords() {
    return totalInWords;
  }

  public void setTotalInWords(String totalInWords) {
    this.totalInWords = totalInWords;
  }


  public CustomerInvoiceDTO totalNetto(BigDecimal totalNetto) {
    this.totalNetto = totalNetto;
    return this;
  }

  /**
   * Get totalNetto
   * @return totalNetto
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalNetto() {
    return totalNetto;
  }

  public void setTotalNetto(BigDecimal totalNetto) {
    this.totalNetto = totalNetto;
  }


  public CustomerInvoiceDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CustomerInvoiceDTO vatCalculationRule(VatCalculationRuleEnum vatCalculationRule) {
    this.vatCalculationRule = vatCalculationRule;
    return this;
  }

  /**
   * Get vatCalculationRule
   * @return vatCalculationRule
   */
  @javax.annotation.Nullable
  public VatCalculationRuleEnum getVatCalculationRule() {
    return vatCalculationRule;
  }

  public void setVatCalculationRule(VatCalculationRuleEnum vatCalculationRule) {
    this.vatCalculationRule = vatCalculationRule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerInvoiceDTO customerInvoiceDTO = (CustomerInvoiceDTO) o;
    return Objects.equals(this.currencyId, customerInvoiceDTO.currencyId) &&
        Objects.equals(this.customerDetails, customerInvoiceDTO.customerDetails) &&
        Objects.equals(this.customerId, customerInvoiceDTO.customerId) &&
        Objects.equals(this.dates, customerInvoiceDTO.dates) &&
        Objects.equals(this.id, customerInvoiceDTO.id) &&
        Objects.equals(this.invoiceNumber, customerInvoiceDTO.invoiceNumber) &&
        Objects.equals(this.paymentMethodId, customerInvoiceDTO.paymentMethodId) &&
        Objects.equals(this.paymentTerms, customerInvoiceDTO.paymentTerms) &&
        Objects.equals(this.status, customerInvoiceDTO.status) &&
        Objects.equals(this.tasks, customerInvoiceDTO.tasks) &&
        Objects.equals(this.tasksValue, customerInvoiceDTO.tasksValue) &&
        Objects.equals(this.totalGross, customerInvoiceDTO.totalGross) &&
        Objects.equals(this.totalInWords, customerInvoiceDTO.totalInWords) &&
        Objects.equals(this.totalNetto, customerInvoiceDTO.totalNetto) &&
        Objects.equals(this.type, customerInvoiceDTO.type) &&
        Objects.equals(this.vatCalculationRule, customerInvoiceDTO.vatCalculationRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyId, customerDetails, customerId, dates, id, invoiceNumber, paymentMethodId, paymentTerms, status, tasks, tasksValue, totalGross, totalInWords, totalNetto, type, vatCalculationRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerInvoiceDTO {\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    customerDetails: ").append(toIndentedString(customerDetails)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    paymentTerms: ").append(toIndentedString(paymentTerms)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    tasksValue: ").append(toIndentedString(tasksValue)).append("\n");
    sb.append("    totalGross: ").append(toIndentedString(totalGross)).append("\n");
    sb.append("    totalInWords: ").append(toIndentedString(totalInWords)).append("\n");
    sb.append("    totalNetto: ").append(toIndentedString(totalNetto)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vatCalculationRule: ").append(toIndentedString(vatCalculationRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyId");
    openapiFields.add("customerDetails");
    openapiFields.add("customerId");
    openapiFields.add("dates");
    openapiFields.add("id");
    openapiFields.add("invoiceNumber");
    openapiFields.add("paymentMethodId");
    openapiFields.add("paymentTerms");
    openapiFields.add("status");
    openapiFields.add("tasks");
    openapiFields.add("tasksValue");
    openapiFields.add("totalGross");
    openapiFields.add("totalInWords");
    openapiFields.add("totalNetto");
    openapiFields.add("type");
    openapiFields.add("vatCalculationRule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerInvoiceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerInvoiceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerInvoiceDTO is not found in the empty JSON string", CustomerInvoiceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerInvoiceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerInvoiceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customerDetails`
      if (jsonObj.get("customerDetails") != null && !jsonObj.get("customerDetails").isJsonNull()) {
        CustomerDetailsDTO.validateJsonElement(jsonObj.get("customerDetails"));
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        CustomerInvoiceDatesDTO.validateJsonElement(jsonObj.get("dates"));
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
      // validate the optional field `paymentTerms`
      if (jsonObj.get("paymentTerms") != null && !jsonObj.get("paymentTerms").isJsonNull()) {
        PaymentTermsDTO.validateJsonElement(jsonObj.get("paymentTerms"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            TaskDTO.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
      if ((jsonObj.get("totalInWords") != null && !jsonObj.get("totalInWords").isJsonNull()) && !jsonObj.get("totalInWords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalInWords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalInWords").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("vatCalculationRule") != null && !jsonObj.get("vatCalculationRule").isJsonNull()) && !jsonObj.get("vatCalculationRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vatCalculationRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vatCalculationRule").toString()));
      }
      // validate the optional field `vatCalculationRule`
      if (jsonObj.get("vatCalculationRule") != null && !jsonObj.get("vatCalculationRule").isJsonNull()) {
        VatCalculationRuleEnum.validateJsonElement(jsonObj.get("vatCalculationRule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerInvoiceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerInvoiceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerInvoiceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerInvoiceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerInvoiceDTO>() {
           @Override
           public void write(JsonWriter out, CustomerInvoiceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerInvoiceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerInvoiceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerInvoiceDTO
   * @throws IOException if the JSON string is invalid with respect to CustomerInvoiceDTO
   */
  public static CustomerInvoiceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerInvoiceDTO.class);
  }

  /**
   * Convert an instance of CustomerInvoiceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

