/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CalculationUnitDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculationUnitDTO {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CAN_BE_USED_IN_CAT_ANALYSIS = "canBeUsedInCatAnalysis";
  @SerializedName(SERIALIZED_NAME_CAN_BE_USED_IN_CAT_ANALYSIS)
  private Boolean canBeUsedInCatAnalysis;

  public static final String SERIALIZED_NAME_CAT_QUANTITY_CONVERSION_EXPRESSION = "catQuantityConversionExpression";
  @SerializedName(SERIALIZED_NAME_CAT_QUANTITY_CONVERSION_EXPRESSION)
  private String catQuantityConversionExpression;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_EXCHANGE_RATIO = "exchangeRatio";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATIO)
  private BigDecimal exchangeRatio;

  public static final String SERIALIZED_NAME_FILE_STATS_CONVERSION_EXPRESSION = "fileStatsConversionExpression";
  @SerializedName(SERIALIZED_NAME_FILE_STATS_CONVERSION_EXPRESSION)
  private String fileStatsConversionExpression;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_JOB_TYPE_IDS = "jobTypeIds";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE_IDS)
  private List<Long> jobTypeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TIME_TO_QUANTITY_CONVERSION_EXPRESSION = "timeToQuantityConversionExpression";
  @SerializedName(SERIALIZED_NAME_TIME_TO_QUANTITY_CONVERSION_EXPRESSION)
  private String timeToQuantityConversionExpression;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TIME("TIME"),
    
    VOLUME("VOLUME"),
    
    PERCENT("PERCENT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CalculationUnitDTO() {
  }

  public CalculationUnitDTO active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * should this value be available on the XTRF selection lists
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public CalculationUnitDTO canBeUsedInCatAnalysis(Boolean canBeUsedInCatAnalysis) {
    this.canBeUsedInCatAnalysis = canBeUsedInCatAnalysis;
    return this;
  }

  /**
   * Get canBeUsedInCatAnalysis
   * @return canBeUsedInCatAnalysis
   */
  @javax.annotation.Nullable
  public Boolean getCanBeUsedInCatAnalysis() {
    return canBeUsedInCatAnalysis;
  }

  public void setCanBeUsedInCatAnalysis(Boolean canBeUsedInCatAnalysis) {
    this.canBeUsedInCatAnalysis = canBeUsedInCatAnalysis;
  }


  public CalculationUnitDTO catQuantityConversionExpression(String catQuantityConversionExpression) {
    this.catQuantityConversionExpression = catQuantityConversionExpression;
    return this;
  }

  /**
   * Get catQuantityConversionExpression
   * @return catQuantityConversionExpression
   */
  @javax.annotation.Nullable
  public String getCatQuantityConversionExpression() {
    return catQuantityConversionExpression;
  }

  public void setCatQuantityConversionExpression(String catQuantityConversionExpression) {
    this.catQuantityConversionExpression = catQuantityConversionExpression;
  }


  public CalculationUnitDTO _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * should this value be set by default in XTRF selection lists
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public CalculationUnitDTO exchangeRatio(BigDecimal exchangeRatio) {
    this.exchangeRatio = exchangeRatio;
    return this;
  }

  /**
   * Get exchangeRatio
   * @return exchangeRatio
   */
  @javax.annotation.Nullable
  public BigDecimal getExchangeRatio() {
    return exchangeRatio;
  }

  public void setExchangeRatio(BigDecimal exchangeRatio) {
    this.exchangeRatio = exchangeRatio;
  }


  public CalculationUnitDTO fileStatsConversionExpression(String fileStatsConversionExpression) {
    this.fileStatsConversionExpression = fileStatsConversionExpression;
    return this;
  }

  /**
   * Get fileStatsConversionExpression
   * @return fileStatsConversionExpression
   */
  @javax.annotation.Nullable
  public String getFileStatsConversionExpression() {
    return fileStatsConversionExpression;
  }

  public void setFileStatsConversionExpression(String fileStatsConversionExpression) {
    this.fileStatsConversionExpression = fileStatsConversionExpression;
  }


  public CalculationUnitDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * internal identifier
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CalculationUnitDTO jobTypeIds(List<Long> jobTypeIds) {
    this.jobTypeIds = jobTypeIds;
    return this;
  }

  public CalculationUnitDTO addJobTypeIdsItem(Long jobTypeIdsItem) {
    if (this.jobTypeIds == null) {
      this.jobTypeIds = new ArrayList<>();
    }
    this.jobTypeIds.add(jobTypeIdsItem);
    return this;
  }

  /**
   * Get jobTypeIds
   * @return jobTypeIds
   */
  @javax.annotation.Nullable
  public List<Long> getJobTypeIds() {
    return jobTypeIds;
  }

  public void setJobTypeIds(List<Long> jobTypeIds) {
    this.jobTypeIds = jobTypeIds;
  }


  public CalculationUnitDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * localised name (formatted in the current user&#39;s locale)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CalculationUnitDTO preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * should this value be available on the top of XTRF selection lists, in the Preferred section
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public CalculationUnitDTO symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public CalculationUnitDTO timeToQuantityConversionExpression(String timeToQuantityConversionExpression) {
    this.timeToQuantityConversionExpression = timeToQuantityConversionExpression;
    return this;
  }

  /**
   * Get timeToQuantityConversionExpression
   * @return timeToQuantityConversionExpression
   */
  @javax.annotation.Nullable
  public String getTimeToQuantityConversionExpression() {
    return timeToQuantityConversionExpression;
  }

  public void setTimeToQuantityConversionExpression(String timeToQuantityConversionExpression) {
    this.timeToQuantityConversionExpression = timeToQuantityConversionExpression;
  }


  public CalculationUnitDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculationUnitDTO calculationUnitDTO = (CalculationUnitDTO) o;
    return Objects.equals(this.active, calculationUnitDTO.active) &&
        Objects.equals(this.canBeUsedInCatAnalysis, calculationUnitDTO.canBeUsedInCatAnalysis) &&
        Objects.equals(this.catQuantityConversionExpression, calculationUnitDTO.catQuantityConversionExpression) &&
        Objects.equals(this._default, calculationUnitDTO._default) &&
        Objects.equals(this.exchangeRatio, calculationUnitDTO.exchangeRatio) &&
        Objects.equals(this.fileStatsConversionExpression, calculationUnitDTO.fileStatsConversionExpression) &&
        Objects.equals(this.id, calculationUnitDTO.id) &&
        Objects.equals(this.jobTypeIds, calculationUnitDTO.jobTypeIds) &&
        Objects.equals(this.name, calculationUnitDTO.name) &&
        Objects.equals(this.preferred, calculationUnitDTO.preferred) &&
        Objects.equals(this.symbol, calculationUnitDTO.symbol) &&
        Objects.equals(this.timeToQuantityConversionExpression, calculationUnitDTO.timeToQuantityConversionExpression) &&
        Objects.equals(this.type, calculationUnitDTO.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, canBeUsedInCatAnalysis, catQuantityConversionExpression, _default, exchangeRatio, fileStatsConversionExpression, id, jobTypeIds, name, preferred, symbol, timeToQuantityConversionExpression, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculationUnitDTO {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    canBeUsedInCatAnalysis: ").append(toIndentedString(canBeUsedInCatAnalysis)).append("\n");
    sb.append("    catQuantityConversionExpression: ").append(toIndentedString(catQuantityConversionExpression)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    exchangeRatio: ").append(toIndentedString(exchangeRatio)).append("\n");
    sb.append("    fileStatsConversionExpression: ").append(toIndentedString(fileStatsConversionExpression)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobTypeIds: ").append(toIndentedString(jobTypeIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timeToQuantityConversionExpression: ").append(toIndentedString(timeToQuantityConversionExpression)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("canBeUsedInCatAnalysis");
    openapiFields.add("catQuantityConversionExpression");
    openapiFields.add("default");
    openapiFields.add("exchangeRatio");
    openapiFields.add("fileStatsConversionExpression");
    openapiFields.add("id");
    openapiFields.add("jobTypeIds");
    openapiFields.add("name");
    openapiFields.add("preferred");
    openapiFields.add("symbol");
    openapiFields.add("timeToQuantityConversionExpression");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculationUnitDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculationUnitDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculationUnitDTO is not found in the empty JSON string", CalculationUnitDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculationUnitDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculationUnitDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("catQuantityConversionExpression") != null && !jsonObj.get("catQuantityConversionExpression").isJsonNull()) && !jsonObj.get("catQuantityConversionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catQuantityConversionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catQuantityConversionExpression").toString()));
      }
      if ((jsonObj.get("fileStatsConversionExpression") != null && !jsonObj.get("fileStatsConversionExpression").isJsonNull()) && !jsonObj.get("fileStatsConversionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileStatsConversionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileStatsConversionExpression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jobTypeIds") != null && !jsonObj.get("jobTypeIds").isJsonNull() && !jsonObj.get("jobTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("jobTypeIds").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("timeToQuantityConversionExpression") != null && !jsonObj.get("timeToQuantityConversionExpression").isJsonNull()) && !jsonObj.get("timeToQuantityConversionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeToQuantityConversionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeToQuantityConversionExpression").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculationUnitDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculationUnitDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculationUnitDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculationUnitDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculationUnitDTO>() {
           @Override
           public void write(JsonWriter out, CalculationUnitDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculationUnitDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculationUnitDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculationUnitDTO
   * @throws IOException if the JSON string is invalid with respect to CalculationUnitDTO
   */
  public static CalculationUnitDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculationUnitDTO.class);
  }

  /**
   * Convert an instance of CalculationUnitDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

