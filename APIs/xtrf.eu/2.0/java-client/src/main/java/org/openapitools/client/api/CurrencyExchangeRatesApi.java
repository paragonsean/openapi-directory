/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CurrencyHistoryDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrencyExchangeRatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrencyExchangeRatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrencyExchangeRatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createExchangeRate
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @param currencyHistoryDTO Adding new currency exchange rates (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExchangeRateCall(String isoCode, CurrencyHistoryDTO currencyHistoryDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = currencyHistoryDTO;

        // create path and map variables
        String localVarPath = "/dictionaries/currency/{isoCode}/exchangeRate"
            .replace("{" + "isoCode" + "}", localVarApiClient.escapeString(isoCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExchangeRateValidateBeforeCall(String isoCode, CurrencyHistoryDTO currencyHistoryDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isoCode' is set
        if (isoCode == null) {
            throw new ApiException("Missing the required parameter 'isoCode' when calling createExchangeRate(Async)");
        }

        // verify the required parameter 'currencyHistoryDTO' is set
        if (currencyHistoryDTO == null) {
            throw new ApiException("Missing the required parameter 'currencyHistoryDTO' when calling createExchangeRate(Async)");
        }

        return createExchangeRateCall(isoCode, currencyHistoryDTO, _callback);

    }

    /**
     * Adding currency exchange rates.
     * Adding currency exchange rates via API
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @param currencyHistoryDTO Adding new currency exchange rates (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void createExchangeRate(String isoCode, CurrencyHistoryDTO currencyHistoryDTO) throws ApiException {
        createExchangeRateWithHttpInfo(isoCode, currencyHistoryDTO);
    }

    /**
     * Adding currency exchange rates.
     * Adding currency exchange rates via API
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @param currencyHistoryDTO Adding new currency exchange rates (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createExchangeRateWithHttpInfo(String isoCode, CurrencyHistoryDTO currencyHistoryDTO) throws ApiException {
        okhttp3.Call localVarCall = createExchangeRateValidateBeforeCall(isoCode, currencyHistoryDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adding currency exchange rates. (asynchronously)
     * Adding currency exchange rates via API
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @param currencyHistoryDTO Adding new currency exchange rates (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExchangeRateAsync(String isoCode, CurrencyHistoryDTO currencyHistoryDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExchangeRateValidateBeforeCall(isoCode, currencyHistoryDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByIsoCode
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIsoCodeCall(String isoCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries/currency/{isoCode}/exchangeRate"
            .replace("{" + "isoCode" + "}", localVarApiClient.escapeString(isoCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIsoCodeValidateBeforeCall(String isoCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'isoCode' is set
        if (isoCode == null) {
            throw new ApiException("Missing the required parameter 'isoCode' when calling getByIsoCode(Async)");
        }

        return getByIsoCodeCall(isoCode, _callback);

    }

    /**
     * Returns currency exchange rates.
     * Returns currency exchange rates.
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @return CurrencyHistoryDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyHistoryDTO getByIsoCode(String isoCode) throws ApiException {
        ApiResponse<CurrencyHistoryDTO> localVarResp = getByIsoCodeWithHttpInfo(isoCode);
        return localVarResp.getData();
    }

    /**
     * Returns currency exchange rates.
     * Returns currency exchange rates.
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @return ApiResponse&lt;CurrencyHistoryDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyHistoryDTO> getByIsoCodeWithHttpInfo(String isoCode) throws ApiException {
        okhttp3.Call localVarCall = getByIsoCodeValidateBeforeCall(isoCode, null);
        Type localVarReturnType = new TypeToken<CurrencyHistoryDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns currency exchange rates. (asynchronously)
     * Returns currency exchange rates.
     * @param isoCode iso code, https://www.xe.com/iso4217.php (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIsoCodeAsync(String isoCode, final ApiCallback<CurrencyHistoryDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIsoCodeValidateBeforeCall(isoCode, _callback);
        Type localVarReturnType = new TypeToken<CurrencyHistoryDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
