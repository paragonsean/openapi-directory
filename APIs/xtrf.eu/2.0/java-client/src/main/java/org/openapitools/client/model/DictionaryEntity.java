/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EventsQueue;
import org.openapitools.client.model.Identifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DictionaryEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DictionaryEntity {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_AND_CLEAR_EVENTS_QUEUE = "andClearEventsQueue";
  @SerializedName(SERIALIZED_NAME_AND_CLEAR_EVENTS_QUEUE)
  private EventsQueue andClearEventsQueue;

  public static final String SERIALIZED_NAME_AUDIT_DISPLAY_NAME = "auditDisplayName";
  @SerializedName(SERIALIZED_NAME_AUDIT_DISPLAY_NAME)
  private String auditDisplayName;

  public static final String SERIALIZED_NAME_AUDIT_PATH = "auditPath";
  @SerializedName(SERIALIZED_NAME_AUDIT_PATH)
  private String auditPath;

  public static final String SERIALIZED_NAME_CLASS_NAME_KEY = "classNameKey";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME_KEY)
  private String classNameKey;

  public static final String SERIALIZED_NAME_CLASS_SIMPLE_NAME = "classSimpleName";
  @SerializedName(SERIALIZED_NAME_CLASS_SIMPLE_NAME)
  private String classSimpleName;

  public static final String SERIALIZED_NAME_COMPOUND_ID = "compoundId";
  @SerializedName(SERIALIZED_NAME_COMPOUND_ID)
  private String compoundId;

  public static final String SERIALIZED_NAME_DEFAULT_ENTITY = "defaultEntity";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENTITY)
  private Boolean defaultEntity;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENTITY_MARKED_AS_NOT_SUPPOSED_TO_BE_PERSISTED = "entityMarkedAsNotSupposedToBePersisted";
  @SerializedName(SERIALIZED_NAME_ENTITY_MARKED_AS_NOT_SUPPOSED_TO_BE_PERSISTED)
  private Boolean entityMarkedAsNotSupposedToBePersisted;

  public static final String SERIALIZED_NAME_EVENTS_QUEUE_READY_TO_BE_DISPATCHED = "eventsQueueReadyToBeDispatched";
  @SerializedName(SERIALIZED_NAME_EVENTS_QUEUE_READY_TO_BE_DISPATCHED)
  private Boolean eventsQueueReadyToBeDispatched;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private Identifier identifier;

  public static final String SERIALIZED_NAME_INTERNAL_DESCRIPTION = "internalDescription";
  @SerializedName(SERIALIZED_NAME_INTERNAL_DESCRIPTION)
  private String internalDescription;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_DATE = "lastModificationDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_DATE)
  private OffsetDateTime lastModificationDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKED_COMPOUND_ID = "packedCompoundId";
  @SerializedName(SERIALIZED_NAME_PACKED_COMPOUND_ID)
  private String packedCompoundId;

  public static final String SERIALIZED_NAME_PREFERED_ENTITY = "preferedEntity";
  @SerializedName(SERIALIZED_NAME_PREFERED_ENTITY)
  private Boolean preferedEntity;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public DictionaryEntity() {
  }

  public DictionaryEntity active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public DictionaryEntity andClearEventsQueue(EventsQueue andClearEventsQueue) {
    this.andClearEventsQueue = andClearEventsQueue;
    return this;
  }

  /**
   * Get andClearEventsQueue
   * @return andClearEventsQueue
   */
  @javax.annotation.Nullable
  public EventsQueue getAndClearEventsQueue() {
    return andClearEventsQueue;
  }

  public void setAndClearEventsQueue(EventsQueue andClearEventsQueue) {
    this.andClearEventsQueue = andClearEventsQueue;
  }


  public DictionaryEntity auditDisplayName(String auditDisplayName) {
    this.auditDisplayName = auditDisplayName;
    return this;
  }

  /**
   * Get auditDisplayName
   * @return auditDisplayName
   */
  @javax.annotation.Nullable
  public String getAuditDisplayName() {
    return auditDisplayName;
  }

  public void setAuditDisplayName(String auditDisplayName) {
    this.auditDisplayName = auditDisplayName;
  }


  public DictionaryEntity auditPath(String auditPath) {
    this.auditPath = auditPath;
    return this;
  }

  /**
   * Get auditPath
   * @return auditPath
   */
  @javax.annotation.Nullable
  public String getAuditPath() {
    return auditPath;
  }

  public void setAuditPath(String auditPath) {
    this.auditPath = auditPath;
  }


  public DictionaryEntity classNameKey(String classNameKey) {
    this.classNameKey = classNameKey;
    return this;
  }

  /**
   * Get classNameKey
   * @return classNameKey
   */
  @javax.annotation.Nullable
  public String getClassNameKey() {
    return classNameKey;
  }

  public void setClassNameKey(String classNameKey) {
    this.classNameKey = classNameKey;
  }


  public DictionaryEntity classSimpleName(String classSimpleName) {
    this.classSimpleName = classSimpleName;
    return this;
  }

  /**
   * Get classSimpleName
   * @return classSimpleName
   */
  @javax.annotation.Nullable
  public String getClassSimpleName() {
    return classSimpleName;
  }

  public void setClassSimpleName(String classSimpleName) {
    this.classSimpleName = classSimpleName;
  }


  public DictionaryEntity compoundId(String compoundId) {
    this.compoundId = compoundId;
    return this;
  }

  /**
   * Get compoundId
   * @return compoundId
   */
  @javax.annotation.Nullable
  public String getCompoundId() {
    return compoundId;
  }

  public void setCompoundId(String compoundId) {
    this.compoundId = compoundId;
  }


  public DictionaryEntity defaultEntity(Boolean defaultEntity) {
    this.defaultEntity = defaultEntity;
    return this;
  }

  /**
   * Get defaultEntity
   * @return defaultEntity
   */
  @javax.annotation.Nullable
  public Boolean getDefaultEntity() {
    return defaultEntity;
  }

  public void setDefaultEntity(Boolean defaultEntity) {
    this.defaultEntity = defaultEntity;
  }


  public DictionaryEntity displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DictionaryEntity entityMarkedAsNotSupposedToBePersisted(Boolean entityMarkedAsNotSupposedToBePersisted) {
    this.entityMarkedAsNotSupposedToBePersisted = entityMarkedAsNotSupposedToBePersisted;
    return this;
  }

  /**
   * Get entityMarkedAsNotSupposedToBePersisted
   * @return entityMarkedAsNotSupposedToBePersisted
   */
  @javax.annotation.Nullable
  public Boolean getEntityMarkedAsNotSupposedToBePersisted() {
    return entityMarkedAsNotSupposedToBePersisted;
  }

  public void setEntityMarkedAsNotSupposedToBePersisted(Boolean entityMarkedAsNotSupposedToBePersisted) {
    this.entityMarkedAsNotSupposedToBePersisted = entityMarkedAsNotSupposedToBePersisted;
  }


  public DictionaryEntity eventsQueueReadyToBeDispatched(Boolean eventsQueueReadyToBeDispatched) {
    this.eventsQueueReadyToBeDispatched = eventsQueueReadyToBeDispatched;
    return this;
  }

  /**
   * Get eventsQueueReadyToBeDispatched
   * @return eventsQueueReadyToBeDispatched
   */
  @javax.annotation.Nullable
  public Boolean getEventsQueueReadyToBeDispatched() {
    return eventsQueueReadyToBeDispatched;
  }

  public void setEventsQueueReadyToBeDispatched(Boolean eventsQueueReadyToBeDispatched) {
    this.eventsQueueReadyToBeDispatched = eventsQueueReadyToBeDispatched;
  }


  public DictionaryEntity id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public DictionaryEntity identifier(Identifier identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public Identifier getIdentifier() {
    return identifier;
  }

  public void setIdentifier(Identifier identifier) {
    this.identifier = identifier;
  }


  public DictionaryEntity internalDescription(String internalDescription) {
    this.internalDescription = internalDescription;
    return this;
  }

  /**
   * Get internalDescription
   * @return internalDescription
   */
  @javax.annotation.Nullable
  public String getInternalDescription() {
    return internalDescription;
  }

  public void setInternalDescription(String internalDescription) {
    this.internalDescription = internalDescription;
  }


  public DictionaryEntity lastModificationDate(OffsetDateTime lastModificationDate) {
    this.lastModificationDate = lastModificationDate;
    return this;
  }

  /**
   * Get lastModificationDate
   * @return lastModificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationDate() {
    return lastModificationDate;
  }

  public void setLastModificationDate(OffsetDateTime lastModificationDate) {
    this.lastModificationDate = lastModificationDate;
  }


  public DictionaryEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DictionaryEntity packedCompoundId(String packedCompoundId) {
    this.packedCompoundId = packedCompoundId;
    return this;
  }

  /**
   * Get packedCompoundId
   * @return packedCompoundId
   */
  @javax.annotation.Nullable
  public String getPackedCompoundId() {
    return packedCompoundId;
  }

  public void setPackedCompoundId(String packedCompoundId) {
    this.packedCompoundId = packedCompoundId;
  }


  public DictionaryEntity preferedEntity(Boolean preferedEntity) {
    this.preferedEntity = preferedEntity;
    return this;
  }

  /**
   * Get preferedEntity
   * @return preferedEntity
   */
  @javax.annotation.Nonnull
  public Boolean getPreferedEntity() {
    return preferedEntity;
  }

  public void setPreferedEntity(Boolean preferedEntity) {
    this.preferedEntity = preferedEntity;
  }


  public DictionaryEntity preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * Get preferred
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public DictionaryEntity version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DictionaryEntity dictionaryEntity = (DictionaryEntity) o;
    return Objects.equals(this.active, dictionaryEntity.active) &&
        Objects.equals(this.andClearEventsQueue, dictionaryEntity.andClearEventsQueue) &&
        Objects.equals(this.auditDisplayName, dictionaryEntity.auditDisplayName) &&
        Objects.equals(this.auditPath, dictionaryEntity.auditPath) &&
        Objects.equals(this.classNameKey, dictionaryEntity.classNameKey) &&
        Objects.equals(this.classSimpleName, dictionaryEntity.classSimpleName) &&
        Objects.equals(this.compoundId, dictionaryEntity.compoundId) &&
        Objects.equals(this.defaultEntity, dictionaryEntity.defaultEntity) &&
        Objects.equals(this.displayName, dictionaryEntity.displayName) &&
        Objects.equals(this.entityMarkedAsNotSupposedToBePersisted, dictionaryEntity.entityMarkedAsNotSupposedToBePersisted) &&
        Objects.equals(this.eventsQueueReadyToBeDispatched, dictionaryEntity.eventsQueueReadyToBeDispatched) &&
        Objects.equals(this.id, dictionaryEntity.id) &&
        Objects.equals(this.identifier, dictionaryEntity.identifier) &&
        Objects.equals(this.internalDescription, dictionaryEntity.internalDescription) &&
        Objects.equals(this.lastModificationDate, dictionaryEntity.lastModificationDate) &&
        Objects.equals(this.name, dictionaryEntity.name) &&
        Objects.equals(this.packedCompoundId, dictionaryEntity.packedCompoundId) &&
        Objects.equals(this.preferedEntity, dictionaryEntity.preferedEntity) &&
        Objects.equals(this.preferred, dictionaryEntity.preferred) &&
        Objects.equals(this.version, dictionaryEntity.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, andClearEventsQueue, auditDisplayName, auditPath, classNameKey, classSimpleName, compoundId, defaultEntity, displayName, entityMarkedAsNotSupposedToBePersisted, eventsQueueReadyToBeDispatched, id, identifier, internalDescription, lastModificationDate, name, packedCompoundId, preferedEntity, preferred, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DictionaryEntity {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    andClearEventsQueue: ").append(toIndentedString(andClearEventsQueue)).append("\n");
    sb.append("    auditDisplayName: ").append(toIndentedString(auditDisplayName)).append("\n");
    sb.append("    auditPath: ").append(toIndentedString(auditPath)).append("\n");
    sb.append("    classNameKey: ").append(toIndentedString(classNameKey)).append("\n");
    sb.append("    classSimpleName: ").append(toIndentedString(classSimpleName)).append("\n");
    sb.append("    compoundId: ").append(toIndentedString(compoundId)).append("\n");
    sb.append("    defaultEntity: ").append(toIndentedString(defaultEntity)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityMarkedAsNotSupposedToBePersisted: ").append(toIndentedString(entityMarkedAsNotSupposedToBePersisted)).append("\n");
    sb.append("    eventsQueueReadyToBeDispatched: ").append(toIndentedString(eventsQueueReadyToBeDispatched)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    internalDescription: ").append(toIndentedString(internalDescription)).append("\n");
    sb.append("    lastModificationDate: ").append(toIndentedString(lastModificationDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packedCompoundId: ").append(toIndentedString(packedCompoundId)).append("\n");
    sb.append("    preferedEntity: ").append(toIndentedString(preferedEntity)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("andClearEventsQueue");
    openapiFields.add("auditDisplayName");
    openapiFields.add("auditPath");
    openapiFields.add("classNameKey");
    openapiFields.add("classSimpleName");
    openapiFields.add("compoundId");
    openapiFields.add("defaultEntity");
    openapiFields.add("displayName");
    openapiFields.add("entityMarkedAsNotSupposedToBePersisted");
    openapiFields.add("eventsQueueReadyToBeDispatched");
    openapiFields.add("id");
    openapiFields.add("identifier");
    openapiFields.add("internalDescription");
    openapiFields.add("lastModificationDate");
    openapiFields.add("name");
    openapiFields.add("packedCompoundId");
    openapiFields.add("preferedEntity");
    openapiFields.add("preferred");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("preferedEntity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DictionaryEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DictionaryEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DictionaryEntity is not found in the empty JSON string", DictionaryEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DictionaryEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DictionaryEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DictionaryEntity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `andClearEventsQueue`
      if (jsonObj.get("andClearEventsQueue") != null && !jsonObj.get("andClearEventsQueue").isJsonNull()) {
        EventsQueue.validateJsonElement(jsonObj.get("andClearEventsQueue"));
      }
      if ((jsonObj.get("auditDisplayName") != null && !jsonObj.get("auditDisplayName").isJsonNull()) && !jsonObj.get("auditDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auditDisplayName").toString()));
      }
      if ((jsonObj.get("auditPath") != null && !jsonObj.get("auditPath").isJsonNull()) && !jsonObj.get("auditPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auditPath").toString()));
      }
      if ((jsonObj.get("classNameKey") != null && !jsonObj.get("classNameKey").isJsonNull()) && !jsonObj.get("classNameKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classNameKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classNameKey").toString()));
      }
      if ((jsonObj.get("classSimpleName") != null && !jsonObj.get("classSimpleName").isJsonNull()) && !jsonObj.get("classSimpleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classSimpleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classSimpleName").toString()));
      }
      if ((jsonObj.get("compoundId") != null && !jsonObj.get("compoundId").isJsonNull()) && !jsonObj.get("compoundId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compoundId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compoundId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `identifier`
      if (jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) {
        Identifier.validateJsonElement(jsonObj.get("identifier"));
      }
      if ((jsonObj.get("internalDescription") != null && !jsonObj.get("internalDescription").isJsonNull()) && !jsonObj.get("internalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalDescription").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("packedCompoundId") != null && !jsonObj.get("packedCompoundId").isJsonNull()) && !jsonObj.get("packedCompoundId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packedCompoundId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packedCompoundId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DictionaryEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DictionaryEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DictionaryEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DictionaryEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<DictionaryEntity>() {
           @Override
           public void write(JsonWriter out, DictionaryEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DictionaryEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DictionaryEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DictionaryEntity
   * @throws IOException if the JSON string is invalid with respect to DictionaryEntity
   */
  public static DictionaryEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DictionaryEntity.class);
  }

  /**
   * Convert an instance of DictionaryEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

