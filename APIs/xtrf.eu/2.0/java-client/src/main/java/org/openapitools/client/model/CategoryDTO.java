/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * group of things (ie. customers or projects) similar in some way (ie. VIP customers)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CategoryDTO {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  /**
   * set of types for which this category can be selected
   */
  @JsonAdapter(SupportedClassesEnum.Adapter.class)
  public enum SupportedClassesEnum {
    PROJECT("PROJECT"),
    
    QUOTE("QUOTE"),
    
    QUOTE_TASK("QUOTE_TASK"),
    
    TASK("TASK"),
    
    PROVIDER("PROVIDER"),
    
    CUSTOMER("CUSTOMER"),
    
    CUSTOMER_PERSON("CUSTOMER_PERSON"),
    
    PROVIDER_PERSON("PROVIDER_PERSON"),
    
    FINANCIAL_REPORT("FINANCIAL_REPORT"),
    
    REMINDER("REMINDER"),
    
    PROVIDER_INVOICE("PROVIDER_INVOICE"),
    
    CUSTOMER_INVOICE("CUSTOMER_INVOICE"),
    
    PROJECT_GROUP("PROJECT_GROUP");

    private String value;

    SupportedClassesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedClassesEnum fromValue(String value) {
      for (SupportedClassesEnum b : SupportedClassesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedClassesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedClassesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedClassesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedClassesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedClassesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_CLASSES = "supportedClasses";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CLASSES)
  private Set<SupportedClassesEnum> supportedClasses = new LinkedHashSet<>();

  public CategoryDTO() {
  }

  public CategoryDTO active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * should this value be available on the XTRF selection lists
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public CategoryDTO _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * should this value be set by default in XTRF selection lists
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public CategoryDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * internal identifier
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CategoryDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * localised name (formatted in the current user&#39;s locale)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CategoryDTO preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * should this value be available on the top of XTRF selection lists, in the Preferred section
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public CategoryDTO supportedClasses(Set<SupportedClassesEnum> supportedClasses) {
    this.supportedClasses = supportedClasses;
    return this;
  }

  public CategoryDTO addSupportedClassesItem(SupportedClassesEnum supportedClassesItem) {
    if (this.supportedClasses == null) {
      this.supportedClasses = new LinkedHashSet<>();
    }
    this.supportedClasses.add(supportedClassesItem);
    return this;
  }

  /**
   * set of types for which this category can be selected
   * @return supportedClasses
   */
  @javax.annotation.Nullable
  public Set<SupportedClassesEnum> getSupportedClasses() {
    return supportedClasses;
  }

  public void setSupportedClasses(Set<SupportedClassesEnum> supportedClasses) {
    this.supportedClasses = supportedClasses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryDTO categoryDTO = (CategoryDTO) o;
    return Objects.equals(this.active, categoryDTO.active) &&
        Objects.equals(this._default, categoryDTO._default) &&
        Objects.equals(this.id, categoryDTO.id) &&
        Objects.equals(this.name, categoryDTO.name) &&
        Objects.equals(this.preferred, categoryDTO.preferred) &&
        Objects.equals(this.supportedClasses, categoryDTO.supportedClasses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, _default, id, name, preferred, supportedClasses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryDTO {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    supportedClasses: ").append(toIndentedString(supportedClasses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("default");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("preferred");
    openapiFields.add("supportedClasses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryDTO is not found in the empty JSON string", CategoryDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedClasses") != null && !jsonObj.get("supportedClasses").isJsonNull() && !jsonObj.get("supportedClasses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedClasses` to be an array in the JSON string but got `%s`", jsonObj.get("supportedClasses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryDTO>() {
           @Override
           public void write(JsonWriter out, CategoryDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryDTO
   * @throws IOException if the JSON string is invalid with respect to CategoryDTO
   */
  public static CategoryDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryDTO.class);
  }

  /**
   * Convert an instance of CategoryDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

