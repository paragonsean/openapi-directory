/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DictionaryEntity;
import org.openapitools.client.model.ManyValuesPerTypeDTO;
import org.openapitools.client.model.ServiceDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DictionariesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DictionariesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DictionariesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getActive
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getActiveCall(_callback);

    }

    /**
     * Returns active dictionary entities for all types.
     * Returns active dictionary entities for all types.
     * @return ManyValuesPerTypeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ManyValuesPerTypeDTO getActive() throws ApiException {
        ApiResponse<ManyValuesPerTypeDTO> localVarResp = getActiveWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns active dictionary entities for all types.
     * Returns active dictionary entities for all types.
     * @return ApiResponse&lt;ManyValuesPerTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManyValuesPerTypeDTO> getActiveWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getActiveValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ManyValuesPerTypeDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns active dictionary entities for all types. (asynchronously)
     * Returns active dictionary entities for all types.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveAsync(final ApiCallback<ManyValuesPerTypeDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ManyValuesPerTypeDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveByType
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveByTypeCall(String type, String nameEquals, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries/{type}/active"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameEquals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameEquals", nameEquals));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveByTypeValidateBeforeCall(String type, String nameEquals, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getActiveByType(Async)");
        }

        return getActiveByTypeCall(type, nameEquals, _callback);

    }

    /**
     * Returns active values from a given dictionary.
     * Returns active values from a given dictionary.
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @return DictionaryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryEntity getActiveByType(String type, String nameEquals) throws ApiException {
        ApiResponse<DictionaryEntity> localVarResp = getActiveByTypeWithHttpInfo(type, nameEquals);
        return localVarResp.getData();
    }

    /**
     * Returns active values from a given dictionary.
     * Returns active values from a given dictionary.
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @return ApiResponse&lt;DictionaryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryEntity> getActiveByTypeWithHttpInfo(String type, String nameEquals) throws ApiException {
        okhttp3.Call localVarCall = getActiveByTypeValidateBeforeCall(type, nameEquals, null);
        Type localVarReturnType = new TypeToken<DictionaryEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns active values from a given dictionary. (asynchronously)
     * Returns active values from a given dictionary.
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveByTypeAsync(String type, String nameEquals, final ApiCallback<DictionaryEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveByTypeValidateBeforeCall(type, nameEquals, _callback);
        Type localVarReturnType = new TypeToken<DictionaryEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAll1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAll1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAll1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAll1Call(_callback);

    }

    /**
     * Returns dictionary entities for all types. Both active and not active ones.
     * &lt;div&gt;   &lt;p&gt;     XTRF holds many user-defined dictionaries (ie. countries).     Each dictionary contains a set of values (ie. Poland or Germany).     A default value may be defined for a dictionary.   &lt;/p&gt;   &lt;p&gt;     Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.     Please note that name used in dictionary values is presented in the locale of the current identity.     The same dictionary value can have different names, ie. \&quot;Poland\&quot; for one user, \&quot;Polska\&quot; for another one.   &lt;/p&gt;   &lt;p&gt;     Possible dictionary types with short explanation:     &lt;ul&gt;       &lt;li&gt;calculationUnit - predefined values of how to calculate the volume of work into the price&lt;/li&gt;       &lt;li&gt;category - labels to organize data on the platform&lt;/li&gt;       &lt;li&gt;country - list of countries used on the platform&lt;/li&gt;       &lt;li&gt;currency - currencies used in financial operations in the system&lt;/li&gt;       &lt;li&gt;industry - industry sectors which clients specialize in&lt;/li&gt;       &lt;li&gt;jobType - services offered by a company used in customized workflows&lt;/li&gt;       &lt;li&gt;language - list of languages and its values used on the platform&lt;/li&gt;       &lt;li&gt;leadSource - lead/recruitment places where new clients and vendors may be found&lt;/li&gt;       &lt;li&gt;personDepartment - departments in which contact person may be assigned to&lt;/li&gt;       &lt;li&gt;personPosition - positions in which user may be associated with&lt;/li&gt;       &lt;li&gt;province - states and provinces used in various documents on the platform&lt;/li&gt;       &lt;li&gt;specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military&lt;/li&gt;     &lt;/ul&gt;   &lt;/p&gt; &lt;/div&gt;
     * @return ManyValuesPerTypeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ManyValuesPerTypeDTO getAll1() throws ApiException {
        ApiResponse<ManyValuesPerTypeDTO> localVarResp = getAll1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns dictionary entities for all types. Both active and not active ones.
     * &lt;div&gt;   &lt;p&gt;     XTRF holds many user-defined dictionaries (ie. countries).     Each dictionary contains a set of values (ie. Poland or Germany).     A default value may be defined for a dictionary.   &lt;/p&gt;   &lt;p&gt;     Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.     Please note that name used in dictionary values is presented in the locale of the current identity.     The same dictionary value can have different names, ie. \&quot;Poland\&quot; for one user, \&quot;Polska\&quot; for another one.   &lt;/p&gt;   &lt;p&gt;     Possible dictionary types with short explanation:     &lt;ul&gt;       &lt;li&gt;calculationUnit - predefined values of how to calculate the volume of work into the price&lt;/li&gt;       &lt;li&gt;category - labels to organize data on the platform&lt;/li&gt;       &lt;li&gt;country - list of countries used on the platform&lt;/li&gt;       &lt;li&gt;currency - currencies used in financial operations in the system&lt;/li&gt;       &lt;li&gt;industry - industry sectors which clients specialize in&lt;/li&gt;       &lt;li&gt;jobType - services offered by a company used in customized workflows&lt;/li&gt;       &lt;li&gt;language - list of languages and its values used on the platform&lt;/li&gt;       &lt;li&gt;leadSource - lead/recruitment places where new clients and vendors may be found&lt;/li&gt;       &lt;li&gt;personDepartment - departments in which contact person may be assigned to&lt;/li&gt;       &lt;li&gt;personPosition - positions in which user may be associated with&lt;/li&gt;       &lt;li&gt;province - states and provinces used in various documents on the platform&lt;/li&gt;       &lt;li&gt;specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military&lt;/li&gt;     &lt;/ul&gt;   &lt;/p&gt; &lt;/div&gt;
     * @return ApiResponse&lt;ManyValuesPerTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManyValuesPerTypeDTO> getAll1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAll1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ManyValuesPerTypeDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns dictionary entities for all types. Both active and not active ones. (asynchronously)
     * &lt;div&gt;   &lt;p&gt;     XTRF holds many user-defined dictionaries (ie. countries).     Each dictionary contains a set of values (ie. Poland or Germany).     A default value may be defined for a dictionary.   &lt;/p&gt;   &lt;p&gt;     Dictionary values are identified using internal identifier which is constant and unique among other values from the same dictionary.     Please note that name used in dictionary values is presented in the locale of the current identity.     The same dictionary value can have different names, ie. \&quot;Poland\&quot; for one user, \&quot;Polska\&quot; for another one.   &lt;/p&gt;   &lt;p&gt;     Possible dictionary types with short explanation:     &lt;ul&gt;       &lt;li&gt;calculationUnit - predefined values of how to calculate the volume of work into the price&lt;/li&gt;       &lt;li&gt;category - labels to organize data on the platform&lt;/li&gt;       &lt;li&gt;country - list of countries used on the platform&lt;/li&gt;       &lt;li&gt;currency - currencies used in financial operations in the system&lt;/li&gt;       &lt;li&gt;industry - industry sectors which clients specialize in&lt;/li&gt;       &lt;li&gt;jobType - services offered by a company used in customized workflows&lt;/li&gt;       &lt;li&gt;language - list of languages and its values used on the platform&lt;/li&gt;       &lt;li&gt;leadSource - lead/recruitment places where new clients and vendors may be found&lt;/li&gt;       &lt;li&gt;personDepartment - departments in which contact person may be assigned to&lt;/li&gt;       &lt;li&gt;personPosition - positions in which user may be associated with&lt;/li&gt;       &lt;li&gt;province - states and provinces used in various documents on the platform&lt;/li&gt;       &lt;li&gt;specialization - list of specific qualifications required to perform a specific job in the task, for ex. medical, military&lt;/li&gt;     &lt;/ul&gt;   &lt;/p&gt; &lt;/div&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAll1Async(final ApiCallback<ManyValuesPerTypeDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAll1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ManyValuesPerTypeDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAll3
     * @param nameEquals exact name of entity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAll3Call(String nameEquals, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameEquals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameEquals", nameEquals));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAll3ValidateBeforeCall(String nameEquals, final ApiCallback _callback) throws ApiException {
        return getAll3Call(nameEquals, _callback);

    }

    /**
     * Returns services list
     * Returns workflows list. Both active and not active ones.
     * @param nameEquals exact name of entity (optional)
     * @return ServiceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDTO getAll3(String nameEquals) throws ApiException {
        ApiResponse<ServiceDTO> localVarResp = getAll3WithHttpInfo(nameEquals);
        return localVarResp.getData();
    }

    /**
     * Returns services list
     * Returns workflows list. Both active and not active ones.
     * @param nameEquals exact name of entity (optional)
     * @return ApiResponse&lt;ServiceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDTO> getAll3WithHttpInfo(String nameEquals) throws ApiException {
        okhttp3.Call localVarCall = getAll3ValidateBeforeCall(nameEquals, null);
        Type localVarReturnType = new TypeToken<ServiceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns services list (asynchronously)
     * Returns workflows list. Both active and not active ones.
     * @param nameEquals exact name of entity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAll3Async(String nameEquals, final ApiCallback<ServiceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAll3ValidateBeforeCall(nameEquals, _callback);
        Type localVarReturnType = new TypeToken<ServiceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllActive
     * @param nameEquals exact name of entity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllActiveCall(String nameEquals, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameEquals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameEquals", nameEquals));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllActiveValidateBeforeCall(String nameEquals, final ApiCallback _callback) throws ApiException {
        return getAllActiveCall(nameEquals, _callback);

    }

    /**
     * Returns active services list
     * Returns active workflows list
     * @param nameEquals exact name of entity (optional)
     * @return ServiceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServiceDTO getAllActive(String nameEquals) throws ApiException {
        ApiResponse<ServiceDTO> localVarResp = getAllActiveWithHttpInfo(nameEquals);
        return localVarResp.getData();
    }

    /**
     * Returns active services list
     * Returns active workflows list
     * @param nameEquals exact name of entity (optional)
     * @return ApiResponse&lt;ServiceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceDTO> getAllActiveWithHttpInfo(String nameEquals) throws ApiException {
        okhttp3.Call localVarCall = getAllActiveValidateBeforeCall(nameEquals, null);
        Type localVarReturnType = new TypeToken<ServiceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns active services list (asynchronously)
     * Returns active workflows list
     * @param nameEquals exact name of entity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllActiveAsync(String nameEquals, final ApiCallback<ServiceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllActiveValidateBeforeCall(nameEquals, _callback);
        Type localVarReturnType = new TypeToken<ServiceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllByType
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllByTypeCall(String type, String nameEquals, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries/{type}/all"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameEquals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameEquals", nameEquals));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllByTypeValidateBeforeCall(String type, String nameEquals, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getAllByType(Async)");
        }

        return getAllByTypeCall(type, nameEquals, _callback);

    }

    /**
     * Returns all values (both active and not active) from a given dictionary.
     * Returns all values (both active and not active) from a given dictionary.
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @return DictionaryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryEntity getAllByType(String type, String nameEquals) throws ApiException {
        ApiResponse<DictionaryEntity> localVarResp = getAllByTypeWithHttpInfo(type, nameEquals);
        return localVarResp.getData();
    }

    /**
     * Returns all values (both active and not active) from a given dictionary.
     * Returns all values (both active and not active) from a given dictionary.
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @return ApiResponse&lt;DictionaryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryEntity> getAllByTypeWithHttpInfo(String type, String nameEquals) throws ApiException {
        okhttp3.Call localVarCall = getAllByTypeValidateBeforeCall(type, nameEquals, null);
        Type localVarReturnType = new TypeToken<DictionaryEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all values (both active and not active) from a given dictionary. (asynchronously)
     * Returns all values (both active and not active) from a given dictionary.
     * @param type dictionary type (required)
     * @param nameEquals exact name of entity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllByTypeAsync(String type, String nameEquals, final ApiCallback<DictionaryEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllByTypeValidateBeforeCall(type, nameEquals, _callback);
        Type localVarReturnType = new TypeToken<DictionaryEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getByTypeAndId
     * @param type dictionary type (required)
     * @param id dictionary value identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByTypeAndIdCall(String type, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dictionaries/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByTypeAndIdValidateBeforeCall(String type, Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getByTypeAndId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getByTypeAndId(Async)");
        }

        return getByTypeAndIdCall(type, id, _callback);

    }

    /**
     * Returns specific value from a given dictionary.
     * Returns specific value from a given dictionary.
     * @param type dictionary type (required)
     * @param id dictionary value identifier (required)
     * @return DictionaryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DictionaryEntity getByTypeAndId(String type, Long id) throws ApiException {
        ApiResponse<DictionaryEntity> localVarResp = getByTypeAndIdWithHttpInfo(type, id);
        return localVarResp.getData();
    }

    /**
     * Returns specific value from a given dictionary.
     * Returns specific value from a given dictionary.
     * @param type dictionary type (required)
     * @param id dictionary value identifier (required)
     * @return ApiResponse&lt;DictionaryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DictionaryEntity> getByTypeAndIdWithHttpInfo(String type, Long id) throws ApiException {
        okhttp3.Call localVarCall = getByTypeAndIdValidateBeforeCall(type, id, null);
        Type localVarReturnType = new TypeToken<DictionaryEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns specific value from a given dictionary. (asynchronously)
     * Returns specific value from a given dictionary.
     * @param type dictionary type (required)
     * @param id dictionary value identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByTypeAndIdAsync(String type, Long id, final ApiCallback<DictionaryEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByTypeAndIdValidateBeforeCall(type, id, _callback);
        Type localVarReturnType = new TypeToken<DictionaryEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
