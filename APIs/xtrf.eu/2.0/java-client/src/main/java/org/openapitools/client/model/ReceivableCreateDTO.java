/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ChargeLanguageCombinationDTO;
import org.openapitools.client.model.FileDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReceivableCreateDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReceivableCreateDTO {
  public static final String SERIALIZED_NAME_CALCULATION_UNIT_ID = "calculationUnitId";
  @SerializedName(SERIALIZED_NAME_CALCULATION_UNIT_ID)
  private Long calculationUnitId;

  public static final String SERIALIZED_NAME_CAT_LOG_FILE = "catLogFile";
  @SerializedName(SERIALIZED_NAME_CAT_LOG_FILE)
  private FileDTO catLogFile;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private Long currencyId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IGNORE_MINIMUM_CHARGE = "ignoreMinimumCharge";
  @SerializedName(SERIALIZED_NAME_IGNORE_MINIMUM_CHARGE)
  private Boolean ignoreMinimumCharge;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_JOB_TYPE_ID = "jobTypeId";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE_ID)
  private Long jobTypeId;

  public static final String SERIALIZED_NAME_LANGUAGE_COMBINATION = "languageCombination";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_COMBINATION)
  private ChargeLanguageCombinationDTO languageCombination;

  public static final String SERIALIZED_NAME_LANGUAGE_COMBINATION_ID_NUMBER = "languageCombinationIdNumber";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_COMBINATION_ID_NUMBER)
  private String languageCombinationIdNumber;

  public static final String SERIALIZED_NAME_MINIMUM_CHARGE = "minimumCharge";
  @SerializedName(SERIALIZED_NAME_MINIMUM_CHARGE)
  private BigDecimal minimumCharge;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private BigDecimal rate;

  /**
   * Gets or Sets rateOrigin
   */
  @JsonAdapter(RateOriginEnum.Adapter.class)
  public enum RateOriginEnum {
    PRICE_PROFILE("PRICE_PROFILE"),
    
    PRICE_LIST("PRICE_LIST"),
    
    FILLED_MANUALLY("FILLED_MANUALLY"),
    
    AUTOCALCULATED("AUTOCALCULATED");

    private String value;

    RateOriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RateOriginEnum fromValue(String value) {
      for (RateOriginEnum b : RateOriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RateOriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RateOriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RateOriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RateOriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RateOriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RATE_ORIGIN = "rateOrigin";
  @SerializedName(SERIALIZED_NAME_RATE_ORIGIN)
  private RateOriginEnum rateOrigin;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private Long taskId;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SIMPLE("SIMPLE"),
    
    CAT("CAT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ReceivableCreateDTO() {
  }

  public ReceivableCreateDTO calculationUnitId(Long calculationUnitId) {
    this.calculationUnitId = calculationUnitId;
    return this;
  }

  /**
   * Get calculationUnitId
   * @return calculationUnitId
   */
  @javax.annotation.Nullable
  public Long getCalculationUnitId() {
    return calculationUnitId;
  }

  public void setCalculationUnitId(Long calculationUnitId) {
    this.calculationUnitId = calculationUnitId;
  }


  public ReceivableCreateDTO catLogFile(FileDTO catLogFile) {
    this.catLogFile = catLogFile;
    return this;
  }

  /**
   * Get catLogFile
   * @return catLogFile
   */
  @javax.annotation.Nullable
  public FileDTO getCatLogFile() {
    return catLogFile;
  }

  public void setCatLogFile(FileDTO catLogFile) {
    this.catLogFile = catLogFile;
  }


  public ReceivableCreateDTO currencyId(Long currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public Long getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Long currencyId) {
    this.currencyId = currencyId;
  }


  public ReceivableCreateDTO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReceivableCreateDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ReceivableCreateDTO ignoreMinimumCharge(Boolean ignoreMinimumCharge) {
    this.ignoreMinimumCharge = ignoreMinimumCharge;
    return this;
  }

  /**
   * Get ignoreMinimumCharge
   * @return ignoreMinimumCharge
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreMinimumCharge() {
    return ignoreMinimumCharge;
  }

  public void setIgnoreMinimumCharge(Boolean ignoreMinimumCharge) {
    this.ignoreMinimumCharge = ignoreMinimumCharge;
  }


  public ReceivableCreateDTO invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * Get invoiceId
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public ReceivableCreateDTO jobTypeId(Long jobTypeId) {
    this.jobTypeId = jobTypeId;
    return this;
  }

  /**
   * Get jobTypeId
   * @return jobTypeId
   */
  @javax.annotation.Nullable
  public Long getJobTypeId() {
    return jobTypeId;
  }

  public void setJobTypeId(Long jobTypeId) {
    this.jobTypeId = jobTypeId;
  }


  public ReceivableCreateDTO languageCombination(ChargeLanguageCombinationDTO languageCombination) {
    this.languageCombination = languageCombination;
    return this;
  }

  /**
   * Get languageCombination
   * @return languageCombination
   */
  @javax.annotation.Nullable
  public ChargeLanguageCombinationDTO getLanguageCombination() {
    return languageCombination;
  }

  public void setLanguageCombination(ChargeLanguageCombinationDTO languageCombination) {
    this.languageCombination = languageCombination;
  }


  public ReceivableCreateDTO languageCombinationIdNumber(String languageCombinationIdNumber) {
    this.languageCombinationIdNumber = languageCombinationIdNumber;
    return this;
  }

  /**
   * Get languageCombinationIdNumber
   * @return languageCombinationIdNumber
   */
  @javax.annotation.Nullable
  public String getLanguageCombinationIdNumber() {
    return languageCombinationIdNumber;
  }

  public void setLanguageCombinationIdNumber(String languageCombinationIdNumber) {
    this.languageCombinationIdNumber = languageCombinationIdNumber;
  }


  public ReceivableCreateDTO minimumCharge(BigDecimal minimumCharge) {
    this.minimumCharge = minimumCharge;
    return this;
  }

  /**
   * Get minimumCharge
   * @return minimumCharge
   */
  @javax.annotation.Nullable
  public BigDecimal getMinimumCharge() {
    return minimumCharge;
  }

  public void setMinimumCharge(BigDecimal minimumCharge) {
    this.minimumCharge = minimumCharge;
  }


  public ReceivableCreateDTO quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public ReceivableCreateDTO rate(BigDecimal rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Get rate
   * @return rate
   */
  @javax.annotation.Nullable
  public BigDecimal getRate() {
    return rate;
  }

  public void setRate(BigDecimal rate) {
    this.rate = rate;
  }


  public ReceivableCreateDTO rateOrigin(RateOriginEnum rateOrigin) {
    this.rateOrigin = rateOrigin;
    return this;
  }

  /**
   * Get rateOrigin
   * @return rateOrigin
   */
  @javax.annotation.Nullable
  public RateOriginEnum getRateOrigin() {
    return rateOrigin;
  }

  public void setRateOrigin(RateOriginEnum rateOrigin) {
    this.rateOrigin = rateOrigin;
  }


  public ReceivableCreateDTO taskId(Long taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * Get taskId
   * @return taskId
   */
  @javax.annotation.Nullable
  public Long getTaskId() {
    return taskId;
  }

  public void setTaskId(Long taskId) {
    this.taskId = taskId;
  }


  public ReceivableCreateDTO total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public ReceivableCreateDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceivableCreateDTO receivableCreateDTO = (ReceivableCreateDTO) o;
    return Objects.equals(this.calculationUnitId, receivableCreateDTO.calculationUnitId) &&
        Objects.equals(this.catLogFile, receivableCreateDTO.catLogFile) &&
        Objects.equals(this.currencyId, receivableCreateDTO.currencyId) &&
        Objects.equals(this.description, receivableCreateDTO.description) &&
        Objects.equals(this.id, receivableCreateDTO.id) &&
        Objects.equals(this.ignoreMinimumCharge, receivableCreateDTO.ignoreMinimumCharge) &&
        Objects.equals(this.invoiceId, receivableCreateDTO.invoiceId) &&
        Objects.equals(this.jobTypeId, receivableCreateDTO.jobTypeId) &&
        Objects.equals(this.languageCombination, receivableCreateDTO.languageCombination) &&
        Objects.equals(this.languageCombinationIdNumber, receivableCreateDTO.languageCombinationIdNumber) &&
        Objects.equals(this.minimumCharge, receivableCreateDTO.minimumCharge) &&
        Objects.equals(this.quantity, receivableCreateDTO.quantity) &&
        Objects.equals(this.rate, receivableCreateDTO.rate) &&
        Objects.equals(this.rateOrigin, receivableCreateDTO.rateOrigin) &&
        Objects.equals(this.taskId, receivableCreateDTO.taskId) &&
        Objects.equals(this.total, receivableCreateDTO.total) &&
        Objects.equals(this.type, receivableCreateDTO.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationUnitId, catLogFile, currencyId, description, id, ignoreMinimumCharge, invoiceId, jobTypeId, languageCombination, languageCombinationIdNumber, minimumCharge, quantity, rate, rateOrigin, taskId, total, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceivableCreateDTO {\n");
    sb.append("    calculationUnitId: ").append(toIndentedString(calculationUnitId)).append("\n");
    sb.append("    catLogFile: ").append(toIndentedString(catLogFile)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignoreMinimumCharge: ").append(toIndentedString(ignoreMinimumCharge)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    jobTypeId: ").append(toIndentedString(jobTypeId)).append("\n");
    sb.append("    languageCombination: ").append(toIndentedString(languageCombination)).append("\n");
    sb.append("    languageCombinationIdNumber: ").append(toIndentedString(languageCombinationIdNumber)).append("\n");
    sb.append("    minimumCharge: ").append(toIndentedString(minimumCharge)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    rateOrigin: ").append(toIndentedString(rateOrigin)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculationUnitId");
    openapiFields.add("catLogFile");
    openapiFields.add("currencyId");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("ignoreMinimumCharge");
    openapiFields.add("invoiceId");
    openapiFields.add("jobTypeId");
    openapiFields.add("languageCombination");
    openapiFields.add("languageCombinationIdNumber");
    openapiFields.add("minimumCharge");
    openapiFields.add("quantity");
    openapiFields.add("rate");
    openapiFields.add("rateOrigin");
    openapiFields.add("taskId");
    openapiFields.add("total");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceivableCreateDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceivableCreateDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceivableCreateDTO is not found in the empty JSON string", ReceivableCreateDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceivableCreateDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceivableCreateDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `catLogFile`
      if (jsonObj.get("catLogFile") != null && !jsonObj.get("catLogFile").isJsonNull()) {
        FileDTO.validateJsonElement(jsonObj.get("catLogFile"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      // validate the optional field `languageCombination`
      if (jsonObj.get("languageCombination") != null && !jsonObj.get("languageCombination").isJsonNull()) {
        ChargeLanguageCombinationDTO.validateJsonElement(jsonObj.get("languageCombination"));
      }
      if ((jsonObj.get("languageCombinationIdNumber") != null && !jsonObj.get("languageCombinationIdNumber").isJsonNull()) && !jsonObj.get("languageCombinationIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCombinationIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCombinationIdNumber").toString()));
      }
      if ((jsonObj.get("rateOrigin") != null && !jsonObj.get("rateOrigin").isJsonNull()) && !jsonObj.get("rateOrigin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateOrigin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateOrigin").toString()));
      }
      // validate the optional field `rateOrigin`
      if (jsonObj.get("rateOrigin") != null && !jsonObj.get("rateOrigin").isJsonNull()) {
        RateOriginEnum.validateJsonElement(jsonObj.get("rateOrigin"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceivableCreateDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceivableCreateDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceivableCreateDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceivableCreateDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceivableCreateDTO>() {
           @Override
           public void write(JsonWriter out, ReceivableCreateDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceivableCreateDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceivableCreateDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceivableCreateDTO
   * @throws IOException if the JSON string is invalid with respect to ReceivableCreateDTO
   */
  public static ReceivableCreateDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceivableCreateDTO.class);
  }

  /**
   * Convert an instance of ReceivableCreateDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

