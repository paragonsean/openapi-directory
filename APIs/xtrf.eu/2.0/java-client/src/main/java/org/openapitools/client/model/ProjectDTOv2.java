/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.DocumentsDTO;
import org.openapitools.client.model.PeopleDTO;
import org.openapitools.client.model.ProjectLanguagesDTO;
import org.openapitools.client.model.VolumeDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectDTOv2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectDTOv2 {
  public static final String SERIALIZED_NAME_BUDGET_CODE = "budgetCode";
  @SerializedName(SERIALIZED_NAME_BUDGET_CODE)
  private String budgetCode;

  public static final String SERIALIZED_NAME_CATEGORY_IDS = "categoryIds";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDS)
  private Set<Long> categoryIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CLIENT_DEADLINE = "clientDeadline";
  @SerializedName(SERIALIZED_NAME_CLIENT_DEADLINE)
  private Long clientDeadline;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private Long clientId;

  public static final String SERIALIZED_NAME_CLIENT_NOTES = "clientNotes";
  @SerializedName(SERIALIZED_NAME_CLIENT_NOTES)
  private String clientNotes;

  public static final String SERIALIZED_NAME_CLIENT_REFERENCE_NUMBER = "clientReferenceNumber";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCE_NUMBER)
  private String clientReferenceNumber;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private DocumentsDTO documents;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUCTIONS_FOR_ALL_JOBS = "instructionsForAllJobs";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS_FOR_ALL_JOBS)
  private String instructionsForAllJobs;

  public static final String SERIALIZED_NAME_INTERNAL_NOTES = "internalNotes";
  @SerializedName(SERIALIZED_NAME_INTERNAL_NOTES)
  private String internalNotes;

  public static final String SERIALIZED_NAME_IS_CLASSIC_PROJECT = "isClassicProject";
  @SerializedName(SERIALIZED_NAME_IS_CLASSIC_PROJECT)
  private Boolean isClassicProject;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private ProjectLanguagesDTO languages;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDERED_ON = "orderedOn";
  @SerializedName(SERIALIZED_NAME_ORDERED_ON)
  private Long orderedOn;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_PEOPLE = "people";
  @SerializedName(SERIALIZED_NAME_PEOPLE)
  private PeopleDTO people;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_PROJECT_ID_NUMBER = "projectIdNumber";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID_NUMBER)
  private String projectIdNumber;

  public static final String SERIALIZED_NAME_QUOTE_ID_NUMBER = "quoteIdNumber";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID_NUMBER)
  private String quoteIdNumber;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private Long serviceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private VolumeDTO volume;

  public ProjectDTOv2() {
  }

  public ProjectDTOv2 budgetCode(String budgetCode) {
    this.budgetCode = budgetCode;
    return this;
  }

  /**
   * Get budgetCode
   * @return budgetCode
   */
  @javax.annotation.Nullable
  public String getBudgetCode() {
    return budgetCode;
  }

  public void setBudgetCode(String budgetCode) {
    this.budgetCode = budgetCode;
  }


  public ProjectDTOv2 categoryIds(Set<Long> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public ProjectDTOv2 addCategoryIdsItem(Long categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new LinkedHashSet<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

  /**
   * Get categoryIds
   * @return categoryIds
   */
  @javax.annotation.Nullable
  public Set<Long> getCategoryIds() {
    return categoryIds;
  }

  public void setCategoryIds(Set<Long> categoryIds) {
    this.categoryIds = categoryIds;
  }


  public ProjectDTOv2 clientDeadline(Long clientDeadline) {
    this.clientDeadline = clientDeadline;
    return this;
  }

  /**
   * Get clientDeadline
   * @return clientDeadline
   */
  @javax.annotation.Nullable
  public Long getClientDeadline() {
    return clientDeadline;
  }

  public void setClientDeadline(Long clientDeadline) {
    this.clientDeadline = clientDeadline;
  }


  public ProjectDTOv2 clientId(Long clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public Long getClientId() {
    return clientId;
  }

  public void setClientId(Long clientId) {
    this.clientId = clientId;
  }


  public ProjectDTOv2 clientNotes(String clientNotes) {
    this.clientNotes = clientNotes;
    return this;
  }

  /**
   * Get clientNotes
   * @return clientNotes
   */
  @javax.annotation.Nullable
  public String getClientNotes() {
    return clientNotes;
  }

  public void setClientNotes(String clientNotes) {
    this.clientNotes = clientNotes;
  }


  public ProjectDTOv2 clientReferenceNumber(String clientReferenceNumber) {
    this.clientReferenceNumber = clientReferenceNumber;
    return this;
  }

  /**
   * Get clientReferenceNumber
   * @return clientReferenceNumber
   */
  @javax.annotation.Nullable
  public String getClientReferenceNumber() {
    return clientReferenceNumber;
  }

  public void setClientReferenceNumber(String clientReferenceNumber) {
    this.clientReferenceNumber = clientReferenceNumber;
  }


  public ProjectDTOv2 documents(DocumentsDTO documents) {
    this.documents = documents;
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public DocumentsDTO getDocuments() {
    return documents;
  }

  public void setDocuments(DocumentsDTO documents) {
    this.documents = documents;
  }


  public ProjectDTOv2 id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProjectDTOv2 instructionsForAllJobs(String instructionsForAllJobs) {
    this.instructionsForAllJobs = instructionsForAllJobs;
    return this;
  }

  /**
   * Get instructionsForAllJobs
   * @return instructionsForAllJobs
   */
  @javax.annotation.Nullable
  public String getInstructionsForAllJobs() {
    return instructionsForAllJobs;
  }

  public void setInstructionsForAllJobs(String instructionsForAllJobs) {
    this.instructionsForAllJobs = instructionsForAllJobs;
  }


  public ProjectDTOv2 internalNotes(String internalNotes) {
    this.internalNotes = internalNotes;
    return this;
  }

  /**
   * Get internalNotes
   * @return internalNotes
   */
  @javax.annotation.Nullable
  public String getInternalNotes() {
    return internalNotes;
  }

  public void setInternalNotes(String internalNotes) {
    this.internalNotes = internalNotes;
  }


  public ProjectDTOv2 isClassicProject(Boolean isClassicProject) {
    this.isClassicProject = isClassicProject;
    return this;
  }

  /**
   * Get isClassicProject
   * @return isClassicProject
   */
  @javax.annotation.Nullable
  public Boolean getIsClassicProject() {
    return isClassicProject;
  }

  public void setIsClassicProject(Boolean isClassicProject) {
    this.isClassicProject = isClassicProject;
  }


  public ProjectDTOv2 languages(ProjectLanguagesDTO languages) {
    this.languages = languages;
    return this;
  }

  /**
   * Get languages
   * @return languages
   */
  @javax.annotation.Nullable
  public ProjectLanguagesDTO getLanguages() {
    return languages;
  }

  public void setLanguages(ProjectLanguagesDTO languages) {
    this.languages = languages;
  }


  public ProjectDTOv2 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectDTOv2 orderedOn(Long orderedOn) {
    this.orderedOn = orderedOn;
    return this;
  }

  /**
   * Get orderedOn
   * @return orderedOn
   */
  @javax.annotation.Nullable
  public Long getOrderedOn() {
    return orderedOn;
  }

  public void setOrderedOn(Long orderedOn) {
    this.orderedOn = orderedOn;
  }


  public ProjectDTOv2 origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public ProjectDTOv2 people(PeopleDTO people) {
    this.people = people;
    return this;
  }

  /**
   * Get people
   * @return people
   */
  @javax.annotation.Nullable
  public PeopleDTO getPeople() {
    return people;
  }

  public void setPeople(PeopleDTO people) {
    this.people = people;
  }


  public ProjectDTOv2 projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Get projectId
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public ProjectDTOv2 projectIdNumber(String projectIdNumber) {
    this.projectIdNumber = projectIdNumber;
    return this;
  }

  /**
   * Get projectIdNumber
   * @return projectIdNumber
   */
  @javax.annotation.Nullable
  public String getProjectIdNumber() {
    return projectIdNumber;
  }

  public void setProjectIdNumber(String projectIdNumber) {
    this.projectIdNumber = projectIdNumber;
  }


  public ProjectDTOv2 quoteIdNumber(String quoteIdNumber) {
    this.quoteIdNumber = quoteIdNumber;
    return this;
  }

  /**
   * Get quoteIdNumber
   * @return quoteIdNumber
   */
  @javax.annotation.Nullable
  public String getQuoteIdNumber() {
    return quoteIdNumber;
  }

  public void setQuoteIdNumber(String quoteIdNumber) {
    this.quoteIdNumber = quoteIdNumber;
  }


  public ProjectDTOv2 serviceId(Long serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nullable
  public Long getServiceId() {
    return serviceId;
  }

  public void setServiceId(Long serviceId) {
    this.serviceId = serviceId;
  }


  public ProjectDTOv2 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ProjectDTOv2 volume(VolumeDTO volume) {
    this.volume = volume;
    return this;
  }

  /**
   * Get volume
   * @return volume
   */
  @javax.annotation.Nullable
  public VolumeDTO getVolume() {
    return volume;
  }

  public void setVolume(VolumeDTO volume) {
    this.volume = volume;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectDTOv2 projectDTOv2 = (ProjectDTOv2) o;
    return Objects.equals(this.budgetCode, projectDTOv2.budgetCode) &&
        Objects.equals(this.categoryIds, projectDTOv2.categoryIds) &&
        Objects.equals(this.clientDeadline, projectDTOv2.clientDeadline) &&
        Objects.equals(this.clientId, projectDTOv2.clientId) &&
        Objects.equals(this.clientNotes, projectDTOv2.clientNotes) &&
        Objects.equals(this.clientReferenceNumber, projectDTOv2.clientReferenceNumber) &&
        Objects.equals(this.documents, projectDTOv2.documents) &&
        Objects.equals(this.id, projectDTOv2.id) &&
        Objects.equals(this.instructionsForAllJobs, projectDTOv2.instructionsForAllJobs) &&
        Objects.equals(this.internalNotes, projectDTOv2.internalNotes) &&
        Objects.equals(this.isClassicProject, projectDTOv2.isClassicProject) &&
        Objects.equals(this.languages, projectDTOv2.languages) &&
        Objects.equals(this.name, projectDTOv2.name) &&
        Objects.equals(this.orderedOn, projectDTOv2.orderedOn) &&
        Objects.equals(this.origin, projectDTOv2.origin) &&
        Objects.equals(this.people, projectDTOv2.people) &&
        Objects.equals(this.projectId, projectDTOv2.projectId) &&
        Objects.equals(this.projectIdNumber, projectDTOv2.projectIdNumber) &&
        Objects.equals(this.quoteIdNumber, projectDTOv2.quoteIdNumber) &&
        Objects.equals(this.serviceId, projectDTOv2.serviceId) &&
        Objects.equals(this.status, projectDTOv2.status) &&
        Objects.equals(this.volume, projectDTOv2.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetCode, categoryIds, clientDeadline, clientId, clientNotes, clientReferenceNumber, documents, id, instructionsForAllJobs, internalNotes, isClassicProject, languages, name, orderedOn, origin, people, projectId, projectIdNumber, quoteIdNumber, serviceId, status, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectDTOv2 {\n");
    sb.append("    budgetCode: ").append(toIndentedString(budgetCode)).append("\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    clientDeadline: ").append(toIndentedString(clientDeadline)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientNotes: ").append(toIndentedString(clientNotes)).append("\n");
    sb.append("    clientReferenceNumber: ").append(toIndentedString(clientReferenceNumber)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instructionsForAllJobs: ").append(toIndentedString(instructionsForAllJobs)).append("\n");
    sb.append("    internalNotes: ").append(toIndentedString(internalNotes)).append("\n");
    sb.append("    isClassicProject: ").append(toIndentedString(isClassicProject)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orderedOn: ").append(toIndentedString(orderedOn)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    people: ").append(toIndentedString(people)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectIdNumber: ").append(toIndentedString(projectIdNumber)).append("\n");
    sb.append("    quoteIdNumber: ").append(toIndentedString(quoteIdNumber)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budgetCode");
    openapiFields.add("categoryIds");
    openapiFields.add("clientDeadline");
    openapiFields.add("clientId");
    openapiFields.add("clientNotes");
    openapiFields.add("clientReferenceNumber");
    openapiFields.add("documents");
    openapiFields.add("id");
    openapiFields.add("instructionsForAllJobs");
    openapiFields.add("internalNotes");
    openapiFields.add("isClassicProject");
    openapiFields.add("languages");
    openapiFields.add("name");
    openapiFields.add("orderedOn");
    openapiFields.add("origin");
    openapiFields.add("people");
    openapiFields.add("projectId");
    openapiFields.add("projectIdNumber");
    openapiFields.add("quoteIdNumber");
    openapiFields.add("serviceId");
    openapiFields.add("status");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectDTOv2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectDTOv2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectDTOv2 is not found in the empty JSON string", ProjectDTOv2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectDTOv2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectDTOv2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("budgetCode") != null && !jsonObj.get("budgetCode").isJsonNull()) && !jsonObj.get("budgetCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryIds") != null && !jsonObj.get("categoryIds").isJsonNull() && !jsonObj.get("categoryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoryIds").toString()));
      }
      if ((jsonObj.get("clientNotes") != null && !jsonObj.get("clientNotes").isJsonNull()) && !jsonObj.get("clientNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientNotes").toString()));
      }
      if ((jsonObj.get("clientReferenceNumber") != null && !jsonObj.get("clientReferenceNumber").isJsonNull()) && !jsonObj.get("clientReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientReferenceNumber").toString()));
      }
      // validate the optional field `documents`
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        DocumentsDTO.validateJsonElement(jsonObj.get("documents"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("instructionsForAllJobs") != null && !jsonObj.get("instructionsForAllJobs").isJsonNull()) && !jsonObj.get("instructionsForAllJobs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionsForAllJobs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionsForAllJobs").toString()));
      }
      if ((jsonObj.get("internalNotes") != null && !jsonObj.get("internalNotes").isJsonNull()) && !jsonObj.get("internalNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalNotes").toString()));
      }
      // validate the optional field `languages`
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull()) {
        ProjectLanguagesDTO.validateJsonElement(jsonObj.get("languages"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `people`
      if (jsonObj.get("people") != null && !jsonObj.get("people").isJsonNull()) {
        PeopleDTO.validateJsonElement(jsonObj.get("people"));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("projectIdNumber") != null && !jsonObj.get("projectIdNumber").isJsonNull()) && !jsonObj.get("projectIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectIdNumber").toString()));
      }
      if ((jsonObj.get("quoteIdNumber") != null && !jsonObj.get("quoteIdNumber").isJsonNull()) && !jsonObj.get("quoteIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteIdNumber").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `volume`
      if (jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull()) {
        VolumeDTO.validateJsonElement(jsonObj.get("volume"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectDTOv2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectDTOv2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectDTOv2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectDTOv2.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectDTOv2>() {
           @Override
           public void write(JsonWriter out, ProjectDTOv2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectDTOv2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectDTOv2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectDTOv2
   * @throws IOException if the JSON string is invalid with respect to ProjectDTOv2
   */
  public static ProjectDTOv2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectDTOv2.class);
  }

  /**
   * Convert an instance of ProjectDTOv2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

