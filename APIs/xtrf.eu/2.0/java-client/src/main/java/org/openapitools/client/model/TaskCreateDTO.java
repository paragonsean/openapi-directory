/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClassicPeopleDTO;
import org.openapitools.client.model.CommonLanguageCombinationDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.ProjectDatesDTO;
import org.openapitools.client.model.TaskFileDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskCreateDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskCreateDTO {
  public static final String SERIALIZED_NAME_CLIENT_TASK_P_O_NUMBER = "clientTaskPONumber";
  @SerializedName(SERIALIZED_NAME_CLIENT_TASK_P_O_NUMBER)
  private String clientTaskPONumber;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private ProjectDatesDTO dates;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<TaskFileDTO> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private InstructionsDTO instructions;

  public static final String SERIALIZED_NAME_LANGUAGE_COMBINATION = "languageCombination";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_COMBINATION)
  private CommonLanguageCombinationDTO languageCombination;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEOPLE = "people";
  @SerializedName(SERIALIZED_NAME_PEOPLE)
  private ClassicPeopleDTO people;

  public static final String SERIALIZED_NAME_SPECIALIZATION_ID = "specializationId";
  @SerializedName(SERIALIZED_NAME_SPECIALIZATION_ID)
  private Long specializationId;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private Long workflowId;

  public TaskCreateDTO() {
  }

  public TaskCreateDTO clientTaskPONumber(String clientTaskPONumber) {
    this.clientTaskPONumber = clientTaskPONumber;
    return this;
  }

  /**
   * client task PO number
   * @return clientTaskPONumber
   */
  @javax.annotation.Nullable
  public String getClientTaskPONumber() {
    return clientTaskPONumber;
  }

  public void setClientTaskPONumber(String clientTaskPONumber) {
    this.clientTaskPONumber = clientTaskPONumber;
  }


  public TaskCreateDTO dates(ProjectDatesDTO dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public ProjectDatesDTO getDates() {
    return dates;
  }

  public void setDates(ProjectDatesDTO dates) {
    this.dates = dates;
  }


  public TaskCreateDTO files(List<TaskFileDTO> files) {
    this.files = files;
    return this;
  }

  public TaskCreateDTO addFilesItem(TaskFileDTO filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * files
   * @return files
   */
  @javax.annotation.Nullable
  public List<TaskFileDTO> getFiles() {
    return files;
  }

  public void setFiles(List<TaskFileDTO> files) {
    this.files = files;
  }


  public TaskCreateDTO instructions(InstructionsDTO instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * Get instructions
   * @return instructions
   */
  @javax.annotation.Nullable
  public InstructionsDTO getInstructions() {
    return instructions;
  }

  public void setInstructions(InstructionsDTO instructions) {
    this.instructions = instructions;
  }


  public TaskCreateDTO languageCombination(CommonLanguageCombinationDTO languageCombination) {
    this.languageCombination = languageCombination;
    return this;
  }

  /**
   * Get languageCombination
   * @return languageCombination
   */
  @javax.annotation.Nullable
  public CommonLanguageCombinationDTO getLanguageCombination() {
    return languageCombination;
  }

  public void setLanguageCombination(CommonLanguageCombinationDTO languageCombination) {
    this.languageCombination = languageCombination;
  }


  public TaskCreateDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TaskCreateDTO people(ClassicPeopleDTO people) {
    this.people = people;
    return this;
  }

  /**
   * Get people
   * @return people
   */
  @javax.annotation.Nullable
  public ClassicPeopleDTO getPeople() {
    return people;
  }

  public void setPeople(ClassicPeopleDTO people) {
    this.people = people;
  }


  public TaskCreateDTO specializationId(Long specializationId) {
    this.specializationId = specializationId;
    return this;
  }

  /**
   * specialization
   * @return specializationId
   */
  @javax.annotation.Nullable
  public Long getSpecializationId() {
    return specializationId;
  }

  public void setSpecializationId(Long specializationId) {
    this.specializationId = specializationId;
  }


  public TaskCreateDTO workflowId(Long workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * workflow
   * @return workflowId
   */
  @javax.annotation.Nullable
  public Long getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(Long workflowId) {
    this.workflowId = workflowId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskCreateDTO taskCreateDTO = (TaskCreateDTO) o;
    return Objects.equals(this.clientTaskPONumber, taskCreateDTO.clientTaskPONumber) &&
        Objects.equals(this.dates, taskCreateDTO.dates) &&
        Objects.equals(this.files, taskCreateDTO.files) &&
        Objects.equals(this.instructions, taskCreateDTO.instructions) &&
        Objects.equals(this.languageCombination, taskCreateDTO.languageCombination) &&
        Objects.equals(this.name, taskCreateDTO.name) &&
        Objects.equals(this.people, taskCreateDTO.people) &&
        Objects.equals(this.specializationId, taskCreateDTO.specializationId) &&
        Objects.equals(this.workflowId, taskCreateDTO.workflowId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientTaskPONumber, dates, files, instructions, languageCombination, name, people, specializationId, workflowId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskCreateDTO {\n");
    sb.append("    clientTaskPONumber: ").append(toIndentedString(clientTaskPONumber)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    languageCombination: ").append(toIndentedString(languageCombination)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    people: ").append(toIndentedString(people)).append("\n");
    sb.append("    specializationId: ").append(toIndentedString(specializationId)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientTaskPONumber");
    openapiFields.add("dates");
    openapiFields.add("files");
    openapiFields.add("instructions");
    openapiFields.add("languageCombination");
    openapiFields.add("name");
    openapiFields.add("people");
    openapiFields.add("specializationId");
    openapiFields.add("workflowId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskCreateDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskCreateDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskCreateDTO is not found in the empty JSON string", TaskCreateDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskCreateDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskCreateDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientTaskPONumber") != null && !jsonObj.get("clientTaskPONumber").isJsonNull()) && !jsonObj.get("clientTaskPONumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTaskPONumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientTaskPONumber").toString()));
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        ProjectDatesDTO.validateJsonElement(jsonObj.get("dates"));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            TaskFileDTO.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `instructions`
      if (jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) {
        InstructionsDTO.validateJsonElement(jsonObj.get("instructions"));
      }
      // validate the optional field `languageCombination`
      if (jsonObj.get("languageCombination") != null && !jsonObj.get("languageCombination").isJsonNull()) {
        CommonLanguageCombinationDTO.validateJsonElement(jsonObj.get("languageCombination"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `people`
      if (jsonObj.get("people") != null && !jsonObj.get("people").isJsonNull()) {
        ClassicPeopleDTO.validateJsonElement(jsonObj.get("people"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskCreateDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskCreateDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskCreateDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskCreateDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskCreateDTO>() {
           @Override
           public void write(JsonWriter out, TaskCreateDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskCreateDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskCreateDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskCreateDTO
   * @throws IOException if the JSON string is invalid with respect to TaskCreateDTO
   */
  public static TaskCreateDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskCreateDTO.class);
  }

  /**
   * Convert an instance of TaskCreateDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

