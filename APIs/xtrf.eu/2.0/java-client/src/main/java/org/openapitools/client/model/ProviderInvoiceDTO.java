/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ProviderInvoiceDatesDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProviderInvoiceDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderInvoiceDTO {
  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private Long currencyId;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private ProviderInvoiceDatesDTO dates;

  public static final String SERIALIZED_NAME_DRAFT_NUMBER = "draftNumber";
  @SerializedName(SERIALIZED_NAME_DRAFT_NUMBER)
  private String draftNumber;

  public static final String SERIALIZED_NAME_FINAL_NUMBER = "finalNumber";
  @SerializedName(SERIALIZED_NAME_FINAL_NUMBER)
  private String finalNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INTERNAL_NUMBER = "internalNumber";
  @SerializedName(SERIALIZED_NAME_INTERNAL_NUMBER)
  private String internalNumber;

  public static final String SERIALIZED_NAME_JOBS_NET_VALUE = "jobsNetValue";
  @SerializedName(SERIALIZED_NAME_JOBS_NET_VALUE)
  private BigDecimal jobsNetValue;

  public static final String SERIALIZED_NAME_NOTES_FROM_PROVIDER = "notesFromProvider";
  @SerializedName(SERIALIZED_NAME_NOTES_FROM_PROVIDER)
  private String notesFromProvider;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    NOT_PAID("NOT_PAID"),
    
    FULLY_PAID("FULLY_PAID"),
    
    IRRECOVERABLE("IRRECOVERABLE"),
    
    PARTIALLY_PAID("PARTIALLY_PAID");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private Long providerId;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    POSTPONED("POSTPONED"),
    
    TO_BE_SENT("TO_BE_SENT"),
    
    SENT("SENT"),
    
    CONFIRMED("CONFIRMED"),
    
    BILL_CREATED("BILL_CREATED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TOTAL_GROSS = "totalGross";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS)
  private BigDecimal totalGross;

  public static final String SERIALIZED_NAME_TOTAL_GROSS_IN_WORDS = "totalGrossInWords";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS_IN_WORDS)
  private String totalGrossInWords;

  public static final String SERIALIZED_NAME_TOTAL_NETTO = "totalNetto";
  @SerializedName(SERIALIZED_NAME_TOTAL_NETTO)
  private BigDecimal totalNetto;

  public ProviderInvoiceDTO() {
  }

  public ProviderInvoiceDTO currencyId(Long currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public Long getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Long currencyId) {
    this.currencyId = currencyId;
  }


  public ProviderInvoiceDTO dates(ProviderInvoiceDatesDTO dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public ProviderInvoiceDatesDTO getDates() {
    return dates;
  }

  public void setDates(ProviderInvoiceDatesDTO dates) {
    this.dates = dates;
  }


  public ProviderInvoiceDTO draftNumber(String draftNumber) {
    this.draftNumber = draftNumber;
    return this;
  }

  /**
   * Get draftNumber
   * @return draftNumber
   */
  @javax.annotation.Nullable
  public String getDraftNumber() {
    return draftNumber;
  }

  public void setDraftNumber(String draftNumber) {
    this.draftNumber = draftNumber;
  }


  public ProviderInvoiceDTO finalNumber(String finalNumber) {
    this.finalNumber = finalNumber;
    return this;
  }

  /**
   * Get finalNumber
   * @return finalNumber
   */
  @javax.annotation.Nullable
  public String getFinalNumber() {
    return finalNumber;
  }

  public void setFinalNumber(String finalNumber) {
    this.finalNumber = finalNumber;
  }


  public ProviderInvoiceDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ProviderInvoiceDTO internalNumber(String internalNumber) {
    this.internalNumber = internalNumber;
    return this;
  }

  /**
   * Get internalNumber
   * @return internalNumber
   */
  @javax.annotation.Nullable
  public String getInternalNumber() {
    return internalNumber;
  }

  public void setInternalNumber(String internalNumber) {
    this.internalNumber = internalNumber;
  }


  public ProviderInvoiceDTO jobsNetValue(BigDecimal jobsNetValue) {
    this.jobsNetValue = jobsNetValue;
    return this;
  }

  /**
   * Get jobsNetValue
   * @return jobsNetValue
   */
  @javax.annotation.Nullable
  public BigDecimal getJobsNetValue() {
    return jobsNetValue;
  }

  public void setJobsNetValue(BigDecimal jobsNetValue) {
    this.jobsNetValue = jobsNetValue;
  }


  public ProviderInvoiceDTO notesFromProvider(String notesFromProvider) {
    this.notesFromProvider = notesFromProvider;
    return this;
  }

  /**
   * Get notesFromProvider
   * @return notesFromProvider
   */
  @javax.annotation.Nullable
  public String getNotesFromProvider() {
    return notesFromProvider;
  }

  public void setNotesFromProvider(String notesFromProvider) {
    this.notesFromProvider = notesFromProvider;
  }


  public ProviderInvoiceDTO paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * Get paymentStatus
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public ProviderInvoiceDTO providerId(Long providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * Get providerId
   * @return providerId
   */
  @javax.annotation.Nullable
  public Long getProviderId() {
    return providerId;
  }

  public void setProviderId(Long providerId) {
    this.providerId = providerId;
  }


  public ProviderInvoiceDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ProviderInvoiceDTO totalGross(BigDecimal totalGross) {
    this.totalGross = totalGross;
    return this;
  }

  /**
   * Get totalGross
   * @return totalGross
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalGross() {
    return totalGross;
  }

  public void setTotalGross(BigDecimal totalGross) {
    this.totalGross = totalGross;
  }


  public ProviderInvoiceDTO totalGrossInWords(String totalGrossInWords) {
    this.totalGrossInWords = totalGrossInWords;
    return this;
  }

  /**
   * Get totalGrossInWords
   * @return totalGrossInWords
   */
  @javax.annotation.Nullable
  public String getTotalGrossInWords() {
    return totalGrossInWords;
  }

  public void setTotalGrossInWords(String totalGrossInWords) {
    this.totalGrossInWords = totalGrossInWords;
  }


  public ProviderInvoiceDTO totalNetto(BigDecimal totalNetto) {
    this.totalNetto = totalNetto;
    return this;
  }

  /**
   * Get totalNetto
   * @return totalNetto
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalNetto() {
    return totalNetto;
  }

  public void setTotalNetto(BigDecimal totalNetto) {
    this.totalNetto = totalNetto;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderInvoiceDTO providerInvoiceDTO = (ProviderInvoiceDTO) o;
    return Objects.equals(this.currencyId, providerInvoiceDTO.currencyId) &&
        Objects.equals(this.dates, providerInvoiceDTO.dates) &&
        Objects.equals(this.draftNumber, providerInvoiceDTO.draftNumber) &&
        Objects.equals(this.finalNumber, providerInvoiceDTO.finalNumber) &&
        Objects.equals(this.id, providerInvoiceDTO.id) &&
        Objects.equals(this.internalNumber, providerInvoiceDTO.internalNumber) &&
        Objects.equals(this.jobsNetValue, providerInvoiceDTO.jobsNetValue) &&
        Objects.equals(this.notesFromProvider, providerInvoiceDTO.notesFromProvider) &&
        Objects.equals(this.paymentStatus, providerInvoiceDTO.paymentStatus) &&
        Objects.equals(this.providerId, providerInvoiceDTO.providerId) &&
        Objects.equals(this.status, providerInvoiceDTO.status) &&
        Objects.equals(this.totalGross, providerInvoiceDTO.totalGross) &&
        Objects.equals(this.totalGrossInWords, providerInvoiceDTO.totalGrossInWords) &&
        Objects.equals(this.totalNetto, providerInvoiceDTO.totalNetto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyId, dates, draftNumber, finalNumber, id, internalNumber, jobsNetValue, notesFromProvider, paymentStatus, providerId, status, totalGross, totalGrossInWords, totalNetto);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderInvoiceDTO {\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    draftNumber: ").append(toIndentedString(draftNumber)).append("\n");
    sb.append("    finalNumber: ").append(toIndentedString(finalNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalNumber: ").append(toIndentedString(internalNumber)).append("\n");
    sb.append("    jobsNetValue: ").append(toIndentedString(jobsNetValue)).append("\n");
    sb.append("    notesFromProvider: ").append(toIndentedString(notesFromProvider)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalGross: ").append(toIndentedString(totalGross)).append("\n");
    sb.append("    totalGrossInWords: ").append(toIndentedString(totalGrossInWords)).append("\n");
    sb.append("    totalNetto: ").append(toIndentedString(totalNetto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyId");
    openapiFields.add("dates");
    openapiFields.add("draftNumber");
    openapiFields.add("finalNumber");
    openapiFields.add("id");
    openapiFields.add("internalNumber");
    openapiFields.add("jobsNetValue");
    openapiFields.add("notesFromProvider");
    openapiFields.add("paymentStatus");
    openapiFields.add("providerId");
    openapiFields.add("status");
    openapiFields.add("totalGross");
    openapiFields.add("totalGrossInWords");
    openapiFields.add("totalNetto");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderInvoiceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderInvoiceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderInvoiceDTO is not found in the empty JSON string", ProviderInvoiceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderInvoiceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderInvoiceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        ProviderInvoiceDatesDTO.validateJsonElement(jsonObj.get("dates"));
      }
      if ((jsonObj.get("draftNumber") != null && !jsonObj.get("draftNumber").isJsonNull()) && !jsonObj.get("draftNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draftNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draftNumber").toString()));
      }
      if ((jsonObj.get("finalNumber") != null && !jsonObj.get("finalNumber").isJsonNull()) && !jsonObj.get("finalNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalNumber").toString()));
      }
      if ((jsonObj.get("internalNumber") != null && !jsonObj.get("internalNumber").isJsonNull()) && !jsonObj.get("internalNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalNumber").toString()));
      }
      if ((jsonObj.get("notesFromProvider") != null && !jsonObj.get("notesFromProvider").isJsonNull()) && !jsonObj.get("notesFromProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notesFromProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notesFromProvider").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      // validate the optional field `paymentStatus`
      if (jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) {
        PaymentStatusEnum.validateJsonElement(jsonObj.get("paymentStatus"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("totalGrossInWords") != null && !jsonObj.get("totalGrossInWords").isJsonNull()) && !jsonObj.get("totalGrossInWords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalGrossInWords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalGrossInWords").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderInvoiceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderInvoiceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderInvoiceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderInvoiceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderInvoiceDTO>() {
           @Override
           public void write(JsonWriter out, ProviderInvoiceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderInvoiceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderInvoiceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderInvoiceDTO
   * @throws IOException if the JSON string is invalid with respect to ProviderInvoiceDTO
   */
  public static ProviderInvoiceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderInvoiceDTO.class);
  }

  /**
   * Convert an instance of ProviderInvoiceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

