/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessTokenDTO;
import org.openapitools.client.model.AccessTokenRequestDTO;
import org.openapitools.client.model.AddressDTO;
import org.openapitools.client.model.ContactDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.CustomerDTO;
import org.openapitools.client.model.CustomerPersonDTO;
import org.openapitools.client.model.EntityWithNameDTO;
import org.openapitools.client.model.PersonContactDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for create2
     * @param customerPersonDTO Brand new person. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create2Call(CustomerPersonDTO customerPersonDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerPersonDTO;

        // create path and map variables
        String localVarPath = "/customers/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create2ValidateBeforeCall(CustomerPersonDTO customerPersonDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerPersonDTO' is set
        if (customerPersonDTO == null) {
            throw new ApiException("Missing the required parameter 'customerPersonDTO' when calling create2(Async)");
        }

        return create2Call(customerPersonDTO, _callback);

    }

    /**
     * Creates a new person.
     * Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here.
     * @param customerPersonDTO Brand new person. (required)
     * @return CustomerPersonDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPersonDTO create2(CustomerPersonDTO customerPersonDTO) throws ApiException {
        ApiResponse<CustomerPersonDTO> localVarResp = create2WithHttpInfo(customerPersonDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new person.
     * Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here.
     * @param customerPersonDTO Brand new person. (required)
     * @return ApiResponse&lt;CustomerPersonDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPersonDTO> create2WithHttpInfo(CustomerPersonDTO customerPersonDTO) throws ApiException {
        okhttp3.Call localVarCall = create2ValidateBeforeCall(customerPersonDTO, null);
        Type localVarReturnType = new TypeToken<CustomerPersonDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new person. (asynchronously)
     * Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here.
     * @param customerPersonDTO Brand new person. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create2Async(CustomerPersonDTO customerPersonDTO, final ApiCallback<CustomerPersonDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = create2ValidateBeforeCall(customerPersonDTO, _callback);
        Type localVarReturnType = new TypeToken<CustomerPersonDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create3
     * @param customerDTO Created user object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create3Call(CustomerDTO customerDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerDTO;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create3ValidateBeforeCall(CustomerDTO customerDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerDTO' is set
        if (customerDTO == null) {
            throw new ApiException("Missing the required parameter 'customerDTO' when calling create3(Async)");
        }

        return create3Call(customerDTO, _callback);

    }

    /**
     * Creates a new client.
     * Creates a new client. All available fields are presented in PUT request.&lt;p&gt;   Required fields:   &lt;ul&gt;     &lt;li&gt;name&lt;/li&gt;     &lt;li&gt;fullName&lt;/li&gt;     &lt;li&gt;contact -&gt; emails -&gt; primary&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
     * @param customerDTO Created user object (required)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDTO create3(CustomerDTO customerDTO) throws ApiException {
        ApiResponse<CustomerDTO> localVarResp = create3WithHttpInfo(customerDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new client.
     * Creates a new client. All available fields are presented in PUT request.&lt;p&gt;   Required fields:   &lt;ul&gt;     &lt;li&gt;name&lt;/li&gt;     &lt;li&gt;fullName&lt;/li&gt;     &lt;li&gt;contact -&gt; emails -&gt; primary&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
     * @param customerDTO Created user object (required)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDTO> create3WithHttpInfo(CustomerDTO customerDTO) throws ApiException {
        okhttp3.Call localVarCall = create3ValidateBeforeCall(customerDTO, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new client. (asynchronously)
     * Creates a new client. All available fields are presented in PUT request.&lt;p&gt;   Required fields:   &lt;ul&gt;     &lt;li&gt;name&lt;/li&gt;     &lt;li&gt;fullName&lt;/li&gt;     &lt;li&gt;contact -&gt; emails -&gt; primary&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
     * @param customerDTO Created user object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create3Async(CustomerDTO customerDTO, final ApiCallback<CustomerDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = create3ValidateBeforeCall(customerDTO, _callback);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete3
     * @param personId person&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete3Call(Long personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/persons/{personId}"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete3ValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling delete3(Async)");
        }

        return delete3Call(personId, _callback);

    }

    /**
     * Removes a person.
     * Removes a person.
     * @param personId person&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete3(Long personId) throws ApiException {
        delete3WithHttpInfo(personId);
    }

    /**
     * Removes a person.
     * Removes a person.
     * @param personId person&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete3WithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = delete3ValidateBeforeCall(personId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a person. (asynchronously)
     * Removes a person.
     * @param personId person&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete3Async(Long personId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete3ValidateBeforeCall(personId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete4
     * @param priceListId customer price list&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete4Call(Long priceListId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/priceLists/{priceListId}"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete4ValidateBeforeCall(Long priceListId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling delete4(Async)");
        }

        return delete4Call(priceListId, _callback);

    }

    /**
     * Removes a customer price list.
     * Removes a customer price list.
     * @param priceListId customer price list&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete4(Long priceListId) throws ApiException {
        delete4WithHttpInfo(priceListId);
    }

    /**
     * Removes a customer price list.
     * Removes a customer price list.
     * @param priceListId customer price list&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete4WithHttpInfo(Long priceListId) throws ApiException {
        okhttp3.Call localVarCall = delete4ValidateBeforeCall(priceListId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a customer price list. (asynchronously)
     * Removes a customer price list.
     * @param priceListId customer price list&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete4Async(Long priceListId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete4ValidateBeforeCall(priceListId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete5
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete5Call(Long customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete5ValidateBeforeCall(Long customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling delete5(Async)");
        }

        return delete5Call(customerId, _callback);

    }

    /**
     * Removes a client.
     * Removes a client.
     * @param customerId client&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete5(Long customerId) throws ApiException {
        delete5WithHttpInfo(customerId);
    }

    /**
     * Removes a client.
     * Removes a client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete5WithHttpInfo(Long customerId) throws ApiException {
        okhttp3.Call localVarCall = delete5ValidateBeforeCall(customerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a client. (asynchronously)
     * Removes a client.
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete5Async(Long customerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete5ValidateBeforeCall(customerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateSingleUseSignInToken
     * @param accessTokenRequestDTO Generated sign-in token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSingleUseSignInTokenCall(AccessTokenRequestDTO accessTokenRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessTokenRequestDTO;

        // create path and map variables
        String localVarPath = "/customers/persons/accessToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSingleUseSignInTokenValidateBeforeCall(AccessTokenRequestDTO accessTokenRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessTokenRequestDTO' is set
        if (accessTokenRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'accessTokenRequestDTO' when calling generateSingleUseSignInToken(Async)");
        }

        return generateSingleUseSignInTokenCall(accessTokenRequestDTO, _callback);

    }

    /**
     * Generates a single use sign-in token.
     * Generates a single use sign-in token for the customer person found for given login or e-mail. Returns &#39;url&#39; and &#39;token&#39; which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post &#39;token&#39; provided as the &#39;accessToken&#39; form param to the &#39;url&#39; using POST method.Detailed description is available in the Customer API &lt;a href&#x3D;\&quot;/api-doc/customer-api/authentication\&quot;&gt;authentication&lt;/a&gt;.
     * @param accessTokenRequestDTO Generated sign-in token. (required)
     * @return AccessTokenDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccessTokenDTO generateSingleUseSignInToken(AccessTokenRequestDTO accessTokenRequestDTO) throws ApiException {
        ApiResponse<AccessTokenDTO> localVarResp = generateSingleUseSignInTokenWithHttpInfo(accessTokenRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Generates a single use sign-in token.
     * Generates a single use sign-in token for the customer person found for given login or e-mail. Returns &#39;url&#39; and &#39;token&#39; which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post &#39;token&#39; provided as the &#39;accessToken&#39; form param to the &#39;url&#39; using POST method.Detailed description is available in the Customer API &lt;a href&#x3D;\&quot;/api-doc/customer-api/authentication\&quot;&gt;authentication&lt;/a&gt;.
     * @param accessTokenRequestDTO Generated sign-in token. (required)
     * @return ApiResponse&lt;AccessTokenDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessTokenDTO> generateSingleUseSignInTokenWithHttpInfo(AccessTokenRequestDTO accessTokenRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = generateSingleUseSignInTokenValidateBeforeCall(accessTokenRequestDTO, null);
        Type localVarReturnType = new TypeToken<AccessTokenDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a single use sign-in token. (asynchronously)
     * Generates a single use sign-in token for the customer person found for given login or e-mail. Returns &#39;url&#39; and &#39;token&#39; which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post &#39;token&#39; provided as the &#39;accessToken&#39; form param to the &#39;url&#39; using POST method.Detailed description is available in the Customer API &lt;a href&#x3D;\&quot;/api-doc/customer-api/authentication\&quot;&gt;authentication&lt;/a&gt;.
     * @param accessTokenRequestDTO Generated sign-in token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSingleUseSignInTokenAsync(AccessTokenRequestDTO accessTokenRequestDTO, final ApiCallback<AccessTokenDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSingleUseSignInTokenValidateBeforeCall(accessTokenRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddress
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressCall(Long customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/address"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressValidateBeforeCall(Long customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAddress(Async)");
        }

        return getAddressCall(customerId, _callback);

    }

    /**
     * Returns address of a given client.
     * Returns address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return AddressDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressDTO getAddress(Long customerId) throws ApiException {
        ApiResponse<AddressDTO> localVarResp = getAddressWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns address of a given client.
     * Returns address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ApiResponse&lt;AddressDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressDTO> getAddressWithHttpInfo(Long customerId) throws ApiException {
        okhttp3.Call localVarCall = getAddressValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns address of a given client. (asynchronously)
     * Returns address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressAsync(Long customerId, final ApiCallback<AddressDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllIds1
     * @param updatedSince only persons modified since this timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds1Call(Long updatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/persons/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIds1ValidateBeforeCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        return getAllIds1Call(updatedSince, _callback);

    }

    /**
     * Returns persons&#39; internal identifiers.
     * Returns persons&#39; internal identifiers.
     * @param updatedSince only persons modified since this timestamp (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> getAllIds1(Long updatedSince) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = getAllIds1WithHttpInfo(updatedSince);
        return localVarResp.getData();
    }

    /**
     * Returns persons&#39; internal identifiers.
     * Returns persons&#39; internal identifiers.
     * @param updatedSince only persons modified since this timestamp (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> getAllIds1WithHttpInfo(Long updatedSince) throws ApiException {
        okhttp3.Call localVarCall = getAllIds1ValidateBeforeCall(updatedSince, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns persons&#39; internal identifiers. (asynchronously)
     * Returns persons&#39; internal identifiers.
     * @param updatedSince only persons modified since this timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds1Async(Long updatedSince, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIds1ValidateBeforeCall(updatedSince, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllIds2
     * @param updatedSince only clients modified since this timestamp (optional)
     * @param nameEquals exact name of client (optional)
     * @param emailEquals exact email of client (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds2Call(Long updatedSince, String nameEquals, String emailEquals, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        if (nameEquals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameEquals", nameEquals));
        }

        if (emailEquals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailEquals", emailEquals));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIds2ValidateBeforeCall(Long updatedSince, String nameEquals, String emailEquals, final ApiCallback _callback) throws ApiException {
        return getAllIds2Call(updatedSince, nameEquals, emailEquals, _callback);

    }

    /**
     * Returns clients&#39; internal identifiers.
     * Returns clients&#39; internal identifiers.
     * @param updatedSince only clients modified since this timestamp (optional)
     * @param nameEquals exact name of client (optional)
     * @param emailEquals exact email of client (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> getAllIds2(Long updatedSince, String nameEquals, String emailEquals) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = getAllIds2WithHttpInfo(updatedSince, nameEquals, emailEquals);
        return localVarResp.getData();
    }

    /**
     * Returns clients&#39; internal identifiers.
     * Returns clients&#39; internal identifiers.
     * @param updatedSince only clients modified since this timestamp (optional)
     * @param nameEquals exact name of client (optional)
     * @param emailEquals exact email of client (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> getAllIds2WithHttpInfo(Long updatedSince, String nameEquals, String emailEquals) throws ApiException {
        okhttp3.Call localVarCall = getAllIds2ValidateBeforeCall(updatedSince, nameEquals, emailEquals, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns clients&#39; internal identifiers. (asynchronously)
     * Returns clients&#39; internal identifiers.
     * @param updatedSince only clients modified since this timestamp (optional)
     * @param nameEquals exact name of client (optional)
     * @param emailEquals exact email of client (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds2Async(Long updatedSince, String nameEquals, String emailEquals, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIds2ValidateBeforeCall(updatedSince, nameEquals, emailEquals, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllNamesWithIds
     * @param updatedSince only clients modified since this timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllNamesWithIdsCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllNamesWithIdsValidateBeforeCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        return getAllNamesWithIdsCall(updatedSince, _callback);

    }

    /**
     * Returns list of simple clients representations
     * Returns list of simple clients representations
     * @param updatedSince only clients modified since this timestamp (optional)
     * @return List&lt;EntityWithNameDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityWithNameDTO> getAllNamesWithIds(Long updatedSince) throws ApiException {
        ApiResponse<List<EntityWithNameDTO>> localVarResp = getAllNamesWithIdsWithHttpInfo(updatedSince);
        return localVarResp.getData();
    }

    /**
     * Returns list of simple clients representations
     * Returns list of simple clients representations
     * @param updatedSince only clients modified since this timestamp (optional)
     * @return ApiResponse&lt;List&lt;EntityWithNameDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityWithNameDTO>> getAllNamesWithIdsWithHttpInfo(Long updatedSince) throws ApiException {
        okhttp3.Call localVarCall = getAllNamesWithIdsValidateBeforeCall(updatedSince, null);
        Type localVarReturnType = new TypeToken<List<EntityWithNameDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of simple clients representations (asynchronously)
     * Returns list of simple clients representations
     * @param updatedSince only clients modified since this timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllNamesWithIdsAsync(Long updatedSince, final ApiCallback<List<EntityWithNameDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllNamesWithIdsValidateBeforeCall(updatedSince, _callback);
        Type localVarReturnType = new TypeToken<List<EntityWithNameDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById1
     * @param personId person&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById1Call(Long personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/persons/{personId}"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById1ValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getById1(Async)");
        }

        return getById1Call(personId, _callback);

    }

    /**
     * Returns person details.
     * Returns person details.
     * @param personId person&#39;s internal identifier (required)
     * @return CustomerPersonDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPersonDTO getById1(Long personId) throws ApiException {
        ApiResponse<CustomerPersonDTO> localVarResp = getById1WithHttpInfo(personId);
        return localVarResp.getData();
    }

    /**
     * Returns person details.
     * Returns person details.
     * @param personId person&#39;s internal identifier (required)
     * @return ApiResponse&lt;CustomerPersonDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPersonDTO> getById1WithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = getById1ValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<CustomerPersonDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns person details. (asynchronously)
     * Returns person details.
     * @param personId person&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById1Async(Long personId, final ApiCallback<CustomerPersonDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById1ValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<CustomerPersonDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById2
     * @param customerId client&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: persons) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById2Call(Long customerId, String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById2ValidateBeforeCall(Long customerId, String embed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getById2(Async)");
        }

        return getById2Call(customerId, embed, _callback);

    }

    /**
     * Returns client details.
     * Returns client details.
     * @param customerId client&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: persons) (optional)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDTO getById2(Long customerId, String embed) throws ApiException {
        ApiResponse<CustomerDTO> localVarResp = getById2WithHttpInfo(customerId, embed);
        return localVarResp.getData();
    }

    /**
     * Returns client details.
     * Returns client details.
     * @param customerId client&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: persons) (optional)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDTO> getById2WithHttpInfo(Long customerId, String embed) throws ApiException {
        okhttp3.Call localVarCall = getById2ValidateBeforeCall(customerId, embed, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns client details. (asynchronously)
     * Returns client details.
     * @param customerId client&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: persons) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById2Async(Long customerId, String embed, final ApiCallback<CustomerDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById2ValidateBeforeCall(customerId, embed, _callback);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategories
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesCall(Long customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/categories"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(Long customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCategories(Async)");
        }

        return getCategoriesCall(customerId, _callback);

    }

    /**
     * Returns categories of a given client.
     * Returns categories of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return List&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Long> getCategories(Long customerId) throws ApiException {
        ApiResponse<List<Long>> localVarResp = getCategoriesWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns categories of a given client.
     * Returns categories of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Long>> getCategoriesWithHttpInfo(Long customerId) throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns categories of a given client. (asynchronously)
     * Returns categories of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesAsync(Long customerId, final ApiCallback<List<Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContact
     * @param personId person&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactCall(Long personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/persons/{personId}/contact"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getContact(Async)");
        }

        return getContactCall(personId, _callback);

    }

    /**
     * Returns contact of a given person.
     * Returns contact of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @return PersonContactDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PersonContactDTO getContact(Long personId) throws ApiException {
        ApiResponse<PersonContactDTO> localVarResp = getContactWithHttpInfo(personId);
        return localVarResp.getData();
    }

    /**
     * Returns contact of a given person.
     * Returns contact of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @return ApiResponse&lt;PersonContactDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonContactDTO> getContactWithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = getContactValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonContactDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns contact of a given person. (asynchronously)
     * Returns contact of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactAsync(Long personId, final ApiCallback<PersonContactDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonContactDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContact1
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContact1Call(Long customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/contact"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContact1ValidateBeforeCall(Long customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getContact1(Async)");
        }

        return getContact1Call(customerId, _callback);

    }

    /**
     * Returns contact of a given client.
     * Returns contact of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ContactDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContactDTO getContact1(Long customerId) throws ApiException {
        ApiResponse<ContactDTO> localVarResp = getContact1WithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns contact of a given client.
     * Returns contact of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ApiResponse&lt;ContactDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactDTO> getContact1WithHttpInfo(Long customerId) throws ApiException {
        okhttp3.Call localVarCall = getContact1ValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns contact of a given client. (asynchronously)
     * Returns contact of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContact1Async(Long customerId, final ApiCallback<ContactDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContact1ValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCorrespondenceAddress
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorrespondenceAddressCall(Long customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/correspondenceAddress"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCorrespondenceAddressValidateBeforeCall(Long customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCorrespondenceAddress(Async)");
        }

        return getCorrespondenceAddressCall(customerId, _callback);

    }

    /**
     * Returns correspondence address of a given client.
     * Returns correspondence address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return AddressDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressDTO getCorrespondenceAddress(Long customerId) throws ApiException {
        ApiResponse<AddressDTO> localVarResp = getCorrespondenceAddressWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns correspondence address of a given client.
     * Returns correspondence address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ApiResponse&lt;AddressDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressDTO> getCorrespondenceAddressWithHttpInfo(Long customerId) throws ApiException {
        okhttp3.Call localVarCall = getCorrespondenceAddressValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns correspondence address of a given client. (asynchronously)
     * Returns correspondence address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCorrespondenceAddressAsync(Long customerId, final ApiCallback<AddressDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCorrespondenceAddressValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomField
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldCall(Long customerId, String customFieldKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/customFields/{customFieldKey}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "customFieldKey" + "}", localVarApiClient.escapeString(customFieldKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldValidateBeforeCall(Long customerId, String customFieldKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomField(Async)");
        }

        // verify the required parameter 'customFieldKey' is set
        if (customFieldKey == null) {
            throw new ApiException("Missing the required parameter 'customFieldKey' when calling getCustomField(Async)");
        }

        return getCustomFieldCall(customerId, customFieldKey, _callback);

    }

    /**
     * Returns custom field of a given client.
     * Returns custom field of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @return CustomFieldDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomFieldDTO getCustomField(Long customerId, String customFieldKey) throws ApiException {
        ApiResponse<CustomFieldDTO> localVarResp = getCustomFieldWithHttpInfo(customerId, customFieldKey);
        return localVarResp.getData();
    }

    /**
     * Returns custom field of a given client.
     * Returns custom field of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @return ApiResponse&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomFieldDTO> getCustomFieldWithHttpInfo(Long customerId, String customFieldKey) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(customerId, customFieldKey, null);
        Type localVarReturnType = new TypeToken<CustomFieldDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns custom field of a given client. (asynchronously)
     * Returns custom field of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldAsync(Long customerId, String customFieldKey, final ApiCallback<CustomFieldDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldValidateBeforeCall(customerId, customFieldKey, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFields
     * @param personId person&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldsCall(Long personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/persons/{personId}/customFields"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getCustomFields(Async)");
        }

        return getCustomFieldsCall(personId, _callback);

    }

    /**
     * Returns custom fields of a given person.
     * Returns custom fields of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> getCustomFields(Long personId) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = getCustomFieldsWithHttpInfo(personId);
        return localVarResp.getData();
    }

    /**
     * Returns custom fields of a given person.
     * Returns custom fields of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> getCustomFieldsWithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns custom fields of a given person. (asynchronously)
     * Returns custom fields of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFieldsAsync(Long personId, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFields1
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields1Call(Long customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/customFields"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFields1ValidateBeforeCall(Long customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomFields1(Async)");
        }

        return getCustomFields1Call(customerId, _callback);

    }

    /**
     * Returns custom fields of a given client.
     * Returns custom fields of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> getCustomFields1(Long customerId) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = getCustomFields1WithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns custom fields of a given client.
     * Returns custom fields of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> getCustomFields1WithHttpInfo(Long customerId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFields1ValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns custom fields of a given client. (asynchronously)
     * Returns custom fields of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields1Async(Long customerId, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFields1ValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIndustries
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndustriesCall(Long customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/industries"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIndustriesValidateBeforeCall(Long customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getIndustries(Async)");
        }

        return getIndustriesCall(customerId, _callback);

    }

    /**
     * Returns industries of a given client.
     * Returns industries of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return List&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Long> getIndustries(Long customerId) throws ApiException {
        ApiResponse<List<Long>> localVarResp = getIndustriesWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns industries of a given client.
     * Returns industries of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Long>> getIndustriesWithHttpInfo(Long customerId) throws ApiException {
        okhttp3.Call localVarCall = getIndustriesValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns industries of a given client. (asynchronously)
     * Returns industries of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndustriesAsync(Long customerId, final ApiCallback<List<Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIndustriesValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update1
     * @param personId person&#39;s internal identifier (required)
     * @param customerPersonDTO Updated existing person. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call update1Call(Long personId, CustomerPersonDTO customerPersonDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerPersonDTO;

        // create path and map variables
        String localVarPath = "/customers/persons/{personId}"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call update1ValidateBeforeCall(Long personId, CustomerPersonDTO customerPersonDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling update1(Async)");
        }

        // verify the required parameter 'customerPersonDTO' is set
        if (customerPersonDTO == null) {
            throw new ApiException("Missing the required parameter 'customerPersonDTO' when calling update1(Async)");
        }

        return update1Call(personId, customerPersonDTO, _callback);

    }

    /**
     * Updates an existing person.
     * Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them.
     * @param personId person&#39;s internal identifier (required)
     * @param customerPersonDTO Updated existing person. (required)
     * @return CustomerPersonDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPersonDTO update1(Long personId, CustomerPersonDTO customerPersonDTO) throws ApiException {
        ApiResponse<CustomerPersonDTO> localVarResp = update1WithHttpInfo(personId, customerPersonDTO);
        return localVarResp.getData();
    }

    /**
     * Updates an existing person.
     * Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them.
     * @param personId person&#39;s internal identifier (required)
     * @param customerPersonDTO Updated existing person. (required)
     * @return ApiResponse&lt;CustomerPersonDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPersonDTO> update1WithHttpInfo(Long personId, CustomerPersonDTO customerPersonDTO) throws ApiException {
        okhttp3.Call localVarCall = update1ValidateBeforeCall(personId, customerPersonDTO, null);
        Type localVarReturnType = new TypeToken<CustomerPersonDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing person. (asynchronously)
     * Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them.
     * @param personId person&#39;s internal identifier (required)
     * @param customerPersonDTO Updated existing person. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call update1Async(Long personId, CustomerPersonDTO customerPersonDTO, final ApiCallback<CustomerPersonDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = update1ValidateBeforeCall(personId, customerPersonDTO, _callback);
        Type localVarReturnType = new TypeToken<CustomerPersonDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update2
     * @param customerId client&#39;s internal identifier (required)
     * @param customerDTO Updated client (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call update2Call(Long customerId, CustomerDTO customerDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerDTO;

        // create path and map variables
        String localVarPath = "/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call update2ValidateBeforeCall(Long customerId, CustomerDTO customerDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling update2(Async)");
        }

        // verify the required parameter 'customerDTO' is set
        if (customerDTO == null) {
            throw new ApiException("Missing the required parameter 'customerDTO' when calling update2(Async)");
        }

        return update2Call(customerId, customerDTO, _callback);

    }

    /**
     * Updates an existing client.
     * Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them.
     * @param customerId client&#39;s internal identifier (required)
     * @param customerDTO Updated client (required)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDTO update2(Long customerId, CustomerDTO customerDTO) throws ApiException {
        ApiResponse<CustomerDTO> localVarResp = update2WithHttpInfo(customerId, customerDTO);
        return localVarResp.getData();
    }

    /**
     * Updates an existing client.
     * Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them.
     * @param customerId client&#39;s internal identifier (required)
     * @param customerDTO Updated client (required)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDTO> update2WithHttpInfo(Long customerId, CustomerDTO customerDTO) throws ApiException {
        okhttp3.Call localVarCall = update2ValidateBeforeCall(customerId, customerDTO, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an existing client. (asynchronously)
     * Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them.
     * @param customerId client&#39;s internal identifier (required)
     * @param customerDTO Updated client (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call update2Async(Long customerId, CustomerDTO customerDTO, final ApiCallback<CustomerDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = update2ValidateBeforeCall(customerId, customerDTO, _callback);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAddress
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAddressCall(Long customerId, AddressDTO addressDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addressDTO;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/address"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAddressValidateBeforeCall(Long customerId, AddressDTO addressDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateAddress(Async)");
        }

        // verify the required parameter 'addressDTO' is set
        if (addressDTO == null) {
            throw new ApiException("Missing the required parameter 'addressDTO' when calling updateAddress(Async)");
        }

        return updateAddressCall(customerId, addressDTO, _callback);

    }

    /**
     * Updates address of a given client.
     * Updates address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @return AddressDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressDTO updateAddress(Long customerId, AddressDTO addressDTO) throws ApiException {
        ApiResponse<AddressDTO> localVarResp = updateAddressWithHttpInfo(customerId, addressDTO);
        return localVarResp.getData();
    }

    /**
     * Updates address of a given client.
     * Updates address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @return ApiResponse&lt;AddressDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressDTO> updateAddressWithHttpInfo(Long customerId, AddressDTO addressDTO) throws ApiException {
        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(customerId, addressDTO, null);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates address of a given client. (asynchronously)
     * Updates address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAddressAsync(Long customerId, AddressDTO addressDTO, final ApiCallback<AddressDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(customerId, addressDTO, _callback);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategories
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated categories of a given client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoriesCall(Long customerId, List<Long> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/categories"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoriesValidateBeforeCall(Long customerId, List<Long> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateCategories(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateCategories(Async)");
        }

        return updateCategoriesCall(customerId, requestBody, _callback);

    }

    /**
     * Updates categories of a given client.
     * Updates categories of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated categories of a given client. (required)
     * @return List&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Long> updateCategories(Long customerId, List<Long> requestBody) throws ApiException {
        ApiResponse<List<Long>> localVarResp = updateCategoriesWithHttpInfo(customerId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Updates categories of a given client.
     * Updates categories of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated categories of a given client. (required)
     * @return ApiResponse&lt;List&lt;Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Long>> updateCategoriesWithHttpInfo(Long customerId, List<Long> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateCategoriesValidateBeforeCall(customerId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates categories of a given client. (asynchronously)
     * Updates categories of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated categories of a given client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoriesAsync(Long customerId, List<Long> requestBody, final ApiCallback<List<Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoriesValidateBeforeCall(customerId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContact
     * @param personId person&#39;s internal identifier (required)
     * @param personContactDTO Updated contact of a given person. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactCall(Long personId, PersonContactDTO personContactDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = personContactDTO;

        // create path and map variables
        String localVarPath = "/customers/persons/{personId}/contact"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactValidateBeforeCall(Long personId, PersonContactDTO personContactDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateContact(Async)");
        }

        // verify the required parameter 'personContactDTO' is set
        if (personContactDTO == null) {
            throw new ApiException("Missing the required parameter 'personContactDTO' when calling updateContact(Async)");
        }

        return updateContactCall(personId, personContactDTO, _callback);

    }

    /**
     * Updates contact of a given person.
     * Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer).
     * @param personId person&#39;s internal identifier (required)
     * @param personContactDTO Updated contact of a given person. (required)
     * @return PersonContactDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PersonContactDTO updateContact(Long personId, PersonContactDTO personContactDTO) throws ApiException {
        ApiResponse<PersonContactDTO> localVarResp = updateContactWithHttpInfo(personId, personContactDTO);
        return localVarResp.getData();
    }

    /**
     * Updates contact of a given person.
     * Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer).
     * @param personId person&#39;s internal identifier (required)
     * @param personContactDTO Updated contact of a given person. (required)
     * @return ApiResponse&lt;PersonContactDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonContactDTO> updateContactWithHttpInfo(Long personId, PersonContactDTO personContactDTO) throws ApiException {
        okhttp3.Call localVarCall = updateContactValidateBeforeCall(personId, personContactDTO, null);
        Type localVarReturnType = new TypeToken<PersonContactDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates contact of a given person. (asynchronously)
     * Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer).
     * @param personId person&#39;s internal identifier (required)
     * @param personContactDTO Updated contact of a given person. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactAsync(Long personId, PersonContactDTO personContactDTO, final ApiCallback<PersonContactDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactValidateBeforeCall(personId, personContactDTO, _callback);
        Type localVarReturnType = new TypeToken<PersonContactDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContact1
     * @param customerId client&#39;s internal identifier (required)
     * @param contactDTO Updated contact of a given client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContact1Call(Long customerId, ContactDTO contactDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactDTO;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/contact"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContact1ValidateBeforeCall(Long customerId, ContactDTO contactDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateContact1(Async)");
        }

        // verify the required parameter 'contactDTO' is set
        if (contactDTO == null) {
            throw new ApiException("Missing the required parameter 'contactDTO' when calling updateContact1(Async)");
        }

        return updateContact1Call(customerId, contactDTO, _callback);

    }

    /**
     * Updates contact of a given client.
     * Updates contact of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param contactDTO Updated contact of a given client. (required)
     * @return ContactDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContactDTO updateContact1(Long customerId, ContactDTO contactDTO) throws ApiException {
        ApiResponse<ContactDTO> localVarResp = updateContact1WithHttpInfo(customerId, contactDTO);
        return localVarResp.getData();
    }

    /**
     * Updates contact of a given client.
     * Updates contact of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param contactDTO Updated contact of a given client. (required)
     * @return ApiResponse&lt;ContactDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactDTO> updateContact1WithHttpInfo(Long customerId, ContactDTO contactDTO) throws ApiException {
        okhttp3.Call localVarCall = updateContact1ValidateBeforeCall(customerId, contactDTO, null);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates contact of a given client. (asynchronously)
     * Updates contact of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param contactDTO Updated contact of a given client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContact1Async(Long customerId, ContactDTO contactDTO, final ApiCallback<ContactDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContact1ValidateBeforeCall(customerId, contactDTO, _callback);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCorrespondenceAddress
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCorrespondenceAddressCall(Long customerId, AddressDTO addressDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addressDTO;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/correspondenceAddress"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCorrespondenceAddressValidateBeforeCall(Long customerId, AddressDTO addressDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateCorrespondenceAddress(Async)");
        }

        // verify the required parameter 'addressDTO' is set
        if (addressDTO == null) {
            throw new ApiException("Missing the required parameter 'addressDTO' when calling updateCorrespondenceAddress(Async)");
        }

        return updateCorrespondenceAddressCall(customerId, addressDTO, _callback);

    }

    /**
     * Updates correspondence address of a given client.
     * Updates correspondence address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @return AddressDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddressDTO updateCorrespondenceAddress(Long customerId, AddressDTO addressDTO) throws ApiException {
        ApiResponse<AddressDTO> localVarResp = updateCorrespondenceAddressWithHttpInfo(customerId, addressDTO);
        return localVarResp.getData();
    }

    /**
     * Updates correspondence address of a given client.
     * Updates correspondence address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @return ApiResponse&lt;AddressDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressDTO> updateCorrespondenceAddressWithHttpInfo(Long customerId, AddressDTO addressDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCorrespondenceAddressValidateBeforeCall(customerId, addressDTO, null);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates correspondence address of a given client. (asynchronously)
     * Updates correspondence address of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param addressDTO Updated address of a given client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCorrespondenceAddressAsync(Long customerId, AddressDTO addressDTO, final ApiCallback<AddressDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCorrespondenceAddressValidateBeforeCall(customerId, addressDTO, _callback);
        Type localVarReturnType = new TypeToken<AddressDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomField
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @param customFieldDTO Updated custom field of a given client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldCall(Long customerId, String customFieldKey, CustomFieldDTO customFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDTO;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/customFields/{customFieldKey}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "customFieldKey" + "}", localVarApiClient.escapeString(customFieldKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValidateBeforeCall(Long customerId, String customFieldKey, CustomFieldDTO customFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'customFieldKey' is set
        if (customFieldKey == null) {
            throw new ApiException("Missing the required parameter 'customFieldKey' when calling updateCustomField(Async)");
        }

        // verify the required parameter 'customFieldDTO' is set
        if (customFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'customFieldDTO' when calling updateCustomField(Async)");
        }

        return updateCustomFieldCall(customerId, customFieldKey, customFieldDTO, _callback);

    }

    /**
     * Updates given custom field of a given client.
     * Updates given custom field of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @param customFieldDTO Updated custom field of a given client. (required)
     * @return CustomFieldDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomFieldDTO updateCustomField(Long customerId, String customFieldKey, CustomFieldDTO customFieldDTO) throws ApiException {
        ApiResponse<CustomFieldDTO> localVarResp = updateCustomFieldWithHttpInfo(customerId, customFieldKey, customFieldDTO);
        return localVarResp.getData();
    }

    /**
     * Updates given custom field of a given client.
     * Updates given custom field of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @param customFieldDTO Updated custom field of a given client. (required)
     * @return ApiResponse&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomFieldDTO> updateCustomFieldWithHttpInfo(Long customerId, String customFieldKey, CustomFieldDTO customFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(customerId, customFieldKey, customFieldDTO, null);
        Type localVarReturnType = new TypeToken<CustomFieldDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates given custom field of a given client. (asynchronously)
     * Updates given custom field of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldKey custom field&#39;s key (required)
     * @param customFieldDTO Updated custom field of a given client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldAsync(Long customerId, String customFieldKey, CustomFieldDTO customFieldDTO, final ApiCallback<CustomFieldDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValidateBeforeCall(customerId, customFieldKey, customFieldDTO, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFields
     * @param personId person&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given person. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldsCall(Long personId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDTO;

        // create path and map variables
        String localVarPath = "/customers/persons/{personId}/customFields"
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldsValidateBeforeCall(Long personId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateCustomFields(Async)");
        }

        // verify the required parameter 'customFieldDTO' is set
        if (customFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'customFieldDTO' when calling updateCustomFields(Async)");
        }

        return updateCustomFieldsCall(personId, customFieldDTO, _callback);

    }

    /**
     * Updates custom fields of a given person.
     * Updates custom fields of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given person. (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> updateCustomFields(Long personId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = updateCustomFieldsWithHttpInfo(personId, customFieldDTO);
        return localVarResp.getData();
    }

    /**
     * Updates custom fields of a given person.
     * Updates custom fields of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given person. (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> updateCustomFieldsWithHttpInfo(Long personId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldsValidateBeforeCall(personId, customFieldDTO, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates custom fields of a given person. (asynchronously)
     * Updates custom fields of a given person.
     * @param personId person&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given person. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldsAsync(Long personId, List<CustomFieldDTO> customFieldDTO, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldsValidateBeforeCall(personId, customFieldDTO, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFields1
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields1Call(Long customerId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDTO;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/customFields"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFields1ValidateBeforeCall(Long customerId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateCustomFields1(Async)");
        }

        // verify the required parameter 'customFieldDTO' is set
        if (customFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'customFieldDTO' when calling updateCustomFields1(Async)");
        }

        return updateCustomFields1Call(customerId, customFieldDTO, _callback);

    }

    /**
     * Updates custom fields of a given client.
     * Updates custom fields of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given client. (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> updateCustomFields1(Long customerId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = updateCustomFields1WithHttpInfo(customerId, customFieldDTO);
        return localVarResp.getData();
    }

    /**
     * Updates custom fields of a given client.
     * Updates custom fields of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given client. (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> updateCustomFields1WithHttpInfo(Long customerId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFields1ValidateBeforeCall(customerId, customFieldDTO, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates custom fields of a given client. (asynchronously)
     * Updates custom fields of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields1Async(Long customerId, List<CustomFieldDTO> customFieldDTO, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFields1ValidateBeforeCall(customerId, customFieldDTO, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIndustries
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated industries of a given client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIndustriesCall(Long customerId, List<Long> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/industries"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIndustriesValidateBeforeCall(Long customerId, List<Long> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateIndustries(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateIndustries(Async)");
        }

        return updateIndustriesCall(customerId, requestBody, _callback);

    }

    /**
     * Updates industries of a given client.
     * Updates industries of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated industries of a given client. (required)
     * @return List&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Long> updateIndustries(Long customerId, List<Long> requestBody) throws ApiException {
        ApiResponse<List<Long>> localVarResp = updateIndustriesWithHttpInfo(customerId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Updates industries of a given client.
     * Updates industries of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated industries of a given client. (required)
     * @return ApiResponse&lt;List&lt;Long&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Long>> updateIndustriesWithHttpInfo(Long customerId, List<Long> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateIndustriesValidateBeforeCall(customerId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates industries of a given client. (asynchronously)
     * Updates industries of a given client.
     * @param customerId client&#39;s internal identifier (required)
     * @param requestBody Updated industries of a given client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIndustriesAsync(Long customerId, List<Long> requestBody, final ApiCallback<List<Long>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIndustriesValidateBeforeCall(customerId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Long>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
