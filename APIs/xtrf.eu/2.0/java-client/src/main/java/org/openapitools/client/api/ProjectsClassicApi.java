/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClassicProjectCreateDTO;
import org.openapitools.client.model.CommonLanguageCombinationDTO;
import org.openapitools.client.model.ContactsDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.FinanceDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.PayableCreateDTO;
import org.openapitools.client.model.PayableDTO;
import org.openapitools.client.model.ProjectDTOv1;
import org.openapitools.client.model.ProjectDatesDTO;
import org.openapitools.client.model.ReceivableCreateDTO;
import org.openapitools.client.model.ReceivableDTO;
import org.openapitools.client.model.TaskCreateDTO;
import org.openapitools.client.model.TaskDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsClassicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsClassicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsClassicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for create5
     * @param classicProjectCreateDTO Created a new Classic Project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create5Call(ClassicProjectCreateDTO classicProjectCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classicProjectCreateDTO;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create5ValidateBeforeCall(ClassicProjectCreateDTO classicProjectCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'classicProjectCreateDTO' is set
        if (classicProjectCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'classicProjectCreateDTO' when calling create5(Async)");
        }

        return create5Call(classicProjectCreateDTO, _callback);

    }

    /**
     * Creates a new Classic Project.
     * Creates a new Classic Project. If the specified service ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param classicProjectCreateDTO Created a new Classic Project. (required)
     * @return ProjectDTOv1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDTOv1 create5(ClassicProjectCreateDTO classicProjectCreateDTO) throws ApiException {
        ApiResponse<ProjectDTOv1> localVarResp = create5WithHttpInfo(classicProjectCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new Classic Project.
     * Creates a new Classic Project. If the specified service ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param classicProjectCreateDTO Created a new Classic Project. (required)
     * @return ApiResponse&lt;ProjectDTOv1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDTOv1> create5WithHttpInfo(ClassicProjectCreateDTO classicProjectCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = create5ValidateBeforeCall(classicProjectCreateDTO, null);
        Type localVarReturnType = new TypeToken<ProjectDTOv1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Classic Project. (asynchronously)
     * Creates a new Classic Project. If the specified service ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param classicProjectCreateDTO Created a new Classic Project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create5Async(ClassicProjectCreateDTO classicProjectCreateDTO, final ApiCallback<ProjectDTOv1> _callback) throws ApiException {

        okhttp3.Call localVarCall = create5ValidateBeforeCall(classicProjectCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ProjectDTOv1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLanguageCombination
     * @param projectId project&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created language combination for a given project without creating a task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLanguageCombinationCall(String projectId, CommonLanguageCombinationDTO commonLanguageCombinationDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commonLanguageCombinationDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/languageCombinations"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLanguageCombinationValidateBeforeCall(String projectId, CommonLanguageCombinationDTO commonLanguageCombinationDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createLanguageCombination(Async)");
        }

        // verify the required parameter 'commonLanguageCombinationDTO' is set
        if (commonLanguageCombinationDTO == null) {
            throw new ApiException("Missing the required parameter 'commonLanguageCombinationDTO' when calling createLanguageCombination(Async)");
        }

        return createLanguageCombinationCall(projectId, commonLanguageCombinationDTO, _callback);

    }

    /**
     * Creates a new language combination for a given project without creating a task.
     * Creates a new language combination for a given project without creating a task.
     * @param projectId project&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created language combination for a given project without creating a task. (required)
     * @return CommonLanguageCombinationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLanguageCombinationDTO createLanguageCombination(String projectId, CommonLanguageCombinationDTO commonLanguageCombinationDTO) throws ApiException {
        ApiResponse<CommonLanguageCombinationDTO> localVarResp = createLanguageCombinationWithHttpInfo(projectId, commonLanguageCombinationDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new language combination for a given project without creating a task.
     * Creates a new language combination for a given project without creating a task.
     * @param projectId project&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created language combination for a given project without creating a task. (required)
     * @return ApiResponse&lt;CommonLanguageCombinationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLanguageCombinationDTO> createLanguageCombinationWithHttpInfo(String projectId, CommonLanguageCombinationDTO commonLanguageCombinationDTO) throws ApiException {
        okhttp3.Call localVarCall = createLanguageCombinationValidateBeforeCall(projectId, commonLanguageCombinationDTO, null);
        Type localVarReturnType = new TypeToken<CommonLanguageCombinationDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new language combination for a given project without creating a task. (asynchronously)
     * Creates a new language combination for a given project without creating a task.
     * @param projectId project&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created language combination for a given project without creating a task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLanguageCombinationAsync(String projectId, CommonLanguageCombinationDTO commonLanguageCombinationDTO, final ApiCallback<CommonLanguageCombinationDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLanguageCombinationValidateBeforeCall(projectId, commonLanguageCombinationDTO, _callback);
        Type localVarReturnType = new TypeToken<CommonLanguageCombinationDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayable
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayableCall(String projectId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableCreateDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/finance/payables"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayableValidateBeforeCall(String projectId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createPayable(Async)");
        }

        // verify the required parameter 'payableCreateDTO' is set
        if (payableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'payableCreateDTO' when calling createPayable(Async)");
        }

        return createPayableCall(projectId, payableCreateDTO, _callback);

    }

    /**
     * Adds a payable to a project.
     * Adds a payable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO createPayable(String projectId, PayableCreateDTO payableCreateDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = createPayableWithHttpInfo(projectId, payableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a payable to a project.
     * Adds a payable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> createPayableWithHttpInfo(String projectId, PayableCreateDTO payableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createPayableValidateBeforeCall(projectId, payableCreateDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a payable to a project. (asynchronously)
     * Adds a payable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayableAsync(String projectId, PayableCreateDTO payableCreateDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayableValidateBeforeCall(projectId, payableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReceivable
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivableCall(String projectId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableCreateDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/finance/receivables"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceivableValidateBeforeCall(String projectId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createReceivable(Async)");
        }

        // verify the required parameter 'receivableCreateDTO' is set
        if (receivableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableCreateDTO' when calling createReceivable(Async)");
        }

        return createReceivableCall(projectId, receivableCreateDTO, _callback);

    }

    /**
     * Adds a receivable to a project.
     * Adds a receivable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO createReceivable(String projectId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = createReceivableWithHttpInfo(projectId, receivableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a receivable to a project.
     * Adds a receivable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> createReceivableWithHttpInfo(String projectId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createReceivableValidateBeforeCall(projectId, receivableCreateDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a receivable to a project. (asynchronously)
     * Adds a receivable to a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivableAsync(String projectId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceivableValidateBeforeCall(projectId, receivableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTask
     * @param projectId project&#39;s internal identifier (required)
     * @param taskCreateDTO Created new task for a given project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskCall(String projectId, TaskCreateDTO taskCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskCreateDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/tasks"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTaskValidateBeforeCall(String projectId, TaskCreateDTO taskCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createTask(Async)");
        }

        // verify the required parameter 'taskCreateDTO' is set
        if (taskCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'taskCreateDTO' when calling createTask(Async)");
        }

        return createTaskCall(projectId, taskCreateDTO, _callback);

    }

    /**
     * Creates a new task for a given project.
     * Creates a new task for a given project.&lt;p&gt;   Required fields:   &lt;ul&gt;     &lt;li&gt;languageCombination&lt;/li&gt;     &lt;li&gt;specializationId&lt;/li&gt;     &lt;li&gt;workflowId&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
     * @param projectId project&#39;s internal identifier (required)
     * @param taskCreateDTO Created new task for a given project. (required)
     * @return TaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TaskDTO createTask(String projectId, TaskCreateDTO taskCreateDTO) throws ApiException {
        ApiResponse<TaskDTO> localVarResp = createTaskWithHttpInfo(projectId, taskCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new task for a given project.
     * Creates a new task for a given project.&lt;p&gt;   Required fields:   &lt;ul&gt;     &lt;li&gt;languageCombination&lt;/li&gt;     &lt;li&gt;specializationId&lt;/li&gt;     &lt;li&gt;workflowId&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
     * @param projectId project&#39;s internal identifier (required)
     * @param taskCreateDTO Created new task for a given project. (required)
     * @return ApiResponse&lt;TaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskDTO> createTaskWithHttpInfo(String projectId, TaskCreateDTO taskCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createTaskValidateBeforeCall(projectId, taskCreateDTO, null);
        Type localVarReturnType = new TypeToken<TaskDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new task for a given project. (asynchronously)
     * Creates a new task for a given project.&lt;p&gt;   Required fields:   &lt;ul&gt;     &lt;li&gt;languageCombination&lt;/li&gt;     &lt;li&gt;specializationId&lt;/li&gt;     &lt;li&gt;workflowId&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
     * @param projectId project&#39;s internal identifier (required)
     * @param taskCreateDTO Created new task for a given project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTaskAsync(String projectId, TaskCreateDTO taskCreateDTO, final ApiCallback<TaskDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTaskValidateBeforeCall(projectId, taskCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<TaskDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete12
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete12Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete12ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling delete12(Async)");
        }

        return delete12Call(projectId, _callback);

    }

    /**
     * Removes a project.
     * Removes a project.
     * @param projectId project&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete12(String projectId) throws ApiException {
        delete12WithHttpInfo(projectId);
    }

    /**
     * Removes a project.
     * Removes a project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete12WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = delete12ValidateBeforeCall(projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a project. (asynchronously)
     * Removes a project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete12Async(String projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete12ValidateBeforeCall(projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayable
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayableCall(String projectId, Long payableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/finance/payables/{payableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayableValidateBeforeCall(String projectId, Long payableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deletePayable(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling deletePayable(Async)");
        }

        return deletePayableCall(projectId, payableId, _callback);

    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayable(String projectId, Long payableId) throws ApiException {
        deletePayableWithHttpInfo(projectId, payableId);
    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayableWithHttpInfo(String projectId, Long payableId) throws ApiException {
        okhttp3.Call localVarCall = deletePayableValidateBeforeCall(projectId, payableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a payable. (asynchronously)
     * Deletes a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayableAsync(String projectId, Long payableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayableValidateBeforeCall(projectId, payableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReceivable
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivableCall(String projectId, Long receivableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/finance/receivables/{receivableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReceivableValidateBeforeCall(String projectId, Long receivableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteReceivable(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling deleteReceivable(Async)");
        }

        return deleteReceivableCall(projectId, receivableId, _callback);

    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReceivable(String projectId, Long receivableId) throws ApiException {
        deleteReceivableWithHttpInfo(projectId, receivableId);
    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReceivableWithHttpInfo(String projectId, Long receivableId) throws ApiException {
        okhttp3.Call localVarCall = deleteReceivableValidateBeforeCall(projectId, receivableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a receivable. (asynchronously)
     * Deletes a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivableAsync(String projectId, Long receivableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReceivableValidateBeforeCall(projectId, receivableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllIds6
     * @param updatedSince only projects modified since this timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds6Call(Long updatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIds6ValidateBeforeCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        return getAllIds6Call(updatedSince, _callback);

    }

    /**
     * Returns projects&#39; internal identifiers.
     * Returns projects&#39; internal identifiers.
     * @param updatedSince only projects modified since this timestamp (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> getAllIds6(Long updatedSince) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = getAllIds6WithHttpInfo(updatedSince);
        return localVarResp.getData();
    }

    /**
     * Returns projects&#39; internal identifiers.
     * Returns projects&#39; internal identifiers.
     * @param updatedSince only projects modified since this timestamp (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> getAllIds6WithHttpInfo(Long updatedSince) throws ApiException {
        okhttp3.Call localVarCall = getAllIds6ValidateBeforeCall(updatedSince, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns projects&#39; internal identifiers. (asynchronously)
     * Returns projects&#39; internal identifiers.
     * @param updatedSince only projects modified since this timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds6Async(Long updatedSince, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIds6ValidateBeforeCall(updatedSince, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById7
     * @param projectId project&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: tasks) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById7Call(String projectId, String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById7ValidateBeforeCall(String projectId, String embed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getById7(Async)");
        }

        return getById7Call(projectId, embed, _callback);

    }

    /**
     * Returns project details.
     * Returns project details. If the specified project ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param projectId project&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: tasks) (optional)
     * @return ProjectDTOv1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDTOv1 getById7(String projectId, String embed) throws ApiException {
        ApiResponse<ProjectDTOv1> localVarResp = getById7WithHttpInfo(projectId, embed);
        return localVarResp.getData();
    }

    /**
     * Returns project details.
     * Returns project details. If the specified project ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param projectId project&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: tasks) (optional)
     * @return ApiResponse&lt;ProjectDTOv1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDTOv1> getById7WithHttpInfo(String projectId, String embed) throws ApiException {
        okhttp3.Call localVarCall = getById7ValidateBeforeCall(projectId, embed, null);
        Type localVarReturnType = new TypeToken<ProjectDTOv1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns project details. (asynchronously)
     * Returns project details. If the specified project ID refers to Smart Project, 400 Bad Request is returned instead.
     * @param projectId project&#39;s internal identifier (required)
     * @param embed list of additional fields which should be embedded in the response (available options: tasks) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById7Async(String projectId, String embed, final ApiCallback<ProjectDTOv1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById7ValidateBeforeCall(projectId, embed, _callback);
        Type localVarReturnType = new TypeToken<ProjectDTOv1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContacts
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactsCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/contacts"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactsValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getContacts(Async)");
        }

        return getContactsCall(projectId, _callback);

    }

    /**
     * Returns contacts of a given project.
     * Returns contacts of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContactsDTO getContacts(String projectId) throws ApiException {
        ApiResponse<ContactsDTO> localVarResp = getContactsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns contacts of a given project.
     * Returns contacts of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;ContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactsDTO> getContactsWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getContactsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns contacts of a given project. (asynchronously)
     * Returns contacts of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactsAsync(String projectId, final ApiCallback<ContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFields5
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields5Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/customFields"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFields5ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCustomFields5(Async)");
        }

        return getCustomFields5Call(projectId, _callback);

    }

    /**
     * Returns custom fields of a given project.
     * Returns custom fields of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> getCustomFields5(String projectId) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = getCustomFields5WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns custom fields of a given project.
     * Returns custom fields of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> getCustomFields5WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFields5ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns custom fields of a given project. (asynchronously)
     * Returns custom fields of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields5Async(String projectId, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFields5ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDates1
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDates1Call(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/dates"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDates1ValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getDates1(Async)");
        }

        return getDates1Call(projectId, _callback);

    }

    /**
     * Returns dates of a given project.
     * Returns dates of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ProjectDatesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDatesDTO getDates1(String projectId) throws ApiException {
        ApiResponse<ProjectDatesDTO> localVarResp = getDates1WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns dates of a given project.
     * Returns dates of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;ProjectDatesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDatesDTO> getDates1WithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getDates1ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns dates of a given project. (asynchronously)
     * Returns dates of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDates1Async(String projectId, final ApiCallback<ProjectDatesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDates1ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileById
     * @param fileId file&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileByIdCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/files/{fileId}/download"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "multipart/form-data"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileByIdValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileById(Async)");
        }

        return getFileByIdCall(fileId, _callback);

    }

    /**
     * Downloads a file.
     * Downloads a file.
     * @param fileId file&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public void getFileById(String fileId) throws ApiException {
        getFileByIdWithHttpInfo(fileId);
    }

    /**
     * Downloads a file.
     * Downloads a file.
     * @param fileId file&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getFileByIdWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileByIdValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Downloads a file. (asynchronously)
     * Downloads a file.
     * @param fileId file&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileByIdAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileByIdValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinance
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinanceCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/finance"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinanceValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFinance(Async)");
        }

        return getFinanceCall(projectId, _callback);

    }

    /**
     * Returns finance of a given project.
     * Returns finance of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return FinanceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FinanceDTO getFinance(String projectId) throws ApiException {
        ApiResponse<FinanceDTO> localVarResp = getFinanceWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns finance of a given project.
     * Returns finance of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;FinanceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FinanceDTO> getFinanceWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getFinanceValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns finance of a given project. (asynchronously)
     * Returns finance of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinanceAsync(String projectId, final ApiCallback<FinanceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinanceValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstructions
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstructionsCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/instructions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstructionsValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getInstructions(Async)");
        }

        return getInstructionsCall(projectId, _callback);

    }

    /**
     * Returns instructions of a given project.
     * Returns instructions of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return InstructionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstructionsDTO getInstructions(String projectId) throws ApiException {
        ApiResponse<InstructionsDTO> localVarResp = getInstructionsWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Returns instructions of a given project.
     * Returns instructions of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @return ApiResponse&lt;InstructionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionsDTO> getInstructionsWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getInstructionsValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns instructions of a given project. (asynchronously)
     * Returns instructions of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstructionsAsync(String projectId, final ApiCallback<InstructionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstructionsValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContacts
     * @param projectId project&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of a given project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactsCall(String projectId, ContactsDTO contactsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactsDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/contacts"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactsValidateBeforeCall(String projectId, ContactsDTO contactsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateContacts(Async)");
        }

        // verify the required parameter 'contactsDTO' is set
        if (contactsDTO == null) {
            throw new ApiException("Missing the required parameter 'contactsDTO' when calling updateContacts(Async)");
        }

        return updateContactsCall(projectId, contactsDTO, _callback);

    }

    /**
     * Updates contacts of a given project.
     * Updates contacts of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of a given project. (required)
     * @return ContactsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ContactsDTO updateContacts(String projectId, ContactsDTO contactsDTO) throws ApiException {
        ApiResponse<ContactsDTO> localVarResp = updateContactsWithHttpInfo(projectId, contactsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates contacts of a given project.
     * Updates contacts of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of a given project. (required)
     * @return ApiResponse&lt;ContactsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContactsDTO> updateContactsWithHttpInfo(String projectId, ContactsDTO contactsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateContactsValidateBeforeCall(projectId, contactsDTO, null);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates contacts of a given project. (asynchronously)
     * Updates contacts of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param contactsDTO Updated contacts of a given project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContactsAsync(String projectId, ContactsDTO contactsDTO, final ApiCallback<ContactsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactsValidateBeforeCall(projectId, contactsDTO, _callback);
        Type localVarReturnType = new TypeToken<ContactsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFields3
     * @param projectId project&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields3Call(String projectId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/customFields"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFields3ValidateBeforeCall(String projectId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateCustomFields3(Async)");
        }

        // verify the required parameter 'customFieldDTO' is set
        if (customFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'customFieldDTO' when calling updateCustomFields3(Async)");
        }

        return updateCustomFields3Call(projectId, customFieldDTO, _callback);

    }

    /**
     * Updates custom fields of a given project.
     * Updates custom fields of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given project. (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> updateCustomFields3(String projectId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = updateCustomFields3WithHttpInfo(projectId, customFieldDTO);
        return localVarResp.getData();
    }

    /**
     * Updates custom fields of a given project.
     * Updates custom fields of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given project. (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> updateCustomFields3WithHttpInfo(String projectId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFields3ValidateBeforeCall(projectId, customFieldDTO, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates custom fields of a given project. (asynchronously)
     * Updates custom fields of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields3Async(String projectId, List<CustomFieldDTO> customFieldDTO, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFields3ValidateBeforeCall(projectId, customFieldDTO, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDates1
     * @param projectId project&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given project.. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDates1Call(String projectId, ProjectDatesDTO projectDatesDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectDatesDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/dates"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDates1ValidateBeforeCall(String projectId, ProjectDatesDTO projectDatesDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateDates1(Async)");
        }

        // verify the required parameter 'projectDatesDTO' is set
        if (projectDatesDTO == null) {
            throw new ApiException("Missing the required parameter 'projectDatesDTO' when calling updateDates1(Async)");
        }

        return updateDates1Call(projectId, projectDatesDTO, _callback);

    }

    /**
     * Updates dates of a given project.
     * Updates dates of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given project.. (required)
     * @return ProjectDatesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDatesDTO updateDates1(String projectId, ProjectDatesDTO projectDatesDTO) throws ApiException {
        ApiResponse<ProjectDatesDTO> localVarResp = updateDates1WithHttpInfo(projectId, projectDatesDTO);
        return localVarResp.getData();
    }

    /**
     * Updates dates of a given project.
     * Updates dates of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given project.. (required)
     * @return ApiResponse&lt;ProjectDatesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDatesDTO> updateDates1WithHttpInfo(String projectId, ProjectDatesDTO projectDatesDTO) throws ApiException {
        okhttp3.Call localVarCall = updateDates1ValidateBeforeCall(projectId, projectDatesDTO, null);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates dates of a given project. (asynchronously)
     * Updates dates of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param projectDatesDTO Updated dates of a given project.. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDates1Async(String projectId, ProjectDatesDTO projectDatesDTO, final ApiCallback<ProjectDatesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDates1ValidateBeforeCall(projectId, projectDatesDTO, _callback);
        Type localVarReturnType = new TypeToken<ProjectDatesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInstructions1
     * @param projectId project&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInstructions1Call(String projectId, InstructionsDTO instructionsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instructionsDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/instructions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstructions1ValidateBeforeCall(String projectId, InstructionsDTO instructionsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateInstructions1(Async)");
        }

        // verify the required parameter 'instructionsDTO' is set
        if (instructionsDTO == null) {
            throw new ApiException("Missing the required parameter 'instructionsDTO' when calling updateInstructions1(Async)");
        }

        return updateInstructions1Call(projectId, instructionsDTO, _callback);

    }

    /**
     * Updates instructions of a given project.
     * Updates instructions of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @return InstructionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstructionsDTO updateInstructions1(String projectId, InstructionsDTO instructionsDTO) throws ApiException {
        ApiResponse<InstructionsDTO> localVarResp = updateInstructions1WithHttpInfo(projectId, instructionsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates instructions of a given project.
     * Updates instructions of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @return ApiResponse&lt;InstructionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionsDTO> updateInstructions1WithHttpInfo(String projectId, InstructionsDTO instructionsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateInstructions1ValidateBeforeCall(projectId, instructionsDTO, null);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates instructions of a given project. (asynchronously)
     * Updates instructions of a given project.
     * @param projectId project&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInstructions1Async(String projectId, InstructionsDTO instructionsDTO, final ApiCallback<InstructionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstructions1ValidateBeforeCall(projectId, instructionsDTO, _callback);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayable
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayableCall(String projectId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/finance/payables/{payableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayableValidateBeforeCall(String projectId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updatePayable(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling updatePayable(Async)");
        }

        // verify the required parameter 'payableDTO' is set
        if (payableDTO == null) {
            throw new ApiException("Missing the required parameter 'payableDTO' when calling updatePayable(Async)");
        }

        return updatePayableCall(projectId, payableId, payableDTO, _callback);

    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO updatePayable(String projectId, Long payableId, PayableDTO payableDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = updatePayableWithHttpInfo(projectId, payableId, payableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> updatePayableWithHttpInfo(String projectId, Long payableId, PayableDTO payableDTO) throws ApiException {
        okhttp3.Call localVarCall = updatePayableValidateBeforeCall(projectId, payableId, payableDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a payable. (asynchronously)
     * Updates a payable.
     * @param projectId project&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayableAsync(String projectId, Long payableId, PayableDTO payableDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayableValidateBeforeCall(projectId, payableId, payableDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReceivable
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivableCall(String projectId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableDTO;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/finance/receivables/{receivableId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReceivableValidateBeforeCall(String projectId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling updateReceivable(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling updateReceivable(Async)");
        }

        // verify the required parameter 'receivableDTO' is set
        if (receivableDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableDTO' when calling updateReceivable(Async)");
        }

        return updateReceivableCall(projectId, receivableId, receivableDTO, _callback);

    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO updateReceivable(String projectId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = updateReceivableWithHttpInfo(projectId, receivableId, receivableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> updateReceivableWithHttpInfo(String projectId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        okhttp3.Call localVarCall = updateReceivableValidateBeforeCall(projectId, receivableId, receivableDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a receivable. (asynchronously)
     * Updates a receivable.
     * @param projectId project&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivableAsync(String projectId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReceivableValidateBeforeCall(projectId, receivableId, receivableDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
