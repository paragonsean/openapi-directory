/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobCommunicationDto;
import org.openapitools.client.model.JobDatesDto;
import org.openapitools.client.model.JobDocumentsDto;
import org.openapitools.client.model.JobFilesDto;
import org.openapitools.client.model.JobLanguageCombinationDto;
import org.openapitools.client.model.StepTypeDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobDto {
  public static final String SERIALIZED_NAME_COMMUNICATION = "communication";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION)
  private JobCommunicationDto communication;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private JobDatesDto dates;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private JobDocumentsDto documents;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private JobFilesDto files;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<JobLanguageCombinationDto> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STEP_NUMBER = "stepNumber";
  @SerializedName(SERIALIZED_NAME_STEP_NUMBER)
  private Integer stepNumber;

  public static final String SERIALIZED_NAME_STEP_TYPE = "stepType";
  @SerializedName(SERIALIZED_NAME_STEP_TYPE)
  private StepTypeDto stepType;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendorId";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private Long vendorId;

  public static final String SERIALIZED_NAME_VENDOR_PRICE_PROFILE_ID = "vendorPriceProfileId";
  @SerializedName(SERIALIZED_NAME_VENDOR_PRICE_PROFILE_ID)
  private Long vendorPriceProfileId;

  public JobDto() {
  }

  public JobDto communication(JobCommunicationDto communication) {
    this.communication = communication;
    return this;
  }

  /**
   * Get communication
   * @return communication
   */
  @javax.annotation.Nullable
  public JobCommunicationDto getCommunication() {
    return communication;
  }

  public void setCommunication(JobCommunicationDto communication) {
    this.communication = communication;
  }


  public JobDto dates(JobDatesDto dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public JobDatesDto getDates() {
    return dates;
  }

  public void setDates(JobDatesDto dates) {
    this.dates = dates;
  }


  public JobDto documents(JobDocumentsDto documents) {
    this.documents = documents;
    return this;
  }

  /**
   * Get documents
   * @return documents
   */
  @javax.annotation.Nullable
  public JobDocumentsDto getDocuments() {
    return documents;
  }

  public void setDocuments(JobDocumentsDto documents) {
    this.documents = documents;
  }


  public JobDto files(JobFilesDto files) {
    this.files = files;
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public JobFilesDto getFiles() {
    return files;
  }

  public void setFiles(JobFilesDto files) {
    this.files = files;
  }


  public JobDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JobDto idNumber(String idNumber) {
    this.idNumber = idNumber;
    return this;
  }

  /**
   * Get idNumber
   * @return idNumber
   */
  @javax.annotation.Nullable
  public String getIdNumber() {
    return idNumber;
  }

  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }


  public JobDto languages(List<JobLanguageCombinationDto> languages) {
    this.languages = languages;
    return this;
  }

  public JobDto addLanguagesItem(JobLanguageCombinationDto languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * Get languages
   * @return languages
   */
  @javax.annotation.Nullable
  public List<JobLanguageCombinationDto> getLanguages() {
    return languages;
  }

  public void setLanguages(List<JobLanguageCombinationDto> languages) {
    this.languages = languages;
  }


  public JobDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public JobDto status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public JobDto stepNumber(Integer stepNumber) {
    this.stepNumber = stepNumber;
    return this;
  }

  /**
   * Get stepNumber
   * @return stepNumber
   */
  @javax.annotation.Nullable
  public Integer getStepNumber() {
    return stepNumber;
  }

  public void setStepNumber(Integer stepNumber) {
    this.stepNumber = stepNumber;
  }


  public JobDto stepType(StepTypeDto stepType) {
    this.stepType = stepType;
    return this;
  }

  /**
   * Get stepType
   * @return stepType
   */
  @javax.annotation.Nullable
  public StepTypeDto getStepType() {
    return stepType;
  }

  public void setStepType(StepTypeDto stepType) {
    this.stepType = stepType;
  }


  public JobDto vendorId(Long vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * Get vendorId
   * @return vendorId
   */
  @javax.annotation.Nullable
  public Long getVendorId() {
    return vendorId;
  }

  public void setVendorId(Long vendorId) {
    this.vendorId = vendorId;
  }


  public JobDto vendorPriceProfileId(Long vendorPriceProfileId) {
    this.vendorPriceProfileId = vendorPriceProfileId;
    return this;
  }

  /**
   * Get vendorPriceProfileId
   * @return vendorPriceProfileId
   */
  @javax.annotation.Nullable
  public Long getVendorPriceProfileId() {
    return vendorPriceProfileId;
  }

  public void setVendorPriceProfileId(Long vendorPriceProfileId) {
    this.vendorPriceProfileId = vendorPriceProfileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDto jobDto = (JobDto) o;
    return Objects.equals(this.communication, jobDto.communication) &&
        Objects.equals(this.dates, jobDto.dates) &&
        Objects.equals(this.documents, jobDto.documents) &&
        Objects.equals(this.files, jobDto.files) &&
        Objects.equals(this.id, jobDto.id) &&
        Objects.equals(this.idNumber, jobDto.idNumber) &&
        Objects.equals(this.languages, jobDto.languages) &&
        Objects.equals(this.name, jobDto.name) &&
        Objects.equals(this.status, jobDto.status) &&
        Objects.equals(this.stepNumber, jobDto.stepNumber) &&
        Objects.equals(this.stepType, jobDto.stepType) &&
        Objects.equals(this.vendorId, jobDto.vendorId) &&
        Objects.equals(this.vendorPriceProfileId, jobDto.vendorPriceProfileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(communication, dates, documents, files, id, idNumber, languages, name, status, stepNumber, stepType, vendorId, vendorPriceProfileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDto {\n");
    sb.append("    communication: ").append(toIndentedString(communication)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stepNumber: ").append(toIndentedString(stepNumber)).append("\n");
    sb.append("    stepType: ").append(toIndentedString(stepType)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    vendorPriceProfileId: ").append(toIndentedString(vendorPriceProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("communication");
    openapiFields.add("dates");
    openapiFields.add("documents");
    openapiFields.add("files");
    openapiFields.add("id");
    openapiFields.add("idNumber");
    openapiFields.add("languages");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("stepNumber");
    openapiFields.add("stepType");
    openapiFields.add("vendorId");
    openapiFields.add("vendorPriceProfileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDto is not found in the empty JSON string", JobDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `communication`
      if (jsonObj.get("communication") != null && !jsonObj.get("communication").isJsonNull()) {
        JobCommunicationDto.validateJsonElement(jsonObj.get("communication"));
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        JobDatesDto.validateJsonElement(jsonObj.get("dates"));
      }
      // validate the optional field `documents`
      if (jsonObj.get("documents") != null && !jsonObj.get("documents").isJsonNull()) {
        JobDocumentsDto.validateJsonElement(jsonObj.get("documents"));
      }
      // validate the optional field `files`
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JobFilesDto.validateJsonElement(jsonObj.get("files"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull()) {
        JsonArray jsonArraylanguages = jsonObj.getAsJsonArray("languages");
        if (jsonArraylanguages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("languages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
          }

          // validate the optional field `languages` (array)
          for (int i = 0; i < jsonArraylanguages.size(); i++) {
            JobLanguageCombinationDto.validateJsonElement(jsonArraylanguages.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `stepType`
      if (jsonObj.get("stepType") != null && !jsonObj.get("stepType").isJsonNull()) {
        StepTypeDto.validateJsonElement(jsonObj.get("stepType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDto.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDto>() {
           @Override
           public void write(JsonWriter out, JobDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobDto
   * @throws IOException if the JSON string is invalid with respect to JobDto
   */
  public static JobDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDto.class);
  }

  /**
   * Convert an instance of JobDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

