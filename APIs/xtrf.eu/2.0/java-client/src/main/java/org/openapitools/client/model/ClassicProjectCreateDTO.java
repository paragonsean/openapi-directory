/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClassicPeopleDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.ProjectDatesDTO;
import org.openapitools.client.model.TaskFileDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClassicProjectCreateDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClassicProjectCreateDTO {
  public static final String SERIALIZED_NAME_CATEGORIES_IDS = "categoriesIds";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_IDS)
  private List<Long> categoriesIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private ProjectDatesDTO dates;

  public static final String SERIALIZED_NAME_INPUT_FILES = "inputFiles";
  @SerializedName(SERIALIZED_NAME_INPUT_FILES)
  private List<TaskFileDTO> inputFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private InstructionsDTO instructions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEOPLE = "people";
  @SerializedName(SERIALIZED_NAME_PEOPLE)
  private ClassicPeopleDTO people;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private Long serviceId;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE_ID = "sourceLanguageId";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE_ID)
  private Long sourceLanguageId;

  public static final String SERIALIZED_NAME_SPECIALIZATION_ID = "specializationId";
  @SerializedName(SERIALIZED_NAME_SPECIALIZATION_ID)
  private Long specializationId;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGES_IDS = "targetLanguagesIds";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGES_IDS)
  private List<Long> targetLanguagesIds = new ArrayList<>();

  public ClassicProjectCreateDTO() {
  }

  public ClassicProjectCreateDTO categoriesIds(List<Long> categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  public ClassicProjectCreateDTO addCategoriesIdsItem(Long categoriesIdsItem) {
    if (this.categoriesIds == null) {
      this.categoriesIds = new ArrayList<>();
    }
    this.categoriesIds.add(categoriesIdsItem);
    return this;
  }

  /**
   * list of language categories
   * @return categoriesIds
   */
  @javax.annotation.Nullable
  public List<Long> getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(List<Long> categoriesIds) {
    this.categoriesIds = categoriesIds;
  }


  public ClassicProjectCreateDTO customerId(Long customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nonnull
  public Long getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public ClassicProjectCreateDTO dates(ProjectDatesDTO dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public ProjectDatesDTO getDates() {
    return dates;
  }

  public void setDates(ProjectDatesDTO dates) {
    this.dates = dates;
  }


  public ClassicProjectCreateDTO inputFiles(List<TaskFileDTO> inputFiles) {
    this.inputFiles = inputFiles;
    return this;
  }

  public ClassicProjectCreateDTO addInputFilesItem(TaskFileDTO inputFilesItem) {
    if (this.inputFiles == null) {
      this.inputFiles = new ArrayList<>();
    }
    this.inputFiles.add(inputFilesItem);
    return this;
  }

  /**
   * input files
   * @return inputFiles
   */
  @javax.annotation.Nullable
  public List<TaskFileDTO> getInputFiles() {
    return inputFiles;
  }

  public void setInputFiles(List<TaskFileDTO> inputFiles) {
    this.inputFiles = inputFiles;
  }


  public ClassicProjectCreateDTO instructions(InstructionsDTO instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * Get instructions
   * @return instructions
   */
  @javax.annotation.Nullable
  public InstructionsDTO getInstructions() {
    return instructions;
  }

  public void setInstructions(InstructionsDTO instructions) {
    this.instructions = instructions;
  }


  public ClassicProjectCreateDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ClassicProjectCreateDTO people(ClassicPeopleDTO people) {
    this.people = people;
    return this;
  }

  /**
   * Get people
   * @return people
   */
  @javax.annotation.Nullable
  public ClassicPeopleDTO getPeople() {
    return people;
  }

  public void setPeople(ClassicPeopleDTO people) {
    this.people = people;
  }


  public ClassicProjectCreateDTO serviceId(Long serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public Long getServiceId() {
    return serviceId;
  }

  public void setServiceId(Long serviceId) {
    this.serviceId = serviceId;
  }


  public ClassicProjectCreateDTO sourceLanguageId(Long sourceLanguageId) {
    this.sourceLanguageId = sourceLanguageId;
    return this;
  }

  /**
   * Get sourceLanguageId
   * @return sourceLanguageId
   */
  @javax.annotation.Nullable
  public Long getSourceLanguageId() {
    return sourceLanguageId;
  }

  public void setSourceLanguageId(Long sourceLanguageId) {
    this.sourceLanguageId = sourceLanguageId;
  }


  public ClassicProjectCreateDTO specializationId(Long specializationId) {
    this.specializationId = specializationId;
    return this;
  }

  /**
   * Get specializationId
   * @return specializationId
   */
  @javax.annotation.Nonnull
  public Long getSpecializationId() {
    return specializationId;
  }

  public void setSpecializationId(Long specializationId) {
    this.specializationId = specializationId;
  }


  public ClassicProjectCreateDTO targetLanguagesIds(List<Long> targetLanguagesIds) {
    this.targetLanguagesIds = targetLanguagesIds;
    return this;
  }

  public ClassicProjectCreateDTO addTargetLanguagesIdsItem(Long targetLanguagesIdsItem) {
    if (this.targetLanguagesIds == null) {
      this.targetLanguagesIds = new ArrayList<>();
    }
    this.targetLanguagesIds.add(targetLanguagesIdsItem);
    return this;
  }

  /**
   * Get targetLanguagesIds
   * @return targetLanguagesIds
   */
  @javax.annotation.Nullable
  public List<Long> getTargetLanguagesIds() {
    return targetLanguagesIds;
  }

  public void setTargetLanguagesIds(List<Long> targetLanguagesIds) {
    this.targetLanguagesIds = targetLanguagesIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassicProjectCreateDTO classicProjectCreateDTO = (ClassicProjectCreateDTO) o;
    return Objects.equals(this.categoriesIds, classicProjectCreateDTO.categoriesIds) &&
        Objects.equals(this.customerId, classicProjectCreateDTO.customerId) &&
        Objects.equals(this.dates, classicProjectCreateDTO.dates) &&
        Objects.equals(this.inputFiles, classicProjectCreateDTO.inputFiles) &&
        Objects.equals(this.instructions, classicProjectCreateDTO.instructions) &&
        Objects.equals(this.name, classicProjectCreateDTO.name) &&
        Objects.equals(this.people, classicProjectCreateDTO.people) &&
        Objects.equals(this.serviceId, classicProjectCreateDTO.serviceId) &&
        Objects.equals(this.sourceLanguageId, classicProjectCreateDTO.sourceLanguageId) &&
        Objects.equals(this.specializationId, classicProjectCreateDTO.specializationId) &&
        Objects.equals(this.targetLanguagesIds, classicProjectCreateDTO.targetLanguagesIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoriesIds, customerId, dates, inputFiles, instructions, name, people, serviceId, sourceLanguageId, specializationId, targetLanguagesIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassicProjectCreateDTO {\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    inputFiles: ").append(toIndentedString(inputFiles)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    people: ").append(toIndentedString(people)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    sourceLanguageId: ").append(toIndentedString(sourceLanguageId)).append("\n");
    sb.append("    specializationId: ").append(toIndentedString(specializationId)).append("\n");
    sb.append("    targetLanguagesIds: ").append(toIndentedString(targetLanguagesIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoriesIds");
    openapiFields.add("customerId");
    openapiFields.add("dates");
    openapiFields.add("inputFiles");
    openapiFields.add("instructions");
    openapiFields.add("name");
    openapiFields.add("people");
    openapiFields.add("serviceId");
    openapiFields.add("sourceLanguageId");
    openapiFields.add("specializationId");
    openapiFields.add("targetLanguagesIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("serviceId");
    openapiRequiredFields.add("specializationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClassicProjectCreateDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClassicProjectCreateDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClassicProjectCreateDTO is not found in the empty JSON string", ClassicProjectCreateDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClassicProjectCreateDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClassicProjectCreateDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClassicProjectCreateDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoriesIds") != null && !jsonObj.get("categoriesIds").isJsonNull() && !jsonObj.get("categoriesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoriesIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoriesIds").toString()));
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        ProjectDatesDTO.validateJsonElement(jsonObj.get("dates"));
      }
      if (jsonObj.get("inputFiles") != null && !jsonObj.get("inputFiles").isJsonNull()) {
        JsonArray jsonArrayinputFiles = jsonObj.getAsJsonArray("inputFiles");
        if (jsonArrayinputFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputFiles` to be an array in the JSON string but got `%s`", jsonObj.get("inputFiles").toString()));
          }

          // validate the optional field `inputFiles` (array)
          for (int i = 0; i < jsonArrayinputFiles.size(); i++) {
            TaskFileDTO.validateJsonElement(jsonArrayinputFiles.get(i));
          };
        }
      }
      // validate the optional field `instructions`
      if (jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) {
        InstructionsDTO.validateJsonElement(jsonObj.get("instructions"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `people`
      if (jsonObj.get("people") != null && !jsonObj.get("people").isJsonNull()) {
        ClassicPeopleDTO.validateJsonElement(jsonObj.get("people"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetLanguagesIds") != null && !jsonObj.get("targetLanguagesIds").isJsonNull() && !jsonObj.get("targetLanguagesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetLanguagesIds` to be an array in the JSON string but got `%s`", jsonObj.get("targetLanguagesIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClassicProjectCreateDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClassicProjectCreateDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClassicProjectCreateDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClassicProjectCreateDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ClassicProjectCreateDTO>() {
           @Override
           public void write(JsonWriter out, ClassicProjectCreateDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClassicProjectCreateDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClassicProjectCreateDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClassicProjectCreateDTO
   * @throws IOException if the JSON string is invalid with respect to ClassicProjectCreateDTO
   */
  public static ClassicProjectCreateDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClassicProjectCreateDTO.class);
  }

  /**
   * Convert an instance of ClassicProjectCreateDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

