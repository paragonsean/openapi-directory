/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ColumnDTO;
import org.openapitools.client.model.FilterDTO;
import org.openapitools.client.model.FilterPropertyDTO;
import org.openapitools.client.model.LocalSettingsDTO;
import org.openapitools.client.model.OrderDTO;
import org.openapitools.client.model.PermissionsDTO;
import org.openapitools.client.model.SettingsDTO;
import org.openapitools.client.model.ViewDTO;
import org.openapitools.client.model.ViewDetailsDTO;
import org.openapitools.client.model.ViewWithIdDTO;
import org.openapitools.client.model.ViewsBriefDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrowserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrowserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrowserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for browseCSV
     * @param viewId view&#39;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param secondarySeparator secondary csv field separator (optional)
     * @param additionalOrder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call browseCSVCall(Long viewId, String separator, String secondarySeparator, String additionalOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (viewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewId", viewId));
        }

        if (separator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("separator", separator));
        }

        if (secondarySeparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secondarySeparator", secondarySeparator));
        }

        if (additionalOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additionalOrder", additionalOrder));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call browseCSVValidateBeforeCall(Long viewId, String separator, String secondarySeparator, String additionalOrder, final ApiCallback _callback) throws ApiException {
        return browseCSVCall(viewId, separator, secondarySeparator, additionalOrder, _callback);

    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * @param viewId view&#39;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param secondarySeparator secondary csv field separator (optional)
     * @param additionalOrder  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object browseCSV(Long viewId, String separator, String secondarySeparator, String additionalOrder) throws ApiException {
        ApiResponse<Object> localVarResp = browseCSVWithHttpInfo(viewId, separator, secondarySeparator, additionalOrder);
        return localVarResp.getData();
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * @param viewId view&#39;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param secondarySeparator secondary csv field separator (optional)
     * @param additionalOrder  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> browseCSVWithHttpInfo(Long viewId, String separator, String secondarySeparator, String additionalOrder) throws ApiException {
        okhttp3.Call localVarCall = browseCSVValidateBeforeCall(viewId, separator, secondarySeparator, additionalOrder, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form. (asynchronously)
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * @param viewId view&#39;s identifier (optional)
     * @param separator csv field separator (optional)
     * @param secondarySeparator secondary csv field separator (optional)
     * @param additionalOrder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call browseCSVAsync(Long viewId, String separator, String secondarySeparator, String additionalOrder, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = browseCSVValidateBeforeCall(viewId, separator, secondarySeparator, additionalOrder, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for browseJSON
     * @param viewId view&#39;s identifier (optional)
     * @param page  (optional, default to 0)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#39;s default rows limit, supported values 10 to 1000 (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call browseJSONCall(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (viewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewId", viewId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (additionalOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("additionalOrder", additionalOrder));
        }

        if (useDeferredColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDeferredColumns", useDeferredColumns));
        }

        if (maxRows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxRows", maxRows));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call browseJSONValidateBeforeCall(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows, final ApiCallback _callback) throws ApiException {
        return browseJSONCall(viewId, page, additionalOrder, useDeferredColumns, maxRows, _callback);

    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * @param viewId view&#39;s identifier (optional)
     * @param page  (optional, default to 0)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#39;s default rows limit, supported values 10 to 1000 (optional, default to 0)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object browseJSON(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows) throws ApiException {
        ApiResponse<Object> localVarResp = browseJSONWithHttpInfo(viewId, page, additionalOrder, useDeferredColumns, maxRows);
        return localVarResp.getData();
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * @param viewId view&#39;s identifier (optional)
     * @param page  (optional, default to 0)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#39;s default rows limit, supported values 10 to 1000 (optional, default to 0)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> browseJSONWithHttpInfo(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows) throws ApiException {
        okhttp3.Call localVarCall = browseJSONValidateBeforeCall(viewId, page, additionalOrder, useDeferredColumns, maxRows, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form. (asynchronously)
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * @param viewId view&#39;s identifier (optional)
     * @param page  (optional, default to 0)
     * @param additionalOrder  (optional)
     * @param useDeferredColumns  (optional)
     * @param maxRows overrides view&#39;s default rows limit, supported values 10 to 1000 (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call browseJSONAsync(Long viewId, Integer page, String additionalOrder, String useDeferredColumns, Integer maxRows, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = browseJSONValidateBeforeCall(viewId, page, additionalOrder, useDeferredColumns, maxRows, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param className view&#39;s class name (required)
     * @param viewDTO Created view for given class. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(String className, ViewDTO viewDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = viewDTO;

        // create path and map variables
        String localVarPath = "/browser/views/for/{className}"
            .replace("{" + "className" + "}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String className, ViewDTO viewDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling create(Async)");
        }

        // verify the required parameter 'viewDTO' is set
        if (viewDTO == null) {
            throw new ApiException("Missing the required parameter 'viewDTO' when calling create(Async)");
        }

        return createCall(className, viewDTO, _callback);

    }

    /**
     * Creates view for given class.
     * Creates view for given class.
     * @param className view&#39;s class name (required)
     * @param viewDTO Created view for given class. (required)
     * @return ViewWithIdDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ViewWithIdDTO create(String className, ViewDTO viewDTO) throws ApiException {
        ApiResponse<ViewWithIdDTO> localVarResp = createWithHttpInfo(className, viewDTO);
        return localVarResp.getData();
    }

    /**
     * Creates view for given class.
     * Creates view for given class.
     * @param className view&#39;s class name (required)
     * @param viewDTO Created view for given class. (required)
     * @return ApiResponse&lt;ViewWithIdDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewWithIdDTO> createWithHttpInfo(String className, ViewDTO viewDTO) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(className, viewDTO, null);
        Type localVarReturnType = new TypeToken<ViewWithIdDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates view for given class. (asynchronously)
     * Creates view for given class.
     * @param className view&#39;s class name (required)
     * @param viewDTO Created view for given class. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(String className, ViewDTO viewDTO, final ApiCallback<ViewWithIdDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(className, viewDTO, _callback);
        Type localVarReturnType = new TypeToken<ViewWithIdDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param viewId view&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling delete(Async)");
        }

        return deleteCall(viewId, _callback);

    }

    /**
     * Removes a view.
     * Removes a view. No content is returned upon success (204).
     * @param viewId view&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete(Long viewId) throws ApiException {
        deleteWithHttpInfo(viewId);
    }

    /**
     * Removes a view.
     * Removes a view. No content is returned upon success (204).
     * @param viewId view&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(viewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a view. (asynchronously)
     * Removes a view. No content is returned upon success (204).
     * @param viewId view&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(Long viewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(viewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteColumn
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteColumnCall(Long viewId, String columnName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns/{columnName}"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()))
            .replace("{" + "columnName" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteColumnValidateBeforeCall(Long viewId, String columnName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling deleteColumn(Async)");
        }

        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling deleteColumn(Async)");
        }

        return deleteColumnCall(viewId, columnName, _callback);

    }

    /**
     * Deletes a single column from view.
     * Deletes a single column from view.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @return List&lt;ColumnDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ColumnDTO> deleteColumn(Long viewId, String columnName) throws ApiException {
        ApiResponse<List<ColumnDTO>> localVarResp = deleteColumnWithHttpInfo(viewId, columnName);
        return localVarResp.getData();
    }

    /**
     * Deletes a single column from view.
     * Deletes a single column from view.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @return ApiResponse&lt;List&lt;ColumnDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ColumnDTO>> deleteColumnWithHttpInfo(Long viewId, String columnName) throws ApiException {
        okhttp3.Call localVarCall = deleteColumnValidateBeforeCall(viewId, columnName, null);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a single column from view. (asynchronously)
     * Deletes a single column from view.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteColumnAsync(Long viewId, String columnName, final ApiCallback<List<ColumnDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteColumnValidateBeforeCall(viewId, columnName, _callback);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param viewId view&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling get(Async)");
        }

        return getCall(viewId, _callback);

    }

    /**
     * Returns all view&#39;s information.
     * Returns all view&#39;s information (ie. name, columns, filters, etc).
     * @param viewId view&#39;s identifier (required)
     * @return ViewDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ViewDTO get(Long viewId) throws ApiException {
        ApiResponse<ViewDTO> localVarResp = getWithHttpInfo(viewId);
        return localVarResp.getData();
    }

    /**
     * Returns all view&#39;s information.
     * Returns all view&#39;s information (ie. name, columns, filters, etc).
     * @param viewId view&#39;s identifier (required)
     * @return ApiResponse&lt;ViewDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewDTO> getWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all view&#39;s information. (asynchronously)
     * Returns all view&#39;s information (ie. name, columns, filters, etc).
     * @param viewId view&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(Long viewId, final ApiCallback<ViewDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getColumnSettings
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnSettingsCall(Long viewId, String columnName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns/{columnName}/settings"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()))
            .replace("{" + "columnName" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getColumnSettingsValidateBeforeCall(Long viewId, String columnName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getColumnSettings(Async)");
        }

        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling getColumnSettings(Async)");
        }

        return getColumnSettingsCall(viewId, columnName, _callback);

    }

    /**
     * Returns column&#39;s specific settings.
     * Returns column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object getColumnSettings(Long viewId, String columnName) throws ApiException {
        ApiResponse<Object> localVarResp = getColumnSettingsWithHttpInfo(viewId, columnName);
        return localVarResp.getData();
    }

    /**
     * Returns column&#39;s specific settings.
     * Returns column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getColumnSettingsWithHttpInfo(Long viewId, String columnName) throws ApiException {
        okhttp3.Call localVarCall = getColumnSettingsValidateBeforeCall(viewId, columnName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns column&#39;s specific settings. (asynchronously)
     * Returns column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnSettingsAsync(Long viewId, String columnName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getColumnSettingsValidateBeforeCall(viewId, columnName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getColumns
     * @param viewId view&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnsCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getColumnsValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getColumns(Async)");
        }

        return getColumnsCall(viewId, _callback);

    }

    /**
     * Returns columns defined in view.
     * Returns columns defined in view.
     * @param viewId view&#39;s identifier (required)
     * @return List&lt;ColumnDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ColumnDTO> getColumns(Long viewId) throws ApiException {
        ApiResponse<List<ColumnDTO>> localVarResp = getColumnsWithHttpInfo(viewId);
        return localVarResp.getData();
    }

    /**
     * Returns columns defined in view.
     * Returns columns defined in view.
     * @param viewId view&#39;s identifier (required)
     * @return ApiResponse&lt;List&lt;ColumnDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ColumnDTO>> getColumnsWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = getColumnsValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns columns defined in view. (asynchronously)
     * Returns columns defined in view.
     * @param viewId view&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getColumnsAsync(Long viewId, final ApiCallback<List<ColumnDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getColumnsValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentViewDetails
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentViewDetailsCall(String className, String placeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/details/for/{className}"
            .replace("{" + "className" + "}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (placeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeName", placeName));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentViewDetailsValidateBeforeCall(String className, String placeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling getCurrentViewDetails(Async)");
        }

        return getCurrentViewDetailsCall(className, placeName, _callback);

    }

    /**
     * Returns current view&#39;s detailed information, suitable for browser.
     * Returns current view&#39;s detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @return ViewDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ViewDetailsDTO getCurrentViewDetails(String className, String placeName) throws ApiException {
        ApiResponse<ViewDetailsDTO> localVarResp = getCurrentViewDetailsWithHttpInfo(className, placeName);
        return localVarResp.getData();
    }

    /**
     * Returns current view&#39;s detailed information, suitable for browser.
     * Returns current view&#39;s detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @return ApiResponse&lt;ViewDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewDetailsDTO> getCurrentViewDetailsWithHttpInfo(String className, String placeName) throws ApiException {
        okhttp3.Call localVarCall = getCurrentViewDetailsValidateBeforeCall(className, placeName, null);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns current view&#39;s detailed information, suitable for browser. (asynchronously)
     * Returns current view&#39;s detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentViewDetailsAsync(String className, String placeName, final ApiCallback<ViewDetailsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentViewDetailsValidateBeforeCall(className, placeName, _callback);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilter
     * @param viewId view&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilterCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/filter"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilterValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getFilter(Async)");
        }

        return getFilterCall(viewId, _callback);

    }

    /**
     * Returns view&#39;s filter.
     * Returns view&#39;s filter.
     * @param viewId view&#39;s identifier (required)
     * @return FilterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FilterDTO getFilter(Long viewId) throws ApiException {
        ApiResponse<FilterDTO> localVarResp = getFilterWithHttpInfo(viewId);
        return localVarResp.getData();
    }

    /**
     * Returns view&#39;s filter.
     * Returns view&#39;s filter.
     * @param viewId view&#39;s identifier (required)
     * @return ApiResponse&lt;FilterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FilterDTO> getFilterWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = getFilterValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns view&#39;s filter. (asynchronously)
     * Returns view&#39;s filter.
     * @param viewId view&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilterAsync(Long viewId, final ApiCallback<FilterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilterValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocalSettings
     * @param viewId view&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalSettingsCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings/local"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocalSettingsValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getLocalSettings(Async)");
        }

        return getLocalSettingsCall(viewId, _callback);

    }

    /**
     * Returns view&#39;s local settings (for current user).
     * Returns view&#39;s local settings (for current user).
     * @param viewId view&#39;s identifier (required)
     * @return LocalSettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocalSettingsDTO getLocalSettings(Long viewId) throws ApiException {
        ApiResponse<LocalSettingsDTO> localVarResp = getLocalSettingsWithHttpInfo(viewId);
        return localVarResp.getData();
    }

    /**
     * Returns view&#39;s local settings (for current user).
     * Returns view&#39;s local settings (for current user).
     * @param viewId view&#39;s identifier (required)
     * @return ApiResponse&lt;LocalSettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocalSettingsDTO> getLocalSettingsWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = getLocalSettingsValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns view&#39;s local settings (for current user). (asynchronously)
     * Returns view&#39;s local settings (for current user).
     * @param viewId view&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocalSettingsAsync(Long viewId, final ApiCallback<LocalSettingsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocalSettingsValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrder
     * @param viewId view&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/order"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getOrder(Async)");
        }

        return getOrderCall(viewId, _callback);

    }

    /**
     * Returns view&#39;s order settings.
     * Returns view&#39;s order settings.
     * @param viewId view&#39;s identifier (required)
     * @return OrderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderDTO getOrder(Long viewId) throws ApiException {
        ApiResponse<OrderDTO> localVarResp = getOrderWithHttpInfo(viewId);
        return localVarResp.getData();
    }

    /**
     * Returns view&#39;s order settings.
     * Returns view&#39;s order settings.
     * @param viewId view&#39;s identifier (required)
     * @return ApiResponse&lt;OrderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDTO> getOrderWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = getOrderValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns view&#39;s order settings. (asynchronously)
     * Returns view&#39;s order settings.
     * @param viewId view&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderAsync(Long viewId, final ApiCallback<OrderDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPermissions
     * @param viewId view&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/permissions"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionsValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getPermissions(Async)");
        }

        return getPermissionsCall(viewId, _callback);

    }

    /**
     * Returns view&#39;s permissions.
     * Returns view&#39;s permissions.
     * @param viewId view&#39;s identifier (required)
     * @return PermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PermissionsDTO getPermissions(Long viewId) throws ApiException {
        ApiResponse<PermissionsDTO> localVarResp = getPermissionsWithHttpInfo(viewId);
        return localVarResp.getData();
    }

    /**
     * Returns view&#39;s permissions.
     * Returns view&#39;s permissions.
     * @param viewId view&#39;s identifier (required)
     * @return ApiResponse&lt;PermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionsDTO> getPermissionsWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns view&#39;s permissions. (asynchronously)
     * Returns view&#39;s permissions.
     * @param viewId view&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsAsync(Long viewId, final ApiCallback<PermissionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettings
     * @param viewId view&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsCall(Long viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(Long viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getSettings(Async)");
        }

        return getSettingsCall(viewId, _callback);

    }

    /**
     * Returns view&#39;s settings.
     * Returns view&#39;s settings (ie. name).
     * @param viewId view&#39;s identifier (required)
     * @return SettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SettingsDTO getSettings(Long viewId) throws ApiException {
        ApiResponse<SettingsDTO> localVarResp = getSettingsWithHttpInfo(viewId);
        return localVarResp.getData();
    }

    /**
     * Returns view&#39;s settings.
     * Returns view&#39;s settings (ie. name).
     * @param viewId view&#39;s identifier (required)
     * @return ApiResponse&lt;SettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SettingsDTO> getSettingsWithHttpInfo(Long viewId) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns view&#39;s settings. (asynchronously)
     * Returns view&#39;s settings (ie. name).
     * @param viewId view&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsAsync(Long viewId, final ApiCallback<SettingsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getViewDetails
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewDetailsCall(String className, Long viewId, String placeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/details/for/{className}/{viewId}"
            .replace("{" + "className" + "}", localVarApiClient.escapeString(className.toString()))
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (placeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeName", placeName));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewDetailsValidateBeforeCall(String className, Long viewId, String placeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling getViewDetails(Async)");
        }

        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getViewDetails(Async)");
        }

        return getViewDetailsCall(className, viewId, placeName, _callback);

    }

    /**
     * Returns view&#39;s detailed information, suitable for browser.
     * Returns view&#39;s detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @return ViewDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ViewDetailsDTO getViewDetails(String className, Long viewId, String placeName) throws ApiException {
        ApiResponse<ViewDetailsDTO> localVarResp = getViewDetailsWithHttpInfo(className, viewId, placeName);
        return localVarResp.getData();
    }

    /**
     * Returns view&#39;s detailed information, suitable for browser.
     * Returns view&#39;s detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @return ApiResponse&lt;ViewDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewDetailsDTO> getViewDetailsWithHttpInfo(String className, Long viewId, String placeName) throws ApiException {
        okhttp3.Call localVarCall = getViewDetailsValidateBeforeCall(className, viewId, placeName, null);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns view&#39;s detailed information, suitable for browser. (asynchronously)
     * Returns view&#39;s detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewDetailsAsync(String className, Long viewId, String placeName, final ApiCallback<ViewDetailsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewDetailsValidateBeforeCall(className, viewId, placeName, _callback);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getViewsBrief
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewsBriefCall(String className, String placeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/for/{className}"
            .replace("{" + "className" + "}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (placeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeName", placeName));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewsBriefValidateBeforeCall(String className, String placeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling getViewsBrief(Async)");
        }

        return getViewsBriefCall(className, placeName, _callback);

    }

    /**
     * Returns views&#39; brief.
     * Returns views&#39; brief.
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @return ViewsBriefDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ViewsBriefDTO getViewsBrief(String className, String placeName) throws ApiException {
        ApiResponse<ViewsBriefDTO> localVarResp = getViewsBriefWithHttpInfo(className, placeName);
        return localVarResp.getData();
    }

    /**
     * Returns views&#39; brief.
     * Returns views&#39; brief.
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @return ApiResponse&lt;ViewsBriefDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewsBriefDTO> getViewsBriefWithHttpInfo(String className, String placeName) throws ApiException {
        okhttp3.Call localVarCall = getViewsBriefValidateBeforeCall(className, placeName, null);
        Type localVarReturnType = new TypeToken<ViewsBriefDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns views&#39; brief. (asynchronously)
     * Returns views&#39; brief.
     * @param className views&#39; class name (required)
     * @param placeName place name (denotes specific place in system with the table) (optional, default to default)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewsBriefAsync(String className, String placeName, final ApiCallback<ViewsBriefDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewsBriefValidateBeforeCall(className, placeName, _callback);
        Type localVarReturnType = new TypeToken<ViewsBriefDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selectViewAndGetItsDetails
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional, default to default)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectViewAndGetItsDetailsCall(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/views/details/for/{className}/{viewId}"
            .replace("{" + "className" + "}", localVarApiClient.escapeString(className.toString()))
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (placeNameDenotesSpecificPlaceInSystemWithTheTable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("place name (denotes specific place in system with the table)", placeNameDenotesSpecificPlaceInSystemWithTheTable));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectViewAndGetItsDetailsValidateBeforeCall(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling selectViewAndGetItsDetails(Async)");
        }

        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling selectViewAndGetItsDetails(Async)");
        }

        return selectViewAndGetItsDetailsCall(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable, _callback);

    }

    /**
     * Selects given view as current and returns its detailed information, suitable for browser.
     * Selects given view as current and returns its detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional, default to default)
     * @return ViewDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ViewDetailsDTO selectViewAndGetItsDetails(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable) throws ApiException {
        ApiResponse<ViewDetailsDTO> localVarResp = selectViewAndGetItsDetailsWithHttpInfo(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable);
        return localVarResp.getData();
    }

    /**
     * Selects given view as current and returns its detailed information, suitable for browser.
     * Selects given view as current and returns its detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional, default to default)
     * @return ApiResponse&lt;ViewDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewDetailsDTO> selectViewAndGetItsDetailsWithHttpInfo(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable) throws ApiException {
        okhttp3.Call localVarCall = selectViewAndGetItsDetailsValidateBeforeCall(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable, null);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Selects given view as current and returns its detailed information, suitable for browser. (asynchronously)
     * Selects given view as current and returns its detailed information, suitable for browser.
     * @param className views&#39; class name (required)
     * @param viewId  (required)
     * @param placeNameDenotesSpecificPlaceInSystemWithTheTable  (optional, default to default)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectViewAndGetItsDetailsAsync(String className, Long viewId, String placeNameDenotesSpecificPlaceInSystemWithTheTable, final ApiCallback<ViewDetailsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectViewAndGetItsDetailsValidateBeforeCall(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable, _callback);
        Type localVarReturnType = new TypeToken<ViewDetailsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param viewId view&#39;s identifier (required)
     * @param viewDTO Updated all view&#39;s information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(Long viewId, ViewDTO viewDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = viewDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(Long viewId, ViewDTO viewDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling update(Async)");
        }

        // verify the required parameter 'viewDTO' is set
        if (viewDTO == null) {
            throw new ApiException("Missing the required parameter 'viewDTO' when calling update(Async)");
        }

        return updateCall(viewId, viewDTO, _callback);

    }

    /**
     * Updates all view&#39;s information.
     * Updates all view&#39;s information (ie. name, columns, filters, etc).
     * @param viewId view&#39;s identifier (required)
     * @param viewDTO Updated all view&#39;s information. (required)
     * @return ViewDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ViewDTO update(Long viewId, ViewDTO viewDTO) throws ApiException {
        ApiResponse<ViewDTO> localVarResp = updateWithHttpInfo(viewId, viewDTO);
        return localVarResp.getData();
    }

    /**
     * Updates all view&#39;s information.
     * Updates all view&#39;s information (ie. name, columns, filters, etc).
     * @param viewId view&#39;s identifier (required)
     * @param viewDTO Updated all view&#39;s information. (required)
     * @return ApiResponse&lt;ViewDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewDTO> updateWithHttpInfo(Long viewId, ViewDTO viewDTO) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(viewId, viewDTO, null);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates all view&#39;s information. (asynchronously)
     * Updates all view&#39;s information (ie. name, columns, filters, etc).
     * @param viewId view&#39;s identifier (required)
     * @param viewDTO Updated all view&#39;s information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(Long viewId, ViewDTO viewDTO, final ApiCallback<ViewDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(viewId, viewDTO, _callback);
        Type localVarReturnType = new TypeToken<ViewDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateColumnSettings
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param body Updated column&#39;s specific settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnSettingsCall(Long viewId, String columnName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns/{columnName}/settings"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()))
            .replace("{" + "columnName" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateColumnSettingsValidateBeforeCall(Long viewId, String columnName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateColumnSettings(Async)");
        }

        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling updateColumnSettings(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateColumnSettings(Async)");
        }

        return updateColumnSettingsCall(viewId, columnName, body, _callback);

    }

    /**
     * Updates column&#39;s specific settings.
     * Updates column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param body Updated column&#39;s specific settings. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object updateColumnSettings(Long viewId, String columnName, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = updateColumnSettingsWithHttpInfo(viewId, columnName, body);
        return localVarResp.getData();
    }

    /**
     * Updates column&#39;s specific settings.
     * Updates column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param body Updated column&#39;s specific settings. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateColumnSettingsWithHttpInfo(Long viewId, String columnName, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateColumnSettingsValidateBeforeCall(viewId, columnName, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates column&#39;s specific settings. (asynchronously)
     * Updates column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * @param viewId view&#39;s identifier (required)
     * @param columnName column&#39;s name (required)
     * @param body Updated column&#39;s specific settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnSettingsAsync(Long viewId, String columnName, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateColumnSettingsValidateBeforeCall(viewId, columnName, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateColumns
     * @param viewId view&#39;s identifier (required)
     * @param columnDTO Updated columns in view. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnsCall(Long viewId, List<ColumnDTO> columnDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = columnDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/columns"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateColumnsValidateBeforeCall(Long viewId, List<ColumnDTO> columnDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateColumns(Async)");
        }

        // verify the required parameter 'columnDTO' is set
        if (columnDTO == null) {
            throw new ApiException("Missing the required parameter 'columnDTO' when calling updateColumns(Async)");
        }

        return updateColumnsCall(viewId, columnDTO, _callback);

    }

    /**
     * Updates columns in view.
     * Updates columns in view.
     * @param viewId view&#39;s identifier (required)
     * @param columnDTO Updated columns in view. (required)
     * @return List&lt;ColumnDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ColumnDTO> updateColumns(Long viewId, List<ColumnDTO> columnDTO) throws ApiException {
        ApiResponse<List<ColumnDTO>> localVarResp = updateColumnsWithHttpInfo(viewId, columnDTO);
        return localVarResp.getData();
    }

    /**
     * Updates columns in view.
     * Updates columns in view.
     * @param viewId view&#39;s identifier (required)
     * @param columnDTO Updated columns in view. (required)
     * @return ApiResponse&lt;List&lt;ColumnDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ColumnDTO>> updateColumnsWithHttpInfo(Long viewId, List<ColumnDTO> columnDTO) throws ApiException {
        okhttp3.Call localVarCall = updateColumnsValidateBeforeCall(viewId, columnDTO, null);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates columns in view. (asynchronously)
     * Updates columns in view.
     * @param viewId view&#39;s identifier (required)
     * @param columnDTO Updated columns in view. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateColumnsAsync(Long viewId, List<ColumnDTO> columnDTO, final ApiCallback<List<ColumnDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateColumnsValidateBeforeCall(viewId, columnDTO, _callback);
        Type localVarReturnType = new TypeToken<List<ColumnDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFilter
     * @param viewId view&#39;s identifier (required)
     * @param filterPropertyDTO Updated view&#39;s filter. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFilterCall(Long viewId, List<FilterPropertyDTO> filterPropertyDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filterPropertyDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/filter"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFilterValidateBeforeCall(Long viewId, List<FilterPropertyDTO> filterPropertyDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateFilter(Async)");
        }

        // verify the required parameter 'filterPropertyDTO' is set
        if (filterPropertyDTO == null) {
            throw new ApiException("Missing the required parameter 'filterPropertyDTO' when calling updateFilter(Async)");
        }

        return updateFilterCall(viewId, filterPropertyDTO, _callback);

    }

    /**
     * Updates view&#39;s filter.
     * Updates view&#39;s filter.
     * @param viewId view&#39;s identifier (required)
     * @param filterPropertyDTO Updated view&#39;s filter. (required)
     * @return FilterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FilterDTO updateFilter(Long viewId, List<FilterPropertyDTO> filterPropertyDTO) throws ApiException {
        ApiResponse<FilterDTO> localVarResp = updateFilterWithHttpInfo(viewId, filterPropertyDTO);
        return localVarResp.getData();
    }

    /**
     * Updates view&#39;s filter.
     * Updates view&#39;s filter.
     * @param viewId view&#39;s identifier (required)
     * @param filterPropertyDTO Updated view&#39;s filter. (required)
     * @return ApiResponse&lt;FilterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FilterDTO> updateFilterWithHttpInfo(Long viewId, List<FilterPropertyDTO> filterPropertyDTO) throws ApiException {
        okhttp3.Call localVarCall = updateFilterValidateBeforeCall(viewId, filterPropertyDTO, null);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates view&#39;s filter. (asynchronously)
     * Updates view&#39;s filter.
     * @param viewId view&#39;s identifier (required)
     * @param filterPropertyDTO Updated view&#39;s filter. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFilterAsync(Long viewId, List<FilterPropertyDTO> filterPropertyDTO, final ApiCallback<FilterDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFilterValidateBeforeCall(viewId, filterPropertyDTO, _callback);
        Type localVarReturnType = new TypeToken<FilterDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFilterProperty
     * @param viewId view&#39;s identifier (required)
     * @param filterProperty view&#39;s filter property name (required)
     * @param filterPropertyDTO Updated view&#39;s filter property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFilterPropertyCall(Long viewId, String filterProperty, FilterPropertyDTO filterPropertyDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filterPropertyDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/filter/{filterProperty}"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()))
            .replace("{" + "filterProperty" + "}", localVarApiClient.escapeString(filterProperty.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFilterPropertyValidateBeforeCall(Long viewId, String filterProperty, FilterPropertyDTO filterPropertyDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateFilterProperty(Async)");
        }

        // verify the required parameter 'filterProperty' is set
        if (filterProperty == null) {
            throw new ApiException("Missing the required parameter 'filterProperty' when calling updateFilterProperty(Async)");
        }

        // verify the required parameter 'filterPropertyDTO' is set
        if (filterPropertyDTO == null) {
            throw new ApiException("Missing the required parameter 'filterPropertyDTO' when calling updateFilterProperty(Async)");
        }

        return updateFilterPropertyCall(viewId, filterProperty, filterPropertyDTO, _callback);

    }

    /**
     * Updates view&#39;s filter property.
     * Updates view&#39;s filter property.
     * @param viewId view&#39;s identifier (required)
     * @param filterProperty view&#39;s filter property name (required)
     * @param filterPropertyDTO Updated view&#39;s filter property. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object updateFilterProperty(Long viewId, String filterProperty, FilterPropertyDTO filterPropertyDTO) throws ApiException {
        ApiResponse<Object> localVarResp = updateFilterPropertyWithHttpInfo(viewId, filterProperty, filterPropertyDTO);
        return localVarResp.getData();
    }

    /**
     * Updates view&#39;s filter property.
     * Updates view&#39;s filter property.
     * @param viewId view&#39;s identifier (required)
     * @param filterProperty view&#39;s filter property name (required)
     * @param filterPropertyDTO Updated view&#39;s filter property. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateFilterPropertyWithHttpInfo(Long viewId, String filterProperty, FilterPropertyDTO filterPropertyDTO) throws ApiException {
        okhttp3.Call localVarCall = updateFilterPropertyValidateBeforeCall(viewId, filterProperty, filterPropertyDTO, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates view&#39;s filter property. (asynchronously)
     * Updates view&#39;s filter property.
     * @param viewId view&#39;s identifier (required)
     * @param filterProperty view&#39;s filter property name (required)
     * @param filterPropertyDTO Updated view&#39;s filter property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFilterPropertyAsync(Long viewId, String filterProperty, FilterPropertyDTO filterPropertyDTO, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFilterPropertyValidateBeforeCall(viewId, filterProperty, filterPropertyDTO, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLocalSettings
     * @param viewId view&#39;s identifier (required)
     * @param localSettingsDTO Updated view&#39;s local settings (for current user). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLocalSettingsCall(Long viewId, LocalSettingsDTO localSettingsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = localSettingsDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings/local"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLocalSettingsValidateBeforeCall(Long viewId, LocalSettingsDTO localSettingsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateLocalSettings(Async)");
        }

        // verify the required parameter 'localSettingsDTO' is set
        if (localSettingsDTO == null) {
            throw new ApiException("Missing the required parameter 'localSettingsDTO' when calling updateLocalSettings(Async)");
        }

        return updateLocalSettingsCall(viewId, localSettingsDTO, _callback);

    }

    /**
     * Updates view&#39;s local settings (for current user).
     * Updates view&#39;s local settings (for current user).
     * @param viewId view&#39;s identifier (required)
     * @param localSettingsDTO Updated view&#39;s local settings (for current user). (required)
     * @return LocalSettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocalSettingsDTO updateLocalSettings(Long viewId, LocalSettingsDTO localSettingsDTO) throws ApiException {
        ApiResponse<LocalSettingsDTO> localVarResp = updateLocalSettingsWithHttpInfo(viewId, localSettingsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates view&#39;s local settings (for current user).
     * Updates view&#39;s local settings (for current user).
     * @param viewId view&#39;s identifier (required)
     * @param localSettingsDTO Updated view&#39;s local settings (for current user). (required)
     * @return ApiResponse&lt;LocalSettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocalSettingsDTO> updateLocalSettingsWithHttpInfo(Long viewId, LocalSettingsDTO localSettingsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateLocalSettingsValidateBeforeCall(viewId, localSettingsDTO, null);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates view&#39;s local settings (for current user). (asynchronously)
     * Updates view&#39;s local settings (for current user).
     * @param viewId view&#39;s identifier (required)
     * @param localSettingsDTO Updated view&#39;s local settings (for current user). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLocalSettingsAsync(Long viewId, LocalSettingsDTO localSettingsDTO, final ApiCallback<LocalSettingsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLocalSettingsValidateBeforeCall(viewId, localSettingsDTO, _callback);
        Type localVarReturnType = new TypeToken<LocalSettingsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrder
     * @param viewId view&#39;s identifier (required)
     * @param orderDTO Updated view&#39;s order settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderCall(Long viewId, OrderDTO orderDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/order"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderValidateBeforeCall(Long viewId, OrderDTO orderDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateOrder(Async)");
        }

        // verify the required parameter 'orderDTO' is set
        if (orderDTO == null) {
            throw new ApiException("Missing the required parameter 'orderDTO' when calling updateOrder(Async)");
        }

        return updateOrderCall(viewId, orderDTO, _callback);

    }

    /**
     * Updates view&#39;s order settings.
     * Updates view&#39;s order settings.
     * @param viewId view&#39;s identifier (required)
     * @param orderDTO Updated view&#39;s order settings. (required)
     * @return OrderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderDTO updateOrder(Long viewId, OrderDTO orderDTO) throws ApiException {
        ApiResponse<OrderDTO> localVarResp = updateOrderWithHttpInfo(viewId, orderDTO);
        return localVarResp.getData();
    }

    /**
     * Updates view&#39;s order settings.
     * Updates view&#39;s order settings.
     * @param viewId view&#39;s identifier (required)
     * @param orderDTO Updated view&#39;s order settings. (required)
     * @return ApiResponse&lt;OrderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDTO> updateOrderWithHttpInfo(Long viewId, OrderDTO orderDTO) throws ApiException {
        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(viewId, orderDTO, null);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates view&#39;s order settings. (asynchronously)
     * Updates view&#39;s order settings.
     * @param viewId view&#39;s identifier (required)
     * @param orderDTO Updated view&#39;s order settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderAsync(Long viewId, OrderDTO orderDTO, final ApiCallback<OrderDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(viewId, orderDTO, _callback);
        Type localVarReturnType = new TypeToken<OrderDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePermissions
     * @param viewId view&#39;s identifier (required)
     * @param permissionsDTO Updated view&#39;s permissions. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePermissionsCall(Long viewId, PermissionsDTO permissionsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/permissions"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePermissionsValidateBeforeCall(Long viewId, PermissionsDTO permissionsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updatePermissions(Async)");
        }

        // verify the required parameter 'permissionsDTO' is set
        if (permissionsDTO == null) {
            throw new ApiException("Missing the required parameter 'permissionsDTO' when calling updatePermissions(Async)");
        }

        return updatePermissionsCall(viewId, permissionsDTO, _callback);

    }

    /**
     * Updates view&#39;s permissions.
     * Updates view&#39;s permissions.
     * @param viewId view&#39;s identifier (required)
     * @param permissionsDTO Updated view&#39;s permissions. (required)
     * @return PermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PermissionsDTO updatePermissions(Long viewId, PermissionsDTO permissionsDTO) throws ApiException {
        ApiResponse<PermissionsDTO> localVarResp = updatePermissionsWithHttpInfo(viewId, permissionsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates view&#39;s permissions.
     * Updates view&#39;s permissions.
     * @param viewId view&#39;s identifier (required)
     * @param permissionsDTO Updated view&#39;s permissions. (required)
     * @return ApiResponse&lt;PermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionsDTO> updatePermissionsWithHttpInfo(Long viewId, PermissionsDTO permissionsDTO) throws ApiException {
        okhttp3.Call localVarCall = updatePermissionsValidateBeforeCall(viewId, permissionsDTO, null);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates view&#39;s permissions. (asynchronously)
     * Updates view&#39;s permissions.
     * @param viewId view&#39;s identifier (required)
     * @param permissionsDTO Updated view&#39;s permissions. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePermissionsAsync(Long viewId, PermissionsDTO permissionsDTO, final ApiCallback<PermissionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePermissionsValidateBeforeCall(viewId, permissionsDTO, _callback);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSettings
     * @param viewId view&#39;s identifier (required)
     * @param settingsDTO Updated view&#39;s settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSettingsCall(Long viewId, SettingsDTO settingsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settingsDTO;

        // create path and map variables
        String localVarPath = "/browser/views/{viewId}/settings"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(Long viewId, SettingsDTO settingsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateSettings(Async)");
        }

        // verify the required parameter 'settingsDTO' is set
        if (settingsDTO == null) {
            throw new ApiException("Missing the required parameter 'settingsDTO' when calling updateSettings(Async)");
        }

        return updateSettingsCall(viewId, settingsDTO, _callback);

    }

    /**
     * Updates view&#39;s settings.
     * Updates view&#39;s settings.
     * @param viewId view&#39;s identifier (required)
     * @param settingsDTO Updated view&#39;s settings. (required)
     * @return SettingsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SettingsDTO updateSettings(Long viewId, SettingsDTO settingsDTO) throws ApiException {
        ApiResponse<SettingsDTO> localVarResp = updateSettingsWithHttpInfo(viewId, settingsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates view&#39;s settings.
     * Updates view&#39;s settings.
     * @param viewId view&#39;s identifier (required)
     * @param settingsDTO Updated view&#39;s settings. (required)
     * @return ApiResponse&lt;SettingsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SettingsDTO> updateSettingsWithHttpInfo(Long viewId, SettingsDTO settingsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(viewId, settingsDTO, null);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates view&#39;s settings. (asynchronously)
     * Updates view&#39;s settings.
     * @param viewId view&#39;s identifier (required)
     * @param settingsDTO Updated view&#39;s settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSettingsAsync(Long viewId, SettingsDTO settingsDTO, final ApiCallback<SettingsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(viewId, settingsDTO, _callback);
        Type localVarReturnType = new TypeToken<SettingsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
