/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomerResponsiblePersonsDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerResponsiblePersonsDTO {
  public static final String SERIALIZED_NAME_ACCOUNT_MANAGER_ID = "accountManagerId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_MANAGER_ID)
  private Long accountManagerId;

  public static final String SERIALIZED_NAME_PROJECT_COORDINATOR_ID = "projectCoordinatorId";
  @SerializedName(SERIALIZED_NAME_PROJECT_COORDINATOR_ID)
  private Long projectCoordinatorId;

  public static final String SERIALIZED_NAME_PROJECT_MANAGER_ID = "projectManagerId";
  @SerializedName(SERIALIZED_NAME_PROJECT_MANAGER_ID)
  private Long projectManagerId;

  public static final String SERIALIZED_NAME_SALES_PERSON_ID = "salesPersonId";
  @SerializedName(SERIALIZED_NAME_SALES_PERSON_ID)
  private Long salesPersonId;

  public CustomerResponsiblePersonsDTO() {
  }

  public CustomerResponsiblePersonsDTO accountManagerId(Long accountManagerId) {
    this.accountManagerId = accountManagerId;
    return this;
  }

  /**
   * account manager
   * @return accountManagerId
   */
  @javax.annotation.Nullable
  public Long getAccountManagerId() {
    return accountManagerId;
  }

  public void setAccountManagerId(Long accountManagerId) {
    this.accountManagerId = accountManagerId;
  }


  public CustomerResponsiblePersonsDTO projectCoordinatorId(Long projectCoordinatorId) {
    this.projectCoordinatorId = projectCoordinatorId;
    return this;
  }

  /**
   * project coordinator
   * @return projectCoordinatorId
   */
  @javax.annotation.Nullable
  public Long getProjectCoordinatorId() {
    return projectCoordinatorId;
  }

  public void setProjectCoordinatorId(Long projectCoordinatorId) {
    this.projectCoordinatorId = projectCoordinatorId;
  }


  public CustomerResponsiblePersonsDTO projectManagerId(Long projectManagerId) {
    this.projectManagerId = projectManagerId;
    return this;
  }

  /**
   * project manager
   * @return projectManagerId
   */
  @javax.annotation.Nonnull
  public Long getProjectManagerId() {
    return projectManagerId;
  }

  public void setProjectManagerId(Long projectManagerId) {
    this.projectManagerId = projectManagerId;
  }


  public CustomerResponsiblePersonsDTO salesPersonId(Long salesPersonId) {
    this.salesPersonId = salesPersonId;
    return this;
  }

  /**
   * sales person
   * @return salesPersonId
   */
  @javax.annotation.Nonnull
  public Long getSalesPersonId() {
    return salesPersonId;
  }

  public void setSalesPersonId(Long salesPersonId) {
    this.salesPersonId = salesPersonId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerResponsiblePersonsDTO customerResponsiblePersonsDTO = (CustomerResponsiblePersonsDTO) o;
    return Objects.equals(this.accountManagerId, customerResponsiblePersonsDTO.accountManagerId) &&
        Objects.equals(this.projectCoordinatorId, customerResponsiblePersonsDTO.projectCoordinatorId) &&
        Objects.equals(this.projectManagerId, customerResponsiblePersonsDTO.projectManagerId) &&
        Objects.equals(this.salesPersonId, customerResponsiblePersonsDTO.salesPersonId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountManagerId, projectCoordinatorId, projectManagerId, salesPersonId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerResponsiblePersonsDTO {\n");
    sb.append("    accountManagerId: ").append(toIndentedString(accountManagerId)).append("\n");
    sb.append("    projectCoordinatorId: ").append(toIndentedString(projectCoordinatorId)).append("\n");
    sb.append("    projectManagerId: ").append(toIndentedString(projectManagerId)).append("\n");
    sb.append("    salesPersonId: ").append(toIndentedString(salesPersonId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountManagerId");
    openapiFields.add("projectCoordinatorId");
    openapiFields.add("projectManagerId");
    openapiFields.add("salesPersonId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectManagerId");
    openapiRequiredFields.add("salesPersonId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerResponsiblePersonsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerResponsiblePersonsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerResponsiblePersonsDTO is not found in the empty JSON string", CustomerResponsiblePersonsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerResponsiblePersonsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerResponsiblePersonsDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerResponsiblePersonsDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerResponsiblePersonsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerResponsiblePersonsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerResponsiblePersonsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerResponsiblePersonsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerResponsiblePersonsDTO>() {
           @Override
           public void write(JsonWriter out, CustomerResponsiblePersonsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerResponsiblePersonsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerResponsiblePersonsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerResponsiblePersonsDTO
   * @throws IOException if the JSON string is invalid with respect to CustomerResponsiblePersonsDTO
   */
  public static CustomerResponsiblePersonsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerResponsiblePersonsDTO.class);
  }

  /**
   * Convert an instance of CustomerResponsiblePersonsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

