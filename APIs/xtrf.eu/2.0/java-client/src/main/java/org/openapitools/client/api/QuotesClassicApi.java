/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommonLanguageCombinationDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.FinanceDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.PayableCreateDTO;
import org.openapitools.client.model.PayableDTO;
import org.openapitools.client.model.QuoteDTOv1;
import org.openapitools.client.model.QuoteDatesDTO;
import org.openapitools.client.model.ReceivableCreateDTO;
import org.openapitools.client.model.ReceivableDTO;
import org.openapitools.client.model.TaskDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuotesClassicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuotesClassicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuotesClassicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createLanguageCombination1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created a new language combination for a given quote without creating a task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLanguageCombination1Call(String quoteId, CommonLanguageCombinationDTO commonLanguageCombinationDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commonLanguageCombinationDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/languageCombinations"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLanguageCombination1ValidateBeforeCall(String quoteId, CommonLanguageCombinationDTO commonLanguageCombinationDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling createLanguageCombination1(Async)");
        }

        // verify the required parameter 'commonLanguageCombinationDTO' is set
        if (commonLanguageCombinationDTO == null) {
            throw new ApiException("Missing the required parameter 'commonLanguageCombinationDTO' when calling createLanguageCombination1(Async)");
        }

        return createLanguageCombination1Call(quoteId, commonLanguageCombinationDTO, _callback);

    }

    /**
     * Creates a new language combination for a given quote without creating a task.
     * Creates a new language combination for a given quote without creating a task.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created a new language combination for a given quote without creating a task. (required)
     * @return CommonLanguageCombinationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommonLanguageCombinationDTO createLanguageCombination1(String quoteId, CommonLanguageCombinationDTO commonLanguageCombinationDTO) throws ApiException {
        ApiResponse<CommonLanguageCombinationDTO> localVarResp = createLanguageCombination1WithHttpInfo(quoteId, commonLanguageCombinationDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new language combination for a given quote without creating a task.
     * Creates a new language combination for a given quote without creating a task.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created a new language combination for a given quote without creating a task. (required)
     * @return ApiResponse&lt;CommonLanguageCombinationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonLanguageCombinationDTO> createLanguageCombination1WithHttpInfo(String quoteId, CommonLanguageCombinationDTO commonLanguageCombinationDTO) throws ApiException {
        okhttp3.Call localVarCall = createLanguageCombination1ValidateBeforeCall(quoteId, commonLanguageCombinationDTO, null);
        Type localVarReturnType = new TypeToken<CommonLanguageCombinationDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new language combination for a given quote without creating a task. (asynchronously)
     * Creates a new language combination for a given quote without creating a task.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param commonLanguageCombinationDTO Created a new language combination for a given quote without creating a task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLanguageCombination1Async(String quoteId, CommonLanguageCombinationDTO commonLanguageCombinationDTO, final ApiCallback<CommonLanguageCombinationDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLanguageCombination1ValidateBeforeCall(quoteId, commonLanguageCombinationDTO, _callback);
        Type localVarReturnType = new TypeToken<CommonLanguageCombinationDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayable1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO Adds a payable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayable1Call(String quoteId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableCreateDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/finance/payables"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayable1ValidateBeforeCall(String quoteId, PayableCreateDTO payableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling createPayable1(Async)");
        }

        // verify the required parameter 'payableCreateDTO' is set
        if (payableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'payableCreateDTO' when calling createPayable1(Async)");
        }

        return createPayable1Call(quoteId, payableCreateDTO, _callback);

    }

    /**
     * Adds a payable.
     * Adds a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO Adds a payable. (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO createPayable1(String quoteId, PayableCreateDTO payableCreateDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = createPayable1WithHttpInfo(quoteId, payableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a payable.
     * Adds a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO Adds a payable. (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> createPayable1WithHttpInfo(String quoteId, PayableCreateDTO payableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createPayable1ValidateBeforeCall(quoteId, payableCreateDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a payable. (asynchronously)
     * Adds a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableCreateDTO Adds a payable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPayable1Async(String quoteId, PayableCreateDTO payableCreateDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayable1ValidateBeforeCall(quoteId, payableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReceivable1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO Adds a receivable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivable1Call(String quoteId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableCreateDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/finance/receivables"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceivable1ValidateBeforeCall(String quoteId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling createReceivable1(Async)");
        }

        // verify the required parameter 'receivableCreateDTO' is set
        if (receivableCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableCreateDTO' when calling createReceivable1(Async)");
        }

        return createReceivable1Call(quoteId, receivableCreateDTO, _callback);

    }

    /**
     * Adds a receivable.
     * Adds a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO Adds a receivable. (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO createReceivable1(String quoteId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = createReceivable1WithHttpInfo(quoteId, receivableCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Adds a receivable.
     * Adds a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO Adds a receivable. (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> createReceivable1WithHttpInfo(String quoteId, ReceivableCreateDTO receivableCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createReceivable1ValidateBeforeCall(quoteId, receivableCreateDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a receivable. (asynchronously)
     * Adds a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableCreateDTO Adds a receivable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivable1Async(String quoteId, ReceivableCreateDTO receivableCreateDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceivable1ValidateBeforeCall(quoteId, receivableCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTask1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param taskDTO Updated custom fields of a given quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTask1Call(String quoteId, TaskDTO taskDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/tasks"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTask1ValidateBeforeCall(String quoteId, TaskDTO taskDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling createTask1(Async)");
        }

        // verify the required parameter 'taskDTO' is set
        if (taskDTO == null) {
            throw new ApiException("Missing the required parameter 'taskDTO' when calling createTask1(Async)");
        }

        return createTask1Call(quoteId, taskDTO, _callback);

    }

    /**
     * Creates a new task for a given quote.
     * Creates a new task for a given quote. Required fields are presented in the example.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param taskDTO Updated custom fields of a given quote. (required)
     * @return TaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TaskDTO createTask1(String quoteId, TaskDTO taskDTO) throws ApiException {
        ApiResponse<TaskDTO> localVarResp = createTask1WithHttpInfo(quoteId, taskDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new task for a given quote.
     * Creates a new task for a given quote. Required fields are presented in the example.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param taskDTO Updated custom fields of a given quote. (required)
     * @return ApiResponse&lt;TaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskDTO> createTask1WithHttpInfo(String quoteId, TaskDTO taskDTO) throws ApiException {
        okhttp3.Call localVarCall = createTask1ValidateBeforeCall(quoteId, taskDTO, null);
        Type localVarReturnType = new TypeToken<TaskDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new task for a given quote. (asynchronously)
     * Creates a new task for a given quote. Required fields are presented in the example.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param taskDTO Updated custom fields of a given quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTask1Async(String quoteId, TaskDTO taskDTO, final ApiCallback<TaskDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTask1ValidateBeforeCall(quoteId, taskDTO, _callback);
        Type localVarReturnType = new TypeToken<TaskDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete13
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete13Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete13ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling delete13(Async)");
        }

        return delete13Call(quoteId, _callback);

    }

    /**
     * Removes a quote.
     * Removes a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete13(String quoteId) throws ApiException {
        delete13WithHttpInfo(quoteId);
    }

    /**
     * Removes a quote.
     * Removes a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete13WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = delete13ValidateBeforeCall(quoteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a quote. (asynchronously)
     * Removes a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete13Async(String quoteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete13ValidateBeforeCall(quoteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayable1
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayable1Call(String quoteId, Long payableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/finance/payables/{payableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayable1ValidateBeforeCall(String quoteId, Long payableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling deletePayable1(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling deletePayable1(Async)");
        }

        return deletePayable1Call(quoteId, payableId, _callback);

    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayable1(String quoteId, Long payableId) throws ApiException {
        deletePayable1WithHttpInfo(quoteId, payableId);
    }

    /**
     * Deletes a payable.
     * Deletes a payable.
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayable1WithHttpInfo(String quoteId, Long payableId) throws ApiException {
        okhttp3.Call localVarCall = deletePayable1ValidateBeforeCall(quoteId, payableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a payable. (asynchronously)
     * Deletes a payable.
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayable1Async(String quoteId, Long payableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayable1ValidateBeforeCall(quoteId, payableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReceivable1
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivable1Call(String quoteId, Long receivableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/finance/receivables/{receivableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReceivable1ValidateBeforeCall(String quoteId, Long receivableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling deleteReceivable1(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling deleteReceivable1(Async)");
        }

        return deleteReceivable1Call(quoteId, receivableId, _callback);

    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReceivable1(String quoteId, Long receivableId) throws ApiException {
        deleteReceivable1WithHttpInfo(quoteId, receivableId);
    }

    /**
     * Deletes a receivable.
     * Deletes a receivable.
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReceivable1WithHttpInfo(String quoteId, Long receivableId) throws ApiException {
        okhttp3.Call localVarCall = deleteReceivable1ValidateBeforeCall(quoteId, receivableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a receivable. (asynchronously)
     * Deletes a receivable.
     * @param quoteId quoteId&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivable1Async(String quoteId, Long receivableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReceivable1ValidateBeforeCall(quoteId, receivableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllIds7
     * @param updatedSince only quotes modified since this timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds7Call(Long updatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIds7ValidateBeforeCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        return getAllIds7Call(updatedSince, _callback);

    }

    /**
     * Returns quotes&#39; internal identifiers.
     * Returns quotes&#39; internal identifiers.
     * @param updatedSince only quotes modified since this timestamp (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> getAllIds7(Long updatedSince) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = getAllIds7WithHttpInfo(updatedSince);
        return localVarResp.getData();
    }

    /**
     * Returns quotes&#39; internal identifiers.
     * Returns quotes&#39; internal identifiers.
     * @param updatedSince only quotes modified since this timestamp (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> getAllIds7WithHttpInfo(Long updatedSince) throws ApiException {
        okhttp3.Call localVarCall = getAllIds7ValidateBeforeCall(updatedSince, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns quotes&#39; internal identifiers. (asynchronously)
     * Returns quotes&#39; internal identifiers.
     * @param updatedSince only quotes modified since this timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIds7Async(Long updatedSince, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIds7ValidateBeforeCall(updatedSince, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById8
     * @param quoteId quote&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById8Call(String quoteId, String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById8ValidateBeforeCall(String quoteId, String embed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getById8(Async)");
        }

        return getById8Call(quoteId, embed, _callback);

    }

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @return QuoteDTOv1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteDTOv1 getById8(String quoteId, String embed) throws ApiException {
        ApiResponse<QuoteDTOv1> localVarResp = getById8WithHttpInfo(quoteId, embed);
        return localVarResp.getData();
    }

    /**
     * Returns quote details.
     * Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @return ApiResponse&lt;QuoteDTOv1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteDTOv1> getById8WithHttpInfo(String quoteId, String embed) throws ApiException {
        okhttp3.Call localVarCall = getById8ValidateBeforeCall(quoteId, embed, null);
        Type localVarReturnType = new TypeToken<QuoteDTOv1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns quote details. (asynchronously)
     * Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getById8Async(String quoteId, String embed, final ApiCallback<QuoteDTOv1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById8ValidateBeforeCall(quoteId, embed, _callback);
        Type localVarReturnType = new TypeToken<QuoteDTOv1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomFields6
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields6Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/customFields"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFields6ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getCustomFields6(Async)");
        }

        return getCustomFields6Call(quoteId, _callback);

    }

    /**
     * Returns custom fields of a given quote.
     * Returns custom fields of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> getCustomFields6(String quoteId) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = getCustomFields6WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns custom fields of a given quote.
     * Returns custom fields of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> getCustomFields6WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFields6ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns custom fields of a given quote. (asynchronously)
     * Returns custom fields of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomFields6Async(String quoteId, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFields6ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDates2
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDates2Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/dates"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDates2ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getDates2(Async)");
        }

        return getDates2Call(quoteId, _callback);

    }

    /**
     * Returns dates of a given quote.
     * Returns dates of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return QuoteDatesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteDatesDTO getDates2(String quoteId) throws ApiException {
        ApiResponse<QuoteDatesDTO> localVarResp = getDates2WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns dates of a given quote.
     * Returns dates of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;QuoteDatesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteDatesDTO> getDates2WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getDates2ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<QuoteDatesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns dates of a given quote. (asynchronously)
     * Returns dates of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDates2Async(String quoteId, final ApiCallback<QuoteDatesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDates2ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<QuoteDatesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFinance1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinance1Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/finance"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFinance1ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getFinance1(Async)");
        }

        return getFinance1Call(quoteId, _callback);

    }

    /**
     * Returns finance of a given quote.
     * Returns finance of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return FinanceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FinanceDTO getFinance1(String quoteId) throws ApiException {
        ApiResponse<FinanceDTO> localVarResp = getFinance1WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns finance of a given quote.
     * Returns finance of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;FinanceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FinanceDTO> getFinance1WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getFinance1ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns finance of a given quote. (asynchronously)
     * Returns finance of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFinance1Async(String quoteId, final ApiCallback<FinanceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFinance1ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<FinanceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInstructions1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstructions1Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/instructions"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstructions1ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getInstructions1(Async)");
        }

        return getInstructions1Call(quoteId, _callback);

    }

    /**
     * Returns instructions of a given quote.
     * Returns instructions of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return InstructionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstructionsDTO getInstructions1(String quoteId) throws ApiException {
        ApiResponse<InstructionsDTO> localVarResp = getInstructions1WithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Returns instructions of a given quote.
     * Returns instructions of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;InstructionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionsDTO> getInstructions1WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getInstructions1ValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns instructions of a given quote. (asynchronously)
     * Returns instructions of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInstructions1Async(String quoteId, final ApiCallback<InstructionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstructions1ValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for send1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call send1Call(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/confirmation/send"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call send1ValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling send1(Async)");
        }

        return send1Call(quoteId, _callback);

    }

    /**
     * Sends a quote for customer confirmation.
     * Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
     * @param quoteId quote&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void send1(String quoteId) throws ApiException {
        send1WithHttpInfo(quoteId);
    }

    /**
     * Sends a quote for customer confirmation.
     * Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> send1WithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = send1ValidateBeforeCall(quoteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sends a quote for customer confirmation. (asynchronously)
     * Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call send1Async(String quoteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = send1ValidateBeforeCall(quoteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for start
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startCall(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/start"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling start(Async)");
        }

        return startCall(quoteId, _callback);

    }

    /**
     * Starts a quote.
     * Starts a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void start(String quoteId) throws ApiException {
        startWithHttpInfo(quoteId);
    }

    /**
     * Starts a quote.
     * Starts a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> startWithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = startValidateBeforeCall(quoteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Starts a quote. (asynchronously)
     * Starts a quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startAsync(String quoteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startValidateBeforeCall(quoteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFields4
     * @param quoteId quote&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given quote. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields4Call(String quoteId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/customFields"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFields4ValidateBeforeCall(String quoteId, List<CustomFieldDTO> customFieldDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateCustomFields4(Async)");
        }

        // verify the required parameter 'customFieldDTO' is set
        if (customFieldDTO == null) {
            throw new ApiException("Missing the required parameter 'customFieldDTO' when calling updateCustomFields4(Async)");
        }

        return updateCustomFields4Call(quoteId, customFieldDTO, _callback);

    }

    /**
     * Updates custom fields of a given quote.
     * Updates custom fields of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given quote. (required)
     * @return List&lt;CustomFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomFieldDTO> updateCustomFields4(String quoteId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        ApiResponse<List<CustomFieldDTO>> localVarResp = updateCustomFields4WithHttpInfo(quoteId, customFieldDTO);
        return localVarResp.getData();
    }

    /**
     * Updates custom fields of a given quote.
     * Updates custom fields of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given quote. (required)
     * @return ApiResponse&lt;List&lt;CustomFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomFieldDTO>> updateCustomFields4WithHttpInfo(String quoteId, List<CustomFieldDTO> customFieldDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFields4ValidateBeforeCall(quoteId, customFieldDTO, null);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates custom fields of a given quote. (asynchronously)
     * Updates custom fields of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param customFieldDTO Updated custom fields of a given quote. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFields4Async(String quoteId, List<CustomFieldDTO> customFieldDTO, final ApiCallback<List<CustomFieldDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFields4ValidateBeforeCall(quoteId, customFieldDTO, _callback);
        Type localVarReturnType = new TypeToken<List<CustomFieldDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInstructions2
     * @param quoteId quote&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInstructions2Call(String quoteId, InstructionsDTO instructionsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instructionsDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/instructions"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstructions2ValidateBeforeCall(String quoteId, InstructionsDTO instructionsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateInstructions2(Async)");
        }

        // verify the required parameter 'instructionsDTO' is set
        if (instructionsDTO == null) {
            throw new ApiException("Missing the required parameter 'instructionsDTO' when calling updateInstructions2(Async)");
        }

        return updateInstructions2Call(quoteId, instructionsDTO, _callback);

    }

    /**
     * Updates instructions of a given quote.
     * Updates instructions of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @return InstructionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InstructionsDTO updateInstructions2(String quoteId, InstructionsDTO instructionsDTO) throws ApiException {
        ApiResponse<InstructionsDTO> localVarResp = updateInstructions2WithHttpInfo(quoteId, instructionsDTO);
        return localVarResp.getData();
    }

    /**
     * Updates instructions of a given quote.
     * Updates instructions of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @return ApiResponse&lt;InstructionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstructionsDTO> updateInstructions2WithHttpInfo(String quoteId, InstructionsDTO instructionsDTO) throws ApiException {
        okhttp3.Call localVarCall = updateInstructions2ValidateBeforeCall(quoteId, instructionsDTO, null);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates instructions of a given quote. (asynchronously)
     * Updates instructions of a given quote.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param instructionsDTO Updated instructions of a given project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInstructions2Async(String quoteId, InstructionsDTO instructionsDTO, final ApiCallback<InstructionsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstructions2ValidateBeforeCall(quoteId, instructionsDTO, _callback);
        Type localVarReturnType = new TypeToken<InstructionsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayable1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO Updates a payable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayable1Call(String quoteId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payableDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/finance/payables/{payableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "payableId" + "}", localVarApiClient.escapeString(payableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayable1ValidateBeforeCall(String quoteId, Long payableId, PayableDTO payableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updatePayable1(Async)");
        }

        // verify the required parameter 'payableId' is set
        if (payableId == null) {
            throw new ApiException("Missing the required parameter 'payableId' when calling updatePayable1(Async)");
        }

        // verify the required parameter 'payableDTO' is set
        if (payableDTO == null) {
            throw new ApiException("Missing the required parameter 'payableDTO' when calling updatePayable1(Async)");
        }

        return updatePayable1Call(quoteId, payableId, payableDTO, _callback);

    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO Updates a payable. (required)
     * @return PayableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PayableDTO updatePayable1(String quoteId, Long payableId, PayableDTO payableDTO) throws ApiException {
        ApiResponse<PayableDTO> localVarResp = updatePayable1WithHttpInfo(quoteId, payableId, payableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a payable.
     * Updates a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO Updates a payable. (required)
     * @return ApiResponse&lt;PayableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayableDTO> updatePayable1WithHttpInfo(String quoteId, Long payableId, PayableDTO payableDTO) throws ApiException {
        okhttp3.Call localVarCall = updatePayable1ValidateBeforeCall(quoteId, payableId, payableDTO, null);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a payable. (asynchronously)
     * Updates a payable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param payableId payable&#39;s internal identifier (required)
     * @param payableDTO Updates a payable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePayable1Async(String quoteId, Long payableId, PayableDTO payableDTO, final ApiCallback<PayableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayable1ValidateBeforeCall(quoteId, payableId, payableDTO, _callback);
        Type localVarReturnType = new TypeToken<PayableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReceivable1
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO Updates a receivable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivable1Call(String quoteId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receivableDTO;

        // create path and map variables
        String localVarPath = "/quotes/{quoteId}/finance/receivables/{receivableId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "receivableId" + "}", localVarApiClient.escapeString(receivableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReceivable1ValidateBeforeCall(String quoteId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateReceivable1(Async)");
        }

        // verify the required parameter 'receivableId' is set
        if (receivableId == null) {
            throw new ApiException("Missing the required parameter 'receivableId' when calling updateReceivable1(Async)");
        }

        // verify the required parameter 'receivableDTO' is set
        if (receivableDTO == null) {
            throw new ApiException("Missing the required parameter 'receivableDTO' when calling updateReceivable1(Async)");
        }

        return updateReceivable1Call(quoteId, receivableId, receivableDTO, _callback);

    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO Updates a receivable. (required)
     * @return ReceivableDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReceivableDTO updateReceivable1(String quoteId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        ApiResponse<ReceivableDTO> localVarResp = updateReceivable1WithHttpInfo(quoteId, receivableId, receivableDTO);
        return localVarResp.getData();
    }

    /**
     * Updates a receivable.
     * Updates a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO Updates a receivable. (required)
     * @return ApiResponse&lt;ReceivableDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceivableDTO> updateReceivable1WithHttpInfo(String quoteId, Long receivableId, ReceivableDTO receivableDTO) throws ApiException {
        okhttp3.Call localVarCall = updateReceivable1ValidateBeforeCall(quoteId, receivableId, receivableDTO, null);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a receivable. (asynchronously)
     * Updates a receivable.
     * @param quoteId quote&#39;s internal identifier (required)
     * @param receivableId receivable&#39;s internal identifier (required)
     * @param receivableDTO Updates a receivable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReceivable1Async(String quoteId, Long receivableId, ReceivableDTO receivableDTO, final ApiCallback<ReceivableDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReceivable1ValidateBeforeCall(quoteId, receivableId, receivableDTO, _callback);
        Type localVarReturnType = new TypeToken<ReceivableDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
