/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectDatesDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectDatesDTO {
  public static final String SERIALIZED_NAME_ACTUAL_DELIVERY_DATE = "actualDeliveryDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DELIVERY_DATE)
  private TimeDTO actualDeliveryDate;

  public static final String SERIALIZED_NAME_ACTUAL_START_DATE = "actualStartDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_START_DATE)
  private TimeDTO actualStartDate;

  public static final String SERIALIZED_NAME_DEADLINE = "deadline";
  @SerializedName(SERIALIZED_NAME_DEADLINE)
  private TimeDTO deadline;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private TimeDTO startDate;

  public ProjectDatesDTO() {
  }

  public ProjectDatesDTO actualDeliveryDate(TimeDTO actualDeliveryDate) {
    this.actualDeliveryDate = actualDeliveryDate;
    return this;
  }

  /**
   * Get actualDeliveryDate
   * @return actualDeliveryDate
   */
  @javax.annotation.Nullable
  public TimeDTO getActualDeliveryDate() {
    return actualDeliveryDate;
  }

  public void setActualDeliveryDate(TimeDTO actualDeliveryDate) {
    this.actualDeliveryDate = actualDeliveryDate;
  }


  public ProjectDatesDTO actualStartDate(TimeDTO actualStartDate) {
    this.actualStartDate = actualStartDate;
    return this;
  }

  /**
   * Get actualStartDate
   * @return actualStartDate
   */
  @javax.annotation.Nullable
  public TimeDTO getActualStartDate() {
    return actualStartDate;
  }

  public void setActualStartDate(TimeDTO actualStartDate) {
    this.actualStartDate = actualStartDate;
  }


  public ProjectDatesDTO deadline(TimeDTO deadline) {
    this.deadline = deadline;
    return this;
  }

  /**
   * Get deadline
   * @return deadline
   */
  @javax.annotation.Nullable
  public TimeDTO getDeadline() {
    return deadline;
  }

  public void setDeadline(TimeDTO deadline) {
    this.deadline = deadline;
  }


  public ProjectDatesDTO startDate(TimeDTO startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public TimeDTO getStartDate() {
    return startDate;
  }

  public void setStartDate(TimeDTO startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectDatesDTO projectDatesDTO = (ProjectDatesDTO) o;
    return Objects.equals(this.actualDeliveryDate, projectDatesDTO.actualDeliveryDate) &&
        Objects.equals(this.actualStartDate, projectDatesDTO.actualStartDate) &&
        Objects.equals(this.deadline, projectDatesDTO.deadline) &&
        Objects.equals(this.startDate, projectDatesDTO.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualDeliveryDate, actualStartDate, deadline, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectDatesDTO {\n");
    sb.append("    actualDeliveryDate: ").append(toIndentedString(actualDeliveryDate)).append("\n");
    sb.append("    actualStartDate: ").append(toIndentedString(actualStartDate)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualDeliveryDate");
    openapiFields.add("actualStartDate");
    openapiFields.add("deadline");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectDatesDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectDatesDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectDatesDTO is not found in the empty JSON string", ProjectDatesDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectDatesDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectDatesDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actualDeliveryDate`
      if (jsonObj.get("actualDeliveryDate") != null && !jsonObj.get("actualDeliveryDate").isJsonNull()) {
        TimeDTO.validateJsonElement(jsonObj.get("actualDeliveryDate"));
      }
      // validate the optional field `actualStartDate`
      if (jsonObj.get("actualStartDate") != null && !jsonObj.get("actualStartDate").isJsonNull()) {
        TimeDTO.validateJsonElement(jsonObj.get("actualStartDate"));
      }
      // validate the optional field `deadline`
      if (jsonObj.get("deadline") != null && !jsonObj.get("deadline").isJsonNull()) {
        TimeDTO.validateJsonElement(jsonObj.get("deadline"));
      }
      // validate the optional field `startDate`
      if (jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) {
        TimeDTO.validateJsonElement(jsonObj.get("startDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectDatesDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectDatesDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectDatesDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectDatesDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectDatesDTO>() {
           @Override
           public void write(JsonWriter out, ProjectDatesDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectDatesDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectDatesDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectDatesDTO
   * @throws IOException if the JSON string is invalid with respect to ProjectDatesDTO
   */
  public static ProjectDatesDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectDatesDTO.class);
  }

  /**
   * Convert an instance of ProjectDatesDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

