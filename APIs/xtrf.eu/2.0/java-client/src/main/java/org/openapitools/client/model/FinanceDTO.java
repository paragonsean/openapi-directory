/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChargeDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FinanceDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FinanceDTO {
  public static final String SERIALIZED_NAME_R_O_I = "ROI";
  @SerializedName(SERIALIZED_NAME_R_O_I)
  private BigDecimal ROI;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private Long currencyId;

  public static final String SERIALIZED_NAME_MARGIN = "margin";
  @SerializedName(SERIALIZED_NAME_MARGIN)
  private BigDecimal margin;

  public static final String SERIALIZED_NAME_PAYABLES = "payables";
  @SerializedName(SERIALIZED_NAME_PAYABLES)
  private List<ChargeDTO> payables = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFIT = "profit";
  @SerializedName(SERIALIZED_NAME_PROFIT)
  private BigDecimal profit;

  public static final String SERIALIZED_NAME_RECEIVABLES = "receivables";
  @SerializedName(SERIALIZED_NAME_RECEIVABLES)
  private List<ChargeDTO> receivables = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_AGREED = "totalAgreed";
  @SerializedName(SERIALIZED_NAME_TOTAL_AGREED)
  private BigDecimal totalAgreed;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private BigDecimal totalCost;

  public FinanceDTO() {
  }

  public FinanceDTO ROI(BigDecimal ROI) {
    this.ROI = ROI;
    return this;
  }

  /**
   * Get ROI
   * @return ROI
   */
  @javax.annotation.Nullable
  public BigDecimal getROI() {
    return ROI;
  }

  public void setROI(BigDecimal ROI) {
    this.ROI = ROI;
  }


  public FinanceDTO currencyId(Long currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public Long getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(Long currencyId) {
    this.currencyId = currencyId;
  }


  public FinanceDTO margin(BigDecimal margin) {
    this.margin = margin;
    return this;
  }

  /**
   * Get margin
   * @return margin
   */
  @javax.annotation.Nullable
  public BigDecimal getMargin() {
    return margin;
  }

  public void setMargin(BigDecimal margin) {
    this.margin = margin;
  }


  public FinanceDTO payables(List<ChargeDTO> payables) {
    this.payables = payables;
    return this;
  }

  public FinanceDTO addPayablesItem(ChargeDTO payablesItem) {
    if (this.payables == null) {
      this.payables = new ArrayList<>();
    }
    this.payables.add(payablesItem);
    return this;
  }

  /**
   * Get payables
   * @return payables
   */
  @javax.annotation.Nullable
  public List<ChargeDTO> getPayables() {
    return payables;
  }

  public void setPayables(List<ChargeDTO> payables) {
    this.payables = payables;
  }


  public FinanceDTO profit(BigDecimal profit) {
    this.profit = profit;
    return this;
  }

  /**
   * Get profit
   * @return profit
   */
  @javax.annotation.Nullable
  public BigDecimal getProfit() {
    return profit;
  }

  public void setProfit(BigDecimal profit) {
    this.profit = profit;
  }


  public FinanceDTO receivables(List<ChargeDTO> receivables) {
    this.receivables = receivables;
    return this;
  }

  public FinanceDTO addReceivablesItem(ChargeDTO receivablesItem) {
    if (this.receivables == null) {
      this.receivables = new ArrayList<>();
    }
    this.receivables.add(receivablesItem);
    return this;
  }

  /**
   * Get receivables
   * @return receivables
   */
  @javax.annotation.Nullable
  public List<ChargeDTO> getReceivables() {
    return receivables;
  }

  public void setReceivables(List<ChargeDTO> receivables) {
    this.receivables = receivables;
  }


  public FinanceDTO totalAgreed(BigDecimal totalAgreed) {
    this.totalAgreed = totalAgreed;
    return this;
  }

  /**
   * Get totalAgreed
   * @return totalAgreed
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAgreed() {
    return totalAgreed;
  }

  public void setTotalAgreed(BigDecimal totalAgreed) {
    this.totalAgreed = totalAgreed;
  }


  public FinanceDTO totalCost(BigDecimal totalCost) {
    this.totalCost = totalCost;
    return this;
  }

  /**
   * Get totalCost
   * @return totalCost
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(BigDecimal totalCost) {
    this.totalCost = totalCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinanceDTO financeDTO = (FinanceDTO) o;
    return Objects.equals(this.ROI, financeDTO.ROI) &&
        Objects.equals(this.currencyId, financeDTO.currencyId) &&
        Objects.equals(this.margin, financeDTO.margin) &&
        Objects.equals(this.payables, financeDTO.payables) &&
        Objects.equals(this.profit, financeDTO.profit) &&
        Objects.equals(this.receivables, financeDTO.receivables) &&
        Objects.equals(this.totalAgreed, financeDTO.totalAgreed) &&
        Objects.equals(this.totalCost, financeDTO.totalCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ROI, currencyId, margin, payables, profit, receivables, totalAgreed, totalCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinanceDTO {\n");
    sb.append("    ROI: ").append(toIndentedString(ROI)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    payables: ").append(toIndentedString(payables)).append("\n");
    sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
    sb.append("    receivables: ").append(toIndentedString(receivables)).append("\n");
    sb.append("    totalAgreed: ").append(toIndentedString(totalAgreed)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ROI");
    openapiFields.add("currencyId");
    openapiFields.add("margin");
    openapiFields.add("payables");
    openapiFields.add("profit");
    openapiFields.add("receivables");
    openapiFields.add("totalAgreed");
    openapiFields.add("totalCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FinanceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinanceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinanceDTO is not found in the empty JSON string", FinanceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FinanceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinanceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("payables") != null && !jsonObj.get("payables").isJsonNull()) {
        JsonArray jsonArraypayables = jsonObj.getAsJsonArray("payables");
        if (jsonArraypayables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payables` to be an array in the JSON string but got `%s`", jsonObj.get("payables").toString()));
          }

          // validate the optional field `payables` (array)
          for (int i = 0; i < jsonArraypayables.size(); i++) {
            ChargeDTO.validateJsonElement(jsonArraypayables.get(i));
          };
        }
      }
      if (jsonObj.get("receivables") != null && !jsonObj.get("receivables").isJsonNull()) {
        JsonArray jsonArrayreceivables = jsonObj.getAsJsonArray("receivables");
        if (jsonArrayreceivables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("receivables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `receivables` to be an array in the JSON string but got `%s`", jsonObj.get("receivables").toString()));
          }

          // validate the optional field `receivables` (array)
          for (int i = 0; i < jsonArrayreceivables.size(); i++) {
            ChargeDTO.validateJsonElement(jsonArrayreceivables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinanceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinanceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinanceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinanceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<FinanceDTO>() {
           @Override
           public void write(JsonWriter out, FinanceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinanceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FinanceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FinanceDTO
   * @throws IOException if the JSON string is invalid with respect to FinanceDTO
   */
  public static FinanceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinanceDTO.class);
  }

  /**
   * Convert an instance of FinanceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

