/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomerInvoiceCreateDTO;
import org.openapitools.client.model.CustomerInvoiceCreateResultDTO;
import org.openapitools.client.model.CustomerInvoiceDTO;
import org.openapitools.client.model.CustomerInvoiceDatesDTO;
import org.openapitools.client.model.DownloadDocumentsRequestDTO;
import org.openapitools.client.model.PaymentDTO;
import org.openapitools.client.model.PaymentTermsDTO;
import org.openapitools.client.model.SendRemindersRequestDTO;
import org.openapitools.client.model.SendRemindersResponseDTO;
import org.openapitools.client.model.UrlResultDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientInvoicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientInvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientInvoicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for create1
     * @param customerInvoiceCreateDTO Created new invoice. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create1Call(CustomerInvoiceCreateDTO customerInvoiceCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerInvoiceCreateDTO;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call create1ValidateBeforeCall(CustomerInvoiceCreateDTO customerInvoiceCreateDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerInvoiceCreateDTO' is set
        if (customerInvoiceCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'customerInvoiceCreateDTO' when calling create1(Async)");
        }

        return create1Call(customerInvoiceCreateDTO, _callback);

    }

    /**
     * Creates a new invoice.
     * Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
     * @param customerInvoiceCreateDTO Created new invoice. (required)
     * @return CustomerInvoiceCreateResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInvoiceCreateResultDTO create1(CustomerInvoiceCreateDTO customerInvoiceCreateDTO) throws ApiException {
        ApiResponse<CustomerInvoiceCreateResultDTO> localVarResp = create1WithHttpInfo(customerInvoiceCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Creates a new invoice.
     * Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
     * @param customerInvoiceCreateDTO Created new invoice. (required)
     * @return ApiResponse&lt;CustomerInvoiceCreateResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInvoiceCreateResultDTO> create1WithHttpInfo(CustomerInvoiceCreateDTO customerInvoiceCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = create1ValidateBeforeCall(customerInvoiceCreateDTO, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceCreateResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new invoice. (asynchronously)
     * Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
     * @param customerInvoiceCreateDTO Created new invoice. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call create1Async(CustomerInvoiceCreateDTO customerInvoiceCreateDTO, final ApiCallback<CustomerInvoiceCreateResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = create1ValidateBeforeCall(customerInvoiceCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<CustomerInvoiceCreateResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPayment
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param paymentDTO New payment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentCall(Long invoiceId, PaymentDTO paymentDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentDTO;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/payments"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentValidateBeforeCall(Long invoiceId, PaymentDTO paymentDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling createPayment(Async)");
        }

        // verify the required parameter 'paymentDTO' is set
        if (paymentDTO == null) {
            throw new ApiException("Missing the required parameter 'paymentDTO' when calling createPayment(Async)");
        }

        return createPaymentCall(invoiceId, paymentDTO, _callback);

    }

    /**
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param paymentDTO New payment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void createPayment(Long invoiceId, PaymentDTO paymentDTO) throws ApiException {
        createPaymentWithHttpInfo(invoiceId, paymentDTO);
    }

    /**
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param paymentDTO New payment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createPaymentWithHttpInfo(Long invoiceId, PaymentDTO paymentDTO) throws ApiException {
        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(invoiceId, paymentDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated. (asynchronously)
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param paymentDTO New payment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentAsync(Long invoiceId, PaymentDTO paymentDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(invoiceId, paymentDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete1
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete1Call(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete1ValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling delete1(Async)");
        }

        return delete1Call(invoiceId, _callback);

    }

    /**
     * Removes a client invoice.
     * Removes a client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete1(Long invoiceId) throws ApiException {
        delete1WithHttpInfo(invoiceId);
    }

    /**
     * Removes a client invoice.
     * Removes a client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete1WithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = delete1ValidateBeforeCall(invoiceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a client invoice. (asynchronously)
     * Removes a client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete1Async(Long invoiceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete1ValidateBeforeCall(invoiceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete2
     * @param paymentId customer payment&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete2Call(Long paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/payments/{paymentId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delete2ValidateBeforeCall(Long paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling delete2(Async)");
        }

        return delete2Call(paymentId, _callback);

    }

    /**
     * Removes a customer payment.
     * Removes a customer payment.
     * @param paymentId customer payment&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void delete2(Long paymentId) throws ApiException {
        delete2WithHttpInfo(paymentId);
    }

    /**
     * Removes a customer payment.
     * Removes a customer payment.
     * @param paymentId customer payment&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delete2WithHttpInfo(Long paymentId) throws ApiException {
        okhttp3.Call localVarCall = delete2ValidateBeforeCall(paymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a customer payment. (asynchronously)
     * Removes a customer payment.
     * @param paymentId customer payment&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delete2Async(Long paymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delete2ValidateBeforeCall(paymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadDocuments
     * @param downloadDocumentsRequestDTO Generated client invoices documents. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadDocumentsCall(DownloadDocumentsRequestDTO downloadDocumentsRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = downloadDocumentsRequestDTO;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadDocumentsValidateBeforeCall(DownloadDocumentsRequestDTO downloadDocumentsRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'downloadDocumentsRequestDTO' is set
        if (downloadDocumentsRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'downloadDocumentsRequestDTO' when calling downloadDocuments(Async)");
        }

        return downloadDocumentsCall(downloadDocumentsRequestDTO, _callback);

    }

    /**
     * Generates client invoices&#39; documents.
     * Generates client invoices&#39; documents.
     * @param downloadDocumentsRequestDTO Generated client invoices documents. (required)
     * @return UrlResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UrlResultDTO downloadDocuments(DownloadDocumentsRequestDTO downloadDocumentsRequestDTO) throws ApiException {
        ApiResponse<UrlResultDTO> localVarResp = downloadDocumentsWithHttpInfo(downloadDocumentsRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Generates client invoices&#39; documents.
     * Generates client invoices&#39; documents.
     * @param downloadDocumentsRequestDTO Generated client invoices documents. (required)
     * @return ApiResponse&lt;UrlResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlResultDTO> downloadDocumentsWithHttpInfo(DownloadDocumentsRequestDTO downloadDocumentsRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = downloadDocumentsValidateBeforeCall(downloadDocumentsRequestDTO, null);
        Type localVarReturnType = new TypeToken<UrlResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates client invoices&#39; documents. (asynchronously)
     * Generates client invoices&#39; documents.
     * @param downloadDocumentsRequestDTO Generated client invoices documents. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadDocumentsAsync(DownloadDocumentsRequestDTO downloadDocumentsRequestDTO, final ApiCallback<UrlResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadDocumentsValidateBeforeCall(downloadDocumentsRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<UrlResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for duplicate
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/duplicate"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling duplicate(Async)");
        }

        return duplicateCall(invoiceId, _callback);

    }

    /**
     * Duplicate client invoice.
     * Duplicate client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return CustomerInvoiceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInvoiceDTO duplicate(Long invoiceId) throws ApiException {
        ApiResponse<CustomerInvoiceDTO> localVarResp = duplicateWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * Duplicate client invoice.
     * Duplicate client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;CustomerInvoiceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInvoiceDTO> duplicateWithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = duplicateValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Duplicate client invoice. (asynchronously)
     * Duplicate client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateAsync(Long invoiceId, final ApiCallback<CustomerInvoiceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for duplicateAsProForma
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateAsProFormaCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/duplicate/proForma"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateAsProFormaValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling duplicateAsProForma(Async)");
        }

        return duplicateAsProFormaCall(invoiceId, _callback);

    }

    /**
     * Duplicate client invoice as pro forma.
     * Duplicate client invoice as pro forma.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return CustomerInvoiceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInvoiceDTO duplicateAsProForma(Long invoiceId) throws ApiException {
        ApiResponse<CustomerInvoiceDTO> localVarResp = duplicateAsProFormaWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * Duplicate client invoice as pro forma.
     * Duplicate client invoice as pro forma.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;CustomerInvoiceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInvoiceDTO> duplicateAsProFormaWithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = duplicateAsProFormaValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Duplicate client invoice as pro forma. (asynchronously)
     * Duplicate client invoice as pro forma.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateAsProFormaAsync(Long invoiceId, final ApiCallback<CustomerInvoiceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateAsProFormaValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAll
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        return getAllCall(updatedSince, _callback);

    }

    /**
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @return List&lt;CustomerInvoiceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomerInvoiceDTO> getAll(Long updatedSince) throws ApiException {
        ApiResponse<List<CustomerInvoiceDTO>> localVarResp = getAllWithHttpInfo(updatedSince);
        return localVarResp.getData();
    }

    /**
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @return ApiResponse&lt;List&lt;CustomerInvoiceDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomerInvoiceDTO>> getAllWithHttpInfo(Long updatedSince) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(updatedSince, null);
        Type localVarReturnType = new TypeToken<List<CustomerInvoiceDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date. (asynchronously)
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAsync(Long updatedSince, final ApiCallback<List<CustomerInvoiceDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(updatedSince, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerInvoiceDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllIds
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices&#39; internal identifiers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIdsCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIdsValidateBeforeCall(Long updatedSince, final ApiCallback _callback) throws ApiException {
        return getAllIdsCall(updatedSince, _callback);

    }

    /**
     * Returns client invoices&#39; internal identifiers.
     * Returns client invoices&#39; internal identifiers.
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices&#39; internal identifiers </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> getAllIds(Long updatedSince) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = getAllIdsWithHttpInfo(updatedSince);
        return localVarResp.getData();
    }

    /**
     * Returns client invoices&#39; internal identifiers.
     * Returns client invoices&#39; internal identifiers.
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices&#39; internal identifiers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> getAllIdsWithHttpInfo(Long updatedSince) throws ApiException {
        okhttp3.Call localVarCall = getAllIdsValidateBeforeCall(updatedSince, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns client invoices&#39; internal identifiers. (asynchronously)
     * Returns client invoices&#39; internal identifiers.
     * @param updatedSince only client invoices modified since this timestamp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoices&#39; internal identifiers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllIdsAsync(Long updatedSince, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIdsValidateBeforeCall(updatedSince, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getById
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIdCall(Long invoiceId, String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Long invoiceId, String embed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getById(Async)");
        }

        return getByIdCall(invoiceId, embed, _callback);

    }

    /**
     * Returns client invoice details.
     * Returns client invoice details.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @return CustomerInvoiceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInvoiceDTO getById(Long invoiceId, String embed) throws ApiException {
        ApiResponse<CustomerInvoiceDTO> localVarResp = getByIdWithHttpInfo(invoiceId, embed);
        return localVarResp.getData();
    }

    /**
     * Returns client invoice details.
     * Returns client invoice details.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @return ApiResponse&lt;CustomerInvoiceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInvoiceDTO> getByIdWithHttpInfo(Long invoiceId, String embed) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(invoiceId, embed, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns client invoice details. (asynchronously)
     * Returns client invoice details.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param embed list of adittional fields which should be embedded in the response (ie. tasks) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getByIdAsync(Long invoiceId, String embed, final ApiCallback<CustomerInvoiceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(invoiceId, embed, _callback);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDates
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatesCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/dates"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatesValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getDates(Async)");
        }

        return getDatesCall(invoiceId, _callback);

    }

    /**
     * Returns dates of a given client invoice.
     * Returns dates of a given client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return CustomerInvoiceDatesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInvoiceDatesDTO getDates(Long invoiceId) throws ApiException {
        ApiResponse<CustomerInvoiceDatesDTO> localVarResp = getDatesWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * Returns dates of a given client invoice.
     * Returns dates of a given client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;CustomerInvoiceDatesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInvoiceDatesDTO> getDatesWithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getDatesValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDatesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns dates of a given client invoice. (asynchronously)
     * Returns dates of a given client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatesAsync(Long invoiceId, final ApiCallback<CustomerInvoiceDatesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatesValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<CustomerInvoiceDatesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocument
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/document"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getDocument(Async)");
        }

        return getDocumentCall(invoiceId, _callback);

    }

    /**
     * Generates client invoice document (PDF).
     * Generates client invoice document (PDF).
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return UrlResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UrlResultDTO getDocument(Long invoiceId) throws ApiException {
        ApiResponse<UrlResultDTO> localVarResp = getDocumentWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * Generates client invoice document (PDF).
     * Generates client invoice document (PDF).
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;UrlResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlResultDTO> getDocumentWithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<UrlResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates client invoice document (PDF). (asynchronously)
     * Generates client invoice document (PDF).
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAsync(Long invoiceId, final ApiCallback<UrlResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<UrlResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentTerms
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentTermsCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/paymentTerms"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentTermsValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getPaymentTerms(Async)");
        }

        return getPaymentTermsCall(invoiceId, _callback);

    }

    /**
     * Returns payment terms of a given client invoice.
     * Returns payment terms of a given client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return PaymentTermsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PaymentTermsDTO getPaymentTerms(Long invoiceId) throws ApiException {
        ApiResponse<PaymentTermsDTO> localVarResp = getPaymentTermsWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * Returns payment terms of a given client invoice.
     * Returns payment terms of a given client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;PaymentTermsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentTermsDTO> getPaymentTermsWithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentTermsValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<PaymentTermsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns payment terms of a given client invoice. (asynchronously)
     * Returns payment terms of a given client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentTermsAsync(Long invoiceId, final ApiCallback<PaymentTermsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentTermsValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<PaymentTermsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayments
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoice&#39;s payments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/payments"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getPayments(Async)");
        }

        return getPaymentsCall(invoiceId, _callback);

    }

    /**
     * Returns all payments for the client invoice.
     * Returns all payments for the client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return List&lt;PaymentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoice&#39;s payments </td><td>  -  </td></tr>
     </table>
     */
    public List<PaymentDTO> getPayments(Long invoiceId) throws ApiException {
        ApiResponse<List<PaymentDTO>> localVarResp = getPaymentsWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * Returns all payments for the client invoice.
     * Returns all payments for the client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;List&lt;PaymentDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoice&#39;s payments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PaymentDTO>> getPaymentsWithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<List<PaymentDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all payments for the client invoice. (asynchronously)
     * Returns all payments for the client invoice.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> client invoice&#39;s payments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsAsync(Long invoiceId, final ApiCallback<List<PaymentDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<List<PaymentDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendReminder
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendReminderCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/{invoiceId}/sendReminder"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendReminderValidateBeforeCall(Long invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling sendReminder(Async)");
        }

        return sendReminderCall(invoiceId, _callback);

    }

    /**
     * Sends reminder.
     * Sends reminder.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void sendReminder(Long invoiceId) throws ApiException {
        sendReminderWithHttpInfo(invoiceId);
    }

    /**
     * Sends reminder.
     * Sends reminder.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendReminderWithHttpInfo(Long invoiceId) throws ApiException {
        okhttp3.Call localVarCall = sendReminderValidateBeforeCall(invoiceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sends reminder. (asynchronously)
     * Sends reminder.
     * @param invoiceId client invoice&#39;s internal identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendReminderAsync(Long invoiceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendReminderValidateBeforeCall(invoiceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendReminders
     * @param sendRemindersRequestDTO Number of sent e-mails. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendRemindersCall(SendRemindersRequestDTO sendRemindersRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendRemindersRequestDTO;

        // create path and map variables
        String localVarPath = "/accounting/customers/invoices/sendReminders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.xtrf-v1+json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-AUTH-ACCESS-TOKEN" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendRemindersValidateBeforeCall(SendRemindersRequestDTO sendRemindersRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendRemindersRequestDTO' is set
        if (sendRemindersRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'sendRemindersRequestDTO' when calling sendReminders(Async)");
        }

        return sendRemindersCall(sendRemindersRequestDTO, _callback);

    }

    /**
     * Sends reminders. Returns number of sent e-mails.
     * Sends reminders. Returns number of sent e-mails.
     * @param sendRemindersRequestDTO Number of sent e-mails. (required)
     * @return SendRemindersResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SendRemindersResponseDTO sendReminders(SendRemindersRequestDTO sendRemindersRequestDTO) throws ApiException {
        ApiResponse<SendRemindersResponseDTO> localVarResp = sendRemindersWithHttpInfo(sendRemindersRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Sends reminders. Returns number of sent e-mails.
     * Sends reminders. Returns number of sent e-mails.
     * @param sendRemindersRequestDTO Number of sent e-mails. (required)
     * @return ApiResponse&lt;SendRemindersResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendRemindersResponseDTO> sendRemindersWithHttpInfo(SendRemindersRequestDTO sendRemindersRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = sendRemindersValidateBeforeCall(sendRemindersRequestDTO, null);
        Type localVarReturnType = new TypeToken<SendRemindersResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends reminders. Returns number of sent e-mails. (asynchronously)
     * Sends reminders. Returns number of sent e-mails.
     * @param sendRemindersRequestDTO Number of sent e-mails. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendRemindersAsync(SendRemindersRequestDTO sendRemindersRequestDTO, final ApiCallback<SendRemindersResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendRemindersValidateBeforeCall(sendRemindersRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<SendRemindersResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
