/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobTypeDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:05.288509-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobTypeDTO {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CALCULATION_UNIT_IDS = "calculationUnitIds";
  @SerializedName(SERIALIZED_NAME_CALCULATION_UNIT_IDS)
  private List<Long> calculationUnitIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_FILES_NEEDED = "filesNeeded";
  @SerializedName(SERIALIZED_NAME_FILES_NEEDED)
  private Boolean filesNeeded;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public static final String SERIALIZED_NAME_PROVIDED_BY_CLIENT = "providedByClient";
  @SerializedName(SERIALIZED_NAME_PROVIDED_BY_CLIENT)
  private Boolean providedByClient;

  /**
   * Gets or Sets relationToLanguage
   */
  @JsonAdapter(RelationToLanguageEnum.Adapter.class)
  public enum RelationToLanguageEnum {
    LANGUAGE_COMBINATION_RELATED("LANGUAGE_COMBINATION_RELATED"),
    
    SOURCE_LANGUAGE_RELATED_ONLY("SOURCE_LANGUAGE_RELATED_ONLY"),
    
    TARGET_LANGUAGE_RELATED_ONLY("TARGET_LANGUAGE_RELATED_ONLY"),
    
    LANGUAGE_INDEPENDENT("LANGUAGE_INDEPENDENT");

    private String value;

    RelationToLanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationToLanguageEnum fromValue(String value) {
      for (RelationToLanguageEnum b : RelationToLanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationToLanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationToLanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationToLanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationToLanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationToLanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATION_TO_LANGUAGE = "relationToLanguage";
  @SerializedName(SERIALIZED_NAME_RELATION_TO_LANGUAGE)
  private RelationToLanguageEnum relationToLanguage;

  public static final String SERIALIZED_NAME_VENDOR_PRODUCTIVITY = "vendorProductivity";
  @SerializedName(SERIALIZED_NAME_VENDOR_PRODUCTIVITY)
  private BigDecimal vendorProductivity;

  public static final String SERIALIZED_NAME_VENDOR_PRODUCTIVITY_CALCULATION_UNIT_ID = "vendorProductivityCalculationUnitId";
  @SerializedName(SERIALIZED_NAME_VENDOR_PRODUCTIVITY_CALCULATION_UNIT_ID)
  private Long vendorProductivityCalculationUnitId;

  public JobTypeDTO() {
  }

  public JobTypeDTO active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * should this value be available on the XTRF selection lists
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public JobTypeDTO calculationUnitIds(List<Long> calculationUnitIds) {
    this.calculationUnitIds = calculationUnitIds;
    return this;
  }

  public JobTypeDTO addCalculationUnitIdsItem(Long calculationUnitIdsItem) {
    if (this.calculationUnitIds == null) {
      this.calculationUnitIds = new ArrayList<>();
    }
    this.calculationUnitIds.add(calculationUnitIdsItem);
    return this;
  }

  /**
   * Get calculationUnitIds
   * @return calculationUnitIds
   */
  @javax.annotation.Nullable
  public List<Long> getCalculationUnitIds() {
    return calculationUnitIds;
  }

  public void setCalculationUnitIds(List<Long> calculationUnitIds) {
    this.calculationUnitIds = calculationUnitIds;
  }


  public JobTypeDTO _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * should this value be set by default in XTRF selection lists
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public JobTypeDTO filesNeeded(Boolean filesNeeded) {
    this.filesNeeded = filesNeeded;
    return this;
  }

  /**
   * Get filesNeeded
   * @return filesNeeded
   */
  @javax.annotation.Nullable
  public Boolean getFilesNeeded() {
    return filesNeeded;
  }

  public void setFilesNeeded(Boolean filesNeeded) {
    this.filesNeeded = filesNeeded;
  }


  public JobTypeDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * internal identifier
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public JobTypeDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * localised name (formatted in the current user&#39;s locale)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public JobTypeDTO preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * should this value be available on the top of XTRF selection lists, in the Preferred section
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public JobTypeDTO providedByClient(Boolean providedByClient) {
    this.providedByClient = providedByClient;
    return this;
  }

  /**
   * Get providedByClient
   * @return providedByClient
   */
  @javax.annotation.Nullable
  public Boolean getProvidedByClient() {
    return providedByClient;
  }

  public void setProvidedByClient(Boolean providedByClient) {
    this.providedByClient = providedByClient;
  }


  public JobTypeDTO relationToLanguage(RelationToLanguageEnum relationToLanguage) {
    this.relationToLanguage = relationToLanguage;
    return this;
  }

  /**
   * Get relationToLanguage
   * @return relationToLanguage
   */
  @javax.annotation.Nullable
  public RelationToLanguageEnum getRelationToLanguage() {
    return relationToLanguage;
  }

  public void setRelationToLanguage(RelationToLanguageEnum relationToLanguage) {
    this.relationToLanguage = relationToLanguage;
  }


  public JobTypeDTO vendorProductivity(BigDecimal vendorProductivity) {
    this.vendorProductivity = vendorProductivity;
    return this;
  }

  /**
   * Get vendorProductivity
   * @return vendorProductivity
   */
  @javax.annotation.Nullable
  public BigDecimal getVendorProductivity() {
    return vendorProductivity;
  }

  public void setVendorProductivity(BigDecimal vendorProductivity) {
    this.vendorProductivity = vendorProductivity;
  }


  public JobTypeDTO vendorProductivityCalculationUnitId(Long vendorProductivityCalculationUnitId) {
    this.vendorProductivityCalculationUnitId = vendorProductivityCalculationUnitId;
    return this;
  }

  /**
   * Get vendorProductivityCalculationUnitId
   * @return vendorProductivityCalculationUnitId
   */
  @javax.annotation.Nullable
  public Long getVendorProductivityCalculationUnitId() {
    return vendorProductivityCalculationUnitId;
  }

  public void setVendorProductivityCalculationUnitId(Long vendorProductivityCalculationUnitId) {
    this.vendorProductivityCalculationUnitId = vendorProductivityCalculationUnitId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobTypeDTO jobTypeDTO = (JobTypeDTO) o;
    return Objects.equals(this.active, jobTypeDTO.active) &&
        Objects.equals(this.calculationUnitIds, jobTypeDTO.calculationUnitIds) &&
        Objects.equals(this._default, jobTypeDTO._default) &&
        Objects.equals(this.filesNeeded, jobTypeDTO.filesNeeded) &&
        Objects.equals(this.id, jobTypeDTO.id) &&
        Objects.equals(this.name, jobTypeDTO.name) &&
        Objects.equals(this.preferred, jobTypeDTO.preferred) &&
        Objects.equals(this.providedByClient, jobTypeDTO.providedByClient) &&
        Objects.equals(this.relationToLanguage, jobTypeDTO.relationToLanguage) &&
        Objects.equals(this.vendorProductivity, jobTypeDTO.vendorProductivity) &&
        Objects.equals(this.vendorProductivityCalculationUnitId, jobTypeDTO.vendorProductivityCalculationUnitId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, calculationUnitIds, _default, filesNeeded, id, name, preferred, providedByClient, relationToLanguage, vendorProductivity, vendorProductivityCalculationUnitId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobTypeDTO {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    calculationUnitIds: ").append(toIndentedString(calculationUnitIds)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    filesNeeded: ").append(toIndentedString(filesNeeded)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    providedByClient: ").append(toIndentedString(providedByClient)).append("\n");
    sb.append("    relationToLanguage: ").append(toIndentedString(relationToLanguage)).append("\n");
    sb.append("    vendorProductivity: ").append(toIndentedString(vendorProductivity)).append("\n");
    sb.append("    vendorProductivityCalculationUnitId: ").append(toIndentedString(vendorProductivityCalculationUnitId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("calculationUnitIds");
    openapiFields.add("default");
    openapiFields.add("filesNeeded");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("preferred");
    openapiFields.add("providedByClient");
    openapiFields.add("relationToLanguage");
    openapiFields.add("vendorProductivity");
    openapiFields.add("vendorProductivityCalculationUnitId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobTypeDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobTypeDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobTypeDTO is not found in the empty JSON string", JobTypeDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobTypeDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobTypeDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("calculationUnitIds") != null && !jsonObj.get("calculationUnitIds").isJsonNull() && !jsonObj.get("calculationUnitIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculationUnitIds` to be an array in the JSON string but got `%s`", jsonObj.get("calculationUnitIds").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("relationToLanguage") != null && !jsonObj.get("relationToLanguage").isJsonNull()) && !jsonObj.get("relationToLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationToLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationToLanguage").toString()));
      }
      // validate the optional field `relationToLanguage`
      if (jsonObj.get("relationToLanguage") != null && !jsonObj.get("relationToLanguage").isJsonNull()) {
        RelationToLanguageEnum.validateJsonElement(jsonObj.get("relationToLanguage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobTypeDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobTypeDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobTypeDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobTypeDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<JobTypeDTO>() {
           @Override
           public void write(JsonWriter out, JobTypeDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobTypeDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobTypeDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobTypeDTO
   * @throws IOException if the JSON string is invalid with respect to JobTypeDTO
   */
  public static JobTypeDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobTypeDTO.class);
  }

  /**
   * Convert an instance of JobTypeDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

