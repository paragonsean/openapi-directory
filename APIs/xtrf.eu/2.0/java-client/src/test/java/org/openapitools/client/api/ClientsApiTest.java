/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessTokenDTO;
import org.openapitools.client.model.AccessTokenRequestDTO;
import org.openapitools.client.model.AddressDTO;
import org.openapitools.client.model.ContactDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.CustomerDTO;
import org.openapitools.client.model.CustomerPersonDTO;
import org.openapitools.client.model.EntityWithNameDTO;
import org.openapitools.client.model.PersonContactDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientsApi
 */
@Disabled
public class ClientsApiTest {

    private final ClientsApi api = new ClientsApi();

    /**
     * Creates a new person.
     *
     * Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void create2Test() throws ApiException {
        CustomerPersonDTO customerPersonDTO = null;
        CustomerPersonDTO response = api.create2(customerPersonDTO);
        // TODO: test validations
    }

    /**
     * Creates a new client.
     *
     * Creates a new client. All available fields are presented in PUT request.&lt;p&gt;   Required fields:   &lt;ul&gt;     &lt;li&gt;name&lt;/li&gt;     &lt;li&gt;fullName&lt;/li&gt;     &lt;li&gt;contact -&gt; emails -&gt; primary&lt;/li&gt;   &lt;/ul&gt; &lt;/p&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void create3Test() throws ApiException {
        CustomerDTO customerDTO = null;
        CustomerDTO response = api.create3(customerDTO);
        // TODO: test validations
    }

    /**
     * Removes a person.
     *
     * Removes a person.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete3Test() throws ApiException {
        Long personId = null;
        api.delete3(personId);
        // TODO: test validations
    }

    /**
     * Removes a customer price list.
     *
     * Removes a customer price list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete4Test() throws ApiException {
        Long priceListId = null;
        api.delete4(priceListId);
        // TODO: test validations
    }

    /**
     * Removes a client.
     *
     * Removes a client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete5Test() throws ApiException {
        Long customerId = null;
        api.delete5(customerId);
        // TODO: test validations
    }

    /**
     * Generates a single use sign-in token.
     *
     * Generates a single use sign-in token for the customer person found for given login or e-mail. Returns &#39;url&#39; and &#39;token&#39; which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post &#39;token&#39; provided as the &#39;accessToken&#39; form param to the &#39;url&#39; using POST method.Detailed description is available in the Customer API &lt;a href&#x3D;\&quot;/api-doc/customer-api/authentication\&quot;&gt;authentication&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateSingleUseSignInTokenTest() throws ApiException {
        AccessTokenRequestDTO accessTokenRequestDTO = null;
        AccessTokenDTO response = api.generateSingleUseSignInToken(accessTokenRequestDTO);
        // TODO: test validations
    }

    /**
     * Returns address of a given client.
     *
     * Returns address of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAddressTest() throws ApiException {
        Long customerId = null;
        AddressDTO response = api.getAddress(customerId);
        // TODO: test validations
    }

    /**
     * Returns persons&#39; internal identifiers.
     *
     * Returns persons&#39; internal identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllIds1Test() throws ApiException {
        Long updatedSince = null;
        List<Integer> response = api.getAllIds1(updatedSince);
        // TODO: test validations
    }

    /**
     * Returns clients&#39; internal identifiers.
     *
     * Returns clients&#39; internal identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllIds2Test() throws ApiException {
        Long updatedSince = null;
        String nameEquals = null;
        String emailEquals = null;
        List<Integer> response = api.getAllIds2(updatedSince, nameEquals, emailEquals);
        // TODO: test validations
    }

    /**
     * Returns list of simple clients representations
     *
     * Returns list of simple clients representations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllNamesWithIdsTest() throws ApiException {
        Long updatedSince = null;
        List<EntityWithNameDTO> response = api.getAllNamesWithIds(updatedSince);
        // TODO: test validations
    }

    /**
     * Returns person details.
     *
     * Returns person details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getById1Test() throws ApiException {
        Long personId = null;
        CustomerPersonDTO response = api.getById1(personId);
        // TODO: test validations
    }

    /**
     * Returns client details.
     *
     * Returns client details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getById2Test() throws ApiException {
        Long customerId = null;
        String embed = null;
        CustomerDTO response = api.getById2(customerId, embed);
        // TODO: test validations
    }

    /**
     * Returns categories of a given client.
     *
     * Returns categories of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoriesTest() throws ApiException {
        Long customerId = null;
        List<Long> response = api.getCategories(customerId);
        // TODO: test validations
    }

    /**
     * Returns contact of a given person.
     *
     * Returns contact of a given person.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        Long personId = null;
        PersonContactDTO response = api.getContact(personId);
        // TODO: test validations
    }

    /**
     * Returns contact of a given client.
     *
     * Returns contact of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContact1Test() throws ApiException {
        Long customerId = null;
        ContactDTO response = api.getContact1(customerId);
        // TODO: test validations
    }

    /**
     * Returns correspondence address of a given client.
     *
     * Returns correspondence address of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCorrespondenceAddressTest() throws ApiException {
        Long customerId = null;
        AddressDTO response = api.getCorrespondenceAddress(customerId);
        // TODO: test validations
    }

    /**
     * Returns custom field of a given client.
     *
     * Returns custom field of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldTest() throws ApiException {
        Long customerId = null;
        String customFieldKey = null;
        CustomFieldDTO response = api.getCustomField(customerId, customFieldKey);
        // TODO: test validations
    }

    /**
     * Returns custom fields of a given person.
     *
     * Returns custom fields of a given person.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        Long personId = null;
        List<CustomFieldDTO> response = api.getCustomFields(personId);
        // TODO: test validations
    }

    /**
     * Returns custom fields of a given client.
     *
     * Returns custom fields of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFields1Test() throws ApiException {
        Long customerId = null;
        List<CustomFieldDTO> response = api.getCustomFields1(customerId);
        // TODO: test validations
    }

    /**
     * Returns industries of a given client.
     *
     * Returns industries of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIndustriesTest() throws ApiException {
        Long customerId = null;
        List<Long> response = api.getIndustries(customerId);
        // TODO: test validations
    }

    /**
     * Updates an existing person.
     *
     * Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void update1Test() throws ApiException {
        Long personId = null;
        CustomerPersonDTO customerPersonDTO = null;
        CustomerPersonDTO response = api.update1(personId, customerPersonDTO);
        // TODO: test validations
    }

    /**
     * Updates an existing client.
     *
     * Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void update2Test() throws ApiException {
        Long customerId = null;
        CustomerDTO customerDTO = null;
        CustomerDTO response = api.update2(customerId, customerDTO);
        // TODO: test validations
    }

    /**
     * Updates address of a given client.
     *
     * Updates address of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAddressTest() throws ApiException {
        Long customerId = null;
        AddressDTO addressDTO = null;
        AddressDTO response = api.updateAddress(customerId, addressDTO);
        // TODO: test validations
    }

    /**
     * Updates categories of a given client.
     *
     * Updates categories of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCategoriesTest() throws ApiException {
        Long customerId = null;
        List<Long> requestBody = null;
        List<Long> response = api.updateCategories(customerId, requestBody);
        // TODO: test validations
    }

    /**
     * Updates contact of a given person.
     *
     * Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        Long personId = null;
        PersonContactDTO personContactDTO = null;
        PersonContactDTO response = api.updateContact(personId, personContactDTO);
        // TODO: test validations
    }

    /**
     * Updates contact of a given client.
     *
     * Updates contact of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContact1Test() throws ApiException {
        Long customerId = null;
        ContactDTO contactDTO = null;
        ContactDTO response = api.updateContact1(customerId, contactDTO);
        // TODO: test validations
    }

    /**
     * Updates correspondence address of a given client.
     *
     * Updates correspondence address of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCorrespondenceAddressTest() throws ApiException {
        Long customerId = null;
        AddressDTO addressDTO = null;
        AddressDTO response = api.updateCorrespondenceAddress(customerId, addressDTO);
        // TODO: test validations
    }

    /**
     * Updates given custom field of a given client.
     *
     * Updates given custom field of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFieldTest() throws ApiException {
        Long customerId = null;
        String customFieldKey = null;
        CustomFieldDTO customFieldDTO = null;
        CustomFieldDTO response = api.updateCustomField(customerId, customFieldKey, customFieldDTO);
        // TODO: test validations
    }

    /**
     * Updates custom fields of a given person.
     *
     * Updates custom fields of a given person.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFieldsTest() throws ApiException {
        Long personId = null;
        List<CustomFieldDTO> customFieldDTO = null;
        List<CustomFieldDTO> response = api.updateCustomFields(personId, customFieldDTO);
        // TODO: test validations
    }

    /**
     * Updates custom fields of a given client.
     *
     * Updates custom fields of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFields1Test() throws ApiException {
        Long customerId = null;
        List<CustomFieldDTO> customFieldDTO = null;
        List<CustomFieldDTO> response = api.updateCustomFields1(customerId, customFieldDTO);
        // TODO: test validations
    }

    /**
     * Updates industries of a given client.
     *
     * Updates industries of a given client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIndustriesTest() throws ApiException {
        Long customerId = null;
        List<Long> requestBody = null;
        List<Long> response = api.updateIndustries(customerId, requestBody);
        // TODO: test validations
    }

}
