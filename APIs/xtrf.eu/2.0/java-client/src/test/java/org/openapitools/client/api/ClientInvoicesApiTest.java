/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomerInvoiceCreateDTO;
import org.openapitools.client.model.CustomerInvoiceCreateResultDTO;
import org.openapitools.client.model.CustomerInvoiceDTO;
import org.openapitools.client.model.CustomerInvoiceDatesDTO;
import org.openapitools.client.model.DownloadDocumentsRequestDTO;
import org.openapitools.client.model.PaymentDTO;
import org.openapitools.client.model.PaymentTermsDTO;
import org.openapitools.client.model.SendRemindersRequestDTO;
import org.openapitools.client.model.SendRemindersResponseDTO;
import org.openapitools.client.model.UrlResultDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientInvoicesApi
 */
@Disabled
public class ClientInvoicesApiTest {

    private final ClientInvoicesApi api = new ClientInvoicesApi();

    /**
     * Creates a new invoice.
     *
     * Creates a new invoice from tasks. Tasks are grouped by client and currency, therefore multiple invoices can be created.If any of the tasks cannot be invoiced (ie. it is already invoiced, not invoiceable, not associated with a project) then an error is reported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void create1Test() throws ApiException {
        CustomerInvoiceCreateDTO customerInvoiceCreateDTO = null;
        CustomerInvoiceCreateResultDTO response = api.create1(customerInvoiceCreateDTO);
        // TODO: test validations
    }

    /**
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     *
     * Adds a new payment to the client invoice. The invoice payment status (Not Paid, Partially Paid, Fully Paid) is automatically recalculated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentTest() throws ApiException {
        Long invoiceId = null;
        PaymentDTO paymentDTO = null;
        api.createPayment(invoiceId, paymentDTO);
        // TODO: test validations
    }

    /**
     * Removes a client invoice.
     *
     * Removes a client invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete1Test() throws ApiException {
        Long invoiceId = null;
        api.delete1(invoiceId);
        // TODO: test validations
    }

    /**
     * Removes a customer payment.
     *
     * Removes a customer payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete2Test() throws ApiException {
        Long paymentId = null;
        api.delete2(paymentId);
        // TODO: test validations
    }

    /**
     * Generates client invoices&#39; documents.
     *
     * Generates client invoices&#39; documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentsTest() throws ApiException {
        DownloadDocumentsRequestDTO downloadDocumentsRequestDTO = null;
        UrlResultDTO response = api.downloadDocuments(downloadDocumentsRequestDTO);
        // TODO: test validations
    }

    /**
     * Duplicate client invoice.
     *
     * Duplicate client invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateTest() throws ApiException {
        Long invoiceId = null;
        CustomerInvoiceDTO response = api.duplicate(invoiceId);
        // TODO: test validations
    }

    /**
     * Duplicate client invoice as pro forma.
     *
     * Duplicate client invoice as pro forma.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateAsProFormaTest() throws ApiException {
        Long invoiceId = null;
        CustomerInvoiceDTO response = api.duplicateAsProForma(invoiceId);
        // TODO: test validations
    }

    /**
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     *
     * Lists all client invoices in all statuses (including not ready and drafts) that have been updated since a specific date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        Long updatedSince = null;
        List<CustomerInvoiceDTO> response = api.getAll(updatedSince);
        // TODO: test validations
    }

    /**
     * Returns client invoices&#39; internal identifiers.
     *
     * Returns client invoices&#39; internal identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllIdsTest() throws ApiException {
        Long updatedSince = null;
        List<Integer> response = api.getAllIds(updatedSince);
        // TODO: test validations
    }

    /**
     * Returns client invoice details.
     *
     * Returns client invoice details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Long invoiceId = null;
        String embed = null;
        CustomerInvoiceDTO response = api.getById(invoiceId, embed);
        // TODO: test validations
    }

    /**
     * Returns dates of a given client invoice.
     *
     * Returns dates of a given client invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatesTest() throws ApiException {
        Long invoiceId = null;
        CustomerInvoiceDatesDTO response = api.getDates(invoiceId);
        // TODO: test validations
    }

    /**
     * Generates client invoice document (PDF).
     *
     * Generates client invoice document (PDF).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        Long invoiceId = null;
        UrlResultDTO response = api.getDocument(invoiceId);
        // TODO: test validations
    }

    /**
     * Returns payment terms of a given client invoice.
     *
     * Returns payment terms of a given client invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTermsTest() throws ApiException {
        Long invoiceId = null;
        PaymentTermsDTO response = api.getPaymentTerms(invoiceId);
        // TODO: test validations
    }

    /**
     * Returns all payments for the client invoice.
     *
     * Returns all payments for the client invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsTest() throws ApiException {
        Long invoiceId = null;
        List<PaymentDTO> response = api.getPayments(invoiceId);
        // TODO: test validations
    }

    /**
     * Sends reminder.
     *
     * Sends reminder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendReminderTest() throws ApiException {
        Long invoiceId = null;
        api.sendReminder(invoiceId);
        // TODO: test validations
    }

    /**
     * Sends reminders. Returns number of sent e-mails.
     *
     * Sends reminders. Returns number of sent e-mails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendRemindersTest() throws ApiException {
        SendRemindersRequestDTO sendRemindersRequestDTO = null;
        SendRemindersResponseDTO response = api.sendReminders(sendRemindersRequestDTO);
        // TODO: test validations
    }

}
