/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ColumnDTO;
import org.openapitools.client.model.FilterDTO;
import org.openapitools.client.model.FilterPropertyDTO;
import org.openapitools.client.model.LocalSettingsDTO;
import org.openapitools.client.model.OrderDTO;
import org.openapitools.client.model.PermissionsDTO;
import org.openapitools.client.model.SettingsDTO;
import org.openapitools.client.model.ViewDTO;
import org.openapitools.client.model.ViewDetailsDTO;
import org.openapitools.client.model.ViewWithIdDTO;
import org.openapitools.client.model.ViewsBriefDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrowserApi
 */
@Disabled
public class BrowserApiTest {

    private final BrowserApi api = new BrowserApi();

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     *
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void browseCSVTest() throws ApiException {
        Long viewId = null;
        String separator = null;
        String secondarySeparator = null;
        String additionalOrder = null;
        Object response = api.browseCSV(viewId, separator, secondarySeparator, additionalOrder);
        // TODO: test validations
    }

    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     *
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void browseJSONTest() throws ApiException {
        Long viewId = null;
        Integer page = null;
        String additionalOrder = null;
        String useDeferredColumns = null;
        Integer maxRows = null;
        Object response = api.browseJSON(viewId, page, additionalOrder, useDeferredColumns, maxRows);
        // TODO: test validations
    }

    /**
     * Creates view for given class.
     *
     * Creates view for given class.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String className = null;
        ViewDTO viewDTO = null;
        ViewWithIdDTO response = api.create(className, viewDTO);
        // TODO: test validations
    }

    /**
     * Removes a view.
     *
     * Removes a view. No content is returned upon success (204).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        Long viewId = null;
        api.delete(viewId);
        // TODO: test validations
    }

    /**
     * Deletes a single column from view.
     *
     * Deletes a single column from view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteColumnTest() throws ApiException {
        Long viewId = null;
        String columnName = null;
        List<ColumnDTO> response = api.deleteColumn(viewId, columnName);
        // TODO: test validations
    }

    /**
     * Returns all view&#39;s information.
     *
     * Returns all view&#39;s information (ie. name, columns, filters, etc).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        Long viewId = null;
        ViewDTO response = api.get(viewId);
        // TODO: test validations
    }

    /**
     * Returns column&#39;s specific settings.
     *
     * Returns column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getColumnSettingsTest() throws ApiException {
        Long viewId = null;
        String columnName = null;
        Object response = api.getColumnSettings(viewId, columnName);
        // TODO: test validations
    }

    /**
     * Returns columns defined in view.
     *
     * Returns columns defined in view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getColumnsTest() throws ApiException {
        Long viewId = null;
        List<ColumnDTO> response = api.getColumns(viewId);
        // TODO: test validations
    }

    /**
     * Returns current view&#39;s detailed information, suitable for browser.
     *
     * Returns current view&#39;s detailed information, suitable for browser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentViewDetailsTest() throws ApiException {
        String className = null;
        String placeName = null;
        ViewDetailsDTO response = api.getCurrentViewDetails(className, placeName);
        // TODO: test validations
    }

    /**
     * Returns view&#39;s filter.
     *
     * Returns view&#39;s filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilterTest() throws ApiException {
        Long viewId = null;
        FilterDTO response = api.getFilter(viewId);
        // TODO: test validations
    }

    /**
     * Returns view&#39;s local settings (for current user).
     *
     * Returns view&#39;s local settings (for current user).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLocalSettingsTest() throws ApiException {
        Long viewId = null;
        LocalSettingsDTO response = api.getLocalSettings(viewId);
        // TODO: test validations
    }

    /**
     * Returns view&#39;s order settings.
     *
     * Returns view&#39;s order settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        Long viewId = null;
        OrderDTO response = api.getOrder(viewId);
        // TODO: test validations
    }

    /**
     * Returns view&#39;s permissions.
     *
     * Returns view&#39;s permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionsTest() throws ApiException {
        Long viewId = null;
        PermissionsDTO response = api.getPermissions(viewId);
        // TODO: test validations
    }

    /**
     * Returns view&#39;s settings.
     *
     * Returns view&#39;s settings (ie. name).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsTest() throws ApiException {
        Long viewId = null;
        SettingsDTO response = api.getSettings(viewId);
        // TODO: test validations
    }

    /**
     * Returns view&#39;s detailed information, suitable for browser.
     *
     * Returns view&#39;s detailed information, suitable for browser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getViewDetailsTest() throws ApiException {
        String className = null;
        Long viewId = null;
        String placeName = null;
        ViewDetailsDTO response = api.getViewDetails(className, viewId, placeName);
        // TODO: test validations
    }

    /**
     * Returns views&#39; brief.
     *
     * Returns views&#39; brief.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getViewsBriefTest() throws ApiException {
        String className = null;
        String placeName = null;
        ViewsBriefDTO response = api.getViewsBrief(className, placeName);
        // TODO: test validations
    }

    /**
     * Selects given view as current and returns its detailed information, suitable for browser.
     *
     * Selects given view as current and returns its detailed information, suitable for browser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selectViewAndGetItsDetailsTest() throws ApiException {
        String className = null;
        Long viewId = null;
        String placeNameDenotesSpecificPlaceInSystemWithTheTable = null;
        ViewDetailsDTO response = api.selectViewAndGetItsDetails(className, viewId, placeNameDenotesSpecificPlaceInSystemWithTheTable);
        // TODO: test validations
    }

    /**
     * Updates all view&#39;s information.
     *
     * Updates all view&#39;s information (ie. name, columns, filters, etc).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        Long viewId = null;
        ViewDTO viewDTO = null;
        ViewDTO response = api.update(viewId, viewDTO);
        // TODO: test validations
    }

    /**
     * Updates column&#39;s specific settings.
     *
     * Updates column&#39;s specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateColumnSettingsTest() throws ApiException {
        Long viewId = null;
        String columnName = null;
        Object body = null;
        Object response = api.updateColumnSettings(viewId, columnName, body);
        // TODO: test validations
    }

    /**
     * Updates columns in view.
     *
     * Updates columns in view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateColumnsTest() throws ApiException {
        Long viewId = null;
        List<ColumnDTO> columnDTO = null;
        List<ColumnDTO> response = api.updateColumns(viewId, columnDTO);
        // TODO: test validations
    }

    /**
     * Updates view&#39;s filter.
     *
     * Updates view&#39;s filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFilterTest() throws ApiException {
        Long viewId = null;
        List<FilterPropertyDTO> filterPropertyDTO = null;
        FilterDTO response = api.updateFilter(viewId, filterPropertyDTO);
        // TODO: test validations
    }

    /**
     * Updates view&#39;s filter property.
     *
     * Updates view&#39;s filter property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFilterPropertyTest() throws ApiException {
        Long viewId = null;
        String filterProperty = null;
        FilterPropertyDTO filterPropertyDTO = null;
        Object response = api.updateFilterProperty(viewId, filterProperty, filterPropertyDTO);
        // TODO: test validations
    }

    /**
     * Updates view&#39;s local settings (for current user).
     *
     * Updates view&#39;s local settings (for current user).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLocalSettingsTest() throws ApiException {
        Long viewId = null;
        LocalSettingsDTO localSettingsDTO = null;
        LocalSettingsDTO response = api.updateLocalSettings(viewId, localSettingsDTO);
        // TODO: test validations
    }

    /**
     * Updates view&#39;s order settings.
     *
     * Updates view&#39;s order settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        Long viewId = null;
        OrderDTO orderDTO = null;
        OrderDTO response = api.updateOrder(viewId, orderDTO);
        // TODO: test validations
    }

    /**
     * Updates view&#39;s permissions.
     *
     * Updates view&#39;s permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePermissionsTest() throws ApiException {
        Long viewId = null;
        PermissionsDTO permissionsDTO = null;
        PermissionsDTO response = api.updatePermissions(viewId, permissionsDTO);
        // TODO: test validations
    }

    /**
     * Updates view&#39;s settings.
     *
     * Updates view&#39;s settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingsTest() throws ApiException {
        Long viewId = null;
        SettingsDTO settingsDTO = null;
        SettingsDTO response = api.updateSettings(viewId, settingsDTO);
        // TODO: test validations
    }

}
