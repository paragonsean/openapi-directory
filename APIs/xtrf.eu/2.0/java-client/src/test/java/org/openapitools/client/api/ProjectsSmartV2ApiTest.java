/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BigDecimalDTO;
import org.openapitools.client.model.CATToolProjectDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.ExternalFileDto;
import java.io.File;
import org.openapitools.client.model.FileCategorizationsDto;
import org.openapitools.client.model.FileDto;
import org.openapitools.client.model.FileLinkCategorizationsDto;
import org.openapitools.client.model.FilesArchiveDto;
import org.openapitools.client.model.FilesDto;
import org.openapitools.client.model.FinanceDTO;
import org.openapitools.client.model.JobDto;
import org.openapitools.client.model.PayableCreateDTO;
import org.openapitools.client.model.PayableDTO;
import org.openapitools.client.model.ProjectCreateDTO;
import org.openapitools.client.model.ProjectDTOv2;
import org.openapitools.client.model.ProjectFileDto;
import org.openapitools.client.model.ProjectStatusDTO;
import org.openapitools.client.model.ReceivableCreateDTO;
import org.openapitools.client.model.ReceivableDTO;
import org.openapitools.client.model.SmartContactsDTO;
import org.openapitools.client.model.SmartCustomFieldDTO;
import org.openapitools.client.model.SourceLanguageDTO;
import org.openapitools.client.model.SpecializationDTO;
import org.openapitools.client.model.StringDTO;
import org.openapitools.client.model.TargetLanguagesDTO;
import org.openapitools.client.model.TimeDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsSmartV2Api
 */
@Disabled
public class ProjectsSmartV2ApiTest {

    private final ProjectsSmartV2Api api = new ProjectsSmartV2Api();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addExternalFileLinksTest() throws ApiException {
        String projectId = null;
        ExternalFileDto externalFileDto = null;
        api.addExternalFileLinks(projectId, externalFileDto);
        // TODO: test validations
    }

    /**
     * Adds file links to the project as added by PM.
     *
     * Adds file links to the project as added by PM. The following properties can be specified for each file link:&lt;ul&gt;&lt;li&gt;url (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFileLinks1Test() throws ApiException {
        String projectId = null;
        FileLinkCategorizationsDto fileLinkCategorizationsDto = null;
        FilesDto response = api.addFileLinks1(projectId, fileLinkCategorizationsDto);
        // TODO: test validations
    }

    /**
     * Adds files to the project as added by PM.
     *
     * Adds files to the project as added by PM. The files have to be uploaded beforehand (see \&quot;POST /v2/projects/{projectId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFiles1Test() throws ApiException {
        String projectId = null;
        FileCategorizationsDto fileCategorizationsDto = null;
        api.addFiles1(projectId, fileCategorizationsDto);
        // TODO: test validations
    }

    /**
     * Returns process id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addJobToProcessTest() throws ApiException {
        String projectId = null;
        CATToolProjectDTO response = api.addJobToProcess(projectId);
        // TODO: test validations
    }

    /**
     * Prepares a ZIP archive that contains the specified files.
     *
     * Prepares a ZIP archive that contains the specified files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveTest() throws ApiException {
        FilesDto filesDto = null;
        FilesArchiveDto response = api.archive(filesDto);
        // TODO: test validations
    }

    /**
     * Changes project status if possible (400 Bad Request is returned otherwise).
     *
     * Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: &lt;ul&gt;&lt;li&gt;CANCELLED – available when the job has one of the following statuses: OPEN, STARTED&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeStatus2Test() throws ApiException {
        String projectId = null;
        ProjectStatusDTO projectStatusDTO = null;
        api.changeStatus2(projectId, projectStatusDTO);
        // TODO: test validations
    }

    /**
     * Creates a new Smart Project.
     *
     * Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void create6Test() throws ApiException {
        ProjectCreateDTO projectCreateDTO = null;
        ProjectDTOv2 response = api.create6(projectCreateDTO);
        // TODO: test validations
    }

    /**
     * Adds a payable to a project.
     *
     * Adds a payable to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPayable2Test() throws ApiException {
        String projectId = null;
        PayableCreateDTO payableCreateDTO = null;
        PayableDTO response = api.createPayable2(projectId, payableCreateDTO);
        // TODO: test validations
    }

    /**
     * Adds a receivable to a project.
     *
     * Adds a receivable to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReceivable2Test() throws ApiException {
        String projectId = null;
        ReceivableCreateDTO receivableCreateDTO = null;
        ReceivableDTO response = api.createReceivable2(projectId, receivableCreateDTO);
        // TODO: test validations
    }

    /**
     * Deletes a payable.
     *
     * Deletes a payable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayable2Test() throws ApiException {
        String projectId = null;
        Long payableId = null;
        api.deletePayable2(projectId, payableId);
        // TODO: test validations
    }

    /**
     * Deletes a receivable.
     *
     * Deletes a receivable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReceivable2Test() throws ApiException {
        String projectId = null;
        Long receivableId = null;
        api.deleteReceivable2(projectId, receivableId);
        // TODO: test validations
    }

    /**
     * Returns project details.
     *
     * Returns project details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByExternalId1Test() throws ApiException {
        String externalProjectId = null;
        ProjectDTOv2 response = api.getByExternalId1(externalProjectId);
        // TODO: test validations
    }

    /**
     * Returns project details.
     *
     * Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getById9Test() throws ApiException {
        String projectId = null;
        ProjectDTOv2 response = api.getById9(projectId);
        // TODO: test validations
    }

    /**
     * Returns if cat tool project is created or queued.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCATToolProjectInfoTest() throws ApiException {
        String projectId = null;
        CATToolProjectDTO response = api.getCATToolProjectInfo(projectId);
        // TODO: test validations
    }

    /**
     * Returns Client Contacts information for a project.
     *
     * Returns Client Contacts information for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContacts2Test() throws ApiException {
        String projectId = null;
        SmartContactsDTO response = api.getContacts2(projectId);
        // TODO: test validations
    }

    /**
     * Returns a list of custom field keys and values for a project.
     *
     * Returns a list of custom field keys and values for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFields8Test() throws ApiException {
        String projectId = null;
        List<CustomFieldDTO> response = api.getCustomFields8(projectId);
        // TODO: test validations
    }

    /**
     * Returns list of files in a project, that are ready to be delivered to client.
     *
     * Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:&lt;ul&gt;&lt;li&gt;the file was added to a job in the last step in the process&lt;/li&gt;&lt;li&gt;the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)&lt;/li&gt;&lt;li&gt;the job is finished (has Ready status)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliverableFilesTest() throws ApiException {
        String projectId = null;
        List<ProjectFileDto> response = api.getDeliverableFiles(projectId);
        // TODO: test validations
    }

    /**
     * Returns details of a file.
     *
     * Returns details of a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileById2Test() throws ApiException {
        String fileId = null;
        ProjectFileDto response = api.getFileById2(fileId);
        // TODO: test validations
    }

    /**
     * Downloads a file content.
     *
     * Downloads a file content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileContentByIdTest() throws ApiException {
        String fileId = null;
        String fileName = null;
        api.getFileContentById(fileId, fileName);
        // TODO: test validations
    }

    /**
     * Returns list of files in a project.
     *
     * Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilesTest() throws ApiException {
        String projectId = null;
        List<ProjectFileDto> response = api.getFiles(projectId);
        // TODO: test validations
    }

    /**
     * Returns finance information for a project.
     *
     * Returns finance information for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFinance2Test() throws ApiException {
        String projectId = null;
        FinanceDTO response = api.getFinance2(projectId);
        // TODO: test validations
    }

    /**
     * Returns list of jobs in a project.
     *
     * Returns list of jobs in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        String projectId = null;
        List<JobDto> response = api.getJobs(projectId);
        // TODO: test validations
    }

    /**
     * Returns process id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProcessIdTest() throws ApiException {
        String projectId = null;
        CATToolProjectDTO response = api.getProcessId(projectId);
        // TODO: test validations
    }

    /**
     * Updates Client Deadline for a project.
     *
     * Updates Client Deadline for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientDeadlineTest() throws ApiException {
        String projectId = null;
        TimeDTO timeDTO = null;
        api.updateClientDeadline(projectId, timeDTO);
        // TODO: test validations
    }

    /**
     * Updates Client Notes for a project.
     *
     * Updates Client Notes for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientNotesTest() throws ApiException {
        String projectId = null;
        StringDTO stringDTO = null;
        api.updateClientNotes(projectId, stringDTO);
        // TODO: test validations
    }

    /**
     * Updates Client Reference Number for a project.
     *
     * Updates Client Reference Number for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientReferenceNumberTest() throws ApiException {
        String projectId = null;
        StringDTO stringDTO = null;
        api.updateClientReferenceNumber(projectId, stringDTO);
        // TODO: test validations
    }

    /**
     * Updates Client Contacts for a project.
     *
     * Updates Client Contacts for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContacts2Test() throws ApiException {
        String projectId = null;
        SmartContactsDTO smartContactsDTO = null;
        SmartContactsDTO response = api.updateContacts2(projectId, smartContactsDTO);
        // TODO: test validations
    }

    /**
     * Updates a custom field with a specified key in a project
     *
     * Updates a custom field with a specified key in a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomField2Test() throws ApiException {
        String projectId = null;
        String key = null;
        SmartCustomFieldDTO smartCustomFieldDTO = null;
        api.updateCustomField2(projectId, key, smartCustomFieldDTO);
        // TODO: test validations
    }

    /**
     * Updates Internal Notes for a project.
     *
     * Updates Internal Notes for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInternalNotesTest() throws ApiException {
        String projectId = null;
        StringDTO stringDTO = null;
        api.updateInternalNotes(projectId, stringDTO);
        // TODO: test validations
    }

    /**
     * Updates Order Date for a project.
     *
     * Updates Order Date for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderedOnTest() throws ApiException {
        String projectId = null;
        TimeDTO timeDTO = null;
        api.updateOrderedOn(projectId, timeDTO);
        // TODO: test validations
    }

    /**
     * Updates a payable.
     *
     * Updates a payable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayable2Test() throws ApiException {
        String projectId = null;
        Long payableId = null;
        PayableDTO payableDTO = null;
        PayableDTO response = api.updatePayable2(projectId, payableId, payableDTO);
        // TODO: test validations
    }

    /**
     * Updates a receivable.
     *
     * Updates a receivable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReceivable2Test() throws ApiException {
        String projectId = null;
        Long receivableId = null;
        ReceivableDTO receivableDTO = null;
        ReceivableDTO response = api.updateReceivable2(projectId, receivableId, receivableDTO);
        // TODO: test validations
    }

    /**
     * Updates source language for a project.
     *
     * Updates source language for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceLanguageTest() throws ApiException {
        String projectId = null;
        SourceLanguageDTO sourceLanguageDTO = null;
        api.updateSourceLanguage(projectId, sourceLanguageDTO);
        // TODO: test validations
    }

    /**
     * Updates specialization for a project.
     *
     * Updates specialization for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpecializationTest() throws ApiException {
        String projectId = null;
        SpecializationDTO specializationDTO = null;
        api.updateSpecialization(projectId, specializationDTO);
        // TODO: test validations
    }

    /**
     * Updates target languages for a project.
     *
     * Updates target languages for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTargetLanguagesTest() throws ApiException {
        String projectId = null;
        TargetLanguagesDTO targetLanguagesDTO = null;
        api.updateTargetLanguages(projectId, targetLanguagesDTO);
        // TODO: test validations
    }

    /**
     * Updates instructions for all vendors performing the jobs in a project.
     *
     * Updates instructions for all vendors performing the jobs in a project. See also \&quot;PUT /jobs/{jobId}/instructions\&quot; for updating instructions for a specific job in a project or quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVendorInstructionsTest() throws ApiException {
        String projectId = null;
        StringDTO stringDTO = null;
        api.updateVendorInstructions(projectId, stringDTO);
        // TODO: test validations
    }

    /**
     * Updates volume for a project.
     *
     * Updates volume for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVolumeTest() throws ApiException {
        String projectId = null;
        BigDecimalDTO bigDecimalDTO = null;
        api.updateVolume(projectId, bigDecimalDTO);
        // TODO: test validations
    }

    /**
     * Uploads file to the project as a file uploaded by PM.
     *
     * Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /v2/projects/{projectId}/files/add\&quot; operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFile2Test() throws ApiException {
        String projectId = null;
        File _file = null;
        FileDto response = api.uploadFile2(projectId, _file);
        // TODO: test validations
    }

}
