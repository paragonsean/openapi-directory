/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssignVendorDTO;
import org.openapitools.client.model.FileMetadataDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.JobDatesDto;
import org.openapitools.client.model.JobDto;
import org.openapitools.client.model.JobFilesDTO;
import org.openapitools.client.model.JobStatusDTO;
import org.openapitools.client.model.TaskFileDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsClassicApi
 */
@Disabled
public class JobsClassicApiTest {

    private final JobsClassicApi api = new JobsClassicApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignFileToJobOutputTest() throws ApiException {
        String jobId = null;
        TaskFileDTO taskFileDTO = null;
        api.assignFileToJobOutput(jobId, taskFileDTO);
        // TODO: test validations
    }

    /**
     * Assigns vendor to a job in a project.
     *
     * Assigns vendor to a job in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignVendorTest() throws ApiException {
        String jobId = null;
        AssignVendorDTO assignVendorDTO = null;
        api.assignVendor(jobId, assignVendorDTO);
        // TODO: test validations
    }

    /**
     * Changes job status if possible (400 Bad Request is returned otherwise).
     *
     * Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:&lt;ul&gt;&lt;li&gt;OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED&lt;/li&gt;&lt;li&gt;ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED&lt;/li&gt;&lt;li&gt;STARTED – available when the job has one of the following statuses: ACCEPTED, READY&lt;/li&gt;&lt;li&gt;READY – available when the job has one of the following statuses: STARTED&lt;/li&gt;&lt;li&gt;CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT&lt;/li&gt;&lt;li&gt;OFFERS_SENT – not available as a target status for this operation&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeStatusTest() throws ApiException {
        String jobId = null;
        JobStatusDTO jobStatusDTO = null;
        api.changeStatus(jobId, jobStatusDTO);
        // TODO: test validations
    }

    /**
     * Returns job details by jobId.
     *
     * Returns job details by jobId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobDetailsTest() throws ApiException {
        String jobId = null;
        JobDto response = api.getJobDetails(jobId);
        // TODO: test validations
    }

    /**
     * Returns list of input and output files of a job.
     *
     * Returns list of input and output files of a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobFilesTest() throws ApiException {
        String jobId = null;
        JobFilesDTO response = api.getJobFiles(jobId);
        // TODO: test validations
    }

    /**
     * Returns file metadata.
     *
     * Returns file metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobFiles1Test() throws ApiException {
        String jobId = null;
        Long fileId = null;
        FileMetadataDTO response = api.getJobFiles1(jobId, fileId);
        // TODO: test validations
    }

    /**
     * Updates dates of a given job.
     *
     * Updates dates of a given job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDatesTest() throws ApiException {
        String jobId = null;
        JobDatesDto jobDatesDto = null;
        api.updateDates(jobId, jobDatesDto);
        // TODO: test validations
    }

    /**
     * Updates instructions for a job.
     *
     * Updates instructions for a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstructionsTest() throws ApiException {
        String jobId = null;
        InstructionsDTO instructionsDTO = null;
        api.updateInstructions(jobId, instructionsDTO);
        // TODO: test validations
    }

}
