/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.EntityWithNameDTO;
import org.openapitools.client.model.TimeZoneDTO;
import org.openapitools.client.model.UserDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Sets user&#39;s password to a new value.
     *
     * Sets user&#39;s password to a new value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        Long userId = null;
        String newPassword = null;
        String oldPassword = null;
        api.changePassword(userId, newPassword, oldPassword);
        // TODO: test validations
    }

    /**
     * Returns list of simple users representations
     *
     * Returns list of simple users representations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllNamesWithIds1Test() throws ApiException {
        List<EntityWithNameDTO> response = api.getAllNamesWithIds1();
        // TODO: test validations
    }

    /**
     * Returns user details.
     *
     * Returns user details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getById6Test() throws ApiException {
        Long userId = null;
        UserDTO response = api.getById6(userId);
        // TODO: test validations
    }

    /**
     * Returns custom field of a given user.
     *
     * Returns custom field of a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomField1Test() throws ApiException {
        Long userId = null;
        String customFieldKey = null;
        CustomFieldDTO response = api.getCustomField1(userId, customFieldKey);
        // TODO: test validations
    }

    /**
     * Returns custom fields of a given user.
     *
     * Returns custom fields of a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFields4Test() throws ApiException {
        Long userId = null;
        List<CustomFieldDTO> response = api.getCustomFields4(userId);
        // TODO: test validations
    }

    /**
     * Returns currently signed in user details.
     *
     * Returns currently signed in user details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMeTest() throws ApiException {
        UserDTO response = api.getMe();
        // TODO: test validations
    }

    /**
     * Returns time zone preferred by user currently signed in.
     *
     * Returns time zone preferred by user currently signed in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeZoneTest() throws ApiException {
        TimeZoneDTO response = api.getTimeZone();
        // TODO: test validations
    }

    /**
     * Updates an existing user.
     *
     * Updates an existing user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void update3Test() throws ApiException {
        Long userId = null;
        UserDTO userDTO = null;
        UserDTO response = api.update3(userId, userDTO);
        // TODO: test validations
    }

    /**
     * Updates given custom field of a given user.
     *
     * Updates given custom field of a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomField1Test() throws ApiException {
        Long userId = null;
        String customFieldKey = null;
        CustomFieldDTO customFieldDTO = null;
        CustomFieldDTO response = api.updateCustomField1(userId, customFieldKey, customFieldDTO);
        // TODO: test validations
    }

    /**
     * Updates custom fields of a given user.
     *
     * Updates custom fields of a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFields2Test() throws ApiException {
        Long userId = null;
        List<CustomFieldDTO> customFieldDTO = null;
        List<CustomFieldDTO> response = api.updateCustomFields2(userId, customFieldDTO);
        // TODO: test validations
    }

}
