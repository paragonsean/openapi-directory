/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ContactsDTO;
import org.openapitools.client.model.CustomFieldDTO;
import org.openapitools.client.model.FileDTO;
import org.openapitools.client.model.InstructionsDTO;
import org.openapitools.client.model.ProjectDatesDTO;
import org.openapitools.client.model.StringDTO;
import org.openapitools.client.model.TaskFilesDTO;
import org.openapitools.client.model.TaskProgressDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksClassicApi
 */
@Disabled
public class TasksClassicApiTest {

    private final TasksClassicApi api = new TasksClassicApi();

    /**
     * Adds files to a given task.
     *
     * Adds files to a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFileTest() throws ApiException {
        String taskId = null;
        FileDTO fileDTO = null;
        api.addFile(taskId, fileDTO);
        // TODO: test validations
    }

    /**
     * Removes a task.
     *
     * Removes a task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete14Test() throws ApiException {
        String taskId = null;
        Boolean removeFilesFromDisc = null;
        Boolean removeExternalProjects = null;
        Boolean forceJobsRemoval = null;
        api.delete14(taskId, removeFilesFromDisc, removeExternalProjects, forceJobsRemoval);
        // TODO: test validations
    }

    /**
     * Returns contacts of a given task.
     *
     * Returns contacts of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContacts1Test() throws ApiException {
        String taskId = null;
        ContactsDTO response = api.getContacts1(taskId);
        // TODO: test validations
    }

    /**
     * Returns custom fields of a given task.
     *
     * Returns custom fields of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomFields7Test() throws ApiException {
        String taskId = null;
        List<CustomFieldDTO> response = api.getCustomFields7(taskId);
        // TODO: test validations
    }

    /**
     * Returns dates of a given task.
     *
     * Returns dates of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDates3Test() throws ApiException {
        String taskId = null;
        ProjectDatesDTO response = api.getDates3(taskId);
        // TODO: test validations
    }

    /**
     * Returns instructions of a given task.
     *
     * Returns instructions of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstructions2Test() throws ApiException {
        String taskId = null;
        InstructionsDTO response = api.getInstructions2(taskId);
        // TODO: test validations
    }

    /**
     * Returns progress of a given task.
     *
     * Returns progress of a given task. Progress contains information about task&#39;s status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProgressTest() throws ApiException {
        String taskId = null;
        TaskProgressDTO response = api.getProgress(taskId);
        // TODO: test validations
    }

    /**
     * Returns lists of files of a given task.
     *
     * Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskFilesTest() throws ApiException {
        String taskId = null;
        TaskFilesDTO response = api.getTaskFiles(taskId);
        // TODO: test validations
    }

    /**
     * Starts a task.
     *
     * Starts a task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void start1Test() throws ApiException {
        String taskId = null;
        api.start1(taskId);
        // TODO: test validations
    }

    /**
     * Updates Client Task PO Number of a given task.
     *
     * Updates Client Task PO Number of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientTaskPONumberTest() throws ApiException {
        String taskId = null;
        StringDTO stringDTO = null;
        StringDTO response = api.updateClientTaskPONumber(taskId, stringDTO);
        // TODO: test validations
    }

    /**
     * Updates contacts of a given task.
     *
     * Updates contacts of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContacts1Test() throws ApiException {
        String taskId = null;
        ContactsDTO contactsDTO = null;
        ContactsDTO response = api.updateContacts1(taskId, contactsDTO);
        // TODO: test validations
    }

    /**
     * Updates custom fields of a given task.
     *
     * Updates custom fields of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFields5Test() throws ApiException {
        String taskId = null;
        List<CustomFieldDTO> customFieldDTO = null;
        List<CustomFieldDTO> response = api.updateCustomFields5(taskId, customFieldDTO);
        // TODO: test validations
    }

    /**
     * Updates dates of a given task.
     *
     * Updates dates of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDates2Test() throws ApiException {
        String taskId = null;
        ProjectDatesDTO projectDatesDTO = null;
        ProjectDatesDTO response = api.updateDates2(taskId, projectDatesDTO);
        // TODO: test validations
    }

    /**
     * Updates instructions of a given task.
     *
     * Updates instructions of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstructions3Test() throws ApiException {
        String taskId = null;
        InstructionsDTO instructionsDTO = null;
        InstructionsDTO response = api.updateInstructions3(taskId, instructionsDTO);
        // TODO: test validations
    }

    /**
     * Updates name of a given task.
     *
     * Updates name of a given task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNameTest() throws ApiException {
        String taskId = null;
        StringDTO stringDTO = null;
        StringDTO response = api.updateName(taskId, stringDTO);
        // TODO: test validations
    }

}
