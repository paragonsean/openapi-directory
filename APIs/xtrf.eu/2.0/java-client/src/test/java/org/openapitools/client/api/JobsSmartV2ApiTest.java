/*
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExternalFileDto;
import java.io.File;
import org.openapitools.client.model.FileCategorizationsDto;
import org.openapitools.client.model.FileDto;
import org.openapitools.client.model.FileLinkCategorizationsDto;
import org.openapitools.client.model.FilesDto;
import org.openapitools.client.model.FilesShareStatusDto;
import org.openapitools.client.model.JobDatesDto;
import org.openapitools.client.model.JobStatusDTO;
import org.openapitools.client.model.ProjectFileDto;
import org.openapitools.client.model.StringDTO;
import org.openapitools.client.model.VendorPriceProfileDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsSmartV2Api
 */
@Disabled
public class JobsSmartV2ApiTest {

    private final JobsSmartV2Api api = new JobsSmartV2Api();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addExternalFileLinkTest() throws ApiException {
        String jobId = null;
        ExternalFileDto externalFileDto = null;
        api.addExternalFileLink(jobId, externalFileDto);
        // TODO: test validations
    }

    /**
     * Adds file link to the project as a link delivered in the job.
     *
     * Adds file link to the project as a link delivered in the job. The following properties can be specified for each file link:&lt;ul&gt;&lt;li&gt;url (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFileLinksTest() throws ApiException {
        String jobId = null;
        FileLinkCategorizationsDto fileLinkCategorizationsDto = null;
        FilesDto response = api.addFileLinks(jobId, fileLinkCategorizationsDto);
        // TODO: test validations
    }

    /**
     * Adds files to the project as delivered in the job.
     *
     * Adds files to the project as delivered in the job. The files have to be uploaded beforehand (see \&quot;POST /jobs/{jobId}/files/upload\&quot; operation). The following properties can be specified for each file:&lt;ul&gt;&lt;li&gt;category (required, 400 Bad Request is returned otherwise)&lt;/li&gt;&lt;li&gt;languageIds – when the file category depends on a list of languages&lt;/li&gt;&lt;li&gt;languageCombinationIds – when the file category depends on a list of language combinations&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFilesTest() throws ApiException {
        String jobId = null;
        FileCategorizationsDto fileCategorizationsDto = null;
        api.addFiles(jobId, fileCategorizationsDto);
        // TODO: test validations
    }

    /**
     * Assigns vendor to a job in a project.
     *
     * Assigns vendor to a job in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignVendor1Test() throws ApiException {
        String jobId = null;
        VendorPriceProfileDTO vendorPriceProfileDTO = null;
        api.assignVendor1(jobId, vendorPriceProfileDTO);
        // TODO: test validations
    }

    /**
     * Updates dates of a given job.
     *
     * Updates dates of a given job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeDatesTest() throws ApiException {
        String jobId = null;
        JobDatesDto jobDatesDto = null;
        api.changeDates(jobId, jobDatesDto);
        // TODO: test validations
    }

    /**
     * Changes job status if possible (400 Bad Request is returned otherwise).
     *
     * Changes job status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys:&lt;ul&gt;&lt;li&gt;OPEN – available when the job has one of the following statuses: ACCEPTED, CANCELED&lt;/li&gt;&lt;li&gt;ACCEPTED – available when the job has one of the following statuses: OPEN (Vendor and dates have to be set before calling the operation), STARTED&lt;/li&gt;&lt;li&gt;STARTED – available when the job has one of the following statuses: ACCEPTED, READY&lt;/li&gt;&lt;li&gt;READY – available when the job has one of the following statuses: STARTED&lt;/li&gt;&lt;li&gt;CANCELLED – available when the job has one of the following statuses: OPEN, ACCEPTED, STARTED, OFFERS_SENT&lt;/li&gt;&lt;li&gt;OFFERS_SENT – not available as a target status for this operation&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeStatus1Test() throws ApiException {
        String jobId = null;
        JobStatusDTO jobStatusDTO = null;
        api.changeStatus1(jobId, jobStatusDTO);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByExternalIdTest() throws ApiException {
        String externalProjectId = null;
        String externalId = null;
        api.getByExternalId(externalProjectId, externalId);
        // TODO: test validations
    }

    /**
     * Returns list of files delivered in the job.
     *
     * Returns list of files delivered in the job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliveredFilesTest() throws ApiException {
        String jobId = null;
        List<ProjectFileDto> response = api.getDeliveredFiles(jobId);
        // TODO: test validations
    }

    /**
     * Returns details for a job.
     *
     * Returns details for a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileById1Test() throws ApiException {
        String jobId = null;
        ProjectFileDto response = api.getFileById1(jobId);
        // TODO: test validations
    }

    /**
     * Returns list of files shared with the job as Reference Files.
     *
     * Returns list of files shared with the job as Reference Files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSharedReferenceFilesTest() throws ApiException {
        String jobId = null;
        List<ProjectFileDto> response = api.getSharedReferenceFiles(jobId);
        // TODO: test validations
    }

    /**
     * Returns list of files shared with the job as Work Files.
     *
     * Returns list of files shared with the job as Work Files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSharedWorkFilesTest() throws ApiException {
        String jobId = null;
        List<ProjectFileDto> response = api.getSharedWorkFiles(jobId);
        // TODO: test validations
    }

    /**
     * Shares selected files as Reference Files with a job in a project.
     *
     * Shares selected files as Reference Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Work File, it will now be shared as Reference File (and not as Work File).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareAsReferenceFilesTest() throws ApiException {
        String jobId = null;
        FilesDto filesDto = null;
        FilesShareStatusDto response = api.shareAsReferenceFiles(jobId, filesDto);
        // TODO: test validations
    }

    /**
     * Shares selected files as Work Files with a job in a project.
     *
     * Shares selected files as Work Files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were already shared with the job. If a file was shared with the job as Reference File, it will now be shared as Work File (and not as Reference File).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareAsWorkFilesTest() throws ApiException {
        String jobId = null;
        FilesDto filesDto = null;
        FilesShareStatusDto response = api.shareAsWorkFiles(jobId, filesDto);
        // TODO: test validations
    }

    /**
     * Stops sharing selected files with a job in a project.
     *
     * Stops sharing selected files with a job in a project. The files and the job have to be part of the same project. The operation is finished successfully even if some of the selected files were not shared with the job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopSharingTest() throws ApiException {
        String jobId = null;
        FilesDto filesDto = null;
        FilesShareStatusDto response = api.stopSharing(jobId, filesDto);
        // TODO: test validations
    }

    /**
     * Updates instructions for a job.
     *
     * Updates instructions for a job. See also \&quot;PUT /projects/{projectId}/vendorInstructions\&quot; and \&quot;PUT /quotes/{quoteId}/vendorInstructions\&quot; for updating instructions for all jobs in a project or quote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstructions4Test() throws ApiException {
        String jobId = null;
        StringDTO stringDTO = null;
        api.updateInstructions4(jobId, stringDTO);
        // TODO: test validations
    }

    /**
     * Uploads file to the project as a file delivered in the job.
     *
     * Uploads file to the project as a file delivered in the job. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \&quot;PUT /jobs/{jobId}/files/add\&quot; operation).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFile1Test() throws ApiException {
        String jobId = null;
        File _file = null;
        FileDto response = api.uploadFile1(jobId, _file);
        // TODO: test validations
    }

}
