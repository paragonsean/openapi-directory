/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDictionaryEntity.h
 *
 * 
 */

#ifndef OAIDictionaryEntity_H
#define OAIDictionaryEntity_H

#include <QJsonObject>

#include "OAIEventsQueue.h"
#include "OAIIdentifier.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEventsQueue;
class OAIIdentifier;

class OAIDictionaryEntity : public OAIObject {
public:
    OAIDictionaryEntity();
    OAIDictionaryEntity(QString json);
    ~OAIDictionaryEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    OAIEventsQueue getAndClearEventsQueue() const;
    void setAndClearEventsQueue(const OAIEventsQueue &and_clear_events_queue);
    bool is_and_clear_events_queue_Set() const;
    bool is_and_clear_events_queue_Valid() const;

    QString getAuditDisplayName() const;
    void setAuditDisplayName(const QString &audit_display_name);
    bool is_audit_display_name_Set() const;
    bool is_audit_display_name_Valid() const;

    QString getAuditPath() const;
    void setAuditPath(const QString &audit_path);
    bool is_audit_path_Set() const;
    bool is_audit_path_Valid() const;

    QString getClassNameKey() const;
    void setClassNameKey(const QString &class_name_key);
    bool is_class_name_key_Set() const;
    bool is_class_name_key_Valid() const;

    QString getClassSimpleName() const;
    void setClassSimpleName(const QString &class_simple_name);
    bool is_class_simple_name_Set() const;
    bool is_class_simple_name_Valid() const;

    QString getCompoundId() const;
    void setCompoundId(const QString &compound_id);
    bool is_compound_id_Set() const;
    bool is_compound_id_Valid() const;

    bool isDefaultEntity() const;
    void setDefaultEntity(const bool &default_entity);
    bool is_default_entity_Set() const;
    bool is_default_entity_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isEntityMarkedAsNotSupposedToBePersisted() const;
    void setEntityMarkedAsNotSupposedToBePersisted(const bool &entity_marked_as_not_supposed_to_be_persisted);
    bool is_entity_marked_as_not_supposed_to_be_persisted_Set() const;
    bool is_entity_marked_as_not_supposed_to_be_persisted_Valid() const;

    bool isEventsQueueReadyToBeDispatched() const;
    void setEventsQueueReadyToBeDispatched(const bool &events_queue_ready_to_be_dispatched);
    bool is_events_queue_ready_to_be_dispatched_Set() const;
    bool is_events_queue_ready_to_be_dispatched_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIIdentifier getIdentifier() const;
    void setIdentifier(const OAIIdentifier &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QString getInternalDescription() const;
    void setInternalDescription(const QString &internal_description);
    bool is_internal_description_Set() const;
    bool is_internal_description_Valid() const;

    QDateTime getLastModificationDate() const;
    void setLastModificationDate(const QDateTime &last_modification_date);
    bool is_last_modification_date_Set() const;
    bool is_last_modification_date_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPackedCompoundId() const;
    void setPackedCompoundId(const QString &packed_compound_id);
    bool is_packed_compound_id_Set() const;
    bool is_packed_compound_id_Valid() const;

    bool isPreferedEntity() const;
    void setPreferedEntity(const bool &prefered_entity);
    bool is_prefered_entity_Set() const;
    bool is_prefered_entity_Valid() const;

    bool isPreferred() const;
    void setPreferred(const bool &preferred);
    bool is_preferred_Set() const;
    bool is_preferred_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    OAIEventsQueue m_and_clear_events_queue;
    bool m_and_clear_events_queue_isSet;
    bool m_and_clear_events_queue_isValid;

    QString m_audit_display_name;
    bool m_audit_display_name_isSet;
    bool m_audit_display_name_isValid;

    QString m_audit_path;
    bool m_audit_path_isSet;
    bool m_audit_path_isValid;

    QString m_class_name_key;
    bool m_class_name_key_isSet;
    bool m_class_name_key_isValid;

    QString m_class_simple_name;
    bool m_class_simple_name_isSet;
    bool m_class_simple_name_isValid;

    QString m_compound_id;
    bool m_compound_id_isSet;
    bool m_compound_id_isValid;

    bool m_default_entity;
    bool m_default_entity_isSet;
    bool m_default_entity_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_entity_marked_as_not_supposed_to_be_persisted;
    bool m_entity_marked_as_not_supposed_to_be_persisted_isSet;
    bool m_entity_marked_as_not_supposed_to_be_persisted_isValid;

    bool m_events_queue_ready_to_be_dispatched;
    bool m_events_queue_ready_to_be_dispatched_isSet;
    bool m_events_queue_ready_to_be_dispatched_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIIdentifier m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QString m_internal_description;
    bool m_internal_description_isSet;
    bool m_internal_description_isValid;

    QDateTime m_last_modification_date;
    bool m_last_modification_date_isSet;
    bool m_last_modification_date_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_packed_compound_id;
    bool m_packed_compound_id_isSet;
    bool m_packed_compound_id_isValid;

    bool m_prefered_entity;
    bool m_prefered_entity_isSet;
    bool m_prefered_entity_isValid;

    bool m_preferred;
    bool m_preferred_isSet;
    bool m_preferred_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDictionaryEntity)

#endif // OAIDictionaryEntity_H
