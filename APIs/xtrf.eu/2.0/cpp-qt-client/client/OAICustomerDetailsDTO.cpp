/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerDetailsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerDetailsDTO::OAICustomerDetailsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerDetailsDTO::OAICustomerDetailsDTO() {
    this->initializeModel();
}

OAICustomerDetailsDTO::~OAICustomerDetailsDTO() {}

void OAICustomerDetailsDTO::initializeModel() {

    m_address_line_isSet = false;
    m_address_line_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_id_isSet = false;
    m_country_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_vat_ue_isSet = false;
    m_vat_ue_isValid = false;
}

void OAICustomerDetailsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerDetailsDTO::fromJsonObject(QJsonObject json) {

    m_address_line_isValid = ::OpenAPI::fromJsonValue(m_address_line, json[QString("addressLine")]);
    m_address_line_isSet = !json[QString("addressLine")].isNull() && m_address_line_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("countryId")]);
    m_country_id_isSet = !json[QString("countryId")].isNull() && m_country_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_vat_ue_isValid = ::OpenAPI::fromJsonValue(m_vat_ue, json[QString("vatUE")]);
    m_vat_ue_isSet = !json[QString("vatUE")].isNull() && m_vat_ue_isValid;
}

QString OAICustomerDetailsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerDetailsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line_isSet) {
        obj.insert(QString("addressLine"), ::OpenAPI::toJsonValue(m_address_line));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_id_isSet) {
        obj.insert(QString("countryId"), ::OpenAPI::toJsonValue(m_country_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_vat_ue_isSet) {
        obj.insert(QString("vatUE"), ::OpenAPI::toJsonValue(m_vat_ue));
    }
    return obj;
}

QString OAICustomerDetailsDTO::getAddressLine() const {
    return m_address_line;
}
void OAICustomerDetailsDTO::setAddressLine(const QString &address_line) {
    m_address_line = address_line;
    m_address_line_isSet = true;
}

bool OAICustomerDetailsDTO::is_address_line_Set() const{
    return m_address_line_isSet;
}

bool OAICustomerDetailsDTO::is_address_line_Valid() const{
    return m_address_line_isValid;
}

QString OAICustomerDetailsDTO::getCity() const {
    return m_city;
}
void OAICustomerDetailsDTO::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICustomerDetailsDTO::is_city_Set() const{
    return m_city_isSet;
}

bool OAICustomerDetailsDTO::is_city_Valid() const{
    return m_city_isValid;
}

QString OAICustomerDetailsDTO::getCountry() const {
    return m_country;
}
void OAICustomerDetailsDTO::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICustomerDetailsDTO::is_country_Set() const{
    return m_country_isSet;
}

bool OAICustomerDetailsDTO::is_country_Valid() const{
    return m_country_isValid;
}

qint64 OAICustomerDetailsDTO::getCountryId() const {
    return m_country_id;
}
void OAICustomerDetailsDTO::setCountryId(const qint64 &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAICustomerDetailsDTO::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAICustomerDetailsDTO::is_country_id_Valid() const{
    return m_country_id_isValid;
}

QString OAICustomerDetailsDTO::getName() const {
    return m_name;
}
void OAICustomerDetailsDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerDetailsDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerDetailsDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomerDetailsDTO::getPostalCode() const {
    return m_postal_code;
}
void OAICustomerDetailsDTO::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAICustomerDetailsDTO::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAICustomerDetailsDTO::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAICustomerDetailsDTO::getVatUe() const {
    return m_vat_ue;
}
void OAICustomerDetailsDTO::setVatUe(const QString &vat_ue) {
    m_vat_ue = vat_ue;
    m_vat_ue_isSet = true;
}

bool OAICustomerDetailsDTO::is_vat_ue_Set() const{
    return m_vat_ue_isSet;
}

bool OAICustomerDetailsDTO::is_vat_ue_Valid() const{
    return m_vat_ue_isValid;
}

bool OAICustomerDetailsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_ue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerDetailsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
