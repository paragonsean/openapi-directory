/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientInvoicesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIClientInvoicesApi::OAIClientInvoicesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIClientInvoicesApi::~OAIClientInvoicesApi() {
}

void OAIClientInvoicesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://presentation.s.xtrf.eu/home-api"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("create1", defaultConf);
    _serverIndices.insert("create1", 0);
    _serverConfigs.insert("createPayment", defaultConf);
    _serverIndices.insert("createPayment", 0);
    _serverConfigs.insert("delete1", defaultConf);
    _serverIndices.insert("delete1", 0);
    _serverConfigs.insert("delete2", defaultConf);
    _serverIndices.insert("delete2", 0);
    _serverConfigs.insert("downloadDocuments", defaultConf);
    _serverIndices.insert("downloadDocuments", 0);
    _serverConfigs.insert("duplicate", defaultConf);
    _serverIndices.insert("duplicate", 0);
    _serverConfigs.insert("duplicateAsProForma", defaultConf);
    _serverIndices.insert("duplicateAsProForma", 0);
    _serverConfigs.insert("getAll", defaultConf);
    _serverIndices.insert("getAll", 0);
    _serverConfigs.insert("getAllIds", defaultConf);
    _serverIndices.insert("getAllIds", 0);
    _serverConfigs.insert("getById", defaultConf);
    _serverIndices.insert("getById", 0);
    _serverConfigs.insert("getDates", defaultConf);
    _serverIndices.insert("getDates", 0);
    _serverConfigs.insert("getDocument", defaultConf);
    _serverIndices.insert("getDocument", 0);
    _serverConfigs.insert("getPaymentTerms", defaultConf);
    _serverIndices.insert("getPaymentTerms", 0);
    _serverConfigs.insert("getPayments", defaultConf);
    _serverIndices.insert("getPayments", 0);
    _serverConfigs.insert("sendReminder", defaultConf);
    _serverIndices.insert("sendReminder", 0);
    _serverConfigs.insert("sendReminders", defaultConf);
    _serverIndices.insert("sendReminders", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIClientInvoicesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIClientInvoicesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIClientInvoicesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIClientInvoicesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIClientInvoicesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIClientInvoicesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIClientInvoicesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIClientInvoicesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIClientInvoicesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIClientInvoicesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClientInvoicesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClientInvoicesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIClientInvoicesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIClientInvoicesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIClientInvoicesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIClientInvoicesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIClientInvoicesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIClientInvoicesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIClientInvoicesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIClientInvoicesApi::create1(const OAICustomerInvoiceCreateDTO &oai_customer_invoice_create_dto) {
    QString fullPath = QString(_serverConfigs["create1"][_serverIndices.value("create1")].URL()+"/accounting/customers/invoices");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_customer_invoice_create_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::create1Callback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::create1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICustomerInvoiceCreateResultDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT create1Signal(output);
        Q_EMIT create1SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT create1SignalE(output, error_type, error_str);
        Q_EMIT create1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT create1SignalError(output, error_type, error_str);
        Q_EMIT create1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::createPayment(const qint64 &invoice_id, const OAIPaymentDTO &oai_payment_dto) {
    QString fullPath = QString(_serverConfigs["createPayment"][_serverIndices.value("createPayment")].URL()+"/accounting/customers/invoices/{invoiceId}/payments");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_payment_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::createPaymentCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::createPaymentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createPaymentSignal();
        Q_EMIT createPaymentSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createPaymentSignalE(error_type, error_str);
        Q_EMIT createPaymentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createPaymentSignalError(error_type, error_str);
        Q_EMIT createPaymentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::delete1(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["delete1"][_serverIndices.value("delete1")].URL()+"/accounting/customers/invoices/{invoiceId}");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::delete1Callback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::delete1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delete1Signal();
        Q_EMIT delete1SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delete1SignalE(error_type, error_str);
        Q_EMIT delete1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delete1SignalError(error_type, error_str);
        Q_EMIT delete1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::delete2(const qint64 &payment_id) {
    QString fullPath = QString(_serverConfigs["delete2"][_serverIndices.value("delete2")].URL()+"/accounting/customers/payments/{paymentId}");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::delete2Callback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::delete2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delete2Signal();
        Q_EMIT delete2SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delete2SignalE(error_type, error_str);
        Q_EMIT delete2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delete2SignalError(error_type, error_str);
        Q_EMIT delete2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::downloadDocuments(const OAIDownloadDocumentsRequestDTO &oai_download_documents_request_dto) {
    QString fullPath = QString(_serverConfigs["downloadDocuments"][_serverIndices.value("downloadDocuments")].URL()+"/accounting/customers/invoices/documents");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_download_documents_request_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::downloadDocumentsCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::downloadDocumentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUrlResultDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT downloadDocumentsSignal(output);
        Q_EMIT downloadDocumentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT downloadDocumentsSignalE(output, error_type, error_str);
        Q_EMIT downloadDocumentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT downloadDocumentsSignalError(output, error_type, error_str);
        Q_EMIT downloadDocumentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::duplicate(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["duplicate"][_serverIndices.value("duplicate")].URL()+"/accounting/customers/invoices/{invoiceId}/duplicate");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::duplicateCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::duplicateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICustomerInvoiceDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT duplicateSignal(output);
        Q_EMIT duplicateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT duplicateSignalE(output, error_type, error_str);
        Q_EMIT duplicateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT duplicateSignalError(output, error_type, error_str);
        Q_EMIT duplicateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::duplicateAsProForma(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["duplicateAsProForma"][_serverIndices.value("duplicateAsProForma")].URL()+"/accounting/customers/invoices/{invoiceId}/duplicate/proForma");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::duplicateAsProFormaCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::duplicateAsProFormaCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICustomerInvoiceDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT duplicateAsProFormaSignal(output);
        Q_EMIT duplicateAsProFormaSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT duplicateAsProFormaSignalE(output, error_type, error_str);
        Q_EMIT duplicateAsProFormaSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT duplicateAsProFormaSignalError(output, error_type, error_str);
        Q_EMIT duplicateAsProFormaSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::getAll(const ::OpenAPI::OptionalParam<qint64> &updated_since) {
    QString fullPath = QString(_serverConfigs["getAll"][_serverIndices.value("getAll")].URL()+"/accounting/customers/invoices");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (updated_since.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "updatedSince", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("updatedSince")).append(querySuffix).append(QUrl::toPercentEncoding(updated_since.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::getAllCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::getAllCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICustomerInvoiceDTO> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICustomerInvoiceDTO val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllSignal(output);
        Q_EMIT getAllSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllSignalE(output, error_type, error_str);
        Q_EMIT getAllSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllSignalError(output, error_type, error_str);
        Q_EMIT getAllSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::getAllIds(const ::OpenAPI::OptionalParam<qint64> &updated_since) {
    QString fullPath = QString(_serverConfigs["getAllIds"][_serverIndices.value("getAllIds")].URL()+"/accounting/customers/invoices/ids");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (updated_since.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "updatedSince", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("updatedSince")).append(querySuffix).append(QUrl::toPercentEncoding(updated_since.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::getAllIdsCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::getAllIdsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllIdsSignal(output);
        Q_EMIT getAllIdsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllIdsSignalE(output, error_type, error_str);
        Q_EMIT getAllIdsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllIdsSignalError(output, error_type, error_str);
        Q_EMIT getAllIdsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::getById(const qint64 &invoice_id, const ::OpenAPI::OptionalParam<QString> &embed) {
    QString fullPath = QString(_serverConfigs["getById"][_serverIndices.value("getById")].URL()+"/accounting/customers/invoices/{invoiceId}");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (embed.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "embed", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("embed")).append(querySuffix).append(QUrl::toPercentEncoding(embed.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::getByIdCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::getByIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICustomerInvoiceDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getByIdSignal(output);
        Q_EMIT getByIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getByIdSignalE(output, error_type, error_str);
        Q_EMIT getByIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getByIdSignalError(output, error_type, error_str);
        Q_EMIT getByIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::getDates(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["getDates"][_serverIndices.value("getDates")].URL()+"/accounting/customers/invoices/{invoiceId}/dates");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::getDatesCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::getDatesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICustomerInvoiceDatesDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDatesSignal(output);
        Q_EMIT getDatesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDatesSignalE(output, error_type, error_str);
        Q_EMIT getDatesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDatesSignalError(output, error_type, error_str);
        Q_EMIT getDatesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::getDocument(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["getDocument"][_serverIndices.value("getDocument")].URL()+"/accounting/customers/invoices/{invoiceId}/document");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::getDocumentCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::getDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUrlResultDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDocumentSignal(output);
        Q_EMIT getDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDocumentSignalE(output, error_type, error_str);
        Q_EMIT getDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDocumentSignalError(output, error_type, error_str);
        Q_EMIT getDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::getPaymentTerms(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["getPaymentTerms"][_serverIndices.value("getPaymentTerms")].URL()+"/accounting/customers/invoices/{invoiceId}/paymentTerms");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::getPaymentTermsCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::getPaymentTermsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentTermsDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentTermsSignal(output);
        Q_EMIT getPaymentTermsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentTermsSignalE(output, error_type, error_str);
        Q_EMIT getPaymentTermsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentTermsSignalError(output, error_type, error_str);
        Q_EMIT getPaymentTermsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::getPayments(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["getPayments"][_serverIndices.value("getPayments")].URL()+"/accounting/customers/invoices/{invoiceId}/payments");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::getPaymentsCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::getPaymentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPaymentDTO> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPaymentDTO val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentsSignal(output);
        Q_EMIT getPaymentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentsSignalE(output, error_type, error_str);
        Q_EMIT getPaymentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentsSignalError(output, error_type, error_str);
        Q_EMIT getPaymentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::sendReminder(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["sendReminder"][_serverIndices.value("sendReminder")].URL()+"/accounting/customers/invoices/{invoiceId}/sendReminder");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::sendReminderCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::sendReminderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendReminderSignal();
        Q_EMIT sendReminderSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendReminderSignalE(error_type, error_str);
        Q_EMIT sendReminderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendReminderSignalError(error_type, error_str);
        Q_EMIT sendReminderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::sendReminders(const OAISendRemindersRequestDTO &oai_send_reminders_request_dto) {
    QString fullPath = QString(_serverConfigs["sendReminders"][_serverIndices.value("sendReminders")].URL()+"/accounting/customers/invoices/sendReminders");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_send_reminders_request_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClientInvoicesApi::sendRemindersCallback);
    connect(this, &OAIClientInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClientInvoicesApi::sendRemindersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISendRemindersResponseDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendRemindersSignal(output);
        Q_EMIT sendRemindersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendRemindersSignalE(output, error_type, error_str);
        Q_EMIT sendRemindersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendRemindersSignalError(output, error_type, error_str);
        Q_EMIT sendRemindersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClientInvoicesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
