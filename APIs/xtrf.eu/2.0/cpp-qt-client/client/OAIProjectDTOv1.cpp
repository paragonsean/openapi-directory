/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDTOv1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDTOv1::OAIProjectDTOv1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDTOv1::OAIProjectDTOv1() {
    this->initializeModel();
}

OAIProjectDTOv1::~OAIProjectDTOv1() {}

void OAIProjectDTOv1::initializeModel() {

    m_categories_ids_isSet = false;
    m_categories_ids_isValid = false;

    m_contact_person_id_isSet = false;
    m_contact_person_id_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_finance_isSet = false;
    m_finance_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_number_isSet = false;
    m_id_number_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_is_classic_project_isSet = false;
    m_is_classic_project_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_manager_id_isSet = false;
    m_project_manager_id_isValid = false;

    m_specialization_id_isSet = false;
    m_specialization_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;
}

void OAIProjectDTOv1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDTOv1::fromJsonObject(QJsonObject json) {

    m_categories_ids_isValid = ::OpenAPI::fromJsonValue(m_categories_ids, json[QString("categoriesIds")]);
    m_categories_ids_isSet = !json[QString("categoriesIds")].isNull() && m_categories_ids_isValid;

    m_contact_person_id_isValid = ::OpenAPI::fromJsonValue(m_contact_person_id, json[QString("contactPersonId")]);
    m_contact_person_id_isSet = !json[QString("contactPersonId")].isNull() && m_contact_person_id_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_finance_isValid = ::OpenAPI::fromJsonValue(m_finance, json[QString("finance")]);
    m_finance_isSet = !json[QString("finance")].isNull() && m_finance_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_number_isValid = ::OpenAPI::fromJsonValue(m_id_number, json[QString("idNumber")]);
    m_id_number_isSet = !json[QString("idNumber")].isNull() && m_id_number_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_is_classic_project_isValid = ::OpenAPI::fromJsonValue(m_is_classic_project, json[QString("isClassicProject")]);
    m_is_classic_project_isSet = !json[QString("isClassicProject")].isNull() && m_is_classic_project_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_manager_id_isValid = ::OpenAPI::fromJsonValue(m_project_manager_id, json[QString("projectManagerId")]);
    m_project_manager_id_isSet = !json[QString("projectManagerId")].isNull() && m_project_manager_id_isValid;

    m_specialization_id_isValid = ::OpenAPI::fromJsonValue(m_specialization_id, json[QString("specializationId")]);
    m_specialization_id_isSet = !json[QString("specializationId")].isNull() && m_specialization_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;
}

QString OAIProjectDTOv1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDTOv1::asJsonObject() const {
    QJsonObject obj;
    if (m_categories_ids.size() > 0) {
        obj.insert(QString("categoriesIds"), ::OpenAPI::toJsonValue(m_categories_ids));
    }
    if (m_contact_person_id_isSet) {
        obj.insert(QString("contactPersonId"), ::OpenAPI::toJsonValue(m_contact_person_id));
    }
    if (m_contacts.isSet()) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_finance.isSet()) {
        obj.insert(QString("finance"), ::OpenAPI::toJsonValue(m_finance));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_number_isSet) {
        obj.insert(QString("idNumber"), ::OpenAPI::toJsonValue(m_id_number));
    }
    if (m_instructions.isSet()) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_is_classic_project_isSet) {
        obj.insert(QString("isClassicProject"), ::OpenAPI::toJsonValue(m_is_classic_project));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_manager_id_isSet) {
        obj.insert(QString("projectManagerId"), ::OpenAPI::toJsonValue(m_project_manager_id));
    }
    if (m_specialization_id_isSet) {
        obj.insert(QString("specializationId"), ::OpenAPI::toJsonValue(m_specialization_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    return obj;
}

QSet<qint64> OAIProjectDTOv1::getCategoriesIds() const {
    return m_categories_ids;
}
void OAIProjectDTOv1::setCategoriesIds(const QSet<qint64> &categories_ids) {
    m_categories_ids = categories_ids;
    m_categories_ids_isSet = true;
}

bool OAIProjectDTOv1::is_categories_ids_Set() const{
    return m_categories_ids_isSet;
}

bool OAIProjectDTOv1::is_categories_ids_Valid() const{
    return m_categories_ids_isValid;
}

qint64 OAIProjectDTOv1::getContactPersonId() const {
    return m_contact_person_id;
}
void OAIProjectDTOv1::setContactPersonId(const qint64 &contact_person_id) {
    m_contact_person_id = contact_person_id;
    m_contact_person_id_isSet = true;
}

bool OAIProjectDTOv1::is_contact_person_id_Set() const{
    return m_contact_person_id_isSet;
}

bool OAIProjectDTOv1::is_contact_person_id_Valid() const{
    return m_contact_person_id_isValid;
}

OAIContactsDTO OAIProjectDTOv1::getContacts() const {
    return m_contacts;
}
void OAIProjectDTOv1::setContacts(const OAIContactsDTO &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIProjectDTOv1::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIProjectDTOv1::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QList<OAICustomFieldDTO> OAIProjectDTOv1::getCustomFields() const {
    return m_custom_fields;
}
void OAIProjectDTOv1::setCustomFields(const QList<OAICustomFieldDTO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProjectDTOv1::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProjectDTOv1::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAIProjectDTOv1::getCustomerId() const {
    return m_customer_id;
}
void OAIProjectDTOv1::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIProjectDTOv1::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIProjectDTOv1::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

OAIProjectDatesDTO OAIProjectDTOv1::getDates() const {
    return m_dates;
}
void OAIProjectDTOv1::setDates(const OAIProjectDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIProjectDTOv1::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIProjectDTOv1::is_dates_Valid() const{
    return m_dates_isValid;
}

OAIFinanceDTO OAIProjectDTOv1::getFinance() const {
    return m_finance;
}
void OAIProjectDTOv1::setFinance(const OAIFinanceDTO &finance) {
    m_finance = finance;
    m_finance_isSet = true;
}

bool OAIProjectDTOv1::is_finance_Set() const{
    return m_finance_isSet;
}

bool OAIProjectDTOv1::is_finance_Valid() const{
    return m_finance_isValid;
}

qint64 OAIProjectDTOv1::getId() const {
    return m_id;
}
void OAIProjectDTOv1::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectDTOv1::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectDTOv1::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectDTOv1::getIdNumber() const {
    return m_id_number;
}
void OAIProjectDTOv1::setIdNumber(const QString &id_number) {
    m_id_number = id_number;
    m_id_number_isSet = true;
}

bool OAIProjectDTOv1::is_id_number_Set() const{
    return m_id_number_isSet;
}

bool OAIProjectDTOv1::is_id_number_Valid() const{
    return m_id_number_isValid;
}

OAIInstructionsDTO OAIProjectDTOv1::getInstructions() const {
    return m_instructions;
}
void OAIProjectDTOv1::setInstructions(const OAIInstructionsDTO &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIProjectDTOv1::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIProjectDTOv1::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIProjectDTOv1::isIsClassicProject() const {
    return m_is_classic_project;
}
void OAIProjectDTOv1::setIsClassicProject(const bool &is_classic_project) {
    m_is_classic_project = is_classic_project;
    m_is_classic_project_isSet = true;
}

bool OAIProjectDTOv1::is_is_classic_project_Set() const{
    return m_is_classic_project_isSet;
}

bool OAIProjectDTOv1::is_is_classic_project_Valid() const{
    return m_is_classic_project_isValid;
}

QString OAIProjectDTOv1::getName() const {
    return m_name;
}
void OAIProjectDTOv1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectDTOv1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectDTOv1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProjectDTOv1::getProjectId() const {
    return m_project_id;
}
void OAIProjectDTOv1::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectDTOv1::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectDTOv1::is_project_id_Valid() const{
    return m_project_id_isValid;
}

qint64 OAIProjectDTOv1::getProjectManagerId() const {
    return m_project_manager_id;
}
void OAIProjectDTOv1::setProjectManagerId(const qint64 &project_manager_id) {
    m_project_manager_id = project_manager_id;
    m_project_manager_id_isSet = true;
}

bool OAIProjectDTOv1::is_project_manager_id_Set() const{
    return m_project_manager_id_isSet;
}

bool OAIProjectDTOv1::is_project_manager_id_Valid() const{
    return m_project_manager_id_isValid;
}

qint64 OAIProjectDTOv1::getSpecializationId() const {
    return m_specialization_id;
}
void OAIProjectDTOv1::setSpecializationId(const qint64 &specialization_id) {
    m_specialization_id = specialization_id;
    m_specialization_id_isSet = true;
}

bool OAIProjectDTOv1::is_specialization_id_Set() const{
    return m_specialization_id_isSet;
}

bool OAIProjectDTOv1::is_specialization_id_Valid() const{
    return m_specialization_id_isValid;
}

QString OAIProjectDTOv1::getStatus() const {
    return m_status;
}
void OAIProjectDTOv1::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectDTOv1::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectDTOv1::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITaskDTO> OAIProjectDTOv1::getTasks() const {
    return m_tasks;
}
void OAIProjectDTOv1::setTasks(const QList<OAITaskDTO> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIProjectDTOv1::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIProjectDTOv1::is_tasks_Valid() const{
    return m_tasks_isValid;
}

bool OAIProjectDTOv1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_classic_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_manager_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDTOv1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
