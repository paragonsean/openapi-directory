/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileMetadataDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileMetadataDTO::OAIFileMetadataDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileMetadataDTO::OAIFileMetadataDTO() {
    this->initializeModel();
}

OAIFileMetadataDTO::~OAIFileMetadataDTO() {}

void OAIFileMetadataDTO::initializeModel() {

    m_category_key_isSet = false;
    m_category_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIFileMetadataDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileMetadataDTO::fromJsonObject(QJsonObject json) {

    m_category_key_isValid = ::OpenAPI::fromJsonValue(m_category_key, json[QString("categoryKey")]);
    m_category_key_isSet = !json[QString("categoryKey")].isNull() && m_category_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("lastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("lastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIFileMetadataDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileMetadataDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_category_key_isSet) {
        obj.insert(QString("categoryKey"), ::OpenAPI::toJsonValue(m_category_key));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("lastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIFileMetadataDTO::getCategoryKey() const {
    return m_category_key;
}
void OAIFileMetadataDTO::setCategoryKey(const QString &category_key) {
    m_category_key = category_key;
    m_category_key_isSet = true;
}

bool OAIFileMetadataDTO::is_category_key_Set() const{
    return m_category_key_isSet;
}

bool OAIFileMetadataDTO::is_category_key_Valid() const{
    return m_category_key_isValid;
}

qint64 OAIFileMetadataDTO::getId() const {
    return m_id;
}
void OAIFileMetadataDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFileMetadataDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFileMetadataDTO::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIFileMetadataDTO::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIFileMetadataDTO::setLastModifiedOn(const qint64 &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIFileMetadataDTO::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIFileMetadataDTO::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QString OAIFileMetadataDTO::getName() const {
    return m_name;
}
void OAIFileMetadataDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFileMetadataDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFileMetadataDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIFileMetadataDTO::getSize() const {
    return m_size;
}
void OAIFileMetadataDTO::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFileMetadataDTO::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFileMetadataDTO::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIFileMetadataDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileMetadataDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
