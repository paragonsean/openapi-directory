/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManyValuesPerTypeDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManyValuesPerTypeDTO::OAIManyValuesPerTypeDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManyValuesPerTypeDTO::OAIManyValuesPerTypeDTO() {
    this->initializeModel();
}

OAIManyValuesPerTypeDTO::~OAIManyValuesPerTypeDTO() {}

void OAIManyValuesPerTypeDTO::initializeModel() {

    m_calculation_unit_isSet = false;
    m_calculation_unit_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_lead_source_isSet = false;
    m_lead_source_isValid = false;

    m_person_department_isSet = false;
    m_person_department_isValid = false;

    m_person_position_isSet = false;
    m_person_position_isValid = false;

    m_province_isSet = false;
    m_province_isValid = false;

    m_specialization_isSet = false;
    m_specialization_isValid = false;
}

void OAIManyValuesPerTypeDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManyValuesPerTypeDTO::fromJsonObject(QJsonObject json) {

    m_calculation_unit_isValid = ::OpenAPI::fromJsonValue(m_calculation_unit, json[QString("calculationUnit")]);
    m_calculation_unit_isSet = !json[QString("calculationUnit")].isNull() && m_calculation_unit_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_lead_source_isValid = ::OpenAPI::fromJsonValue(m_lead_source, json[QString("leadSource")]);
    m_lead_source_isSet = !json[QString("leadSource")].isNull() && m_lead_source_isValid;

    m_person_department_isValid = ::OpenAPI::fromJsonValue(m_person_department, json[QString("personDepartment")]);
    m_person_department_isSet = !json[QString("personDepartment")].isNull() && m_person_department_isValid;

    m_person_position_isValid = ::OpenAPI::fromJsonValue(m_person_position, json[QString("personPosition")]);
    m_person_position_isSet = !json[QString("personPosition")].isNull() && m_person_position_isValid;

    m_province_isValid = ::OpenAPI::fromJsonValue(m_province, json[QString("province")]);
    m_province_isSet = !json[QString("province")].isNull() && m_province_isValid;

    m_specialization_isValid = ::OpenAPI::fromJsonValue(m_specialization, json[QString("specialization")]);
    m_specialization_isSet = !json[QString("specialization")].isNull() && m_specialization_isValid;
}

QString OAIManyValuesPerTypeDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManyValuesPerTypeDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_calculation_unit.size() > 0) {
        obj.insert(QString("calculationUnit"), ::OpenAPI::toJsonValue(m_calculation_unit));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_country.size() > 0) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency.size() > 0) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_industry.size() > 0) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_job_type.size() > 0) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_language.size() > 0) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_lead_source.size() > 0) {
        obj.insert(QString("leadSource"), ::OpenAPI::toJsonValue(m_lead_source));
    }
    if (m_person_department.size() > 0) {
        obj.insert(QString("personDepartment"), ::OpenAPI::toJsonValue(m_person_department));
    }
    if (m_person_position.size() > 0) {
        obj.insert(QString("personPosition"), ::OpenAPI::toJsonValue(m_person_position));
    }
    if (m_province.size() > 0) {
        obj.insert(QString("province"), ::OpenAPI::toJsonValue(m_province));
    }
    if (m_specialization.size() > 0) {
        obj.insert(QString("specialization"), ::OpenAPI::toJsonValue(m_specialization));
    }
    return obj;
}

QList<OAICalculationUnitDTO> OAIManyValuesPerTypeDTO::getCalculationUnit() const {
    return m_calculation_unit;
}
void OAIManyValuesPerTypeDTO::setCalculationUnit(const QList<OAICalculationUnitDTO> &calculation_unit) {
    m_calculation_unit = calculation_unit;
    m_calculation_unit_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_calculation_unit_Set() const{
    return m_calculation_unit_isSet;
}

bool OAIManyValuesPerTypeDTO::is_calculation_unit_Valid() const{
    return m_calculation_unit_isValid;
}

QList<OAICategoryDTO> OAIManyValuesPerTypeDTO::getCategory() const {
    return m_category;
}
void OAIManyValuesPerTypeDTO::setCategory(const QList<OAICategoryDTO> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_category_Set() const{
    return m_category_isSet;
}

bool OAIManyValuesPerTypeDTO::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAICountryDTO> OAIManyValuesPerTypeDTO::getCountry() const {
    return m_country;
}
void OAIManyValuesPerTypeDTO::setCountry(const QList<OAICountryDTO> &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_country_Set() const{
    return m_country_isSet;
}

bool OAIManyValuesPerTypeDTO::is_country_Valid() const{
    return m_country_isValid;
}

QList<OAICurrencyDTO> OAIManyValuesPerTypeDTO::getCurrency() const {
    return m_currency;
}
void OAIManyValuesPerTypeDTO::setCurrency(const QList<OAICurrencyDTO> &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIManyValuesPerTypeDTO::is_currency_Valid() const{
    return m_currency_isValid;
}

QList<OAIIndustryDTO> OAIManyValuesPerTypeDTO::getIndustry() const {
    return m_industry;
}
void OAIManyValuesPerTypeDTO::setIndustry(const QList<OAIIndustryDTO> &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIManyValuesPerTypeDTO::is_industry_Valid() const{
    return m_industry_isValid;
}

QList<OAIJobTypeDTO> OAIManyValuesPerTypeDTO::getJobType() const {
    return m_job_type;
}
void OAIManyValuesPerTypeDTO::setJobType(const QList<OAIJobTypeDTO> &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIManyValuesPerTypeDTO::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QList<OAILanguageDTO> OAIManyValuesPerTypeDTO::getLanguage() const {
    return m_language;
}
void OAIManyValuesPerTypeDTO::setLanguage(const QList<OAILanguageDTO> &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_language_Set() const{
    return m_language_isSet;
}

bool OAIManyValuesPerTypeDTO::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAILeadSourceDTO> OAIManyValuesPerTypeDTO::getLeadSource() const {
    return m_lead_source;
}
void OAIManyValuesPerTypeDTO::setLeadSource(const QList<OAILeadSourceDTO> &lead_source) {
    m_lead_source = lead_source;
    m_lead_source_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_lead_source_Set() const{
    return m_lead_source_isSet;
}

bool OAIManyValuesPerTypeDTO::is_lead_source_Valid() const{
    return m_lead_source_isValid;
}

QList<OAIPersonDepartmentDTO> OAIManyValuesPerTypeDTO::getPersonDepartment() const {
    return m_person_department;
}
void OAIManyValuesPerTypeDTO::setPersonDepartment(const QList<OAIPersonDepartmentDTO> &person_department) {
    m_person_department = person_department;
    m_person_department_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_person_department_Set() const{
    return m_person_department_isSet;
}

bool OAIManyValuesPerTypeDTO::is_person_department_Valid() const{
    return m_person_department_isValid;
}

QList<OAIPersonPositionDTO> OAIManyValuesPerTypeDTO::getPersonPosition() const {
    return m_person_position;
}
void OAIManyValuesPerTypeDTO::setPersonPosition(const QList<OAIPersonPositionDTO> &person_position) {
    m_person_position = person_position;
    m_person_position_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_person_position_Set() const{
    return m_person_position_isSet;
}

bool OAIManyValuesPerTypeDTO::is_person_position_Valid() const{
    return m_person_position_isValid;
}

QList<OAIProvinceDTO> OAIManyValuesPerTypeDTO::getProvince() const {
    return m_province;
}
void OAIManyValuesPerTypeDTO::setProvince(const QList<OAIProvinceDTO> &province) {
    m_province = province;
    m_province_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_province_Set() const{
    return m_province_isSet;
}

bool OAIManyValuesPerTypeDTO::is_province_Valid() const{
    return m_province_isValid;
}

QList<OAILanguageSpecializationDTO> OAIManyValuesPerTypeDTO::getSpecialization() const {
    return m_specialization;
}
void OAIManyValuesPerTypeDTO::setSpecialization(const QList<OAILanguageSpecializationDTO> &specialization) {
    m_specialization = specialization;
    m_specialization_isSet = true;
}

bool OAIManyValuesPerTypeDTO::is_specialization_Set() const{
    return m_specialization_isSet;
}

bool OAIManyValuesPerTypeDTO::is_specialization_Valid() const{
    return m_specialization_isValid;
}

bool OAIManyValuesPerTypeDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculation_unit.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_department.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_position.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_province.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialization.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManyValuesPerTypeDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
