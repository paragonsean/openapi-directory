/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVendorInvoicesApi_H
#define OAI_OAIVendorInvoicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPaymentDTO.h"
#include "OAIProviderInvoiceCreateDTO.h"
#include "OAIProviderInvoiceCreateResultDTO.h"
#include "OAIProviderInvoiceDTO.h"
#include "OAIStatusRequestDTO.h"
#include "OAIUrlResultDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVendorInvoicesApi : public QObject {
    Q_OBJECT

public:
    OAIVendorInvoicesApi(const int timeOut = 0);
    ~OAIVendorInvoicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_provider_invoice_create_dto OAIProviderInvoiceCreateDTO [required]
    */
    virtual void create4(const OAIProviderInvoiceCreateDTO &oai_provider_invoice_create_dto);

    /**
    * @param[in]  invoice_id qint64 [required]
    * @param[in]  oai_payment_dto OAIPaymentDTO [required]
    */
    virtual void createPayment1(const qint64 &invoice_id, const OAIPaymentDTO &oai_payment_dto);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void delete6(const qint64 &invoice_id);

    /**
    * @param[in]  payment_id qint64 [required]
    */
    virtual void delete7(const qint64 &payment_id);

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAll2(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllIds3(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void getById3(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void getDocument1(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void getPayments1(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void send(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    * @param[in]  oai_status_request_dto OAIStatusRequestDTO [required]
    */
    virtual void setStatus(const qint64 &invoice_id, const OAIStatusRequestDTO &oai_status_request_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void create4Callback(OAIHttpRequestWorker *worker);
    void createPayment1Callback(OAIHttpRequestWorker *worker);
    void delete6Callback(OAIHttpRequestWorker *worker);
    void delete7Callback(OAIHttpRequestWorker *worker);
    void getAll2Callback(OAIHttpRequestWorker *worker);
    void getAllIds3Callback(OAIHttpRequestWorker *worker);
    void getById3Callback(OAIHttpRequestWorker *worker);
    void getDocument1Callback(OAIHttpRequestWorker *worker);
    void getPayments1Callback(OAIHttpRequestWorker *worker);
    void sendCallback(OAIHttpRequestWorker *worker);
    void setStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void create4Signal(OAIProviderInvoiceCreateResultDTO summary);
    void createPayment1Signal();
    void delete6Signal();
    void delete7Signal();
    void getAll2Signal(QList<OAIProviderInvoiceDTO> summary);
    void getAllIds3Signal(QList<qint32> summary);
    void getById3Signal(OAIProviderInvoiceDTO summary);
    void getDocument1Signal(OAIUrlResultDTO summary);
    void getPayments1Signal(QList<OAIPaymentDTO> summary);
    void sendSignal();
    void setStatusSignal();


    void create4SignalFull(OAIHttpRequestWorker *worker, OAIProviderInvoiceCreateResultDTO summary);
    void createPayment1SignalFull(OAIHttpRequestWorker *worker);
    void delete6SignalFull(OAIHttpRequestWorker *worker);
    void delete7SignalFull(OAIHttpRequestWorker *worker);
    void getAll2SignalFull(OAIHttpRequestWorker *worker, QList<OAIProviderInvoiceDTO> summary);
    void getAllIds3SignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getById3SignalFull(OAIHttpRequestWorker *worker, OAIProviderInvoiceDTO summary);
    void getDocument1SignalFull(OAIHttpRequestWorker *worker, OAIUrlResultDTO summary);
    void getPayments1SignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentDTO> summary);
    void sendSignalFull(OAIHttpRequestWorker *worker);
    void setStatusSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use create4SignalError() instead")
    void create4SignalE(OAIProviderInvoiceCreateResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create4SignalError(OAIProviderInvoiceCreateResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayment1SignalError() instead")
    void createPayment1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createPayment1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete6SignalError() instead")
    void delete6SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete6SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete7SignalError() instead")
    void delete7SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete7SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAll2SignalError() instead")
    void getAll2SignalE(QList<OAIProviderInvoiceDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAll2SignalError(QList<OAIProviderInvoiceDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds3SignalError() instead")
    void getAllIds3SignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds3SignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById3SignalError() instead")
    void getById3SignalE(OAIProviderInvoiceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById3SignalError(OAIProviderInvoiceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocument1SignalError() instead")
    void getDocument1SignalE(OAIUrlResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocument1SignalError(OAIUrlResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayments1SignalError() instead")
    void getPayments1SignalE(QList<OAIPaymentDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayments1SignalError(QList<OAIPaymentDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendSignalError() instead")
    void sendSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStatusSignalError() instead")
    void setStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use create4SignalErrorFull() instead")
    void create4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayment1SignalErrorFull() instead")
    void createPayment1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayment1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete6SignalErrorFull() instead")
    void delete6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete7SignalErrorFull() instead")
    void delete7SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete7SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAll2SignalErrorFull() instead")
    void getAll2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAll2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds3SignalErrorFull() instead")
    void getAllIds3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById3SignalErrorFull() instead")
    void getById3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocument1SignalErrorFull() instead")
    void getDocument1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocument1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayments1SignalErrorFull() instead")
    void getPayments1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayments1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendSignalErrorFull() instead")
    void sendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setStatusSignalErrorFull() instead")
    void setStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
