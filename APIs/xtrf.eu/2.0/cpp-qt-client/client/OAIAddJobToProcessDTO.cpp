/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddJobToProcessDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddJobToProcessDTO::OAIAddJobToProcessDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddJobToProcessDTO::OAIAddJobToProcessDTO() {
    this->initializeModel();
}

OAIAddJobToProcessDTO::~OAIAddJobToProcessDTO() {}

void OAIAddJobToProcessDTO::initializeModel() {

    m_external_info_isSet = false;
    m_external_info_isValid = false;

    m_external_project_id_isSet = false;
    m_external_project_id_isValid = false;

    m_previous_step_number_isSet = false;
    m_previous_step_number_isValid = false;

    m_step_type_id_isSet = false;
    m_step_type_id_isValid = false;
}

void OAIAddJobToProcessDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddJobToProcessDTO::fromJsonObject(QJsonObject json) {

    m_external_info_isValid = ::OpenAPI::fromJsonValue(m_external_info, json[QString("externalInfo")]);
    m_external_info_isSet = !json[QString("externalInfo")].isNull() && m_external_info_isValid;

    m_external_project_id_isValid = ::OpenAPI::fromJsonValue(m_external_project_id, json[QString("externalProjectId")]);
    m_external_project_id_isSet = !json[QString("externalProjectId")].isNull() && m_external_project_id_isValid;

    m_previous_step_number_isValid = ::OpenAPI::fromJsonValue(m_previous_step_number, json[QString("previousStepNumber")]);
    m_previous_step_number_isSet = !json[QString("previousStepNumber")].isNull() && m_previous_step_number_isValid;

    m_step_type_id_isValid = ::OpenAPI::fromJsonValue(m_step_type_id, json[QString("stepTypeId")]);
    m_step_type_id_isSet = !json[QString("stepTypeId")].isNull() && m_step_type_id_isValid;
}

QString OAIAddJobToProcessDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddJobToProcessDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_external_info.isSet()) {
        obj.insert(QString("externalInfo"), ::OpenAPI::toJsonValue(m_external_info));
    }
    if (m_external_project_id_isSet) {
        obj.insert(QString("externalProjectId"), ::OpenAPI::toJsonValue(m_external_project_id));
    }
    if (m_previous_step_number_isSet) {
        obj.insert(QString("previousStepNumber"), ::OpenAPI::toJsonValue(m_previous_step_number));
    }
    if (m_step_type_id_isSet) {
        obj.insert(QString("stepTypeId"), ::OpenAPI::toJsonValue(m_step_type_id));
    }
    return obj;
}

OAIExternalInfo OAIAddJobToProcessDTO::getExternalInfo() const {
    return m_external_info;
}
void OAIAddJobToProcessDTO::setExternalInfo(const OAIExternalInfo &external_info) {
    m_external_info = external_info;
    m_external_info_isSet = true;
}

bool OAIAddJobToProcessDTO::is_external_info_Set() const{
    return m_external_info_isSet;
}

bool OAIAddJobToProcessDTO::is_external_info_Valid() const{
    return m_external_info_isValid;
}

QString OAIAddJobToProcessDTO::getExternalProjectId() const {
    return m_external_project_id;
}
void OAIAddJobToProcessDTO::setExternalProjectId(const QString &external_project_id) {
    m_external_project_id = external_project_id;
    m_external_project_id_isSet = true;
}

bool OAIAddJobToProcessDTO::is_external_project_id_Set() const{
    return m_external_project_id_isSet;
}

bool OAIAddJobToProcessDTO::is_external_project_id_Valid() const{
    return m_external_project_id_isValid;
}

qint32 OAIAddJobToProcessDTO::getPreviousStepNumber() const {
    return m_previous_step_number;
}
void OAIAddJobToProcessDTO::setPreviousStepNumber(const qint32 &previous_step_number) {
    m_previous_step_number = previous_step_number;
    m_previous_step_number_isSet = true;
}

bool OAIAddJobToProcessDTO::is_previous_step_number_Set() const{
    return m_previous_step_number_isSet;
}

bool OAIAddJobToProcessDTO::is_previous_step_number_Valid() const{
    return m_previous_step_number_isValid;
}

QString OAIAddJobToProcessDTO::getStepTypeId() const {
    return m_step_type_id;
}
void OAIAddJobToProcessDTO::setStepTypeId(const QString &step_type_id) {
    m_step_type_id = step_type_id;
    m_step_type_id_isSet = true;
}

bool OAIAddJobToProcessDTO::is_step_type_id_Set() const{
    return m_step_type_id_isSet;
}

bool OAIAddJobToProcessDTO::is_step_type_id_Valid() const{
    return m_step_type_id_isValid;
}

bool OAIAddJobToProcessDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_step_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddJobToProcessDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
