/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassicProjectCreateDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassicProjectCreateDTO::OAIClassicProjectCreateDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassicProjectCreateDTO::OAIClassicProjectCreateDTO() {
    this->initializeModel();
}

OAIClassicProjectCreateDTO::~OAIClassicProjectCreateDTO() {}

void OAIClassicProjectCreateDTO::initializeModel() {

    m_categories_ids_isSet = false;
    m_categories_ids_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_input_files_isSet = false;
    m_input_files_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_source_language_id_isSet = false;
    m_source_language_id_isValid = false;

    m_specialization_id_isSet = false;
    m_specialization_id_isValid = false;

    m_target_languages_ids_isSet = false;
    m_target_languages_ids_isValid = false;
}

void OAIClassicProjectCreateDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassicProjectCreateDTO::fromJsonObject(QJsonObject json) {

    m_categories_ids_isValid = ::OpenAPI::fromJsonValue(m_categories_ids, json[QString("categoriesIds")]);
    m_categories_ids_isSet = !json[QString("categoriesIds")].isNull() && m_categories_ids_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_input_files_isValid = ::OpenAPI::fromJsonValue(m_input_files, json[QString("inputFiles")]);
    m_input_files_isSet = !json[QString("inputFiles")].isNull() && m_input_files_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_source_language_id_isValid = ::OpenAPI::fromJsonValue(m_source_language_id, json[QString("sourceLanguageId")]);
    m_source_language_id_isSet = !json[QString("sourceLanguageId")].isNull() && m_source_language_id_isValid;

    m_specialization_id_isValid = ::OpenAPI::fromJsonValue(m_specialization_id, json[QString("specializationId")]);
    m_specialization_id_isSet = !json[QString("specializationId")].isNull() && m_specialization_id_isValid;

    m_target_languages_ids_isValid = ::OpenAPI::fromJsonValue(m_target_languages_ids, json[QString("targetLanguagesIds")]);
    m_target_languages_ids_isSet = !json[QString("targetLanguagesIds")].isNull() && m_target_languages_ids_isValid;
}

QString OAIClassicProjectCreateDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassicProjectCreateDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_categories_ids.size() > 0) {
        obj.insert(QString("categoriesIds"), ::OpenAPI::toJsonValue(m_categories_ids));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_input_files.size() > 0) {
        obj.insert(QString("inputFiles"), ::OpenAPI::toJsonValue(m_input_files));
    }
    if (m_instructions.isSet()) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_people.isSet()) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_source_language_id_isSet) {
        obj.insert(QString("sourceLanguageId"), ::OpenAPI::toJsonValue(m_source_language_id));
    }
    if (m_specialization_id_isSet) {
        obj.insert(QString("specializationId"), ::OpenAPI::toJsonValue(m_specialization_id));
    }
    if (m_target_languages_ids.size() > 0) {
        obj.insert(QString("targetLanguagesIds"), ::OpenAPI::toJsonValue(m_target_languages_ids));
    }
    return obj;
}

QList<qint64> OAIClassicProjectCreateDTO::getCategoriesIds() const {
    return m_categories_ids;
}
void OAIClassicProjectCreateDTO::setCategoriesIds(const QList<qint64> &categories_ids) {
    m_categories_ids = categories_ids;
    m_categories_ids_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_categories_ids_Set() const{
    return m_categories_ids_isSet;
}

bool OAIClassicProjectCreateDTO::is_categories_ids_Valid() const{
    return m_categories_ids_isValid;
}

qint64 OAIClassicProjectCreateDTO::getCustomerId() const {
    return m_customer_id;
}
void OAIClassicProjectCreateDTO::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIClassicProjectCreateDTO::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

OAIProjectDatesDTO OAIClassicProjectCreateDTO::getDates() const {
    return m_dates;
}
void OAIClassicProjectCreateDTO::setDates(const OAIProjectDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIClassicProjectCreateDTO::is_dates_Valid() const{
    return m_dates_isValid;
}

QList<OAITaskFileDTO> OAIClassicProjectCreateDTO::getInputFiles() const {
    return m_input_files;
}
void OAIClassicProjectCreateDTO::setInputFiles(const QList<OAITaskFileDTO> &input_files) {
    m_input_files = input_files;
    m_input_files_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_input_files_Set() const{
    return m_input_files_isSet;
}

bool OAIClassicProjectCreateDTO::is_input_files_Valid() const{
    return m_input_files_isValid;
}

OAIInstructionsDTO OAIClassicProjectCreateDTO::getInstructions() const {
    return m_instructions;
}
void OAIClassicProjectCreateDTO::setInstructions(const OAIInstructionsDTO &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIClassicProjectCreateDTO::is_instructions_Valid() const{
    return m_instructions_isValid;
}

QString OAIClassicProjectCreateDTO::getName() const {
    return m_name;
}
void OAIClassicProjectCreateDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIClassicProjectCreateDTO::is_name_Valid() const{
    return m_name_isValid;
}

OAIClassicPeopleDTO OAIClassicProjectCreateDTO::getPeople() const {
    return m_people;
}
void OAIClassicProjectCreateDTO::setPeople(const OAIClassicPeopleDTO &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_people_Set() const{
    return m_people_isSet;
}

bool OAIClassicProjectCreateDTO::is_people_Valid() const{
    return m_people_isValid;
}

qint64 OAIClassicProjectCreateDTO::getServiceId() const {
    return m_service_id;
}
void OAIClassicProjectCreateDTO::setServiceId(const qint64 &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIClassicProjectCreateDTO::is_service_id_Valid() const{
    return m_service_id_isValid;
}

qint64 OAIClassicProjectCreateDTO::getSourceLanguageId() const {
    return m_source_language_id;
}
void OAIClassicProjectCreateDTO::setSourceLanguageId(const qint64 &source_language_id) {
    m_source_language_id = source_language_id;
    m_source_language_id_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_source_language_id_Set() const{
    return m_source_language_id_isSet;
}

bool OAIClassicProjectCreateDTO::is_source_language_id_Valid() const{
    return m_source_language_id_isValid;
}

qint64 OAIClassicProjectCreateDTO::getSpecializationId() const {
    return m_specialization_id;
}
void OAIClassicProjectCreateDTO::setSpecializationId(const qint64 &specialization_id) {
    m_specialization_id = specialization_id;
    m_specialization_id_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_specialization_id_Set() const{
    return m_specialization_id_isSet;
}

bool OAIClassicProjectCreateDTO::is_specialization_id_Valid() const{
    return m_specialization_id_isValid;
}

QList<qint64> OAIClassicProjectCreateDTO::getTargetLanguagesIds() const {
    return m_target_languages_ids;
}
void OAIClassicProjectCreateDTO::setTargetLanguagesIds(const QList<qint64> &target_languages_ids) {
    m_target_languages_ids = target_languages_ids;
    m_target_languages_ids_isSet = true;
}

bool OAIClassicProjectCreateDTO::is_target_languages_ids_Set() const{
    return m_target_languages_ids_isSet;
}

bool OAIClassicProjectCreateDTO::is_target_languages_ids_Valid() const{
    return m_target_languages_ids_isValid;
}

bool OAIClassicProjectCreateDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_languages_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassicProjectCreateDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_id_isValid && m_service_id_isValid && m_specialization_id_isValid && true;
}

} // namespace OpenAPI
