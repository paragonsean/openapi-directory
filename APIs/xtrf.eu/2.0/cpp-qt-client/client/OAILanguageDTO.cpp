/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageDTO::OAILanguageDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageDTO::OAILanguageDTO() {
    this->initializeModel();
}

OAILanguageDTO::~OAILanguageDTO() {}

void OAILanguageDTO::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iso6391_isSet = false;
    m_iso6391_isValid = false;

    m_iso6392_isSet = false;
    m_iso6392_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAILanguageDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguageDTO::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iso6391_isValid = ::OpenAPI::fromJsonValue(m_iso6391, json[QString("iso6391")]);
    m_iso6391_isSet = !json[QString("iso6391")].isNull() && m_iso6391_isValid;

    m_iso6392_isValid = ::OpenAPI::fromJsonValue(m_iso6392, json[QString("iso6392")]);
    m_iso6392_isSet = !json[QString("iso6392")].isNull() && m_iso6392_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAILanguageDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguageDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iso6391_isSet) {
        obj.insert(QString("iso6391"), ::OpenAPI::toJsonValue(m_iso6391));
    }
    if (m_iso6392_isSet) {
        obj.insert(QString("iso6392"), ::OpenAPI::toJsonValue(m_iso6392));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

bool OAILanguageDTO::isActive() const {
    return m_active;
}
void OAILanguageDTO::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAILanguageDTO::is_active_Set() const{
    return m_active_isSet;
}

bool OAILanguageDTO::is_active_Valid() const{
    return m_active_isValid;
}

bool OAILanguageDTO::isRDefault() const {
    return m_r_default;
}
void OAILanguageDTO::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAILanguageDTO::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAILanguageDTO::is_r_default_Valid() const{
    return m_r_default_isValid;
}

qint64 OAILanguageDTO::getId() const {
    return m_id;
}
void OAILanguageDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILanguageDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAILanguageDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILanguageDTO::getIso6391() const {
    return m_iso6391;
}
void OAILanguageDTO::setIso6391(const QString &iso6391) {
    m_iso6391 = iso6391;
    m_iso6391_isSet = true;
}

bool OAILanguageDTO::is_iso6391_Set() const{
    return m_iso6391_isSet;
}

bool OAILanguageDTO::is_iso6391_Valid() const{
    return m_iso6391_isValid;
}

QString OAILanguageDTO::getIso6392() const {
    return m_iso6392;
}
void OAILanguageDTO::setIso6392(const QString &iso6392) {
    m_iso6392 = iso6392;
    m_iso6392_isSet = true;
}

bool OAILanguageDTO::is_iso6392_Set() const{
    return m_iso6392_isSet;
}

bool OAILanguageDTO::is_iso6392_Valid() const{
    return m_iso6392_isValid;
}

QString OAILanguageDTO::getName() const {
    return m_name;
}
void OAILanguageDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILanguageDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAILanguageDTO::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILanguageDTO::isPreferred() const {
    return m_preferred;
}
void OAILanguageDTO::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAILanguageDTO::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAILanguageDTO::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QString OAILanguageDTO::getSymbol() const {
    return m_symbol;
}
void OAILanguageDTO::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAILanguageDTO::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAILanguageDTO::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAILanguageDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso6391_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso6392_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguageDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
