/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskDTO::OAITaskDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskDTO::OAITaskDTO() {
    this->initializeModel();
}

OAITaskDTO::~OAITaskDTO() {}

void OAITaskDTO::initializeModel() {

    m_client_task_po_number_isSet = false;
    m_client_task_po_number_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_finance_isSet = false;
    m_finance_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_number_isSet = false;
    m_id_number_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_language_combination_isSet = false;
    m_language_combination_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;
}

void OAITaskDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskDTO::fromJsonObject(QJsonObject json) {

    m_client_task_po_number_isValid = ::OpenAPI::fromJsonValue(m_client_task_po_number, json[QString("clientTaskPONumber")]);
    m_client_task_po_number_isSet = !json[QString("clientTaskPONumber")].isNull() && m_client_task_po_number_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_finance_isValid = ::OpenAPI::fromJsonValue(m_finance, json[QString("finance")]);
    m_finance_isSet = !json[QString("finance")].isNull() && m_finance_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_number_isValid = ::OpenAPI::fromJsonValue(m_id_number, json[QString("idNumber")]);
    m_id_number_isSet = !json[QString("idNumber")].isNull() && m_id_number_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_language_combination_isValid = ::OpenAPI::fromJsonValue(m_language_combination, json[QString("languageCombination")]);
    m_language_combination_isSet = !json[QString("languageCombination")].isNull() && m_language_combination_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quoteId")]);
    m_quote_id_isSet = !json[QString("quoteId")].isNull() && m_quote_id_isValid;
}

QString OAITaskDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_client_task_po_number_isSet) {
        obj.insert(QString("clientTaskPONumber"), ::OpenAPI::toJsonValue(m_client_task_po_number));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_finance.isSet()) {
        obj.insert(QString("finance"), ::OpenAPI::toJsonValue(m_finance));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_number_isSet) {
        obj.insert(QString("idNumber"), ::OpenAPI::toJsonValue(m_id_number));
    }
    if (m_instructions.isSet()) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_jobs.isSet()) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_language_combination.isSet()) {
        obj.insert(QString("languageCombination"), ::OpenAPI::toJsonValue(m_language_combination));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_people.isSet()) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quoteId"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    return obj;
}

QString OAITaskDTO::getClientTaskPoNumber() const {
    return m_client_task_po_number;
}
void OAITaskDTO::setClientTaskPoNumber(const QString &client_task_po_number) {
    m_client_task_po_number = client_task_po_number;
    m_client_task_po_number_isSet = true;
}

bool OAITaskDTO::is_client_task_po_number_Set() const{
    return m_client_task_po_number_isSet;
}

bool OAITaskDTO::is_client_task_po_number_Valid() const{
    return m_client_task_po_number_isValid;
}

QList<OAICustomFieldDTO> OAITaskDTO::getCustomFields() const {
    return m_custom_fields;
}
void OAITaskDTO::setCustomFields(const QList<OAICustomFieldDTO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAITaskDTO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAITaskDTO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

OAIProjectDatesDTO OAITaskDTO::getDates() const {
    return m_dates;
}
void OAITaskDTO::setDates(const OAIProjectDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAITaskDTO::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAITaskDTO::is_dates_Valid() const{
    return m_dates_isValid;
}

OAITaskFinanceDTO OAITaskDTO::getFinance() const {
    return m_finance;
}
void OAITaskDTO::setFinance(const OAITaskFinanceDTO &finance) {
    m_finance = finance;
    m_finance_isSet = true;
}

bool OAITaskDTO::is_finance_Set() const{
    return m_finance_isSet;
}

bool OAITaskDTO::is_finance_Valid() const{
    return m_finance_isValid;
}

qint64 OAITaskDTO::getId() const {
    return m_id;
}
void OAITaskDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITaskDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAITaskDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITaskDTO::getIdNumber() const {
    return m_id_number;
}
void OAITaskDTO::setIdNumber(const QString &id_number) {
    m_id_number = id_number;
    m_id_number_isSet = true;
}

bool OAITaskDTO::is_id_number_Set() const{
    return m_id_number_isSet;
}

bool OAITaskDTO::is_id_number_Valid() const{
    return m_id_number_isValid;
}

OAIInstructionsDTO OAITaskDTO::getInstructions() const {
    return m_instructions;
}
void OAITaskDTO::setInstructions(const OAIInstructionsDTO &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAITaskDTO::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAITaskDTO::is_instructions_Valid() const{
    return m_instructions_isValid;
}

OAITaskJobsDTO OAITaskDTO::getJobs() const {
    return m_jobs;
}
void OAITaskDTO::setJobs(const OAITaskJobsDTO &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAITaskDTO::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAITaskDTO::is_jobs_Valid() const{
    return m_jobs_isValid;
}

OAICommonLanguageCombinationDTO OAITaskDTO::getLanguageCombination() const {
    return m_language_combination;
}
void OAITaskDTO::setLanguageCombination(const OAICommonLanguageCombinationDTO &language_combination) {
    m_language_combination = language_combination;
    m_language_combination_isSet = true;
}

bool OAITaskDTO::is_language_combination_Set() const{
    return m_language_combination_isSet;
}

bool OAITaskDTO::is_language_combination_Valid() const{
    return m_language_combination_isValid;
}

QString OAITaskDTO::getName() const {
    return m_name;
}
void OAITaskDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskDTO::is_name_Valid() const{
    return m_name_isValid;
}

OAIClassicPeopleDTO OAITaskDTO::getPeople() const {
    return m_people;
}
void OAITaskDTO::setPeople(const OAIClassicPeopleDTO &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAITaskDTO::is_people_Set() const{
    return m_people_isSet;
}

bool OAITaskDTO::is_people_Valid() const{
    return m_people_isValid;
}

qint64 OAITaskDTO::getProjectId() const {
    return m_project_id;
}
void OAITaskDTO::setProjectId(const qint64 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITaskDTO::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITaskDTO::is_project_id_Valid() const{
    return m_project_id_isValid;
}

qint64 OAITaskDTO::getQuoteId() const {
    return m_quote_id;
}
void OAITaskDTO::setQuoteId(const qint64 &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAITaskDTO::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAITaskDTO::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

bool OAITaskDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_task_po_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_combination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
