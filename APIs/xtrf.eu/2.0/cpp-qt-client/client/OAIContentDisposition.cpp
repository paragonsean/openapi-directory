/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentDisposition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentDisposition::OAIContentDisposition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentDisposition::OAIContentDisposition() {
    this->initializeModel();
}

OAIContentDisposition::~OAIContentDisposition() {}

void OAIContentDisposition::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_modification_date_isSet = false;
    m_modification_date_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_read_date_isSet = false;
    m_read_date_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIContentDisposition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentDisposition::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_modification_date_isValid = ::OpenAPI::fromJsonValue(m_modification_date, json[QString("modificationDate")]);
    m_modification_date_isSet = !json[QString("modificationDate")].isNull() && m_modification_date_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_read_date_isValid = ::OpenAPI::fromJsonValue(m_read_date, json[QString("readDate")]);
    m_read_date_isSet = !json[QString("readDate")].isNull() && m_read_date_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIContentDisposition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentDisposition::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_modification_date_isSet) {
        obj.insert(QString("modificationDate"), ::OpenAPI::toJsonValue(m_modification_date));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_read_date_isSet) {
        obj.insert(QString("readDate"), ::OpenAPI::toJsonValue(m_read_date));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIContentDisposition::getCreationDate() const {
    return m_creation_date;
}
void OAIContentDisposition::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIContentDisposition::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIContentDisposition::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIContentDisposition::getFileName() const {
    return m_file_name;
}
void OAIContentDisposition::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIContentDisposition::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIContentDisposition::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QDateTime OAIContentDisposition::getModificationDate() const {
    return m_modification_date;
}
void OAIContentDisposition::setModificationDate(const QDateTime &modification_date) {
    m_modification_date = modification_date;
    m_modification_date_isSet = true;
}

bool OAIContentDisposition::is_modification_date_Set() const{
    return m_modification_date_isSet;
}

bool OAIContentDisposition::is_modification_date_Valid() const{
    return m_modification_date_isValid;
}

QMap<QString, QString> OAIContentDisposition::getParameters() const {
    return m_parameters;
}
void OAIContentDisposition::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIContentDisposition::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIContentDisposition::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QDateTime OAIContentDisposition::getReadDate() const {
    return m_read_date;
}
void OAIContentDisposition::setReadDate(const QDateTime &read_date) {
    m_read_date = read_date;
    m_read_date_isSet = true;
}

bool OAIContentDisposition::is_read_date_Set() const{
    return m_read_date_isSet;
}

bool OAIContentDisposition::is_read_date_Valid() const{
    return m_read_date_isValid;
}

qint64 OAIContentDisposition::getSize() const {
    return m_size;
}
void OAIContentDisposition::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIContentDisposition::is_size_Set() const{
    return m_size_isSet;
}

bool OAIContentDisposition::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIContentDisposition::getType() const {
    return m_type;
}
void OAIContentDisposition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContentDisposition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContentDisposition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIContentDisposition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentDisposition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
