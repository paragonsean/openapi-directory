/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExportRequestDTO.h"
#include "OAIImportRequestDTO.h"
#include "OAIImportResultDTO.h"
#include "OAIPreferredRequestDTO.h"
#include "OAIReportResultDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  report_id qint64 [required]
    */
    virtual void delete11(const qint64 &report_id);

    /**
    * @param[in]  report_id qint64 [required]
    */
    virtual void duplicate1(const qint64 &report_id);

    /**
    * @param[in]  oai_export_request_dto OAIExportRequestDTO [required]
    */
    virtual void exportToXML(const OAIExportRequestDTO &oai_export_request_dto);

    /**
    * @param[in]  report_id qint64 [required]
    */
    virtual void generateCSV(const qint64 &report_id);

    /**
    * @param[in]  report_id qint64 [required]
    */
    virtual void generatePrinterFriendly(const qint64 &report_id);

    /**
    * @param[in]  oai_import_request_dto OAIImportRequestDTO [required]
    */
    virtual void importFromXML(const OAIImportRequestDTO &oai_import_request_dto);

    /**
    * @param[in]  report_id qint64 [required]
    * @param[in]  oai_preferred_request_dto OAIPreferredRequestDTO [required]
    */
    virtual void setPreferred(const qint64 &report_id, const OAIPreferredRequestDTO &oai_preferred_request_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete11Callback(OAIHttpRequestWorker *worker);
    void duplicate1Callback(OAIHttpRequestWorker *worker);
    void exportToXMLCallback(OAIHttpRequestWorker *worker);
    void generateCSVCallback(OAIHttpRequestWorker *worker);
    void generatePrinterFriendlyCallback(OAIHttpRequestWorker *worker);
    void importFromXMLCallback(OAIHttpRequestWorker *worker);
    void setPreferredCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete11Signal();
    void duplicate1Signal();
    void exportToXMLSignal(OAIReportResultDTO summary);
    void generateCSVSignal(OAIReportResultDTO summary);
    void generatePrinterFriendlySignal(OAIReportResultDTO summary);
    void importFromXMLSignal(OAIImportResultDTO summary);
    void setPreferredSignal();


    void delete11SignalFull(OAIHttpRequestWorker *worker);
    void duplicate1SignalFull(OAIHttpRequestWorker *worker);
    void exportToXMLSignalFull(OAIHttpRequestWorker *worker, OAIReportResultDTO summary);
    void generateCSVSignalFull(OAIHttpRequestWorker *worker, OAIReportResultDTO summary);
    void generatePrinterFriendlySignalFull(OAIHttpRequestWorker *worker, OAIReportResultDTO summary);
    void importFromXMLSignalFull(OAIHttpRequestWorker *worker, OAIImportResultDTO summary);
    void setPreferredSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use delete11SignalError() instead")
    void delete11SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete11SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicate1SignalError() instead")
    void duplicate1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void duplicate1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportToXMLSignalError() instead")
    void exportToXMLSignalE(OAIReportResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportToXMLSignalError(OAIReportResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCSVSignalError() instead")
    void generateCSVSignalE(OAIReportResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCSVSignalError(OAIReportResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePrinterFriendlySignalError() instead")
    void generatePrinterFriendlySignalE(OAIReportResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePrinterFriendlySignalError(OAIReportResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importFromXMLSignalError() instead")
    void importFromXMLSignalE(OAIImportResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importFromXMLSignalError(OAIImportResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPreferredSignalError() instead")
    void setPreferredSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPreferredSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete11SignalErrorFull() instead")
    void delete11SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete11SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicate1SignalErrorFull() instead")
    void duplicate1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicate1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportToXMLSignalErrorFull() instead")
    void exportToXMLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportToXMLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateCSVSignalErrorFull() instead")
    void generateCSVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateCSVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePrinterFriendlySignalErrorFull() instead")
    void generatePrinterFriendlySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePrinterFriendlySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importFromXMLSignalErrorFull() instead")
    void importFromXMLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importFromXMLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPreferredSignalErrorFull() instead")
    void setPreferredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPreferredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
