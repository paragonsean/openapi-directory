/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderPersonDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderPersonDTO::OAIProviderPersonDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderPersonDTO::OAIProviderPersonDTO() {
    this->initializeModel();
}

OAIProviderPersonDTO::~OAIProviderPersonDTO() {}

void OAIProviderPersonDTO::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_mother_tongues_ids_isSet = false;
    m_mother_tongues_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_id_isSet = false;
    m_position_id_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;
}

void OAIProviderPersonDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderPersonDTO::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_mother_tongues_ids_isValid = ::OpenAPI::fromJsonValue(m_mother_tongues_ids, json[QString("motherTonguesIds")]);
    m_mother_tongues_ids_isSet = !json[QString("motherTonguesIds")].isNull() && m_mother_tongues_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_id_isValid = ::OpenAPI::fromJsonValue(m_position_id, json[QString("positionId")]);
    m_position_id_isSet = !json[QString("positionId")].isNull() && m_position_id_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;
}

QString OAIProviderPersonDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderPersonDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_mother_tongues_ids.size() > 0) {
        obj.insert(QString("motherTonguesIds"), ::OpenAPI::toJsonValue(m_mother_tongues_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_id_isSet) {
        obj.insert(QString("positionId"), ::OpenAPI::toJsonValue(m_position_id));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    return obj;
}

bool OAIProviderPersonDTO::isActive() const {
    return m_active;
}
void OAIProviderPersonDTO::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIProviderPersonDTO::is_active_Set() const{
    return m_active_isSet;
}

bool OAIProviderPersonDTO::is_active_Valid() const{
    return m_active_isValid;
}

OAIPersonContactDTO OAIProviderPersonDTO::getContact() const {
    return m_contact;
}
void OAIProviderPersonDTO::setContact(const OAIPersonContactDTO &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIProviderPersonDTO::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIProviderPersonDTO::is_contact_Valid() const{
    return m_contact_isValid;
}

QList<OAICustomFieldDTO> OAIProviderPersonDTO::getCustomFields() const {
    return m_custom_fields;
}
void OAIProviderPersonDTO::setCustomFields(const QList<OAICustomFieldDTO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProviderPersonDTO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProviderPersonDTO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIProviderPersonDTO::getGender() const {
    return m_gender;
}
void OAIProviderPersonDTO::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIProviderPersonDTO::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIProviderPersonDTO::is_gender_Valid() const{
    return m_gender_isValid;
}

qint64 OAIProviderPersonDTO::getId() const {
    return m_id;
}
void OAIProviderPersonDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProviderPersonDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProviderPersonDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProviderPersonDTO::getLastName() const {
    return m_last_name;
}
void OAIProviderPersonDTO::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIProviderPersonDTO::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIProviderPersonDTO::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QSet<qint64> OAIProviderPersonDTO::getMotherTonguesIds() const {
    return m_mother_tongues_ids;
}
void OAIProviderPersonDTO::setMotherTonguesIds(const QSet<qint64> &mother_tongues_ids) {
    m_mother_tongues_ids = mother_tongues_ids;
    m_mother_tongues_ids_isSet = true;
}

bool OAIProviderPersonDTO::is_mother_tongues_ids_Set() const{
    return m_mother_tongues_ids_isSet;
}

bool OAIProviderPersonDTO::is_mother_tongues_ids_Valid() const{
    return m_mother_tongues_ids_isValid;
}

QString OAIProviderPersonDTO::getName() const {
    return m_name;
}
void OAIProviderPersonDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProviderPersonDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProviderPersonDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIProviderPersonDTO::getPositionId() const {
    return m_position_id;
}
void OAIProviderPersonDTO::setPositionId(const qint64 &position_id) {
    m_position_id = position_id;
    m_position_id_isSet = true;
}

bool OAIProviderPersonDTO::is_position_id_Set() const{
    return m_position_id_isSet;
}

bool OAIProviderPersonDTO::is_position_id_Valid() const{
    return m_position_id_isValid;
}

qint64 OAIProviderPersonDTO::getProviderId() const {
    return m_provider_id;
}
void OAIProviderPersonDTO::setProviderId(const qint64 &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIProviderPersonDTO::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIProviderPersonDTO::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAIProviderPersonDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mother_tongues_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderPersonDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
