/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectFileDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectFileDto::OAIProjectFileDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectFileDto::OAIProjectFileDto() {
    this->initializeModel();
}

OAIProjectFileDto::~OAIProjectFileDto() {}

void OAIProjectFileDto::initializeModel() {

    m_added_by_isSet = false;
    m_added_by_isValid = false;

    m_added_in_job_isSet = false;
    m_added_in_job_isValid = false;

    m_added_in_last_step_isSet = false;
    m_added_in_last_step_isValid = false;

    m_added_in_step_isSet = false;
    m_added_in_step_isValid = false;

    m_category_key_isSet = false;
    m_category_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_accepted_isSet = false;
    m_is_accepted_isValid = false;

    m_is_link_isSet = false;
    m_is_link_isValid = false;

    m_is_remote_isSet = false;
    m_is_remote_isValid = false;

    m_language_relation_isSet = false;
    m_language_relation_isValid = false;

    m_last_modified_on_isSet = false;
    m_last_modified_on_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_remote_cat_tool_references_isSet = false;
    m_remote_cat_tool_references_isValid = false;

    m_shared_with_jobs_isSet = false;
    m_shared_with_jobs_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProjectFileDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectFileDto::fromJsonObject(QJsonObject json) {

    m_added_by_isValid = ::OpenAPI::fromJsonValue(m_added_by, json[QString("addedBy")]);
    m_added_by_isSet = !json[QString("addedBy")].isNull() && m_added_by_isValid;

    m_added_in_job_isValid = ::OpenAPI::fromJsonValue(m_added_in_job, json[QString("addedInJob")]);
    m_added_in_job_isSet = !json[QString("addedInJob")].isNull() && m_added_in_job_isValid;

    m_added_in_last_step_isValid = ::OpenAPI::fromJsonValue(m_added_in_last_step, json[QString("addedInLastStep")]);
    m_added_in_last_step_isSet = !json[QString("addedInLastStep")].isNull() && m_added_in_last_step_isValid;

    m_added_in_step_isValid = ::OpenAPI::fromJsonValue(m_added_in_step, json[QString("addedInStep")]);
    m_added_in_step_isSet = !json[QString("addedInStep")].isNull() && m_added_in_step_isValid;

    m_category_key_isValid = ::OpenAPI::fromJsonValue(m_category_key, json[QString("categoryKey")]);
    m_category_key_isSet = !json[QString("categoryKey")].isNull() && m_category_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_accepted_isValid = ::OpenAPI::fromJsonValue(m_is_accepted, json[QString("isAccepted")]);
    m_is_accepted_isSet = !json[QString("isAccepted")].isNull() && m_is_accepted_isValid;

    m_is_link_isValid = ::OpenAPI::fromJsonValue(m_is_link, json[QString("isLink")]);
    m_is_link_isSet = !json[QString("isLink")].isNull() && m_is_link_isValid;

    m_is_remote_isValid = ::OpenAPI::fromJsonValue(m_is_remote, json[QString("isRemote")]);
    m_is_remote_isSet = !json[QString("isRemote")].isNull() && m_is_remote_isValid;

    m_language_relation_isValid = ::OpenAPI::fromJsonValue(m_language_relation, json[QString("languageRelation")]);
    m_language_relation_isSet = !json[QString("languageRelation")].isNull() && m_language_relation_isValid;

    m_last_modified_on_isValid = ::OpenAPI::fromJsonValue(m_last_modified_on, json[QString("lastModifiedOn")]);
    m_last_modified_on_isSet = !json[QString("lastModifiedOn")].isNull() && m_last_modified_on_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_remote_cat_tool_references_isValid = ::OpenAPI::fromJsonValue(m_remote_cat_tool_references, json[QString("remoteCATToolReferences")]);
    m_remote_cat_tool_references_isSet = !json[QString("remoteCATToolReferences")].isNull() && m_remote_cat_tool_references_isValid;

    m_shared_with_jobs_isValid = ::OpenAPI::fromJsonValue(m_shared_with_jobs, json[QString("sharedWithJobs")]);
    m_shared_with_jobs_isSet = !json[QString("sharedWithJobs")].isNull() && m_shared_with_jobs_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProjectFileDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectFileDto::asJsonObject() const {
    QJsonObject obj;
    if (m_added_by.isSet()) {
        obj.insert(QString("addedBy"), ::OpenAPI::toJsonValue(m_added_by));
    }
    if (m_added_in_job_isSet) {
        obj.insert(QString("addedInJob"), ::OpenAPI::toJsonValue(m_added_in_job));
    }
    if (m_added_in_last_step_isSet) {
        obj.insert(QString("addedInLastStep"), ::OpenAPI::toJsonValue(m_added_in_last_step));
    }
    if (m_added_in_step_isSet) {
        obj.insert(QString("addedInStep"), ::OpenAPI::toJsonValue(m_added_in_step));
    }
    if (m_category_key_isSet) {
        obj.insert(QString("categoryKey"), ::OpenAPI::toJsonValue(m_category_key));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_accepted_isSet) {
        obj.insert(QString("isAccepted"), ::OpenAPI::toJsonValue(m_is_accepted));
    }
    if (m_is_link_isSet) {
        obj.insert(QString("isLink"), ::OpenAPI::toJsonValue(m_is_link));
    }
    if (m_is_remote_isSet) {
        obj.insert(QString("isRemote"), ::OpenAPI::toJsonValue(m_is_remote));
    }
    if (m_language_relation.isSet()) {
        obj.insert(QString("languageRelation"), ::OpenAPI::toJsonValue(m_language_relation));
    }
    if (m_last_modified_on_isSet) {
        obj.insert(QString("lastModifiedOn"), ::OpenAPI::toJsonValue(m_last_modified_on));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_remote_cat_tool_references.isSet()) {
        obj.insert(QString("remoteCATToolReferences"), ::OpenAPI::toJsonValue(m_remote_cat_tool_references));
    }
    if (m_shared_with_jobs.size() > 0) {
        obj.insert(QString("sharedWithJobs"), ::OpenAPI::toJsonValue(m_shared_with_jobs));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIProjectFileAddedByDto OAIProjectFileDto::getAddedBy() const {
    return m_added_by;
}
void OAIProjectFileDto::setAddedBy(const OAIProjectFileAddedByDto &added_by) {
    m_added_by = added_by;
    m_added_by_isSet = true;
}

bool OAIProjectFileDto::is_added_by_Set() const{
    return m_added_by_isSet;
}

bool OAIProjectFileDto::is_added_by_Valid() const{
    return m_added_by_isValid;
}

QString OAIProjectFileDto::getAddedInJob() const {
    return m_added_in_job;
}
void OAIProjectFileDto::setAddedInJob(const QString &added_in_job) {
    m_added_in_job = added_in_job;
    m_added_in_job_isSet = true;
}

bool OAIProjectFileDto::is_added_in_job_Set() const{
    return m_added_in_job_isSet;
}

bool OAIProjectFileDto::is_added_in_job_Valid() const{
    return m_added_in_job_isValid;
}

bool OAIProjectFileDto::isAddedInLastStep() const {
    return m_added_in_last_step;
}
void OAIProjectFileDto::setAddedInLastStep(const bool &added_in_last_step) {
    m_added_in_last_step = added_in_last_step;
    m_added_in_last_step_isSet = true;
}

bool OAIProjectFileDto::is_added_in_last_step_Set() const{
    return m_added_in_last_step_isSet;
}

bool OAIProjectFileDto::is_added_in_last_step_Valid() const{
    return m_added_in_last_step_isValid;
}

qint64 OAIProjectFileDto::getAddedInStep() const {
    return m_added_in_step;
}
void OAIProjectFileDto::setAddedInStep(const qint64 &added_in_step) {
    m_added_in_step = added_in_step;
    m_added_in_step_isSet = true;
}

bool OAIProjectFileDto::is_added_in_step_Set() const{
    return m_added_in_step_isSet;
}

bool OAIProjectFileDto::is_added_in_step_Valid() const{
    return m_added_in_step_isValid;
}

QString OAIProjectFileDto::getCategoryKey() const {
    return m_category_key;
}
void OAIProjectFileDto::setCategoryKey(const QString &category_key) {
    m_category_key = category_key;
    m_category_key_isSet = true;
}

bool OAIProjectFileDto::is_category_key_Set() const{
    return m_category_key_isSet;
}

bool OAIProjectFileDto::is_category_key_Valid() const{
    return m_category_key_isValid;
}

QString OAIProjectFileDto::getId() const {
    return m_id;
}
void OAIProjectFileDto::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectFileDto::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectFileDto::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIProjectFileDto::isIsAccepted() const {
    return m_is_accepted;
}
void OAIProjectFileDto::setIsAccepted(const bool &is_accepted) {
    m_is_accepted = is_accepted;
    m_is_accepted_isSet = true;
}

bool OAIProjectFileDto::is_is_accepted_Set() const{
    return m_is_accepted_isSet;
}

bool OAIProjectFileDto::is_is_accepted_Valid() const{
    return m_is_accepted_isValid;
}

bool OAIProjectFileDto::isIsLink() const {
    return m_is_link;
}
void OAIProjectFileDto::setIsLink(const bool &is_link) {
    m_is_link = is_link;
    m_is_link_isSet = true;
}

bool OAIProjectFileDto::is_is_link_Set() const{
    return m_is_link_isSet;
}

bool OAIProjectFileDto::is_is_link_Valid() const{
    return m_is_link_isValid;
}

bool OAIProjectFileDto::isIsRemote() const {
    return m_is_remote;
}
void OAIProjectFileDto::setIsRemote(const bool &is_remote) {
    m_is_remote = is_remote;
    m_is_remote_isSet = true;
}

bool OAIProjectFileDto::is_is_remote_Set() const{
    return m_is_remote_isSet;
}

bool OAIProjectFileDto::is_is_remote_Valid() const{
    return m_is_remote_isValid;
}

OAILanguageRelationDto OAIProjectFileDto::getLanguageRelation() const {
    return m_language_relation;
}
void OAIProjectFileDto::setLanguageRelation(const OAILanguageRelationDto &language_relation) {
    m_language_relation = language_relation;
    m_language_relation_isSet = true;
}

bool OAIProjectFileDto::is_language_relation_Set() const{
    return m_language_relation_isSet;
}

bool OAIProjectFileDto::is_language_relation_Valid() const{
    return m_language_relation_isValid;
}

qint64 OAIProjectFileDto::getLastModifiedOn() const {
    return m_last_modified_on;
}
void OAIProjectFileDto::setLastModifiedOn(const qint64 &last_modified_on) {
    m_last_modified_on = last_modified_on;
    m_last_modified_on_isSet = true;
}

bool OAIProjectFileDto::is_last_modified_on_Set() const{
    return m_last_modified_on_isSet;
}

bool OAIProjectFileDto::is_last_modified_on_Valid() const{
    return m_last_modified_on_isValid;
}

QString OAIProjectFileDto::getName() const {
    return m_name;
}
void OAIProjectFileDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectFileDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectFileDto::is_name_Valid() const{
    return m_name_isValid;
}

OAIRemoteCATToolReferencesDto OAIProjectFileDto::getRemoteCatToolReferences() const {
    return m_remote_cat_tool_references;
}
void OAIProjectFileDto::setRemoteCatToolReferences(const OAIRemoteCATToolReferencesDto &remote_cat_tool_references) {
    m_remote_cat_tool_references = remote_cat_tool_references;
    m_remote_cat_tool_references_isSet = true;
}

bool OAIProjectFileDto::is_remote_cat_tool_references_Set() const{
    return m_remote_cat_tool_references_isSet;
}

bool OAIProjectFileDto::is_remote_cat_tool_references_Valid() const{
    return m_remote_cat_tool_references_isValid;
}

QSet<QString> OAIProjectFileDto::getSharedWithJobs() const {
    return m_shared_with_jobs;
}
void OAIProjectFileDto::setSharedWithJobs(const QSet<QString> &shared_with_jobs) {
    m_shared_with_jobs = shared_with_jobs;
    m_shared_with_jobs_isSet = true;
}

bool OAIProjectFileDto::is_shared_with_jobs_Set() const{
    return m_shared_with_jobs_isSet;
}

bool OAIProjectFileDto::is_shared_with_jobs_Valid() const{
    return m_shared_with_jobs_isValid;
}

qint64 OAIProjectFileDto::getSize() const {
    return m_size;
}
void OAIProjectFileDto::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIProjectFileDto::is_size_Set() const{
    return m_size_isSet;
}

bool OAIProjectFileDto::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIProjectFileDto::getUrl() const {
    return m_url;
}
void OAIProjectFileDto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProjectFileDto::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProjectFileDto::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProjectFileDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_in_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_in_last_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_in_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_remote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_relation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_cat_tool_references.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_with_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectFileDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
