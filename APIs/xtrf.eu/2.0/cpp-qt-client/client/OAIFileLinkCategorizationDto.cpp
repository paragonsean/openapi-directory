/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileLinkCategorizationDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileLinkCategorizationDto::OAIFileLinkCategorizationDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileLinkCategorizationDto::OAIFileLinkCategorizationDto() {
    this->initializeModel();
}

OAIFileLinkCategorizationDto::~OAIFileLinkCategorizationDto() {}

void OAIFileLinkCategorizationDto::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_external_info_isSet = false;
    m_external_info_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_language_combination_ids_isSet = false;
    m_language_combination_ids_isValid = false;

    m_language_ids_isSet = false;
    m_language_ids_isValid = false;

    m_to_be_generated_isSet = false;
    m_to_be_generated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFileLinkCategorizationDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileLinkCategorizationDto::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_external_info_isValid = ::OpenAPI::fromJsonValue(m_external_info, json[QString("externalInfo")]);
    m_external_info_isSet = !json[QString("externalInfo")].isNull() && m_external_info_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_language_combination_ids_isValid = ::OpenAPI::fromJsonValue(m_language_combination_ids, json[QString("languageCombinationIds")]);
    m_language_combination_ids_isSet = !json[QString("languageCombinationIds")].isNull() && m_language_combination_ids_isValid;

    m_language_ids_isValid = ::OpenAPI::fromJsonValue(m_language_ids, json[QString("languageIds")]);
    m_language_ids_isSet = !json[QString("languageIds")].isNull() && m_language_ids_isValid;

    m_to_be_generated_isValid = ::OpenAPI::fromJsonValue(m_to_be_generated, json[QString("toBeGenerated")]);
    m_to_be_generated_isSet = !json[QString("toBeGenerated")].isNull() && m_to_be_generated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFileLinkCategorizationDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileLinkCategorizationDto::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_external_info.size() > 0) {
        obj.insert(QString("externalInfo"), ::OpenAPI::toJsonValue(m_external_info));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_language_combination_ids.size() > 0) {
        obj.insert(QString("languageCombinationIds"), ::OpenAPI::toJsonValue(m_language_combination_ids));
    }
    if (m_language_ids.size() > 0) {
        obj.insert(QString("languageIds"), ::OpenAPI::toJsonValue(m_language_ids));
    }
    if (m_to_be_generated_isSet) {
        obj.insert(QString("toBeGenerated"), ::OpenAPI::toJsonValue(m_to_be_generated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIFileLinkCategorizationDto::getCategory() const {
    return m_category;
}
void OAIFileLinkCategorizationDto::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFileLinkCategorizationDto::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFileLinkCategorizationDto::is_category_Valid() const{
    return m_category_isValid;
}

QMap<QString, QString> OAIFileLinkCategorizationDto::getExternalInfo() const {
    return m_external_info;
}
void OAIFileLinkCategorizationDto::setExternalInfo(const QMap<QString, QString> &external_info) {
    m_external_info = external_info;
    m_external_info_isSet = true;
}

bool OAIFileLinkCategorizationDto::is_external_info_Set() const{
    return m_external_info_isSet;
}

bool OAIFileLinkCategorizationDto::is_external_info_Valid() const{
    return m_external_info_isValid;
}

QString OAIFileLinkCategorizationDto::getFilename() const {
    return m_filename;
}
void OAIFileLinkCategorizationDto::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIFileLinkCategorizationDto::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIFileLinkCategorizationDto::is_filename_Valid() const{
    return m_filename_isValid;
}

QList<OAILanguageCombinationDto> OAIFileLinkCategorizationDto::getLanguageCombinationIds() const {
    return m_language_combination_ids;
}
void OAIFileLinkCategorizationDto::setLanguageCombinationIds(const QList<OAILanguageCombinationDto> &language_combination_ids) {
    m_language_combination_ids = language_combination_ids;
    m_language_combination_ids_isSet = true;
}

bool OAIFileLinkCategorizationDto::is_language_combination_ids_Set() const{
    return m_language_combination_ids_isSet;
}

bool OAIFileLinkCategorizationDto::is_language_combination_ids_Valid() const{
    return m_language_combination_ids_isValid;
}

QList<qint64> OAIFileLinkCategorizationDto::getLanguageIds() const {
    return m_language_ids;
}
void OAIFileLinkCategorizationDto::setLanguageIds(const QList<qint64> &language_ids) {
    m_language_ids = language_ids;
    m_language_ids_isSet = true;
}

bool OAIFileLinkCategorizationDto::is_language_ids_Set() const{
    return m_language_ids_isSet;
}

bool OAIFileLinkCategorizationDto::is_language_ids_Valid() const{
    return m_language_ids_isValid;
}

bool OAIFileLinkCategorizationDto::isToBeGenerated() const {
    return m_to_be_generated;
}
void OAIFileLinkCategorizationDto::setToBeGenerated(const bool &to_be_generated) {
    m_to_be_generated = to_be_generated;
    m_to_be_generated_isSet = true;
}

bool OAIFileLinkCategorizationDto::is_to_be_generated_Set() const{
    return m_to_be_generated_isSet;
}

bool OAIFileLinkCategorizationDto::is_to_be_generated_Valid() const{
    return m_to_be_generated_isValid;
}

QString OAIFileLinkCategorizationDto::getUrl() const {
    return m_url;
}
void OAIFileLinkCategorizationDto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFileLinkCategorizationDto::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFileLinkCategorizationDto::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFileLinkCategorizationDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_combination_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_be_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileLinkCategorizationDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
