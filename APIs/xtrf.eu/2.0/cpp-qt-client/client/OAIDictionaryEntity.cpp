/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDictionaryEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDictionaryEntity::OAIDictionaryEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDictionaryEntity::OAIDictionaryEntity() {
    this->initializeModel();
}

OAIDictionaryEntity::~OAIDictionaryEntity() {}

void OAIDictionaryEntity::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_and_clear_events_queue_isSet = false;
    m_and_clear_events_queue_isValid = false;

    m_audit_display_name_isSet = false;
    m_audit_display_name_isValid = false;

    m_audit_path_isSet = false;
    m_audit_path_isValid = false;

    m_class_name_key_isSet = false;
    m_class_name_key_isValid = false;

    m_class_simple_name_isSet = false;
    m_class_simple_name_isValid = false;

    m_compound_id_isSet = false;
    m_compound_id_isValid = false;

    m_default_entity_isSet = false;
    m_default_entity_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_marked_as_not_supposed_to_be_persisted_isSet = false;
    m_entity_marked_as_not_supposed_to_be_persisted_isValid = false;

    m_events_queue_ready_to_be_dispatched_isSet = false;
    m_events_queue_ready_to_be_dispatched_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_internal_description_isSet = false;
    m_internal_description_isValid = false;

    m_last_modification_date_isSet = false;
    m_last_modification_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_packed_compound_id_isSet = false;
    m_packed_compound_id_isValid = false;

    m_prefered_entity_isSet = false;
    m_prefered_entity_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDictionaryEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDictionaryEntity::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_and_clear_events_queue_isValid = ::OpenAPI::fromJsonValue(m_and_clear_events_queue, json[QString("andClearEventsQueue")]);
    m_and_clear_events_queue_isSet = !json[QString("andClearEventsQueue")].isNull() && m_and_clear_events_queue_isValid;

    m_audit_display_name_isValid = ::OpenAPI::fromJsonValue(m_audit_display_name, json[QString("auditDisplayName")]);
    m_audit_display_name_isSet = !json[QString("auditDisplayName")].isNull() && m_audit_display_name_isValid;

    m_audit_path_isValid = ::OpenAPI::fromJsonValue(m_audit_path, json[QString("auditPath")]);
    m_audit_path_isSet = !json[QString("auditPath")].isNull() && m_audit_path_isValid;

    m_class_name_key_isValid = ::OpenAPI::fromJsonValue(m_class_name_key, json[QString("classNameKey")]);
    m_class_name_key_isSet = !json[QString("classNameKey")].isNull() && m_class_name_key_isValid;

    m_class_simple_name_isValid = ::OpenAPI::fromJsonValue(m_class_simple_name, json[QString("classSimpleName")]);
    m_class_simple_name_isSet = !json[QString("classSimpleName")].isNull() && m_class_simple_name_isValid;

    m_compound_id_isValid = ::OpenAPI::fromJsonValue(m_compound_id, json[QString("compoundId")]);
    m_compound_id_isSet = !json[QString("compoundId")].isNull() && m_compound_id_isValid;

    m_default_entity_isValid = ::OpenAPI::fromJsonValue(m_default_entity, json[QString("defaultEntity")]);
    m_default_entity_isSet = !json[QString("defaultEntity")].isNull() && m_default_entity_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_marked_as_not_supposed_to_be_persisted_isValid = ::OpenAPI::fromJsonValue(m_entity_marked_as_not_supposed_to_be_persisted, json[QString("entityMarkedAsNotSupposedToBePersisted")]);
    m_entity_marked_as_not_supposed_to_be_persisted_isSet = !json[QString("entityMarkedAsNotSupposedToBePersisted")].isNull() && m_entity_marked_as_not_supposed_to_be_persisted_isValid;

    m_events_queue_ready_to_be_dispatched_isValid = ::OpenAPI::fromJsonValue(m_events_queue_ready_to_be_dispatched, json[QString("eventsQueueReadyToBeDispatched")]);
    m_events_queue_ready_to_be_dispatched_isSet = !json[QString("eventsQueueReadyToBeDispatched")].isNull() && m_events_queue_ready_to_be_dispatched_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_internal_description_isValid = ::OpenAPI::fromJsonValue(m_internal_description, json[QString("internalDescription")]);
    m_internal_description_isSet = !json[QString("internalDescription")].isNull() && m_internal_description_isValid;

    m_last_modification_date_isValid = ::OpenAPI::fromJsonValue(m_last_modification_date, json[QString("lastModificationDate")]);
    m_last_modification_date_isSet = !json[QString("lastModificationDate")].isNull() && m_last_modification_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_packed_compound_id_isValid = ::OpenAPI::fromJsonValue(m_packed_compound_id, json[QString("packedCompoundId")]);
    m_packed_compound_id_isSet = !json[QString("packedCompoundId")].isNull() && m_packed_compound_id_isValid;

    m_prefered_entity_isValid = ::OpenAPI::fromJsonValue(m_prefered_entity, json[QString("preferedEntity")]);
    m_prefered_entity_isSet = !json[QString("preferedEntity")].isNull() && m_prefered_entity_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDictionaryEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDictionaryEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_and_clear_events_queue.isSet()) {
        obj.insert(QString("andClearEventsQueue"), ::OpenAPI::toJsonValue(m_and_clear_events_queue));
    }
    if (m_audit_display_name_isSet) {
        obj.insert(QString("auditDisplayName"), ::OpenAPI::toJsonValue(m_audit_display_name));
    }
    if (m_audit_path_isSet) {
        obj.insert(QString("auditPath"), ::OpenAPI::toJsonValue(m_audit_path));
    }
    if (m_class_name_key_isSet) {
        obj.insert(QString("classNameKey"), ::OpenAPI::toJsonValue(m_class_name_key));
    }
    if (m_class_simple_name_isSet) {
        obj.insert(QString("classSimpleName"), ::OpenAPI::toJsonValue(m_class_simple_name));
    }
    if (m_compound_id_isSet) {
        obj.insert(QString("compoundId"), ::OpenAPI::toJsonValue(m_compound_id));
    }
    if (m_default_entity_isSet) {
        obj.insert(QString("defaultEntity"), ::OpenAPI::toJsonValue(m_default_entity));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_marked_as_not_supposed_to_be_persisted_isSet) {
        obj.insert(QString("entityMarkedAsNotSupposedToBePersisted"), ::OpenAPI::toJsonValue(m_entity_marked_as_not_supposed_to_be_persisted));
    }
    if (m_events_queue_ready_to_be_dispatched_isSet) {
        obj.insert(QString("eventsQueueReadyToBeDispatched"), ::OpenAPI::toJsonValue(m_events_queue_ready_to_be_dispatched));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier.isSet()) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_internal_description_isSet) {
        obj.insert(QString("internalDescription"), ::OpenAPI::toJsonValue(m_internal_description));
    }
    if (m_last_modification_date_isSet) {
        obj.insert(QString("lastModificationDate"), ::OpenAPI::toJsonValue(m_last_modification_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_packed_compound_id_isSet) {
        obj.insert(QString("packedCompoundId"), ::OpenAPI::toJsonValue(m_packed_compound_id));
    }
    if (m_prefered_entity_isSet) {
        obj.insert(QString("preferedEntity"), ::OpenAPI::toJsonValue(m_prefered_entity));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIDictionaryEntity::isActive() const {
    return m_active;
}
void OAIDictionaryEntity::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIDictionaryEntity::is_active_Set() const{
    return m_active_isSet;
}

bool OAIDictionaryEntity::is_active_Valid() const{
    return m_active_isValid;
}

OAIEventsQueue OAIDictionaryEntity::getAndClearEventsQueue() const {
    return m_and_clear_events_queue;
}
void OAIDictionaryEntity::setAndClearEventsQueue(const OAIEventsQueue &and_clear_events_queue) {
    m_and_clear_events_queue = and_clear_events_queue;
    m_and_clear_events_queue_isSet = true;
}

bool OAIDictionaryEntity::is_and_clear_events_queue_Set() const{
    return m_and_clear_events_queue_isSet;
}

bool OAIDictionaryEntity::is_and_clear_events_queue_Valid() const{
    return m_and_clear_events_queue_isValid;
}

QString OAIDictionaryEntity::getAuditDisplayName() const {
    return m_audit_display_name;
}
void OAIDictionaryEntity::setAuditDisplayName(const QString &audit_display_name) {
    m_audit_display_name = audit_display_name;
    m_audit_display_name_isSet = true;
}

bool OAIDictionaryEntity::is_audit_display_name_Set() const{
    return m_audit_display_name_isSet;
}

bool OAIDictionaryEntity::is_audit_display_name_Valid() const{
    return m_audit_display_name_isValid;
}

QString OAIDictionaryEntity::getAuditPath() const {
    return m_audit_path;
}
void OAIDictionaryEntity::setAuditPath(const QString &audit_path) {
    m_audit_path = audit_path;
    m_audit_path_isSet = true;
}

bool OAIDictionaryEntity::is_audit_path_Set() const{
    return m_audit_path_isSet;
}

bool OAIDictionaryEntity::is_audit_path_Valid() const{
    return m_audit_path_isValid;
}

QString OAIDictionaryEntity::getClassNameKey() const {
    return m_class_name_key;
}
void OAIDictionaryEntity::setClassNameKey(const QString &class_name_key) {
    m_class_name_key = class_name_key;
    m_class_name_key_isSet = true;
}

bool OAIDictionaryEntity::is_class_name_key_Set() const{
    return m_class_name_key_isSet;
}

bool OAIDictionaryEntity::is_class_name_key_Valid() const{
    return m_class_name_key_isValid;
}

QString OAIDictionaryEntity::getClassSimpleName() const {
    return m_class_simple_name;
}
void OAIDictionaryEntity::setClassSimpleName(const QString &class_simple_name) {
    m_class_simple_name = class_simple_name;
    m_class_simple_name_isSet = true;
}

bool OAIDictionaryEntity::is_class_simple_name_Set() const{
    return m_class_simple_name_isSet;
}

bool OAIDictionaryEntity::is_class_simple_name_Valid() const{
    return m_class_simple_name_isValid;
}

QString OAIDictionaryEntity::getCompoundId() const {
    return m_compound_id;
}
void OAIDictionaryEntity::setCompoundId(const QString &compound_id) {
    m_compound_id = compound_id;
    m_compound_id_isSet = true;
}

bool OAIDictionaryEntity::is_compound_id_Set() const{
    return m_compound_id_isSet;
}

bool OAIDictionaryEntity::is_compound_id_Valid() const{
    return m_compound_id_isValid;
}

bool OAIDictionaryEntity::isDefaultEntity() const {
    return m_default_entity;
}
void OAIDictionaryEntity::setDefaultEntity(const bool &default_entity) {
    m_default_entity = default_entity;
    m_default_entity_isSet = true;
}

bool OAIDictionaryEntity::is_default_entity_Set() const{
    return m_default_entity_isSet;
}

bool OAIDictionaryEntity::is_default_entity_Valid() const{
    return m_default_entity_isValid;
}

QString OAIDictionaryEntity::getDisplayName() const {
    return m_display_name;
}
void OAIDictionaryEntity::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDictionaryEntity::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDictionaryEntity::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIDictionaryEntity::isEntityMarkedAsNotSupposedToBePersisted() const {
    return m_entity_marked_as_not_supposed_to_be_persisted;
}
void OAIDictionaryEntity::setEntityMarkedAsNotSupposedToBePersisted(const bool &entity_marked_as_not_supposed_to_be_persisted) {
    m_entity_marked_as_not_supposed_to_be_persisted = entity_marked_as_not_supposed_to_be_persisted;
    m_entity_marked_as_not_supposed_to_be_persisted_isSet = true;
}

bool OAIDictionaryEntity::is_entity_marked_as_not_supposed_to_be_persisted_Set() const{
    return m_entity_marked_as_not_supposed_to_be_persisted_isSet;
}

bool OAIDictionaryEntity::is_entity_marked_as_not_supposed_to_be_persisted_Valid() const{
    return m_entity_marked_as_not_supposed_to_be_persisted_isValid;
}

bool OAIDictionaryEntity::isEventsQueueReadyToBeDispatched() const {
    return m_events_queue_ready_to_be_dispatched;
}
void OAIDictionaryEntity::setEventsQueueReadyToBeDispatched(const bool &events_queue_ready_to_be_dispatched) {
    m_events_queue_ready_to_be_dispatched = events_queue_ready_to_be_dispatched;
    m_events_queue_ready_to_be_dispatched_isSet = true;
}

bool OAIDictionaryEntity::is_events_queue_ready_to_be_dispatched_Set() const{
    return m_events_queue_ready_to_be_dispatched_isSet;
}

bool OAIDictionaryEntity::is_events_queue_ready_to_be_dispatched_Valid() const{
    return m_events_queue_ready_to_be_dispatched_isValid;
}

qint64 OAIDictionaryEntity::getId() const {
    return m_id;
}
void OAIDictionaryEntity::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDictionaryEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDictionaryEntity::is_id_Valid() const{
    return m_id_isValid;
}

OAIIdentifier OAIDictionaryEntity::getIdentifier() const {
    return m_identifier;
}
void OAIDictionaryEntity::setIdentifier(const OAIIdentifier &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIDictionaryEntity::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIDictionaryEntity::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIDictionaryEntity::getInternalDescription() const {
    return m_internal_description;
}
void OAIDictionaryEntity::setInternalDescription(const QString &internal_description) {
    m_internal_description = internal_description;
    m_internal_description_isSet = true;
}

bool OAIDictionaryEntity::is_internal_description_Set() const{
    return m_internal_description_isSet;
}

bool OAIDictionaryEntity::is_internal_description_Valid() const{
    return m_internal_description_isValid;
}

QDateTime OAIDictionaryEntity::getLastModificationDate() const {
    return m_last_modification_date;
}
void OAIDictionaryEntity::setLastModificationDate(const QDateTime &last_modification_date) {
    m_last_modification_date = last_modification_date;
    m_last_modification_date_isSet = true;
}

bool OAIDictionaryEntity::is_last_modification_date_Set() const{
    return m_last_modification_date_isSet;
}

bool OAIDictionaryEntity::is_last_modification_date_Valid() const{
    return m_last_modification_date_isValid;
}

QString OAIDictionaryEntity::getName() const {
    return m_name;
}
void OAIDictionaryEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDictionaryEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDictionaryEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDictionaryEntity::getPackedCompoundId() const {
    return m_packed_compound_id;
}
void OAIDictionaryEntity::setPackedCompoundId(const QString &packed_compound_id) {
    m_packed_compound_id = packed_compound_id;
    m_packed_compound_id_isSet = true;
}

bool OAIDictionaryEntity::is_packed_compound_id_Set() const{
    return m_packed_compound_id_isSet;
}

bool OAIDictionaryEntity::is_packed_compound_id_Valid() const{
    return m_packed_compound_id_isValid;
}

bool OAIDictionaryEntity::isPreferedEntity() const {
    return m_prefered_entity;
}
void OAIDictionaryEntity::setPreferedEntity(const bool &prefered_entity) {
    m_prefered_entity = prefered_entity;
    m_prefered_entity_isSet = true;
}

bool OAIDictionaryEntity::is_prefered_entity_Set() const{
    return m_prefered_entity_isSet;
}

bool OAIDictionaryEntity::is_prefered_entity_Valid() const{
    return m_prefered_entity_isValid;
}

bool OAIDictionaryEntity::isPreferred() const {
    return m_preferred;
}
void OAIDictionaryEntity::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIDictionaryEntity::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIDictionaryEntity::is_preferred_Valid() const{
    return m_preferred_isValid;
}

qint32 OAIDictionaryEntity::getVersion() const {
    return m_version;
}
void OAIDictionaryEntity::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDictionaryEntity::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDictionaryEntity::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDictionaryEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_and_clear_events_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_name_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_simple_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compound_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_marked_as_not_supposed_to_be_persisted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_queue_ready_to_be_dispatched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packed_compound_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefered_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDictionaryEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_prefered_entity_isValid && true;
}

} // namespace OpenAPI
