/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDTOv2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDTOv2::OAIProjectDTOv2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDTOv2::OAIProjectDTOv2() {
    this->initializeModel();
}

OAIProjectDTOv2::~OAIProjectDTOv2() {}

void OAIProjectDTOv2::initializeModel() {

    m_budget_code_isSet = false;
    m_budget_code_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_client_deadline_isSet = false;
    m_client_deadline_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_notes_isSet = false;
    m_client_notes_isValid = false;

    m_client_reference_number_isSet = false;
    m_client_reference_number_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instructions_for_all_jobs_isSet = false;
    m_instructions_for_all_jobs_isValid = false;

    m_internal_notes_isSet = false;
    m_internal_notes_isValid = false;

    m_is_classic_project_isSet = false;
    m_is_classic_project_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ordered_on_isSet = false;
    m_ordered_on_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_id_number_isSet = false;
    m_project_id_number_isValid = false;

    m_quote_id_number_isSet = false;
    m_quote_id_number_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIProjectDTOv2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDTOv2::fromJsonObject(QJsonObject json) {

    m_budget_code_isValid = ::OpenAPI::fromJsonValue(m_budget_code, json[QString("budgetCode")]);
    m_budget_code_isSet = !json[QString("budgetCode")].isNull() && m_budget_code_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_client_deadline_isValid = ::OpenAPI::fromJsonValue(m_client_deadline, json[QString("clientDeadline")]);
    m_client_deadline_isSet = !json[QString("clientDeadline")].isNull() && m_client_deadline_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_notes_isValid = ::OpenAPI::fromJsonValue(m_client_notes, json[QString("clientNotes")]);
    m_client_notes_isSet = !json[QString("clientNotes")].isNull() && m_client_notes_isValid;

    m_client_reference_number_isValid = ::OpenAPI::fromJsonValue(m_client_reference_number, json[QString("clientReferenceNumber")]);
    m_client_reference_number_isSet = !json[QString("clientReferenceNumber")].isNull() && m_client_reference_number_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instructions_for_all_jobs_isValid = ::OpenAPI::fromJsonValue(m_instructions_for_all_jobs, json[QString("instructionsForAllJobs")]);
    m_instructions_for_all_jobs_isSet = !json[QString("instructionsForAllJobs")].isNull() && m_instructions_for_all_jobs_isValid;

    m_internal_notes_isValid = ::OpenAPI::fromJsonValue(m_internal_notes, json[QString("internalNotes")]);
    m_internal_notes_isSet = !json[QString("internalNotes")].isNull() && m_internal_notes_isValid;

    m_is_classic_project_isValid = ::OpenAPI::fromJsonValue(m_is_classic_project, json[QString("isClassicProject")]);
    m_is_classic_project_isSet = !json[QString("isClassicProject")].isNull() && m_is_classic_project_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ordered_on_isValid = ::OpenAPI::fromJsonValue(m_ordered_on, json[QString("orderedOn")]);
    m_ordered_on_isSet = !json[QString("orderedOn")].isNull() && m_ordered_on_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_id_number_isValid = ::OpenAPI::fromJsonValue(m_project_id_number, json[QString("projectIdNumber")]);
    m_project_id_number_isSet = !json[QString("projectIdNumber")].isNull() && m_project_id_number_isValid;

    m_quote_id_number_isValid = ::OpenAPI::fromJsonValue(m_quote_id_number, json[QString("quoteIdNumber")]);
    m_quote_id_number_isSet = !json[QString("quoteIdNumber")].isNull() && m_quote_id_number_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIProjectDTOv2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDTOv2::asJsonObject() const {
    QJsonObject obj;
    if (m_budget_code_isSet) {
        obj.insert(QString("budgetCode"), ::OpenAPI::toJsonValue(m_budget_code));
    }
    if (m_category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_client_deadline_isSet) {
        obj.insert(QString("clientDeadline"), ::OpenAPI::toJsonValue(m_client_deadline));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_notes_isSet) {
        obj.insert(QString("clientNotes"), ::OpenAPI::toJsonValue(m_client_notes));
    }
    if (m_client_reference_number_isSet) {
        obj.insert(QString("clientReferenceNumber"), ::OpenAPI::toJsonValue(m_client_reference_number));
    }
    if (m_documents.isSet()) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instructions_for_all_jobs_isSet) {
        obj.insert(QString("instructionsForAllJobs"), ::OpenAPI::toJsonValue(m_instructions_for_all_jobs));
    }
    if (m_internal_notes_isSet) {
        obj.insert(QString("internalNotes"), ::OpenAPI::toJsonValue(m_internal_notes));
    }
    if (m_is_classic_project_isSet) {
        obj.insert(QString("isClassicProject"), ::OpenAPI::toJsonValue(m_is_classic_project));
    }
    if (m_languages.isSet()) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ordered_on_isSet) {
        obj.insert(QString("orderedOn"), ::OpenAPI::toJsonValue(m_ordered_on));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_people.isSet()) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_id_number_isSet) {
        obj.insert(QString("projectIdNumber"), ::OpenAPI::toJsonValue(m_project_id_number));
    }
    if (m_quote_id_number_isSet) {
        obj.insert(QString("quoteIdNumber"), ::OpenAPI::toJsonValue(m_quote_id_number));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_volume.isSet()) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

QString OAIProjectDTOv2::getBudgetCode() const {
    return m_budget_code;
}
void OAIProjectDTOv2::setBudgetCode(const QString &budget_code) {
    m_budget_code = budget_code;
    m_budget_code_isSet = true;
}

bool OAIProjectDTOv2::is_budget_code_Set() const{
    return m_budget_code_isSet;
}

bool OAIProjectDTOv2::is_budget_code_Valid() const{
    return m_budget_code_isValid;
}

QSet<qint64> OAIProjectDTOv2::getCategoryIds() const {
    return m_category_ids;
}
void OAIProjectDTOv2::setCategoryIds(const QSet<qint64> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAIProjectDTOv2::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIProjectDTOv2::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

qint64 OAIProjectDTOv2::getClientDeadline() const {
    return m_client_deadline;
}
void OAIProjectDTOv2::setClientDeadline(const qint64 &client_deadline) {
    m_client_deadline = client_deadline;
    m_client_deadline_isSet = true;
}

bool OAIProjectDTOv2::is_client_deadline_Set() const{
    return m_client_deadline_isSet;
}

bool OAIProjectDTOv2::is_client_deadline_Valid() const{
    return m_client_deadline_isValid;
}

qint64 OAIProjectDTOv2::getClientId() const {
    return m_client_id;
}
void OAIProjectDTOv2::setClientId(const qint64 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIProjectDTOv2::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIProjectDTOv2::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIProjectDTOv2::getClientNotes() const {
    return m_client_notes;
}
void OAIProjectDTOv2::setClientNotes(const QString &client_notes) {
    m_client_notes = client_notes;
    m_client_notes_isSet = true;
}

bool OAIProjectDTOv2::is_client_notes_Set() const{
    return m_client_notes_isSet;
}

bool OAIProjectDTOv2::is_client_notes_Valid() const{
    return m_client_notes_isValid;
}

QString OAIProjectDTOv2::getClientReferenceNumber() const {
    return m_client_reference_number;
}
void OAIProjectDTOv2::setClientReferenceNumber(const QString &client_reference_number) {
    m_client_reference_number = client_reference_number;
    m_client_reference_number_isSet = true;
}

bool OAIProjectDTOv2::is_client_reference_number_Set() const{
    return m_client_reference_number_isSet;
}

bool OAIProjectDTOv2::is_client_reference_number_Valid() const{
    return m_client_reference_number_isValid;
}

OAIDocumentsDTO OAIProjectDTOv2::getDocuments() const {
    return m_documents;
}
void OAIProjectDTOv2::setDocuments(const OAIDocumentsDTO &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIProjectDTOv2::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIProjectDTOv2::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAIProjectDTOv2::getId() const {
    return m_id;
}
void OAIProjectDTOv2::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectDTOv2::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectDTOv2::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectDTOv2::getInstructionsForAllJobs() const {
    return m_instructions_for_all_jobs;
}
void OAIProjectDTOv2::setInstructionsForAllJobs(const QString &instructions_for_all_jobs) {
    m_instructions_for_all_jobs = instructions_for_all_jobs;
    m_instructions_for_all_jobs_isSet = true;
}

bool OAIProjectDTOv2::is_instructions_for_all_jobs_Set() const{
    return m_instructions_for_all_jobs_isSet;
}

bool OAIProjectDTOv2::is_instructions_for_all_jobs_Valid() const{
    return m_instructions_for_all_jobs_isValid;
}

QString OAIProjectDTOv2::getInternalNotes() const {
    return m_internal_notes;
}
void OAIProjectDTOv2::setInternalNotes(const QString &internal_notes) {
    m_internal_notes = internal_notes;
    m_internal_notes_isSet = true;
}

bool OAIProjectDTOv2::is_internal_notes_Set() const{
    return m_internal_notes_isSet;
}

bool OAIProjectDTOv2::is_internal_notes_Valid() const{
    return m_internal_notes_isValid;
}

bool OAIProjectDTOv2::isIsClassicProject() const {
    return m_is_classic_project;
}
void OAIProjectDTOv2::setIsClassicProject(const bool &is_classic_project) {
    m_is_classic_project = is_classic_project;
    m_is_classic_project_isSet = true;
}

bool OAIProjectDTOv2::is_is_classic_project_Set() const{
    return m_is_classic_project_isSet;
}

bool OAIProjectDTOv2::is_is_classic_project_Valid() const{
    return m_is_classic_project_isValid;
}

OAIProjectLanguagesDTO OAIProjectDTOv2::getLanguages() const {
    return m_languages;
}
void OAIProjectDTOv2::setLanguages(const OAIProjectLanguagesDTO &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIProjectDTOv2::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIProjectDTOv2::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAIProjectDTOv2::getName() const {
    return m_name;
}
void OAIProjectDTOv2::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectDTOv2::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectDTOv2::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIProjectDTOv2::getOrderedOn() const {
    return m_ordered_on;
}
void OAIProjectDTOv2::setOrderedOn(const qint64 &ordered_on) {
    m_ordered_on = ordered_on;
    m_ordered_on_isSet = true;
}

bool OAIProjectDTOv2::is_ordered_on_Set() const{
    return m_ordered_on_isSet;
}

bool OAIProjectDTOv2::is_ordered_on_Valid() const{
    return m_ordered_on_isValid;
}

QString OAIProjectDTOv2::getOrigin() const {
    return m_origin;
}
void OAIProjectDTOv2::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIProjectDTOv2::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIProjectDTOv2::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIPeopleDTO OAIProjectDTOv2::getPeople() const {
    return m_people;
}
void OAIProjectDTOv2::setPeople(const OAIPeopleDTO &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAIProjectDTOv2::is_people_Set() const{
    return m_people_isSet;
}

bool OAIProjectDTOv2::is_people_Valid() const{
    return m_people_isValid;
}

QString OAIProjectDTOv2::getProjectId() const {
    return m_project_id;
}
void OAIProjectDTOv2::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectDTOv2::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectDTOv2::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIProjectDTOv2::getProjectIdNumber() const {
    return m_project_id_number;
}
void OAIProjectDTOv2::setProjectIdNumber(const QString &project_id_number) {
    m_project_id_number = project_id_number;
    m_project_id_number_isSet = true;
}

bool OAIProjectDTOv2::is_project_id_number_Set() const{
    return m_project_id_number_isSet;
}

bool OAIProjectDTOv2::is_project_id_number_Valid() const{
    return m_project_id_number_isValid;
}

QString OAIProjectDTOv2::getQuoteIdNumber() const {
    return m_quote_id_number;
}
void OAIProjectDTOv2::setQuoteIdNumber(const QString &quote_id_number) {
    m_quote_id_number = quote_id_number;
    m_quote_id_number_isSet = true;
}

bool OAIProjectDTOv2::is_quote_id_number_Set() const{
    return m_quote_id_number_isSet;
}

bool OAIProjectDTOv2::is_quote_id_number_Valid() const{
    return m_quote_id_number_isValid;
}

qint64 OAIProjectDTOv2::getServiceId() const {
    return m_service_id;
}
void OAIProjectDTOv2::setServiceId(const qint64 &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIProjectDTOv2::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIProjectDTOv2::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIProjectDTOv2::getStatus() const {
    return m_status;
}
void OAIProjectDTOv2::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectDTOv2::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectDTOv2::is_status_Valid() const{
    return m_status_isValid;
}

OAIVolumeDTO OAIProjectDTOv2::getVolume() const {
    return m_volume;
}
void OAIProjectDTOv2::setVolume(const OAIVolumeDTO &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIProjectDTOv2::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIProjectDTOv2::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIProjectDTOv2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_budget_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_for_all_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_classic_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordered_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDTOv2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
