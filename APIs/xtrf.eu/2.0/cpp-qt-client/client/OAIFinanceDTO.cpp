/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinanceDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinanceDTO::OAIFinanceDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinanceDTO::OAIFinanceDTO() {
    this->initializeModel();
}

OAIFinanceDTO::~OAIFinanceDTO() {}

void OAIFinanceDTO::initializeModel() {

    m_roi_isSet = false;
    m_roi_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_margin_isSet = false;
    m_margin_isValid = false;

    m_payables_isSet = false;
    m_payables_isValid = false;

    m_profit_isSet = false;
    m_profit_isValid = false;

    m_receivables_isSet = false;
    m_receivables_isValid = false;

    m_total_agreed_isSet = false;
    m_total_agreed_isValid = false;

    m_total_cost_isSet = false;
    m_total_cost_isValid = false;
}

void OAIFinanceDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinanceDTO::fromJsonObject(QJsonObject json) {

    m_roi_isValid = ::OpenAPI::fromJsonValue(m_roi, json[QString("ROI")]);
    m_roi_isSet = !json[QString("ROI")].isNull() && m_roi_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_margin_isValid = ::OpenAPI::fromJsonValue(m_margin, json[QString("margin")]);
    m_margin_isSet = !json[QString("margin")].isNull() && m_margin_isValid;

    m_payables_isValid = ::OpenAPI::fromJsonValue(m_payables, json[QString("payables")]);
    m_payables_isSet = !json[QString("payables")].isNull() && m_payables_isValid;

    m_profit_isValid = ::OpenAPI::fromJsonValue(m_profit, json[QString("profit")]);
    m_profit_isSet = !json[QString("profit")].isNull() && m_profit_isValid;

    m_receivables_isValid = ::OpenAPI::fromJsonValue(m_receivables, json[QString("receivables")]);
    m_receivables_isSet = !json[QString("receivables")].isNull() && m_receivables_isValid;

    m_total_agreed_isValid = ::OpenAPI::fromJsonValue(m_total_agreed, json[QString("totalAgreed")]);
    m_total_agreed_isSet = !json[QString("totalAgreed")].isNull() && m_total_agreed_isValid;

    m_total_cost_isValid = ::OpenAPI::fromJsonValue(m_total_cost, json[QString("totalCost")]);
    m_total_cost_isSet = !json[QString("totalCost")].isNull() && m_total_cost_isValid;
}

QString OAIFinanceDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinanceDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_roi_isSet) {
        obj.insert(QString("ROI"), ::OpenAPI::toJsonValue(m_roi));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_margin_isSet) {
        obj.insert(QString("margin"), ::OpenAPI::toJsonValue(m_margin));
    }
    if (m_payables.size() > 0) {
        obj.insert(QString("payables"), ::OpenAPI::toJsonValue(m_payables));
    }
    if (m_profit_isSet) {
        obj.insert(QString("profit"), ::OpenAPI::toJsonValue(m_profit));
    }
    if (m_receivables.size() > 0) {
        obj.insert(QString("receivables"), ::OpenAPI::toJsonValue(m_receivables));
    }
    if (m_total_agreed_isSet) {
        obj.insert(QString("totalAgreed"), ::OpenAPI::toJsonValue(m_total_agreed));
    }
    if (m_total_cost_isSet) {
        obj.insert(QString("totalCost"), ::OpenAPI::toJsonValue(m_total_cost));
    }
    return obj;
}

double OAIFinanceDTO::getRoi() const {
    return m_roi;
}
void OAIFinanceDTO::setRoi(const double &roi) {
    m_roi = roi;
    m_roi_isSet = true;
}

bool OAIFinanceDTO::is_roi_Set() const{
    return m_roi_isSet;
}

bool OAIFinanceDTO::is_roi_Valid() const{
    return m_roi_isValid;
}

qint64 OAIFinanceDTO::getCurrencyId() const {
    return m_currency_id;
}
void OAIFinanceDTO::setCurrencyId(const qint64 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIFinanceDTO::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIFinanceDTO::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

double OAIFinanceDTO::getMargin() const {
    return m_margin;
}
void OAIFinanceDTO::setMargin(const double &margin) {
    m_margin = margin;
    m_margin_isSet = true;
}

bool OAIFinanceDTO::is_margin_Set() const{
    return m_margin_isSet;
}

bool OAIFinanceDTO::is_margin_Valid() const{
    return m_margin_isValid;
}

QList<OAIChargeDTO> OAIFinanceDTO::getPayables() const {
    return m_payables;
}
void OAIFinanceDTO::setPayables(const QList<OAIChargeDTO> &payables) {
    m_payables = payables;
    m_payables_isSet = true;
}

bool OAIFinanceDTO::is_payables_Set() const{
    return m_payables_isSet;
}

bool OAIFinanceDTO::is_payables_Valid() const{
    return m_payables_isValid;
}

double OAIFinanceDTO::getProfit() const {
    return m_profit;
}
void OAIFinanceDTO::setProfit(const double &profit) {
    m_profit = profit;
    m_profit_isSet = true;
}

bool OAIFinanceDTO::is_profit_Set() const{
    return m_profit_isSet;
}

bool OAIFinanceDTO::is_profit_Valid() const{
    return m_profit_isValid;
}

QList<OAIChargeDTO> OAIFinanceDTO::getReceivables() const {
    return m_receivables;
}
void OAIFinanceDTO::setReceivables(const QList<OAIChargeDTO> &receivables) {
    m_receivables = receivables;
    m_receivables_isSet = true;
}

bool OAIFinanceDTO::is_receivables_Set() const{
    return m_receivables_isSet;
}

bool OAIFinanceDTO::is_receivables_Valid() const{
    return m_receivables_isValid;
}

double OAIFinanceDTO::getTotalAgreed() const {
    return m_total_agreed;
}
void OAIFinanceDTO::setTotalAgreed(const double &total_agreed) {
    m_total_agreed = total_agreed;
    m_total_agreed_isSet = true;
}

bool OAIFinanceDTO::is_total_agreed_Set() const{
    return m_total_agreed_isSet;
}

bool OAIFinanceDTO::is_total_agreed_Valid() const{
    return m_total_agreed_isValid;
}

double OAIFinanceDTO::getTotalCost() const {
    return m_total_cost;
}
void OAIFinanceDTO::setTotalCost(const double &total_cost) {
    m_total_cost = total_cost;
    m_total_cost_isSet = true;
}

bool OAIFinanceDTO::is_total_cost_Set() const{
    return m_total_cost_isSet;
}

bool OAIFinanceDTO::is_total_cost_Valid() const{
    return m_total_cost_isValid;
}

bool OAIFinanceDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_roi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receivables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_agreed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinanceDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
