/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerPersonDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerPersonDTO::OAICustomerPersonDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerPersonDTO::OAICustomerPersonDTO() {
    this->initializeModel();
}

OAICustomerPersonDTO::~OAICustomerPersonDTO() {}

void OAICustomerPersonDTO::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_first_project_date_isSet = false;
    m_first_project_date_isValid = false;

    m_first_quote_date_isSet = false;
    m_first_quote_date_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_last_project_date_isSet = false;
    m_last_project_date_isValid = false;

    m_last_quote_date_isSet = false;
    m_last_quote_date_isValid = false;

    m_mother_tongues_ids_isSet = false;
    m_mother_tongues_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_projects_isSet = false;
    m_number_of_projects_isValid = false;

    m_number_of_quotes_isSet = false;
    m_number_of_quotes_isValid = false;

    m_position_id_isSet = false;
    m_position_id_isValid = false;
}

void OAICustomerPersonDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerPersonDTO::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_first_project_date_isValid = ::OpenAPI::fromJsonValue(m_first_project_date, json[QString("firstProjectDate")]);
    m_first_project_date_isSet = !json[QString("firstProjectDate")].isNull() && m_first_project_date_isValid;

    m_first_quote_date_isValid = ::OpenAPI::fromJsonValue(m_first_quote_date, json[QString("firstQuoteDate")]);
    m_first_quote_date_isSet = !json[QString("firstQuoteDate")].isNull() && m_first_quote_date_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_last_project_date_isValid = ::OpenAPI::fromJsonValue(m_last_project_date, json[QString("lastProjectDate")]);
    m_last_project_date_isSet = !json[QString("lastProjectDate")].isNull() && m_last_project_date_isValid;

    m_last_quote_date_isValid = ::OpenAPI::fromJsonValue(m_last_quote_date, json[QString("lastQuoteDate")]);
    m_last_quote_date_isSet = !json[QString("lastQuoteDate")].isNull() && m_last_quote_date_isValid;

    m_mother_tongues_ids_isValid = ::OpenAPI::fromJsonValue(m_mother_tongues_ids, json[QString("motherTonguesIds")]);
    m_mother_tongues_ids_isSet = !json[QString("motherTonguesIds")].isNull() && m_mother_tongues_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_projects_isValid = ::OpenAPI::fromJsonValue(m_number_of_projects, json[QString("numberOfProjects")]);
    m_number_of_projects_isSet = !json[QString("numberOfProjects")].isNull() && m_number_of_projects_isValid;

    m_number_of_quotes_isValid = ::OpenAPI::fromJsonValue(m_number_of_quotes, json[QString("numberOfQuotes")]);
    m_number_of_quotes_isSet = !json[QString("numberOfQuotes")].isNull() && m_number_of_quotes_isValid;

    m_position_id_isValid = ::OpenAPI::fromJsonValue(m_position_id, json[QString("positionId")]);
    m_position_id_isSet = !json[QString("positionId")].isNull() && m_position_id_isValid;
}

QString OAICustomerPersonDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerPersonDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_first_project_date_isSet) {
        obj.insert(QString("firstProjectDate"), ::OpenAPI::toJsonValue(m_first_project_date));
    }
    if (m_first_quote_date_isSet) {
        obj.insert(QString("firstQuoteDate"), ::OpenAPI::toJsonValue(m_first_quote_date));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_last_project_date_isSet) {
        obj.insert(QString("lastProjectDate"), ::OpenAPI::toJsonValue(m_last_project_date));
    }
    if (m_last_quote_date_isSet) {
        obj.insert(QString("lastQuoteDate"), ::OpenAPI::toJsonValue(m_last_quote_date));
    }
    if (m_mother_tongues_ids.size() > 0) {
        obj.insert(QString("motherTonguesIds"), ::OpenAPI::toJsonValue(m_mother_tongues_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_projects_isSet) {
        obj.insert(QString("numberOfProjects"), ::OpenAPI::toJsonValue(m_number_of_projects));
    }
    if (m_number_of_quotes_isSet) {
        obj.insert(QString("numberOfQuotes"), ::OpenAPI::toJsonValue(m_number_of_quotes));
    }
    if (m_position_id_isSet) {
        obj.insert(QString("positionId"), ::OpenAPI::toJsonValue(m_position_id));
    }
    return obj;
}

bool OAICustomerPersonDTO::isActive() const {
    return m_active;
}
void OAICustomerPersonDTO::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICustomerPersonDTO::is_active_Set() const{
    return m_active_isSet;
}

bool OAICustomerPersonDTO::is_active_Valid() const{
    return m_active_isValid;
}

OAIPersonContactDTO OAICustomerPersonDTO::getContact() const {
    return m_contact;
}
void OAICustomerPersonDTO::setContact(const OAIPersonContactDTO &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICustomerPersonDTO::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICustomerPersonDTO::is_contact_Valid() const{
    return m_contact_isValid;
}

QList<OAICustomFieldDTO> OAICustomerPersonDTO::getCustomFields() const {
    return m_custom_fields;
}
void OAICustomerPersonDTO::setCustomFields(const QList<OAICustomFieldDTO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICustomerPersonDTO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICustomerPersonDTO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAICustomerPersonDTO::getCustomerId() const {
    return m_customer_id;
}
void OAICustomerPersonDTO::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICustomerPersonDTO::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICustomerPersonDTO::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QDateTime OAICustomerPersonDTO::getFirstProjectDate() const {
    return m_first_project_date;
}
void OAICustomerPersonDTO::setFirstProjectDate(const QDateTime &first_project_date) {
    m_first_project_date = first_project_date;
    m_first_project_date_isSet = true;
}

bool OAICustomerPersonDTO::is_first_project_date_Set() const{
    return m_first_project_date_isSet;
}

bool OAICustomerPersonDTO::is_first_project_date_Valid() const{
    return m_first_project_date_isValid;
}

QDateTime OAICustomerPersonDTO::getFirstQuoteDate() const {
    return m_first_quote_date;
}
void OAICustomerPersonDTO::setFirstQuoteDate(const QDateTime &first_quote_date) {
    m_first_quote_date = first_quote_date;
    m_first_quote_date_isSet = true;
}

bool OAICustomerPersonDTO::is_first_quote_date_Set() const{
    return m_first_quote_date_isSet;
}

bool OAICustomerPersonDTO::is_first_quote_date_Valid() const{
    return m_first_quote_date_isValid;
}

QString OAICustomerPersonDTO::getGender() const {
    return m_gender;
}
void OAICustomerPersonDTO::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAICustomerPersonDTO::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAICustomerPersonDTO::is_gender_Valid() const{
    return m_gender_isValid;
}

qint64 OAICustomerPersonDTO::getId() const {
    return m_id;
}
void OAICustomerPersonDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomerPersonDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomerPersonDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomerPersonDTO::getLastName() const {
    return m_last_name;
}
void OAICustomerPersonDTO::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICustomerPersonDTO::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICustomerPersonDTO::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QDateTime OAICustomerPersonDTO::getLastProjectDate() const {
    return m_last_project_date;
}
void OAICustomerPersonDTO::setLastProjectDate(const QDateTime &last_project_date) {
    m_last_project_date = last_project_date;
    m_last_project_date_isSet = true;
}

bool OAICustomerPersonDTO::is_last_project_date_Set() const{
    return m_last_project_date_isSet;
}

bool OAICustomerPersonDTO::is_last_project_date_Valid() const{
    return m_last_project_date_isValid;
}

QDateTime OAICustomerPersonDTO::getLastQuoteDate() const {
    return m_last_quote_date;
}
void OAICustomerPersonDTO::setLastQuoteDate(const QDateTime &last_quote_date) {
    m_last_quote_date = last_quote_date;
    m_last_quote_date_isSet = true;
}

bool OAICustomerPersonDTO::is_last_quote_date_Set() const{
    return m_last_quote_date_isSet;
}

bool OAICustomerPersonDTO::is_last_quote_date_Valid() const{
    return m_last_quote_date_isValid;
}

QSet<qint64> OAICustomerPersonDTO::getMotherTonguesIds() const {
    return m_mother_tongues_ids;
}
void OAICustomerPersonDTO::setMotherTonguesIds(const QSet<qint64> &mother_tongues_ids) {
    m_mother_tongues_ids = mother_tongues_ids;
    m_mother_tongues_ids_isSet = true;
}

bool OAICustomerPersonDTO::is_mother_tongues_ids_Set() const{
    return m_mother_tongues_ids_isSet;
}

bool OAICustomerPersonDTO::is_mother_tongues_ids_Valid() const{
    return m_mother_tongues_ids_isValid;
}

QString OAICustomerPersonDTO::getName() const {
    return m_name;
}
void OAICustomerPersonDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerPersonDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerPersonDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICustomerPersonDTO::getNumberOfProjects() const {
    return m_number_of_projects;
}
void OAICustomerPersonDTO::setNumberOfProjects(const qint32 &number_of_projects) {
    m_number_of_projects = number_of_projects;
    m_number_of_projects_isSet = true;
}

bool OAICustomerPersonDTO::is_number_of_projects_Set() const{
    return m_number_of_projects_isSet;
}

bool OAICustomerPersonDTO::is_number_of_projects_Valid() const{
    return m_number_of_projects_isValid;
}

qint32 OAICustomerPersonDTO::getNumberOfQuotes() const {
    return m_number_of_quotes;
}
void OAICustomerPersonDTO::setNumberOfQuotes(const qint32 &number_of_quotes) {
    m_number_of_quotes = number_of_quotes;
    m_number_of_quotes_isSet = true;
}

bool OAICustomerPersonDTO::is_number_of_quotes_Set() const{
    return m_number_of_quotes_isSet;
}

bool OAICustomerPersonDTO::is_number_of_quotes_Valid() const{
    return m_number_of_quotes_isValid;
}

qint64 OAICustomerPersonDTO::getPositionId() const {
    return m_position_id;
}
void OAICustomerPersonDTO::setPositionId(const qint64 &position_id) {
    m_position_id = position_id;
    m_position_id_isSet = true;
}

bool OAICustomerPersonDTO::is_position_id_Set() const{
    return m_position_id_isSet;
}

bool OAICustomerPersonDTO::is_position_id_Valid() const{
    return m_position_id_isValid;
}

bool OAICustomerPersonDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_project_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_quote_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_project_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_quote_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mother_tongues_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_quotes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerPersonDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
