/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewBriefDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewBriefDTO::OAIViewBriefDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewBriefDTO::OAIViewBriefDTO() {
    this->initializeModel();
}

OAIViewBriefDTO::~OAIViewBriefDTO() {}

void OAIViewBriefDTO::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modification_isSet = false;
    m_last_modification_isValid = false;

    m_mine_isSet = false;
    m_mine_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;
}

void OAIViewBriefDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewBriefDTO::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modification_isValid = ::OpenAPI::fromJsonValue(m_last_modification, json[QString("lastModification")]);
    m_last_modification_isSet = !json[QString("lastModification")].isNull() && m_last_modification_isValid;

    m_mine_isValid = ::OpenAPI::fromJsonValue(m_mine, json[QString("mine")]);
    m_mine_isSet = !json[QString("mine")].isNull() && m_mine_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;
}

QString OAIViewBriefDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewBriefDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_access.isSet()) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modification.isSet()) {
        obj.insert(QString("lastModification"), ::OpenAPI::toJsonValue(m_last_modification));
    }
    if (m_mine_isSet) {
        obj.insert(QString("mine"), ::OpenAPI::toJsonValue(m_mine));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    return obj;
}

OAIAccessDTO OAIViewBriefDTO::getAccess() const {
    return m_access;
}
void OAIViewBriefDTO::setAccess(const OAIAccessDTO &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIViewBriefDTO::is_access_Set() const{
    return m_access_isSet;
}

bool OAIViewBriefDTO::is_access_Valid() const{
    return m_access_isValid;
}

bool OAIViewBriefDTO::isCurrent() const {
    return m_current;
}
void OAIViewBriefDTO::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIViewBriefDTO::is_current_Set() const{
    return m_current_isSet;
}

bool OAIViewBriefDTO::is_current_Valid() const{
    return m_current_isValid;
}

qint64 OAIViewBriefDTO::getId() const {
    return m_id;
}
void OAIViewBriefDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIViewBriefDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIViewBriefDTO::is_id_Valid() const{
    return m_id_isValid;
}

OAILastModificationDTO OAIViewBriefDTO::getLastModification() const {
    return m_last_modification;
}
void OAIViewBriefDTO::setLastModification(const OAILastModificationDTO &last_modification) {
    m_last_modification = last_modification;
    m_last_modification_isSet = true;
}

bool OAIViewBriefDTO::is_last_modification_Set() const{
    return m_last_modification_isSet;
}

bool OAIViewBriefDTO::is_last_modification_Valid() const{
    return m_last_modification_isValid;
}

bool OAIViewBriefDTO::isMine() const {
    return m_mine;
}
void OAIViewBriefDTO::setMine(const bool &mine) {
    m_mine = mine;
    m_mine_isSet = true;
}

bool OAIViewBriefDTO::is_mine_Set() const{
    return m_mine_isSet;
}

bool OAIViewBriefDTO::is_mine_Valid() const{
    return m_mine_isValid;
}

QString OAIViewBriefDTO::getName() const {
    return m_name;
}
void OAIViewBriefDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIViewBriefDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIViewBriefDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIViewBriefDTO::getOwner() const {
    return m_owner;
}
void OAIViewBriefDTO::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIViewBriefDTO::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIViewBriefDTO::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIViewBriefDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewBriefDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
