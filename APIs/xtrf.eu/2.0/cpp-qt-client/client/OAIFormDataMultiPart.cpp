/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormDataMultiPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormDataMultiPart::OAIFormDataMultiPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormDataMultiPart::OAIFormDataMultiPart() {
    this->initializeModel();
}

OAIFormDataMultiPart::~OAIFormDataMultiPart() {}

void OAIFormDataMultiPart::initializeModel() {

    m_body_parts_isSet = false;
    m_body_parts_isValid = false;

    m_content_disposition_isSet = false;
    m_content_disposition_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_message_body_workers_isSet = false;
    m_message_body_workers_isValid = false;

    m_parameterized_headers_isSet = false;
    m_parameterized_headers_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;
}

void OAIFormDataMultiPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormDataMultiPart::fromJsonObject(QJsonObject json) {

    m_body_parts_isValid = ::OpenAPI::fromJsonValue(m_body_parts, json[QString("bodyParts")]);
    m_body_parts_isSet = !json[QString("bodyParts")].isNull() && m_body_parts_isValid;

    m_content_disposition_isValid = ::OpenAPI::fromJsonValue(m_content_disposition, json[QString("contentDisposition")]);
    m_content_disposition_isSet = !json[QString("contentDisposition")].isNull() && m_content_disposition_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    if(json["fields"].isObject()){
        auto varmap = json["fields"].toObject().toVariantMap();
        m_fields_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIFormDataBodyPart> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_fields_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_fields_isSet &= !jval.isNull() && m_fields_isValid;
                m_fields.insert(m_fields.end(), val, item);
            }
        }
    }

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_message_body_workers_isValid = ::OpenAPI::fromJsonValue(m_message_body_workers, json[QString("messageBodyWorkers")]);
    m_message_body_workers_isSet = !json[QString("messageBodyWorkers")].isNull() && m_message_body_workers_isValid;

    m_parameterized_headers_isValid = ::OpenAPI::fromJsonValue(m_parameterized_headers, json[QString("parameterizedHeaders")]);
    m_parameterized_headers_isSet = !json[QString("parameterizedHeaders")].isNull() && m_parameterized_headers_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;
}

QString OAIFormDataMultiPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormDataMultiPart::asJsonObject() const {
    QJsonObject obj;
    if (m_body_parts.size() > 0) {
        obj.insert(QString("bodyParts"), ::OpenAPI::toJsonValue(m_body_parts));
    }
    if (m_content_disposition.isSet()) {
        obj.insert(QString("contentDisposition"), ::OpenAPI::toJsonValue(m_content_disposition));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_fields.size() > 0) {
        
        obj.insert(QString("fields"), toJsonValue(m_fields));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_message_body_workers_isSet) {
        obj.insert(QString("messageBodyWorkers"), ::OpenAPI::toJsonValue(m_message_body_workers));
    }
    if (m_parameterized_headers.isSet()) {
        obj.insert(QString("parameterizedHeaders"), ::OpenAPI::toJsonValue(m_parameterized_headers));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_providers_isSet) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    return obj;
}

QList<OAIBodyPart> OAIFormDataMultiPart::getBodyParts() const {
    return m_body_parts;
}
void OAIFormDataMultiPart::setBodyParts(const QList<OAIBodyPart> &body_parts) {
    m_body_parts = body_parts;
    m_body_parts_isSet = true;
}

bool OAIFormDataMultiPart::is_body_parts_Set() const{
    return m_body_parts_isSet;
}

bool OAIFormDataMultiPart::is_body_parts_Valid() const{
    return m_body_parts_isValid;
}

OAIContentDisposition OAIFormDataMultiPart::getContentDisposition() const {
    return m_content_disposition;
}
void OAIFormDataMultiPart::setContentDisposition(const OAIContentDisposition &content_disposition) {
    m_content_disposition = content_disposition;
    m_content_disposition_isSet = true;
}

bool OAIFormDataMultiPart::is_content_disposition_Set() const{
    return m_content_disposition_isSet;
}

bool OAIFormDataMultiPart::is_content_disposition_Valid() const{
    return m_content_disposition_isValid;
}

OAIObject OAIFormDataMultiPart::getEntity() const {
    return m_entity;
}
void OAIFormDataMultiPart::setEntity(const OAIObject &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIFormDataMultiPart::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIFormDataMultiPart::is_entity_Valid() const{
    return m_entity_isValid;
}

QMap<QString, QList<OAIFormDataBodyPart>> OAIFormDataMultiPart::getFields() const {
    return m_fields;
}
void OAIFormDataMultiPart::setFields(const QMap<QString, QList<OAIFormDataBodyPart>> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIFormDataMultiPart::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIFormDataMultiPart::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIBodyPart_headers OAIFormDataMultiPart::getHeaders() const {
    return m_headers;
}
void OAIFormDataMultiPart::setHeaders(const OAIBodyPart_headers &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIFormDataMultiPart::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIFormDataMultiPart::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIBodyPart_mediaType OAIFormDataMultiPart::getMediaType() const {
    return m_media_type;
}
void OAIFormDataMultiPart::setMediaType(const OAIBodyPart_mediaType &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIFormDataMultiPart::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIFormDataMultiPart::is_media_type_Valid() const{
    return m_media_type_isValid;
}

OAIObject OAIFormDataMultiPart::getMessageBodyWorkers() const {
    return m_message_body_workers;
}
void OAIFormDataMultiPart::setMessageBodyWorkers(const OAIObject &message_body_workers) {
    m_message_body_workers = message_body_workers;
    m_message_body_workers_isSet = true;
}

bool OAIFormDataMultiPart::is_message_body_workers_Set() const{
    return m_message_body_workers_isSet;
}

bool OAIFormDataMultiPart::is_message_body_workers_Valid() const{
    return m_message_body_workers_isValid;
}

OAIBodyPart_parameterizedHeaders OAIFormDataMultiPart::getParameterizedHeaders() const {
    return m_parameterized_headers;
}
void OAIFormDataMultiPart::setParameterizedHeaders(const OAIBodyPart_parameterizedHeaders &parameterized_headers) {
    m_parameterized_headers = parameterized_headers;
    m_parameterized_headers_isSet = true;
}

bool OAIFormDataMultiPart::is_parameterized_headers_Set() const{
    return m_parameterized_headers_isSet;
}

bool OAIFormDataMultiPart::is_parameterized_headers_Valid() const{
    return m_parameterized_headers_isValid;
}

OAIMultiPart OAIFormDataMultiPart::getParent() const {
    return m_parent;
}
void OAIFormDataMultiPart::setParent(const OAIMultiPart &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIFormDataMultiPart::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIFormDataMultiPart::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIObject OAIFormDataMultiPart::getProviders() const {
    return m_providers;
}
void OAIFormDataMultiPart::setProviders(const OAIObject &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIFormDataMultiPart::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIFormDataMultiPart::is_providers_Valid() const{
    return m_providers_isValid;
}

bool OAIFormDataMultiPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_disposition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameterized_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormDataMultiPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
