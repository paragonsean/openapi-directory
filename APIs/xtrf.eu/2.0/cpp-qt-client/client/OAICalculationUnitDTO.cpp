/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculationUnitDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculationUnitDTO::OAICalculationUnitDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculationUnitDTO::OAICalculationUnitDTO() {
    this->initializeModel();
}

OAICalculationUnitDTO::~OAICalculationUnitDTO() {}

void OAICalculationUnitDTO::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_can_be_used_in_cat_analysis_isSet = false;
    m_can_be_used_in_cat_analysis_isValid = false;

    m_cat_quantity_conversion_expression_isSet = false;
    m_cat_quantity_conversion_expression_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_exchange_ratio_isSet = false;
    m_exchange_ratio_isValid = false;

    m_file_stats_conversion_expression_isSet = false;
    m_file_stats_conversion_expression_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_type_ids_isSet = false;
    m_job_type_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_time_to_quantity_conversion_expression_isSet = false;
    m_time_to_quantity_conversion_expression_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICalculationUnitDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculationUnitDTO::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_can_be_used_in_cat_analysis_isValid = ::OpenAPI::fromJsonValue(m_can_be_used_in_cat_analysis, json[QString("canBeUsedInCatAnalysis")]);
    m_can_be_used_in_cat_analysis_isSet = !json[QString("canBeUsedInCatAnalysis")].isNull() && m_can_be_used_in_cat_analysis_isValid;

    m_cat_quantity_conversion_expression_isValid = ::OpenAPI::fromJsonValue(m_cat_quantity_conversion_expression, json[QString("catQuantityConversionExpression")]);
    m_cat_quantity_conversion_expression_isSet = !json[QString("catQuantityConversionExpression")].isNull() && m_cat_quantity_conversion_expression_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_exchange_ratio_isValid = ::OpenAPI::fromJsonValue(m_exchange_ratio, json[QString("exchangeRatio")]);
    m_exchange_ratio_isSet = !json[QString("exchangeRatio")].isNull() && m_exchange_ratio_isValid;

    m_file_stats_conversion_expression_isValid = ::OpenAPI::fromJsonValue(m_file_stats_conversion_expression, json[QString("fileStatsConversionExpression")]);
    m_file_stats_conversion_expression_isSet = !json[QString("fileStatsConversionExpression")].isNull() && m_file_stats_conversion_expression_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_job_type_ids_isValid = ::OpenAPI::fromJsonValue(m_job_type_ids, json[QString("jobTypeIds")]);
    m_job_type_ids_isSet = !json[QString("jobTypeIds")].isNull() && m_job_type_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_time_to_quantity_conversion_expression_isValid = ::OpenAPI::fromJsonValue(m_time_to_quantity_conversion_expression, json[QString("timeToQuantityConversionExpression")]);
    m_time_to_quantity_conversion_expression_isSet = !json[QString("timeToQuantityConversionExpression")].isNull() && m_time_to_quantity_conversion_expression_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICalculationUnitDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculationUnitDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_can_be_used_in_cat_analysis_isSet) {
        obj.insert(QString("canBeUsedInCatAnalysis"), ::OpenAPI::toJsonValue(m_can_be_used_in_cat_analysis));
    }
    if (m_cat_quantity_conversion_expression_isSet) {
        obj.insert(QString("catQuantityConversionExpression"), ::OpenAPI::toJsonValue(m_cat_quantity_conversion_expression));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_exchange_ratio_isSet) {
        obj.insert(QString("exchangeRatio"), ::OpenAPI::toJsonValue(m_exchange_ratio));
    }
    if (m_file_stats_conversion_expression_isSet) {
        obj.insert(QString("fileStatsConversionExpression"), ::OpenAPI::toJsonValue(m_file_stats_conversion_expression));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_type_ids.size() > 0) {
        obj.insert(QString("jobTypeIds"), ::OpenAPI::toJsonValue(m_job_type_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_time_to_quantity_conversion_expression_isSet) {
        obj.insert(QString("timeToQuantityConversionExpression"), ::OpenAPI::toJsonValue(m_time_to_quantity_conversion_expression));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAICalculationUnitDTO::isActive() const {
    return m_active;
}
void OAICalculationUnitDTO::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICalculationUnitDTO::is_active_Set() const{
    return m_active_isSet;
}

bool OAICalculationUnitDTO::is_active_Valid() const{
    return m_active_isValid;
}

bool OAICalculationUnitDTO::isCanBeUsedInCatAnalysis() const {
    return m_can_be_used_in_cat_analysis;
}
void OAICalculationUnitDTO::setCanBeUsedInCatAnalysis(const bool &can_be_used_in_cat_analysis) {
    m_can_be_used_in_cat_analysis = can_be_used_in_cat_analysis;
    m_can_be_used_in_cat_analysis_isSet = true;
}

bool OAICalculationUnitDTO::is_can_be_used_in_cat_analysis_Set() const{
    return m_can_be_used_in_cat_analysis_isSet;
}

bool OAICalculationUnitDTO::is_can_be_used_in_cat_analysis_Valid() const{
    return m_can_be_used_in_cat_analysis_isValid;
}

QString OAICalculationUnitDTO::getCatQuantityConversionExpression() const {
    return m_cat_quantity_conversion_expression;
}
void OAICalculationUnitDTO::setCatQuantityConversionExpression(const QString &cat_quantity_conversion_expression) {
    m_cat_quantity_conversion_expression = cat_quantity_conversion_expression;
    m_cat_quantity_conversion_expression_isSet = true;
}

bool OAICalculationUnitDTO::is_cat_quantity_conversion_expression_Set() const{
    return m_cat_quantity_conversion_expression_isSet;
}

bool OAICalculationUnitDTO::is_cat_quantity_conversion_expression_Valid() const{
    return m_cat_quantity_conversion_expression_isValid;
}

bool OAICalculationUnitDTO::isRDefault() const {
    return m_r_default;
}
void OAICalculationUnitDTO::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAICalculationUnitDTO::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAICalculationUnitDTO::is_r_default_Valid() const{
    return m_r_default_isValid;
}

double OAICalculationUnitDTO::getExchangeRatio() const {
    return m_exchange_ratio;
}
void OAICalculationUnitDTO::setExchangeRatio(const double &exchange_ratio) {
    m_exchange_ratio = exchange_ratio;
    m_exchange_ratio_isSet = true;
}

bool OAICalculationUnitDTO::is_exchange_ratio_Set() const{
    return m_exchange_ratio_isSet;
}

bool OAICalculationUnitDTO::is_exchange_ratio_Valid() const{
    return m_exchange_ratio_isValid;
}

QString OAICalculationUnitDTO::getFileStatsConversionExpression() const {
    return m_file_stats_conversion_expression;
}
void OAICalculationUnitDTO::setFileStatsConversionExpression(const QString &file_stats_conversion_expression) {
    m_file_stats_conversion_expression = file_stats_conversion_expression;
    m_file_stats_conversion_expression_isSet = true;
}

bool OAICalculationUnitDTO::is_file_stats_conversion_expression_Set() const{
    return m_file_stats_conversion_expression_isSet;
}

bool OAICalculationUnitDTO::is_file_stats_conversion_expression_Valid() const{
    return m_file_stats_conversion_expression_isValid;
}

qint64 OAICalculationUnitDTO::getId() const {
    return m_id;
}
void OAICalculationUnitDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICalculationUnitDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAICalculationUnitDTO::is_id_Valid() const{
    return m_id_isValid;
}

QList<qint64> OAICalculationUnitDTO::getJobTypeIds() const {
    return m_job_type_ids;
}
void OAICalculationUnitDTO::setJobTypeIds(const QList<qint64> &job_type_ids) {
    m_job_type_ids = job_type_ids;
    m_job_type_ids_isSet = true;
}

bool OAICalculationUnitDTO::is_job_type_ids_Set() const{
    return m_job_type_ids_isSet;
}

bool OAICalculationUnitDTO::is_job_type_ids_Valid() const{
    return m_job_type_ids_isValid;
}

QString OAICalculationUnitDTO::getName() const {
    return m_name;
}
void OAICalculationUnitDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICalculationUnitDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAICalculationUnitDTO::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICalculationUnitDTO::isPreferred() const {
    return m_preferred;
}
void OAICalculationUnitDTO::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAICalculationUnitDTO::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAICalculationUnitDTO::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QString OAICalculationUnitDTO::getSymbol() const {
    return m_symbol;
}
void OAICalculationUnitDTO::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAICalculationUnitDTO::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAICalculationUnitDTO::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAICalculationUnitDTO::getTimeToQuantityConversionExpression() const {
    return m_time_to_quantity_conversion_expression;
}
void OAICalculationUnitDTO::setTimeToQuantityConversionExpression(const QString &time_to_quantity_conversion_expression) {
    m_time_to_quantity_conversion_expression = time_to_quantity_conversion_expression;
    m_time_to_quantity_conversion_expression_isSet = true;
}

bool OAICalculationUnitDTO::is_time_to_quantity_conversion_expression_Set() const{
    return m_time_to_quantity_conversion_expression_isSet;
}

bool OAICalculationUnitDTO::is_time_to_quantity_conversion_expression_Valid() const{
    return m_time_to_quantity_conversion_expression_isValid;
}

QString OAICalculationUnitDTO::getType() const {
    return m_type;
}
void OAICalculationUnitDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICalculationUnitDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAICalculationUnitDTO::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICalculationUnitDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_used_in_cat_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cat_quantity_conversion_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_stats_conversion_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_quantity_conversion_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculationUnitDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
