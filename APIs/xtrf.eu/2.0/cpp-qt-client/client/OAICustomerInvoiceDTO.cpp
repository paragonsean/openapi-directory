/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerInvoiceDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerInvoiceDTO::OAICustomerInvoiceDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerInvoiceDTO::OAICustomerInvoiceDTO() {
    this->initializeModel();
}

OAICustomerInvoiceDTO::~OAICustomerInvoiceDTO() {}

void OAICustomerInvoiceDTO::initializeModel() {

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_customer_details_isSet = false;
    m_customer_details_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_payment_terms_isSet = false;
    m_payment_terms_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;

    m_tasks_value_isSet = false;
    m_tasks_value_isValid = false;

    m_total_gross_isSet = false;
    m_total_gross_isValid = false;

    m_total_in_words_isSet = false;
    m_total_in_words_isValid = false;

    m_total_netto_isSet = false;
    m_total_netto_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_calculation_rule_isSet = false;
    m_vat_calculation_rule_isValid = false;
}

void OAICustomerInvoiceDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerInvoiceDTO::fromJsonObject(QJsonObject json) {

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_customer_details_isValid = ::OpenAPI::fromJsonValue(m_customer_details, json[QString("customerDetails")]);
    m_customer_details_isSet = !json[QString("customerDetails")].isNull() && m_customer_details_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("invoiceNumber")]);
    m_invoice_number_isSet = !json[QString("invoiceNumber")].isNull() && m_invoice_number_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("paymentMethodId")]);
    m_payment_method_id_isSet = !json[QString("paymentMethodId")].isNull() && m_payment_method_id_isValid;

    m_payment_terms_isValid = ::OpenAPI::fromJsonValue(m_payment_terms, json[QString("paymentTerms")]);
    m_payment_terms_isSet = !json[QString("paymentTerms")].isNull() && m_payment_terms_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;

    m_tasks_value_isValid = ::OpenAPI::fromJsonValue(m_tasks_value, json[QString("tasksValue")]);
    m_tasks_value_isSet = !json[QString("tasksValue")].isNull() && m_tasks_value_isValid;

    m_total_gross_isValid = ::OpenAPI::fromJsonValue(m_total_gross, json[QString("totalGross")]);
    m_total_gross_isSet = !json[QString("totalGross")].isNull() && m_total_gross_isValid;

    m_total_in_words_isValid = ::OpenAPI::fromJsonValue(m_total_in_words, json[QString("totalInWords")]);
    m_total_in_words_isSet = !json[QString("totalInWords")].isNull() && m_total_in_words_isValid;

    m_total_netto_isValid = ::OpenAPI::fromJsonValue(m_total_netto, json[QString("totalNetto")]);
    m_total_netto_isSet = !json[QString("totalNetto")].isNull() && m_total_netto_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_calculation_rule_isValid = ::OpenAPI::fromJsonValue(m_vat_calculation_rule, json[QString("vatCalculationRule")]);
    m_vat_calculation_rule_isSet = !json[QString("vatCalculationRule")].isNull() && m_vat_calculation_rule_isValid;
}

QString OAICustomerInvoiceDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerInvoiceDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_customer_details.isSet()) {
        obj.insert(QString("customerDetails"), ::OpenAPI::toJsonValue(m_customer_details));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("invoiceNumber"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_payment_method_id_isSet) {
        obj.insert(QString("paymentMethodId"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_payment_terms.isSet()) {
        obj.insert(QString("paymentTerms"), ::OpenAPI::toJsonValue(m_payment_terms));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    if (m_tasks_value_isSet) {
        obj.insert(QString("tasksValue"), ::OpenAPI::toJsonValue(m_tasks_value));
    }
    if (m_total_gross_isSet) {
        obj.insert(QString("totalGross"), ::OpenAPI::toJsonValue(m_total_gross));
    }
    if (m_total_in_words_isSet) {
        obj.insert(QString("totalInWords"), ::OpenAPI::toJsonValue(m_total_in_words));
    }
    if (m_total_netto_isSet) {
        obj.insert(QString("totalNetto"), ::OpenAPI::toJsonValue(m_total_netto));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_calculation_rule_isSet) {
        obj.insert(QString("vatCalculationRule"), ::OpenAPI::toJsonValue(m_vat_calculation_rule));
    }
    return obj;
}

qint64 OAICustomerInvoiceDTO::getCurrencyId() const {
    return m_currency_id;
}
void OAICustomerInvoiceDTO::setCurrencyId(const qint64 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAICustomerInvoiceDTO::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAICustomerInvoiceDTO::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAICustomerDetailsDTO OAICustomerInvoiceDTO::getCustomerDetails() const {
    return m_customer_details;
}
void OAICustomerInvoiceDTO::setCustomerDetails(const OAICustomerDetailsDTO &customer_details) {
    m_customer_details = customer_details;
    m_customer_details_isSet = true;
}

bool OAICustomerInvoiceDTO::is_customer_details_Set() const{
    return m_customer_details_isSet;
}

bool OAICustomerInvoiceDTO::is_customer_details_Valid() const{
    return m_customer_details_isValid;
}

qint64 OAICustomerInvoiceDTO::getCustomerId() const {
    return m_customer_id;
}
void OAICustomerInvoiceDTO::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICustomerInvoiceDTO::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICustomerInvoiceDTO::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

OAICustomerInvoiceDatesDTO OAICustomerInvoiceDTO::getDates() const {
    return m_dates;
}
void OAICustomerInvoiceDTO::setDates(const OAICustomerInvoiceDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAICustomerInvoiceDTO::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAICustomerInvoiceDTO::is_dates_Valid() const{
    return m_dates_isValid;
}

qint64 OAICustomerInvoiceDTO::getId() const {
    return m_id;
}
void OAICustomerInvoiceDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomerInvoiceDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomerInvoiceDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomerInvoiceDTO::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAICustomerInvoiceDTO::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAICustomerInvoiceDTO::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAICustomerInvoiceDTO::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

qint64 OAICustomerInvoiceDTO::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAICustomerInvoiceDTO::setPaymentMethodId(const qint64 &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAICustomerInvoiceDTO::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAICustomerInvoiceDTO::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

OAIPaymentTermsDTO OAICustomerInvoiceDTO::getPaymentTerms() const {
    return m_payment_terms;
}
void OAICustomerInvoiceDTO::setPaymentTerms(const OAIPaymentTermsDTO &payment_terms) {
    m_payment_terms = payment_terms;
    m_payment_terms_isSet = true;
}

bool OAICustomerInvoiceDTO::is_payment_terms_Set() const{
    return m_payment_terms_isSet;
}

bool OAICustomerInvoiceDTO::is_payment_terms_Valid() const{
    return m_payment_terms_isValid;
}

QString OAICustomerInvoiceDTO::getStatus() const {
    return m_status;
}
void OAICustomerInvoiceDTO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICustomerInvoiceDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAICustomerInvoiceDTO::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITaskDTO> OAICustomerInvoiceDTO::getTasks() const {
    return m_tasks;
}
void OAICustomerInvoiceDTO::setTasks(const QList<OAITaskDTO> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAICustomerInvoiceDTO::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAICustomerInvoiceDTO::is_tasks_Valid() const{
    return m_tasks_isValid;
}

double OAICustomerInvoiceDTO::getTasksValue() const {
    return m_tasks_value;
}
void OAICustomerInvoiceDTO::setTasksValue(const double &tasks_value) {
    m_tasks_value = tasks_value;
    m_tasks_value_isSet = true;
}

bool OAICustomerInvoiceDTO::is_tasks_value_Set() const{
    return m_tasks_value_isSet;
}

bool OAICustomerInvoiceDTO::is_tasks_value_Valid() const{
    return m_tasks_value_isValid;
}

double OAICustomerInvoiceDTO::getTotalGross() const {
    return m_total_gross;
}
void OAICustomerInvoiceDTO::setTotalGross(const double &total_gross) {
    m_total_gross = total_gross;
    m_total_gross_isSet = true;
}

bool OAICustomerInvoiceDTO::is_total_gross_Set() const{
    return m_total_gross_isSet;
}

bool OAICustomerInvoiceDTO::is_total_gross_Valid() const{
    return m_total_gross_isValid;
}

QString OAICustomerInvoiceDTO::getTotalInWords() const {
    return m_total_in_words;
}
void OAICustomerInvoiceDTO::setTotalInWords(const QString &total_in_words) {
    m_total_in_words = total_in_words;
    m_total_in_words_isSet = true;
}

bool OAICustomerInvoiceDTO::is_total_in_words_Set() const{
    return m_total_in_words_isSet;
}

bool OAICustomerInvoiceDTO::is_total_in_words_Valid() const{
    return m_total_in_words_isValid;
}

double OAICustomerInvoiceDTO::getTotalNetto() const {
    return m_total_netto;
}
void OAICustomerInvoiceDTO::setTotalNetto(const double &total_netto) {
    m_total_netto = total_netto;
    m_total_netto_isSet = true;
}

bool OAICustomerInvoiceDTO::is_total_netto_Set() const{
    return m_total_netto_isSet;
}

bool OAICustomerInvoiceDTO::is_total_netto_Valid() const{
    return m_total_netto_isValid;
}

QString OAICustomerInvoiceDTO::getType() const {
    return m_type;
}
void OAICustomerInvoiceDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomerInvoiceDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomerInvoiceDTO::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICustomerInvoiceDTO::getVatCalculationRule() const {
    return m_vat_calculation_rule;
}
void OAICustomerInvoiceDTO::setVatCalculationRule(const QString &vat_calculation_rule) {
    m_vat_calculation_rule = vat_calculation_rule;
    m_vat_calculation_rule_isSet = true;
}

bool OAICustomerInvoiceDTO::is_vat_calculation_rule_Set() const{
    return m_vat_calculation_rule_isSet;
}

bool OAICustomerInvoiceDTO::is_vat_calculation_rule_Valid() const{
    return m_vat_calculation_rule_isValid;
}

bool OAICustomerInvoiceDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_gross_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_in_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_netto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_calculation_rule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerInvoiceDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
