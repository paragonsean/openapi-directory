/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportResultDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportResultDTO::OAIImportResultDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportResultDTO::OAIImportResultDTO() {
    this->initializeModel();
}

OAIImportResultDTO::~OAIImportResultDTO() {}

void OAIImportResultDTO::initializeModel() {

    m_current_system_version_isSet = false;
    m_current_system_version_isValid = false;

    m_imported_reports_names_isSet = false;
    m_imported_reports_names_isValid = false;

    m_invalid_reports_names_isSet = false;
    m_invalid_reports_names_isValid = false;

    m_target_system_version_isSet = false;
    m_target_system_version_isValid = false;
}

void OAIImportResultDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportResultDTO::fromJsonObject(QJsonObject json) {

    m_current_system_version_isValid = ::OpenAPI::fromJsonValue(m_current_system_version, json[QString("currentSystemVersion")]);
    m_current_system_version_isSet = !json[QString("currentSystemVersion")].isNull() && m_current_system_version_isValid;

    m_imported_reports_names_isValid = ::OpenAPI::fromJsonValue(m_imported_reports_names, json[QString("importedReportsNames")]);
    m_imported_reports_names_isSet = !json[QString("importedReportsNames")].isNull() && m_imported_reports_names_isValid;

    m_invalid_reports_names_isValid = ::OpenAPI::fromJsonValue(m_invalid_reports_names, json[QString("invalidReportsNames")]);
    m_invalid_reports_names_isSet = !json[QString("invalidReportsNames")].isNull() && m_invalid_reports_names_isValid;

    m_target_system_version_isValid = ::OpenAPI::fromJsonValue(m_target_system_version, json[QString("targetSystemVersion")]);
    m_target_system_version_isSet = !json[QString("targetSystemVersion")].isNull() && m_target_system_version_isValid;
}

QString OAIImportResultDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportResultDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_current_system_version_isSet) {
        obj.insert(QString("currentSystemVersion"), ::OpenAPI::toJsonValue(m_current_system_version));
    }
    if (m_imported_reports_names.size() > 0) {
        obj.insert(QString("importedReportsNames"), ::OpenAPI::toJsonValue(m_imported_reports_names));
    }
    if (m_invalid_reports_names.size() > 0) {
        obj.insert(QString("invalidReportsNames"), ::OpenAPI::toJsonValue(m_invalid_reports_names));
    }
    if (m_target_system_version_isSet) {
        obj.insert(QString("targetSystemVersion"), ::OpenAPI::toJsonValue(m_target_system_version));
    }
    return obj;
}

QString OAIImportResultDTO::getCurrentSystemVersion() const {
    return m_current_system_version;
}
void OAIImportResultDTO::setCurrentSystemVersion(const QString &current_system_version) {
    m_current_system_version = current_system_version;
    m_current_system_version_isSet = true;
}

bool OAIImportResultDTO::is_current_system_version_Set() const{
    return m_current_system_version_isSet;
}

bool OAIImportResultDTO::is_current_system_version_Valid() const{
    return m_current_system_version_isValid;
}

QList<QString> OAIImportResultDTO::getImportedReportsNames() const {
    return m_imported_reports_names;
}
void OAIImportResultDTO::setImportedReportsNames(const QList<QString> &imported_reports_names) {
    m_imported_reports_names = imported_reports_names;
    m_imported_reports_names_isSet = true;
}

bool OAIImportResultDTO::is_imported_reports_names_Set() const{
    return m_imported_reports_names_isSet;
}

bool OAIImportResultDTO::is_imported_reports_names_Valid() const{
    return m_imported_reports_names_isValid;
}

QList<QString> OAIImportResultDTO::getInvalidReportsNames() const {
    return m_invalid_reports_names;
}
void OAIImportResultDTO::setInvalidReportsNames(const QList<QString> &invalid_reports_names) {
    m_invalid_reports_names = invalid_reports_names;
    m_invalid_reports_names_isSet = true;
}

bool OAIImportResultDTO::is_invalid_reports_names_Set() const{
    return m_invalid_reports_names_isSet;
}

bool OAIImportResultDTO::is_invalid_reports_names_Valid() const{
    return m_invalid_reports_names_isValid;
}

QString OAIImportResultDTO::getTargetSystemVersion() const {
    return m_target_system_version;
}
void OAIImportResultDTO::setTargetSystemVersion(const QString &target_system_version) {
    m_target_system_version = target_system_version;
    m_target_system_version_isSet = true;
}

bool OAIImportResultDTO::is_target_system_version_Set() const{
    return m_target_system_version_isSet;
}

bool OAIImportResultDTO::is_target_system_version_Valid() const{
    return m_target_system_version_isValid;
}

bool OAIImportResultDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_system_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_reports_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_reports_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_system_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportResultDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
