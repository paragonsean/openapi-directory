/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceivableCreateDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceivableCreateDTO::OAIReceivableCreateDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceivableCreateDTO::OAIReceivableCreateDTO() {
    this->initializeModel();
}

OAIReceivableCreateDTO::~OAIReceivableCreateDTO() {}

void OAIReceivableCreateDTO::initializeModel() {

    m_calculation_unit_id_isSet = false;
    m_calculation_unit_id_isValid = false;

    m_cat_log_file_isSet = false;
    m_cat_log_file_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignore_minimum_charge_isSet = false;
    m_ignore_minimum_charge_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_job_type_id_isSet = false;
    m_job_type_id_isValid = false;

    m_language_combination_isSet = false;
    m_language_combination_isValid = false;

    m_language_combination_id_number_isSet = false;
    m_language_combination_id_number_isValid = false;

    m_minimum_charge_isSet = false;
    m_minimum_charge_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_rate_origin_isSet = false;
    m_rate_origin_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReceivableCreateDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceivableCreateDTO::fromJsonObject(QJsonObject json) {

    m_calculation_unit_id_isValid = ::OpenAPI::fromJsonValue(m_calculation_unit_id, json[QString("calculationUnitId")]);
    m_calculation_unit_id_isSet = !json[QString("calculationUnitId")].isNull() && m_calculation_unit_id_isValid;

    m_cat_log_file_isValid = ::OpenAPI::fromJsonValue(m_cat_log_file, json[QString("catLogFile")]);
    m_cat_log_file_isSet = !json[QString("catLogFile")].isNull() && m_cat_log_file_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignore_minimum_charge_isValid = ::OpenAPI::fromJsonValue(m_ignore_minimum_charge, json[QString("ignoreMinimumCharge")]);
    m_ignore_minimum_charge_isSet = !json[QString("ignoreMinimumCharge")].isNull() && m_ignore_minimum_charge_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("invoiceId")]);
    m_invoice_id_isSet = !json[QString("invoiceId")].isNull() && m_invoice_id_isValid;

    m_job_type_id_isValid = ::OpenAPI::fromJsonValue(m_job_type_id, json[QString("jobTypeId")]);
    m_job_type_id_isSet = !json[QString("jobTypeId")].isNull() && m_job_type_id_isValid;

    m_language_combination_isValid = ::OpenAPI::fromJsonValue(m_language_combination, json[QString("languageCombination")]);
    m_language_combination_isSet = !json[QString("languageCombination")].isNull() && m_language_combination_isValid;

    m_language_combination_id_number_isValid = ::OpenAPI::fromJsonValue(m_language_combination_id_number, json[QString("languageCombinationIdNumber")]);
    m_language_combination_id_number_isSet = !json[QString("languageCombinationIdNumber")].isNull() && m_language_combination_id_number_isValid;

    m_minimum_charge_isValid = ::OpenAPI::fromJsonValue(m_minimum_charge, json[QString("minimumCharge")]);
    m_minimum_charge_isSet = !json[QString("minimumCharge")].isNull() && m_minimum_charge_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_rate_origin_isValid = ::OpenAPI::fromJsonValue(m_rate_origin, json[QString("rateOrigin")]);
    m_rate_origin_isSet = !json[QString("rateOrigin")].isNull() && m_rate_origin_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReceivableCreateDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceivableCreateDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_calculation_unit_id_isSet) {
        obj.insert(QString("calculationUnitId"), ::OpenAPI::toJsonValue(m_calculation_unit_id));
    }
    if (m_cat_log_file.isSet()) {
        obj.insert(QString("catLogFile"), ::OpenAPI::toJsonValue(m_cat_log_file));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignore_minimum_charge_isSet) {
        obj.insert(QString("ignoreMinimumCharge"), ::OpenAPI::toJsonValue(m_ignore_minimum_charge));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("invoiceId"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_job_type_id_isSet) {
        obj.insert(QString("jobTypeId"), ::OpenAPI::toJsonValue(m_job_type_id));
    }
    if (m_language_combination.isSet()) {
        obj.insert(QString("languageCombination"), ::OpenAPI::toJsonValue(m_language_combination));
    }
    if (m_language_combination_id_number_isSet) {
        obj.insert(QString("languageCombinationIdNumber"), ::OpenAPI::toJsonValue(m_language_combination_id_number));
    }
    if (m_minimum_charge_isSet) {
        obj.insert(QString("minimumCharge"), ::OpenAPI::toJsonValue(m_minimum_charge));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_rate_origin_isSet) {
        obj.insert(QString("rateOrigin"), ::OpenAPI::toJsonValue(m_rate_origin));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAIReceivableCreateDTO::getCalculationUnitId() const {
    return m_calculation_unit_id;
}
void OAIReceivableCreateDTO::setCalculationUnitId(const qint64 &calculation_unit_id) {
    m_calculation_unit_id = calculation_unit_id;
    m_calculation_unit_id_isSet = true;
}

bool OAIReceivableCreateDTO::is_calculation_unit_id_Set() const{
    return m_calculation_unit_id_isSet;
}

bool OAIReceivableCreateDTO::is_calculation_unit_id_Valid() const{
    return m_calculation_unit_id_isValid;
}

OAIFileDTO OAIReceivableCreateDTO::getCatLogFile() const {
    return m_cat_log_file;
}
void OAIReceivableCreateDTO::setCatLogFile(const OAIFileDTO &cat_log_file) {
    m_cat_log_file = cat_log_file;
    m_cat_log_file_isSet = true;
}

bool OAIReceivableCreateDTO::is_cat_log_file_Set() const{
    return m_cat_log_file_isSet;
}

bool OAIReceivableCreateDTO::is_cat_log_file_Valid() const{
    return m_cat_log_file_isValid;
}

qint64 OAIReceivableCreateDTO::getCurrencyId() const {
    return m_currency_id;
}
void OAIReceivableCreateDTO::setCurrencyId(const qint64 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIReceivableCreateDTO::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIReceivableCreateDTO::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAIReceivableCreateDTO::getDescription() const {
    return m_description;
}
void OAIReceivableCreateDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReceivableCreateDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReceivableCreateDTO::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIReceivableCreateDTO::getId() const {
    return m_id;
}
void OAIReceivableCreateDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReceivableCreateDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReceivableCreateDTO::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIReceivableCreateDTO::isIgnoreMinimumCharge() const {
    return m_ignore_minimum_charge;
}
void OAIReceivableCreateDTO::setIgnoreMinimumCharge(const bool &ignore_minimum_charge) {
    m_ignore_minimum_charge = ignore_minimum_charge;
    m_ignore_minimum_charge_isSet = true;
}

bool OAIReceivableCreateDTO::is_ignore_minimum_charge_Set() const{
    return m_ignore_minimum_charge_isSet;
}

bool OAIReceivableCreateDTO::is_ignore_minimum_charge_Valid() const{
    return m_ignore_minimum_charge_isValid;
}

QString OAIReceivableCreateDTO::getInvoiceId() const {
    return m_invoice_id;
}
void OAIReceivableCreateDTO::setInvoiceId(const QString &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIReceivableCreateDTO::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIReceivableCreateDTO::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

qint64 OAIReceivableCreateDTO::getJobTypeId() const {
    return m_job_type_id;
}
void OAIReceivableCreateDTO::setJobTypeId(const qint64 &job_type_id) {
    m_job_type_id = job_type_id;
    m_job_type_id_isSet = true;
}

bool OAIReceivableCreateDTO::is_job_type_id_Set() const{
    return m_job_type_id_isSet;
}

bool OAIReceivableCreateDTO::is_job_type_id_Valid() const{
    return m_job_type_id_isValid;
}

OAIChargeLanguageCombinationDTO OAIReceivableCreateDTO::getLanguageCombination() const {
    return m_language_combination;
}
void OAIReceivableCreateDTO::setLanguageCombination(const OAIChargeLanguageCombinationDTO &language_combination) {
    m_language_combination = language_combination;
    m_language_combination_isSet = true;
}

bool OAIReceivableCreateDTO::is_language_combination_Set() const{
    return m_language_combination_isSet;
}

bool OAIReceivableCreateDTO::is_language_combination_Valid() const{
    return m_language_combination_isValid;
}

QString OAIReceivableCreateDTO::getLanguageCombinationIdNumber() const {
    return m_language_combination_id_number;
}
void OAIReceivableCreateDTO::setLanguageCombinationIdNumber(const QString &language_combination_id_number) {
    m_language_combination_id_number = language_combination_id_number;
    m_language_combination_id_number_isSet = true;
}

bool OAIReceivableCreateDTO::is_language_combination_id_number_Set() const{
    return m_language_combination_id_number_isSet;
}

bool OAIReceivableCreateDTO::is_language_combination_id_number_Valid() const{
    return m_language_combination_id_number_isValid;
}

double OAIReceivableCreateDTO::getMinimumCharge() const {
    return m_minimum_charge;
}
void OAIReceivableCreateDTO::setMinimumCharge(const double &minimum_charge) {
    m_minimum_charge = minimum_charge;
    m_minimum_charge_isSet = true;
}

bool OAIReceivableCreateDTO::is_minimum_charge_Set() const{
    return m_minimum_charge_isSet;
}

bool OAIReceivableCreateDTO::is_minimum_charge_Valid() const{
    return m_minimum_charge_isValid;
}

double OAIReceivableCreateDTO::getQuantity() const {
    return m_quantity;
}
void OAIReceivableCreateDTO::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIReceivableCreateDTO::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIReceivableCreateDTO::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAIReceivableCreateDTO::getRate() const {
    return m_rate;
}
void OAIReceivableCreateDTO::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIReceivableCreateDTO::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIReceivableCreateDTO::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIReceivableCreateDTO::getRateOrigin() const {
    return m_rate_origin;
}
void OAIReceivableCreateDTO::setRateOrigin(const QString &rate_origin) {
    m_rate_origin = rate_origin;
    m_rate_origin_isSet = true;
}

bool OAIReceivableCreateDTO::is_rate_origin_Set() const{
    return m_rate_origin_isSet;
}

bool OAIReceivableCreateDTO::is_rate_origin_Valid() const{
    return m_rate_origin_isValid;
}

qint64 OAIReceivableCreateDTO::getTaskId() const {
    return m_task_id;
}
void OAIReceivableCreateDTO::setTaskId(const qint64 &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIReceivableCreateDTO::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIReceivableCreateDTO::is_task_id_Valid() const{
    return m_task_id_isValid;
}

double OAIReceivableCreateDTO::getTotal() const {
    return m_total;
}
void OAIReceivableCreateDTO::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIReceivableCreateDTO::is_total_Set() const{
    return m_total_isSet;
}

bool OAIReceivableCreateDTO::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIReceivableCreateDTO::getType() const {
    return m_type;
}
void OAIReceivableCreateDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReceivableCreateDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReceivableCreateDTO::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReceivableCreateDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculation_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cat_log_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_minimum_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_combination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_combination_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceivableCreateDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
