/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDTO::OAIPaymentDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDTO::OAIPaymentDTO() {
    this->initializeModel();
}

OAIPaymentDTO::~OAIPaymentDTO() {}

void OAIPaymentDTO::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;
}

void OAIPaymentDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDTO::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("paymentDate")]);
    m_payment_date_isSet = !json[QString("paymentDate")].isNull() && m_payment_date_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("paymentMethodId")]);
    m_payment_method_id_isSet = !json[QString("paymentMethodId")].isNull() && m_payment_method_id_isValid;
}

QString OAIPaymentDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_payment_date.isSet()) {
        obj.insert(QString("paymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_payment_method_id_isSet) {
        obj.insert(QString("paymentMethodId"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    return obj;
}

double OAIPaymentDTO::getAmount() const {
    return m_amount;
}
void OAIPaymentDTO::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentDTO::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentDTO::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPaymentDTO::getNotes() const {
    return m_notes;
}
void OAIPaymentDTO::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPaymentDTO::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPaymentDTO::is_notes_Valid() const{
    return m_notes_isValid;
}

OAITimeDTO OAIPaymentDTO::getPaymentDate() const {
    return m_payment_date;
}
void OAIPaymentDTO::setPaymentDate(const OAITimeDTO &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPaymentDTO::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPaymentDTO::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

qint64 OAIPaymentDTO::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAIPaymentDTO::setPaymentMethodId(const qint64 &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAIPaymentDTO::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAIPaymentDTO::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

bool OAIPaymentDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
