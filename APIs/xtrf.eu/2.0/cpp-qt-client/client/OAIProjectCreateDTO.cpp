/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectCreateDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectCreateDTO::OAIProjectCreateDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectCreateDTO::OAIProjectCreateDTO() {
    this->initializeModel();
}

OAIProjectCreateDTO::~OAIProjectCreateDTO() {}

void OAIProjectCreateDTO::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;
}

void OAIProjectCreateDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectCreateDTO::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;
}

QString OAIProjectCreateDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectCreateDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    return obj;
}

qint64 OAIProjectCreateDTO::getClientId() const {
    return m_client_id;
}
void OAIProjectCreateDTO::setClientId(const qint64 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIProjectCreateDTO::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIProjectCreateDTO::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIProjectCreateDTO::getExternalId() const {
    return m_external_id;
}
void OAIProjectCreateDTO::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIProjectCreateDTO::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIProjectCreateDTO::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIProjectCreateDTO::getName() const {
    return m_name;
}
void OAIProjectCreateDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectCreateDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectCreateDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIProjectCreateDTO::getServiceId() const {
    return m_service_id;
}
void OAIProjectCreateDTO::setServiceId(const qint64 &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIProjectCreateDTO::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIProjectCreateDTO::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAIProjectCreateDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectCreateDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
