/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectFileAddedByDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectFileAddedByDto::OAIProjectFileAddedByDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectFileAddedByDto::OAIProjectFileAddedByDto() {
    this->initializeModel();
}

OAIProjectFileAddedByDto::~OAIProjectFileAddedByDto() {}

void OAIProjectFileAddedByDto::initializeModel() {

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAIProjectFileAddedByDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectFileAddedByDto::fromJsonObject(QJsonObject json) {

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendorId")]);
    m_vendor_id_isSet = !json[QString("vendorId")].isNull() && m_vendor_id_isValid;
}

QString OAIProjectFileAddedByDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectFileAddedByDto::asJsonObject() const {
    QJsonObject obj;
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(m_user_type));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendorId"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

QString OAIProjectFileAddedByDto::getUserType() const {
    return m_user_type;
}
void OAIProjectFileAddedByDto::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIProjectFileAddedByDto::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIProjectFileAddedByDto::is_user_type_Valid() const{
    return m_user_type_isValid;
}

qint64 OAIProjectFileAddedByDto::getVendorId() const {
    return m_vendor_id;
}
void OAIProjectFileAddedByDto::setVendorId(const qint64 &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIProjectFileAddedByDto::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIProjectFileAddedByDto::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAIProjectFileAddedByDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectFileAddedByDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
