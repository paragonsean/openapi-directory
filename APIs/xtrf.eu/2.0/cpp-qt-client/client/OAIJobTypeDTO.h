/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobTypeDTO.h
 *
 * 
 */

#ifndef OAIJobTypeDTO_H
#define OAIJobTypeDTO_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJobTypeDTO : public OAIObject {
public:
    OAIJobTypeDTO();
    OAIJobTypeDTO(QString json);
    ~OAIJobTypeDTO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    QList<qint64> getCalculationUnitIds() const;
    void setCalculationUnitIds(const QList<qint64> &calculation_unit_ids);
    bool is_calculation_unit_ids_Set() const;
    bool is_calculation_unit_ids_Valid() const;

    bool isRDefault() const;
    void setRDefault(const bool &r_default);
    bool is_r_default_Set() const;
    bool is_r_default_Valid() const;

    bool isFilesNeeded() const;
    void setFilesNeeded(const bool &files_needed);
    bool is_files_needed_Set() const;
    bool is_files_needed_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isPreferred() const;
    void setPreferred(const bool &preferred);
    bool is_preferred_Set() const;
    bool is_preferred_Valid() const;

    bool isProvidedByClient() const;
    void setProvidedByClient(const bool &provided_by_client);
    bool is_provided_by_client_Set() const;
    bool is_provided_by_client_Valid() const;

    QString getRelationToLanguage() const;
    void setRelationToLanguage(const QString &relation_to_language);
    bool is_relation_to_language_Set() const;
    bool is_relation_to_language_Valid() const;

    double getVendorProductivity() const;
    void setVendorProductivity(const double &vendor_productivity);
    bool is_vendor_productivity_Set() const;
    bool is_vendor_productivity_Valid() const;

    qint64 getVendorProductivityCalculationUnitId() const;
    void setVendorProductivityCalculationUnitId(const qint64 &vendor_productivity_calculation_unit_id);
    bool is_vendor_productivity_calculation_unit_id_Set() const;
    bool is_vendor_productivity_calculation_unit_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    QList<qint64> m_calculation_unit_ids;
    bool m_calculation_unit_ids_isSet;
    bool m_calculation_unit_ids_isValid;

    bool m_r_default;
    bool m_r_default_isSet;
    bool m_r_default_isValid;

    bool m_files_needed;
    bool m_files_needed_isSet;
    bool m_files_needed_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_preferred;
    bool m_preferred_isSet;
    bool m_preferred_isValid;

    bool m_provided_by_client;
    bool m_provided_by_client_isSet;
    bool m_provided_by_client_isValid;

    QString m_relation_to_language;
    bool m_relation_to_language_isSet;
    bool m_relation_to_language_isValid;

    double m_vendor_productivity;
    bool m_vendor_productivity_isSet;
    bool m_vendor_productivity_isValid;

    qint64 m_vendor_productivity_calculation_unit_id;
    bool m_vendor_productivity_calculation_unit_id_isSet;
    bool m_vendor_productivity_calculation_unit_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobTypeDTO)

#endif // OAIJobTypeDTO_H
