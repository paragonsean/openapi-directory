/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientsApi_H
#define OAI_OAIClientsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessTokenDTO.h"
#include "OAIAccessTokenRequestDTO.h"
#include "OAIAddressDTO.h"
#include "OAIContactDTO.h"
#include "OAICustomFieldDTO.h"
#include "OAICustomerDTO.h"
#include "OAICustomerPersonDTO.h"
#include "OAIEntityWithNameDTO.h"
#include "OAIPersonContactDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientsApi : public QObject {
    Q_OBJECT

public:
    OAIClientsApi(const int timeOut = 0);
    ~OAIClientsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_customer_person_dto OAICustomerPersonDTO [required]
    */
    virtual void create2(const OAICustomerPersonDTO &oai_customer_person_dto);

    /**
    * @param[in]  oai_customer_dto OAICustomerDTO [required]
    */
    virtual void create3(const OAICustomerDTO &oai_customer_dto);

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void delete3(const qint64 &person_id);

    /**
    * @param[in]  price_list_id qint64 [required]
    */
    virtual void delete4(const qint64 &price_list_id);

    /**
    * @param[in]  customer_id qint64 [required]
    */
    virtual void delete5(const qint64 &customer_id);

    /**
    * @param[in]  oai_access_token_request_dto OAIAccessTokenRequestDTO [required]
    */
    virtual void generateSingleUseSignInToken(const OAIAccessTokenRequestDTO &oai_access_token_request_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    */
    virtual void getAddress(const qint64 &customer_id);

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllIds1(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  updated_since qint64 [optional]
    * @param[in]  name_equals QString [optional]
    * @param[in]  email_equals QString [optional]
    */
    virtual void getAllIds2(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &name_equals = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email_equals = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllNamesWithIds(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void getById1(const qint64 &person_id);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  embed QString [optional]
    */
    virtual void getById2(const qint64 &customer_id, const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    */
    virtual void getCategories(const qint64 &customer_id);

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void getContact(const qint64 &person_id);

    /**
    * @param[in]  customer_id qint64 [required]
    */
    virtual void getContact1(const qint64 &customer_id);

    /**
    * @param[in]  customer_id qint64 [required]
    */
    virtual void getCorrespondenceAddress(const qint64 &customer_id);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  custom_field_key QString [required]
    */
    virtual void getCustomField(const qint64 &customer_id, const QString &custom_field_key);

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void getCustomFields(const qint64 &person_id);

    /**
    * @param[in]  customer_id qint64 [required]
    */
    virtual void getCustomFields1(const qint64 &customer_id);

    /**
    * @param[in]  customer_id qint64 [required]
    */
    virtual void getIndustries(const qint64 &customer_id);

    /**
    * @param[in]  person_id qint64 [required]
    * @param[in]  oai_customer_person_dto OAICustomerPersonDTO [required]
    */
    virtual void update1(const qint64 &person_id, const OAICustomerPersonDTO &oai_customer_person_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_customer_dto OAICustomerDTO [required]
    */
    virtual void update2(const qint64 &customer_id, const OAICustomerDTO &oai_customer_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_address_dto OAIAddressDTO [required]
    */
    virtual void updateAddress(const qint64 &customer_id, const OAIAddressDTO &oai_address_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  request_body QList<qint64> [required]
    */
    virtual void updateCategories(const qint64 &customer_id, const QList<qint64> &request_body);

    /**
    * @param[in]  person_id qint64 [required]
    * @param[in]  oai_person_contact_dto OAIPersonContactDTO [required]
    */
    virtual void updateContact(const qint64 &person_id, const OAIPersonContactDTO &oai_person_contact_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_contact_dto OAIContactDTO [required]
    */
    virtual void updateContact1(const qint64 &customer_id, const OAIContactDTO &oai_contact_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_address_dto OAIAddressDTO [required]
    */
    virtual void updateCorrespondenceAddress(const qint64 &customer_id, const OAIAddressDTO &oai_address_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  custom_field_key QString [required]
    * @param[in]  oai_custom_field_dto OAICustomFieldDTO [required]
    */
    virtual void updateCustomField(const qint64 &customer_id, const QString &custom_field_key, const OAICustomFieldDTO &oai_custom_field_dto);

    /**
    * @param[in]  person_id qint64 [required]
    * @param[in]  oai_custom_field_dto QList<OAICustomFieldDTO> [required]
    */
    virtual void updateCustomFields(const qint64 &person_id, const QList<OAICustomFieldDTO> &oai_custom_field_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_custom_field_dto QList<OAICustomFieldDTO> [required]
    */
    virtual void updateCustomFields1(const qint64 &customer_id, const QList<OAICustomFieldDTO> &oai_custom_field_dto);

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  request_body QList<qint64> [required]
    */
    virtual void updateIndustries(const qint64 &customer_id, const QList<qint64> &request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void create2Callback(OAIHttpRequestWorker *worker);
    void create3Callback(OAIHttpRequestWorker *worker);
    void delete3Callback(OAIHttpRequestWorker *worker);
    void delete4Callback(OAIHttpRequestWorker *worker);
    void delete5Callback(OAIHttpRequestWorker *worker);
    void generateSingleUseSignInTokenCallback(OAIHttpRequestWorker *worker);
    void getAddressCallback(OAIHttpRequestWorker *worker);
    void getAllIds1Callback(OAIHttpRequestWorker *worker);
    void getAllIds2Callback(OAIHttpRequestWorker *worker);
    void getAllNamesWithIdsCallback(OAIHttpRequestWorker *worker);
    void getById1Callback(OAIHttpRequestWorker *worker);
    void getById2Callback(OAIHttpRequestWorker *worker);
    void getCategoriesCallback(OAIHttpRequestWorker *worker);
    void getContactCallback(OAIHttpRequestWorker *worker);
    void getContact1Callback(OAIHttpRequestWorker *worker);
    void getCorrespondenceAddressCallback(OAIHttpRequestWorker *worker);
    void getCustomFieldCallback(OAIHttpRequestWorker *worker);
    void getCustomFieldsCallback(OAIHttpRequestWorker *worker);
    void getCustomFields1Callback(OAIHttpRequestWorker *worker);
    void getIndustriesCallback(OAIHttpRequestWorker *worker);
    void update1Callback(OAIHttpRequestWorker *worker);
    void update2Callback(OAIHttpRequestWorker *worker);
    void updateAddressCallback(OAIHttpRequestWorker *worker);
    void updateCategoriesCallback(OAIHttpRequestWorker *worker);
    void updateContactCallback(OAIHttpRequestWorker *worker);
    void updateContact1Callback(OAIHttpRequestWorker *worker);
    void updateCorrespondenceAddressCallback(OAIHttpRequestWorker *worker);
    void updateCustomFieldCallback(OAIHttpRequestWorker *worker);
    void updateCustomFieldsCallback(OAIHttpRequestWorker *worker);
    void updateCustomFields1Callback(OAIHttpRequestWorker *worker);
    void updateIndustriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void create2Signal(OAICustomerPersonDTO summary);
    void create3Signal(OAICustomerDTO summary);
    void delete3Signal();
    void delete4Signal();
    void delete5Signal();
    void generateSingleUseSignInTokenSignal(OAIAccessTokenDTO summary);
    void getAddressSignal(OAIAddressDTO summary);
    void getAllIds1Signal(QList<qint32> summary);
    void getAllIds2Signal(QList<qint32> summary);
    void getAllNamesWithIdsSignal(QList<OAIEntityWithNameDTO> summary);
    void getById1Signal(OAICustomerPersonDTO summary);
    void getById2Signal(OAICustomerDTO summary);
    void getCategoriesSignal(QList<qint64> summary);
    void getContactSignal(OAIPersonContactDTO summary);
    void getContact1Signal(OAIContactDTO summary);
    void getCorrespondenceAddressSignal(OAIAddressDTO summary);
    void getCustomFieldSignal(OAICustomFieldDTO summary);
    void getCustomFieldsSignal(QList<OAICustomFieldDTO> summary);
    void getCustomFields1Signal(QList<OAICustomFieldDTO> summary);
    void getIndustriesSignal(QList<qint64> summary);
    void update1Signal(OAICustomerPersonDTO summary);
    void update2Signal(OAICustomerDTO summary);
    void updateAddressSignal(OAIAddressDTO summary);
    void updateCategoriesSignal(QList<qint64> summary);
    void updateContactSignal(OAIPersonContactDTO summary);
    void updateContact1Signal(OAIContactDTO summary);
    void updateCorrespondenceAddressSignal(OAIAddressDTO summary);
    void updateCustomFieldSignal(OAICustomFieldDTO summary);
    void updateCustomFieldsSignal(QList<OAICustomFieldDTO> summary);
    void updateCustomFields1Signal(QList<OAICustomFieldDTO> summary);
    void updateIndustriesSignal(QList<qint64> summary);


    void create2SignalFull(OAIHttpRequestWorker *worker, OAICustomerPersonDTO summary);
    void create3SignalFull(OAIHttpRequestWorker *worker, OAICustomerDTO summary);
    void delete3SignalFull(OAIHttpRequestWorker *worker);
    void delete4SignalFull(OAIHttpRequestWorker *worker);
    void delete5SignalFull(OAIHttpRequestWorker *worker);
    void generateSingleUseSignInTokenSignalFull(OAIHttpRequestWorker *worker, OAIAccessTokenDTO summary);
    void getAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddressDTO summary);
    void getAllIds1SignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getAllIds2SignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getAllNamesWithIdsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityWithNameDTO> summary);
    void getById1SignalFull(OAIHttpRequestWorker *worker, OAICustomerPersonDTO summary);
    void getById2SignalFull(OAIHttpRequestWorker *worker, OAICustomerDTO summary);
    void getCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<qint64> summary);
    void getContactSignalFull(OAIHttpRequestWorker *worker, OAIPersonContactDTO summary);
    void getContact1SignalFull(OAIHttpRequestWorker *worker, OAIContactDTO summary);
    void getCorrespondenceAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddressDTO summary);
    void getCustomFieldSignalFull(OAIHttpRequestWorker *worker, OAICustomFieldDTO summary);
    void getCustomFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getCustomFields1SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getIndustriesSignalFull(OAIHttpRequestWorker *worker, QList<qint64> summary);
    void update1SignalFull(OAIHttpRequestWorker *worker, OAICustomerPersonDTO summary);
    void update2SignalFull(OAIHttpRequestWorker *worker, OAICustomerDTO summary);
    void updateAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddressDTO summary);
    void updateCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<qint64> summary);
    void updateContactSignalFull(OAIHttpRequestWorker *worker, OAIPersonContactDTO summary);
    void updateContact1SignalFull(OAIHttpRequestWorker *worker, OAIContactDTO summary);
    void updateCorrespondenceAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddressDTO summary);
    void updateCustomFieldSignalFull(OAIHttpRequestWorker *worker, OAICustomFieldDTO summary);
    void updateCustomFieldsSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void updateCustomFields1SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void updateIndustriesSignalFull(OAIHttpRequestWorker *worker, QList<qint64> summary);

    Q_DECL_DEPRECATED_X("Use create2SignalError() instead")
    void create2SignalE(OAICustomerPersonDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create2SignalError(OAICustomerPersonDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create3SignalError() instead")
    void create3SignalE(OAICustomerDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create3SignalError(OAICustomerDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete3SignalError() instead")
    void delete3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete4SignalError() instead")
    void delete4SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete4SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete5SignalError() instead")
    void delete5SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete5SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateSingleUseSignInTokenSignalError() instead")
    void generateSingleUseSignInTokenSignalE(OAIAccessTokenDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateSingleUseSignInTokenSignalError(OAIAccessTokenDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressSignalError() instead")
    void getAddressSignalE(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalError(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds1SignalError() instead")
    void getAllIds1SignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds1SignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds2SignalError() instead")
    void getAllIds2SignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds2SignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllNamesWithIdsSignalError() instead")
    void getAllNamesWithIdsSignalE(QList<OAIEntityWithNameDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllNamesWithIdsSignalError(QList<OAIEntityWithNameDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById1SignalError() instead")
    void getById1SignalE(OAICustomerPersonDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById1SignalError(OAICustomerPersonDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById2SignalError() instead")
    void getById2SignalE(OAICustomerDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById2SignalError(OAICustomerDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoriesSignalError() instead")
    void getCategoriesSignalE(QList<qint64> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesSignalError(QList<qint64> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactSignalError() instead")
    void getContactSignalE(OAIPersonContactDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalError(OAIPersonContactDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContact1SignalError() instead")
    void getContact1SignalE(OAIContactDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContact1SignalError(OAIContactDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorrespondenceAddressSignalError() instead")
    void getCorrespondenceAddressSignalE(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorrespondenceAddressSignalError(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldSignalError() instead")
    void getCustomFieldSignalE(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldSignalError(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldsSignalError() instead")
    void getCustomFieldsSignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldsSignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields1SignalError() instead")
    void getCustomFields1SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields1SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndustriesSignalError() instead")
    void getIndustriesSignalE(QList<qint64> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIndustriesSignalError(QList<qint64> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update1SignalError() instead")
    void update1SignalE(OAICustomerPersonDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void update1SignalError(OAICustomerPersonDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update2SignalError() instead")
    void update2SignalE(OAICustomerDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void update2SignalError(OAICustomerDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAddressSignalError() instead")
    void updateAddressSignalE(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAddressSignalError(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCategoriesSignalError() instead")
    void updateCategoriesSignalE(QList<qint64> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCategoriesSignalError(QList<qint64> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactSignalError() instead")
    void updateContactSignalE(OAIPersonContactDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactSignalError(OAIPersonContactDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContact1SignalError() instead")
    void updateContact1SignalE(OAIContactDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContact1SignalError(OAIContactDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCorrespondenceAddressSignalError() instead")
    void updateCorrespondenceAddressSignalE(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCorrespondenceAddressSignalError(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldSignalError() instead")
    void updateCustomFieldSignalE(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldSignalError(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldsSignalError() instead")
    void updateCustomFieldsSignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldsSignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields1SignalError() instead")
    void updateCustomFields1SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields1SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIndustriesSignalError() instead")
    void updateIndustriesSignalE(QList<qint64> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIndustriesSignalError(QList<qint64> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use create2SignalErrorFull() instead")
    void create2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create3SignalErrorFull() instead")
    void create3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete3SignalErrorFull() instead")
    void delete3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete4SignalErrorFull() instead")
    void delete4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete5SignalErrorFull() instead")
    void delete5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateSingleUseSignInTokenSignalErrorFull() instead")
    void generateSingleUseSignInTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateSingleUseSignInTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressSignalErrorFull() instead")
    void getAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds1SignalErrorFull() instead")
    void getAllIds1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds2SignalErrorFull() instead")
    void getAllIds2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllNamesWithIdsSignalErrorFull() instead")
    void getAllNamesWithIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllNamesWithIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById1SignalErrorFull() instead")
    void getById1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById2SignalErrorFull() instead")
    void getById2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoriesSignalErrorFull() instead")
    void getCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactSignalErrorFull() instead")
    void getContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContact1SignalErrorFull() instead")
    void getContact1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContact1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorrespondenceAddressSignalErrorFull() instead")
    void getCorrespondenceAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorrespondenceAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldSignalErrorFull() instead")
    void getCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFieldsSignalErrorFull() instead")
    void getCustomFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields1SignalErrorFull() instead")
    void getCustomFields1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndustriesSignalErrorFull() instead")
    void getIndustriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIndustriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update1SignalErrorFull() instead")
    void update1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void update1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update2SignalErrorFull() instead")
    void update2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void update2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAddressSignalErrorFull() instead")
    void updateAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCategoriesSignalErrorFull() instead")
    void updateCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactSignalErrorFull() instead")
    void updateContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContact1SignalErrorFull() instead")
    void updateContact1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContact1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCorrespondenceAddressSignalErrorFull() instead")
    void updateCorrespondenceAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCorrespondenceAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldSignalErrorFull() instead")
    void updateCustomFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFieldsSignalErrorFull() instead")
    void updateCustomFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields1SignalErrorFull() instead")
    void updateCustomFields1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIndustriesSignalErrorFull() instead")
    void updateIndustriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIndustriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
