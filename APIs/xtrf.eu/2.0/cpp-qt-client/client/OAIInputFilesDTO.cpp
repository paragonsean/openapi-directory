/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputFilesDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputFilesDTO::OAIInputFilesDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputFilesDTO::OAIInputFilesDTO() {
    this->initializeModel();
}

OAIInputFilesDTO::~OAIInputFilesDTO() {}

void OAIInputFilesDTO::initializeModel() {

    m_log_files_isSet = false;
    m_log_files_isValid = false;

    m_reference_files_isSet = false;
    m_reference_files_isValid = false;

    m_terminology_isSet = false;
    m_terminology_isValid = false;

    m_tm_isSet = false;
    m_tm_isValid = false;

    m_work_files_isSet = false;
    m_work_files_isValid = false;
}

void OAIInputFilesDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputFilesDTO::fromJsonObject(QJsonObject json) {

    m_log_files_isValid = ::OpenAPI::fromJsonValue(m_log_files, json[QString("logFiles")]);
    m_log_files_isSet = !json[QString("logFiles")].isNull() && m_log_files_isValid;

    m_reference_files_isValid = ::OpenAPI::fromJsonValue(m_reference_files, json[QString("referenceFiles")]);
    m_reference_files_isSet = !json[QString("referenceFiles")].isNull() && m_reference_files_isValid;

    m_terminology_isValid = ::OpenAPI::fromJsonValue(m_terminology, json[QString("terminology")]);
    m_terminology_isSet = !json[QString("terminology")].isNull() && m_terminology_isValid;

    m_tm_isValid = ::OpenAPI::fromJsonValue(m_tm, json[QString("tm")]);
    m_tm_isSet = !json[QString("tm")].isNull() && m_tm_isValid;

    m_work_files_isValid = ::OpenAPI::fromJsonValue(m_work_files, json[QString("workFiles")]);
    m_work_files_isSet = !json[QString("workFiles")].isNull() && m_work_files_isValid;
}

QString OAIInputFilesDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputFilesDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_log_files.size() > 0) {
        obj.insert(QString("logFiles"), ::OpenAPI::toJsonValue(m_log_files));
    }
    if (m_reference_files.size() > 0) {
        obj.insert(QString("referenceFiles"), ::OpenAPI::toJsonValue(m_reference_files));
    }
    if (m_terminology.size() > 0) {
        obj.insert(QString("terminology"), ::OpenAPI::toJsonValue(m_terminology));
    }
    if (m_tm.size() > 0) {
        obj.insert(QString("tm"), ::OpenAPI::toJsonValue(m_tm));
    }
    if (m_work_files.size() > 0) {
        obj.insert(QString("workFiles"), ::OpenAPI::toJsonValue(m_work_files));
    }
    return obj;
}

QList<OAIFileDTO> OAIInputFilesDTO::getLogFiles() const {
    return m_log_files;
}
void OAIInputFilesDTO::setLogFiles(const QList<OAIFileDTO> &log_files) {
    m_log_files = log_files;
    m_log_files_isSet = true;
}

bool OAIInputFilesDTO::is_log_files_Set() const{
    return m_log_files_isSet;
}

bool OAIInputFilesDTO::is_log_files_Valid() const{
    return m_log_files_isValid;
}

QList<OAIFileDTO> OAIInputFilesDTO::getReferenceFiles() const {
    return m_reference_files;
}
void OAIInputFilesDTO::setReferenceFiles(const QList<OAIFileDTO> &reference_files) {
    m_reference_files = reference_files;
    m_reference_files_isSet = true;
}

bool OAIInputFilesDTO::is_reference_files_Set() const{
    return m_reference_files_isSet;
}

bool OAIInputFilesDTO::is_reference_files_Valid() const{
    return m_reference_files_isValid;
}

QList<OAIFileDTO> OAIInputFilesDTO::getTerminology() const {
    return m_terminology;
}
void OAIInputFilesDTO::setTerminology(const QList<OAIFileDTO> &terminology) {
    m_terminology = terminology;
    m_terminology_isSet = true;
}

bool OAIInputFilesDTO::is_terminology_Set() const{
    return m_terminology_isSet;
}

bool OAIInputFilesDTO::is_terminology_Valid() const{
    return m_terminology_isValid;
}

QList<OAIFileDTO> OAIInputFilesDTO::getTm() const {
    return m_tm;
}
void OAIInputFilesDTO::setTm(const QList<OAIFileDTO> &tm) {
    m_tm = tm;
    m_tm_isSet = true;
}

bool OAIInputFilesDTO::is_tm_Set() const{
    return m_tm_isSet;
}

bool OAIInputFilesDTO::is_tm_Valid() const{
    return m_tm_isValid;
}

QList<OAIFileDTO> OAIInputFilesDTO::getWorkFiles() const {
    return m_work_files;
}
void OAIInputFilesDTO::setWorkFiles(const QList<OAIFileDTO> &work_files) {
    m_work_files = work_files;
    m_work_files_isSet = true;
}

bool OAIInputFilesDTO::is_work_files_Set() const{
    return m_work_files_isSet;
}

bool OAIInputFilesDTO::is_work_files_Valid() const{
    return m_work_files_isValid;
}

bool OAIInputFilesDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tm.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputFilesDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
