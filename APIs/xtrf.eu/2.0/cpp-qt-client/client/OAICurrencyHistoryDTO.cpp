/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyHistoryDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyHistoryDTO::OAICurrencyHistoryDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyHistoryDTO::OAICurrencyHistoryDTO() {
    this->initializeModel();
}

OAICurrencyHistoryDTO::~OAICurrencyHistoryDTO() {}

void OAICurrencyHistoryDTO::initializeModel() {

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_last_modification_isSet = false;
    m_last_modification_isValid = false;

    m_origin_details_isSet = false;
    m_origin_details_isValid = false;

    m_publication_date_isSet = false;
    m_publication_date_isValid = false;
}

void OAICurrencyHistoryDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyHistoryDTO::fromJsonObject(QJsonObject json) {

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("dateFrom")]);
    m_date_from_isSet = !json[QString("dateFrom")].isNull() && m_date_from_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_last_modification_isValid = ::OpenAPI::fromJsonValue(m_last_modification, json[QString("lastModification")]);
    m_last_modification_isSet = !json[QString("lastModification")].isNull() && m_last_modification_isValid;

    m_origin_details_isValid = ::OpenAPI::fromJsonValue(m_origin_details, json[QString("originDetails")]);
    m_origin_details_isSet = !json[QString("originDetails")].isNull() && m_origin_details_isValid;

    m_publication_date_isValid = ::OpenAPI::fromJsonValue(m_publication_date, json[QString("publicationDate")]);
    m_publication_date_isSet = !json[QString("publicationDate")].isNull() && m_publication_date_isValid;
}

QString OAICurrencyHistoryDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyHistoryDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_date_from.isSet()) {
        obj.insert(QString("dateFrom"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_last_modification.isSet()) {
        obj.insert(QString("lastModification"), ::OpenAPI::toJsonValue(m_last_modification));
    }
    if (m_origin_details_isSet) {
        obj.insert(QString("originDetails"), ::OpenAPI::toJsonValue(m_origin_details));
    }
    if (m_publication_date.isSet()) {
        obj.insert(QString("publicationDate"), ::OpenAPI::toJsonValue(m_publication_date));
    }
    return obj;
}

OAITimeDTO OAICurrencyHistoryDTO::getDateFrom() const {
    return m_date_from;
}
void OAICurrencyHistoryDTO::setDateFrom(const OAITimeDTO &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAICurrencyHistoryDTO::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAICurrencyHistoryDTO::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QString OAICurrencyHistoryDTO::getExchangeRate() const {
    return m_exchange_rate;
}
void OAICurrencyHistoryDTO::setExchangeRate(const QString &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAICurrencyHistoryDTO::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAICurrencyHistoryDTO::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAITimeDTO OAICurrencyHistoryDTO::getLastModification() const {
    return m_last_modification;
}
void OAICurrencyHistoryDTO::setLastModification(const OAITimeDTO &last_modification) {
    m_last_modification = last_modification;
    m_last_modification_isSet = true;
}

bool OAICurrencyHistoryDTO::is_last_modification_Set() const{
    return m_last_modification_isSet;
}

bool OAICurrencyHistoryDTO::is_last_modification_Valid() const{
    return m_last_modification_isValid;
}

QString OAICurrencyHistoryDTO::getOriginDetails() const {
    return m_origin_details;
}
void OAICurrencyHistoryDTO::setOriginDetails(const QString &origin_details) {
    m_origin_details = origin_details;
    m_origin_details_isSet = true;
}

bool OAICurrencyHistoryDTO::is_origin_details_Set() const{
    return m_origin_details_isSet;
}

bool OAICurrencyHistoryDTO::is_origin_details_Valid() const{
    return m_origin_details_isValid;
}

OAITimeDTO OAICurrencyHistoryDTO::getPublicationDate() const {
    return m_publication_date;
}
void OAICurrencyHistoryDTO::setPublicationDate(const OAITimeDTO &publication_date) {
    m_publication_date = publication_date;
    m_publication_date_isSet = true;
}

bool OAICurrencyHistoryDTO::is_publication_date_Set() const{
    return m_publication_date_isSet;
}

bool OAICurrencyHistoryDTO::is_publication_date_Valid() const{
    return m_publication_date_isValid;
}

bool OAICurrencyHistoryDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyHistoryDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
