/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBodyPart_mediaType.h
 *
 * 
 */

#ifndef OAIBodyPart_mediaType_H
#define OAIBodyPart_mediaType_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBodyPart_mediaType : public OAIObject {
public:
    OAIBodyPart_mediaType();
    OAIBodyPart_mediaType(QString json);
    ~OAIBodyPart_mediaType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getParameters() const;
    void setParameters(const QMap<QString, QString> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getSubtype() const;
    void setSubtype(const QString &subtype);
    bool is_subtype_Set() const;
    bool is_subtype_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isWildcardSubtype() const;
    void setWildcardSubtype(const bool &wildcard_subtype);
    bool is_wildcard_subtype_Set() const;
    bool is_wildcard_subtype_Valid() const;

    bool isWildcardType() const;
    void setWildcardType(const bool &wildcard_type);
    bool is_wildcard_type_Set() const;
    bool is_wildcard_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_subtype;
    bool m_subtype_isSet;
    bool m_subtype_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_wildcard_subtype;
    bool m_wildcard_subtype_isSet;
    bool m_wildcard_subtype_isValid;

    bool m_wildcard_type;
    bool m_wildcard_type_isSet;
    bool m_wildcard_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBodyPart_mediaType)

#endif // OAIBodyPart_mediaType_H
