/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksClassicApi_H
#define OAI_OAITasksClassicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContactsDTO.h"
#include "OAICustomFieldDTO.h"
#include "OAIFileDTO.h"
#include "OAIInstructionsDTO.h"
#include "OAIProjectDatesDTO.h"
#include "OAIStringDTO.h"
#include "OAITaskFilesDTO.h"
#include "OAITaskProgressDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksClassicApi : public QObject {
    Q_OBJECT

public:
    OAITasksClassicApi(const int timeOut = 0);
    ~OAITasksClassicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_file_dto OAIFileDTO [required]
    */
    virtual void addFile(const QString &task_id, const OAIFileDTO &oai_file_dto);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  remove_files_from_disc bool [optional]
    * @param[in]  remove_external_projects bool [optional]
    * @param[in]  force_jobs_removal bool [optional]
    */
    virtual void delete14(const QString &task_id, const ::OpenAPI::OptionalParam<bool> &remove_files_from_disc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &remove_external_projects = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &force_jobs_removal = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getContacts1(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getCustomFields7(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getDates3(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getInstructions2(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getProgress(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void getTaskFiles(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    */
    virtual void start1(const QString &task_id);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateClientTaskPONumber(const QString &task_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_contacts_dto OAIContactsDTO [required]
    */
    virtual void updateContacts1(const QString &task_id, const OAIContactsDTO &oai_contacts_dto);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_custom_field_dto QList<OAICustomFieldDTO> [required]
    */
    virtual void updateCustomFields5(const QString &task_id, const QList<OAICustomFieldDTO> &oai_custom_field_dto);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_project_dates_dto OAIProjectDatesDTO [required]
    */
    virtual void updateDates2(const QString &task_id, const OAIProjectDatesDTO &oai_project_dates_dto);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_instructions_dto OAIInstructionsDTO [required]
    */
    virtual void updateInstructions3(const QString &task_id, const OAIInstructionsDTO &oai_instructions_dto);

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateName(const QString &task_id, const OAIStringDTO &oai_string_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFileCallback(OAIHttpRequestWorker *worker);
    void delete14Callback(OAIHttpRequestWorker *worker);
    void getContacts1Callback(OAIHttpRequestWorker *worker);
    void getCustomFields7Callback(OAIHttpRequestWorker *worker);
    void getDates3Callback(OAIHttpRequestWorker *worker);
    void getInstructions2Callback(OAIHttpRequestWorker *worker);
    void getProgressCallback(OAIHttpRequestWorker *worker);
    void getTaskFilesCallback(OAIHttpRequestWorker *worker);
    void start1Callback(OAIHttpRequestWorker *worker);
    void updateClientTaskPONumberCallback(OAIHttpRequestWorker *worker);
    void updateContacts1Callback(OAIHttpRequestWorker *worker);
    void updateCustomFields5Callback(OAIHttpRequestWorker *worker);
    void updateDates2Callback(OAIHttpRequestWorker *worker);
    void updateInstructions3Callback(OAIHttpRequestWorker *worker);
    void updateNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFileSignal();
    void delete14Signal();
    void getContacts1Signal(OAIContactsDTO summary);
    void getCustomFields7Signal(QList<OAICustomFieldDTO> summary);
    void getDates3Signal(OAIProjectDatesDTO summary);
    void getInstructions2Signal(OAIInstructionsDTO summary);
    void getProgressSignal(OAITaskProgressDTO summary);
    void getTaskFilesSignal(OAITaskFilesDTO summary);
    void start1Signal();
    void updateClientTaskPONumberSignal(OAIStringDTO summary);
    void updateContacts1Signal(OAIContactsDTO summary);
    void updateCustomFields5Signal(QList<OAICustomFieldDTO> summary);
    void updateDates2Signal(OAIProjectDatesDTO summary);
    void updateInstructions3Signal(OAIInstructionsDTO summary);
    void updateNameSignal(OAIStringDTO summary);


    void addFileSignalFull(OAIHttpRequestWorker *worker);
    void delete14SignalFull(OAIHttpRequestWorker *worker);
    void getContacts1SignalFull(OAIHttpRequestWorker *worker, OAIContactsDTO summary);
    void getCustomFields7SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getDates3SignalFull(OAIHttpRequestWorker *worker, OAIProjectDatesDTO summary);
    void getInstructions2SignalFull(OAIHttpRequestWorker *worker, OAIInstructionsDTO summary);
    void getProgressSignalFull(OAIHttpRequestWorker *worker, OAITaskProgressDTO summary);
    void getTaskFilesSignalFull(OAIHttpRequestWorker *worker, OAITaskFilesDTO summary);
    void start1SignalFull(OAIHttpRequestWorker *worker);
    void updateClientTaskPONumberSignalFull(OAIHttpRequestWorker *worker, OAIStringDTO summary);
    void updateContacts1SignalFull(OAIHttpRequestWorker *worker, OAIContactsDTO summary);
    void updateCustomFields5SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void updateDates2SignalFull(OAIHttpRequestWorker *worker, OAIProjectDatesDTO summary);
    void updateInstructions3SignalFull(OAIHttpRequestWorker *worker, OAIInstructionsDTO summary);
    void updateNameSignalFull(OAIHttpRequestWorker *worker, OAIStringDTO summary);

    Q_DECL_DEPRECATED_X("Use addFileSignalError() instead")
    void addFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete14SignalError() instead")
    void delete14SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete14SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContacts1SignalError() instead")
    void getContacts1SignalE(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContacts1SignalError(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields7SignalError() instead")
    void getCustomFields7SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields7SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDates3SignalError() instead")
    void getDates3SignalE(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDates3SignalError(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstructions2SignalError() instead")
    void getInstructions2SignalE(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstructions2SignalError(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressSignalError() instead")
    void getProgressSignalE(OAITaskProgressDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressSignalError(OAITaskProgressDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskFilesSignalError() instead")
    void getTaskFilesSignalE(OAITaskFilesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskFilesSignalError(OAITaskFilesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use start1SignalError() instead")
    void start1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void start1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientTaskPONumberSignalError() instead")
    void updateClientTaskPONumberSignalE(OAIStringDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientTaskPONumberSignalError(OAIStringDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContacts1SignalError() instead")
    void updateContacts1SignalE(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContacts1SignalError(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields5SignalError() instead")
    void updateCustomFields5SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields5SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDates2SignalError() instead")
    void updateDates2SignalE(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDates2SignalError(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions3SignalError() instead")
    void updateInstructions3SignalE(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions3SignalError(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNameSignalError() instead")
    void updateNameSignalE(OAIStringDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNameSignalError(OAIStringDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFileSignalErrorFull() instead")
    void addFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete14SignalErrorFull() instead")
    void delete14SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete14SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContacts1SignalErrorFull() instead")
    void getContacts1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContacts1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields7SignalErrorFull() instead")
    void getCustomFields7SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields7SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDates3SignalErrorFull() instead")
    void getDates3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDates3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstructions2SignalErrorFull() instead")
    void getInstructions2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstructions2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProgressSignalErrorFull() instead")
    void getProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskFilesSignalErrorFull() instead")
    void getTaskFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use start1SignalErrorFull() instead")
    void start1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void start1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientTaskPONumberSignalErrorFull() instead")
    void updateClientTaskPONumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientTaskPONumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContacts1SignalErrorFull() instead")
    void updateContacts1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContacts1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields5SignalErrorFull() instead")
    void updateCustomFields5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDates2SignalErrorFull() instead")
    void updateDates2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDates2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions3SignalErrorFull() instead")
    void updateInstructions3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNameSignalErrorFull() instead")
    void updateNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
