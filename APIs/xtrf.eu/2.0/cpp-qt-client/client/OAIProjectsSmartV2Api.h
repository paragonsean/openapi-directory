/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsSmartV2Api_H
#define OAI_OAIProjectsSmartV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBigDecimalDTO.h"
#include "OAICATToolProjectDTO.h"
#include "OAICustomFieldDTO.h"
#include "OAIExternalFileDto.h"
#include "OAIFileCategorizationsDto.h"
#include "OAIFileDto.h"
#include "OAIFileLinkCategorizationsDto.h"
#include "OAIFilesArchiveDto.h"
#include "OAIFilesDto.h"
#include "OAIFinanceDTO.h"
#include "OAIHttpFileElement.h"
#include "OAIJobDto.h"
#include "OAIPayableCreateDTO.h"
#include "OAIPayableDTO.h"
#include "OAIProjectCreateDTO.h"
#include "OAIProjectDTOv2.h"
#include "OAIProjectFileDto.h"
#include "OAIProjectStatusDTO.h"
#include "OAIReceivableCreateDTO.h"
#include "OAIReceivableDTO.h"
#include "OAISmartContactsDTO.h"
#include "OAISmartCustomFieldDTO.h"
#include "OAISourceLanguageDTO.h"
#include "OAISpecializationDTO.h"
#include "OAIStringDTO.h"
#include "OAITargetLanguagesDTO.h"
#include "OAITimeDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsSmartV2Api : public QObject {
    Q_OBJECT

public:
    OAIProjectsSmartV2Api(const int timeOut = 0);
    ~OAIProjectsSmartV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_external_file_dto OAIExternalFileDto [required]
    */
    virtual void addExternalFileLinks(const QString &project_id, const OAIExternalFileDto &oai_external_file_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_file_link_categorizations_dto OAIFileLinkCategorizationsDto [required]
    */
    virtual void addFileLinks1(const QString &project_id, const OAIFileLinkCategorizationsDto &oai_file_link_categorizations_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_file_categorizations_dto OAIFileCategorizationsDto [required]
    */
    virtual void addFiles1(const QString &project_id, const OAIFileCategorizationsDto &oai_file_categorizations_dto);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void addJobToProcess(const QString &project_id);

    /**
    * @param[in]  oai_files_dto OAIFilesDto [required]
    */
    virtual void archive(const OAIFilesDto &oai_files_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_project_status_dto OAIProjectStatusDTO [required]
    */
    virtual void changeStatus2(const QString &project_id, const OAIProjectStatusDTO &oai_project_status_dto);

    /**
    * @param[in]  oai_project_create_dto OAIProjectCreateDTO [optional]
    */
    virtual void create6(const ::OpenAPI::OptionalParam<OAIProjectCreateDTO> &oai_project_create_dto = ::OpenAPI::OptionalParam<OAIProjectCreateDTO>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_payable_create_dto OAIPayableCreateDTO [required]
    */
    virtual void createPayable2(const QString &project_id, const OAIPayableCreateDTO &oai_payable_create_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_receivable_create_dto OAIReceivableCreateDTO [required]
    */
    virtual void createReceivable2(const QString &project_id, const OAIReceivableCreateDTO &oai_receivable_create_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  payable_id qint64 [required]
    */
    virtual void deletePayable2(const QString &project_id, const qint64 &payable_id);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    */
    virtual void deleteReceivable2(const QString &project_id, const qint64 &receivable_id);

    /**
    * @param[in]  external_project_id QString [required]
    */
    virtual void getByExternalId1(const QString &external_project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getById9(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getCATToolProjectInfo(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getContacts2(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getCustomFields8(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getDeliverableFiles(const QString &project_id);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void getFileById2(const QString &file_id);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void getFileContentById(const QString &file_id, const QString &file_name);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getFiles(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getFinance2(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getJobs(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getProcessId(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_time_dto OAITimeDTO [required]
    */
    virtual void updateClientDeadline(const QString &project_id, const OAITimeDTO &oai_time_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateClientNotes(const QString &project_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateClientReferenceNumber(const QString &project_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_smart_contacts_dto OAISmartContactsDTO [required]
    */
    virtual void updateContacts2(const QString &project_id, const OAISmartContactsDTO &oai_smart_contacts_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  oai_smart_custom_field_dto OAISmartCustomFieldDTO [required]
    */
    virtual void updateCustomField2(const QString &project_id, const QString &key, const OAISmartCustomFieldDTO &oai_smart_custom_field_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateInternalNotes(const QString &project_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_time_dto OAITimeDTO [required]
    */
    virtual void updateOrderedOn(const QString &project_id, const OAITimeDTO &oai_time_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  payable_id qint64 [required]
    * @param[in]  oai_payable_dto OAIPayableDTO [required]
    */
    virtual void updatePayable2(const QString &project_id, const qint64 &payable_id, const OAIPayableDTO &oai_payable_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    * @param[in]  oai_receivable_dto OAIReceivableDTO [required]
    */
    virtual void updateReceivable2(const QString &project_id, const qint64 &receivable_id, const OAIReceivableDTO &oai_receivable_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_source_language_dto OAISourceLanguageDTO [required]
    */
    virtual void updateSourceLanguage(const QString &project_id, const OAISourceLanguageDTO &oai_source_language_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_specialization_dto OAISpecializationDTO [required]
    */
    virtual void updateSpecialization(const QString &project_id, const OAISpecializationDTO &oai_specialization_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_target_languages_dto OAITargetLanguagesDTO [required]
    */
    virtual void updateTargetLanguages(const QString &project_id, const OAITargetLanguagesDTO &oai_target_languages_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateVendorInstructions(const QString &project_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_big_decimal_dto OAIBigDecimalDTO [required]
    */
    virtual void updateVolume(const QString &project_id, const OAIBigDecimalDTO &oai_big_decimal_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    */
    virtual void uploadFile2(const QString &project_id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addExternalFileLinksCallback(OAIHttpRequestWorker *worker);
    void addFileLinks1Callback(OAIHttpRequestWorker *worker);
    void addFiles1Callback(OAIHttpRequestWorker *worker);
    void addJobToProcessCallback(OAIHttpRequestWorker *worker);
    void archiveCallback(OAIHttpRequestWorker *worker);
    void changeStatus2Callback(OAIHttpRequestWorker *worker);
    void create6Callback(OAIHttpRequestWorker *worker);
    void createPayable2Callback(OAIHttpRequestWorker *worker);
    void createReceivable2Callback(OAIHttpRequestWorker *worker);
    void deletePayable2Callback(OAIHttpRequestWorker *worker);
    void deleteReceivable2Callback(OAIHttpRequestWorker *worker);
    void getByExternalId1Callback(OAIHttpRequestWorker *worker);
    void getById9Callback(OAIHttpRequestWorker *worker);
    void getCATToolProjectInfoCallback(OAIHttpRequestWorker *worker);
    void getContacts2Callback(OAIHttpRequestWorker *worker);
    void getCustomFields8Callback(OAIHttpRequestWorker *worker);
    void getDeliverableFilesCallback(OAIHttpRequestWorker *worker);
    void getFileById2Callback(OAIHttpRequestWorker *worker);
    void getFileContentByIdCallback(OAIHttpRequestWorker *worker);
    void getFilesCallback(OAIHttpRequestWorker *worker);
    void getFinance2Callback(OAIHttpRequestWorker *worker);
    void getJobsCallback(OAIHttpRequestWorker *worker);
    void getProcessIdCallback(OAIHttpRequestWorker *worker);
    void updateClientDeadlineCallback(OAIHttpRequestWorker *worker);
    void updateClientNotesCallback(OAIHttpRequestWorker *worker);
    void updateClientReferenceNumberCallback(OAIHttpRequestWorker *worker);
    void updateContacts2Callback(OAIHttpRequestWorker *worker);
    void updateCustomField2Callback(OAIHttpRequestWorker *worker);
    void updateInternalNotesCallback(OAIHttpRequestWorker *worker);
    void updateOrderedOnCallback(OAIHttpRequestWorker *worker);
    void updatePayable2Callback(OAIHttpRequestWorker *worker);
    void updateReceivable2Callback(OAIHttpRequestWorker *worker);
    void updateSourceLanguageCallback(OAIHttpRequestWorker *worker);
    void updateSpecializationCallback(OAIHttpRequestWorker *worker);
    void updateTargetLanguagesCallback(OAIHttpRequestWorker *worker);
    void updateVendorInstructionsCallback(OAIHttpRequestWorker *worker);
    void updateVolumeCallback(OAIHttpRequestWorker *worker);
    void uploadFile2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addExternalFileLinksSignal();
    void addFileLinks1Signal(OAIFilesDto summary);
    void addFiles1Signal();
    void addJobToProcessSignal(OAICATToolProjectDTO summary);
    void archiveSignal(OAIFilesArchiveDto summary);
    void changeStatus2Signal();
    void create6Signal(OAIProjectDTOv2 summary);
    void createPayable2Signal(OAIPayableDTO summary);
    void createReceivable2Signal(OAIReceivableDTO summary);
    void deletePayable2Signal();
    void deleteReceivable2Signal();
    void getByExternalId1Signal(OAIProjectDTOv2 summary);
    void getById9Signal(OAIProjectDTOv2 summary);
    void getCATToolProjectInfoSignal(OAICATToolProjectDTO summary);
    void getContacts2Signal(OAISmartContactsDTO summary);
    void getCustomFields8Signal(QList<OAICustomFieldDTO> summary);
    void getDeliverableFilesSignal(QList<OAIProjectFileDto> summary);
    void getFileById2Signal(OAIProjectFileDto summary);
    void getFileContentByIdSignal();
    void getFilesSignal(QList<OAIProjectFileDto> summary);
    void getFinance2Signal(OAIFinanceDTO summary);
    void getJobsSignal(QList<OAIJobDto> summary);
    void getProcessIdSignal(OAICATToolProjectDTO summary);
    void updateClientDeadlineSignal();
    void updateClientNotesSignal();
    void updateClientReferenceNumberSignal();
    void updateContacts2Signal(OAISmartContactsDTO summary);
    void updateCustomField2Signal();
    void updateInternalNotesSignal();
    void updateOrderedOnSignal();
    void updatePayable2Signal(OAIPayableDTO summary);
    void updateReceivable2Signal(OAIReceivableDTO summary);
    void updateSourceLanguageSignal();
    void updateSpecializationSignal();
    void updateTargetLanguagesSignal();
    void updateVendorInstructionsSignal();
    void updateVolumeSignal();
    void uploadFile2Signal(OAIFileDto summary);


    void addExternalFileLinksSignalFull(OAIHttpRequestWorker *worker);
    void addFileLinks1SignalFull(OAIHttpRequestWorker *worker, OAIFilesDto summary);
    void addFiles1SignalFull(OAIHttpRequestWorker *worker);
    void addJobToProcessSignalFull(OAIHttpRequestWorker *worker, OAICATToolProjectDTO summary);
    void archiveSignalFull(OAIHttpRequestWorker *worker, OAIFilesArchiveDto summary);
    void changeStatus2SignalFull(OAIHttpRequestWorker *worker);
    void create6SignalFull(OAIHttpRequestWorker *worker, OAIProjectDTOv2 summary);
    void createPayable2SignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void createReceivable2SignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);
    void deletePayable2SignalFull(OAIHttpRequestWorker *worker);
    void deleteReceivable2SignalFull(OAIHttpRequestWorker *worker);
    void getByExternalId1SignalFull(OAIHttpRequestWorker *worker, OAIProjectDTOv2 summary);
    void getById9SignalFull(OAIHttpRequestWorker *worker, OAIProjectDTOv2 summary);
    void getCATToolProjectInfoSignalFull(OAIHttpRequestWorker *worker, OAICATToolProjectDTO summary);
    void getContacts2SignalFull(OAIHttpRequestWorker *worker, OAISmartContactsDTO summary);
    void getCustomFields8SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getDeliverableFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFileDto> summary);
    void getFileById2SignalFull(OAIHttpRequestWorker *worker, OAIProjectFileDto summary);
    void getFileContentByIdSignalFull(OAIHttpRequestWorker *worker);
    void getFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFileDto> summary);
    void getFinance2SignalFull(OAIHttpRequestWorker *worker, OAIFinanceDTO summary);
    void getJobsSignalFull(OAIHttpRequestWorker *worker, QList<OAIJobDto> summary);
    void getProcessIdSignalFull(OAIHttpRequestWorker *worker, OAICATToolProjectDTO summary);
    void updateClientDeadlineSignalFull(OAIHttpRequestWorker *worker);
    void updateClientNotesSignalFull(OAIHttpRequestWorker *worker);
    void updateClientReferenceNumberSignalFull(OAIHttpRequestWorker *worker);
    void updateContacts2SignalFull(OAIHttpRequestWorker *worker, OAISmartContactsDTO summary);
    void updateCustomField2SignalFull(OAIHttpRequestWorker *worker);
    void updateInternalNotesSignalFull(OAIHttpRequestWorker *worker);
    void updateOrderedOnSignalFull(OAIHttpRequestWorker *worker);
    void updatePayable2SignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void updateReceivable2SignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);
    void updateSourceLanguageSignalFull(OAIHttpRequestWorker *worker);
    void updateSpecializationSignalFull(OAIHttpRequestWorker *worker);
    void updateTargetLanguagesSignalFull(OAIHttpRequestWorker *worker);
    void updateVendorInstructionsSignalFull(OAIHttpRequestWorker *worker);
    void updateVolumeSignalFull(OAIHttpRequestWorker *worker);
    void uploadFile2SignalFull(OAIHttpRequestWorker *worker, OAIFileDto summary);

    Q_DECL_DEPRECATED_X("Use addExternalFileLinksSignalError() instead")
    void addExternalFileLinksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addExternalFileLinksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFileLinks1SignalError() instead")
    void addFileLinks1SignalE(OAIFilesDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFileLinks1SignalError(OAIFilesDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFiles1SignalError() instead")
    void addFiles1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFiles1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addJobToProcessSignalError() instead")
    void addJobToProcessSignalE(OAICATToolProjectDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addJobToProcessSignalError(OAICATToolProjectDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveSignalError() instead")
    void archiveSignalE(OAIFilesArchiveDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveSignalError(OAIFilesArchiveDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatus2SignalError() instead")
    void changeStatus2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatus2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create6SignalError() instead")
    void create6SignalE(OAIProjectDTOv2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create6SignalError(OAIProjectDTOv2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayable2SignalError() instead")
    void createPayable2SignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayable2SignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivable2SignalError() instead")
    void createReceivable2SignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivable2SignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayable2SignalError() instead")
    void deletePayable2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayable2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivable2SignalError() instead")
    void deleteReceivable2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivable2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByExternalId1SignalError() instead")
    void getByExternalId1SignalE(OAIProjectDTOv2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getByExternalId1SignalError(OAIProjectDTOv2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById9SignalError() instead")
    void getById9SignalE(OAIProjectDTOv2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById9SignalError(OAIProjectDTOv2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCATToolProjectInfoSignalError() instead")
    void getCATToolProjectInfoSignalE(OAICATToolProjectDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCATToolProjectInfoSignalError(OAICATToolProjectDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContacts2SignalError() instead")
    void getContacts2SignalE(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContacts2SignalError(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields8SignalError() instead")
    void getCustomFields8SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields8SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliverableFilesSignalError() instead")
    void getDeliverableFilesSignalE(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliverableFilesSignalError(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileById2SignalError() instead")
    void getFileById2SignalE(OAIProjectFileDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileById2SignalError(OAIProjectFileDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileContentByIdSignalError() instead")
    void getFileContentByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFileContentByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilesSignalError() instead")
    void getFilesSignalE(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilesSignalError(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinance2SignalError() instead")
    void getFinance2SignalE(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinance2SignalError(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobsSignalError() instead")
    void getJobsSignalE(QList<OAIJobDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobsSignalError(QList<OAIJobDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProcessIdSignalError() instead")
    void getProcessIdSignalE(OAICATToolProjectDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProcessIdSignalError(OAICATToolProjectDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientDeadlineSignalError() instead")
    void updateClientDeadlineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientDeadlineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientNotesSignalError() instead")
    void updateClientNotesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientNotesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientReferenceNumberSignalError() instead")
    void updateClientReferenceNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientReferenceNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContacts2SignalError() instead")
    void updateContacts2SignalE(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContacts2SignalError(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomField2SignalError() instead")
    void updateCustomField2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomField2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInternalNotesSignalError() instead")
    void updateInternalNotesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateInternalNotesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderedOnSignalError() instead")
    void updateOrderedOnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderedOnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayable2SignalError() instead")
    void updatePayable2SignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayable2SignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivable2SignalError() instead")
    void updateReceivable2SignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivable2SignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceLanguageSignalError() instead")
    void updateSourceLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpecializationSignalError() instead")
    void updateSpecializationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpecializationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTargetLanguagesSignalError() instead")
    void updateTargetLanguagesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTargetLanguagesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVendorInstructionsSignalError() instead")
    void updateVendorInstructionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateVendorInstructionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVolumeSignalError() instead")
    void updateVolumeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateVolumeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile2SignalError() instead")
    void uploadFile2SignalE(OAIFileDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile2SignalError(OAIFileDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addExternalFileLinksSignalErrorFull() instead")
    void addExternalFileLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addExternalFileLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFileLinks1SignalErrorFull() instead")
    void addFileLinks1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFileLinks1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFiles1SignalErrorFull() instead")
    void addFiles1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFiles1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addJobToProcessSignalErrorFull() instead")
    void addJobToProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addJobToProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveSignalErrorFull() instead")
    void archiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatus2SignalErrorFull() instead")
    void changeStatus2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatus2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create6SignalErrorFull() instead")
    void create6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayable2SignalErrorFull() instead")
    void createPayable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivable2SignalErrorFull() instead")
    void createReceivable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayable2SignalErrorFull() instead")
    void deletePayable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivable2SignalErrorFull() instead")
    void deleteReceivable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByExternalId1SignalErrorFull() instead")
    void getByExternalId1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByExternalId1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById9SignalErrorFull() instead")
    void getById9SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById9SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCATToolProjectInfoSignalErrorFull() instead")
    void getCATToolProjectInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCATToolProjectInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContacts2SignalErrorFull() instead")
    void getContacts2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContacts2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields8SignalErrorFull() instead")
    void getCustomFields8SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields8SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliverableFilesSignalErrorFull() instead")
    void getDeliverableFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliverableFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileById2SignalErrorFull() instead")
    void getFileById2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileById2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileContentByIdSignalErrorFull() instead")
    void getFileContentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileContentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilesSignalErrorFull() instead")
    void getFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinance2SignalErrorFull() instead")
    void getFinance2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinance2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobsSignalErrorFull() instead")
    void getJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProcessIdSignalErrorFull() instead")
    void getProcessIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProcessIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientDeadlineSignalErrorFull() instead")
    void updateClientDeadlineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientDeadlineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientNotesSignalErrorFull() instead")
    void updateClientNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientReferenceNumberSignalErrorFull() instead")
    void updateClientReferenceNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientReferenceNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContacts2SignalErrorFull() instead")
    void updateContacts2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContacts2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomField2SignalErrorFull() instead")
    void updateCustomField2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomField2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInternalNotesSignalErrorFull() instead")
    void updateInternalNotesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInternalNotesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderedOnSignalErrorFull() instead")
    void updateOrderedOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderedOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayable2SignalErrorFull() instead")
    void updatePayable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivable2SignalErrorFull() instead")
    void updateReceivable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceLanguageSignalErrorFull() instead")
    void updateSourceLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpecializationSignalErrorFull() instead")
    void updateSpecializationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpecializationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTargetLanguagesSignalErrorFull() instead")
    void updateTargetLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTargetLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVendorInstructionsSignalErrorFull() instead")
    void updateVendorInstructionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVendorInstructionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVolumeSignalErrorFull() instead")
    void updateVolumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVolumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile2SignalErrorFull() instead")
    void uploadFile2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
