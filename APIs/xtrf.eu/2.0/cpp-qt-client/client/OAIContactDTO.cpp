/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactDTO::OAIContactDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactDTO::OAIContactDTO() {
    this->initializeModel();
}

OAIContactDTO::~OAIContactDTO() {}

void OAIContactDTO::initializeModel() {

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_phones_isSet = false;
    m_phones_isValid = false;

    m_sms_isSet = false;
    m_sms_isValid = false;

    m_websites_isSet = false;
    m_websites_isValid = false;
}

void OAIContactDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactDTO::fromJsonObject(QJsonObject json) {

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_phones_isValid = ::OpenAPI::fromJsonValue(m_phones, json[QString("phones")]);
    m_phones_isSet = !json[QString("phones")].isNull() && m_phones_isValid;

    m_sms_isValid = ::OpenAPI::fromJsonValue(m_sms, json[QString("sms")]);
    m_sms_isSet = !json[QString("sms")].isNull() && m_sms_isValid;

    m_websites_isValid = ::OpenAPI::fromJsonValue(m_websites, json[QString("websites")]);
    m_websites_isSet = !json[QString("websites")].isNull() && m_websites_isValid;
}

QString OAIContactDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_emails.isSet()) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_phones.size() > 0) {
        obj.insert(QString("phones"), ::OpenAPI::toJsonValue(m_phones));
    }
    if (m_sms_isSet) {
        obj.insert(QString("sms"), ::OpenAPI::toJsonValue(m_sms));
    }
    if (m_websites.size() > 0) {
        obj.insert(QString("websites"), ::OpenAPI::toJsonValue(m_websites));
    }
    return obj;
}

OAICustomerContactEmailsDTO OAIContactDTO::getEmails() const {
    return m_emails;
}
void OAIContactDTO::setEmails(const OAICustomerContactEmailsDTO &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIContactDTO::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIContactDTO::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIContactDTO::getFax() const {
    return m_fax;
}
void OAIContactDTO::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIContactDTO::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIContactDTO::is_fax_Valid() const{
    return m_fax_isValid;
}

QList<QString> OAIContactDTO::getPhones() const {
    return m_phones;
}
void OAIContactDTO::setPhones(const QList<QString> &phones) {
    m_phones = phones;
    m_phones_isSet = true;
}

bool OAIContactDTO::is_phones_Set() const{
    return m_phones_isSet;
}

bool OAIContactDTO::is_phones_Valid() const{
    return m_phones_isValid;
}

QString OAIContactDTO::getSms() const {
    return m_sms;
}
void OAIContactDTO::setSms(const QString &sms) {
    m_sms = sms;
    m_sms_isSet = true;
}

bool OAIContactDTO::is_sms_Set() const{
    return m_sms_isSet;
}

bool OAIContactDTO::is_sms_Valid() const{
    return m_sms_isValid;
}

QList<QString> OAIContactDTO::getWebsites() const {
    return m_websites;
}
void OAIContactDTO::setWebsites(const QList<QString> &websites) {
    m_websites = websites;
    m_websites_isSet = true;
}

bool OAIContactDTO::is_websites_Set() const{
    return m_websites_isSet;
}

bool OAIContactDTO::is_websites_Valid() const{
    return m_websites_isValid;
}

bool OAIContactDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emails.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_websites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
