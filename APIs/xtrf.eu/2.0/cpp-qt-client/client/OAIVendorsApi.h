/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVendorsApi_H
#define OAI_OAIVendorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddressDTO.h"
#include "OAICompetenciesDTO.h"
#include "OAIContactDTO.h"
#include "OAICustomFieldDTO.h"
#include "OAIInvitationStatisticsDTO.h"
#include "OAIPersonContactDTO.h"
#include "OAIProviderDTO.h"
#include "OAIProviderPersonDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVendorsApi : public QObject {
    Q_OBJECT

public:
    OAIVendorsApi(const int timeOut = 0);
    ~OAIVendorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void delete10(const qint64 &provider_id);

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void delete8(const qint64 &person_id);

    /**
    * @param[in]  price_list_id qint64 [required]
    */
    virtual void delete9(const qint64 &price_list_id);

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void getAddress1(const qint64 &provider_id);

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllIds4(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllIds5(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void getById4(const qint64 &person_id);

    /**
    * @param[in]  provider_id qint64 [required]
    * @param[in]  embed QString [optional]
    */
    virtual void getById5(const qint64 &provider_id, const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void getCompetencies(const qint64 &provider_id);

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void getContact2(const qint64 &person_id);

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void getContact3(const qint64 &provider_id);

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void getCorrespondenceAddress1(const qint64 &provider_id);

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void getCustomFields2(const qint64 &person_id);

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void getCustomFields3(const qint64 &provider_id);

    /**
    * @param[in]  person_id qint64 [required]
    */
    virtual void sendInvitations(const qint64 &person_id);

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void sendInvitations1(const qint64 &provider_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void delete10Callback(OAIHttpRequestWorker *worker);
    void delete8Callback(OAIHttpRequestWorker *worker);
    void delete9Callback(OAIHttpRequestWorker *worker);
    void getAddress1Callback(OAIHttpRequestWorker *worker);
    void getAllIds4Callback(OAIHttpRequestWorker *worker);
    void getAllIds5Callback(OAIHttpRequestWorker *worker);
    void getById4Callback(OAIHttpRequestWorker *worker);
    void getById5Callback(OAIHttpRequestWorker *worker);
    void getCompetenciesCallback(OAIHttpRequestWorker *worker);
    void getContact2Callback(OAIHttpRequestWorker *worker);
    void getContact3Callback(OAIHttpRequestWorker *worker);
    void getCorrespondenceAddress1Callback(OAIHttpRequestWorker *worker);
    void getCustomFields2Callback(OAIHttpRequestWorker *worker);
    void getCustomFields3Callback(OAIHttpRequestWorker *worker);
    void sendInvitationsCallback(OAIHttpRequestWorker *worker);
    void sendInvitations1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void delete10Signal();
    void delete8Signal();
    void delete9Signal();
    void getAddress1Signal(OAIAddressDTO summary);
    void getAllIds4Signal(QList<qint32> summary);
    void getAllIds5Signal(QList<qint32> summary);
    void getById4Signal(OAIProviderPersonDTO summary);
    void getById5Signal(OAIProviderDTO summary);
    void getCompetenciesSignal(OAICompetenciesDTO summary);
    void getContact2Signal(OAIPersonContactDTO summary);
    void getContact3Signal(OAIContactDTO summary);
    void getCorrespondenceAddress1Signal(OAIAddressDTO summary);
    void getCustomFields2Signal(QList<OAICustomFieldDTO> summary);
    void getCustomFields3Signal(QList<OAICustomFieldDTO> summary);
    void sendInvitationsSignal(OAIInvitationStatisticsDTO summary);
    void sendInvitations1Signal(OAIInvitationStatisticsDTO summary);


    void delete10SignalFull(OAIHttpRequestWorker *worker);
    void delete8SignalFull(OAIHttpRequestWorker *worker);
    void delete9SignalFull(OAIHttpRequestWorker *worker);
    void getAddress1SignalFull(OAIHttpRequestWorker *worker, OAIAddressDTO summary);
    void getAllIds4SignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getAllIds5SignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getById4SignalFull(OAIHttpRequestWorker *worker, OAIProviderPersonDTO summary);
    void getById5SignalFull(OAIHttpRequestWorker *worker, OAIProviderDTO summary);
    void getCompetenciesSignalFull(OAIHttpRequestWorker *worker, OAICompetenciesDTO summary);
    void getContact2SignalFull(OAIHttpRequestWorker *worker, OAIPersonContactDTO summary);
    void getContact3SignalFull(OAIHttpRequestWorker *worker, OAIContactDTO summary);
    void getCorrespondenceAddress1SignalFull(OAIHttpRequestWorker *worker, OAIAddressDTO summary);
    void getCustomFields2SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getCustomFields3SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void sendInvitationsSignalFull(OAIHttpRequestWorker *worker, OAIInvitationStatisticsDTO summary);
    void sendInvitations1SignalFull(OAIHttpRequestWorker *worker, OAIInvitationStatisticsDTO summary);

    Q_DECL_DEPRECATED_X("Use delete10SignalError() instead")
    void delete10SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete10SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete8SignalError() instead")
    void delete8SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete8SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete9SignalError() instead")
    void delete9SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete9SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddress1SignalError() instead")
    void getAddress1SignalE(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddress1SignalError(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds4SignalError() instead")
    void getAllIds4SignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds4SignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds5SignalError() instead")
    void getAllIds5SignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds5SignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById4SignalError() instead")
    void getById4SignalE(OAIProviderPersonDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById4SignalError(OAIProviderPersonDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById5SignalError() instead")
    void getById5SignalE(OAIProviderDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById5SignalError(OAIProviderDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetenciesSignalError() instead")
    void getCompetenciesSignalE(OAICompetenciesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetenciesSignalError(OAICompetenciesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContact2SignalError() instead")
    void getContact2SignalE(OAIPersonContactDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContact2SignalError(OAIPersonContactDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContact3SignalError() instead")
    void getContact3SignalE(OAIContactDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContact3SignalError(OAIContactDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorrespondenceAddress1SignalError() instead")
    void getCorrespondenceAddress1SignalE(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorrespondenceAddress1SignalError(OAIAddressDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields2SignalError() instead")
    void getCustomFields2SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields2SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields3SignalError() instead")
    void getCustomFields3SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields3SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendInvitationsSignalError() instead")
    void sendInvitationsSignalE(OAIInvitationStatisticsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendInvitationsSignalError(OAIInvitationStatisticsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendInvitations1SignalError() instead")
    void sendInvitations1SignalE(OAIInvitationStatisticsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendInvitations1SignalError(OAIInvitationStatisticsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use delete10SignalErrorFull() instead")
    void delete10SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete10SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete8SignalErrorFull() instead")
    void delete8SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete8SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete9SignalErrorFull() instead")
    void delete9SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete9SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddress1SignalErrorFull() instead")
    void getAddress1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddress1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds4SignalErrorFull() instead")
    void getAllIds4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds5SignalErrorFull() instead")
    void getAllIds5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById4SignalErrorFull() instead")
    void getById4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById5SignalErrorFull() instead")
    void getById5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompetenciesSignalErrorFull() instead")
    void getCompetenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompetenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContact2SignalErrorFull() instead")
    void getContact2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContact2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContact3SignalErrorFull() instead")
    void getContact3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContact3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCorrespondenceAddress1SignalErrorFull() instead")
    void getCorrespondenceAddress1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCorrespondenceAddress1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields2SignalErrorFull() instead")
    void getCustomFields2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields3SignalErrorFull() instead")
    void getCustomFields3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendInvitationsSignalErrorFull() instead")
    void sendInvitationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendInvitationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendInvitations1SignalErrorFull() instead")
    void sendInvitations1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendInvitations1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
