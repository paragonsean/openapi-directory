/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderInvoiceDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderInvoiceDTO::OAIProviderInvoiceDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderInvoiceDTO::OAIProviderInvoiceDTO() {
    this->initializeModel();
}

OAIProviderInvoiceDTO::~OAIProviderInvoiceDTO() {}

void OAIProviderInvoiceDTO::initializeModel() {

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_draft_number_isSet = false;
    m_draft_number_isValid = false;

    m_final_number_isSet = false;
    m_final_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_number_isSet = false;
    m_internal_number_isValid = false;

    m_jobs_net_value_isSet = false;
    m_jobs_net_value_isValid = false;

    m_notes_from_provider_isSet = false;
    m_notes_from_provider_isValid = false;

    m_payment_status_isSet = false;
    m_payment_status_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_gross_isSet = false;
    m_total_gross_isValid = false;

    m_total_gross_in_words_isSet = false;
    m_total_gross_in_words_isValid = false;

    m_total_netto_isSet = false;
    m_total_netto_isValid = false;
}

void OAIProviderInvoiceDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderInvoiceDTO::fromJsonObject(QJsonObject json) {

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_draft_number_isValid = ::OpenAPI::fromJsonValue(m_draft_number, json[QString("draftNumber")]);
    m_draft_number_isSet = !json[QString("draftNumber")].isNull() && m_draft_number_isValid;

    m_final_number_isValid = ::OpenAPI::fromJsonValue(m_final_number, json[QString("finalNumber")]);
    m_final_number_isSet = !json[QString("finalNumber")].isNull() && m_final_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_internal_number_isValid = ::OpenAPI::fromJsonValue(m_internal_number, json[QString("internalNumber")]);
    m_internal_number_isSet = !json[QString("internalNumber")].isNull() && m_internal_number_isValid;

    m_jobs_net_value_isValid = ::OpenAPI::fromJsonValue(m_jobs_net_value, json[QString("jobsNetValue")]);
    m_jobs_net_value_isSet = !json[QString("jobsNetValue")].isNull() && m_jobs_net_value_isValid;

    m_notes_from_provider_isValid = ::OpenAPI::fromJsonValue(m_notes_from_provider, json[QString("notesFromProvider")]);
    m_notes_from_provider_isSet = !json[QString("notesFromProvider")].isNull() && m_notes_from_provider_isValid;

    m_payment_status_isValid = ::OpenAPI::fromJsonValue(m_payment_status, json[QString("paymentStatus")]);
    m_payment_status_isSet = !json[QString("paymentStatus")].isNull() && m_payment_status_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_gross_isValid = ::OpenAPI::fromJsonValue(m_total_gross, json[QString("totalGross")]);
    m_total_gross_isSet = !json[QString("totalGross")].isNull() && m_total_gross_isValid;

    m_total_gross_in_words_isValid = ::OpenAPI::fromJsonValue(m_total_gross_in_words, json[QString("totalGrossInWords")]);
    m_total_gross_in_words_isSet = !json[QString("totalGrossInWords")].isNull() && m_total_gross_in_words_isValid;

    m_total_netto_isValid = ::OpenAPI::fromJsonValue(m_total_netto, json[QString("totalNetto")]);
    m_total_netto_isSet = !json[QString("totalNetto")].isNull() && m_total_netto_isValid;
}

QString OAIProviderInvoiceDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderInvoiceDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_draft_number_isSet) {
        obj.insert(QString("draftNumber"), ::OpenAPI::toJsonValue(m_draft_number));
    }
    if (m_final_number_isSet) {
        obj.insert(QString("finalNumber"), ::OpenAPI::toJsonValue(m_final_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_number_isSet) {
        obj.insert(QString("internalNumber"), ::OpenAPI::toJsonValue(m_internal_number));
    }
    if (m_jobs_net_value_isSet) {
        obj.insert(QString("jobsNetValue"), ::OpenAPI::toJsonValue(m_jobs_net_value));
    }
    if (m_notes_from_provider_isSet) {
        obj.insert(QString("notesFromProvider"), ::OpenAPI::toJsonValue(m_notes_from_provider));
    }
    if (m_payment_status_isSet) {
        obj.insert(QString("paymentStatus"), ::OpenAPI::toJsonValue(m_payment_status));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_gross_isSet) {
        obj.insert(QString("totalGross"), ::OpenAPI::toJsonValue(m_total_gross));
    }
    if (m_total_gross_in_words_isSet) {
        obj.insert(QString("totalGrossInWords"), ::OpenAPI::toJsonValue(m_total_gross_in_words));
    }
    if (m_total_netto_isSet) {
        obj.insert(QString("totalNetto"), ::OpenAPI::toJsonValue(m_total_netto));
    }
    return obj;
}

qint64 OAIProviderInvoiceDTO::getCurrencyId() const {
    return m_currency_id;
}
void OAIProviderInvoiceDTO::setCurrencyId(const qint64 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIProviderInvoiceDTO::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIProviderInvoiceDTO::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

OAIProviderInvoiceDatesDTO OAIProviderInvoiceDTO::getDates() const {
    return m_dates;
}
void OAIProviderInvoiceDTO::setDates(const OAIProviderInvoiceDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIProviderInvoiceDTO::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIProviderInvoiceDTO::is_dates_Valid() const{
    return m_dates_isValid;
}

QString OAIProviderInvoiceDTO::getDraftNumber() const {
    return m_draft_number;
}
void OAIProviderInvoiceDTO::setDraftNumber(const QString &draft_number) {
    m_draft_number = draft_number;
    m_draft_number_isSet = true;
}

bool OAIProviderInvoiceDTO::is_draft_number_Set() const{
    return m_draft_number_isSet;
}

bool OAIProviderInvoiceDTO::is_draft_number_Valid() const{
    return m_draft_number_isValid;
}

QString OAIProviderInvoiceDTO::getFinalNumber() const {
    return m_final_number;
}
void OAIProviderInvoiceDTO::setFinalNumber(const QString &final_number) {
    m_final_number = final_number;
    m_final_number_isSet = true;
}

bool OAIProviderInvoiceDTO::is_final_number_Set() const{
    return m_final_number_isSet;
}

bool OAIProviderInvoiceDTO::is_final_number_Valid() const{
    return m_final_number_isValid;
}

qint64 OAIProviderInvoiceDTO::getId() const {
    return m_id;
}
void OAIProviderInvoiceDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProviderInvoiceDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProviderInvoiceDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProviderInvoiceDTO::getInternalNumber() const {
    return m_internal_number;
}
void OAIProviderInvoiceDTO::setInternalNumber(const QString &internal_number) {
    m_internal_number = internal_number;
    m_internal_number_isSet = true;
}

bool OAIProviderInvoiceDTO::is_internal_number_Set() const{
    return m_internal_number_isSet;
}

bool OAIProviderInvoiceDTO::is_internal_number_Valid() const{
    return m_internal_number_isValid;
}

double OAIProviderInvoiceDTO::getJobsNetValue() const {
    return m_jobs_net_value;
}
void OAIProviderInvoiceDTO::setJobsNetValue(const double &jobs_net_value) {
    m_jobs_net_value = jobs_net_value;
    m_jobs_net_value_isSet = true;
}

bool OAIProviderInvoiceDTO::is_jobs_net_value_Set() const{
    return m_jobs_net_value_isSet;
}

bool OAIProviderInvoiceDTO::is_jobs_net_value_Valid() const{
    return m_jobs_net_value_isValid;
}

QString OAIProviderInvoiceDTO::getNotesFromProvider() const {
    return m_notes_from_provider;
}
void OAIProviderInvoiceDTO::setNotesFromProvider(const QString &notes_from_provider) {
    m_notes_from_provider = notes_from_provider;
    m_notes_from_provider_isSet = true;
}

bool OAIProviderInvoiceDTO::is_notes_from_provider_Set() const{
    return m_notes_from_provider_isSet;
}

bool OAIProviderInvoiceDTO::is_notes_from_provider_Valid() const{
    return m_notes_from_provider_isValid;
}

QString OAIProviderInvoiceDTO::getPaymentStatus() const {
    return m_payment_status;
}
void OAIProviderInvoiceDTO::setPaymentStatus(const QString &payment_status) {
    m_payment_status = payment_status;
    m_payment_status_isSet = true;
}

bool OAIProviderInvoiceDTO::is_payment_status_Set() const{
    return m_payment_status_isSet;
}

bool OAIProviderInvoiceDTO::is_payment_status_Valid() const{
    return m_payment_status_isValid;
}

qint64 OAIProviderInvoiceDTO::getProviderId() const {
    return m_provider_id;
}
void OAIProviderInvoiceDTO::setProviderId(const qint64 &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIProviderInvoiceDTO::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIProviderInvoiceDTO::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIProviderInvoiceDTO::getStatus() const {
    return m_status;
}
void OAIProviderInvoiceDTO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProviderInvoiceDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProviderInvoiceDTO::is_status_Valid() const{
    return m_status_isValid;
}

double OAIProviderInvoiceDTO::getTotalGross() const {
    return m_total_gross;
}
void OAIProviderInvoiceDTO::setTotalGross(const double &total_gross) {
    m_total_gross = total_gross;
    m_total_gross_isSet = true;
}

bool OAIProviderInvoiceDTO::is_total_gross_Set() const{
    return m_total_gross_isSet;
}

bool OAIProviderInvoiceDTO::is_total_gross_Valid() const{
    return m_total_gross_isValid;
}

QString OAIProviderInvoiceDTO::getTotalGrossInWords() const {
    return m_total_gross_in_words;
}
void OAIProviderInvoiceDTO::setTotalGrossInWords(const QString &total_gross_in_words) {
    m_total_gross_in_words = total_gross_in_words;
    m_total_gross_in_words_isSet = true;
}

bool OAIProviderInvoiceDTO::is_total_gross_in_words_Set() const{
    return m_total_gross_in_words_isSet;
}

bool OAIProviderInvoiceDTO::is_total_gross_in_words_Valid() const{
    return m_total_gross_in_words_isValid;
}

double OAIProviderInvoiceDTO::getTotalNetto() const {
    return m_total_netto;
}
void OAIProviderInvoiceDTO::setTotalNetto(const double &total_netto) {
    m_total_netto = total_netto;
    m_total_netto_isSet = true;
}

bool OAIProviderInvoiceDTO::is_total_netto_Set() const{
    return m_total_netto_isSet;
}

bool OAIProviderInvoiceDTO::is_total_netto_Valid() const{
    return m_total_netto_isValid;
}

bool OAIProviderInvoiceDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_net_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_from_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_gross_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_gross_in_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_netto_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderInvoiceDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
