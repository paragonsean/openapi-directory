/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuoteDTOv1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuoteDTOv1::OAIQuoteDTOv1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuoteDTOv1::OAIQuoteDTOv1() {
    this->initializeModel();
}

OAIQuoteDTOv1::~OAIQuoteDTOv1() {}

void OAIQuoteDTOv1::initializeModel() {

    m_automatically_accept_sent_quote_isSet = false;
    m_automatically_accept_sent_quote_isValid = false;

    m_categories_ids_isSet = false;
    m_categories_ids_isValid = false;

    m_contact_person_id_isSet = false;
    m_contact_person_id_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_finance_isSet = false;
    m_finance_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_number_isSet = false;
    m_id_number_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_is_classic_quote_isSet = false;
    m_is_classic_quote_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_sales_person_id_isSet = false;
    m_sales_person_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;
}

void OAIQuoteDTOv1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuoteDTOv1::fromJsonObject(QJsonObject json) {

    m_automatically_accept_sent_quote_isValid = ::OpenAPI::fromJsonValue(m_automatically_accept_sent_quote, json[QString("automaticallyAcceptSentQuote")]);
    m_automatically_accept_sent_quote_isSet = !json[QString("automaticallyAcceptSentQuote")].isNull() && m_automatically_accept_sent_quote_isValid;

    m_categories_ids_isValid = ::OpenAPI::fromJsonValue(m_categories_ids, json[QString("categoriesIds")]);
    m_categories_ids_isSet = !json[QString("categoriesIds")].isNull() && m_categories_ids_isValid;

    m_contact_person_id_isValid = ::OpenAPI::fromJsonValue(m_contact_person_id, json[QString("contactPersonId")]);
    m_contact_person_id_isSet = !json[QString("contactPersonId")].isNull() && m_contact_person_id_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_finance_isValid = ::OpenAPI::fromJsonValue(m_finance, json[QString("finance")]);
    m_finance_isSet = !json[QString("finance")].isNull() && m_finance_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_number_isValid = ::OpenAPI::fromJsonValue(m_id_number, json[QString("idNumber")]);
    m_id_number_isSet = !json[QString("idNumber")].isNull() && m_id_number_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_is_classic_quote_isValid = ::OpenAPI::fromJsonValue(m_is_classic_quote, json[QString("isClassicQuote")]);
    m_is_classic_quote_isSet = !json[QString("isClassicQuote")].isNull() && m_is_classic_quote_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quoteId")]);
    m_quote_id_isSet = !json[QString("quoteId")].isNull() && m_quote_id_isValid;

    m_sales_person_id_isValid = ::OpenAPI::fromJsonValue(m_sales_person_id, json[QString("salesPersonId")]);
    m_sales_person_id_isSet = !json[QString("salesPersonId")].isNull() && m_sales_person_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;
}

QString OAIQuoteDTOv1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuoteDTOv1::asJsonObject() const {
    QJsonObject obj;
    if (m_automatically_accept_sent_quote_isSet) {
        obj.insert(QString("automaticallyAcceptSentQuote"), ::OpenAPI::toJsonValue(m_automatically_accept_sent_quote));
    }
    if (m_categories_ids.size() > 0) {
        obj.insert(QString("categoriesIds"), ::OpenAPI::toJsonValue(m_categories_ids));
    }
    if (m_contact_person_id_isSet) {
        obj.insert(QString("contactPersonId"), ::OpenAPI::toJsonValue(m_contact_person_id));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_finance.isSet()) {
        obj.insert(QString("finance"), ::OpenAPI::toJsonValue(m_finance));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_number_isSet) {
        obj.insert(QString("idNumber"), ::OpenAPI::toJsonValue(m_id_number));
    }
    if (m_instructions.isSet()) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_is_classic_quote_isSet) {
        obj.insert(QString("isClassicQuote"), ::OpenAPI::toJsonValue(m_is_classic_quote));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quoteId"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_sales_person_id_isSet) {
        obj.insert(QString("salesPersonId"), ::OpenAPI::toJsonValue(m_sales_person_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    return obj;
}

bool OAIQuoteDTOv1::isAutomaticallyAcceptSentQuote() const {
    return m_automatically_accept_sent_quote;
}
void OAIQuoteDTOv1::setAutomaticallyAcceptSentQuote(const bool &automatically_accept_sent_quote) {
    m_automatically_accept_sent_quote = automatically_accept_sent_quote;
    m_automatically_accept_sent_quote_isSet = true;
}

bool OAIQuoteDTOv1::is_automatically_accept_sent_quote_Set() const{
    return m_automatically_accept_sent_quote_isSet;
}

bool OAIQuoteDTOv1::is_automatically_accept_sent_quote_Valid() const{
    return m_automatically_accept_sent_quote_isValid;
}

QSet<qint64> OAIQuoteDTOv1::getCategoriesIds() const {
    return m_categories_ids;
}
void OAIQuoteDTOv1::setCategoriesIds(const QSet<qint64> &categories_ids) {
    m_categories_ids = categories_ids;
    m_categories_ids_isSet = true;
}

bool OAIQuoteDTOv1::is_categories_ids_Set() const{
    return m_categories_ids_isSet;
}

bool OAIQuoteDTOv1::is_categories_ids_Valid() const{
    return m_categories_ids_isValid;
}

qint64 OAIQuoteDTOv1::getContactPersonId() const {
    return m_contact_person_id;
}
void OAIQuoteDTOv1::setContactPersonId(const qint64 &contact_person_id) {
    m_contact_person_id = contact_person_id;
    m_contact_person_id_isSet = true;
}

bool OAIQuoteDTOv1::is_contact_person_id_Set() const{
    return m_contact_person_id_isSet;
}

bool OAIQuoteDTOv1::is_contact_person_id_Valid() const{
    return m_contact_person_id_isValid;
}

QList<OAICustomFieldDTO> OAIQuoteDTOv1::getCustomFields() const {
    return m_custom_fields;
}
void OAIQuoteDTOv1::setCustomFields(const QList<OAICustomFieldDTO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIQuoteDTOv1::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIQuoteDTOv1::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAIQuoteDTOv1::getCustomerId() const {
    return m_customer_id;
}
void OAIQuoteDTOv1::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIQuoteDTOv1::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIQuoteDTOv1::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

OAIQuoteDatesDTO OAIQuoteDTOv1::getDates() const {
    return m_dates;
}
void OAIQuoteDTOv1::setDates(const OAIQuoteDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIQuoteDTOv1::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIQuoteDTOv1::is_dates_Valid() const{
    return m_dates_isValid;
}

OAIFinanceDTO OAIQuoteDTOv1::getFinance() const {
    return m_finance;
}
void OAIQuoteDTOv1::setFinance(const OAIFinanceDTO &finance) {
    m_finance = finance;
    m_finance_isSet = true;
}

bool OAIQuoteDTOv1::is_finance_Set() const{
    return m_finance_isSet;
}

bool OAIQuoteDTOv1::is_finance_Valid() const{
    return m_finance_isValid;
}

qint64 OAIQuoteDTOv1::getId() const {
    return m_id;
}
void OAIQuoteDTOv1::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQuoteDTOv1::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQuoteDTOv1::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIQuoteDTOv1::getIdNumber() const {
    return m_id_number;
}
void OAIQuoteDTOv1::setIdNumber(const QString &id_number) {
    m_id_number = id_number;
    m_id_number_isSet = true;
}

bool OAIQuoteDTOv1::is_id_number_Set() const{
    return m_id_number_isSet;
}

bool OAIQuoteDTOv1::is_id_number_Valid() const{
    return m_id_number_isValid;
}

OAIInstructionsDTO OAIQuoteDTOv1::getInstructions() const {
    return m_instructions;
}
void OAIQuoteDTOv1::setInstructions(const OAIInstructionsDTO &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIQuoteDTOv1::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIQuoteDTOv1::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIQuoteDTOv1::isIsClassicQuote() const {
    return m_is_classic_quote;
}
void OAIQuoteDTOv1::setIsClassicQuote(const bool &is_classic_quote) {
    m_is_classic_quote = is_classic_quote;
    m_is_classic_quote_isSet = true;
}

bool OAIQuoteDTOv1::is_is_classic_quote_Set() const{
    return m_is_classic_quote_isSet;
}

bool OAIQuoteDTOv1::is_is_classic_quote_Valid() const{
    return m_is_classic_quote_isValid;
}

QString OAIQuoteDTOv1::getName() const {
    return m_name;
}
void OAIQuoteDTOv1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQuoteDTOv1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQuoteDTOv1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQuoteDTOv1::getQuoteId() const {
    return m_quote_id;
}
void OAIQuoteDTOv1::setQuoteId(const QString &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAIQuoteDTOv1::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAIQuoteDTOv1::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

qint64 OAIQuoteDTOv1::getSalesPersonId() const {
    return m_sales_person_id;
}
void OAIQuoteDTOv1::setSalesPersonId(const qint64 &sales_person_id) {
    m_sales_person_id = sales_person_id;
    m_sales_person_id_isSet = true;
}

bool OAIQuoteDTOv1::is_sales_person_id_Set() const{
    return m_sales_person_id_isSet;
}

bool OAIQuoteDTOv1::is_sales_person_id_Valid() const{
    return m_sales_person_id_isValid;
}

QString OAIQuoteDTOv1::getStatus() const {
    return m_status;
}
void OAIQuoteDTOv1::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQuoteDTOv1::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQuoteDTOv1::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITaskDTO> OAIQuoteDTOv1::getTasks() const {
    return m_tasks;
}
void OAIQuoteDTOv1::setTasks(const QList<OAITaskDTO> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIQuoteDTOv1::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIQuoteDTOv1::is_tasks_Valid() const{
    return m_tasks_isValid;
}

bool OAIQuoteDTOv1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatically_accept_sent_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_classic_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuoteDTOv1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
