/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerInvoiceDatesDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerInvoiceDatesDTO::OAICustomerInvoiceDatesDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerInvoiceDatesDTO::OAICustomerInvoiceDatesDTO() {
    this->initializeModel();
}

OAICustomerInvoiceDatesDTO::~OAICustomerInvoiceDatesDTO() {}

void OAICustomerInvoiceDatesDTO::initializeModel() {

    m_draft_date_isSet = false;
    m_draft_date_isValid = false;

    m_final_date_isSet = false;
    m_final_date_isValid = false;

    m_invoice_date_isSet = false;
    m_invoice_date_isValid = false;

    m_payment_due_date_isSet = false;
    m_payment_due_date_isValid = false;
}

void OAICustomerInvoiceDatesDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerInvoiceDatesDTO::fromJsonObject(QJsonObject json) {

    m_draft_date_isValid = ::OpenAPI::fromJsonValue(m_draft_date, json[QString("draftDate")]);
    m_draft_date_isSet = !json[QString("draftDate")].isNull() && m_draft_date_isValid;

    m_final_date_isValid = ::OpenAPI::fromJsonValue(m_final_date, json[QString("finalDate")]);
    m_final_date_isSet = !json[QString("finalDate")].isNull() && m_final_date_isValid;

    m_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_date, json[QString("invoiceDate")]);
    m_invoice_date_isSet = !json[QString("invoiceDate")].isNull() && m_invoice_date_isValid;

    m_payment_due_date_isValid = ::OpenAPI::fromJsonValue(m_payment_due_date, json[QString("paymentDueDate")]);
    m_payment_due_date_isSet = !json[QString("paymentDueDate")].isNull() && m_payment_due_date_isValid;
}

QString OAICustomerInvoiceDatesDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerInvoiceDatesDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_draft_date.isSet()) {
        obj.insert(QString("draftDate"), ::OpenAPI::toJsonValue(m_draft_date));
    }
    if (m_final_date.isSet()) {
        obj.insert(QString("finalDate"), ::OpenAPI::toJsonValue(m_final_date));
    }
    if (m_invoice_date.isSet()) {
        obj.insert(QString("invoiceDate"), ::OpenAPI::toJsonValue(m_invoice_date));
    }
    if (m_payment_due_date.isSet()) {
        obj.insert(QString("paymentDueDate"), ::OpenAPI::toJsonValue(m_payment_due_date));
    }
    return obj;
}

OAITimeDTO OAICustomerInvoiceDatesDTO::getDraftDate() const {
    return m_draft_date;
}
void OAICustomerInvoiceDatesDTO::setDraftDate(const OAITimeDTO &draft_date) {
    m_draft_date = draft_date;
    m_draft_date_isSet = true;
}

bool OAICustomerInvoiceDatesDTO::is_draft_date_Set() const{
    return m_draft_date_isSet;
}

bool OAICustomerInvoiceDatesDTO::is_draft_date_Valid() const{
    return m_draft_date_isValid;
}

OAITimeDTO OAICustomerInvoiceDatesDTO::getFinalDate() const {
    return m_final_date;
}
void OAICustomerInvoiceDatesDTO::setFinalDate(const OAITimeDTO &final_date) {
    m_final_date = final_date;
    m_final_date_isSet = true;
}

bool OAICustomerInvoiceDatesDTO::is_final_date_Set() const{
    return m_final_date_isSet;
}

bool OAICustomerInvoiceDatesDTO::is_final_date_Valid() const{
    return m_final_date_isValid;
}

OAITimeDTO OAICustomerInvoiceDatesDTO::getInvoiceDate() const {
    return m_invoice_date;
}
void OAICustomerInvoiceDatesDTO::setInvoiceDate(const OAITimeDTO &invoice_date) {
    m_invoice_date = invoice_date;
    m_invoice_date_isSet = true;
}

bool OAICustomerInvoiceDatesDTO::is_invoice_date_Set() const{
    return m_invoice_date_isSet;
}

bool OAICustomerInvoiceDatesDTO::is_invoice_date_Valid() const{
    return m_invoice_date_isValid;
}

OAITimeDTO OAICustomerInvoiceDatesDTO::getPaymentDueDate() const {
    return m_payment_due_date;
}
void OAICustomerInvoiceDatesDTO::setPaymentDueDate(const OAITimeDTO &payment_due_date) {
    m_payment_due_date = payment_due_date;
    m_payment_due_date_isSet = true;
}

bool OAICustomerInvoiceDatesDTO::is_payment_due_date_Set() const{
    return m_payment_due_date_isSet;
}

bool OAICustomerInvoiceDatesDTO::is_payment_due_date_Valid() const{
    return m_payment_due_date_isValid;
}

bool OAICustomerInvoiceDatesDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_draft_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_due_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerInvoiceDatesDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
