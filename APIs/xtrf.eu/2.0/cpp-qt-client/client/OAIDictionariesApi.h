/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDictionariesApi_H
#define OAI_OAIDictionariesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDictionaryEntity.h"
#include "OAIManyValuesPerTypeDTO.h"
#include "OAIServiceDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDictionariesApi : public QObject {
    Q_OBJECT

public:
    OAIDictionariesApi(const int timeOut = 0);
    ~OAIDictionariesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getActive();

    /**
    * @param[in]  type QString [required]
    * @param[in]  name_equals QString [optional]
    */
    virtual void getActiveByType(const QString &type, const ::OpenAPI::OptionalParam<QString> &name_equals = ::OpenAPI::OptionalParam<QString>());


    virtual void getAll1();

    /**
    * @param[in]  name_equals QString [optional]
    */
    virtual void getAll3(const ::OpenAPI::OptionalParam<QString> &name_equals = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name_equals QString [optional]
    */
    virtual void getAllActive(const ::OpenAPI::OptionalParam<QString> &name_equals = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  name_equals QString [optional]
    */
    virtual void getAllByType(const QString &type, const ::OpenAPI::OptionalParam<QString> &name_equals = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void getByTypeAndId(const QString &type, const qint64 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getActiveCallback(OAIHttpRequestWorker *worker);
    void getActiveByTypeCallback(OAIHttpRequestWorker *worker);
    void getAll1Callback(OAIHttpRequestWorker *worker);
    void getAll3Callback(OAIHttpRequestWorker *worker);
    void getAllActiveCallback(OAIHttpRequestWorker *worker);
    void getAllByTypeCallback(OAIHttpRequestWorker *worker);
    void getByTypeAndIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getActiveSignal(OAIManyValuesPerTypeDTO summary);
    void getActiveByTypeSignal(OAIDictionaryEntity summary);
    void getAll1Signal(OAIManyValuesPerTypeDTO summary);
    void getAll3Signal(OAIServiceDTO summary);
    void getAllActiveSignal(OAIServiceDTO summary);
    void getAllByTypeSignal(OAIDictionaryEntity summary);
    void getByTypeAndIdSignal(OAIDictionaryEntity summary);


    void getActiveSignalFull(OAIHttpRequestWorker *worker, OAIManyValuesPerTypeDTO summary);
    void getActiveByTypeSignalFull(OAIHttpRequestWorker *worker, OAIDictionaryEntity summary);
    void getAll1SignalFull(OAIHttpRequestWorker *worker, OAIManyValuesPerTypeDTO summary);
    void getAll3SignalFull(OAIHttpRequestWorker *worker, OAIServiceDTO summary);
    void getAllActiveSignalFull(OAIHttpRequestWorker *worker, OAIServiceDTO summary);
    void getAllByTypeSignalFull(OAIHttpRequestWorker *worker, OAIDictionaryEntity summary);
    void getByTypeAndIdSignalFull(OAIHttpRequestWorker *worker, OAIDictionaryEntity summary);

    Q_DECL_DEPRECATED_X("Use getActiveSignalError() instead")
    void getActiveSignalE(OAIManyValuesPerTypeDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveSignalError(OAIManyValuesPerTypeDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveByTypeSignalError() instead")
    void getActiveByTypeSignalE(OAIDictionaryEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveByTypeSignalError(OAIDictionaryEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAll1SignalError() instead")
    void getAll1SignalE(OAIManyValuesPerTypeDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAll1SignalError(OAIManyValuesPerTypeDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAll3SignalError() instead")
    void getAll3SignalE(OAIServiceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAll3SignalError(OAIServiceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllActiveSignalError() instead")
    void getAllActiveSignalE(OAIServiceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllActiveSignalError(OAIServiceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllByTypeSignalError() instead")
    void getAllByTypeSignalE(OAIDictionaryEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllByTypeSignalError(OAIDictionaryEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByTypeAndIdSignalError() instead")
    void getByTypeAndIdSignalE(OAIDictionaryEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getByTypeAndIdSignalError(OAIDictionaryEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getActiveSignalErrorFull() instead")
    void getActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActiveByTypeSignalErrorFull() instead")
    void getActiveByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAll1SignalErrorFull() instead")
    void getAll1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAll1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAll3SignalErrorFull() instead")
    void getAll3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAll3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllActiveSignalErrorFull() instead")
    void getAllActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllByTypeSignalErrorFull() instead")
    void getAllByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByTypeAndIdSignalErrorFull() instead")
    void getByTypeAndIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByTypeAndIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
