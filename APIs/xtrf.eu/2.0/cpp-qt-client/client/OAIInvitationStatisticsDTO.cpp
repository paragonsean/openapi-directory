/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvitationStatisticsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvitationStatisticsDTO::OAIInvitationStatisticsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvitationStatisticsDTO::OAIInvitationStatisticsDTO() {
    this->initializeModel();
}

OAIInvitationStatisticsDTO::~OAIInvitationStatisticsDTO() {}

void OAIInvitationStatisticsDTO::initializeModel() {

    m_already_registered_persons_count_isSet = false;
    m_already_registered_persons_count_isValid = false;

    m_invited_persons_count_isSet = false;
    m_invited_persons_count_isValid = false;

    m_providers_with_already_registered_person_count_isSet = false;
    m_providers_with_already_registered_person_count_isValid = false;

    m_providers_with_invited_person_count_isSet = false;
    m_providers_with_invited_person_count_isValid = false;

    m_providers_without_person_count_isSet = false;
    m_providers_without_person_count_isValid = false;
}

void OAIInvitationStatisticsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvitationStatisticsDTO::fromJsonObject(QJsonObject json) {

    m_already_registered_persons_count_isValid = ::OpenAPI::fromJsonValue(m_already_registered_persons_count, json[QString("alreadyRegisteredPersonsCount")]);
    m_already_registered_persons_count_isSet = !json[QString("alreadyRegisteredPersonsCount")].isNull() && m_already_registered_persons_count_isValid;

    m_invited_persons_count_isValid = ::OpenAPI::fromJsonValue(m_invited_persons_count, json[QString("invitedPersonsCount")]);
    m_invited_persons_count_isSet = !json[QString("invitedPersonsCount")].isNull() && m_invited_persons_count_isValid;

    m_providers_with_already_registered_person_count_isValid = ::OpenAPI::fromJsonValue(m_providers_with_already_registered_person_count, json[QString("providersWithAlreadyRegisteredPersonCount")]);
    m_providers_with_already_registered_person_count_isSet = !json[QString("providersWithAlreadyRegisteredPersonCount")].isNull() && m_providers_with_already_registered_person_count_isValid;

    m_providers_with_invited_person_count_isValid = ::OpenAPI::fromJsonValue(m_providers_with_invited_person_count, json[QString("providersWithInvitedPersonCount")]);
    m_providers_with_invited_person_count_isSet = !json[QString("providersWithInvitedPersonCount")].isNull() && m_providers_with_invited_person_count_isValid;

    m_providers_without_person_count_isValid = ::OpenAPI::fromJsonValue(m_providers_without_person_count, json[QString("providersWithoutPersonCount")]);
    m_providers_without_person_count_isSet = !json[QString("providersWithoutPersonCount")].isNull() && m_providers_without_person_count_isValid;
}

QString OAIInvitationStatisticsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvitationStatisticsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_already_registered_persons_count_isSet) {
        obj.insert(QString("alreadyRegisteredPersonsCount"), ::OpenAPI::toJsonValue(m_already_registered_persons_count));
    }
    if (m_invited_persons_count_isSet) {
        obj.insert(QString("invitedPersonsCount"), ::OpenAPI::toJsonValue(m_invited_persons_count));
    }
    if (m_providers_with_already_registered_person_count_isSet) {
        obj.insert(QString("providersWithAlreadyRegisteredPersonCount"), ::OpenAPI::toJsonValue(m_providers_with_already_registered_person_count));
    }
    if (m_providers_with_invited_person_count_isSet) {
        obj.insert(QString("providersWithInvitedPersonCount"), ::OpenAPI::toJsonValue(m_providers_with_invited_person_count));
    }
    if (m_providers_without_person_count_isSet) {
        obj.insert(QString("providersWithoutPersonCount"), ::OpenAPI::toJsonValue(m_providers_without_person_count));
    }
    return obj;
}

qint32 OAIInvitationStatisticsDTO::getAlreadyRegisteredPersonsCount() const {
    return m_already_registered_persons_count;
}
void OAIInvitationStatisticsDTO::setAlreadyRegisteredPersonsCount(const qint32 &already_registered_persons_count) {
    m_already_registered_persons_count = already_registered_persons_count;
    m_already_registered_persons_count_isSet = true;
}

bool OAIInvitationStatisticsDTO::is_already_registered_persons_count_Set() const{
    return m_already_registered_persons_count_isSet;
}

bool OAIInvitationStatisticsDTO::is_already_registered_persons_count_Valid() const{
    return m_already_registered_persons_count_isValid;
}

qint32 OAIInvitationStatisticsDTO::getInvitedPersonsCount() const {
    return m_invited_persons_count;
}
void OAIInvitationStatisticsDTO::setInvitedPersonsCount(const qint32 &invited_persons_count) {
    m_invited_persons_count = invited_persons_count;
    m_invited_persons_count_isSet = true;
}

bool OAIInvitationStatisticsDTO::is_invited_persons_count_Set() const{
    return m_invited_persons_count_isSet;
}

bool OAIInvitationStatisticsDTO::is_invited_persons_count_Valid() const{
    return m_invited_persons_count_isValid;
}

qint32 OAIInvitationStatisticsDTO::getProvidersWithAlreadyRegisteredPersonCount() const {
    return m_providers_with_already_registered_person_count;
}
void OAIInvitationStatisticsDTO::setProvidersWithAlreadyRegisteredPersonCount(const qint32 &providers_with_already_registered_person_count) {
    m_providers_with_already_registered_person_count = providers_with_already_registered_person_count;
    m_providers_with_already_registered_person_count_isSet = true;
}

bool OAIInvitationStatisticsDTO::is_providers_with_already_registered_person_count_Set() const{
    return m_providers_with_already_registered_person_count_isSet;
}

bool OAIInvitationStatisticsDTO::is_providers_with_already_registered_person_count_Valid() const{
    return m_providers_with_already_registered_person_count_isValid;
}

qint32 OAIInvitationStatisticsDTO::getProvidersWithInvitedPersonCount() const {
    return m_providers_with_invited_person_count;
}
void OAIInvitationStatisticsDTO::setProvidersWithInvitedPersonCount(const qint32 &providers_with_invited_person_count) {
    m_providers_with_invited_person_count = providers_with_invited_person_count;
    m_providers_with_invited_person_count_isSet = true;
}

bool OAIInvitationStatisticsDTO::is_providers_with_invited_person_count_Set() const{
    return m_providers_with_invited_person_count_isSet;
}

bool OAIInvitationStatisticsDTO::is_providers_with_invited_person_count_Valid() const{
    return m_providers_with_invited_person_count_isValid;
}

qint32 OAIInvitationStatisticsDTO::getProvidersWithoutPersonCount() const {
    return m_providers_without_person_count;
}
void OAIInvitationStatisticsDTO::setProvidersWithoutPersonCount(const qint32 &providers_without_person_count) {
    m_providers_without_person_count = providers_without_person_count;
    m_providers_without_person_count_isSet = true;
}

bool OAIInvitationStatisticsDTO::is_providers_without_person_count_Set() const{
    return m_providers_without_person_count_isSet;
}

bool OAIInvitationStatisticsDTO::is_providers_without_person_count_Valid() const{
    return m_providers_without_person_count_isValid;
}

bool OAIInvitationStatisticsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_already_registered_persons_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_persons_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers_with_already_registered_person_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers_with_invited_person_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers_without_person_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvitationStatisticsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
