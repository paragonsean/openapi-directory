/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobLanguageCombinationDto.h
 *
 * 
 */

#ifndef OAIJobLanguageCombinationDto_H
#define OAIJobLanguageCombinationDto_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJobLanguageCombinationDto : public OAIObject {
public:
    OAIJobLanguageCombinationDto();
    OAIJobLanguageCombinationDto(QString json);
    ~OAIJobLanguageCombinationDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getSourceLanguageId() const;
    void setSourceLanguageId(const qint64 &source_language_id);
    bool is_source_language_id_Set() const;
    bool is_source_language_id_Valid() const;

    qint64 getSpecializationId() const;
    void setSpecializationId(const qint64 &specialization_id);
    bool is_specialization_id_Set() const;
    bool is_specialization_id_Valid() const;

    qint64 getTargetLanguageId() const;
    void setTargetLanguageId(const qint64 &target_language_id);
    bool is_target_language_id_Set() const;
    bool is_target_language_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_source_language_id;
    bool m_source_language_id_isSet;
    bool m_source_language_id_isValid;

    qint64 m_specialization_id;
    bool m_specialization_id_isSet;
    bool m_specialization_id_isValid;

    qint64 m_target_language_id;
    bool m_target_language_id_isSet;
    bool m_target_language_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobLanguageCombinationDto)

#endif // OAIJobLanguageCombinationDto_H
