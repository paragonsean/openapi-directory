/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstructionsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstructionsDTO::OAIInstructionsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstructionsDTO::OAIInstructionsDTO() {
    this->initializeModel();
}

OAIInstructionsDTO::~OAIInstructionsDTO() {}

void OAIInstructionsDTO::initializeModel() {

    m_for_provider_isSet = false;
    m_for_provider_isValid = false;

    m_from_customer_isSet = false;
    m_from_customer_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_payment_note_for_customer_isSet = false;
    m_payment_note_for_customer_isValid = false;

    m_payment_note_for_vendor_isSet = false;
    m_payment_note_for_vendor_isValid = false;
}

void OAIInstructionsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstructionsDTO::fromJsonObject(QJsonObject json) {

    m_for_provider_isValid = ::OpenAPI::fromJsonValue(m_for_provider, json[QString("forProvider")]);
    m_for_provider_isSet = !json[QString("forProvider")].isNull() && m_for_provider_isValid;

    m_from_customer_isValid = ::OpenAPI::fromJsonValue(m_from_customer, json[QString("fromCustomer")]);
    m_from_customer_isSet = !json[QString("fromCustomer")].isNull() && m_from_customer_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_payment_note_for_customer_isValid = ::OpenAPI::fromJsonValue(m_payment_note_for_customer, json[QString("paymentNoteForCustomer")]);
    m_payment_note_for_customer_isSet = !json[QString("paymentNoteForCustomer")].isNull() && m_payment_note_for_customer_isValid;

    m_payment_note_for_vendor_isValid = ::OpenAPI::fromJsonValue(m_payment_note_for_vendor, json[QString("paymentNoteForVendor")]);
    m_payment_note_for_vendor_isSet = !json[QString("paymentNoteForVendor")].isNull() && m_payment_note_for_vendor_isValid;
}

QString OAIInstructionsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstructionsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_for_provider_isSet) {
        obj.insert(QString("forProvider"), ::OpenAPI::toJsonValue(m_for_provider));
    }
    if (m_from_customer_isSet) {
        obj.insert(QString("fromCustomer"), ::OpenAPI::toJsonValue(m_from_customer));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_payment_note_for_customer_isSet) {
        obj.insert(QString("paymentNoteForCustomer"), ::OpenAPI::toJsonValue(m_payment_note_for_customer));
    }
    if (m_payment_note_for_vendor_isSet) {
        obj.insert(QString("paymentNoteForVendor"), ::OpenAPI::toJsonValue(m_payment_note_for_vendor));
    }
    return obj;
}

QString OAIInstructionsDTO::getForProvider() const {
    return m_for_provider;
}
void OAIInstructionsDTO::setForProvider(const QString &for_provider) {
    m_for_provider = for_provider;
    m_for_provider_isSet = true;
}

bool OAIInstructionsDTO::is_for_provider_Set() const{
    return m_for_provider_isSet;
}

bool OAIInstructionsDTO::is_for_provider_Valid() const{
    return m_for_provider_isValid;
}

QString OAIInstructionsDTO::getFromCustomer() const {
    return m_from_customer;
}
void OAIInstructionsDTO::setFromCustomer(const QString &from_customer) {
    m_from_customer = from_customer;
    m_from_customer_isSet = true;
}

bool OAIInstructionsDTO::is_from_customer_Set() const{
    return m_from_customer_isSet;
}

bool OAIInstructionsDTO::is_from_customer_Valid() const{
    return m_from_customer_isValid;
}

QString OAIInstructionsDTO::getInternal() const {
    return m_internal;
}
void OAIInstructionsDTO::setInternal(const QString &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIInstructionsDTO::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIInstructionsDTO::is_internal_Valid() const{
    return m_internal_isValid;
}

QString OAIInstructionsDTO::getNotes() const {
    return m_notes;
}
void OAIInstructionsDTO::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIInstructionsDTO::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIInstructionsDTO::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIInstructionsDTO::getPaymentNoteForCustomer() const {
    return m_payment_note_for_customer;
}
void OAIInstructionsDTO::setPaymentNoteForCustomer(const QString &payment_note_for_customer) {
    m_payment_note_for_customer = payment_note_for_customer;
    m_payment_note_for_customer_isSet = true;
}

bool OAIInstructionsDTO::is_payment_note_for_customer_Set() const{
    return m_payment_note_for_customer_isSet;
}

bool OAIInstructionsDTO::is_payment_note_for_customer_Valid() const{
    return m_payment_note_for_customer_isValid;
}

QString OAIInstructionsDTO::getPaymentNoteForVendor() const {
    return m_payment_note_for_vendor;
}
void OAIInstructionsDTO::setPaymentNoteForVendor(const QString &payment_note_for_vendor) {
    m_payment_note_for_vendor = payment_note_for_vendor;
    m_payment_note_for_vendor_isSet = true;
}

bool OAIInstructionsDTO::is_payment_note_for_vendor_Set() const{
    return m_payment_note_for_vendor_isSet;
}

bool OAIInstructionsDTO::is_payment_note_for_vendor_Valid() const{
    return m_payment_note_for_vendor_isValid;
}

bool OAIInstructionsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_for_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_note_for_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_note_for_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstructionsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
