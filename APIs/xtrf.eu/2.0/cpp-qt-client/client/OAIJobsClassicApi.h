/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsClassicApi_H
#define OAI_OAIJobsClassicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignVendorDTO.h"
#include "OAIFileMetadataDTO.h"
#include "OAIInstructionsDTO.h"
#include "OAIJobDatesDto.h"
#include "OAIJobDto.h"
#include "OAIJobFilesDTO.h"
#include "OAIJobStatusDTO.h"
#include "OAITaskFileDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsClassicApi : public QObject {
    Q_OBJECT

public:
    OAIJobsClassicApi(const int timeOut = 0);
    ~OAIJobsClassicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_task_file_dto OAITaskFileDTO [required]
    */
    virtual void assignFileToJobOutput(const QString &job_id, const OAITaskFileDTO &oai_task_file_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_assign_vendor_dto OAIAssignVendorDTO [required]
    */
    virtual void assignVendor(const QString &job_id, const OAIAssignVendorDTO &oai_assign_vendor_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_job_status_dto OAIJobStatusDTO [required]
    */
    virtual void changeStatus(const QString &job_id, const OAIJobStatusDTO &oai_job_status_dto);

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getJobDetails(const QString &job_id);

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getJobFiles(const QString &job_id);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  file_id qint64 [required]
    */
    virtual void getJobFiles1(const QString &job_id, const qint64 &file_id);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_job_dates_dto OAIJobDatesDto [required]
    */
    virtual void updateDates(const QString &job_id, const OAIJobDatesDto &oai_job_dates_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_instructions_dto OAIInstructionsDTO [required]
    */
    virtual void updateInstructions(const QString &job_id, const OAIInstructionsDTO &oai_instructions_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignFileToJobOutputCallback(OAIHttpRequestWorker *worker);
    void assignVendorCallback(OAIHttpRequestWorker *worker);
    void changeStatusCallback(OAIHttpRequestWorker *worker);
    void getJobDetailsCallback(OAIHttpRequestWorker *worker);
    void getJobFilesCallback(OAIHttpRequestWorker *worker);
    void getJobFiles1Callback(OAIHttpRequestWorker *worker);
    void updateDatesCallback(OAIHttpRequestWorker *worker);
    void updateInstructionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignFileToJobOutputSignal();
    void assignVendorSignal();
    void changeStatusSignal();
    void getJobDetailsSignal(OAIJobDto summary);
    void getJobFilesSignal(OAIJobFilesDTO summary);
    void getJobFiles1Signal(OAIFileMetadataDTO summary);
    void updateDatesSignal();
    void updateInstructionsSignal();


    void assignFileToJobOutputSignalFull(OAIHttpRequestWorker *worker);
    void assignVendorSignalFull(OAIHttpRequestWorker *worker);
    void changeStatusSignalFull(OAIHttpRequestWorker *worker);
    void getJobDetailsSignalFull(OAIHttpRequestWorker *worker, OAIJobDto summary);
    void getJobFilesSignalFull(OAIHttpRequestWorker *worker, OAIJobFilesDTO summary);
    void getJobFiles1SignalFull(OAIHttpRequestWorker *worker, OAIFileMetadataDTO summary);
    void updateDatesSignalFull(OAIHttpRequestWorker *worker);
    void updateInstructionsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use assignFileToJobOutputSignalError() instead")
    void assignFileToJobOutputSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignFileToJobOutputSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignVendorSignalError() instead")
    void assignVendorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignVendorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusSignalError() instead")
    void changeStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobDetailsSignalError() instead")
    void getJobDetailsSignalE(OAIJobDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobDetailsSignalError(OAIJobDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobFilesSignalError() instead")
    void getJobFilesSignalE(OAIJobFilesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobFilesSignalError(OAIJobFilesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobFiles1SignalError() instead")
    void getJobFiles1SignalE(OAIFileMetadataDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobFiles1SignalError(OAIFileMetadataDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDatesSignalError() instead")
    void updateDatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructionsSignalError() instead")
    void updateInstructionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignFileToJobOutputSignalErrorFull() instead")
    void assignFileToJobOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignFileToJobOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignVendorSignalErrorFull() instead")
    void assignVendorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignVendorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatusSignalErrorFull() instead")
    void changeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobDetailsSignalErrorFull() instead")
    void getJobDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobFilesSignalErrorFull() instead")
    void getJobFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobFiles1SignalErrorFull() instead")
    void getJobFiles1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobFiles1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDatesSignalErrorFull() instead")
    void updateDatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructionsSignalErrorFull() instead")
    void updateInstructionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
