/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsClassicApi_H
#define OAI_OAIProjectsClassicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClassicProjectCreateDTO.h"
#include "OAICommonLanguageCombinationDTO.h"
#include "OAIContactsDTO.h"
#include "OAICustomFieldDTO.h"
#include "OAIFinanceDTO.h"
#include "OAIInstructionsDTO.h"
#include "OAIPayableCreateDTO.h"
#include "OAIPayableDTO.h"
#include "OAIProjectDTOv1.h"
#include "OAIProjectDatesDTO.h"
#include "OAIReceivableCreateDTO.h"
#include "OAIReceivableDTO.h"
#include "OAITaskCreateDTO.h"
#include "OAITaskDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsClassicApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsClassicApi(const int timeOut = 0);
    ~OAIProjectsClassicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_classic_project_create_dto OAIClassicProjectCreateDTO [required]
    */
    virtual void create5(const OAIClassicProjectCreateDTO &oai_classic_project_create_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_common_language_combination_dto OAICommonLanguageCombinationDTO [required]
    */
    virtual void createLanguageCombination(const QString &project_id, const OAICommonLanguageCombinationDTO &oai_common_language_combination_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_payable_create_dto OAIPayableCreateDTO [required]
    */
    virtual void createPayable(const QString &project_id, const OAIPayableCreateDTO &oai_payable_create_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_receivable_create_dto OAIReceivableCreateDTO [required]
    */
    virtual void createReceivable(const QString &project_id, const OAIReceivableCreateDTO &oai_receivable_create_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_task_create_dto OAITaskCreateDTO [required]
    */
    virtual void createTask(const QString &project_id, const OAITaskCreateDTO &oai_task_create_dto);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void delete12(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  payable_id qint64 [required]
    */
    virtual void deletePayable(const QString &project_id, const qint64 &payable_id);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    */
    virtual void deleteReceivable(const QString &project_id, const qint64 &receivable_id);

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllIds6(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  embed QString [optional]
    */
    virtual void getById7(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getContacts(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getCustomFields5(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getDates1(const QString &project_id);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void getFileById(const QString &file_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getFinance(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getInstructions(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_contacts_dto OAIContactsDTO [required]
    */
    virtual void updateContacts(const QString &project_id, const OAIContactsDTO &oai_contacts_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_custom_field_dto QList<OAICustomFieldDTO> [required]
    */
    virtual void updateCustomFields3(const QString &project_id, const QList<OAICustomFieldDTO> &oai_custom_field_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_project_dates_dto OAIProjectDatesDTO [required]
    */
    virtual void updateDates1(const QString &project_id, const OAIProjectDatesDTO &oai_project_dates_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  oai_instructions_dto OAIInstructionsDTO [required]
    */
    virtual void updateInstructions1(const QString &project_id, const OAIInstructionsDTO &oai_instructions_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  payable_id qint64 [required]
    * @param[in]  oai_payable_dto OAIPayableDTO [required]
    */
    virtual void updatePayable(const QString &project_id, const qint64 &payable_id, const OAIPayableDTO &oai_payable_dto);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    * @param[in]  oai_receivable_dto OAIReceivableDTO [required]
    */
    virtual void updateReceivable(const QString &project_id, const qint64 &receivable_id, const OAIReceivableDTO &oai_receivable_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void create5Callback(OAIHttpRequestWorker *worker);
    void createLanguageCombinationCallback(OAIHttpRequestWorker *worker);
    void createPayableCallback(OAIHttpRequestWorker *worker);
    void createReceivableCallback(OAIHttpRequestWorker *worker);
    void createTaskCallback(OAIHttpRequestWorker *worker);
    void delete12Callback(OAIHttpRequestWorker *worker);
    void deletePayableCallback(OAIHttpRequestWorker *worker);
    void deleteReceivableCallback(OAIHttpRequestWorker *worker);
    void getAllIds6Callback(OAIHttpRequestWorker *worker);
    void getById7Callback(OAIHttpRequestWorker *worker);
    void getContactsCallback(OAIHttpRequestWorker *worker);
    void getCustomFields5Callback(OAIHttpRequestWorker *worker);
    void getDates1Callback(OAIHttpRequestWorker *worker);
    void getFileByIdCallback(OAIHttpRequestWorker *worker);
    void getFinanceCallback(OAIHttpRequestWorker *worker);
    void getInstructionsCallback(OAIHttpRequestWorker *worker);
    void updateContactsCallback(OAIHttpRequestWorker *worker);
    void updateCustomFields3Callback(OAIHttpRequestWorker *worker);
    void updateDates1Callback(OAIHttpRequestWorker *worker);
    void updateInstructions1Callback(OAIHttpRequestWorker *worker);
    void updatePayableCallback(OAIHttpRequestWorker *worker);
    void updateReceivableCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void create5Signal(OAIProjectDTOv1 summary);
    void createLanguageCombinationSignal(OAICommonLanguageCombinationDTO summary);
    void createPayableSignal(OAIPayableDTO summary);
    void createReceivableSignal(OAIReceivableDTO summary);
    void createTaskSignal(OAITaskDTO summary);
    void delete12Signal();
    void deletePayableSignal();
    void deleteReceivableSignal();
    void getAllIds6Signal(QList<qint32> summary);
    void getById7Signal(OAIProjectDTOv1 summary);
    void getContactsSignal(OAIContactsDTO summary);
    void getCustomFields5Signal(QList<OAICustomFieldDTO> summary);
    void getDates1Signal(OAIProjectDatesDTO summary);
    void getFileByIdSignal();
    void getFinanceSignal(OAIFinanceDTO summary);
    void getInstructionsSignal(OAIInstructionsDTO summary);
    void updateContactsSignal(OAIContactsDTO summary);
    void updateCustomFields3Signal(QList<OAICustomFieldDTO> summary);
    void updateDates1Signal(OAIProjectDatesDTO summary);
    void updateInstructions1Signal(OAIInstructionsDTO summary);
    void updatePayableSignal(OAIPayableDTO summary);
    void updateReceivableSignal(OAIReceivableDTO summary);


    void create5SignalFull(OAIHttpRequestWorker *worker, OAIProjectDTOv1 summary);
    void createLanguageCombinationSignalFull(OAIHttpRequestWorker *worker, OAICommonLanguageCombinationDTO summary);
    void createPayableSignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void createReceivableSignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);
    void createTaskSignalFull(OAIHttpRequestWorker *worker, OAITaskDTO summary);
    void delete12SignalFull(OAIHttpRequestWorker *worker);
    void deletePayableSignalFull(OAIHttpRequestWorker *worker);
    void deleteReceivableSignalFull(OAIHttpRequestWorker *worker);
    void getAllIds6SignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getById7SignalFull(OAIHttpRequestWorker *worker, OAIProjectDTOv1 summary);
    void getContactsSignalFull(OAIHttpRequestWorker *worker, OAIContactsDTO summary);
    void getCustomFields5SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getDates1SignalFull(OAIHttpRequestWorker *worker, OAIProjectDatesDTO summary);
    void getFileByIdSignalFull(OAIHttpRequestWorker *worker);
    void getFinanceSignalFull(OAIHttpRequestWorker *worker, OAIFinanceDTO summary);
    void getInstructionsSignalFull(OAIHttpRequestWorker *worker, OAIInstructionsDTO summary);
    void updateContactsSignalFull(OAIHttpRequestWorker *worker, OAIContactsDTO summary);
    void updateCustomFields3SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void updateDates1SignalFull(OAIHttpRequestWorker *worker, OAIProjectDatesDTO summary);
    void updateInstructions1SignalFull(OAIHttpRequestWorker *worker, OAIInstructionsDTO summary);
    void updatePayableSignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void updateReceivableSignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);

    Q_DECL_DEPRECATED_X("Use create5SignalError() instead")
    void create5SignalE(OAIProjectDTOv1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create5SignalError(OAIProjectDTOv1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLanguageCombinationSignalError() instead")
    void createLanguageCombinationSignalE(OAICommonLanguageCombinationDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLanguageCombinationSignalError(OAICommonLanguageCombinationDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayableSignalError() instead")
    void createPayableSignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayableSignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivableSignalError() instead")
    void createReceivableSignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivableSignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTaskSignalError() instead")
    void createTaskSignalE(OAITaskDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalError(OAITaskDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete12SignalError() instead")
    void delete12SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete12SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayableSignalError() instead")
    void deletePayableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivableSignalError() instead")
    void deleteReceivableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds6SignalError() instead")
    void getAllIds6SignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds6SignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById7SignalError() instead")
    void getById7SignalE(OAIProjectDTOv1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById7SignalError(OAIProjectDTOv1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactsSignalError() instead")
    void getContactsSignalE(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsSignalError(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields5SignalError() instead")
    void getCustomFields5SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields5SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDates1SignalError() instead")
    void getDates1SignalE(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDates1SignalError(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileByIdSignalError() instead")
    void getFileByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFileByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinanceSignalError() instead")
    void getFinanceSignalE(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinanceSignalError(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstructionsSignalError() instead")
    void getInstructionsSignalE(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstructionsSignalError(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactsSignalError() instead")
    void updateContactsSignalE(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactsSignalError(OAIContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields3SignalError() instead")
    void updateCustomFields3SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields3SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDates1SignalError() instead")
    void updateDates1SignalE(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDates1SignalError(OAIProjectDatesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions1SignalError() instead")
    void updateInstructions1SignalE(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions1SignalError(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayableSignalError() instead")
    void updatePayableSignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayableSignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivableSignalError() instead")
    void updateReceivableSignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivableSignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use create5SignalErrorFull() instead")
    void create5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLanguageCombinationSignalErrorFull() instead")
    void createLanguageCombinationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLanguageCombinationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayableSignalErrorFull() instead")
    void createPayableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivableSignalErrorFull() instead")
    void createReceivableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTaskSignalErrorFull() instead")
    void createTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete12SignalErrorFull() instead")
    void delete12SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete12SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayableSignalErrorFull() instead")
    void deletePayableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivableSignalErrorFull() instead")
    void deleteReceivableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds6SignalErrorFull() instead")
    void getAllIds6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById7SignalErrorFull() instead")
    void getById7SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById7SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactsSignalErrorFull() instead")
    void getContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields5SignalErrorFull() instead")
    void getCustomFields5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDates1SignalErrorFull() instead")
    void getDates1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDates1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileByIdSignalErrorFull() instead")
    void getFileByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinanceSignalErrorFull() instead")
    void getFinanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstructionsSignalErrorFull() instead")
    void getInstructionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstructionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContactsSignalErrorFull() instead")
    void updateContactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields3SignalErrorFull() instead")
    void updateCustomFields3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDates1SignalErrorFull() instead")
    void updateDates1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDates1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions1SignalErrorFull() instead")
    void updateInstructions1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayableSignalErrorFull() instead")
    void updatePayableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivableSignalErrorFull() instead")
    void updateReceivableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
