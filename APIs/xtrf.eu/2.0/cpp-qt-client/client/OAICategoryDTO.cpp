/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryDTO::OAICategoryDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryDTO::OAICategoryDTO() {
    this->initializeModel();
}

OAICategoryDTO::~OAICategoryDTO() {}

void OAICategoryDTO::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_supported_classes_isSet = false;
    m_supported_classes_isValid = false;
}

void OAICategoryDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryDTO::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_supported_classes_isValid = ::OpenAPI::fromJsonValue(m_supported_classes, json[QString("supportedClasses")]);
    m_supported_classes_isSet = !json[QString("supportedClasses")].isNull() && m_supported_classes_isValid;
}

QString OAICategoryDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_supported_classes.size() > 0) {
        obj.insert(QString("supportedClasses"), ::OpenAPI::toJsonValue(m_supported_classes));
    }
    return obj;
}

bool OAICategoryDTO::isActive() const {
    return m_active;
}
void OAICategoryDTO::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICategoryDTO::is_active_Set() const{
    return m_active_isSet;
}

bool OAICategoryDTO::is_active_Valid() const{
    return m_active_isValid;
}

bool OAICategoryDTO::isRDefault() const {
    return m_r_default;
}
void OAICategoryDTO::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAICategoryDTO::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAICategoryDTO::is_r_default_Valid() const{
    return m_r_default_isValid;
}

qint64 OAICategoryDTO::getId() const {
    return m_id;
}
void OAICategoryDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategoryDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategoryDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategoryDTO::getName() const {
    return m_name;
}
void OAICategoryDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategoryDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoryDTO::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICategoryDTO::isPreferred() const {
    return m_preferred;
}
void OAICategoryDTO::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAICategoryDTO::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAICategoryDTO::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QSet<QString> OAICategoryDTO::getSupportedClasses() const {
    return m_supported_classes;
}
void OAICategoryDTO::setSupportedClasses(const QSet<QString> &supported_classes) {
    m_supported_classes = supported_classes;
    m_supported_classes_isSet = true;
}

bool OAICategoryDTO::is_supported_classes_Set() const{
    return m_supported_classes_isSet;
}

bool OAICategoryDTO::is_supported_classes_Valid() const{
    return m_supported_classes_isValid;
}

bool OAICategoryDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
