/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVendorInvoicesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIVendorInvoicesApi::OAIVendorInvoicesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIVendorInvoicesApi::~OAIVendorInvoicesApi() {
}

void OAIVendorInvoicesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://presentation.s.xtrf.eu/home-api"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("create4", defaultConf);
    _serverIndices.insert("create4", 0);
    _serverConfigs.insert("createPayment1", defaultConf);
    _serverIndices.insert("createPayment1", 0);
    _serverConfigs.insert("delete6", defaultConf);
    _serverIndices.insert("delete6", 0);
    _serverConfigs.insert("delete7", defaultConf);
    _serverIndices.insert("delete7", 0);
    _serverConfigs.insert("getAll2", defaultConf);
    _serverIndices.insert("getAll2", 0);
    _serverConfigs.insert("getAllIds3", defaultConf);
    _serverIndices.insert("getAllIds3", 0);
    _serverConfigs.insert("getById3", defaultConf);
    _serverIndices.insert("getById3", 0);
    _serverConfigs.insert("getDocument1", defaultConf);
    _serverIndices.insert("getDocument1", 0);
    _serverConfigs.insert("getPayments1", defaultConf);
    _serverIndices.insert("getPayments1", 0);
    _serverConfigs.insert("send", defaultConf);
    _serverIndices.insert("send", 0);
    _serverConfigs.insert("setStatus", defaultConf);
    _serverIndices.insert("setStatus", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIVendorInvoicesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIVendorInvoicesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIVendorInvoicesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIVendorInvoicesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIVendorInvoicesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIVendorInvoicesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIVendorInvoicesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIVendorInvoicesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIVendorInvoicesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIVendorInvoicesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIVendorInvoicesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIVendorInvoicesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIVendorInvoicesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIVendorInvoicesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIVendorInvoicesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIVendorInvoicesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIVendorInvoicesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIVendorInvoicesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIVendorInvoicesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIVendorInvoicesApi::create4(const OAIProviderInvoiceCreateDTO &oai_provider_invoice_create_dto) {
    QString fullPath = QString(_serverConfigs["create4"][_serverIndices.value("create4")].URL()+"/accounting/providers/invoices");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_provider_invoice_create_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::create4Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::create4Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProviderInvoiceCreateResultDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT create4Signal(output);
        Q_EMIT create4SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT create4SignalE(output, error_type, error_str);
        Q_EMIT create4SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT create4SignalError(output, error_type, error_str);
        Q_EMIT create4SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::createPayment1(const qint64 &invoice_id, const OAIPaymentDTO &oai_payment_dto) {
    QString fullPath = QString(_serverConfigs["createPayment1"][_serverIndices.value("createPayment1")].URL()+"/accounting/providers/invoices/{invoiceId}/payments");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_payment_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::createPayment1Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::createPayment1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createPayment1Signal();
        Q_EMIT createPayment1SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createPayment1SignalE(error_type, error_str);
        Q_EMIT createPayment1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createPayment1SignalError(error_type, error_str);
        Q_EMIT createPayment1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::delete6(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["delete6"][_serverIndices.value("delete6")].URL()+"/accounting/providers/invoices/{invoiceId}");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::delete6Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::delete6Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delete6Signal();
        Q_EMIT delete6SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delete6SignalE(error_type, error_str);
        Q_EMIT delete6SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delete6SignalError(error_type, error_str);
        Q_EMIT delete6SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::delete7(const qint64 &payment_id) {
    QString fullPath = QString(_serverConfigs["delete7"][_serverIndices.value("delete7")].URL()+"/accounting/providers/payments/{paymentId}");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::delete7Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::delete7Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delete7Signal();
        Q_EMIT delete7SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delete7SignalE(error_type, error_str);
        Q_EMIT delete7SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delete7SignalError(error_type, error_str);
        Q_EMIT delete7SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::getAll2(const ::OpenAPI::OptionalParam<qint64> &updated_since) {
    QString fullPath = QString(_serverConfigs["getAll2"][_serverIndices.value("getAll2")].URL()+"/accounting/providers/invoices");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (updated_since.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "updatedSince", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("updatedSince")).append(querySuffix).append(QUrl::toPercentEncoding(updated_since.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::getAll2Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::getAll2Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIProviderInvoiceDTO> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIProviderInvoiceDTO val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAll2Signal(output);
        Q_EMIT getAll2SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAll2SignalE(output, error_type, error_str);
        Q_EMIT getAll2SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAll2SignalError(output, error_type, error_str);
        Q_EMIT getAll2SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::getAllIds3(const ::OpenAPI::OptionalParam<qint64> &updated_since) {
    QString fullPath = QString(_serverConfigs["getAllIds3"][_serverIndices.value("getAllIds3")].URL()+"/accounting/providers/invoices/ids");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (updated_since.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "updatedSince", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("updatedSince")).append(querySuffix).append(QUrl::toPercentEncoding(updated_since.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::getAllIds3Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::getAllIds3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<qint32> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        qint32 val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllIds3Signal(output);
        Q_EMIT getAllIds3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllIds3SignalE(output, error_type, error_str);
        Q_EMIT getAllIds3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllIds3SignalError(output, error_type, error_str);
        Q_EMIT getAllIds3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::getById3(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["getById3"][_serverIndices.value("getById3")].URL()+"/accounting/providers/invoices/{invoiceId}");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::getById3Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::getById3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProviderInvoiceDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getById3Signal(output);
        Q_EMIT getById3SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getById3SignalE(output, error_type, error_str);
        Q_EMIT getById3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getById3SignalError(output, error_type, error_str);
        Q_EMIT getById3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::getDocument1(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["getDocument1"][_serverIndices.value("getDocument1")].URL()+"/accounting/providers/invoices/{invoiceId}/document");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::getDocument1Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::getDocument1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUrlResultDTO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDocument1Signal(output);
        Q_EMIT getDocument1SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDocument1SignalE(output, error_type, error_str);
        Q_EMIT getDocument1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDocument1SignalError(output, error_type, error_str);
        Q_EMIT getDocument1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::getPayments1(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["getPayments1"][_serverIndices.value("getPayments1")].URL()+"/accounting/providers/invoices/{invoiceId}/payments");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::getPayments1Callback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::getPayments1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPaymentDTO> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPaymentDTO val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPayments1Signal(output);
        Q_EMIT getPayments1SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPayments1SignalE(output, error_type, error_str);
        Q_EMIT getPayments1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPayments1SignalError(output, error_type, error_str);
        Q_EMIT getPayments1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::send(const qint64 &invoice_id) {
    QString fullPath = QString(_serverConfigs["send"][_serverIndices.value("send")].URL()+"/accounting/providers/invoices/{invoiceId}/send");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::sendCallback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::sendCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendSignal();
        Q_EMIT sendSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendSignalE(error_type, error_str);
        Q_EMIT sendSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendSignalError(error_type, error_str);
        Q_EMIT sendSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::setStatus(const qint64 &invoice_id, const OAIStatusRequestDTO &oai_status_request_dto) {
    QString fullPath = QString(_serverConfigs["setStatus"][_serverIndices.value("setStatus")].URL()+"/accounting/providers/invoices/{invoiceId}/status");
    
    if (_apiKeys.contains("X-AUTH-ACCESS-TOKEN")) {
        addHeaders("X-AUTH-ACCESS-TOKEN",_apiKeys.find("X-AUTH-ACCESS-TOKEN").value());
    }
    
    
    {
        QString invoice_idPathParam("{");
        invoice_idPathParam.append("invoiceId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "invoiceId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"invoiceId"+pathSuffix : pathPrefix;
        fullPath.replace(invoice_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(invoice_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_status_request_dto.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIVendorInvoicesApi::setStatusCallback);
    connect(this, &OAIVendorInvoicesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIVendorInvoicesApi::setStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setStatusSignal();
        Q_EMIT setStatusSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setStatusSignalE(error_type, error_str);
        Q_EMIT setStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setStatusSignalError(error_type, error_str);
        Q_EMIT setStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIVendorInvoicesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
