/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayableDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayableDTO::OAIPayableDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayableDTO::OAIPayableDTO() {
    this->initializeModel();
}

OAIPayableDTO::~OAIPayableDTO() {}

void OAIPayableDTO::initializeModel() {

    m_calculation_unit_id_isSet = false;
    m_calculation_unit_id_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignore_minimum_charge_isSet = false;
    m_ignore_minimum_charge_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_type_id_isSet = false;
    m_job_type_id_isValid = false;

    m_language_combination_isSet = false;
    m_language_combination_isValid = false;

    m_language_combination_id_number_isSet = false;
    m_language_combination_id_number_isValid = false;

    m_minimum_charge_isSet = false;
    m_minimum_charge_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_rate_origin_isSet = false;
    m_rate_origin_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPayableDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayableDTO::fromJsonObject(QJsonObject json) {

    m_calculation_unit_id_isValid = ::OpenAPI::fromJsonValue(m_calculation_unit_id, json[QString("calculationUnitId")]);
    m_calculation_unit_id_isSet = !json[QString("calculationUnitId")].isNull() && m_calculation_unit_id_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignore_minimum_charge_isValid = ::OpenAPI::fromJsonValue(m_ignore_minimum_charge, json[QString("ignoreMinimumCharge")]);
    m_ignore_minimum_charge_isSet = !json[QString("ignoreMinimumCharge")].isNull() && m_ignore_minimum_charge_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("invoiceId")]);
    m_invoice_id_isSet = !json[QString("invoiceId")].isNull() && m_invoice_id_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_job_type_id_isValid = ::OpenAPI::fromJsonValue(m_job_type_id, json[QString("jobTypeId")]);
    m_job_type_id_isSet = !json[QString("jobTypeId")].isNull() && m_job_type_id_isValid;

    m_language_combination_isValid = ::OpenAPI::fromJsonValue(m_language_combination, json[QString("languageCombination")]);
    m_language_combination_isSet = !json[QString("languageCombination")].isNull() && m_language_combination_isValid;

    m_language_combination_id_number_isValid = ::OpenAPI::fromJsonValue(m_language_combination_id_number, json[QString("languageCombinationIdNumber")]);
    m_language_combination_id_number_isSet = !json[QString("languageCombinationIdNumber")].isNull() && m_language_combination_id_number_isValid;

    m_minimum_charge_isValid = ::OpenAPI::fromJsonValue(m_minimum_charge, json[QString("minimumCharge")]);
    m_minimum_charge_isSet = !json[QString("minimumCharge")].isNull() && m_minimum_charge_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_rate_origin_isValid = ::OpenAPI::fromJsonValue(m_rate_origin, json[QString("rateOrigin")]);
    m_rate_origin_isSet = !json[QString("rateOrigin")].isNull() && m_rate_origin_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPayableDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayableDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_calculation_unit_id_isSet) {
        obj.insert(QString("calculationUnitId"), ::OpenAPI::toJsonValue(m_calculation_unit_id));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignore_minimum_charge_isSet) {
        obj.insert(QString("ignoreMinimumCharge"), ::OpenAPI::toJsonValue(m_ignore_minimum_charge));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("invoiceId"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_type_id_isSet) {
        obj.insert(QString("jobTypeId"), ::OpenAPI::toJsonValue(m_job_type_id));
    }
    if (m_language_combination.isSet()) {
        obj.insert(QString("languageCombination"), ::OpenAPI::toJsonValue(m_language_combination));
    }
    if (m_language_combination_id_number_isSet) {
        obj.insert(QString("languageCombinationIdNumber"), ::OpenAPI::toJsonValue(m_language_combination_id_number));
    }
    if (m_minimum_charge_isSet) {
        obj.insert(QString("minimumCharge"), ::OpenAPI::toJsonValue(m_minimum_charge));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_rate_origin_isSet) {
        obj.insert(QString("rateOrigin"), ::OpenAPI::toJsonValue(m_rate_origin));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAIPayableDTO::getCalculationUnitId() const {
    return m_calculation_unit_id;
}
void OAIPayableDTO::setCalculationUnitId(const qint64 &calculation_unit_id) {
    m_calculation_unit_id = calculation_unit_id;
    m_calculation_unit_id_isSet = true;
}

bool OAIPayableDTO::is_calculation_unit_id_Set() const{
    return m_calculation_unit_id_isSet;
}

bool OAIPayableDTO::is_calculation_unit_id_Valid() const{
    return m_calculation_unit_id_isValid;
}

qint64 OAIPayableDTO::getCurrencyId() const {
    return m_currency_id;
}
void OAIPayableDTO::setCurrencyId(const qint64 &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIPayableDTO::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIPayableDTO::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAIPayableDTO::getDescription() const {
    return m_description;
}
void OAIPayableDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPayableDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPayableDTO::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIPayableDTO::getId() const {
    return m_id;
}
void OAIPayableDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPayableDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPayableDTO::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPayableDTO::isIgnoreMinimumCharge() const {
    return m_ignore_minimum_charge;
}
void OAIPayableDTO::setIgnoreMinimumCharge(const bool &ignore_minimum_charge) {
    m_ignore_minimum_charge = ignore_minimum_charge;
    m_ignore_minimum_charge_isSet = true;
}

bool OAIPayableDTO::is_ignore_minimum_charge_Set() const{
    return m_ignore_minimum_charge_isSet;
}

bool OAIPayableDTO::is_ignore_minimum_charge_Valid() const{
    return m_ignore_minimum_charge_isValid;
}

QString OAIPayableDTO::getInvoiceId() const {
    return m_invoice_id;
}
void OAIPayableDTO::setInvoiceId(const QString &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIPayableDTO::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIPayableDTO::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

OAIObject OAIPayableDTO::getJobId() const {
    return m_job_id;
}
void OAIPayableDTO::setJobId(const OAIObject &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIPayableDTO::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIPayableDTO::is_job_id_Valid() const{
    return m_job_id_isValid;
}

qint64 OAIPayableDTO::getJobTypeId() const {
    return m_job_type_id;
}
void OAIPayableDTO::setJobTypeId(const qint64 &job_type_id) {
    m_job_type_id = job_type_id;
    m_job_type_id_isSet = true;
}

bool OAIPayableDTO::is_job_type_id_Set() const{
    return m_job_type_id_isSet;
}

bool OAIPayableDTO::is_job_type_id_Valid() const{
    return m_job_type_id_isValid;
}

OAIChargeLanguageCombinationDTO OAIPayableDTO::getLanguageCombination() const {
    return m_language_combination;
}
void OAIPayableDTO::setLanguageCombination(const OAIChargeLanguageCombinationDTO &language_combination) {
    m_language_combination = language_combination;
    m_language_combination_isSet = true;
}

bool OAIPayableDTO::is_language_combination_Set() const{
    return m_language_combination_isSet;
}

bool OAIPayableDTO::is_language_combination_Valid() const{
    return m_language_combination_isValid;
}

QString OAIPayableDTO::getLanguageCombinationIdNumber() const {
    return m_language_combination_id_number;
}
void OAIPayableDTO::setLanguageCombinationIdNumber(const QString &language_combination_id_number) {
    m_language_combination_id_number = language_combination_id_number;
    m_language_combination_id_number_isSet = true;
}

bool OAIPayableDTO::is_language_combination_id_number_Set() const{
    return m_language_combination_id_number_isSet;
}

bool OAIPayableDTO::is_language_combination_id_number_Valid() const{
    return m_language_combination_id_number_isValid;
}

double OAIPayableDTO::getMinimumCharge() const {
    return m_minimum_charge;
}
void OAIPayableDTO::setMinimumCharge(const double &minimum_charge) {
    m_minimum_charge = minimum_charge;
    m_minimum_charge_isSet = true;
}

bool OAIPayableDTO::is_minimum_charge_Set() const{
    return m_minimum_charge_isSet;
}

bool OAIPayableDTO::is_minimum_charge_Valid() const{
    return m_minimum_charge_isValid;
}

double OAIPayableDTO::getQuantity() const {
    return m_quantity;
}
void OAIPayableDTO::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIPayableDTO::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIPayableDTO::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAIPayableDTO::getRate() const {
    return m_rate;
}
void OAIPayableDTO::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIPayableDTO::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIPayableDTO::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIPayableDTO::getRateOrigin() const {
    return m_rate_origin;
}
void OAIPayableDTO::setRateOrigin(const QString &rate_origin) {
    m_rate_origin = rate_origin;
    m_rate_origin_isSet = true;
}

bool OAIPayableDTO::is_rate_origin_Set() const{
    return m_rate_origin_isSet;
}

bool OAIPayableDTO::is_rate_origin_Valid() const{
    return m_rate_origin_isValid;
}

double OAIPayableDTO::getTotal() const {
    return m_total;
}
void OAIPayableDTO::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPayableDTO::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPayableDTO::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIPayableDTO::getType() const {
    return m_type;
}
void OAIPayableDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPayableDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPayableDTO::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPayableDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculation_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_minimum_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_combination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_combination_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayableDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
