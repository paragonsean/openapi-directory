/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBodyPart_mediaType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBodyPart_mediaType::OAIBodyPart_mediaType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBodyPart_mediaType::OAIBodyPart_mediaType() {
    this->initializeModel();
}

OAIBodyPart_mediaType::~OAIBodyPart_mediaType() {}

void OAIBodyPart_mediaType::initializeModel() {

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wildcard_subtype_isSet = false;
    m_wildcard_subtype_isValid = false;

    m_wildcard_type_isSet = false;
    m_wildcard_type_isValid = false;
}

void OAIBodyPart_mediaType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBodyPart_mediaType::fromJsonObject(QJsonObject json) {

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wildcard_subtype_isValid = ::OpenAPI::fromJsonValue(m_wildcard_subtype, json[QString("wildcardSubtype")]);
    m_wildcard_subtype_isSet = !json[QString("wildcardSubtype")].isNull() && m_wildcard_subtype_isValid;

    m_wildcard_type_isValid = ::OpenAPI::fromJsonValue(m_wildcard_type, json[QString("wildcardType")]);
    m_wildcard_type_isSet = !json[QString("wildcardType")].isNull() && m_wildcard_type_isValid;
}

QString OAIBodyPart_mediaType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBodyPart_mediaType::asJsonObject() const {
    QJsonObject obj;
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_wildcard_subtype_isSet) {
        obj.insert(QString("wildcardSubtype"), ::OpenAPI::toJsonValue(m_wildcard_subtype));
    }
    if (m_wildcard_type_isSet) {
        obj.insert(QString("wildcardType"), ::OpenAPI::toJsonValue(m_wildcard_type));
    }
    return obj;
}

QMap<QString, QString> OAIBodyPart_mediaType::getParameters() const {
    return m_parameters;
}
void OAIBodyPart_mediaType::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIBodyPart_mediaType::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIBodyPart_mediaType::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIBodyPart_mediaType::getSubtype() const {
    return m_subtype;
}
void OAIBodyPart_mediaType::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIBodyPart_mediaType::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIBodyPart_mediaType::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIBodyPart_mediaType::getType() const {
    return m_type;
}
void OAIBodyPart_mediaType::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBodyPart_mediaType::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBodyPart_mediaType::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBodyPart_mediaType::isWildcardSubtype() const {
    return m_wildcard_subtype;
}
void OAIBodyPart_mediaType::setWildcardSubtype(const bool &wildcard_subtype) {
    m_wildcard_subtype = wildcard_subtype;
    m_wildcard_subtype_isSet = true;
}

bool OAIBodyPart_mediaType::is_wildcard_subtype_Set() const{
    return m_wildcard_subtype_isSet;
}

bool OAIBodyPart_mediaType::is_wildcard_subtype_Valid() const{
    return m_wildcard_subtype_isValid;
}

bool OAIBodyPart_mediaType::isWildcardType() const {
    return m_wildcard_type;
}
void OAIBodyPart_mediaType::setWildcardType(const bool &wildcard_type) {
    m_wildcard_type = wildcard_type;
    m_wildcard_type_isSet = true;
}

bool OAIBodyPart_mediaType::is_wildcard_type_Set() const{
    return m_wildcard_type_isSet;
}

bool OAIBodyPart_mediaType::is_wildcard_type_Valid() const{
    return m_wildcard_type_isValid;
}

bool OAIBodyPart_mediaType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wildcard_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wildcard_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBodyPart_mediaType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
