/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBrowserApi_H
#define OAI_OAIBrowserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIColumnDTO.h"
#include "OAIFilterDTO.h"
#include "OAIFilterPropertyDTO.h"
#include "OAILocalSettingsDTO.h"
#include "OAIObject.h"
#include "OAIOrderDTO.h"
#include "OAIPermissionsDTO.h"
#include "OAISettingsDTO.h"
#include "OAIViewDTO.h"
#include "OAIViewDetailsDTO.h"
#include "OAIViewWithIdDTO.h"
#include "OAIViewsBriefDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBrowserApi : public QObject {
    Q_OBJECT

public:
    OAIBrowserApi(const int timeOut = 0);
    ~OAIBrowserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  view_id qint64 [optional]
    * @param[in]  separator QString [optional]
    * @param[in]  secondary_separator QString [optional]
    * @param[in]  additional_order QString [optional]
    */
    virtual void browseCSV(const ::OpenAPI::OptionalParam<qint64> &view_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &separator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &secondary_separator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &additional_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  view_id qint64 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  additional_order QString [optional]
    * @param[in]  use_deferred_columns QString [optional]
    * @param[in]  max_rows qint32 [optional]
    */
    virtual void browseJSON(const ::OpenAPI::OptionalParam<qint64> &view_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &additional_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_deferred_columns = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_rows = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  oai_view_dto OAIViewDTO [required]
    */
    virtual void create(const QString &class_name, const OAIViewDTO &oai_view_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  column_name QString [required]
    */
    virtual void deleteColumn(const qint64 &view_id, const QString &column_name);

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void get(const qint64 &view_id);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  column_name QString [required]
    */
    virtual void getColumnSettings(const qint64 &view_id, const QString &column_name);

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void getColumns(const qint64 &view_id);

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  place_name QString [optional]
    */
    virtual void getCurrentViewDetails(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &place_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void getFilter(const qint64 &view_id);

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void getLocalSettings(const qint64 &view_id);

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void getOrder(const qint64 &view_id);

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void getPermissions(const qint64 &view_id);

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void getSettings(const qint64 &view_id);

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  view_id qint64 [required]
    * @param[in]  place_name QString [optional]
    */
    virtual void getViewDetails(const QString &class_name, const qint64 &view_id, const ::OpenAPI::OptionalParam<QString> &place_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  place_name QString [optional]
    */
    virtual void getViewsBrief(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &place_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  view_id qint64 [required]
    */
    virtual void r_delete(const qint64 &view_id);

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  view_id qint64 [required]
    * @param[in]  place_name__denotes_specific_place_in_system_with_the_table QString [optional]
    */
    virtual void selectViewAndGetItsDetails(const QString &class_name, const qint64 &view_id, const ::OpenAPI::OptionalParam<QString> &place_name__denotes_specific_place_in_system_with_the_table = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  oai_view_dto OAIViewDTO [required]
    */
    virtual void update(const qint64 &view_id, const OAIViewDTO &oai_view_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  column_name QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void updateColumnSettings(const qint64 &view_id, const QString &column_name, const OAIObject &body);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  oai_column_dto QList<OAIColumnDTO> [required]
    */
    virtual void updateColumns(const qint64 &view_id, const QList<OAIColumnDTO> &oai_column_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  oai_filter_property_dto QList<OAIFilterPropertyDTO> [required]
    */
    virtual void updateFilter(const qint64 &view_id, const QList<OAIFilterPropertyDTO> &oai_filter_property_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  filter_property QString [required]
    * @param[in]  oai_filter_property_dto OAIFilterPropertyDTO [required]
    */
    virtual void updateFilterProperty(const qint64 &view_id, const QString &filter_property, const OAIFilterPropertyDTO &oai_filter_property_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  oai_local_settings_dto OAILocalSettingsDTO [required]
    */
    virtual void updateLocalSettings(const qint64 &view_id, const OAILocalSettingsDTO &oai_local_settings_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  oai_order_dto OAIOrderDTO [required]
    */
    virtual void updateOrder(const qint64 &view_id, const OAIOrderDTO &oai_order_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  oai_permissions_dto OAIPermissionsDTO [required]
    */
    virtual void updatePermissions(const qint64 &view_id, const OAIPermissionsDTO &oai_permissions_dto);

    /**
    * @param[in]  view_id qint64 [required]
    * @param[in]  oai_settings_dto OAISettingsDTO [required]
    */
    virtual void updateSettings(const qint64 &view_id, const OAISettingsDTO &oai_settings_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void browseCSVCallback(OAIHttpRequestWorker *worker);
    void browseJSONCallback(OAIHttpRequestWorker *worker);
    void createCallback(OAIHttpRequestWorker *worker);
    void deleteColumnCallback(OAIHttpRequestWorker *worker);
    void getCallback(OAIHttpRequestWorker *worker);
    void getColumnSettingsCallback(OAIHttpRequestWorker *worker);
    void getColumnsCallback(OAIHttpRequestWorker *worker);
    void getCurrentViewDetailsCallback(OAIHttpRequestWorker *worker);
    void getFilterCallback(OAIHttpRequestWorker *worker);
    void getLocalSettingsCallback(OAIHttpRequestWorker *worker);
    void getOrderCallback(OAIHttpRequestWorker *worker);
    void getPermissionsCallback(OAIHttpRequestWorker *worker);
    void getSettingsCallback(OAIHttpRequestWorker *worker);
    void getViewDetailsCallback(OAIHttpRequestWorker *worker);
    void getViewsBriefCallback(OAIHttpRequestWorker *worker);
    void r_deleteCallback(OAIHttpRequestWorker *worker);
    void selectViewAndGetItsDetailsCallback(OAIHttpRequestWorker *worker);
    void updateCallback(OAIHttpRequestWorker *worker);
    void updateColumnSettingsCallback(OAIHttpRequestWorker *worker);
    void updateColumnsCallback(OAIHttpRequestWorker *worker);
    void updateFilterCallback(OAIHttpRequestWorker *worker);
    void updateFilterPropertyCallback(OAIHttpRequestWorker *worker);
    void updateLocalSettingsCallback(OAIHttpRequestWorker *worker);
    void updateOrderCallback(OAIHttpRequestWorker *worker);
    void updatePermissionsCallback(OAIHttpRequestWorker *worker);
    void updateSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void browseCSVSignal(OAIObject summary);
    void browseJSONSignal(OAIObject summary);
    void createSignal(OAIViewWithIdDTO summary);
    void deleteColumnSignal(QList<OAIColumnDTO> summary);
    void getSignal(OAIViewDTO summary);
    void getColumnSettingsSignal(OAIObject summary);
    void getColumnsSignal(QList<OAIColumnDTO> summary);
    void getCurrentViewDetailsSignal(OAIViewDetailsDTO summary);
    void getFilterSignal(OAIFilterDTO summary);
    void getLocalSettingsSignal(OAILocalSettingsDTO summary);
    void getOrderSignal(OAIOrderDTO summary);
    void getPermissionsSignal(OAIPermissionsDTO summary);
    void getSettingsSignal(OAISettingsDTO summary);
    void getViewDetailsSignal(OAIViewDetailsDTO summary);
    void getViewsBriefSignal(OAIViewsBriefDTO summary);
    void r_deleteSignal();
    void selectViewAndGetItsDetailsSignal(OAIViewDetailsDTO summary);
    void updateSignal(OAIViewDTO summary);
    void updateColumnSettingsSignal(OAIObject summary);
    void updateColumnsSignal(QList<OAIColumnDTO> summary);
    void updateFilterSignal(OAIFilterDTO summary);
    void updateFilterPropertySignal(OAIObject summary);
    void updateLocalSettingsSignal(OAILocalSettingsDTO summary);
    void updateOrderSignal(OAIOrderDTO summary);
    void updatePermissionsSignal(OAIPermissionsDTO summary);
    void updateSettingsSignal(OAISettingsDTO summary);


    void browseCSVSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void browseJSONSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createSignalFull(OAIHttpRequestWorker *worker, OAIViewWithIdDTO summary);
    void deleteColumnSignalFull(OAIHttpRequestWorker *worker, QList<OAIColumnDTO> summary);
    void getSignalFull(OAIHttpRequestWorker *worker, OAIViewDTO summary);
    void getColumnSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getColumnsSignalFull(OAIHttpRequestWorker *worker, QList<OAIColumnDTO> summary);
    void getCurrentViewDetailsSignalFull(OAIHttpRequestWorker *worker, OAIViewDetailsDTO summary);
    void getFilterSignalFull(OAIHttpRequestWorker *worker, OAIFilterDTO summary);
    void getLocalSettingsSignalFull(OAIHttpRequestWorker *worker, OAILocalSettingsDTO summary);
    void getOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderDTO summary);
    void getPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissionsDTO summary);
    void getSettingsSignalFull(OAIHttpRequestWorker *worker, OAISettingsDTO summary);
    void getViewDetailsSignalFull(OAIHttpRequestWorker *worker, OAIViewDetailsDTO summary);
    void getViewsBriefSignalFull(OAIHttpRequestWorker *worker, OAIViewsBriefDTO summary);
    void r_deleteSignalFull(OAIHttpRequestWorker *worker);
    void selectViewAndGetItsDetailsSignalFull(OAIHttpRequestWorker *worker, OAIViewDetailsDTO summary);
    void updateSignalFull(OAIHttpRequestWorker *worker, OAIViewDTO summary);
    void updateColumnSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateColumnsSignalFull(OAIHttpRequestWorker *worker, QList<OAIColumnDTO> summary);
    void updateFilterSignalFull(OAIHttpRequestWorker *worker, OAIFilterDTO summary);
    void updateFilterPropertySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateLocalSettingsSignalFull(OAIHttpRequestWorker *worker, OAILocalSettingsDTO summary);
    void updateOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderDTO summary);
    void updatePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissionsDTO summary);
    void updateSettingsSignalFull(OAIHttpRequestWorker *worker, OAISettingsDTO summary);

    Q_DECL_DEPRECATED_X("Use browseCSVSignalError() instead")
    void browseCSVSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void browseCSVSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use browseJSONSignalError() instead")
    void browseJSONSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void browseJSONSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSignalError() instead")
    void createSignalE(OAIViewWithIdDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSignalError(OAIViewWithIdDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteColumnSignalError() instead")
    void deleteColumnSignalE(QList<OAIColumnDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteColumnSignalError(QList<OAIColumnDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalError() instead")
    void getSignalE(OAIViewDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalError(OAIViewDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getColumnSettingsSignalError() instead")
    void getColumnSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getColumnSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getColumnsSignalError() instead")
    void getColumnsSignalE(QList<OAIColumnDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getColumnsSignalError(QList<OAIColumnDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentViewDetailsSignalError() instead")
    void getCurrentViewDetailsSignalE(OAIViewDetailsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentViewDetailsSignalError(OAIViewDetailsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterSignalError() instead")
    void getFilterSignalE(OAIFilterDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterSignalError(OAIFilterDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocalSettingsSignalError() instead")
    void getLocalSettingsSignalE(OAILocalSettingsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocalSettingsSignalError(OAILocalSettingsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalError() instead")
    void getOrderSignalE(OAIOrderDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalError(OAIOrderDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalError() instead")
    void getPermissionsSignalE(OAIPermissionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalError(OAIPermissionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsSignalError() instead")
    void getSettingsSignalE(OAISettingsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsSignalError(OAISettingsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getViewDetailsSignalError() instead")
    void getViewDetailsSignalE(OAIViewDetailsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getViewDetailsSignalError(OAIViewDetailsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getViewsBriefSignalError() instead")
    void getViewsBriefSignalE(OAIViewsBriefDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getViewsBriefSignalError(OAIViewsBriefDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalError() instead")
    void r_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selectViewAndGetItsDetailsSignalError() instead")
    void selectViewAndGetItsDetailsSignalE(OAIViewDetailsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void selectViewAndGetItsDetailsSignalError(OAIViewDetailsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalError() instead")
    void updateSignalE(OAIViewDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalError(OAIViewDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateColumnSettingsSignalError() instead")
    void updateColumnSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateColumnSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateColumnsSignalError() instead")
    void updateColumnsSignalE(QList<OAIColumnDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateColumnsSignalError(QList<OAIColumnDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterSignalError() instead")
    void updateFilterSignalE(OAIFilterDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterSignalError(OAIFilterDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterPropertySignalError() instead")
    void updateFilterPropertySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterPropertySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLocalSettingsSignalError() instead")
    void updateLocalSettingsSignalE(OAILocalSettingsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLocalSettingsSignalError(OAILocalSettingsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderSignalError() instead")
    void updateOrderSignalE(OAIOrderDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderSignalError(OAIOrderDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionsSignalError() instead")
    void updatePermissionsSignalE(OAIPermissionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionsSignalError(OAIPermissionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSettingsSignalError() instead")
    void updateSettingsSignalE(OAISettingsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalError(OAISettingsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use browseCSVSignalErrorFull() instead")
    void browseCSVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void browseCSVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use browseJSONSignalErrorFull() instead")
    void browseJSONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void browseJSONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSignalErrorFull() instead")
    void createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteColumnSignalErrorFull() instead")
    void deleteColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignalErrorFull() instead")
    void getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getColumnSettingsSignalErrorFull() instead")
    void getColumnSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getColumnSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getColumnsSignalErrorFull() instead")
    void getColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentViewDetailsSignalErrorFull() instead")
    void getCurrentViewDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentViewDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterSignalErrorFull() instead")
    void getFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocalSettingsSignalErrorFull() instead")
    void getLocalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalErrorFull() instead")
    void getOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalErrorFull() instead")
    void getPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsSignalErrorFull() instead")
    void getSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getViewDetailsSignalErrorFull() instead")
    void getViewDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getViewDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getViewsBriefSignalErrorFull() instead")
    void getViewsBriefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getViewsBriefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalErrorFull() instead")
    void r_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selectViewAndGetItsDetailsSignalErrorFull() instead")
    void selectViewAndGetItsDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selectViewAndGetItsDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalErrorFull() instead")
    void updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateColumnSettingsSignalErrorFull() instead")
    void updateColumnSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateColumnSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateColumnsSignalErrorFull() instead")
    void updateColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterSignalErrorFull() instead")
    void updateFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterPropertySignalErrorFull() instead")
    void updateFilterPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLocalSettingsSignalErrorFull() instead")
    void updateLocalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLocalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrderSignalErrorFull() instead")
    void updateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionsSignalErrorFull() instead")
    void updatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSettingsSignalErrorFull() instead")
    void updateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
