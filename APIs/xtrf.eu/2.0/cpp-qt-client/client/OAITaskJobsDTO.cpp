/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskJobsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskJobsDTO::OAITaskJobsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskJobsDTO::OAITaskJobsDTO() {
    this->initializeModel();
}

OAITaskJobsDTO::~OAITaskJobsDTO() {}

void OAITaskJobsDTO::initializeModel() {

    m_job_count_isSet = false;
    m_job_count_isValid = false;

    m_job_ids_isSet = false;
    m_job_ids_isValid = false;
}

void OAITaskJobsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskJobsDTO::fromJsonObject(QJsonObject json) {

    m_job_count_isValid = ::OpenAPI::fromJsonValue(m_job_count, json[QString("jobCount")]);
    m_job_count_isSet = !json[QString("jobCount")].isNull() && m_job_count_isValid;

    m_job_ids_isValid = ::OpenAPI::fromJsonValue(m_job_ids, json[QString("jobIds")]);
    m_job_ids_isSet = !json[QString("jobIds")].isNull() && m_job_ids_isValid;
}

QString OAITaskJobsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskJobsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_job_count_isSet) {
        obj.insert(QString("jobCount"), ::OpenAPI::toJsonValue(m_job_count));
    }
    if (m_job_ids.size() > 0) {
        obj.insert(QString("jobIds"), ::OpenAPI::toJsonValue(m_job_ids));
    }
    return obj;
}

qint32 OAITaskJobsDTO::getJobCount() const {
    return m_job_count;
}
void OAITaskJobsDTO::setJobCount(const qint32 &job_count) {
    m_job_count = job_count;
    m_job_count_isSet = true;
}

bool OAITaskJobsDTO::is_job_count_Set() const{
    return m_job_count_isSet;
}

bool OAITaskJobsDTO::is_job_count_Valid() const{
    return m_job_count_isValid;
}

QList<qint64> OAITaskJobsDTO::getJobIds() const {
    return m_job_ids;
}
void OAITaskJobsDTO::setJobIds(const QList<qint64> &job_ids) {
    m_job_ids = job_ids;
    m_job_ids_isSet = true;
}

bool OAITaskJobsDTO::is_job_ids_Set() const{
    return m_job_ids_isSet;
}

bool OAITaskJobsDTO::is_job_ids_Valid() const{
    return m_job_ids_isValid;
}

bool OAITaskJobsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskJobsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
