/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuotesClassicApi_H
#define OAI_OAIQuotesClassicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommonLanguageCombinationDTO.h"
#include "OAICustomFieldDTO.h"
#include "OAIFinanceDTO.h"
#include "OAIInstructionsDTO.h"
#include "OAIPayableCreateDTO.h"
#include "OAIPayableDTO.h"
#include "OAIQuoteDTOv1.h"
#include "OAIQuoteDatesDTO.h"
#include "OAIReceivableCreateDTO.h"
#include "OAIReceivableDTO.h"
#include "OAITaskDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuotesClassicApi : public QObject {
    Q_OBJECT

public:
    OAIQuotesClassicApi(const int timeOut = 0);
    ~OAIQuotesClassicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_common_language_combination_dto OAICommonLanguageCombinationDTO [required]
    */
    virtual void createLanguageCombination1(const QString &quote_id, const OAICommonLanguageCombinationDTO &oai_common_language_combination_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_payable_create_dto OAIPayableCreateDTO [required]
    */
    virtual void createPayable1(const QString &quote_id, const OAIPayableCreateDTO &oai_payable_create_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_receivable_create_dto OAIReceivableCreateDTO [required]
    */
    virtual void createReceivable1(const QString &quote_id, const OAIReceivableCreateDTO &oai_receivable_create_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_task_dto OAITaskDTO [required]
    */
    virtual void createTask1(const QString &quote_id, const OAITaskDTO &oai_task_dto);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void delete13(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  payable_id qint64 [required]
    */
    virtual void deletePayable1(const QString &quote_id, const qint64 &payable_id);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    */
    virtual void deleteReceivable1(const QString &quote_id, const qint64 &receivable_id);

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllIds7(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  embed QString [optional]
    */
    virtual void getById8(const QString &quote_id, const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getCustomFields6(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getDates2(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getFinance1(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getInstructions1(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void send1(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void start(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_custom_field_dto QList<OAICustomFieldDTO> [required]
    */
    virtual void updateCustomFields4(const QString &quote_id, const QList<OAICustomFieldDTO> &oai_custom_field_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_instructions_dto OAIInstructionsDTO [required]
    */
    virtual void updateInstructions2(const QString &quote_id, const OAIInstructionsDTO &oai_instructions_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  payable_id qint64 [required]
    * @param[in]  oai_payable_dto OAIPayableDTO [required]
    */
    virtual void updatePayable1(const QString &quote_id, const qint64 &payable_id, const OAIPayableDTO &oai_payable_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    * @param[in]  oai_receivable_dto OAIReceivableDTO [required]
    */
    virtual void updateReceivable1(const QString &quote_id, const qint64 &receivable_id, const OAIReceivableDTO &oai_receivable_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLanguageCombination1Callback(OAIHttpRequestWorker *worker);
    void createPayable1Callback(OAIHttpRequestWorker *worker);
    void createReceivable1Callback(OAIHttpRequestWorker *worker);
    void createTask1Callback(OAIHttpRequestWorker *worker);
    void delete13Callback(OAIHttpRequestWorker *worker);
    void deletePayable1Callback(OAIHttpRequestWorker *worker);
    void deleteReceivable1Callback(OAIHttpRequestWorker *worker);
    void getAllIds7Callback(OAIHttpRequestWorker *worker);
    void getById8Callback(OAIHttpRequestWorker *worker);
    void getCustomFields6Callback(OAIHttpRequestWorker *worker);
    void getDates2Callback(OAIHttpRequestWorker *worker);
    void getFinance1Callback(OAIHttpRequestWorker *worker);
    void getInstructions1Callback(OAIHttpRequestWorker *worker);
    void send1Callback(OAIHttpRequestWorker *worker);
    void startCallback(OAIHttpRequestWorker *worker);
    void updateCustomFields4Callback(OAIHttpRequestWorker *worker);
    void updateInstructions2Callback(OAIHttpRequestWorker *worker);
    void updatePayable1Callback(OAIHttpRequestWorker *worker);
    void updateReceivable1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLanguageCombination1Signal(OAICommonLanguageCombinationDTO summary);
    void createPayable1Signal(OAIPayableDTO summary);
    void createReceivable1Signal(OAIReceivableDTO summary);
    void createTask1Signal(OAITaskDTO summary);
    void delete13Signal();
    void deletePayable1Signal();
    void deleteReceivable1Signal();
    void getAllIds7Signal(QList<qint32> summary);
    void getById8Signal(OAIQuoteDTOv1 summary);
    void getCustomFields6Signal(QList<OAICustomFieldDTO> summary);
    void getDates2Signal(OAIQuoteDatesDTO summary);
    void getFinance1Signal(OAIFinanceDTO summary);
    void getInstructions1Signal(OAIInstructionsDTO summary);
    void send1Signal();
    void startSignal();
    void updateCustomFields4Signal(QList<OAICustomFieldDTO> summary);
    void updateInstructions2Signal(OAIInstructionsDTO summary);
    void updatePayable1Signal(OAIPayableDTO summary);
    void updateReceivable1Signal(OAIReceivableDTO summary);


    void createLanguageCombination1SignalFull(OAIHttpRequestWorker *worker, OAICommonLanguageCombinationDTO summary);
    void createPayable1SignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void createReceivable1SignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);
    void createTask1SignalFull(OAIHttpRequestWorker *worker, OAITaskDTO summary);
    void delete13SignalFull(OAIHttpRequestWorker *worker);
    void deletePayable1SignalFull(OAIHttpRequestWorker *worker);
    void deleteReceivable1SignalFull(OAIHttpRequestWorker *worker);
    void getAllIds7SignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getById8SignalFull(OAIHttpRequestWorker *worker, OAIQuoteDTOv1 summary);
    void getCustomFields6SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getDates2SignalFull(OAIHttpRequestWorker *worker, OAIQuoteDatesDTO summary);
    void getFinance1SignalFull(OAIHttpRequestWorker *worker, OAIFinanceDTO summary);
    void getInstructions1SignalFull(OAIHttpRequestWorker *worker, OAIInstructionsDTO summary);
    void send1SignalFull(OAIHttpRequestWorker *worker);
    void startSignalFull(OAIHttpRequestWorker *worker);
    void updateCustomFields4SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void updateInstructions2SignalFull(OAIHttpRequestWorker *worker, OAIInstructionsDTO summary);
    void updatePayable1SignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void updateReceivable1SignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);

    Q_DECL_DEPRECATED_X("Use createLanguageCombination1SignalError() instead")
    void createLanguageCombination1SignalE(OAICommonLanguageCombinationDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLanguageCombination1SignalError(OAICommonLanguageCombinationDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayable1SignalError() instead")
    void createPayable1SignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayable1SignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivable1SignalError() instead")
    void createReceivable1SignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivable1SignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTask1SignalError() instead")
    void createTask1SignalE(OAITaskDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTask1SignalError(OAITaskDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete13SignalError() instead")
    void delete13SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete13SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayable1SignalError() instead")
    void deletePayable1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayable1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivable1SignalError() instead")
    void deleteReceivable1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivable1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds7SignalError() instead")
    void getAllIds7SignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds7SignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById8SignalError() instead")
    void getById8SignalE(OAIQuoteDTOv1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById8SignalError(OAIQuoteDTOv1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields6SignalError() instead")
    void getCustomFields6SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields6SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDates2SignalError() instead")
    void getDates2SignalE(OAIQuoteDatesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDates2SignalError(OAIQuoteDatesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinance1SignalError() instead")
    void getFinance1SignalE(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinance1SignalError(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstructions1SignalError() instead")
    void getInstructions1SignalE(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstructions1SignalError(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use send1SignalError() instead")
    void send1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void send1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalError() instead")
    void startSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields4SignalError() instead")
    void updateCustomFields4SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields4SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions2SignalError() instead")
    void updateInstructions2SignalE(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions2SignalError(OAIInstructionsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayable1SignalError() instead")
    void updatePayable1SignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayable1SignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivable1SignalError() instead")
    void updateReceivable1SignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivable1SignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLanguageCombination1SignalErrorFull() instead")
    void createLanguageCombination1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLanguageCombination1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayable1SignalErrorFull() instead")
    void createPayable1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayable1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivable1SignalErrorFull() instead")
    void createReceivable1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivable1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTask1SignalErrorFull() instead")
    void createTask1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTask1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete13SignalErrorFull() instead")
    void delete13SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete13SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayable1SignalErrorFull() instead")
    void deletePayable1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayable1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivable1SignalErrorFull() instead")
    void deleteReceivable1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivable1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIds7SignalErrorFull() instead")
    void getAllIds7SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIds7SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById8SignalErrorFull() instead")
    void getById8SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById8SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields6SignalErrorFull() instead")
    void getCustomFields6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDates2SignalErrorFull() instead")
    void getDates2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDates2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinance1SignalErrorFull() instead")
    void getFinance1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinance1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstructions1SignalErrorFull() instead")
    void getInstructions1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstructions1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use send1SignalErrorFull() instead")
    void send1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void send1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalErrorFull() instead")
    void startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields4SignalErrorFull() instead")
    void updateCustomFields4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions2SignalErrorFull() instead")
    void updateInstructions2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayable1SignalErrorFull() instead")
    void updatePayable1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayable1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivable1SignalErrorFull() instead")
    void updateReceivable1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivable1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
