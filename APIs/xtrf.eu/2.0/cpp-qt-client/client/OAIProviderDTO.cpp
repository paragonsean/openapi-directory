/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderDTO::OAIProviderDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderDTO::OAIProviderDTO() {
    this->initializeModel();
}

OAIProviderDTO::~OAIProviderDTO() {}

void OAIProviderDTO::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_competencies_isSet = false;
    m_competencies_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_correspondence_address_isSet = false;
    m_correspondence_address_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_number_isSet = false;
    m_id_number_isValid = false;

    m_lead_source_id_isSet = false;
    m_lead_source_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_persons_isSet = false;
    m_persons_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIProviderDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderDTO::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("branchId")]);
    m_branch_id_isSet = !json[QString("branchId")].isNull() && m_branch_id_isValid;

    m_competencies_isValid = ::OpenAPI::fromJsonValue(m_competencies, json[QString("competencies")]);
    m_competencies_isSet = !json[QString("competencies")].isNull() && m_competencies_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_correspondence_address_isValid = ::OpenAPI::fromJsonValue(m_correspondence_address, json[QString("correspondenceAddress")]);
    m_correspondence_address_isSet = !json[QString("correspondenceAddress")].isNull() && m_correspondence_address_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_number_isValid = ::OpenAPI::fromJsonValue(m_id_number, json[QString("idNumber")]);
    m_id_number_isSet = !json[QString("idNumber")].isNull() && m_id_number_isValid;

    m_lead_source_id_isValid = ::OpenAPI::fromJsonValue(m_lead_source_id, json[QString("leadSourceId")]);
    m_lead_source_id_isSet = !json[QString("leadSourceId")].isNull() && m_lead_source_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_persons_isValid = ::OpenAPI::fromJsonValue(m_persons, json[QString("persons")]);
    m_persons_isSet = !json[QString("persons")].isNull() && m_persons_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIProviderDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_branch_id_isSet) {
        obj.insert(QString("branchId"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_competencies.isSet()) {
        obj.insert(QString("competencies"), ::OpenAPI::toJsonValue(m_competencies));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_correspondence_address.isSet()) {
        obj.insert(QString("correspondenceAddress"), ::OpenAPI::toJsonValue(m_correspondence_address));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_number_isSet) {
        obj.insert(QString("idNumber"), ::OpenAPI::toJsonValue(m_id_number));
    }
    if (m_lead_source_id_isSet) {
        obj.insert(QString("leadSourceId"), ::OpenAPI::toJsonValue(m_lead_source_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_persons.size() > 0) {
        obj.insert(QString("persons"), ::OpenAPI::toJsonValue(m_persons));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAddressDTO OAIProviderDTO::getBillingAddress() const {
    return m_billing_address;
}
void OAIProviderDTO::setBillingAddress(const OAIAddressDTO &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIProviderDTO::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIProviderDTO::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

qint64 OAIProviderDTO::getBranchId() const {
    return m_branch_id;
}
void OAIProviderDTO::setBranchId(const qint64 &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAIProviderDTO::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAIProviderDTO::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

OAICompetenciesDTO OAIProviderDTO::getCompetencies() const {
    return m_competencies;
}
void OAIProviderDTO::setCompetencies(const OAICompetenciesDTO &competencies) {
    m_competencies = competencies;
    m_competencies_isSet = true;
}

bool OAIProviderDTO::is_competencies_Set() const{
    return m_competencies_isSet;
}

bool OAIProviderDTO::is_competencies_Valid() const{
    return m_competencies_isValid;
}

OAIContactDTO OAIProviderDTO::getContact() const {
    return m_contact;
}
void OAIProviderDTO::setContact(const OAIContactDTO &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIProviderDTO::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIProviderDTO::is_contact_Valid() const{
    return m_contact_isValid;
}

OAIAddressDTO OAIProviderDTO::getCorrespondenceAddress() const {
    return m_correspondence_address;
}
void OAIProviderDTO::setCorrespondenceAddress(const OAIAddressDTO &correspondence_address) {
    m_correspondence_address = correspondence_address;
    m_correspondence_address_isSet = true;
}

bool OAIProviderDTO::is_correspondence_address_Set() const{
    return m_correspondence_address_isSet;
}

bool OAIProviderDTO::is_correspondence_address_Valid() const{
    return m_correspondence_address_isValid;
}

QList<OAICustomFieldDTO> OAIProviderDTO::getCustomFields() const {
    return m_custom_fields;
}
void OAIProviderDTO::setCustomFields(const QList<OAICustomFieldDTO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProviderDTO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProviderDTO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIProviderDTO::getFullName() const {
    return m_full_name;
}
void OAIProviderDTO::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIProviderDTO::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIProviderDTO::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint64 OAIProviderDTO::getId() const {
    return m_id;
}
void OAIProviderDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProviderDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProviderDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProviderDTO::getIdNumber() const {
    return m_id_number;
}
void OAIProviderDTO::setIdNumber(const QString &id_number) {
    m_id_number = id_number;
    m_id_number_isSet = true;
}

bool OAIProviderDTO::is_id_number_Set() const{
    return m_id_number_isSet;
}

bool OAIProviderDTO::is_id_number_Valid() const{
    return m_id_number_isValid;
}

qint64 OAIProviderDTO::getLeadSourceId() const {
    return m_lead_source_id;
}
void OAIProviderDTO::setLeadSourceId(const qint64 &lead_source_id) {
    m_lead_source_id = lead_source_id;
    m_lead_source_id_isSet = true;
}

bool OAIProviderDTO::is_lead_source_id_Set() const{
    return m_lead_source_id_isSet;
}

bool OAIProviderDTO::is_lead_source_id_Valid() const{
    return m_lead_source_id_isValid;
}

QString OAIProviderDTO::getName() const {
    return m_name;
}
void OAIProviderDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProviderDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProviderDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProviderDTO::getNotes() const {
    return m_notes;
}
void OAIProviderDTO::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIProviderDTO::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIProviderDTO::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIProviderPersonDTO> OAIProviderDTO::getPersons() const {
    return m_persons;
}
void OAIProviderDTO::setPersons(const QList<OAIProviderPersonDTO> &persons) {
    m_persons = persons;
    m_persons_isSet = true;
}

bool OAIProviderDTO::is_persons_Set() const{
    return m_persons_isSet;
}

bool OAIProviderDTO::is_persons_Valid() const{
    return m_persons_isValid;
}

QString OAIProviderDTO::getStatus() const {
    return m_status;
}
void OAIProviderDTO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProviderDTO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProviderDTO::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProviderDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_competencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_correspondence_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
