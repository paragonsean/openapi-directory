/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobTypeDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobTypeDTO::OAIJobTypeDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobTypeDTO::OAIJobTypeDTO() {
    this->initializeModel();
}

OAIJobTypeDTO::~OAIJobTypeDTO() {}

void OAIJobTypeDTO::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_calculation_unit_ids_isSet = false;
    m_calculation_unit_ids_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_files_needed_isSet = false;
    m_files_needed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_provided_by_client_isSet = false;
    m_provided_by_client_isValid = false;

    m_relation_to_language_isSet = false;
    m_relation_to_language_isValid = false;

    m_vendor_productivity_isSet = false;
    m_vendor_productivity_isValid = false;

    m_vendor_productivity_calculation_unit_id_isSet = false;
    m_vendor_productivity_calculation_unit_id_isValid = false;
}

void OAIJobTypeDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobTypeDTO::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_calculation_unit_ids_isValid = ::OpenAPI::fromJsonValue(m_calculation_unit_ids, json[QString("calculationUnitIds")]);
    m_calculation_unit_ids_isSet = !json[QString("calculationUnitIds")].isNull() && m_calculation_unit_ids_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_files_needed_isValid = ::OpenAPI::fromJsonValue(m_files_needed, json[QString("filesNeeded")]);
    m_files_needed_isSet = !json[QString("filesNeeded")].isNull() && m_files_needed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_provided_by_client_isValid = ::OpenAPI::fromJsonValue(m_provided_by_client, json[QString("providedByClient")]);
    m_provided_by_client_isSet = !json[QString("providedByClient")].isNull() && m_provided_by_client_isValid;

    m_relation_to_language_isValid = ::OpenAPI::fromJsonValue(m_relation_to_language, json[QString("relationToLanguage")]);
    m_relation_to_language_isSet = !json[QString("relationToLanguage")].isNull() && m_relation_to_language_isValid;

    m_vendor_productivity_isValid = ::OpenAPI::fromJsonValue(m_vendor_productivity, json[QString("vendorProductivity")]);
    m_vendor_productivity_isSet = !json[QString("vendorProductivity")].isNull() && m_vendor_productivity_isValid;

    m_vendor_productivity_calculation_unit_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_productivity_calculation_unit_id, json[QString("vendorProductivityCalculationUnitId")]);
    m_vendor_productivity_calculation_unit_id_isSet = !json[QString("vendorProductivityCalculationUnitId")].isNull() && m_vendor_productivity_calculation_unit_id_isValid;
}

QString OAIJobTypeDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobTypeDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_calculation_unit_ids.size() > 0) {
        obj.insert(QString("calculationUnitIds"), ::OpenAPI::toJsonValue(m_calculation_unit_ids));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_files_needed_isSet) {
        obj.insert(QString("filesNeeded"), ::OpenAPI::toJsonValue(m_files_needed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_provided_by_client_isSet) {
        obj.insert(QString("providedByClient"), ::OpenAPI::toJsonValue(m_provided_by_client));
    }
    if (m_relation_to_language_isSet) {
        obj.insert(QString("relationToLanguage"), ::OpenAPI::toJsonValue(m_relation_to_language));
    }
    if (m_vendor_productivity_isSet) {
        obj.insert(QString("vendorProductivity"), ::OpenAPI::toJsonValue(m_vendor_productivity));
    }
    if (m_vendor_productivity_calculation_unit_id_isSet) {
        obj.insert(QString("vendorProductivityCalculationUnitId"), ::OpenAPI::toJsonValue(m_vendor_productivity_calculation_unit_id));
    }
    return obj;
}

bool OAIJobTypeDTO::isActive() const {
    return m_active;
}
void OAIJobTypeDTO::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIJobTypeDTO::is_active_Set() const{
    return m_active_isSet;
}

bool OAIJobTypeDTO::is_active_Valid() const{
    return m_active_isValid;
}

QList<qint64> OAIJobTypeDTO::getCalculationUnitIds() const {
    return m_calculation_unit_ids;
}
void OAIJobTypeDTO::setCalculationUnitIds(const QList<qint64> &calculation_unit_ids) {
    m_calculation_unit_ids = calculation_unit_ids;
    m_calculation_unit_ids_isSet = true;
}

bool OAIJobTypeDTO::is_calculation_unit_ids_Set() const{
    return m_calculation_unit_ids_isSet;
}

bool OAIJobTypeDTO::is_calculation_unit_ids_Valid() const{
    return m_calculation_unit_ids_isValid;
}

bool OAIJobTypeDTO::isRDefault() const {
    return m_r_default;
}
void OAIJobTypeDTO::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIJobTypeDTO::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIJobTypeDTO::is_r_default_Valid() const{
    return m_r_default_isValid;
}

bool OAIJobTypeDTO::isFilesNeeded() const {
    return m_files_needed;
}
void OAIJobTypeDTO::setFilesNeeded(const bool &files_needed) {
    m_files_needed = files_needed;
    m_files_needed_isSet = true;
}

bool OAIJobTypeDTO::is_files_needed_Set() const{
    return m_files_needed_isSet;
}

bool OAIJobTypeDTO::is_files_needed_Valid() const{
    return m_files_needed_isValid;
}

qint64 OAIJobTypeDTO::getId() const {
    return m_id;
}
void OAIJobTypeDTO::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobTypeDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobTypeDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJobTypeDTO::getName() const {
    return m_name;
}
void OAIJobTypeDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJobTypeDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJobTypeDTO::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIJobTypeDTO::isPreferred() const {
    return m_preferred;
}
void OAIJobTypeDTO::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIJobTypeDTO::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIJobTypeDTO::is_preferred_Valid() const{
    return m_preferred_isValid;
}

bool OAIJobTypeDTO::isProvidedByClient() const {
    return m_provided_by_client;
}
void OAIJobTypeDTO::setProvidedByClient(const bool &provided_by_client) {
    m_provided_by_client = provided_by_client;
    m_provided_by_client_isSet = true;
}

bool OAIJobTypeDTO::is_provided_by_client_Set() const{
    return m_provided_by_client_isSet;
}

bool OAIJobTypeDTO::is_provided_by_client_Valid() const{
    return m_provided_by_client_isValid;
}

QString OAIJobTypeDTO::getRelationToLanguage() const {
    return m_relation_to_language;
}
void OAIJobTypeDTO::setRelationToLanguage(const QString &relation_to_language) {
    m_relation_to_language = relation_to_language;
    m_relation_to_language_isSet = true;
}

bool OAIJobTypeDTO::is_relation_to_language_Set() const{
    return m_relation_to_language_isSet;
}

bool OAIJobTypeDTO::is_relation_to_language_Valid() const{
    return m_relation_to_language_isValid;
}

double OAIJobTypeDTO::getVendorProductivity() const {
    return m_vendor_productivity;
}
void OAIJobTypeDTO::setVendorProductivity(const double &vendor_productivity) {
    m_vendor_productivity = vendor_productivity;
    m_vendor_productivity_isSet = true;
}

bool OAIJobTypeDTO::is_vendor_productivity_Set() const{
    return m_vendor_productivity_isSet;
}

bool OAIJobTypeDTO::is_vendor_productivity_Valid() const{
    return m_vendor_productivity_isValid;
}

qint64 OAIJobTypeDTO::getVendorProductivityCalculationUnitId() const {
    return m_vendor_productivity_calculation_unit_id;
}
void OAIJobTypeDTO::setVendorProductivityCalculationUnitId(const qint64 &vendor_productivity_calculation_unit_id) {
    m_vendor_productivity_calculation_unit_id = vendor_productivity_calculation_unit_id;
    m_vendor_productivity_calculation_unit_id_isSet = true;
}

bool OAIJobTypeDTO::is_vendor_productivity_calculation_unit_id_Set() const{
    return m_vendor_productivity_calculation_unit_id_isSet;
}

bool OAIJobTypeDTO::is_vendor_productivity_calculation_unit_id_Valid() const{
    return m_vendor_productivity_calculation_unit_id_isValid;
}

bool OAIJobTypeDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_unit_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_needed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provided_by_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_to_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_productivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_productivity_calculation_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobTypeDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
