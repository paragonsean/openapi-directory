/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskCreateDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskCreateDTO::OAITaskCreateDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskCreateDTO::OAITaskCreateDTO() {
    this->initializeModel();
}

OAITaskCreateDTO::~OAITaskCreateDTO() {}

void OAITaskCreateDTO::initializeModel() {

    m_client_task_po_number_isSet = false;
    m_client_task_po_number_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_language_combination_isSet = false;
    m_language_combination_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_specialization_id_isSet = false;
    m_specialization_id_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;
}

void OAITaskCreateDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskCreateDTO::fromJsonObject(QJsonObject json) {

    m_client_task_po_number_isValid = ::OpenAPI::fromJsonValue(m_client_task_po_number, json[QString("clientTaskPONumber")]);
    m_client_task_po_number_isSet = !json[QString("clientTaskPONumber")].isNull() && m_client_task_po_number_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_language_combination_isValid = ::OpenAPI::fromJsonValue(m_language_combination, json[QString("languageCombination")]);
    m_language_combination_isSet = !json[QString("languageCombination")].isNull() && m_language_combination_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_specialization_id_isValid = ::OpenAPI::fromJsonValue(m_specialization_id, json[QString("specializationId")]);
    m_specialization_id_isSet = !json[QString("specializationId")].isNull() && m_specialization_id_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;
}

QString OAITaskCreateDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskCreateDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_client_task_po_number_isSet) {
        obj.insert(QString("clientTaskPONumber"), ::OpenAPI::toJsonValue(m_client_task_po_number));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_instructions.isSet()) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_language_combination.isSet()) {
        obj.insert(QString("languageCombination"), ::OpenAPI::toJsonValue(m_language_combination));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_people.isSet()) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_specialization_id_isSet) {
        obj.insert(QString("specializationId"), ::OpenAPI::toJsonValue(m_specialization_id));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    return obj;
}

QString OAITaskCreateDTO::getClientTaskPoNumber() const {
    return m_client_task_po_number;
}
void OAITaskCreateDTO::setClientTaskPoNumber(const QString &client_task_po_number) {
    m_client_task_po_number = client_task_po_number;
    m_client_task_po_number_isSet = true;
}

bool OAITaskCreateDTO::is_client_task_po_number_Set() const{
    return m_client_task_po_number_isSet;
}

bool OAITaskCreateDTO::is_client_task_po_number_Valid() const{
    return m_client_task_po_number_isValid;
}

OAIProjectDatesDTO OAITaskCreateDTO::getDates() const {
    return m_dates;
}
void OAITaskCreateDTO::setDates(const OAIProjectDatesDTO &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAITaskCreateDTO::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAITaskCreateDTO::is_dates_Valid() const{
    return m_dates_isValid;
}

QList<OAITaskFileDTO> OAITaskCreateDTO::getFiles() const {
    return m_files;
}
void OAITaskCreateDTO::setFiles(const QList<OAITaskFileDTO> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAITaskCreateDTO::is_files_Set() const{
    return m_files_isSet;
}

bool OAITaskCreateDTO::is_files_Valid() const{
    return m_files_isValid;
}

OAIInstructionsDTO OAITaskCreateDTO::getInstructions() const {
    return m_instructions;
}
void OAITaskCreateDTO::setInstructions(const OAIInstructionsDTO &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAITaskCreateDTO::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAITaskCreateDTO::is_instructions_Valid() const{
    return m_instructions_isValid;
}

OAICommonLanguageCombinationDTO OAITaskCreateDTO::getLanguageCombination() const {
    return m_language_combination;
}
void OAITaskCreateDTO::setLanguageCombination(const OAICommonLanguageCombinationDTO &language_combination) {
    m_language_combination = language_combination;
    m_language_combination_isSet = true;
}

bool OAITaskCreateDTO::is_language_combination_Set() const{
    return m_language_combination_isSet;
}

bool OAITaskCreateDTO::is_language_combination_Valid() const{
    return m_language_combination_isValid;
}

QString OAITaskCreateDTO::getName() const {
    return m_name;
}
void OAITaskCreateDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskCreateDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskCreateDTO::is_name_Valid() const{
    return m_name_isValid;
}

OAIClassicPeopleDTO OAITaskCreateDTO::getPeople() const {
    return m_people;
}
void OAITaskCreateDTO::setPeople(const OAIClassicPeopleDTO &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAITaskCreateDTO::is_people_Set() const{
    return m_people_isSet;
}

bool OAITaskCreateDTO::is_people_Valid() const{
    return m_people_isValid;
}

qint64 OAITaskCreateDTO::getSpecializationId() const {
    return m_specialization_id;
}
void OAITaskCreateDTO::setSpecializationId(const qint64 &specialization_id) {
    m_specialization_id = specialization_id;
    m_specialization_id_isSet = true;
}

bool OAITaskCreateDTO::is_specialization_id_Set() const{
    return m_specialization_id_isSet;
}

bool OAITaskCreateDTO::is_specialization_id_Valid() const{
    return m_specialization_id_isValid;
}

qint64 OAITaskCreateDTO::getWorkflowId() const {
    return m_workflow_id;
}
void OAITaskCreateDTO::setWorkflowId(const qint64 &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAITaskCreateDTO::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAITaskCreateDTO::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAITaskCreateDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_task_po_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_combination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskCreateDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
