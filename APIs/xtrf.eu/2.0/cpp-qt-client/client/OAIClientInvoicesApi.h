/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientInvoicesApi_H
#define OAI_OAIClientInvoicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomerInvoiceCreateDTO.h"
#include "OAICustomerInvoiceCreateResultDTO.h"
#include "OAICustomerInvoiceDTO.h"
#include "OAICustomerInvoiceDatesDTO.h"
#include "OAIDownloadDocumentsRequestDTO.h"
#include "OAIPaymentDTO.h"
#include "OAIPaymentTermsDTO.h"
#include "OAISendRemindersRequestDTO.h"
#include "OAISendRemindersResponseDTO.h"
#include "OAIUrlResultDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientInvoicesApi : public QObject {
    Q_OBJECT

public:
    OAIClientInvoicesApi(const int timeOut = 0);
    ~OAIClientInvoicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_customer_invoice_create_dto OAICustomerInvoiceCreateDTO [required]
    */
    virtual void create1(const OAICustomerInvoiceCreateDTO &oai_customer_invoice_create_dto);

    /**
    * @param[in]  invoice_id qint64 [required]
    * @param[in]  oai_payment_dto OAIPaymentDTO [required]
    */
    virtual void createPayment(const qint64 &invoice_id, const OAIPaymentDTO &oai_payment_dto);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void delete1(const qint64 &invoice_id);

    /**
    * @param[in]  payment_id qint64 [required]
    */
    virtual void delete2(const qint64 &payment_id);

    /**
    * @param[in]  oai_download_documents_request_dto OAIDownloadDocumentsRequestDTO [required]
    */
    virtual void downloadDocuments(const OAIDownloadDocumentsRequestDTO &oai_download_documents_request_dto);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void duplicate(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void duplicateAsProForma(const qint64 &invoice_id);

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAll(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  updated_since qint64 [optional]
    */
    virtual void getAllIds(const ::OpenAPI::OptionalParam<qint64> &updated_since = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  invoice_id qint64 [required]
    * @param[in]  embed QString [optional]
    */
    virtual void getById(const qint64 &invoice_id, const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void getDates(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void getDocument(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void getPaymentTerms(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void getPayments(const qint64 &invoice_id);

    /**
    * @param[in]  invoice_id qint64 [required]
    */
    virtual void sendReminder(const qint64 &invoice_id);

    /**
    * @param[in]  oai_send_reminders_request_dto OAISendRemindersRequestDTO [required]
    */
    virtual void sendReminders(const OAISendRemindersRequestDTO &oai_send_reminders_request_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void create1Callback(OAIHttpRequestWorker *worker);
    void createPaymentCallback(OAIHttpRequestWorker *worker);
    void delete1Callback(OAIHttpRequestWorker *worker);
    void delete2Callback(OAIHttpRequestWorker *worker);
    void downloadDocumentsCallback(OAIHttpRequestWorker *worker);
    void duplicateCallback(OAIHttpRequestWorker *worker);
    void duplicateAsProFormaCallback(OAIHttpRequestWorker *worker);
    void getAllCallback(OAIHttpRequestWorker *worker);
    void getAllIdsCallback(OAIHttpRequestWorker *worker);
    void getByIdCallback(OAIHttpRequestWorker *worker);
    void getDatesCallback(OAIHttpRequestWorker *worker);
    void getDocumentCallback(OAIHttpRequestWorker *worker);
    void getPaymentTermsCallback(OAIHttpRequestWorker *worker);
    void getPaymentsCallback(OAIHttpRequestWorker *worker);
    void sendReminderCallback(OAIHttpRequestWorker *worker);
    void sendRemindersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void create1Signal(OAICustomerInvoiceCreateResultDTO summary);
    void createPaymentSignal();
    void delete1Signal();
    void delete2Signal();
    void downloadDocumentsSignal(OAIUrlResultDTO summary);
    void duplicateSignal(OAICustomerInvoiceDTO summary);
    void duplicateAsProFormaSignal(OAICustomerInvoiceDTO summary);
    void getAllSignal(QList<OAICustomerInvoiceDTO> summary);
    void getAllIdsSignal(QList<qint32> summary);
    void getByIdSignal(OAICustomerInvoiceDTO summary);
    void getDatesSignal(OAICustomerInvoiceDatesDTO summary);
    void getDocumentSignal(OAIUrlResultDTO summary);
    void getPaymentTermsSignal(OAIPaymentTermsDTO summary);
    void getPaymentsSignal(QList<OAIPaymentDTO> summary);
    void sendReminderSignal();
    void sendRemindersSignal(OAISendRemindersResponseDTO summary);


    void create1SignalFull(OAIHttpRequestWorker *worker, OAICustomerInvoiceCreateResultDTO summary);
    void createPaymentSignalFull(OAIHttpRequestWorker *worker);
    void delete1SignalFull(OAIHttpRequestWorker *worker);
    void delete2SignalFull(OAIHttpRequestWorker *worker);
    void downloadDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIUrlResultDTO summary);
    void duplicateSignalFull(OAIHttpRequestWorker *worker, OAICustomerInvoiceDTO summary);
    void duplicateAsProFormaSignalFull(OAIHttpRequestWorker *worker, OAICustomerInvoiceDTO summary);
    void getAllSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomerInvoiceDTO> summary);
    void getAllIdsSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void getByIdSignalFull(OAIHttpRequestWorker *worker, OAICustomerInvoiceDTO summary);
    void getDatesSignalFull(OAIHttpRequestWorker *worker, OAICustomerInvoiceDatesDTO summary);
    void getDocumentSignalFull(OAIHttpRequestWorker *worker, OAIUrlResultDTO summary);
    void getPaymentTermsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentTermsDTO summary);
    void getPaymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentDTO> summary);
    void sendReminderSignalFull(OAIHttpRequestWorker *worker);
    void sendRemindersSignalFull(OAIHttpRequestWorker *worker, OAISendRemindersResponseDTO summary);

    Q_DECL_DEPRECATED_X("Use create1SignalError() instead")
    void create1SignalE(OAICustomerInvoiceCreateResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create1SignalError(OAICustomerInvoiceCreateResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentSignalError() instead")
    void createPaymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete1SignalError() instead")
    void delete1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete2SignalError() instead")
    void delete2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delete2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDocumentsSignalError() instead")
    void downloadDocumentsSignalE(OAIUrlResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDocumentsSignalError(OAIUrlResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateSignalError() instead")
    void duplicateSignalE(OAICustomerInvoiceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateSignalError(OAICustomerInvoiceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateAsProFormaSignalError() instead")
    void duplicateAsProFormaSignalE(OAICustomerInvoiceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateAsProFormaSignalError(OAICustomerInvoiceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSignalError() instead")
    void getAllSignalE(QList<OAICustomerInvoiceDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSignalError(QList<OAICustomerInvoiceDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIdsSignalError() instead")
    void getAllIdsSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIdsSignalError(QList<qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByIdSignalError() instead")
    void getByIdSignalE(OAICustomerInvoiceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getByIdSignalError(OAICustomerInvoiceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatesSignalError() instead")
    void getDatesSignalE(OAICustomerInvoiceDatesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatesSignalError(OAICustomerInvoiceDatesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalError() instead")
    void getDocumentSignalE(OAIUrlResultDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalError(OAIUrlResultDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentTermsSignalError() instead")
    void getPaymentTermsSignalE(OAIPaymentTermsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentTermsSignalError(OAIPaymentTermsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsSignalError() instead")
    void getPaymentsSignalE(QList<OAIPaymentDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsSignalError(QList<OAIPaymentDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendReminderSignalError() instead")
    void sendReminderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendReminderSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendRemindersSignalError() instead")
    void sendRemindersSignalE(OAISendRemindersResponseDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendRemindersSignalError(OAISendRemindersResponseDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use create1SignalErrorFull() instead")
    void create1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentSignalErrorFull() instead")
    void createPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete1SignalErrorFull() instead")
    void delete1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete2SignalErrorFull() instead")
    void delete2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDocumentsSignalErrorFull() instead")
    void downloadDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateSignalErrorFull() instead")
    void duplicateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use duplicateAsProFormaSignalErrorFull() instead")
    void duplicateAsProFormaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void duplicateAsProFormaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllSignalErrorFull() instead")
    void getAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllIdsSignalErrorFull() instead")
    void getAllIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByIdSignalErrorFull() instead")
    void getByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatesSignalErrorFull() instead")
    void getDatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalErrorFull() instead")
    void getDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentTermsSignalErrorFull() instead")
    void getPaymentTermsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentTermsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsSignalErrorFull() instead")
    void getPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendReminderSignalErrorFull() instead")
    void sendReminderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendReminderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendRemindersSignalErrorFull() instead")
    void sendRemindersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendRemindersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
