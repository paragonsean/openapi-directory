/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExternalFileDto.h
 *
 * 
 */

#ifndef OAIExternalFileDto_H
#define OAIExternalFileDto_H

#include <QJsonObject>

#include "OAILanguageCombinationDto.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILanguageCombinationDto;

class OAIExternalFileDto : public OAIObject {
public:
    OAIExternalFileDto();
    OAIExternalFileDto(QString json);
    ~OAIExternalFileDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QMap<QString, QString> getExternalInfo() const;
    void setExternalInfo(const QMap<QString, QString> &external_info);
    bool is_external_info_Set() const;
    bool is_external_info_Valid() const;

    QString getFilename() const;
    void setFilename(const QString &filename);
    bool is_filename_Set() const;
    bool is_filename_Valid() const;

    QList<OAILanguageCombinationDto> getLanguageCombinationIds() const;
    void setLanguageCombinationIds(const QList<OAILanguageCombinationDto> &language_combination_ids);
    bool is_language_combination_ids_Set() const;
    bool is_language_combination_ids_Valid() const;

    QList<qint64> getLanguageIds() const;
    void setLanguageIds(const QList<qint64> &language_ids);
    bool is_language_ids_Set() const;
    bool is_language_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QMap<QString, QString> m_external_info;
    bool m_external_info_isSet;
    bool m_external_info_isValid;

    QString m_filename;
    bool m_filename_isSet;
    bool m_filename_isValid;

    QList<OAILanguageCombinationDto> m_language_combination_ids;
    bool m_language_combination_ids_isSet;
    bool m_language_combination_ids_isValid;

    QList<qint64> m_language_ids;
    bool m_language_ids_isSet;
    bool m_language_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExternalFileDto)

#endif // OAIExternalFileDto_H
