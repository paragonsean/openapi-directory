/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuoteDatesDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuoteDatesDTO::OAIQuoteDatesDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuoteDatesDTO::OAIQuoteDatesDTO() {
    this->initializeModel();
}

OAIQuoteDatesDTO::~OAIQuoteDatesDTO() {}

void OAIQuoteDatesDTO::initializeModel() {

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_deadline_isSet = false;
    m_deadline_isValid = false;

    m_offer_expiry_isSet = false;
    m_offer_expiry_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIQuoteDatesDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuoteDatesDTO::fromJsonObject(QJsonObject json) {

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
    m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

    m_offer_expiry_isValid = ::OpenAPI::fromJsonValue(m_offer_expiry, json[QString("offerExpiry")]);
    m_offer_expiry_isSet = !json[QString("offerExpiry")].isNull() && m_offer_expiry_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIQuoteDatesDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuoteDatesDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_created_on.isSet()) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_deadline.isSet()) {
        obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
    }
    if (m_offer_expiry.isSet()) {
        obj.insert(QString("offerExpiry"), ::OpenAPI::toJsonValue(m_offer_expiry));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAITimeDTO OAIQuoteDatesDTO::getCreatedOn() const {
    return m_created_on;
}
void OAIQuoteDatesDTO::setCreatedOn(const OAITimeDTO &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIQuoteDatesDTO::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIQuoteDatesDTO::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAITimeDTO OAIQuoteDatesDTO::getDeadline() const {
    return m_deadline;
}
void OAIQuoteDatesDTO::setDeadline(const OAITimeDTO &deadline) {
    m_deadline = deadline;
    m_deadline_isSet = true;
}

bool OAIQuoteDatesDTO::is_deadline_Set() const{
    return m_deadline_isSet;
}

bool OAIQuoteDatesDTO::is_deadline_Valid() const{
    return m_deadline_isValid;
}

OAITimeDTO OAIQuoteDatesDTO::getOfferExpiry() const {
    return m_offer_expiry;
}
void OAIQuoteDatesDTO::setOfferExpiry(const OAITimeDTO &offer_expiry) {
    m_offer_expiry = offer_expiry;
    m_offer_expiry_isSet = true;
}

bool OAIQuoteDatesDTO::is_offer_expiry_Set() const{
    return m_offer_expiry_isSet;
}

bool OAIQuoteDatesDTO::is_offer_expiry_Valid() const{
    return m_offer_expiry_isValid;
}

OAITimeDTO OAIQuoteDatesDTO::getStartDate() const {
    return m_start_date;
}
void OAIQuoteDatesDTO::setStartDate(const OAITimeDTO &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIQuoteDatesDTO::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIQuoteDatesDTO::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIQuoteDatesDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_expiry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuoteDatesDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
