/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewDetailsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewDetailsDTO::OAIViewDetailsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewDetailsDTO::OAIViewDetailsDTO() {
    this->initializeModel();
}

OAIViewDetailsDTO::~OAIViewDetailsDTO() {}

void OAIViewDetailsDTO::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;

    m_view_id_isSet = false;
    m_view_id_isValid = false;
}

void OAIViewDetailsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewDetailsDTO::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;

    m_view_id_isValid = ::OpenAPI::fromJsonValue(m_view_id, json[QString("viewId")]);
    m_view_id_isSet = !json[QString("viewId")].isNull() && m_view_id_isValid;
}

QString OAIViewDetailsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewDetailsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_access.isSet()) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_view.isSet()) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    if (m_view_id_isSet) {
        obj.insert(QString("viewId"), ::OpenAPI::toJsonValue(m_view_id));
    }
    return obj;
}

OAIAccessDTO OAIViewDetailsDTO::getAccess() const {
    return m_access;
}
void OAIViewDetailsDTO::setAccess(const OAIAccessDTO &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIViewDetailsDTO::is_access_Set() const{
    return m_access_isSet;
}

bool OAIViewDetailsDTO::is_access_Valid() const{
    return m_access_isValid;
}

QList<OAIActionDTO> OAIViewDetailsDTO::getActions() const {
    return m_actions;
}
void OAIViewDetailsDTO::setActions(const QList<OAIActionDTO> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIViewDetailsDTO::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIViewDetailsDTO::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIFilterDTO OAIViewDetailsDTO::getFilter() const {
    return m_filter;
}
void OAIViewDetailsDTO::setFilter(const OAIFilterDTO &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIViewDetailsDTO::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIViewDetailsDTO::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIViewDTO OAIViewDetailsDTO::getView() const {
    return m_view;
}
void OAIViewDetailsDTO::setView(const OAIViewDTO &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIViewDetailsDTO::is_view_Set() const{
    return m_view_isSet;
}

bool OAIViewDetailsDTO::is_view_Valid() const{
    return m_view_isValid;
}

qint64 OAIViewDetailsDTO::getViewId() const {
    return m_view_id;
}
void OAIViewDetailsDTO::setViewId(const qint64 &view_id) {
    m_view_id = view_id;
    m_view_id_isSet = true;
}

bool OAIViewDetailsDTO::is_view_id_Set() const{
    return m_view_id_isSet;
}

bool OAIViewDetailsDTO::is_view_id_Valid() const{
    return m_view_id_isValid;
}

bool OAIViewDetailsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewDetailsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
