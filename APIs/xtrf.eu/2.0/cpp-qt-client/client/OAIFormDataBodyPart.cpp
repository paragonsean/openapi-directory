/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormDataBodyPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormDataBodyPart::OAIFormDataBodyPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormDataBodyPart::OAIFormDataBodyPart() {
    this->initializeModel();
}

OAIFormDataBodyPart::~OAIFormDataBodyPart() {}

void OAIFormDataBodyPart::initializeModel() {

    m_content_disposition_isSet = false;
    m_content_disposition_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_form_data_content_disposition_isSet = false;
    m_form_data_content_disposition_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_message_body_workers_isSet = false;
    m_message_body_workers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameterized_headers_isSet = false;
    m_parameterized_headers_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_simple_isSet = false;
    m_simple_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFormDataBodyPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormDataBodyPart::fromJsonObject(QJsonObject json) {

    m_content_disposition_isValid = ::OpenAPI::fromJsonValue(m_content_disposition, json[QString("contentDisposition")]);
    m_content_disposition_isSet = !json[QString("contentDisposition")].isNull() && m_content_disposition_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_form_data_content_disposition_isValid = ::OpenAPI::fromJsonValue(m_form_data_content_disposition, json[QString("formDataContentDisposition")]);
    m_form_data_content_disposition_isSet = !json[QString("formDataContentDisposition")].isNull() && m_form_data_content_disposition_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_message_body_workers_isValid = ::OpenAPI::fromJsonValue(m_message_body_workers, json[QString("messageBodyWorkers")]);
    m_message_body_workers_isSet = !json[QString("messageBodyWorkers")].isNull() && m_message_body_workers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameterized_headers_isValid = ::OpenAPI::fromJsonValue(m_parameterized_headers, json[QString("parameterizedHeaders")]);
    m_parameterized_headers_isSet = !json[QString("parameterizedHeaders")].isNull() && m_parameterized_headers_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_simple_isValid = ::OpenAPI::fromJsonValue(m_simple, json[QString("simple")]);
    m_simple_isSet = !json[QString("simple")].isNull() && m_simple_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFormDataBodyPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormDataBodyPart::asJsonObject() const {
    QJsonObject obj;
    if (m_content_disposition.isSet()) {
        obj.insert(QString("contentDisposition"), ::OpenAPI::toJsonValue(m_content_disposition));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_form_data_content_disposition.isSet()) {
        obj.insert(QString("formDataContentDisposition"), ::OpenAPI::toJsonValue(m_form_data_content_disposition));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_message_body_workers_isSet) {
        obj.insert(QString("messageBodyWorkers"), ::OpenAPI::toJsonValue(m_message_body_workers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameterized_headers.isSet()) {
        obj.insert(QString("parameterizedHeaders"), ::OpenAPI::toJsonValue(m_parameterized_headers));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_providers_isSet) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_simple_isSet) {
        obj.insert(QString("simple"), ::OpenAPI::toJsonValue(m_simple));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIContentDisposition OAIFormDataBodyPart::getContentDisposition() const {
    return m_content_disposition;
}
void OAIFormDataBodyPart::setContentDisposition(const OAIContentDisposition &content_disposition) {
    m_content_disposition = content_disposition;
    m_content_disposition_isSet = true;
}

bool OAIFormDataBodyPart::is_content_disposition_Set() const{
    return m_content_disposition_isSet;
}

bool OAIFormDataBodyPart::is_content_disposition_Valid() const{
    return m_content_disposition_isValid;
}

OAIObject OAIFormDataBodyPart::getEntity() const {
    return m_entity;
}
void OAIFormDataBodyPart::setEntity(const OAIObject &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIFormDataBodyPart::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIFormDataBodyPart::is_entity_Valid() const{
    return m_entity_isValid;
}

OAIFormDataContentDisposition OAIFormDataBodyPart::getFormDataContentDisposition() const {
    return m_form_data_content_disposition;
}
void OAIFormDataBodyPart::setFormDataContentDisposition(const OAIFormDataContentDisposition &form_data_content_disposition) {
    m_form_data_content_disposition = form_data_content_disposition;
    m_form_data_content_disposition_isSet = true;
}

bool OAIFormDataBodyPart::is_form_data_content_disposition_Set() const{
    return m_form_data_content_disposition_isSet;
}

bool OAIFormDataBodyPart::is_form_data_content_disposition_Valid() const{
    return m_form_data_content_disposition_isValid;
}

OAIBodyPart_headers OAIFormDataBodyPart::getHeaders() const {
    return m_headers;
}
void OAIFormDataBodyPart::setHeaders(const OAIBodyPart_headers &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIFormDataBodyPart::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIFormDataBodyPart::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIBodyPart_mediaType OAIFormDataBodyPart::getMediaType() const {
    return m_media_type;
}
void OAIFormDataBodyPart::setMediaType(const OAIBodyPart_mediaType &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIFormDataBodyPart::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIFormDataBodyPart::is_media_type_Valid() const{
    return m_media_type_isValid;
}

OAIObject OAIFormDataBodyPart::getMessageBodyWorkers() const {
    return m_message_body_workers;
}
void OAIFormDataBodyPart::setMessageBodyWorkers(const OAIObject &message_body_workers) {
    m_message_body_workers = message_body_workers;
    m_message_body_workers_isSet = true;
}

bool OAIFormDataBodyPart::is_message_body_workers_Set() const{
    return m_message_body_workers_isSet;
}

bool OAIFormDataBodyPart::is_message_body_workers_Valid() const{
    return m_message_body_workers_isValid;
}

QString OAIFormDataBodyPart::getName() const {
    return m_name;
}
void OAIFormDataBodyPart::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFormDataBodyPart::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFormDataBodyPart::is_name_Valid() const{
    return m_name_isValid;
}

OAIBodyPart_parameterizedHeaders OAIFormDataBodyPart::getParameterizedHeaders() const {
    return m_parameterized_headers;
}
void OAIFormDataBodyPart::setParameterizedHeaders(const OAIBodyPart_parameterizedHeaders &parameterized_headers) {
    m_parameterized_headers = parameterized_headers;
    m_parameterized_headers_isSet = true;
}

bool OAIFormDataBodyPart::is_parameterized_headers_Set() const{
    return m_parameterized_headers_isSet;
}

bool OAIFormDataBodyPart::is_parameterized_headers_Valid() const{
    return m_parameterized_headers_isValid;
}

OAIMultiPart OAIFormDataBodyPart::getParent() const {
    return m_parent;
}
void OAIFormDataBodyPart::setParent(const OAIMultiPart &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIFormDataBodyPart::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIFormDataBodyPart::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIObject OAIFormDataBodyPart::getProviders() const {
    return m_providers;
}
void OAIFormDataBodyPart::setProviders(const OAIObject &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIFormDataBodyPart::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIFormDataBodyPart::is_providers_Valid() const{
    return m_providers_isValid;
}

bool OAIFormDataBodyPart::isSimple() const {
    return m_simple;
}
void OAIFormDataBodyPart::setSimple(const bool &simple) {
    m_simple = simple;
    m_simple_isSet = true;
}

bool OAIFormDataBodyPart::is_simple_Set() const{
    return m_simple_isSet;
}

bool OAIFormDataBodyPart::is_simple_Valid() const{
    return m_simple_isValid;
}

QString OAIFormDataBodyPart::getValue() const {
    return m_value;
}
void OAIFormDataBodyPart::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFormDataBodyPart::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFormDataBodyPart::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFormDataBodyPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_disposition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_data_content_disposition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameterized_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormDataBodyPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
