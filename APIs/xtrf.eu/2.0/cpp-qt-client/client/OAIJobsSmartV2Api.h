/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsSmartV2Api_H
#define OAI_OAIJobsSmartV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExternalFileDto.h"
#include "OAIFileCategorizationsDto.h"
#include "OAIFileDto.h"
#include "OAIFileLinkCategorizationsDto.h"
#include "OAIFilesDto.h"
#include "OAIFilesShareStatusDto.h"
#include "OAIHttpFileElement.h"
#include "OAIJobDatesDto.h"
#include "OAIJobStatusDTO.h"
#include "OAIProjectFileDto.h"
#include "OAIStringDTO.h"
#include "OAIVendorPriceProfileDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsSmartV2Api : public QObject {
    Q_OBJECT

public:
    OAIJobsSmartV2Api(const int timeOut = 0);
    ~OAIJobsSmartV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_external_file_dto OAIExternalFileDto [required]
    */
    virtual void addExternalFileLink(const QString &job_id, const OAIExternalFileDto &oai_external_file_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_file_link_categorizations_dto OAIFileLinkCategorizationsDto [required]
    */
    virtual void addFileLinks(const QString &job_id, const OAIFileLinkCategorizationsDto &oai_file_link_categorizations_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_file_categorizations_dto OAIFileCategorizationsDto [required]
    */
    virtual void addFiles(const QString &job_id, const OAIFileCategorizationsDto &oai_file_categorizations_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_vendor_price_profile_dto OAIVendorPriceProfileDTO [required]
    */
    virtual void assignVendor1(const QString &job_id, const OAIVendorPriceProfileDTO &oai_vendor_price_profile_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_job_dates_dto OAIJobDatesDto [required]
    */
    virtual void changeDates(const QString &job_id, const OAIJobDatesDto &oai_job_dates_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_job_status_dto OAIJobStatusDTO [required]
    */
    virtual void changeStatus1(const QString &job_id, const OAIJobStatusDTO &oai_job_status_dto);

    /**
    * @param[in]  external_project_id QString [optional]
    * @param[in]  external_id QString [optional]
    */
    virtual void getByExternalId(const ::OpenAPI::OptionalParam<QString> &external_project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getDeliveredFiles(const QString &job_id);

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getFileById1(const QString &job_id);

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getSharedReferenceFiles(const QString &job_id);

    /**
    * @param[in]  job_id QString [required]
    */
    virtual void getSharedWorkFiles(const QString &job_id);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_files_dto OAIFilesDto [required]
    */
    virtual void shareAsReferenceFiles(const QString &job_id, const OAIFilesDto &oai_files_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_files_dto OAIFilesDto [required]
    */
    virtual void shareAsWorkFiles(const QString &job_id, const OAIFilesDto &oai_files_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_files_dto OAIFilesDto [required]
    */
    virtual void stopSharing(const QString &job_id, const OAIFilesDto &oai_files_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateInstructions4(const QString &job_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    */
    virtual void uploadFile1(const QString &job_id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addExternalFileLinkCallback(OAIHttpRequestWorker *worker);
    void addFileLinksCallback(OAIHttpRequestWorker *worker);
    void addFilesCallback(OAIHttpRequestWorker *worker);
    void assignVendor1Callback(OAIHttpRequestWorker *worker);
    void changeDatesCallback(OAIHttpRequestWorker *worker);
    void changeStatus1Callback(OAIHttpRequestWorker *worker);
    void getByExternalIdCallback(OAIHttpRequestWorker *worker);
    void getDeliveredFilesCallback(OAIHttpRequestWorker *worker);
    void getFileById1Callback(OAIHttpRequestWorker *worker);
    void getSharedReferenceFilesCallback(OAIHttpRequestWorker *worker);
    void getSharedWorkFilesCallback(OAIHttpRequestWorker *worker);
    void shareAsReferenceFilesCallback(OAIHttpRequestWorker *worker);
    void shareAsWorkFilesCallback(OAIHttpRequestWorker *worker);
    void stopSharingCallback(OAIHttpRequestWorker *worker);
    void updateInstructions4Callback(OAIHttpRequestWorker *worker);
    void uploadFile1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addExternalFileLinkSignal();
    void addFileLinksSignal(OAIFilesDto summary);
    void addFilesSignal();
    void assignVendor1Signal();
    void changeDatesSignal();
    void changeStatus1Signal();
    void getByExternalIdSignal();
    void getDeliveredFilesSignal(QList<OAIProjectFileDto> summary);
    void getFileById1Signal(OAIProjectFileDto summary);
    void getSharedReferenceFilesSignal(QList<OAIProjectFileDto> summary);
    void getSharedWorkFilesSignal(QList<OAIProjectFileDto> summary);
    void shareAsReferenceFilesSignal(OAIFilesShareStatusDto summary);
    void shareAsWorkFilesSignal(OAIFilesShareStatusDto summary);
    void stopSharingSignal(OAIFilesShareStatusDto summary);
    void updateInstructions4Signal();
    void uploadFile1Signal(OAIFileDto summary);


    void addExternalFileLinkSignalFull(OAIHttpRequestWorker *worker);
    void addFileLinksSignalFull(OAIHttpRequestWorker *worker, OAIFilesDto summary);
    void addFilesSignalFull(OAIHttpRequestWorker *worker);
    void assignVendor1SignalFull(OAIHttpRequestWorker *worker);
    void changeDatesSignalFull(OAIHttpRequestWorker *worker);
    void changeStatus1SignalFull(OAIHttpRequestWorker *worker);
    void getByExternalIdSignalFull(OAIHttpRequestWorker *worker);
    void getDeliveredFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFileDto> summary);
    void getFileById1SignalFull(OAIHttpRequestWorker *worker, OAIProjectFileDto summary);
    void getSharedReferenceFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFileDto> summary);
    void getSharedWorkFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFileDto> summary);
    void shareAsReferenceFilesSignalFull(OAIHttpRequestWorker *worker, OAIFilesShareStatusDto summary);
    void shareAsWorkFilesSignalFull(OAIHttpRequestWorker *worker, OAIFilesShareStatusDto summary);
    void stopSharingSignalFull(OAIHttpRequestWorker *worker, OAIFilesShareStatusDto summary);
    void updateInstructions4SignalFull(OAIHttpRequestWorker *worker);
    void uploadFile1SignalFull(OAIHttpRequestWorker *worker, OAIFileDto summary);

    Q_DECL_DEPRECATED_X("Use addExternalFileLinkSignalError() instead")
    void addExternalFileLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addExternalFileLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFileLinksSignalError() instead")
    void addFileLinksSignalE(OAIFilesDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFileLinksSignalError(OAIFilesDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFilesSignalError() instead")
    void addFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignVendor1SignalError() instead")
    void assignVendor1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignVendor1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeDatesSignalError() instead")
    void changeDatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeDatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatus1SignalError() instead")
    void changeStatus1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatus1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByExternalIdSignalError() instead")
    void getByExternalIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getByExternalIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliveredFilesSignalError() instead")
    void getDeliveredFilesSignalE(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliveredFilesSignalError(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileById1SignalError() instead")
    void getFileById1SignalE(OAIProjectFileDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileById1SignalError(OAIProjectFileDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharedReferenceFilesSignalError() instead")
    void getSharedReferenceFilesSignalE(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharedReferenceFilesSignalError(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharedWorkFilesSignalError() instead")
    void getSharedWorkFilesSignalE(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharedWorkFilesSignalError(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareAsReferenceFilesSignalError() instead")
    void shareAsReferenceFilesSignalE(OAIFilesShareStatusDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareAsReferenceFilesSignalError(OAIFilesShareStatusDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareAsWorkFilesSignalError() instead")
    void shareAsWorkFilesSignalE(OAIFilesShareStatusDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareAsWorkFilesSignalError(OAIFilesShareStatusDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSharingSignalError() instead")
    void stopSharingSignalE(OAIFilesShareStatusDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSharingSignalError(OAIFilesShareStatusDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions4SignalError() instead")
    void updateInstructions4SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions4SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile1SignalError() instead")
    void uploadFile1SignalE(OAIFileDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile1SignalError(OAIFileDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addExternalFileLinkSignalErrorFull() instead")
    void addExternalFileLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addExternalFileLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFileLinksSignalErrorFull() instead")
    void addFileLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFileLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addFilesSignalErrorFull() instead")
    void addFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignVendor1SignalErrorFull() instead")
    void assignVendor1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignVendor1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeDatesSignalErrorFull() instead")
    void changeDatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeDatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatus1SignalErrorFull() instead")
    void changeStatus1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatus1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByExternalIdSignalErrorFull() instead")
    void getByExternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByExternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeliveredFilesSignalErrorFull() instead")
    void getDeliveredFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeliveredFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileById1SignalErrorFull() instead")
    void getFileById1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileById1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharedReferenceFilesSignalErrorFull() instead")
    void getSharedReferenceFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharedReferenceFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSharedWorkFilesSignalErrorFull() instead")
    void getSharedWorkFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSharedWorkFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareAsReferenceFilesSignalErrorFull() instead")
    void shareAsReferenceFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareAsReferenceFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareAsWorkFilesSignalErrorFull() instead")
    void shareAsWorkFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareAsWorkFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSharingSignalErrorFull() instead")
    void stopSharingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSharingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstructions4SignalErrorFull() instead")
    void updateInstructions4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstructions4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile1SignalErrorFull() instead")
    void uploadFile1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
