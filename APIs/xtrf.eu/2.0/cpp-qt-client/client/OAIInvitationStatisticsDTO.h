/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInvitationStatisticsDTO.h
 *
 * 
 */

#ifndef OAIInvitationStatisticsDTO_H
#define OAIInvitationStatisticsDTO_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInvitationStatisticsDTO : public OAIObject {
public:
    OAIInvitationStatisticsDTO();
    OAIInvitationStatisticsDTO(QString json);
    ~OAIInvitationStatisticsDTO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAlreadyRegisteredPersonsCount() const;
    void setAlreadyRegisteredPersonsCount(const qint32 &already_registered_persons_count);
    bool is_already_registered_persons_count_Set() const;
    bool is_already_registered_persons_count_Valid() const;

    qint32 getInvitedPersonsCount() const;
    void setInvitedPersonsCount(const qint32 &invited_persons_count);
    bool is_invited_persons_count_Set() const;
    bool is_invited_persons_count_Valid() const;

    qint32 getProvidersWithAlreadyRegisteredPersonCount() const;
    void setProvidersWithAlreadyRegisteredPersonCount(const qint32 &providers_with_already_registered_person_count);
    bool is_providers_with_already_registered_person_count_Set() const;
    bool is_providers_with_already_registered_person_count_Valid() const;

    qint32 getProvidersWithInvitedPersonCount() const;
    void setProvidersWithInvitedPersonCount(const qint32 &providers_with_invited_person_count);
    bool is_providers_with_invited_person_count_Set() const;
    bool is_providers_with_invited_person_count_Valid() const;

    qint32 getProvidersWithoutPersonCount() const;
    void setProvidersWithoutPersonCount(const qint32 &providers_without_person_count);
    bool is_providers_without_person_count_Set() const;
    bool is_providers_without_person_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_already_registered_persons_count;
    bool m_already_registered_persons_count_isSet;
    bool m_already_registered_persons_count_isValid;

    qint32 m_invited_persons_count;
    bool m_invited_persons_count_isSet;
    bool m_invited_persons_count_isValid;

    qint32 m_providers_with_already_registered_person_count;
    bool m_providers_with_already_registered_person_count_isSet;
    bool m_providers_with_already_registered_person_count_isValid;

    qint32 m_providers_with_invited_person_count;
    bool m_providers_with_invited_person_count_isSet;
    bool m_providers_with_invited_person_count_isValid;

    qint32 m_providers_without_person_count;
    bool m_providers_without_person_count_isSet;
    bool m_providers_without_person_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInvitationStatisticsDTO)

#endif // OAIInvitationStatisticsDTO_H
