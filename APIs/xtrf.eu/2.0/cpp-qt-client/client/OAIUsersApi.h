/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomFieldDTO.h"
#include "OAIEntityWithNameDTO.h"
#include "OAITimeZoneDTO.h"
#include "OAIUserDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  new_password QString [optional]
    * @param[in]  old_password QString [optional]
    */
    virtual void changePassword(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &new_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &old_password = ::OpenAPI::OptionalParam<QString>());


    virtual void getAllNamesWithIds1();

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getById6(const qint64 &user_id);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  custom_field_key QString [required]
    */
    virtual void getCustomField1(const qint64 &user_id, const QString &custom_field_key);

    /**
    * @param[in]  user_id qint64 [required]
    */
    virtual void getCustomFields4(const qint64 &user_id);


    virtual void getMe();


    virtual void getTimeZone();

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_user_dto OAIUserDTO [required]
    */
    virtual void update3(const qint64 &user_id, const OAIUserDTO &oai_user_dto);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  custom_field_key QString [required]
    * @param[in]  oai_custom_field_dto OAICustomFieldDTO [required]
    */
    virtual void updateCustomField1(const qint64 &user_id, const QString &custom_field_key, const OAICustomFieldDTO &oai_custom_field_dto);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_custom_field_dto QList<OAICustomFieldDTO> [required]
    */
    virtual void updateCustomFields2(const qint64 &user_id, const QList<OAICustomFieldDTO> &oai_custom_field_dto);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changePasswordCallback(OAIHttpRequestWorker *worker);
    void getAllNamesWithIds1Callback(OAIHttpRequestWorker *worker);
    void getById6Callback(OAIHttpRequestWorker *worker);
    void getCustomField1Callback(OAIHttpRequestWorker *worker);
    void getCustomFields4Callback(OAIHttpRequestWorker *worker);
    void getMeCallback(OAIHttpRequestWorker *worker);
    void getTimeZoneCallback(OAIHttpRequestWorker *worker);
    void update3Callback(OAIHttpRequestWorker *worker);
    void updateCustomField1Callback(OAIHttpRequestWorker *worker);
    void updateCustomFields2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changePasswordSignal();
    void getAllNamesWithIds1Signal(QList<OAIEntityWithNameDTO> summary);
    void getById6Signal(OAIUserDTO summary);
    void getCustomField1Signal(OAICustomFieldDTO summary);
    void getCustomFields4Signal(QList<OAICustomFieldDTO> summary);
    void getMeSignal(OAIUserDTO summary);
    void getTimeZoneSignal(OAITimeZoneDTO summary);
    void update3Signal(OAIUserDTO summary);
    void updateCustomField1Signal(OAICustomFieldDTO summary);
    void updateCustomFields2Signal(QList<OAICustomFieldDTO> summary);


    void changePasswordSignalFull(OAIHttpRequestWorker *worker);
    void getAllNamesWithIds1SignalFull(OAIHttpRequestWorker *worker, QList<OAIEntityWithNameDTO> summary);
    void getById6SignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void getCustomField1SignalFull(OAIHttpRequestWorker *worker, OAICustomFieldDTO summary);
    void getCustomFields4SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getMeSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void getTimeZoneSignalFull(OAIHttpRequestWorker *worker, OAITimeZoneDTO summary);
    void update3SignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void updateCustomField1SignalFull(OAIHttpRequestWorker *worker, OAICustomFieldDTO summary);
    void updateCustomFields2SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalError() instead")
    void changePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllNamesWithIds1SignalError() instead")
    void getAllNamesWithIds1SignalE(QList<OAIEntityWithNameDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllNamesWithIds1SignalError(QList<OAIEntityWithNameDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById6SignalError() instead")
    void getById6SignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById6SignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomField1SignalError() instead")
    void getCustomField1SignalE(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomField1SignalError(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields4SignalError() instead")
    void getCustomFields4SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields4SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalError() instead")
    void getMeSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneSignalError() instead")
    void getTimeZoneSignalE(OAITimeZoneDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneSignalError(OAITimeZoneDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update3SignalError() instead")
    void update3SignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void update3SignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomField1SignalError() instead")
    void updateCustomField1SignalE(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomField1SignalError(OAICustomFieldDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields2SignalError() instead")
    void updateCustomFields2SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields2SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalErrorFull() instead")
    void changePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllNamesWithIds1SignalErrorFull() instead")
    void getAllNamesWithIds1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllNamesWithIds1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById6SignalErrorFull() instead")
    void getById6SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById6SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomField1SignalErrorFull() instead")
    void getCustomField1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomField1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields4SignalErrorFull() instead")
    void getCustomFields4SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields4SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalErrorFull() instead")
    void getMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimeZoneSignalErrorFull() instead")
    void getTimeZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimeZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use update3SignalErrorFull() instead")
    void update3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void update3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomField1SignalErrorFull() instead")
    void updateCustomField1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomField1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomFields2SignalErrorFull() instead")
    void updateCustomFields2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomFields2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
