/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskFilesDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskFilesDTO::OAITaskFilesDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskFilesDTO::OAITaskFilesDTO() {
    this->initializeModel();
}

OAITaskFilesDTO::~OAITaskFilesDTO() {}

void OAITaskFilesDTO::initializeModel() {

    m_bundles_isSet = false;
    m_bundles_isValid = false;

    m_input_files_isSet = false;
    m_input_files_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_output_files_isSet = false;
    m_output_files_isValid = false;
}

void OAITaskFilesDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskFilesDTO::fromJsonObject(QJsonObject json) {

    if(json["bundles"].isObject()){
        auto varmap = json["bundles"].toObject().toVariantMap();
        m_bundles_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIFileDTO> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_bundles_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_bundles_isSet &= !jval.isNull() && m_bundles_isValid;
                m_bundles.insert(m_bundles.end(), val, item);
            }
        }
    }

    m_input_files_isValid = ::OpenAPI::fromJsonValue(m_input_files, json[QString("inputFiles")]);
    m_input_files_isSet = !json[QString("inputFiles")].isNull() && m_input_files_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_output_files_isValid = ::OpenAPI::fromJsonValue(m_output_files, json[QString("outputFiles")]);
    m_output_files_isSet = !json[QString("outputFiles")].isNull() && m_output_files_isValid;
}

QString OAITaskFilesDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskFilesDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_bundles.size() > 0) {
        
        obj.insert(QString("bundles"), toJsonValue(m_bundles));
    }
    if (m_input_files.isSet()) {
        obj.insert(QString("inputFiles"), ::OpenAPI::toJsonValue(m_input_files));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_output_files.size() > 0) {
        obj.insert(QString("outputFiles"), ::OpenAPI::toJsonValue(m_output_files));
    }
    return obj;
}

QMap<QString, QList<OAIFileDTO>> OAITaskFilesDTO::getBundles() const {
    return m_bundles;
}
void OAITaskFilesDTO::setBundles(const QMap<QString, QList<OAIFileDTO>> &bundles) {
    m_bundles = bundles;
    m_bundles_isSet = true;
}

bool OAITaskFilesDTO::is_bundles_Set() const{
    return m_bundles_isSet;
}

bool OAITaskFilesDTO::is_bundles_Valid() const{
    return m_bundles_isValid;
}

OAIInputFilesDTO OAITaskFilesDTO::getInputFiles() const {
    return m_input_files;
}
void OAITaskFilesDTO::setInputFiles(const OAIInputFilesDTO &input_files) {
    m_input_files = input_files;
    m_input_files_isSet = true;
}

bool OAITaskFilesDTO::is_input_files_Set() const{
    return m_input_files_isSet;
}

bool OAITaskFilesDTO::is_input_files_Valid() const{
    return m_input_files_isValid;
}

QList<OAIJobDTO> OAITaskFilesDTO::getJobs() const {
    return m_jobs;
}
void OAITaskFilesDTO::setJobs(const QList<OAIJobDTO> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAITaskFilesDTO::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAITaskFilesDTO::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QList<OAIFileDTO> OAITaskFilesDTO::getOutputFiles() const {
    return m_output_files;
}
void OAITaskFilesDTO::setOutputFiles(const QList<OAIFileDTO> &output_files) {
    m_output_files = output_files;
    m_output_files_isSet = true;
}

bool OAITaskFilesDTO::is_output_files_Set() const{
    return m_output_files_isSet;
}

bool OAITaskFilesDTO::is_output_files_Valid() const{
    return m_output_files_isValid;
}

bool OAITaskFilesDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskFilesDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
