/**
 * XTRF Home Portal API
 * XTRF Home Portal API enables you to perform operations on Projects, Quotes, Customers, Vendors etc. as a XTRF Home Portal user. <br>The documentation is generated from OpenAPI specification 3.0 available <a href=\"/home-api/openapi.json\">here</a> <br>   The API client/consumer code may be easily generated in 60+ programming languages using an open source code generator available at the time of writing this documentation at <a href='https://editor.swagger.io/'>https://editor.swagger.io/</a> Thank you for using XTRF Application Programming interface (XTRF API). By using the API you agree to the terms below. If you disagree with any of these terms, XTRF does not grant you a license to use the XTRF API. XTRF reserves the right to update and change these terms from time to time without a prior notice of API users. You can always find the most recent version of these terms here: 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuotesSmartV2Api_H
#define OAI_OAIQuotesSmartV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBigDecimalDTO.h"
#include "OAICustomFieldDTO.h"
#include "OAIFileDto.h"
#include "OAIFilesArchiveDto.h"
#include "OAIFilesDto.h"
#include "OAIFinanceDTO.h"
#include "OAIHttpFileElement.h"
#include "OAIJobDto.h"
#include "OAIPayableCreateDTO.h"
#include "OAIPayableDTO.h"
#include "OAIProjectFileDto.h"
#include "OAIProjectStatusDTO.h"
#include "OAIQuoteCreateDTO.h"
#include "OAIQuoteDTOv2.h"
#include "OAIReceivableCreateDTO.h"
#include "OAIReceivableDTO.h"
#include "OAISmartContactsDTO.h"
#include "OAISmartCustomFieldDTO.h"
#include "OAISourceLanguageDTO.h"
#include "OAISpecializationDTO.h"
#include "OAIStringDTO.h"
#include "OAITargetLanguagesDTO.h"
#include "OAITimeDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuotesSmartV2Api : public QObject {
    Q_OBJECT

public:
    OAIQuotesSmartV2Api(const int timeOut = 0);
    ~OAIQuotesSmartV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_time_dto OAITimeDTO [required]
    */
    virtual void addFiles2(const QString &quote_id, const OAITimeDTO &oai_time_dto);

    /**
    * @param[in]  oai_files_dto OAIFilesDto [required]
    */
    virtual void archive1(const OAIFilesDto &oai_files_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_project_status_dto OAIProjectStatusDTO [required]
    */
    virtual void changeStatus3(const QString &quote_id, const OAIProjectStatusDTO &oai_project_status_dto);

    /**
    * @param[in]  oai_quote_create_dto OAIQuoteCreateDTO [optional]
    */
    virtual void create7(const ::OpenAPI::OptionalParam<OAIQuoteCreateDTO> &oai_quote_create_dto = ::OpenAPI::OptionalParam<OAIQuoteCreateDTO>());

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_payable_create_dto OAIPayableCreateDTO [required]
    */
    virtual void createPayable3(const QString &quote_id, const OAIPayableCreateDTO &oai_payable_create_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_receivable_create_dto OAIReceivableCreateDTO [required]
    */
    virtual void createReceivable3(const QString &quote_id, const OAIReceivableCreateDTO &oai_receivable_create_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  payable_id qint64 [required]
    */
    virtual void deletePayable3(const QString &quote_id, const qint64 &payable_id);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    */
    virtual void deleteReceivable3(const QString &quote_id, const qint64 &receivable_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getById10(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getContacts3(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getCustomFields9(const QString &quote_id);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void getFileById3(const QString &file_id);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  file_name QString [required]
    */
    virtual void getFileContentById1(const QString &file_id, const QString &file_name);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getFiles1(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getFinance3(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void getJobs1(const QString &quote_id);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  body qint32 [required]
    */
    virtual void updateBusinessDays(const QString &quote_id, const qint32 &body);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateClientNotes1(const QString &quote_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateClientReferenceNumber1(const QString &quote_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_smart_contacts_dto OAISmartContactsDTO [required]
    */
    virtual void updateContacts3(const QString &quote_id, const OAISmartContactsDTO &oai_smart_contacts_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  oai_smart_custom_field_dto OAISmartCustomFieldDTO [required]
    */
    virtual void updateCustomField3(const QString &quote_id, const QString &key, const OAISmartCustomFieldDTO &oai_smart_custom_field_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_time_dto OAITimeDTO [required]
    */
    virtual void updateExpectedDeliveryDate(const QString &quote_id, const OAITimeDTO &oai_time_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateInternalNotes1(const QString &quote_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  payable_id qint64 [required]
    * @param[in]  oai_payable_dto OAIPayableDTO [required]
    */
    virtual void updatePayable3(const QString &quote_id, const qint64 &payable_id, const OAIPayableDTO &oai_payable_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_time_dto OAITimeDTO [required]
    */
    virtual void updateQuoteExpiry(const QString &quote_id, const OAITimeDTO &oai_time_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  receivable_id qint64 [required]
    * @param[in]  oai_receivable_dto OAIReceivableDTO [required]
    */
    virtual void updateReceivable3(const QString &quote_id, const qint64 &receivable_id, const OAIReceivableDTO &oai_receivable_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_source_language_dto OAISourceLanguageDTO [required]
    */
    virtual void updateSourceLanguage1(const QString &quote_id, const OAISourceLanguageDTO &oai_source_language_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_specialization_dto OAISpecializationDTO [required]
    */
    virtual void updateSpecialization1(const QString &quote_id, const OAISpecializationDTO &oai_specialization_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_target_languages_dto OAITargetLanguagesDTO [required]
    */
    virtual void updateTargetLanguages1(const QString &quote_id, const OAITargetLanguagesDTO &oai_target_languages_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_string_dto OAIStringDTO [required]
    */
    virtual void updateVendorInstructions1(const QString &quote_id, const OAIStringDTO &oai_string_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_big_decimal_dto OAIBigDecimalDTO [required]
    */
    virtual void updateVolume1(const QString &quote_id, const OAIBigDecimalDTO &oai_big_decimal_dto);

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    */
    virtual void uploadFile3(const QString &quote_id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFiles2Callback(OAIHttpRequestWorker *worker);
    void archive1Callback(OAIHttpRequestWorker *worker);
    void changeStatus3Callback(OAIHttpRequestWorker *worker);
    void create7Callback(OAIHttpRequestWorker *worker);
    void createPayable3Callback(OAIHttpRequestWorker *worker);
    void createReceivable3Callback(OAIHttpRequestWorker *worker);
    void deletePayable3Callback(OAIHttpRequestWorker *worker);
    void deleteReceivable3Callback(OAIHttpRequestWorker *worker);
    void getById10Callback(OAIHttpRequestWorker *worker);
    void getContacts3Callback(OAIHttpRequestWorker *worker);
    void getCustomFields9Callback(OAIHttpRequestWorker *worker);
    void getFileById3Callback(OAIHttpRequestWorker *worker);
    void getFileContentById1Callback(OAIHttpRequestWorker *worker);
    void getFiles1Callback(OAIHttpRequestWorker *worker);
    void getFinance3Callback(OAIHttpRequestWorker *worker);
    void getJobs1Callback(OAIHttpRequestWorker *worker);
    void updateBusinessDaysCallback(OAIHttpRequestWorker *worker);
    void updateClientNotes1Callback(OAIHttpRequestWorker *worker);
    void updateClientReferenceNumber1Callback(OAIHttpRequestWorker *worker);
    void updateContacts3Callback(OAIHttpRequestWorker *worker);
    void updateCustomField3Callback(OAIHttpRequestWorker *worker);
    void updateExpectedDeliveryDateCallback(OAIHttpRequestWorker *worker);
    void updateInternalNotes1Callback(OAIHttpRequestWorker *worker);
    void updatePayable3Callback(OAIHttpRequestWorker *worker);
    void updateQuoteExpiryCallback(OAIHttpRequestWorker *worker);
    void updateReceivable3Callback(OAIHttpRequestWorker *worker);
    void updateSourceLanguage1Callback(OAIHttpRequestWorker *worker);
    void updateSpecialization1Callback(OAIHttpRequestWorker *worker);
    void updateTargetLanguages1Callback(OAIHttpRequestWorker *worker);
    void updateVendorInstructions1Callback(OAIHttpRequestWorker *worker);
    void updateVolume1Callback(OAIHttpRequestWorker *worker);
    void uploadFile3Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFiles2Signal();
    void archive1Signal(OAIFilesArchiveDto summary);
    void changeStatus3Signal();
    void create7Signal(OAIQuoteDTOv2 summary);
    void createPayable3Signal(OAIPayableDTO summary);
    void createReceivable3Signal(OAIReceivableDTO summary);
    void deletePayable3Signal();
    void deleteReceivable3Signal();
    void getById10Signal(OAIQuoteDTOv2 summary);
    void getContacts3Signal(OAISmartContactsDTO summary);
    void getCustomFields9Signal(QList<OAICustomFieldDTO> summary);
    void getFileById3Signal(OAIProjectFileDto summary);
    void getFileContentById1Signal();
    void getFiles1Signal(QList<OAIProjectFileDto> summary);
    void getFinance3Signal(OAIFinanceDTO summary);
    void getJobs1Signal(QList<OAIJobDto> summary);
    void updateBusinessDaysSignal();
    void updateClientNotes1Signal();
    void updateClientReferenceNumber1Signal();
    void updateContacts3Signal(OAISmartContactsDTO summary);
    void updateCustomField3Signal();
    void updateExpectedDeliveryDateSignal();
    void updateInternalNotes1Signal();
    void updatePayable3Signal(OAIPayableDTO summary);
    void updateQuoteExpirySignal();
    void updateReceivable3Signal(OAIReceivableDTO summary);
    void updateSourceLanguage1Signal();
    void updateSpecialization1Signal();
    void updateTargetLanguages1Signal();
    void updateVendorInstructions1Signal();
    void updateVolume1Signal();
    void uploadFile3Signal(OAIFileDto summary);


    void addFiles2SignalFull(OAIHttpRequestWorker *worker);
    void archive1SignalFull(OAIHttpRequestWorker *worker, OAIFilesArchiveDto summary);
    void changeStatus3SignalFull(OAIHttpRequestWorker *worker);
    void create7SignalFull(OAIHttpRequestWorker *worker, OAIQuoteDTOv2 summary);
    void createPayable3SignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void createReceivable3SignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);
    void deletePayable3SignalFull(OAIHttpRequestWorker *worker);
    void deleteReceivable3SignalFull(OAIHttpRequestWorker *worker);
    void getById10SignalFull(OAIHttpRequestWorker *worker, OAIQuoteDTOv2 summary);
    void getContacts3SignalFull(OAIHttpRequestWorker *worker, OAISmartContactsDTO summary);
    void getCustomFields9SignalFull(OAIHttpRequestWorker *worker, QList<OAICustomFieldDTO> summary);
    void getFileById3SignalFull(OAIHttpRequestWorker *worker, OAIProjectFileDto summary);
    void getFileContentById1SignalFull(OAIHttpRequestWorker *worker);
    void getFiles1SignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectFileDto> summary);
    void getFinance3SignalFull(OAIHttpRequestWorker *worker, OAIFinanceDTO summary);
    void getJobs1SignalFull(OAIHttpRequestWorker *worker, QList<OAIJobDto> summary);
    void updateBusinessDaysSignalFull(OAIHttpRequestWorker *worker);
    void updateClientNotes1SignalFull(OAIHttpRequestWorker *worker);
    void updateClientReferenceNumber1SignalFull(OAIHttpRequestWorker *worker);
    void updateContacts3SignalFull(OAIHttpRequestWorker *worker, OAISmartContactsDTO summary);
    void updateCustomField3SignalFull(OAIHttpRequestWorker *worker);
    void updateExpectedDeliveryDateSignalFull(OAIHttpRequestWorker *worker);
    void updateInternalNotes1SignalFull(OAIHttpRequestWorker *worker);
    void updatePayable3SignalFull(OAIHttpRequestWorker *worker, OAIPayableDTO summary);
    void updateQuoteExpirySignalFull(OAIHttpRequestWorker *worker);
    void updateReceivable3SignalFull(OAIHttpRequestWorker *worker, OAIReceivableDTO summary);
    void updateSourceLanguage1SignalFull(OAIHttpRequestWorker *worker);
    void updateSpecialization1SignalFull(OAIHttpRequestWorker *worker);
    void updateTargetLanguages1SignalFull(OAIHttpRequestWorker *worker);
    void updateVendorInstructions1SignalFull(OAIHttpRequestWorker *worker);
    void updateVolume1SignalFull(OAIHttpRequestWorker *worker);
    void uploadFile3SignalFull(OAIHttpRequestWorker *worker, OAIFileDto summary);

    Q_DECL_DEPRECATED_X("Use addFiles2SignalError() instead")
    void addFiles2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFiles2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archive1SignalError() instead")
    void archive1SignalE(OAIFilesArchiveDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void archive1SignalError(OAIFilesArchiveDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatus3SignalError() instead")
    void changeStatus3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatus3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create7SignalError() instead")
    void create7SignalE(OAIQuoteDTOv2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create7SignalError(OAIQuoteDTOv2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayable3SignalError() instead")
    void createPayable3SignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayable3SignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivable3SignalError() instead")
    void createReceivable3SignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivable3SignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayable3SignalError() instead")
    void deletePayable3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayable3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivable3SignalError() instead")
    void deleteReceivable3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivable3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById10SignalError() instead")
    void getById10SignalE(OAIQuoteDTOv2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getById10SignalError(OAIQuoteDTOv2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContacts3SignalError() instead")
    void getContacts3SignalE(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContacts3SignalError(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields9SignalError() instead")
    void getCustomFields9SignalE(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields9SignalError(QList<OAICustomFieldDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileById3SignalError() instead")
    void getFileById3SignalE(OAIProjectFileDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileById3SignalError(OAIProjectFileDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileContentById1SignalError() instead")
    void getFileContentById1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFileContentById1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFiles1SignalError() instead")
    void getFiles1SignalE(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFiles1SignalError(QList<OAIProjectFileDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinance3SignalError() instead")
    void getFinance3SignalE(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinance3SignalError(OAIFinanceDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobs1SignalError() instead")
    void getJobs1SignalE(QList<OAIJobDto> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobs1SignalError(QList<OAIJobDto> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessDaysSignalError() instead")
    void updateBusinessDaysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessDaysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientNotes1SignalError() instead")
    void updateClientNotes1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientNotes1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientReferenceNumber1SignalError() instead")
    void updateClientReferenceNumber1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientReferenceNumber1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContacts3SignalError() instead")
    void updateContacts3SignalE(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContacts3SignalError(OAISmartContactsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomField3SignalError() instead")
    void updateCustomField3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomField3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExpectedDeliveryDateSignalError() instead")
    void updateExpectedDeliveryDateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateExpectedDeliveryDateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInternalNotes1SignalError() instead")
    void updateInternalNotes1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateInternalNotes1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayable3SignalError() instead")
    void updatePayable3SignalE(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayable3SignalError(OAIPayableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQuoteExpirySignalError() instead")
    void updateQuoteExpirySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateQuoteExpirySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivable3SignalError() instead")
    void updateReceivable3SignalE(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivable3SignalError(OAIReceivableDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceLanguage1SignalError() instead")
    void updateSourceLanguage1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceLanguage1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpecialization1SignalError() instead")
    void updateSpecialization1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpecialization1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTargetLanguages1SignalError() instead")
    void updateTargetLanguages1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTargetLanguages1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVendorInstructions1SignalError() instead")
    void updateVendorInstructions1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateVendorInstructions1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVolume1SignalError() instead")
    void updateVolume1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateVolume1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile3SignalError() instead")
    void uploadFile3SignalE(OAIFileDto summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile3SignalError(OAIFileDto summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFiles2SignalErrorFull() instead")
    void addFiles2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFiles2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archive1SignalErrorFull() instead")
    void archive1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archive1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeStatus3SignalErrorFull() instead")
    void changeStatus3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeStatus3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create7SignalErrorFull() instead")
    void create7SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create7SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPayable3SignalErrorFull() instead")
    void createPayable3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPayable3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReceivable3SignalErrorFull() instead")
    void createReceivable3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReceivable3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayable3SignalErrorFull() instead")
    void deletePayable3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayable3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReceivable3SignalErrorFull() instead")
    void deleteReceivable3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReceivable3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getById10SignalErrorFull() instead")
    void getById10SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getById10SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContacts3SignalErrorFull() instead")
    void getContacts3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContacts3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomFields9SignalErrorFull() instead")
    void getCustomFields9SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomFields9SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileById3SignalErrorFull() instead")
    void getFileById3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileById3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFileContentById1SignalErrorFull() instead")
    void getFileContentById1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileContentById1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFiles1SignalErrorFull() instead")
    void getFiles1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFiles1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFinance3SignalErrorFull() instead")
    void getFinance3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFinance3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobs1SignalErrorFull() instead")
    void getJobs1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobs1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBusinessDaysSignalErrorFull() instead")
    void updateBusinessDaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBusinessDaysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientNotes1SignalErrorFull() instead")
    void updateClientNotes1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientNotes1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientReferenceNumber1SignalErrorFull() instead")
    void updateClientReferenceNumber1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientReferenceNumber1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateContacts3SignalErrorFull() instead")
    void updateContacts3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateContacts3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomField3SignalErrorFull() instead")
    void updateCustomField3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomField3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExpectedDeliveryDateSignalErrorFull() instead")
    void updateExpectedDeliveryDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateExpectedDeliveryDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInternalNotes1SignalErrorFull() instead")
    void updateInternalNotes1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInternalNotes1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePayable3SignalErrorFull() instead")
    void updatePayable3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePayable3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQuoteExpirySignalErrorFull() instead")
    void updateQuoteExpirySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQuoteExpirySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReceivable3SignalErrorFull() instead")
    void updateReceivable3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReceivable3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceLanguage1SignalErrorFull() instead")
    void updateSourceLanguage1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceLanguage1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpecialization1SignalErrorFull() instead")
    void updateSpecialization1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpecialization1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTargetLanguages1SignalErrorFull() instead")
    void updateTargetLanguages1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTargetLanguages1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVendorInstructions1SignalErrorFull() instead")
    void updateVendorInstructions1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVendorInstructions1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVolume1SignalErrorFull() instead")
    void updateVolume1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVolume1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFile3SignalErrorFull() instead")
    void uploadFile3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFile3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
