/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.client.model.SongVoteRating;
import org.openapitools.client.model.UserForApiContract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatedSongForUserForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatedSongForUserForApiContract {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private SongVoteRating rating;

  public static final String SERIALIZED_NAME_SONG = "song";
  @SerializedName(SERIALIZED_NAME_SONG)
  private SongForApiContract song;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserForApiContract user;

  public RatedSongForUserForApiContract() {
  }

  public RatedSongForUserForApiContract date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public RatedSongForUserForApiContract rating(SongVoteRating rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public SongVoteRating getRating() {
    return rating;
  }

  public void setRating(SongVoteRating rating) {
    this.rating = rating;
  }


  public RatedSongForUserForApiContract song(SongForApiContract song) {
    this.song = song;
    return this;
  }

  /**
   * Get song
   * @return song
   */
  @javax.annotation.Nullable
  public SongForApiContract getSong() {
    return song;
  }

  public void setSong(SongForApiContract song) {
    this.song = song;
  }


  public RatedSongForUserForApiContract user(UserForApiContract user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserForApiContract getUser() {
    return user;
  }

  public void setUser(UserForApiContract user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatedSongForUserForApiContract ratedSongForUserForApiContract = (RatedSongForUserForApiContract) o;
    return Objects.equals(this.date, ratedSongForUserForApiContract.date) &&
        Objects.equals(this.rating, ratedSongForUserForApiContract.rating) &&
        Objects.equals(this.song, ratedSongForUserForApiContract.song) &&
        Objects.equals(this.user, ratedSongForUserForApiContract.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, rating, song, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatedSongForUserForApiContract {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    song: ").append(toIndentedString(song)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("rating");
    openapiFields.add("song");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatedSongForUserForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatedSongForUserForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatedSongForUserForApiContract is not found in the empty JSON string", RatedSongForUserForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatedSongForUserForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatedSongForUserForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        SongVoteRating.validateJsonElement(jsonObj.get("rating"));
      }
      // validate the optional field `song`
      if (jsonObj.get("song") != null && !jsonObj.get("song").isJsonNull()) {
        SongForApiContract.validateJsonElement(jsonObj.get("song"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatedSongForUserForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatedSongForUserForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatedSongForUserForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatedSongForUserForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<RatedSongForUserForApiContract>() {
           @Override
           public void write(JsonWriter out, RatedSongForUserForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatedSongForUserForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatedSongForUserForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatedSongForUserForApiContract
   * @throws IOException if the JSON string is invalid with respect to RatedSongForUserForApiContract
   */
  public static RatedSongForUserForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatedSongForUserForApiContract.class);
  }

  /**
   * Convert an instance of RatedSongForUserForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

