/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserForApiContract;
import org.openapitools.client.model.UserInboxType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserMessageContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserMessageContract {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CREATED_FORMATTED = "createdFormatted";
  @SerializedName(SERIALIZED_NAME_CREATED_FORMATTED)
  private String createdFormatted;

  public static final String SERIALIZED_NAME_HIGH_PRIORITY = "highPriority";
  @SerializedName(SERIALIZED_NAME_HIGH_PRIORITY)
  private Boolean highPriority;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INBOX = "inbox";
  @SerializedName(SERIALIZED_NAME_INBOX)
  private UserInboxType inbox;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private Boolean read;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  private UserForApiContract receiver;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private UserForApiContract sender;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public UserMessageContract() {
  }

  public UserMessageContract body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public UserMessageContract createdFormatted(String createdFormatted) {
    this.createdFormatted = createdFormatted;
    return this;
  }

  /**
   * Get createdFormatted
   * @return createdFormatted
   */
  @javax.annotation.Nullable
  public String getCreatedFormatted() {
    return createdFormatted;
  }

  public void setCreatedFormatted(String createdFormatted) {
    this.createdFormatted = createdFormatted;
  }


  public UserMessageContract highPriority(Boolean highPriority) {
    this.highPriority = highPriority;
    return this;
  }

  /**
   * Get highPriority
   * @return highPriority
   */
  @javax.annotation.Nullable
  public Boolean getHighPriority() {
    return highPriority;
  }

  public void setHighPriority(Boolean highPriority) {
    this.highPriority = highPriority;
  }


  public UserMessageContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UserMessageContract inbox(UserInboxType inbox) {
    this.inbox = inbox;
    return this;
  }

  /**
   * Get inbox
   * @return inbox
   */
  @javax.annotation.Nullable
  public UserInboxType getInbox() {
    return inbox;
  }

  public void setInbox(UserInboxType inbox) {
    this.inbox = inbox;
  }


  public UserMessageContract read(Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nullable
  public Boolean getRead() {
    return read;
  }

  public void setRead(Boolean read) {
    this.read = read;
  }


  public UserMessageContract receiver(UserForApiContract receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * Get receiver
   * @return receiver
   */
  @javax.annotation.Nullable
  public UserForApiContract getReceiver() {
    return receiver;
  }

  public void setReceiver(UserForApiContract receiver) {
    this.receiver = receiver;
  }


  public UserMessageContract sender(UserForApiContract sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public UserForApiContract getSender() {
    return sender;
  }

  public void setSender(UserForApiContract sender) {
    this.sender = sender;
  }


  public UserMessageContract subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserMessageContract userMessageContract = (UserMessageContract) o;
    return Objects.equals(this.body, userMessageContract.body) &&
        Objects.equals(this.createdFormatted, userMessageContract.createdFormatted) &&
        Objects.equals(this.highPriority, userMessageContract.highPriority) &&
        Objects.equals(this.id, userMessageContract.id) &&
        Objects.equals(this.inbox, userMessageContract.inbox) &&
        Objects.equals(this.read, userMessageContract.read) &&
        Objects.equals(this.receiver, userMessageContract.receiver) &&
        Objects.equals(this.sender, userMessageContract.sender) &&
        Objects.equals(this.subject, userMessageContract.subject);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, createdFormatted, highPriority, id, inbox, read, receiver, sender, subject);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserMessageContract {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    createdFormatted: ").append(toIndentedString(createdFormatted)).append("\n");
    sb.append("    highPriority: ").append(toIndentedString(highPriority)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inbox: ").append(toIndentedString(inbox)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("createdFormatted");
    openapiFields.add("highPriority");
    openapiFields.add("id");
    openapiFields.add("inbox");
    openapiFields.add("read");
    openapiFields.add("receiver");
    openapiFields.add("sender");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserMessageContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserMessageContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserMessageContract is not found in the empty JSON string", UserMessageContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserMessageContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserMessageContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("createdFormatted") != null && !jsonObj.get("createdFormatted").isJsonNull()) && !jsonObj.get("createdFormatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdFormatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdFormatted").toString()));
      }
      // validate the optional field `inbox`
      if (jsonObj.get("inbox") != null && !jsonObj.get("inbox").isJsonNull()) {
        UserInboxType.validateJsonElement(jsonObj.get("inbox"));
      }
      // validate the optional field `receiver`
      if (jsonObj.get("receiver") != null && !jsonObj.get("receiver").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("receiver"));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("sender"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserMessageContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserMessageContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserMessageContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserMessageContract.class));

       return (TypeAdapter<T>) new TypeAdapter<UserMessageContract>() {
           @Override
           public void write(JsonWriter out, UserMessageContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserMessageContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserMessageContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserMessageContract
   * @throws IOException if the JSON string is invalid with respect to UserMessageContract
   */
  public static UserMessageContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserMessageContract.class);
  }

  /**
   * Convert an instance of UserMessageContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

