/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlbumForApiContract;
import org.openapitools.client.model.AlbumOptionalFields;
import org.openapitools.client.model.ContentLanguagePreference;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.EventReportType;
import org.openapitools.client.model.EventSortRule;
import org.openapitools.client.model.NameMatchMode;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.client.model.ReleaseEventForApiContractPartialFindResult;
import org.openapitools.client.model.ReleaseEventOptionalFields;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.client.model.SongOptionalFields;
import org.openapitools.client.model.SortDirection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReleaseEventApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReleaseEventApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReleaseEventApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiReleaseEventsEventIdAlbumsGet
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsEventIdAlbumsGetCall(Integer eventId, AlbumOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/releaseEvents/{eventId}/albums"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReleaseEventsEventIdAlbumsGetValidateBeforeCall(Integer eventId, AlbumOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling apiReleaseEventsEventIdAlbumsGet(Async)");
        }

        return apiReleaseEventsEventIdAlbumsGetCall(eventId, fields, lang, _callback);

    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return List&lt;AlbumForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AlbumForApiContract> apiReleaseEventsEventIdAlbumsGet(Integer eventId, AlbumOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<List<AlbumForApiContract>> localVarResp = apiReleaseEventsEventIdAlbumsGetWithHttpInfo(eventId, fields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;List&lt;AlbumForApiContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AlbumForApiContract>> apiReleaseEventsEventIdAlbumsGetWithHttpInfo(Integer eventId, AlbumOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiReleaseEventsEventIdAlbumsGetValidateBeforeCall(eventId, fields, lang, null);
        Type localVarReturnType = new TypeToken<List<AlbumForApiContract>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsEventIdAlbumsGetAsync(Integer eventId, AlbumOptionalFields fields, ContentLanguagePreference lang, final ApiCallback<List<AlbumForApiContract>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReleaseEventsEventIdAlbumsGetValidateBeforeCall(eventId, fields, lang, _callback);
        Type localVarReturnType = new TypeToken<List<AlbumForApiContract>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReleaseEventsEventIdPublishedSongsGet
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsEventIdPublishedSongsGetCall(Integer eventId, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/releaseEvents/{eventId}/published-songs"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReleaseEventsEventIdPublishedSongsGetValidateBeforeCall(Integer eventId, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling apiReleaseEventsEventIdPublishedSongsGet(Async)");
        }

        return apiReleaseEventsEventIdPublishedSongsGetCall(eventId, fields, lang, _callback);

    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return List&lt;SongForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<SongForApiContract> apiReleaseEventsEventIdPublishedSongsGet(Integer eventId, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<List<SongForApiContract>> localVarResp = apiReleaseEventsEventIdPublishedSongsGetWithHttpInfo(eventId, fields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;List&lt;SongForApiContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SongForApiContract>> apiReleaseEventsEventIdPublishedSongsGetWithHttpInfo(Integer eventId, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiReleaseEventsEventIdPublishedSongsGetValidateBeforeCall(eventId, fields, lang, null);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventId  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsEventIdPublishedSongsGetAsync(Integer eventId, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback<List<SongForApiContract>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReleaseEventsEventIdPublishedSongsGetValidateBeforeCall(eventId, fields, lang, _callback);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReleaseEventsEventIdReportsPost
     * @param eventId  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsEventIdReportsPostCall(Integer eventId, EventReportType reportType, String notes, Integer versionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/releaseEvents/{eventId}/reports"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportType", reportType));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (versionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionNumber", versionNumber));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReleaseEventsEventIdReportsPostValidateBeforeCall(Integer eventId, EventReportType reportType, String notes, Integer versionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling apiReleaseEventsEventIdReportsPost(Async)");
        }

        return apiReleaseEventsEventIdReportsPostCall(eventId, reportType, notes, versionNumber, _callback);

    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiReleaseEventsEventIdReportsPost(Integer eventId, EventReportType reportType, String notes, Integer versionNumber) throws ApiException {
        apiReleaseEventsEventIdReportsPostWithHttpInfo(eventId, reportType, notes, versionNumber);
    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiReleaseEventsEventIdReportsPostWithHttpInfo(Integer eventId, EventReportType reportType, String notes, Integer versionNumber) throws ApiException {
        okhttp3.Call localVarCall = apiReleaseEventsEventIdReportsPostValidateBeforeCall(eventId, reportType, notes, versionNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventId  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsEventIdReportsPostAsync(Integer eventId, EventReportType reportType, String notes, Integer versionNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReleaseEventsEventIdReportsPostValidateBeforeCall(eventId, reportType, notes, versionNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReleaseEventsGet
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param seriesId  (optional, default to 0)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param category  (optional)
     * @param userCollectionId  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param artistId  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param status  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param sortDirection  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsGetCall(String query, NameMatchMode nameMatchMode, Integer seriesId, OffsetDateTime afterDate, OffsetDateTime beforeDate, EventCategory category, Integer userCollectionId, List<Integer> tagId, Boolean childTags, List<Integer> artistId, Boolean childVoicebanks, Boolean includeMembers, EntryStatus status, Integer start, Integer maxResults, Boolean getTotalCount, EventSortRule sort, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, SortDirection sortDirection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/releaseEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (nameMatchMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameMatchMode", nameMatchMode));
        }

        if (seriesId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriesId", seriesId));
        }

        if (afterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterDate", afterDate));
        }

        if (beforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeDate", beforeDate));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (userCollectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userCollectionId", userCollectionId));
        }

        if (tagId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tagId[]", tagId));
        }

        if (childTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("childTags", childTags));
        }

        if (artistId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "artistId[]", artistId));
        }

        if (childVoicebanks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("childVoicebanks", childVoicebanks));
        }

        if (includeMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMembers", includeMembers));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (getTotalCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getTotalCount", getTotalCount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReleaseEventsGetValidateBeforeCall(String query, NameMatchMode nameMatchMode, Integer seriesId, OffsetDateTime afterDate, OffsetDateTime beforeDate, EventCategory category, Integer userCollectionId, List<Integer> tagId, Boolean childTags, List<Integer> artistId, Boolean childVoicebanks, Boolean includeMembers, EntryStatus status, Integer start, Integer maxResults, Boolean getTotalCount, EventSortRule sort, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, SortDirection sortDirection, final ApiCallback _callback) throws ApiException {
        return apiReleaseEventsGetCall(query, nameMatchMode, seriesId, afterDate, beforeDate, category, userCollectionId, tagId, childTags, artistId, childVoicebanks, includeMembers, status, start, maxResults, getTotalCount, sort, fields, lang, sortDirection, _callback);

    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param seriesId  (optional, default to 0)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param category  (optional)
     * @param userCollectionId  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param artistId  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param status  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param sortDirection  (optional)
     * @return ReleaseEventForApiContractPartialFindResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReleaseEventForApiContractPartialFindResult apiReleaseEventsGet(String query, NameMatchMode nameMatchMode, Integer seriesId, OffsetDateTime afterDate, OffsetDateTime beforeDate, EventCategory category, Integer userCollectionId, List<Integer> tagId, Boolean childTags, List<Integer> artistId, Boolean childVoicebanks, Boolean includeMembers, EntryStatus status, Integer start, Integer maxResults, Boolean getTotalCount, EventSortRule sort, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, SortDirection sortDirection) throws ApiException {
        ApiResponse<ReleaseEventForApiContractPartialFindResult> localVarResp = apiReleaseEventsGetWithHttpInfo(query, nameMatchMode, seriesId, afterDate, beforeDate, category, userCollectionId, tagId, childTags, artistId, childVoicebanks, includeMembers, status, start, maxResults, getTotalCount, sort, fields, lang, sortDirection);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param seriesId  (optional, default to 0)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param category  (optional)
     * @param userCollectionId  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param artistId  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param status  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param sortDirection  (optional)
     * @return ApiResponse&lt;ReleaseEventForApiContractPartialFindResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleaseEventForApiContractPartialFindResult> apiReleaseEventsGetWithHttpInfo(String query, NameMatchMode nameMatchMode, Integer seriesId, OffsetDateTime afterDate, OffsetDateTime beforeDate, EventCategory category, Integer userCollectionId, List<Integer> tagId, Boolean childTags, List<Integer> artistId, Boolean childVoicebanks, Boolean includeMembers, EntryStatus status, Integer start, Integer maxResults, Boolean getTotalCount, EventSortRule sort, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, SortDirection sortDirection) throws ApiException {
        okhttp3.Call localVarCall = apiReleaseEventsGetValidateBeforeCall(query, nameMatchMode, seriesId, afterDate, beforeDate, category, userCollectionId, tagId, childTags, artistId, childVoicebanks, includeMembers, status, start, maxResults, getTotalCount, sort, fields, lang, sortDirection, null);
        Type localVarReturnType = new TypeToken<ReleaseEventForApiContractPartialFindResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param seriesId  (optional, default to 0)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param category  (optional)
     * @param userCollectionId  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param artistId  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param status  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param sortDirection  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsGetAsync(String query, NameMatchMode nameMatchMode, Integer seriesId, OffsetDateTime afterDate, OffsetDateTime beforeDate, EventCategory category, Integer userCollectionId, List<Integer> tagId, Boolean childTags, List<Integer> artistId, Boolean childVoicebanks, Boolean includeMembers, EntryStatus status, Integer start, Integer maxResults, Boolean getTotalCount, EventSortRule sort, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, SortDirection sortDirection, final ApiCallback<ReleaseEventForApiContractPartialFindResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReleaseEventsGetValidateBeforeCall(query, nameMatchMode, seriesId, afterDate, beforeDate, category, userCollectionId, tagId, childTags, artistId, childVoicebanks, includeMembers, status, start, maxResults, getTotalCount, sort, fields, lang, sortDirection, _callback);
        Type localVarReturnType = new TypeToken<ReleaseEventForApiContractPartialFindResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReleaseEventsIdDelete
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsIdDeleteCall(Integer id, String notes, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/releaseEvents/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (hardDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hardDelete", hardDelete));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReleaseEventsIdDeleteValidateBeforeCall(Integer id, String notes, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiReleaseEventsIdDelete(Async)");
        }

        return apiReleaseEventsIdDeleteCall(id, notes, hardDelete, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiReleaseEventsIdDelete(Integer id, String notes, Boolean hardDelete) throws ApiException {
        apiReleaseEventsIdDeleteWithHttpInfo(id, notes, hardDelete);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiReleaseEventsIdDeleteWithHttpInfo(Integer id, String notes, Boolean hardDelete) throws ApiException {
        okhttp3.Call localVarCall = apiReleaseEventsIdDeleteValidateBeforeCall(id, notes, hardDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsIdDeleteAsync(Integer id, String notes, Boolean hardDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReleaseEventsIdDeleteValidateBeforeCall(id, notes, hardDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReleaseEventsIdGet
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsIdGetCall(Integer id, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/releaseEvents/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReleaseEventsIdGetValidateBeforeCall(Integer id, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiReleaseEventsIdGet(Async)");
        }

        return apiReleaseEventsIdGetCall(id, fields, lang, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ReleaseEventForApiContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReleaseEventForApiContract apiReleaseEventsIdGet(Integer id, ReleaseEventOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<ReleaseEventForApiContract> localVarResp = apiReleaseEventsIdGetWithHttpInfo(id, fields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;ReleaseEventForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReleaseEventForApiContract> apiReleaseEventsIdGetWithHttpInfo(Integer id, ReleaseEventOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiReleaseEventsIdGetValidateBeforeCall(id, fields, lang, null);
        Type localVarReturnType = new TypeToken<ReleaseEventForApiContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsIdGetAsync(Integer id, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, final ApiCallback<ReleaseEventForApiContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReleaseEventsIdGetValidateBeforeCall(id, fields, lang, _callback);
        Type localVarReturnType = new TypeToken<ReleaseEventForApiContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiReleaseEventsNamesGet
     * @param query  (optional, default to )
     * @param maxResults  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsNamesGetCall(String query, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/releaseEvents/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiReleaseEventsNamesGetValidateBeforeCall(String query, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return apiReleaseEventsNamesGetCall(query, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param maxResults  (optional, default to 10)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> apiReleaseEventsNamesGet(String query, Integer maxResults) throws ApiException {
        ApiResponse<List<String>> localVarResp = apiReleaseEventsNamesGetWithHttpInfo(query, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param maxResults  (optional, default to 10)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> apiReleaseEventsNamesGetWithHttpInfo(String query, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = apiReleaseEventsNamesGetValidateBeforeCall(query, maxResults, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (optional, default to )
     * @param maxResults  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiReleaseEventsNamesGetAsync(String query, Integer maxResults, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiReleaseEventsNamesGetValidateBeforeCall(query, maxResults, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
