/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArtistContract;
import org.openapitools.client.model.ArtistForArtistForApiContract;
import org.openapitools.client.model.ArtistRelationsForApi;
import org.openapitools.client.model.ArtistType;
import org.openapitools.client.model.ContentLanguageSelection;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.LocalizedStringContract;
import org.openapitools.client.model.TagUsageForApiContract;
import org.openapitools.client.model.WebLinkForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArtistForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArtistForApiContract {
  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_ARTIST_LINKS = "artistLinks";
  @SerializedName(SERIALIZED_NAME_ARTIST_LINKS)
  private List<ArtistForArtistForApiContract> artistLinks;

  public static final String SERIALIZED_NAME_ARTIST_LINKS_REVERSE = "artistLinksReverse";
  @SerializedName(SERIALIZED_NAME_ARTIST_LINKS_REVERSE)
  private List<ArtistForArtistForApiContract> artistLinksReverse;

  public static final String SERIALIZED_NAME_ARTIST_TYPE = "artistType";
  @SerializedName(SERIALIZED_NAME_ARTIST_TYPE)
  private ArtistType artistType;

  public static final String SERIALIZED_NAME_BASE_VOICEBANK = "baseVoicebank";
  @SerializedName(SERIALIZED_NAME_BASE_VOICEBANK)
  private ArtistContract baseVoicebank;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DEFAULT_NAME = "defaultName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME)
  private String defaultName;

  public static final String SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE = "defaultNameLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE)
  private ContentLanguageSelection defaultNameLanguage;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_MERGED_TO = "mergedTo";
  @SerializedName(SERIALIZED_NAME_MERGED_TO)
  private Integer mergedTo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<LocalizedStringContract> names;

  public static final String SERIALIZED_NAME_PICTURE_MIME = "pictureMime";
  @SerializedName(SERIALIZED_NAME_PICTURE_MIME)
  private String pictureMime;

  public static final String SERIALIZED_NAME_RELATIONS = "relations";
  @SerializedName(SERIALIZED_NAME_RELATIONS)
  private ArtistRelationsForApi relations;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OffsetDateTime releaseDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagUsageForApiContract> tags;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_WEB_LINKS = "webLinks";
  @SerializedName(SERIALIZED_NAME_WEB_LINKS)
  private List<WebLinkForApiContract> webLinks;

  public ArtistForApiContract() {
  }

  public ArtistForApiContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public ArtistForApiContract artistLinks(List<ArtistForArtistForApiContract> artistLinks) {
    this.artistLinks = artistLinks;
    return this;
  }

  public ArtistForApiContract addArtistLinksItem(ArtistForArtistForApiContract artistLinksItem) {
    if (this.artistLinks == null) {
      this.artistLinks = new ArrayList<>();
    }
    this.artistLinks.add(artistLinksItem);
    return this;
  }

  /**
   * Get artistLinks
   * @return artistLinks
   */
  @javax.annotation.Nullable
  public List<ArtistForArtistForApiContract> getArtistLinks() {
    return artistLinks;
  }

  public void setArtistLinks(List<ArtistForArtistForApiContract> artistLinks) {
    this.artistLinks = artistLinks;
  }


  public ArtistForApiContract artistLinksReverse(List<ArtistForArtistForApiContract> artistLinksReverse) {
    this.artistLinksReverse = artistLinksReverse;
    return this;
  }

  public ArtistForApiContract addArtistLinksReverseItem(ArtistForArtistForApiContract artistLinksReverseItem) {
    if (this.artistLinksReverse == null) {
      this.artistLinksReverse = new ArrayList<>();
    }
    this.artistLinksReverse.add(artistLinksReverseItem);
    return this;
  }

  /**
   * Get artistLinksReverse
   * @return artistLinksReverse
   */
  @javax.annotation.Nullable
  public List<ArtistForArtistForApiContract> getArtistLinksReverse() {
    return artistLinksReverse;
  }

  public void setArtistLinksReverse(List<ArtistForArtistForApiContract> artistLinksReverse) {
    this.artistLinksReverse = artistLinksReverse;
  }


  public ArtistForApiContract artistType(ArtistType artistType) {
    this.artistType = artistType;
    return this;
  }

  /**
   * Get artistType
   * @return artistType
   */
  @javax.annotation.Nullable
  public ArtistType getArtistType() {
    return artistType;
  }

  public void setArtistType(ArtistType artistType) {
    this.artistType = artistType;
  }


  public ArtistForApiContract baseVoicebank(ArtistContract baseVoicebank) {
    this.baseVoicebank = baseVoicebank;
    return this;
  }

  /**
   * Get baseVoicebank
   * @return baseVoicebank
   */
  @javax.annotation.Nullable
  public ArtistContract getBaseVoicebank() {
    return baseVoicebank;
  }

  public void setBaseVoicebank(ArtistContract baseVoicebank) {
    this.baseVoicebank = baseVoicebank;
  }


  public ArtistForApiContract createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public ArtistForApiContract defaultName(String defaultName) {
    this.defaultName = defaultName;
    return this;
  }

  /**
   * Get defaultName
   * @return defaultName
   */
  @javax.annotation.Nullable
  public String getDefaultName() {
    return defaultName;
  }

  public void setDefaultName(String defaultName) {
    this.defaultName = defaultName;
  }


  public ArtistForApiContract defaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
    return this;
  }

  /**
   * Get defaultNameLanguage
   * @return defaultNameLanguage
   */
  @javax.annotation.Nullable
  public ContentLanguageSelection getDefaultNameLanguage() {
    return defaultNameLanguage;
  }

  public void setDefaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
  }


  public ArtistForApiContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public ArtistForApiContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ArtistForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ArtistForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public ArtistForApiContract mergedTo(Integer mergedTo) {
    this.mergedTo = mergedTo;
    return this;
  }

  /**
   * Get mergedTo
   * @return mergedTo
   */
  @javax.annotation.Nullable
  public Integer getMergedTo() {
    return mergedTo;
  }

  public void setMergedTo(Integer mergedTo) {
    this.mergedTo = mergedTo;
  }


  public ArtistForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ArtistForApiContract names(List<LocalizedStringContract> names) {
    this.names = names;
    return this;
  }

  public ArtistForApiContract addNamesItem(LocalizedStringContract namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List<LocalizedStringContract> getNames() {
    return names;
  }

  public void setNames(List<LocalizedStringContract> names) {
    this.names = names;
  }


  public ArtistForApiContract pictureMime(String pictureMime) {
    this.pictureMime = pictureMime;
    return this;
  }

  /**
   * Get pictureMime
   * @return pictureMime
   */
  @javax.annotation.Nullable
  public String getPictureMime() {
    return pictureMime;
  }

  public void setPictureMime(String pictureMime) {
    this.pictureMime = pictureMime;
  }


  public ArtistForApiContract relations(ArtistRelationsForApi relations) {
    this.relations = relations;
    return this;
  }

  /**
   * Get relations
   * @return relations
   */
  @javax.annotation.Nullable
  public ArtistRelationsForApi getRelations() {
    return relations;
  }

  public void setRelations(ArtistRelationsForApi relations) {
    this.relations = relations;
  }


  public ArtistForApiContract releaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
  }


  public ArtistForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public ArtistForApiContract tags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
    return this;
  }

  public ArtistForApiContract addTagsItem(TagUsageForApiContract tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagUsageForApiContract> getTags() {
    return tags;
  }

  public void setTags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
  }


  public ArtistForApiContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public ArtistForApiContract webLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
    return this;
  }

  public ArtistForApiContract addWebLinksItem(WebLinkForApiContract webLinksItem) {
    if (this.webLinks == null) {
      this.webLinks = new ArrayList<>();
    }
    this.webLinks.add(webLinksItem);
    return this;
  }

  /**
   * Get webLinks
   * @return webLinks
   */
  @javax.annotation.Nullable
  public List<WebLinkForApiContract> getWebLinks() {
    return webLinks;
  }

  public void setWebLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtistForApiContract artistForApiContract = (ArtistForApiContract) o;
    return Objects.equals(this.additionalNames, artistForApiContract.additionalNames) &&
        Objects.equals(this.artistLinks, artistForApiContract.artistLinks) &&
        Objects.equals(this.artistLinksReverse, artistForApiContract.artistLinksReverse) &&
        Objects.equals(this.artistType, artistForApiContract.artistType) &&
        Objects.equals(this.baseVoicebank, artistForApiContract.baseVoicebank) &&
        Objects.equals(this.createDate, artistForApiContract.createDate) &&
        Objects.equals(this.defaultName, artistForApiContract.defaultName) &&
        Objects.equals(this.defaultNameLanguage, artistForApiContract.defaultNameLanguage) &&
        Objects.equals(this.deleted, artistForApiContract.deleted) &&
        Objects.equals(this.description, artistForApiContract.description) &&
        Objects.equals(this.id, artistForApiContract.id) &&
        Objects.equals(this.mainPicture, artistForApiContract.mainPicture) &&
        Objects.equals(this.mergedTo, artistForApiContract.mergedTo) &&
        Objects.equals(this.name, artistForApiContract.name) &&
        Objects.equals(this.names, artistForApiContract.names) &&
        Objects.equals(this.pictureMime, artistForApiContract.pictureMime) &&
        Objects.equals(this.relations, artistForApiContract.relations) &&
        Objects.equals(this.releaseDate, artistForApiContract.releaseDate) &&
        Objects.equals(this.status, artistForApiContract.status) &&
        Objects.equals(this.tags, artistForApiContract.tags) &&
        Objects.equals(this.version, artistForApiContract.version) &&
        Objects.equals(this.webLinks, artistForApiContract.webLinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNames, artistLinks, artistLinksReverse, artistType, baseVoicebank, createDate, defaultName, defaultNameLanguage, deleted, description, id, mainPicture, mergedTo, name, names, pictureMime, relations, releaseDate, status, tags, version, webLinks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtistForApiContract {\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    artistLinks: ").append(toIndentedString(artistLinks)).append("\n");
    sb.append("    artistLinksReverse: ").append(toIndentedString(artistLinksReverse)).append("\n");
    sb.append("    artistType: ").append(toIndentedString(artistType)).append("\n");
    sb.append("    baseVoicebank: ").append(toIndentedString(baseVoicebank)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    defaultName: ").append(toIndentedString(defaultName)).append("\n");
    sb.append("    defaultNameLanguage: ").append(toIndentedString(defaultNameLanguage)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    mergedTo: ").append(toIndentedString(mergedTo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    pictureMime: ").append(toIndentedString(pictureMime)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    webLinks: ").append(toIndentedString(webLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNames");
    openapiFields.add("artistLinks");
    openapiFields.add("artistLinksReverse");
    openapiFields.add("artistType");
    openapiFields.add("baseVoicebank");
    openapiFields.add("createDate");
    openapiFields.add("defaultName");
    openapiFields.add("defaultNameLanguage");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("mainPicture");
    openapiFields.add("mergedTo");
    openapiFields.add("name");
    openapiFields.add("names");
    openapiFields.add("pictureMime");
    openapiFields.add("relations");
    openapiFields.add("releaseDate");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("version");
    openapiFields.add("webLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtistForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtistForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtistForApiContract is not found in the empty JSON string", ArtistForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtistForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtistForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if (jsonObj.get("artistLinks") != null && !jsonObj.get("artistLinks").isJsonNull()) {
        JsonArray jsonArrayartistLinks = jsonObj.getAsJsonArray("artistLinks");
        if (jsonArrayartistLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artistLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artistLinks` to be an array in the JSON string but got `%s`", jsonObj.get("artistLinks").toString()));
          }

          // validate the optional field `artistLinks` (array)
          for (int i = 0; i < jsonArrayartistLinks.size(); i++) {
            ArtistForArtistForApiContract.validateJsonElement(jsonArrayartistLinks.get(i));
          };
        }
      }
      if (jsonObj.get("artistLinksReverse") != null && !jsonObj.get("artistLinksReverse").isJsonNull()) {
        JsonArray jsonArrayartistLinksReverse = jsonObj.getAsJsonArray("artistLinksReverse");
        if (jsonArrayartistLinksReverse != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artistLinksReverse").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artistLinksReverse` to be an array in the JSON string but got `%s`", jsonObj.get("artistLinksReverse").toString()));
          }

          // validate the optional field `artistLinksReverse` (array)
          for (int i = 0; i < jsonArrayartistLinksReverse.size(); i++) {
            ArtistForArtistForApiContract.validateJsonElement(jsonArrayartistLinksReverse.get(i));
          };
        }
      }
      // validate the optional field `artistType`
      if (jsonObj.get("artistType") != null && !jsonObj.get("artistType").isJsonNull()) {
        ArtistType.validateJsonElement(jsonObj.get("artistType"));
      }
      // validate the optional field `baseVoicebank`
      if (jsonObj.get("baseVoicebank") != null && !jsonObj.get("baseVoicebank").isJsonNull()) {
        ArtistContract.validateJsonElement(jsonObj.get("baseVoicebank"));
      }
      if ((jsonObj.get("defaultName") != null && !jsonObj.get("defaultName").isJsonNull()) && !jsonObj.get("defaultName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultName").toString()));
      }
      // validate the optional field `defaultNameLanguage`
      if (jsonObj.get("defaultNameLanguage") != null && !jsonObj.get("defaultNameLanguage").isJsonNull()) {
        ContentLanguageSelection.validateJsonElement(jsonObj.get("defaultNameLanguage"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            LocalizedStringContract.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      if ((jsonObj.get("pictureMime") != null && !jsonObj.get("pictureMime").isJsonNull()) && !jsonObj.get("pictureMime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictureMime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pictureMime").toString()));
      }
      // validate the optional field `relations`
      if (jsonObj.get("relations") != null && !jsonObj.get("relations").isJsonNull()) {
        ArtistRelationsForApi.validateJsonElement(jsonObj.get("relations"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagUsageForApiContract.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("webLinks") != null && !jsonObj.get("webLinks").isJsonNull()) {
        JsonArray jsonArraywebLinks = jsonObj.getAsJsonArray("webLinks");
        if (jsonArraywebLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webLinks` to be an array in the JSON string but got `%s`", jsonObj.get("webLinks").toString()));
          }

          // validate the optional field `webLinks` (array)
          for (int i = 0; i < jsonArraywebLinks.size(); i++) {
            WebLinkForApiContract.validateJsonElement(jsonArraywebLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtistForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtistForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtistForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtistForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtistForApiContract>() {
           @Override
           public void write(JsonWriter out, ArtistForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtistForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtistForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtistForApiContract
   * @throws IOException if the JSON string is invalid with respect to ArtistForApiContract
   */
  public static ArtistForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtistForApiContract.class);
  }

  /**
   * Convert an instance of ArtistForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

