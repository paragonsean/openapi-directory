/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArtistForEventContract;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.LocalizedStringContract;
import org.openapitools.client.model.PVContract;
import org.openapitools.client.model.ReleaseEventSeriesContract;
import org.openapitools.client.model.SongListBaseContract;
import org.openapitools.client.model.TagUsageForApiContract;
import org.openapitools.client.model.VenueForApiContract;
import org.openapitools.client.model.WebLinkForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReleaseEventForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReleaseEventForApiContract {
  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<ArtistForEventContract> artists;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private EventCategory category;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<LocalizedStringContract> names;

  public static final String SERIALIZED_NAME_PVS = "pvs";
  @SerializedName(SERIALIZED_NAME_PVS)
  private List<PVContract> pvs;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private ReleaseEventSeriesContract series;

  public static final String SERIALIZED_NAME_SERIES_ID = "seriesId";
  @SerializedName(SERIALIZED_NAME_SERIES_ID)
  private Integer seriesId;

  public static final String SERIALIZED_NAME_SERIES_NUMBER = "seriesNumber";
  @SerializedName(SERIALIZED_NAME_SERIES_NUMBER)
  private Integer seriesNumber;

  public static final String SERIALIZED_NAME_SERIES_SUFFIX = "seriesSuffix";
  @SerializedName(SERIALIZED_NAME_SERIES_SUFFIX)
  private String seriesSuffix;

  public static final String SERIALIZED_NAME_SONG_LIST = "songList";
  @SerializedName(SERIALIZED_NAME_SONG_LIST)
  private SongListBaseContract songList;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagUsageForApiContract> tags;

  public static final String SERIALIZED_NAME_URL_SLUG = "urlSlug";
  @SerializedName(SERIALIZED_NAME_URL_SLUG)
  private String urlSlug;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private VenueForApiContract venue;

  public static final String SERIALIZED_NAME_VENUE_NAME = "venueName";
  @SerializedName(SERIALIZED_NAME_VENUE_NAME)
  private String venueName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_WEB_LINKS = "webLinks";
  @SerializedName(SERIALIZED_NAME_WEB_LINKS)
  private List<WebLinkForApiContract> webLinks;

  public ReleaseEventForApiContract() {
  }

  public ReleaseEventForApiContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public ReleaseEventForApiContract artists(List<ArtistForEventContract> artists) {
    this.artists = artists;
    return this;
  }

  public ReleaseEventForApiContract addArtistsItem(ArtistForEventContract artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<ArtistForEventContract> getArtists() {
    return artists;
  }

  public void setArtists(List<ArtistForEventContract> artists) {
    this.artists = artists;
  }


  public ReleaseEventForApiContract category(EventCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public EventCategory getCategory() {
    return category;
  }

  public void setCategory(EventCategory category) {
    this.category = category;
  }


  public ReleaseEventForApiContract date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public ReleaseEventForApiContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReleaseEventForApiContract endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public ReleaseEventForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ReleaseEventForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public ReleaseEventForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReleaseEventForApiContract names(List<LocalizedStringContract> names) {
    this.names = names;
    return this;
  }

  public ReleaseEventForApiContract addNamesItem(LocalizedStringContract namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List<LocalizedStringContract> getNames() {
    return names;
  }

  public void setNames(List<LocalizedStringContract> names) {
    this.names = names;
  }


  public ReleaseEventForApiContract pvs(List<PVContract> pvs) {
    this.pvs = pvs;
    return this;
  }

  public ReleaseEventForApiContract addPvsItem(PVContract pvsItem) {
    if (this.pvs == null) {
      this.pvs = new ArrayList<>();
    }
    this.pvs.add(pvsItem);
    return this;
  }

  /**
   * Get pvs
   * @return pvs
   */
  @javax.annotation.Nullable
  public List<PVContract> getPvs() {
    return pvs;
  }

  public void setPvs(List<PVContract> pvs) {
    this.pvs = pvs;
  }


  public ReleaseEventForApiContract series(ReleaseEventSeriesContract series) {
    this.series = series;
    return this;
  }

  /**
   * Get series
   * @return series
   */
  @javax.annotation.Nullable
  public ReleaseEventSeriesContract getSeries() {
    return series;
  }

  public void setSeries(ReleaseEventSeriesContract series) {
    this.series = series;
  }


  public ReleaseEventForApiContract seriesId(Integer seriesId) {
    this.seriesId = seriesId;
    return this;
  }

  /**
   * Get seriesId
   * @return seriesId
   */
  @javax.annotation.Nullable
  public Integer getSeriesId() {
    return seriesId;
  }

  public void setSeriesId(Integer seriesId) {
    this.seriesId = seriesId;
  }


  public ReleaseEventForApiContract seriesNumber(Integer seriesNumber) {
    this.seriesNumber = seriesNumber;
    return this;
  }

  /**
   * Get seriesNumber
   * @return seriesNumber
   */
  @javax.annotation.Nullable
  public Integer getSeriesNumber() {
    return seriesNumber;
  }

  public void setSeriesNumber(Integer seriesNumber) {
    this.seriesNumber = seriesNumber;
  }


  public ReleaseEventForApiContract seriesSuffix(String seriesSuffix) {
    this.seriesSuffix = seriesSuffix;
    return this;
  }

  /**
   * Get seriesSuffix
   * @return seriesSuffix
   */
  @javax.annotation.Nullable
  public String getSeriesSuffix() {
    return seriesSuffix;
  }

  public void setSeriesSuffix(String seriesSuffix) {
    this.seriesSuffix = seriesSuffix;
  }


  public ReleaseEventForApiContract songList(SongListBaseContract songList) {
    this.songList = songList;
    return this;
  }

  /**
   * Get songList
   * @return songList
   */
  @javax.annotation.Nullable
  public SongListBaseContract getSongList() {
    return songList;
  }

  public void setSongList(SongListBaseContract songList) {
    this.songList = songList;
  }


  public ReleaseEventForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public ReleaseEventForApiContract tags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
    return this;
  }

  public ReleaseEventForApiContract addTagsItem(TagUsageForApiContract tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagUsageForApiContract> getTags() {
    return tags;
  }

  public void setTags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
  }


  public ReleaseEventForApiContract urlSlug(String urlSlug) {
    this.urlSlug = urlSlug;
    return this;
  }

  /**
   * Get urlSlug
   * @return urlSlug
   */
  @javax.annotation.Nullable
  public String getUrlSlug() {
    return urlSlug;
  }

  public void setUrlSlug(String urlSlug) {
    this.urlSlug = urlSlug;
  }


  public ReleaseEventForApiContract venue(VenueForApiContract venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public VenueForApiContract getVenue() {
    return venue;
  }

  public void setVenue(VenueForApiContract venue) {
    this.venue = venue;
  }


  public ReleaseEventForApiContract venueName(String venueName) {
    this.venueName = venueName;
    return this;
  }

  /**
   * Get venueName
   * @return venueName
   */
  @javax.annotation.Nullable
  public String getVenueName() {
    return venueName;
  }

  public void setVenueName(String venueName) {
    this.venueName = venueName;
  }


  public ReleaseEventForApiContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public ReleaseEventForApiContract webLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
    return this;
  }

  public ReleaseEventForApiContract addWebLinksItem(WebLinkForApiContract webLinksItem) {
    if (this.webLinks == null) {
      this.webLinks = new ArrayList<>();
    }
    this.webLinks.add(webLinksItem);
    return this;
  }

  /**
   * Get webLinks
   * @return webLinks
   */
  @javax.annotation.Nullable
  public List<WebLinkForApiContract> getWebLinks() {
    return webLinks;
  }

  public void setWebLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReleaseEventForApiContract releaseEventForApiContract = (ReleaseEventForApiContract) o;
    return Objects.equals(this.additionalNames, releaseEventForApiContract.additionalNames) &&
        Objects.equals(this.artists, releaseEventForApiContract.artists) &&
        Objects.equals(this.category, releaseEventForApiContract.category) &&
        Objects.equals(this.date, releaseEventForApiContract.date) &&
        Objects.equals(this.description, releaseEventForApiContract.description) &&
        Objects.equals(this.endDate, releaseEventForApiContract.endDate) &&
        Objects.equals(this.id, releaseEventForApiContract.id) &&
        Objects.equals(this.mainPicture, releaseEventForApiContract.mainPicture) &&
        Objects.equals(this.name, releaseEventForApiContract.name) &&
        Objects.equals(this.names, releaseEventForApiContract.names) &&
        Objects.equals(this.pvs, releaseEventForApiContract.pvs) &&
        Objects.equals(this.series, releaseEventForApiContract.series) &&
        Objects.equals(this.seriesId, releaseEventForApiContract.seriesId) &&
        Objects.equals(this.seriesNumber, releaseEventForApiContract.seriesNumber) &&
        Objects.equals(this.seriesSuffix, releaseEventForApiContract.seriesSuffix) &&
        Objects.equals(this.songList, releaseEventForApiContract.songList) &&
        Objects.equals(this.status, releaseEventForApiContract.status) &&
        Objects.equals(this.tags, releaseEventForApiContract.tags) &&
        Objects.equals(this.urlSlug, releaseEventForApiContract.urlSlug) &&
        Objects.equals(this.venue, releaseEventForApiContract.venue) &&
        Objects.equals(this.venueName, releaseEventForApiContract.venueName) &&
        Objects.equals(this.version, releaseEventForApiContract.version) &&
        Objects.equals(this.webLinks, releaseEventForApiContract.webLinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNames, artists, category, date, description, endDate, id, mainPicture, name, names, pvs, series, seriesId, seriesNumber, seriesSuffix, songList, status, tags, urlSlug, venue, venueName, version, webLinks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReleaseEventForApiContract {\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    pvs: ").append(toIndentedString(pvs)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    seriesId: ").append(toIndentedString(seriesId)).append("\n");
    sb.append("    seriesNumber: ").append(toIndentedString(seriesNumber)).append("\n");
    sb.append("    seriesSuffix: ").append(toIndentedString(seriesSuffix)).append("\n");
    sb.append("    songList: ").append(toIndentedString(songList)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    urlSlug: ").append(toIndentedString(urlSlug)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    venueName: ").append(toIndentedString(venueName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    webLinks: ").append(toIndentedString(webLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNames");
    openapiFields.add("artists");
    openapiFields.add("category");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("endDate");
    openapiFields.add("id");
    openapiFields.add("mainPicture");
    openapiFields.add("name");
    openapiFields.add("names");
    openapiFields.add("pvs");
    openapiFields.add("series");
    openapiFields.add("seriesId");
    openapiFields.add("seriesNumber");
    openapiFields.add("seriesSuffix");
    openapiFields.add("songList");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("urlSlug");
    openapiFields.add("venue");
    openapiFields.add("venueName");
    openapiFields.add("version");
    openapiFields.add("webLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReleaseEventForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReleaseEventForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReleaseEventForApiContract is not found in the empty JSON string", ReleaseEventForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReleaseEventForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReleaseEventForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            ArtistForEventContract.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        EventCategory.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            LocalizedStringContract.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      if (jsonObj.get("pvs") != null && !jsonObj.get("pvs").isJsonNull()) {
        JsonArray jsonArraypvs = jsonObj.getAsJsonArray("pvs");
        if (jsonArraypvs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pvs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pvs` to be an array in the JSON string but got `%s`", jsonObj.get("pvs").toString()));
          }

          // validate the optional field `pvs` (array)
          for (int i = 0; i < jsonArraypvs.size(); i++) {
            PVContract.validateJsonElement(jsonArraypvs.get(i));
          };
        }
      }
      // validate the optional field `series`
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        ReleaseEventSeriesContract.validateJsonElement(jsonObj.get("series"));
      }
      if ((jsonObj.get("seriesSuffix") != null && !jsonObj.get("seriesSuffix").isJsonNull()) && !jsonObj.get("seriesSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seriesSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seriesSuffix").toString()));
      }
      // validate the optional field `songList`
      if (jsonObj.get("songList") != null && !jsonObj.get("songList").isJsonNull()) {
        SongListBaseContract.validateJsonElement(jsonObj.get("songList"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagUsageForApiContract.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("urlSlug") != null && !jsonObj.get("urlSlug").isJsonNull()) && !jsonObj.get("urlSlug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlSlug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlSlug").toString()));
      }
      // validate the optional field `venue`
      if (jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) {
        VenueForApiContract.validateJsonElement(jsonObj.get("venue"));
      }
      if ((jsonObj.get("venueName") != null && !jsonObj.get("venueName").isJsonNull()) && !jsonObj.get("venueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `venueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("venueName").toString()));
      }
      if (jsonObj.get("webLinks") != null && !jsonObj.get("webLinks").isJsonNull()) {
        JsonArray jsonArraywebLinks = jsonObj.getAsJsonArray("webLinks");
        if (jsonArraywebLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webLinks` to be an array in the JSON string but got `%s`", jsonObj.get("webLinks").toString()));
          }

          // validate the optional field `webLinks` (array)
          for (int i = 0; i < jsonArraywebLinks.size(); i++) {
            WebLinkForApiContract.validateJsonElement(jsonArraywebLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReleaseEventForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReleaseEventForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReleaseEventForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReleaseEventForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ReleaseEventForApiContract>() {
           @Override
           public void write(JsonWriter out, ReleaseEventForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReleaseEventForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReleaseEventForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReleaseEventForApiContract
   * @throws IOException if the JSON string is invalid with respect to ReleaseEventForApiContract
   */
  public static ReleaseEventForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReleaseEventForApiContract.class);
  }

  /**
   * Convert an instance of ReleaseEventForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

