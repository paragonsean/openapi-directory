/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DiscType;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.OptionalDateTimeContract;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlbumContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlbumContract {
  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_ARTIST_STRING = "artistString";
  @SerializedName(SERIALIZED_NAME_ARTIST_STRING)
  private String artistString;

  public static final String SERIALIZED_NAME_COVER_PICTURE_MIME = "coverPictureMime";
  @SerializedName(SERIALIZED_NAME_COVER_PICTURE_MIME)
  private String coverPictureMime;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DISC_TYPE = "discType";
  @SerializedName(SERIALIZED_NAME_DISC_TYPE)
  private DiscType discType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATING_AVERAGE = "ratingAverage";
  @SerializedName(SERIALIZED_NAME_RATING_AVERAGE)
  private Double ratingAverage;

  public static final String SERIALIZED_NAME_RATING_COUNT = "ratingCount";
  @SerializedName(SERIALIZED_NAME_RATING_COUNT)
  private Integer ratingCount;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OptionalDateTimeContract releaseDate;

  public static final String SERIALIZED_NAME_RELEASE_EVENT = "releaseEvent";
  @SerializedName(SERIALIZED_NAME_RELEASE_EVENT)
  private ReleaseEventForApiContract releaseEvent;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public AlbumContract() {
  }

  public AlbumContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public AlbumContract artistString(String artistString) {
    this.artistString = artistString;
    return this;
  }

  /**
   * Get artistString
   * @return artistString
   */
  @javax.annotation.Nullable
  public String getArtistString() {
    return artistString;
  }

  public void setArtistString(String artistString) {
    this.artistString = artistString;
  }


  public AlbumContract coverPictureMime(String coverPictureMime) {
    this.coverPictureMime = coverPictureMime;
    return this;
  }

  /**
   * Get coverPictureMime
   * @return coverPictureMime
   */
  @javax.annotation.Nullable
  public String getCoverPictureMime() {
    return coverPictureMime;
  }

  public void setCoverPictureMime(String coverPictureMime) {
    this.coverPictureMime = coverPictureMime;
  }


  public AlbumContract createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public AlbumContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public AlbumContract discType(DiscType discType) {
    this.discType = discType;
    return this;
  }

  /**
   * Get discType
   * @return discType
   */
  @javax.annotation.Nullable
  public DiscType getDiscType() {
    return discType;
  }

  public void setDiscType(DiscType discType) {
    this.discType = discType;
  }


  public AlbumContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public AlbumContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AlbumContract ratingAverage(Double ratingAverage) {
    this.ratingAverage = ratingAverage;
    return this;
  }

  /**
   * Get ratingAverage
   * @return ratingAverage
   */
  @javax.annotation.Nullable
  public Double getRatingAverage() {
    return ratingAverage;
  }

  public void setRatingAverage(Double ratingAverage) {
    this.ratingAverage = ratingAverage;
  }


  public AlbumContract ratingCount(Integer ratingCount) {
    this.ratingCount = ratingCount;
    return this;
  }

  /**
   * Get ratingCount
   * @return ratingCount
   */
  @javax.annotation.Nullable
  public Integer getRatingCount() {
    return ratingCount;
  }

  public void setRatingCount(Integer ratingCount) {
    this.ratingCount = ratingCount;
  }


  public AlbumContract releaseDate(OptionalDateTimeContract releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public OptionalDateTimeContract getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(OptionalDateTimeContract releaseDate) {
    this.releaseDate = releaseDate;
  }


  public AlbumContract releaseEvent(ReleaseEventForApiContract releaseEvent) {
    this.releaseEvent = releaseEvent;
    return this;
  }

  /**
   * Get releaseEvent
   * @return releaseEvent
   */
  @javax.annotation.Nullable
  public ReleaseEventForApiContract getReleaseEvent() {
    return releaseEvent;
  }

  public void setReleaseEvent(ReleaseEventForApiContract releaseEvent) {
    this.releaseEvent = releaseEvent;
  }


  public AlbumContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public AlbumContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumContract albumContract = (AlbumContract) o;
    return Objects.equals(this.additionalNames, albumContract.additionalNames) &&
        Objects.equals(this.artistString, albumContract.artistString) &&
        Objects.equals(this.coverPictureMime, albumContract.coverPictureMime) &&
        Objects.equals(this.createDate, albumContract.createDate) &&
        Objects.equals(this.deleted, albumContract.deleted) &&
        Objects.equals(this.discType, albumContract.discType) &&
        Objects.equals(this.id, albumContract.id) &&
        Objects.equals(this.name, albumContract.name) &&
        Objects.equals(this.ratingAverage, albumContract.ratingAverage) &&
        Objects.equals(this.ratingCount, albumContract.ratingCount) &&
        Objects.equals(this.releaseDate, albumContract.releaseDate) &&
        Objects.equals(this.releaseEvent, albumContract.releaseEvent) &&
        Objects.equals(this.status, albumContract.status) &&
        Objects.equals(this.version, albumContract.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNames, artistString, coverPictureMime, createDate, deleted, discType, id, name, ratingAverage, ratingCount, releaseDate, releaseEvent, status, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumContract {\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    artistString: ").append(toIndentedString(artistString)).append("\n");
    sb.append("    coverPictureMime: ").append(toIndentedString(coverPictureMime)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    discType: ").append(toIndentedString(discType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ratingAverage: ").append(toIndentedString(ratingAverage)).append("\n");
    sb.append("    ratingCount: ").append(toIndentedString(ratingCount)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseEvent: ").append(toIndentedString(releaseEvent)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNames");
    openapiFields.add("artistString");
    openapiFields.add("coverPictureMime");
    openapiFields.add("createDate");
    openapiFields.add("deleted");
    openapiFields.add("discType");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("ratingAverage");
    openapiFields.add("ratingCount");
    openapiFields.add("releaseDate");
    openapiFields.add("releaseEvent");
    openapiFields.add("status");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlbumContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlbumContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlbumContract is not found in the empty JSON string", AlbumContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlbumContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlbumContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if ((jsonObj.get("artistString") != null && !jsonObj.get("artistString").isJsonNull()) && !jsonObj.get("artistString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistString").toString()));
      }
      if ((jsonObj.get("coverPictureMime") != null && !jsonObj.get("coverPictureMime").isJsonNull()) && !jsonObj.get("coverPictureMime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverPictureMime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverPictureMime").toString()));
      }
      // validate the optional field `discType`
      if (jsonObj.get("discType") != null && !jsonObj.get("discType").isJsonNull()) {
        DiscType.validateJsonElement(jsonObj.get("discType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `releaseDate`
      if (jsonObj.get("releaseDate") != null && !jsonObj.get("releaseDate").isJsonNull()) {
        OptionalDateTimeContract.validateJsonElement(jsonObj.get("releaseDate"));
      }
      // validate the optional field `releaseEvent`
      if (jsonObj.get("releaseEvent") != null && !jsonObj.get("releaseEvent").isJsonNull()) {
        ReleaseEventForApiContract.validateJsonElement(jsonObj.get("releaseEvent"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlbumContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlbumContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlbumContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlbumContract.class));

       return (TypeAdapter<T>) new TypeAdapter<AlbumContract>() {
           @Override
           public void write(JsonWriter out, AlbumContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlbumContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlbumContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlbumContract
   * @throws IOException if the JSON string is invalid with respect to AlbumContract
   */
  public static AlbumContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlbumContract.class);
  }

  /**
   * Convert an instance of AlbumContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

