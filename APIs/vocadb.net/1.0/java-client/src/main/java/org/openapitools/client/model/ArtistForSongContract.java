/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArtistCategories;
import org.openapitools.client.model.ArtistContract;
import org.openapitools.client.model.ArtistRoles;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArtistForSongContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArtistForSongContract {
  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private ArtistContract artist;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private ArtistCategories categories;

  public static final String SERIALIZED_NAME_EFFECTIVE_ROLES = "effectiveRoles";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_ROLES)
  private ArtistRoles effectiveRoles;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_CUSTOM_NAME = "isCustomName";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM_NAME)
  private Boolean isCustomName;

  public static final String SERIALIZED_NAME_IS_SUPPORT = "isSupport";
  @SerializedName(SERIALIZED_NAME_IS_SUPPORT)
  private Boolean isSupport;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private ArtistRoles roles;

  public ArtistForSongContract() {
  }

  public ArtistForSongContract artist(ArtistContract artist) {
    this.artist = artist;
    return this;
  }

  /**
   * Get artist
   * @return artist
   */
  @javax.annotation.Nullable
  public ArtistContract getArtist() {
    return artist;
  }

  public void setArtist(ArtistContract artist) {
    this.artist = artist;
  }


  public ArtistForSongContract categories(ArtistCategories categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public ArtistCategories getCategories() {
    return categories;
  }

  public void setCategories(ArtistCategories categories) {
    this.categories = categories;
  }


  public ArtistForSongContract effectiveRoles(ArtistRoles effectiveRoles) {
    this.effectiveRoles = effectiveRoles;
    return this;
  }

  /**
   * Get effectiveRoles
   * @return effectiveRoles
   */
  @javax.annotation.Nullable
  public ArtistRoles getEffectiveRoles() {
    return effectiveRoles;
  }

  public void setEffectiveRoles(ArtistRoles effectiveRoles) {
    this.effectiveRoles = effectiveRoles;
  }


  public ArtistForSongContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ArtistForSongContract isCustomName(Boolean isCustomName) {
    this.isCustomName = isCustomName;
    return this;
  }

  /**
   * Get isCustomName
   * @return isCustomName
   */
  @javax.annotation.Nullable
  public Boolean getIsCustomName() {
    return isCustomName;
  }

  public void setIsCustomName(Boolean isCustomName) {
    this.isCustomName = isCustomName;
  }


  public ArtistForSongContract isSupport(Boolean isSupport) {
    this.isSupport = isSupport;
    return this;
  }

  /**
   * Get isSupport
   * @return isSupport
   */
  @javax.annotation.Nullable
  public Boolean getIsSupport() {
    return isSupport;
  }

  public void setIsSupport(Boolean isSupport) {
    this.isSupport = isSupport;
  }


  public ArtistForSongContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ArtistForSongContract roles(ArtistRoles roles) {
    this.roles = roles;
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public ArtistRoles getRoles() {
    return roles;
  }

  public void setRoles(ArtistRoles roles) {
    this.roles = roles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtistForSongContract artistForSongContract = (ArtistForSongContract) o;
    return Objects.equals(this.artist, artistForSongContract.artist) &&
        Objects.equals(this.categories, artistForSongContract.categories) &&
        Objects.equals(this.effectiveRoles, artistForSongContract.effectiveRoles) &&
        Objects.equals(this.id, artistForSongContract.id) &&
        Objects.equals(this.isCustomName, artistForSongContract.isCustomName) &&
        Objects.equals(this.isSupport, artistForSongContract.isSupport) &&
        Objects.equals(this.name, artistForSongContract.name) &&
        Objects.equals(this.roles, artistForSongContract.roles);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(artist, categories, effectiveRoles, id, isCustomName, isSupport, name, roles);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtistForSongContract {\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    effectiveRoles: ").append(toIndentedString(effectiveRoles)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isCustomName: ").append(toIndentedString(isCustomName)).append("\n");
    sb.append("    isSupport: ").append(toIndentedString(isSupport)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artist");
    openapiFields.add("categories");
    openapiFields.add("effectiveRoles");
    openapiFields.add("id");
    openapiFields.add("isCustomName");
    openapiFields.add("isSupport");
    openapiFields.add("name");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtistForSongContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtistForSongContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtistForSongContract is not found in the empty JSON string", ArtistForSongContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtistForSongContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtistForSongContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `artist`
      if (jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) {
        ArtistContract.validateJsonElement(jsonObj.get("artist"));
      }
      // validate the optional field `categories`
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        ArtistCategories.validateJsonElement(jsonObj.get("categories"));
      }
      // validate the optional field `effectiveRoles`
      if (jsonObj.get("effectiveRoles") != null && !jsonObj.get("effectiveRoles").isJsonNull()) {
        ArtistRoles.validateJsonElement(jsonObj.get("effectiveRoles"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `roles`
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        ArtistRoles.validateJsonElement(jsonObj.get("roles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtistForSongContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtistForSongContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtistForSongContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtistForSongContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtistForSongContract>() {
           @Override
           public void write(JsonWriter out, ArtistForSongContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtistForSongContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtistForSongContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtistForSongContract
   * @throws IOException if the JSON string is invalid with respect to ArtistForSongContract
   */
  public static ArtistForSongContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtistForSongContract.class);
  }

  /**
   * Convert an instance of ArtistForSongContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

