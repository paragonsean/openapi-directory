/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.PVServices;
import org.openapitools.client.model.SongType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SongContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SongContract {
  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_ARTIST_STRING = "artistString";
  @SerializedName(SERIALIZED_NAME_ARTIST_STRING)
  private String artistString;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_FAVORITED_TIMES = "favoritedTimes";
  @SerializedName(SERIALIZED_NAME_FAVORITED_TIMES)
  private Integer favoritedTimes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LENGTH_SECONDS = "lengthSeconds";
  @SerializedName(SERIALIZED_NAME_LENGTH_SECONDS)
  private Integer lengthSeconds;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NICO_ID = "nicoId";
  @SerializedName(SERIALIZED_NAME_NICO_ID)
  private String nicoId;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "publishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private OffsetDateTime publishDate;

  public static final String SERIALIZED_NAME_PV_SERVICES = "pvServices";
  @SerializedName(SERIALIZED_NAME_PV_SERVICES)
  private PVServices pvServices;

  public static final String SERIALIZED_NAME_RATING_SCORE = "ratingScore";
  @SerializedName(SERIALIZED_NAME_RATING_SCORE)
  private Integer ratingScore;

  public static final String SERIALIZED_NAME_SONG_TYPE = "songType";
  @SerializedName(SERIALIZED_NAME_SONG_TYPE)
  private SongType songType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumbUrl";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public SongContract() {
  }

  public SongContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public SongContract artistString(String artistString) {
    this.artistString = artistString;
    return this;
  }

  /**
   * Get artistString
   * @return artistString
   */
  @javax.annotation.Nullable
  public String getArtistString() {
    return artistString;
  }

  public void setArtistString(String artistString) {
    this.artistString = artistString;
  }


  public SongContract createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public SongContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public SongContract favoritedTimes(Integer favoritedTimes) {
    this.favoritedTimes = favoritedTimes;
    return this;
  }

  /**
   * Get favoritedTimes
   * @return favoritedTimes
   */
  @javax.annotation.Nullable
  public Integer getFavoritedTimes() {
    return favoritedTimes;
  }

  public void setFavoritedTimes(Integer favoritedTimes) {
    this.favoritedTimes = favoritedTimes;
  }


  public SongContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SongContract lengthSeconds(Integer lengthSeconds) {
    this.lengthSeconds = lengthSeconds;
    return this;
  }

  /**
   * Get lengthSeconds
   * @return lengthSeconds
   */
  @javax.annotation.Nullable
  public Integer getLengthSeconds() {
    return lengthSeconds;
  }

  public void setLengthSeconds(Integer lengthSeconds) {
    this.lengthSeconds = lengthSeconds;
  }


  public SongContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SongContract nicoId(String nicoId) {
    this.nicoId = nicoId;
    return this;
  }

  /**
   * Get nicoId
   * @return nicoId
   */
  @javax.annotation.Nullable
  public String getNicoId() {
    return nicoId;
  }

  public void setNicoId(String nicoId) {
    this.nicoId = nicoId;
  }


  public SongContract publishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * Get publishDate
   * @return publishDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
  }


  public SongContract pvServices(PVServices pvServices) {
    this.pvServices = pvServices;
    return this;
  }

  /**
   * Get pvServices
   * @return pvServices
   */
  @javax.annotation.Nullable
  public PVServices getPvServices() {
    return pvServices;
  }

  public void setPvServices(PVServices pvServices) {
    this.pvServices = pvServices;
  }


  public SongContract ratingScore(Integer ratingScore) {
    this.ratingScore = ratingScore;
    return this;
  }

  /**
   * Get ratingScore
   * @return ratingScore
   */
  @javax.annotation.Nullable
  public Integer getRatingScore() {
    return ratingScore;
  }

  public void setRatingScore(Integer ratingScore) {
    this.ratingScore = ratingScore;
  }


  public SongContract songType(SongType songType) {
    this.songType = songType;
    return this;
  }

  /**
   * Get songType
   * @return songType
   */
  @javax.annotation.Nullable
  public SongType getSongType() {
    return songType;
  }

  public void setSongType(SongType songType) {
    this.songType = songType;
  }


  public SongContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public SongContract thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * Get thumbUrl
   * @return thumbUrl
   */
  @javax.annotation.Nullable
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public SongContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SongContract songContract = (SongContract) o;
    return Objects.equals(this.additionalNames, songContract.additionalNames) &&
        Objects.equals(this.artistString, songContract.artistString) &&
        Objects.equals(this.createDate, songContract.createDate) &&
        Objects.equals(this.deleted, songContract.deleted) &&
        Objects.equals(this.favoritedTimes, songContract.favoritedTimes) &&
        Objects.equals(this.id, songContract.id) &&
        Objects.equals(this.lengthSeconds, songContract.lengthSeconds) &&
        Objects.equals(this.name, songContract.name) &&
        Objects.equals(this.nicoId, songContract.nicoId) &&
        Objects.equals(this.publishDate, songContract.publishDate) &&
        Objects.equals(this.pvServices, songContract.pvServices) &&
        Objects.equals(this.ratingScore, songContract.ratingScore) &&
        Objects.equals(this.songType, songContract.songType) &&
        Objects.equals(this.status, songContract.status) &&
        Objects.equals(this.thumbUrl, songContract.thumbUrl) &&
        Objects.equals(this.version, songContract.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNames, artistString, createDate, deleted, favoritedTimes, id, lengthSeconds, name, nicoId, publishDate, pvServices, ratingScore, songType, status, thumbUrl, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SongContract {\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    artistString: ").append(toIndentedString(artistString)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    favoritedTimes: ").append(toIndentedString(favoritedTimes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lengthSeconds: ").append(toIndentedString(lengthSeconds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nicoId: ").append(toIndentedString(nicoId)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("    pvServices: ").append(toIndentedString(pvServices)).append("\n");
    sb.append("    ratingScore: ").append(toIndentedString(ratingScore)).append("\n");
    sb.append("    songType: ").append(toIndentedString(songType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNames");
    openapiFields.add("artistString");
    openapiFields.add("createDate");
    openapiFields.add("deleted");
    openapiFields.add("favoritedTimes");
    openapiFields.add("id");
    openapiFields.add("lengthSeconds");
    openapiFields.add("name");
    openapiFields.add("nicoId");
    openapiFields.add("publishDate");
    openapiFields.add("pvServices");
    openapiFields.add("ratingScore");
    openapiFields.add("songType");
    openapiFields.add("status");
    openapiFields.add("thumbUrl");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SongContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SongContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SongContract is not found in the empty JSON string", SongContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SongContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SongContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if ((jsonObj.get("artistString") != null && !jsonObj.get("artistString").isJsonNull()) && !jsonObj.get("artistString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistString").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nicoId") != null && !jsonObj.get("nicoId").isJsonNull()) && !jsonObj.get("nicoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nicoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nicoId").toString()));
      }
      // validate the optional field `pvServices`
      if (jsonObj.get("pvServices") != null && !jsonObj.get("pvServices").isJsonNull()) {
        PVServices.validateJsonElement(jsonObj.get("pvServices"));
      }
      // validate the optional field `songType`
      if (jsonObj.get("songType") != null && !jsonObj.get("songType").isJsonNull()) {
        SongType.validateJsonElement(jsonObj.get("songType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("thumbUrl") != null && !jsonObj.get("thumbUrl").isJsonNull()) && !jsonObj.get("thumbUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SongContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SongContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SongContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SongContract.class));

       return (TypeAdapter<T>) new TypeAdapter<SongContract>() {
           @Override
           public void write(JsonWriter out, SongContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SongContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SongContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SongContract
   * @throws IOException if the JSON string is invalid with respect to SongContract
   */
  public static SongContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SongContract.class);
  }

  /**
   * Convert an instance of SongContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

