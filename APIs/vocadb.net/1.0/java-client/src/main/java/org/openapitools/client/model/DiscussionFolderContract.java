/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DiscussionFolderContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscussionFolderContract {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_TOPIC_AUTHOR = "lastTopicAuthor";
  @SerializedName(SERIALIZED_NAME_LAST_TOPIC_AUTHOR)
  private UserForApiContract lastTopicAuthor;

  public static final String SERIALIZED_NAME_LAST_TOPIC_DATE = "lastTopicDate";
  @SerializedName(SERIALIZED_NAME_LAST_TOPIC_DATE)
  private OffsetDateTime lastTopicDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TOPIC_COUNT = "topicCount";
  @SerializedName(SERIALIZED_NAME_TOPIC_COUNT)
  private Integer topicCount;

  public DiscussionFolderContract() {
  }

  public DiscussionFolderContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DiscussionFolderContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DiscussionFolderContract lastTopicAuthor(UserForApiContract lastTopicAuthor) {
    this.lastTopicAuthor = lastTopicAuthor;
    return this;
  }

  /**
   * Get lastTopicAuthor
   * @return lastTopicAuthor
   */
  @javax.annotation.Nullable
  public UserForApiContract getLastTopicAuthor() {
    return lastTopicAuthor;
  }

  public void setLastTopicAuthor(UserForApiContract lastTopicAuthor) {
    this.lastTopicAuthor = lastTopicAuthor;
  }


  public DiscussionFolderContract lastTopicDate(OffsetDateTime lastTopicDate) {
    this.lastTopicDate = lastTopicDate;
    return this;
  }

  /**
   * Get lastTopicDate
   * @return lastTopicDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastTopicDate() {
    return lastTopicDate;
  }

  public void setLastTopicDate(OffsetDateTime lastTopicDate) {
    this.lastTopicDate = lastTopicDate;
  }


  public DiscussionFolderContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DiscussionFolderContract topicCount(Integer topicCount) {
    this.topicCount = topicCount;
    return this;
  }

  /**
   * Get topicCount
   * @return topicCount
   */
  @javax.annotation.Nullable
  public Integer getTopicCount() {
    return topicCount;
  }

  public void setTopicCount(Integer topicCount) {
    this.topicCount = topicCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscussionFolderContract discussionFolderContract = (DiscussionFolderContract) o;
    return Objects.equals(this.description, discussionFolderContract.description) &&
        Objects.equals(this.id, discussionFolderContract.id) &&
        Objects.equals(this.lastTopicAuthor, discussionFolderContract.lastTopicAuthor) &&
        Objects.equals(this.lastTopicDate, discussionFolderContract.lastTopicDate) &&
        Objects.equals(this.name, discussionFolderContract.name) &&
        Objects.equals(this.topicCount, discussionFolderContract.topicCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, lastTopicAuthor, lastTopicDate, name, topicCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscussionFolderContract {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastTopicAuthor: ").append(toIndentedString(lastTopicAuthor)).append("\n");
    sb.append("    lastTopicDate: ").append(toIndentedString(lastTopicDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    topicCount: ").append(toIndentedString(topicCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("lastTopicAuthor");
    openapiFields.add("lastTopicDate");
    openapiFields.add("name");
    openapiFields.add("topicCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscussionFolderContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscussionFolderContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscussionFolderContract is not found in the empty JSON string", DiscussionFolderContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscussionFolderContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscussionFolderContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `lastTopicAuthor`
      if (jsonObj.get("lastTopicAuthor") != null && !jsonObj.get("lastTopicAuthor").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("lastTopicAuthor"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscussionFolderContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscussionFolderContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscussionFolderContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscussionFolderContract.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscussionFolderContract>() {
           @Override
           public void write(JsonWriter out, DiscussionFolderContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscussionFolderContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscussionFolderContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscussionFolderContract
   * @throws IOException if the JSON string is invalid with respect to DiscussionFolderContract
   */
  public static DiscussionFolderContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscussionFolderContract.class);
  }

  /**
   * Convert an instance of DiscussionFolderContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

