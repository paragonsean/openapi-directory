/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlbumDiscPropertiesContract;
import org.openapitools.client.model.AlbumIdentifierContract;
import org.openapitools.client.model.ArtistForAlbumForApiContract;
import org.openapitools.client.model.ContentLanguageSelection;
import org.openapitools.client.model.DiscType;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.LocalizedStringContract;
import org.openapitools.client.model.OptionalDateTimeContract;
import org.openapitools.client.model.PVContract;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.client.model.SongInAlbumForApiContract;
import org.openapitools.client.model.TagUsageForApiContract;
import org.openapitools.client.model.WebLinkForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlbumForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlbumForApiContract {
  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_ARTIST_STRING = "artistString";
  @SerializedName(SERIALIZED_NAME_ARTIST_STRING)
  private String artistString;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<ArtistForAlbumForApiContract> artists;

  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private String barcode;

  public static final String SERIALIZED_NAME_CATALOG_NUMBER = "catalogNumber";
  @SerializedName(SERIALIZED_NAME_CATALOG_NUMBER)
  private String catalogNumber;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DEFAULT_NAME = "defaultName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME)
  private String defaultName;

  public static final String SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE = "defaultNameLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE)
  private ContentLanguageSelection defaultNameLanguage;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISC_TYPE = "discType";
  @SerializedName(SERIALIZED_NAME_DISC_TYPE)
  private DiscType discType;

  public static final String SERIALIZED_NAME_DISCS = "discs";
  @SerializedName(SERIALIZED_NAME_DISCS)
  private List<AlbumDiscPropertiesContract> discs;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<AlbumIdentifierContract> identifiers;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_MERGED_TO = "mergedTo";
  @SerializedName(SERIALIZED_NAME_MERGED_TO)
  private Integer mergedTo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<LocalizedStringContract> names;

  public static final String SERIALIZED_NAME_PVS = "pvs";
  @SerializedName(SERIALIZED_NAME_PVS)
  private List<PVContract> pvs;

  public static final String SERIALIZED_NAME_RATING_AVERAGE = "ratingAverage";
  @SerializedName(SERIALIZED_NAME_RATING_AVERAGE)
  private Double ratingAverage;

  public static final String SERIALIZED_NAME_RATING_COUNT = "ratingCount";
  @SerializedName(SERIALIZED_NAME_RATING_COUNT)
  private Integer ratingCount;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OptionalDateTimeContract releaseDate;

  public static final String SERIALIZED_NAME_RELEASE_EVENT = "releaseEvent";
  @SerializedName(SERIALIZED_NAME_RELEASE_EVENT)
  private ReleaseEventForApiContract releaseEvent;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagUsageForApiContract> tags;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<SongInAlbumForApiContract> tracks;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_WEB_LINKS = "webLinks";
  @SerializedName(SERIALIZED_NAME_WEB_LINKS)
  private List<WebLinkForApiContract> webLinks;

  public AlbumForApiContract() {
  }

  public AlbumForApiContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public AlbumForApiContract artistString(String artistString) {
    this.artistString = artistString;
    return this;
  }

  /**
   * Get artistString
   * @return artistString
   */
  @javax.annotation.Nullable
  public String getArtistString() {
    return artistString;
  }

  public void setArtistString(String artistString) {
    this.artistString = artistString;
  }


  public AlbumForApiContract artists(List<ArtistForAlbumForApiContract> artists) {
    this.artists = artists;
    return this;
  }

  public AlbumForApiContract addArtistsItem(ArtistForAlbumForApiContract artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<ArtistForAlbumForApiContract> getArtists() {
    return artists;
  }

  public void setArtists(List<ArtistForAlbumForApiContract> artists) {
    this.artists = artists;
  }


  public AlbumForApiContract barcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

  /**
   * Get barcode
   * @return barcode
   */
  @javax.annotation.Nullable
  public String getBarcode() {
    return barcode;
  }

  public void setBarcode(String barcode) {
    this.barcode = barcode;
  }


  public AlbumForApiContract catalogNumber(String catalogNumber) {
    this.catalogNumber = catalogNumber;
    return this;
  }

  /**
   * Get catalogNumber
   * @return catalogNumber
   */
  @javax.annotation.Nullable
  public String getCatalogNumber() {
    return catalogNumber;
  }

  public void setCatalogNumber(String catalogNumber) {
    this.catalogNumber = catalogNumber;
  }


  public AlbumForApiContract createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public AlbumForApiContract defaultName(String defaultName) {
    this.defaultName = defaultName;
    return this;
  }

  /**
   * Get defaultName
   * @return defaultName
   */
  @javax.annotation.Nullable
  public String getDefaultName() {
    return defaultName;
  }

  public void setDefaultName(String defaultName) {
    this.defaultName = defaultName;
  }


  public AlbumForApiContract defaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
    return this;
  }

  /**
   * Get defaultNameLanguage
   * @return defaultNameLanguage
   */
  @javax.annotation.Nullable
  public ContentLanguageSelection getDefaultNameLanguage() {
    return defaultNameLanguage;
  }

  public void setDefaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
  }


  public AlbumForApiContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public AlbumForApiContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AlbumForApiContract discType(DiscType discType) {
    this.discType = discType;
    return this;
  }

  /**
   * Get discType
   * @return discType
   */
  @javax.annotation.Nullable
  public DiscType getDiscType() {
    return discType;
  }

  public void setDiscType(DiscType discType) {
    this.discType = discType;
  }


  public AlbumForApiContract discs(List<AlbumDiscPropertiesContract> discs) {
    this.discs = discs;
    return this;
  }

  public AlbumForApiContract addDiscsItem(AlbumDiscPropertiesContract discsItem) {
    if (this.discs == null) {
      this.discs = new ArrayList<>();
    }
    this.discs.add(discsItem);
    return this;
  }

  /**
   * Get discs
   * @return discs
   */
  @javax.annotation.Nullable
  public List<AlbumDiscPropertiesContract> getDiscs() {
    return discs;
  }

  public void setDiscs(List<AlbumDiscPropertiesContract> discs) {
    this.discs = discs;
  }


  public AlbumForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public AlbumForApiContract identifiers(List<AlbumIdentifierContract> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public AlbumForApiContract addIdentifiersItem(AlbumIdentifierContract identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @javax.annotation.Nullable
  public List<AlbumIdentifierContract> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(List<AlbumIdentifierContract> identifiers) {
    this.identifiers = identifiers;
  }


  public AlbumForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public AlbumForApiContract mergedTo(Integer mergedTo) {
    this.mergedTo = mergedTo;
    return this;
  }

  /**
   * Get mergedTo
   * @return mergedTo
   */
  @javax.annotation.Nullable
  public Integer getMergedTo() {
    return mergedTo;
  }

  public void setMergedTo(Integer mergedTo) {
    this.mergedTo = mergedTo;
  }


  public AlbumForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AlbumForApiContract names(List<LocalizedStringContract> names) {
    this.names = names;
    return this;
  }

  public AlbumForApiContract addNamesItem(LocalizedStringContract namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List<LocalizedStringContract> getNames() {
    return names;
  }

  public void setNames(List<LocalizedStringContract> names) {
    this.names = names;
  }


  public AlbumForApiContract pvs(List<PVContract> pvs) {
    this.pvs = pvs;
    return this;
  }

  public AlbumForApiContract addPvsItem(PVContract pvsItem) {
    if (this.pvs == null) {
      this.pvs = new ArrayList<>();
    }
    this.pvs.add(pvsItem);
    return this;
  }

  /**
   * Get pvs
   * @return pvs
   */
  @javax.annotation.Nullable
  public List<PVContract> getPvs() {
    return pvs;
  }

  public void setPvs(List<PVContract> pvs) {
    this.pvs = pvs;
  }


  public AlbumForApiContract ratingAverage(Double ratingAverage) {
    this.ratingAverage = ratingAverage;
    return this;
  }

  /**
   * Get ratingAverage
   * @return ratingAverage
   */
  @javax.annotation.Nullable
  public Double getRatingAverage() {
    return ratingAverage;
  }

  public void setRatingAverage(Double ratingAverage) {
    this.ratingAverage = ratingAverage;
  }


  public AlbumForApiContract ratingCount(Integer ratingCount) {
    this.ratingCount = ratingCount;
    return this;
  }

  /**
   * Get ratingCount
   * @return ratingCount
   */
  @javax.annotation.Nullable
  public Integer getRatingCount() {
    return ratingCount;
  }

  public void setRatingCount(Integer ratingCount) {
    this.ratingCount = ratingCount;
  }


  public AlbumForApiContract releaseDate(OptionalDateTimeContract releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public OptionalDateTimeContract getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(OptionalDateTimeContract releaseDate) {
    this.releaseDate = releaseDate;
  }


  public AlbumForApiContract releaseEvent(ReleaseEventForApiContract releaseEvent) {
    this.releaseEvent = releaseEvent;
    return this;
  }

  /**
   * Get releaseEvent
   * @return releaseEvent
   */
  @javax.annotation.Nullable
  public ReleaseEventForApiContract getReleaseEvent() {
    return releaseEvent;
  }

  public void setReleaseEvent(ReleaseEventForApiContract releaseEvent) {
    this.releaseEvent = releaseEvent;
  }


  public AlbumForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public AlbumForApiContract tags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
    return this;
  }

  public AlbumForApiContract addTagsItem(TagUsageForApiContract tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagUsageForApiContract> getTags() {
    return tags;
  }

  public void setTags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
  }


  public AlbumForApiContract tracks(List<SongInAlbumForApiContract> tracks) {
    this.tracks = tracks;
    return this;
  }

  public AlbumForApiContract addTracksItem(SongInAlbumForApiContract tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * Get tracks
   * @return tracks
   */
  @javax.annotation.Nullable
  public List<SongInAlbumForApiContract> getTracks() {
    return tracks;
  }

  public void setTracks(List<SongInAlbumForApiContract> tracks) {
    this.tracks = tracks;
  }


  public AlbumForApiContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public AlbumForApiContract webLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
    return this;
  }

  public AlbumForApiContract addWebLinksItem(WebLinkForApiContract webLinksItem) {
    if (this.webLinks == null) {
      this.webLinks = new ArrayList<>();
    }
    this.webLinks.add(webLinksItem);
    return this;
  }

  /**
   * Get webLinks
   * @return webLinks
   */
  @javax.annotation.Nullable
  public List<WebLinkForApiContract> getWebLinks() {
    return webLinks;
  }

  public void setWebLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumForApiContract albumForApiContract = (AlbumForApiContract) o;
    return Objects.equals(this.additionalNames, albumForApiContract.additionalNames) &&
        Objects.equals(this.artistString, albumForApiContract.artistString) &&
        Objects.equals(this.artists, albumForApiContract.artists) &&
        Objects.equals(this.barcode, albumForApiContract.barcode) &&
        Objects.equals(this.catalogNumber, albumForApiContract.catalogNumber) &&
        Objects.equals(this.createDate, albumForApiContract.createDate) &&
        Objects.equals(this.defaultName, albumForApiContract.defaultName) &&
        Objects.equals(this.defaultNameLanguage, albumForApiContract.defaultNameLanguage) &&
        Objects.equals(this.deleted, albumForApiContract.deleted) &&
        Objects.equals(this.description, albumForApiContract.description) &&
        Objects.equals(this.discType, albumForApiContract.discType) &&
        Objects.equals(this.discs, albumForApiContract.discs) &&
        Objects.equals(this.id, albumForApiContract.id) &&
        Objects.equals(this.identifiers, albumForApiContract.identifiers) &&
        Objects.equals(this.mainPicture, albumForApiContract.mainPicture) &&
        Objects.equals(this.mergedTo, albumForApiContract.mergedTo) &&
        Objects.equals(this.name, albumForApiContract.name) &&
        Objects.equals(this.names, albumForApiContract.names) &&
        Objects.equals(this.pvs, albumForApiContract.pvs) &&
        Objects.equals(this.ratingAverage, albumForApiContract.ratingAverage) &&
        Objects.equals(this.ratingCount, albumForApiContract.ratingCount) &&
        Objects.equals(this.releaseDate, albumForApiContract.releaseDate) &&
        Objects.equals(this.releaseEvent, albumForApiContract.releaseEvent) &&
        Objects.equals(this.status, albumForApiContract.status) &&
        Objects.equals(this.tags, albumForApiContract.tags) &&
        Objects.equals(this.tracks, albumForApiContract.tracks) &&
        Objects.equals(this.version, albumForApiContract.version) &&
        Objects.equals(this.webLinks, albumForApiContract.webLinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNames, artistString, artists, barcode, catalogNumber, createDate, defaultName, defaultNameLanguage, deleted, description, discType, discs, id, identifiers, mainPicture, mergedTo, name, names, pvs, ratingAverage, ratingCount, releaseDate, releaseEvent, status, tags, tracks, version, webLinks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumForApiContract {\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    artistString: ").append(toIndentedString(artistString)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    catalogNumber: ").append(toIndentedString(catalogNumber)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    defaultName: ").append(toIndentedString(defaultName)).append("\n");
    sb.append("    defaultNameLanguage: ").append(toIndentedString(defaultNameLanguage)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discType: ").append(toIndentedString(discType)).append("\n");
    sb.append("    discs: ").append(toIndentedString(discs)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    mergedTo: ").append(toIndentedString(mergedTo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    pvs: ").append(toIndentedString(pvs)).append("\n");
    sb.append("    ratingAverage: ").append(toIndentedString(ratingAverage)).append("\n");
    sb.append("    ratingCount: ").append(toIndentedString(ratingCount)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseEvent: ").append(toIndentedString(releaseEvent)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    webLinks: ").append(toIndentedString(webLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNames");
    openapiFields.add("artistString");
    openapiFields.add("artists");
    openapiFields.add("barcode");
    openapiFields.add("catalogNumber");
    openapiFields.add("createDate");
    openapiFields.add("defaultName");
    openapiFields.add("defaultNameLanguage");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("discType");
    openapiFields.add("discs");
    openapiFields.add("id");
    openapiFields.add("identifiers");
    openapiFields.add("mainPicture");
    openapiFields.add("mergedTo");
    openapiFields.add("name");
    openapiFields.add("names");
    openapiFields.add("pvs");
    openapiFields.add("ratingAverage");
    openapiFields.add("ratingCount");
    openapiFields.add("releaseDate");
    openapiFields.add("releaseEvent");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("tracks");
    openapiFields.add("version");
    openapiFields.add("webLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlbumForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlbumForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlbumForApiContract is not found in the empty JSON string", AlbumForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlbumForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlbumForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if ((jsonObj.get("artistString") != null && !jsonObj.get("artistString").isJsonNull()) && !jsonObj.get("artistString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistString").toString()));
      }
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            ArtistForAlbumForApiContract.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
      if ((jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull()) && !jsonObj.get("barcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barcode").toString()));
      }
      if ((jsonObj.get("catalogNumber") != null && !jsonObj.get("catalogNumber").isJsonNull()) && !jsonObj.get("catalogNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogNumber").toString()));
      }
      if ((jsonObj.get("defaultName") != null && !jsonObj.get("defaultName").isJsonNull()) && !jsonObj.get("defaultName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultName").toString()));
      }
      // validate the optional field `defaultNameLanguage`
      if (jsonObj.get("defaultNameLanguage") != null && !jsonObj.get("defaultNameLanguage").isJsonNull()) {
        ContentLanguageSelection.validateJsonElement(jsonObj.get("defaultNameLanguage"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `discType`
      if (jsonObj.get("discType") != null && !jsonObj.get("discType").isJsonNull()) {
        DiscType.validateJsonElement(jsonObj.get("discType"));
      }
      if (jsonObj.get("discs") != null && !jsonObj.get("discs").isJsonNull()) {
        JsonArray jsonArraydiscs = jsonObj.getAsJsonArray("discs");
        if (jsonArraydiscs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discs` to be an array in the JSON string but got `%s`", jsonObj.get("discs").toString()));
          }

          // validate the optional field `discs` (array)
          for (int i = 0; i < jsonArraydiscs.size(); i++) {
            AlbumDiscPropertiesContract.validateJsonElement(jsonArraydiscs.get(i));
          };
        }
      }
      if (jsonObj.get("identifiers") != null && !jsonObj.get("identifiers").isJsonNull()) {
        JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("identifiers");
        if (jsonArrayidentifiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("identifiers").toString()));
          }

          // validate the optional field `identifiers` (array)
          for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
            AlbumIdentifierContract.validateJsonElement(jsonArrayidentifiers.get(i));
          };
        }
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            LocalizedStringContract.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      if (jsonObj.get("pvs") != null && !jsonObj.get("pvs").isJsonNull()) {
        JsonArray jsonArraypvs = jsonObj.getAsJsonArray("pvs");
        if (jsonArraypvs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pvs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pvs` to be an array in the JSON string but got `%s`", jsonObj.get("pvs").toString()));
          }

          // validate the optional field `pvs` (array)
          for (int i = 0; i < jsonArraypvs.size(); i++) {
            PVContract.validateJsonElement(jsonArraypvs.get(i));
          };
        }
      }
      // validate the optional field `releaseDate`
      if (jsonObj.get("releaseDate") != null && !jsonObj.get("releaseDate").isJsonNull()) {
        OptionalDateTimeContract.validateJsonElement(jsonObj.get("releaseDate"));
      }
      // validate the optional field `releaseEvent`
      if (jsonObj.get("releaseEvent") != null && !jsonObj.get("releaseEvent").isJsonNull()) {
        ReleaseEventForApiContract.validateJsonElement(jsonObj.get("releaseEvent"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagUsageForApiContract.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            SongInAlbumForApiContract.validateJsonElement(jsonArraytracks.get(i));
          };
        }
      }
      if (jsonObj.get("webLinks") != null && !jsonObj.get("webLinks").isJsonNull()) {
        JsonArray jsonArraywebLinks = jsonObj.getAsJsonArray("webLinks");
        if (jsonArraywebLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webLinks` to be an array in the JSON string but got `%s`", jsonObj.get("webLinks").toString()));
          }

          // validate the optional field `webLinks` (array)
          for (int i = 0; i < jsonArraywebLinks.size(); i++) {
            WebLinkForApiContract.validateJsonElement(jsonArraywebLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlbumForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlbumForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlbumForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlbumForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<AlbumForApiContract>() {
           @Override
           public void write(JsonWriter out, AlbumForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlbumForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlbumForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlbumForApiContract
   * @throws IOException if the JSON string is invalid with respect to AlbumForApiContract
   */
  public static AlbumForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlbumForApiContract.class);
  }

  /**
   * Convert an instance of AlbumForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

