/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.OldUsernameContract;
import org.openapitools.client.model.UserGroupId;
import org.openapitools.client.model.UserKnownLanguageContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserForApiContract {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private UserGroupId groupId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_KNOWN_LANGUAGES = "knownLanguages";
  @SerializedName(SERIALIZED_NAME_KNOWN_LANGUAGES)
  private List<UserKnownLanguageContract> knownLanguages;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_MEMBER_SINCE = "memberSince";
  @SerializedName(SERIALIZED_NAME_MEMBER_SINCE)
  private OffsetDateTime memberSince;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OLD_USERNAMES = "oldUsernames";
  @SerializedName(SERIALIZED_NAME_OLD_USERNAMES)
  private List<OldUsernameContract> oldUsernames;

  public static final String SERIALIZED_NAME_VERIFIED_ARTIST = "verifiedArtist";
  @SerializedName(SERIALIZED_NAME_VERIFIED_ARTIST)
  private Boolean verifiedArtist;

  public UserForApiContract() {
  }

  public UserForApiContract active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public UserForApiContract groupId(UserGroupId groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nullable
  public UserGroupId getGroupId() {
    return groupId;
  }

  public void setGroupId(UserGroupId groupId) {
    this.groupId = groupId;
  }


  public UserForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UserForApiContract knownLanguages(List<UserKnownLanguageContract> knownLanguages) {
    this.knownLanguages = knownLanguages;
    return this;
  }

  public UserForApiContract addKnownLanguagesItem(UserKnownLanguageContract knownLanguagesItem) {
    if (this.knownLanguages == null) {
      this.knownLanguages = new ArrayList<>();
    }
    this.knownLanguages.add(knownLanguagesItem);
    return this;
  }

  /**
   * Get knownLanguages
   * @return knownLanguages
   */
  @javax.annotation.Nullable
  public List<UserKnownLanguageContract> getKnownLanguages() {
    return knownLanguages;
  }

  public void setKnownLanguages(List<UserKnownLanguageContract> knownLanguages) {
    this.knownLanguages = knownLanguages;
  }


  public UserForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public UserForApiContract memberSince(OffsetDateTime memberSince) {
    this.memberSince = memberSince;
    return this;
  }

  /**
   * Get memberSince
   * @return memberSince
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMemberSince() {
    return memberSince;
  }

  public void setMemberSince(OffsetDateTime memberSince) {
    this.memberSince = memberSince;
  }


  public UserForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserForApiContract oldUsernames(List<OldUsernameContract> oldUsernames) {
    this.oldUsernames = oldUsernames;
    return this;
  }

  public UserForApiContract addOldUsernamesItem(OldUsernameContract oldUsernamesItem) {
    if (this.oldUsernames == null) {
      this.oldUsernames = new ArrayList<>();
    }
    this.oldUsernames.add(oldUsernamesItem);
    return this;
  }

  /**
   * Get oldUsernames
   * @return oldUsernames
   */
  @javax.annotation.Nullable
  public List<OldUsernameContract> getOldUsernames() {
    return oldUsernames;
  }

  public void setOldUsernames(List<OldUsernameContract> oldUsernames) {
    this.oldUsernames = oldUsernames;
  }


  public UserForApiContract verifiedArtist(Boolean verifiedArtist) {
    this.verifiedArtist = verifiedArtist;
    return this;
  }

  /**
   * Get verifiedArtist
   * @return verifiedArtist
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedArtist() {
    return verifiedArtist;
  }

  public void setVerifiedArtist(Boolean verifiedArtist) {
    this.verifiedArtist = verifiedArtist;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserForApiContract userForApiContract = (UserForApiContract) o;
    return Objects.equals(this.active, userForApiContract.active) &&
        Objects.equals(this.groupId, userForApiContract.groupId) &&
        Objects.equals(this.id, userForApiContract.id) &&
        Objects.equals(this.knownLanguages, userForApiContract.knownLanguages) &&
        Objects.equals(this.mainPicture, userForApiContract.mainPicture) &&
        Objects.equals(this.memberSince, userForApiContract.memberSince) &&
        Objects.equals(this.name, userForApiContract.name) &&
        Objects.equals(this.oldUsernames, userForApiContract.oldUsernames) &&
        Objects.equals(this.verifiedArtist, userForApiContract.verifiedArtist);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, groupId, id, knownLanguages, mainPicture, memberSince, name, oldUsernames, verifiedArtist);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserForApiContract {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    knownLanguages: ").append(toIndentedString(knownLanguages)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    memberSince: ").append(toIndentedString(memberSince)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oldUsernames: ").append(toIndentedString(oldUsernames)).append("\n");
    sb.append("    verifiedArtist: ").append(toIndentedString(verifiedArtist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("groupId");
    openapiFields.add("id");
    openapiFields.add("knownLanguages");
    openapiFields.add("mainPicture");
    openapiFields.add("memberSince");
    openapiFields.add("name");
    openapiFields.add("oldUsernames");
    openapiFields.add("verifiedArtist");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserForApiContract is not found in the empty JSON string", UserForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `groupId`
      if (jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) {
        UserGroupId.validateJsonElement(jsonObj.get("groupId"));
      }
      if (jsonObj.get("knownLanguages") != null && !jsonObj.get("knownLanguages").isJsonNull()) {
        JsonArray jsonArrayknownLanguages = jsonObj.getAsJsonArray("knownLanguages");
        if (jsonArrayknownLanguages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("knownLanguages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `knownLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("knownLanguages").toString()));
          }

          // validate the optional field `knownLanguages` (array)
          for (int i = 0; i < jsonArrayknownLanguages.size(); i++) {
            UserKnownLanguageContract.validateJsonElement(jsonArrayknownLanguages.get(i));
          };
        }
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("oldUsernames") != null && !jsonObj.get("oldUsernames").isJsonNull()) {
        JsonArray jsonArrayoldUsernames = jsonObj.getAsJsonArray("oldUsernames");
        if (jsonArrayoldUsernames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oldUsernames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oldUsernames` to be an array in the JSON string but got `%s`", jsonObj.get("oldUsernames").toString()));
          }

          // validate the optional field `oldUsernames` (array)
          for (int i = 0; i < jsonArrayoldUsernames.size(); i++) {
            OldUsernameContract.validateJsonElement(jsonArrayoldUsernames.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<UserForApiContract>() {
           @Override
           public void write(JsonWriter out, UserForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserForApiContract
   * @throws IOException if the JSON string is invalid with respect to UserForApiContract
   */
  public static UserForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserForApiContract.class);
  }

  /**
   * Convert an instance of UserForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

