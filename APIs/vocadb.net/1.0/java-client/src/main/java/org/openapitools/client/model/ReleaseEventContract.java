/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.ReleaseEventSeriesContract;
import org.openapitools.client.model.SongListBaseContract;
import org.openapitools.client.model.VenueContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReleaseEventContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReleaseEventContract {
  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private EventCategory category;

  public static final String SERIALIZED_NAME_CUSTOM_NAME = "customName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NAME)
  private Boolean customName;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_HAS_VENUE_OR_VENUE_NAME = "hasVenueOrVenueName";
  @SerializedName(SERIALIZED_NAME_HAS_VENUE_OR_VENUE_NAME)
  private Boolean hasVenueOrVenueName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INHERITED_CATEGORY = "inheritedCategory";
  @SerializedName(SERIALIZED_NAME_INHERITED_CATEGORY)
  private EventCategory inheritedCategory;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURE_MIME = "pictureMime";
  @SerializedName(SERIALIZED_NAME_PICTURE_MIME)
  private String pictureMime;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private ReleaseEventSeriesContract series;

  public static final String SERIALIZED_NAME_SONG_LIST = "songList";
  @SerializedName(SERIALIZED_NAME_SONG_LIST)
  private SongListBaseContract songList;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_URL_SLUG = "urlSlug";
  @SerializedName(SERIALIZED_NAME_URL_SLUG)
  private String urlSlug;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private VenueContract venue;

  public static final String SERIALIZED_NAME_VENUE_NAME = "venueName";
  @SerializedName(SERIALIZED_NAME_VENUE_NAME)
  private String venueName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ReleaseEventContract() {
  }

  public ReleaseEventContract(
     Boolean hasVenueOrVenueName
  ) {
    this();
    this.hasVenueOrVenueName = hasVenueOrVenueName;
  }

  public ReleaseEventContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public ReleaseEventContract category(EventCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public EventCategory getCategory() {
    return category;
  }

  public void setCategory(EventCategory category) {
    this.category = category;
  }


  public ReleaseEventContract customName(Boolean customName) {
    this.customName = customName;
    return this;
  }

  /**
   * Get customName
   * @return customName
   */
  @javax.annotation.Nullable
  public Boolean getCustomName() {
    return customName;
  }

  public void setCustomName(Boolean customName) {
    this.customName = customName;
  }


  public ReleaseEventContract date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public ReleaseEventContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public ReleaseEventContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReleaseEventContract endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  /**
   * Get hasVenueOrVenueName
   * @return hasVenueOrVenueName
   */
  @javax.annotation.Nullable
  public Boolean getHasVenueOrVenueName() {
    return hasVenueOrVenueName;
  }



  public ReleaseEventContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ReleaseEventContract inheritedCategory(EventCategory inheritedCategory) {
    this.inheritedCategory = inheritedCategory;
    return this;
  }

  /**
   * Get inheritedCategory
   * @return inheritedCategory
   */
  @javax.annotation.Nullable
  public EventCategory getInheritedCategory() {
    return inheritedCategory;
  }

  public void setInheritedCategory(EventCategory inheritedCategory) {
    this.inheritedCategory = inheritedCategory;
  }


  public ReleaseEventContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReleaseEventContract pictureMime(String pictureMime) {
    this.pictureMime = pictureMime;
    return this;
  }

  /**
   * Get pictureMime
   * @return pictureMime
   */
  @javax.annotation.Nullable
  public String getPictureMime() {
    return pictureMime;
  }

  public void setPictureMime(String pictureMime) {
    this.pictureMime = pictureMime;
  }


  public ReleaseEventContract series(ReleaseEventSeriesContract series) {
    this.series = series;
    return this;
  }

  /**
   * Get series
   * @return series
   */
  @javax.annotation.Nullable
  public ReleaseEventSeriesContract getSeries() {
    return series;
  }

  public void setSeries(ReleaseEventSeriesContract series) {
    this.series = series;
  }


  public ReleaseEventContract songList(SongListBaseContract songList) {
    this.songList = songList;
    return this;
  }

  /**
   * Get songList
   * @return songList
   */
  @javax.annotation.Nullable
  public SongListBaseContract getSongList() {
    return songList;
  }

  public void setSongList(SongListBaseContract songList) {
    this.songList = songList;
  }


  public ReleaseEventContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public ReleaseEventContract urlSlug(String urlSlug) {
    this.urlSlug = urlSlug;
    return this;
  }

  /**
   * Get urlSlug
   * @return urlSlug
   */
  @javax.annotation.Nullable
  public String getUrlSlug() {
    return urlSlug;
  }

  public void setUrlSlug(String urlSlug) {
    this.urlSlug = urlSlug;
  }


  public ReleaseEventContract venue(VenueContract venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public VenueContract getVenue() {
    return venue;
  }

  public void setVenue(VenueContract venue) {
    this.venue = venue;
  }


  public ReleaseEventContract venueName(String venueName) {
    this.venueName = venueName;
    return this;
  }

  /**
   * Get venueName
   * @return venueName
   */
  @javax.annotation.Nullable
  public String getVenueName() {
    return venueName;
  }

  public void setVenueName(String venueName) {
    this.venueName = venueName;
  }


  public ReleaseEventContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReleaseEventContract releaseEventContract = (ReleaseEventContract) o;
    return Objects.equals(this.additionalNames, releaseEventContract.additionalNames) &&
        Objects.equals(this.category, releaseEventContract.category) &&
        Objects.equals(this.customName, releaseEventContract.customName) &&
        Objects.equals(this.date, releaseEventContract.date) &&
        Objects.equals(this.deleted, releaseEventContract.deleted) &&
        Objects.equals(this.description, releaseEventContract.description) &&
        Objects.equals(this.endDate, releaseEventContract.endDate) &&
        Objects.equals(this.hasVenueOrVenueName, releaseEventContract.hasVenueOrVenueName) &&
        Objects.equals(this.id, releaseEventContract.id) &&
        Objects.equals(this.inheritedCategory, releaseEventContract.inheritedCategory) &&
        Objects.equals(this.name, releaseEventContract.name) &&
        Objects.equals(this.pictureMime, releaseEventContract.pictureMime) &&
        Objects.equals(this.series, releaseEventContract.series) &&
        Objects.equals(this.songList, releaseEventContract.songList) &&
        Objects.equals(this.status, releaseEventContract.status) &&
        Objects.equals(this.urlSlug, releaseEventContract.urlSlug) &&
        Objects.equals(this.venue, releaseEventContract.venue) &&
        Objects.equals(this.venueName, releaseEventContract.venueName) &&
        Objects.equals(this.version, releaseEventContract.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNames, category, customName, date, deleted, description, endDate, hasVenueOrVenueName, id, inheritedCategory, name, pictureMime, series, songList, status, urlSlug, venue, venueName, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReleaseEventContract {\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    customName: ").append(toIndentedString(customName)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    hasVenueOrVenueName: ").append(toIndentedString(hasVenueOrVenueName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inheritedCategory: ").append(toIndentedString(inheritedCategory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictureMime: ").append(toIndentedString(pictureMime)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    songList: ").append(toIndentedString(songList)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    urlSlug: ").append(toIndentedString(urlSlug)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    venueName: ").append(toIndentedString(venueName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNames");
    openapiFields.add("category");
    openapiFields.add("customName");
    openapiFields.add("date");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("endDate");
    openapiFields.add("hasVenueOrVenueName");
    openapiFields.add("id");
    openapiFields.add("inheritedCategory");
    openapiFields.add("name");
    openapiFields.add("pictureMime");
    openapiFields.add("series");
    openapiFields.add("songList");
    openapiFields.add("status");
    openapiFields.add("urlSlug");
    openapiFields.add("venue");
    openapiFields.add("venueName");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReleaseEventContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReleaseEventContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReleaseEventContract is not found in the empty JSON string", ReleaseEventContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReleaseEventContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReleaseEventContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        EventCategory.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `inheritedCategory`
      if (jsonObj.get("inheritedCategory") != null && !jsonObj.get("inheritedCategory").isJsonNull()) {
        EventCategory.validateJsonElement(jsonObj.get("inheritedCategory"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pictureMime") != null && !jsonObj.get("pictureMime").isJsonNull()) && !jsonObj.get("pictureMime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictureMime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pictureMime").toString()));
      }
      // validate the optional field `series`
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        ReleaseEventSeriesContract.validateJsonElement(jsonObj.get("series"));
      }
      // validate the optional field `songList`
      if (jsonObj.get("songList") != null && !jsonObj.get("songList").isJsonNull()) {
        SongListBaseContract.validateJsonElement(jsonObj.get("songList"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("urlSlug") != null && !jsonObj.get("urlSlug").isJsonNull()) && !jsonObj.get("urlSlug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlSlug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlSlug").toString()));
      }
      // validate the optional field `venue`
      if (jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) {
        VenueContract.validateJsonElement(jsonObj.get("venue"));
      }
      if ((jsonObj.get("venueName") != null && !jsonObj.get("venueName").isJsonNull()) && !jsonObj.get("venueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `venueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("venueName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReleaseEventContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReleaseEventContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReleaseEventContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReleaseEventContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ReleaseEventContract>() {
           @Override
           public void write(JsonWriter out, ReleaseEventContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReleaseEventContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReleaseEventContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReleaseEventContract
   * @throws IOException if the JSON string is invalid with respect to ReleaseEventContract
   */
  public static ReleaseEventContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReleaseEventContract.class);
  }

  /**
   * Convert an instance of ReleaseEventContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

