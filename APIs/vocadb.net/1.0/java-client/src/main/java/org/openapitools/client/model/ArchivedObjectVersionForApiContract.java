/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.UserForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArchivedObjectVersionForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArchivedObjectVersionForApiContract {
  public static final String SERIALIZED_NAME_AGENT_NAME = "agentName";
  @SerializedName(SERIALIZED_NAME_AGENT_NAME)
  private String agentName;

  public static final String SERIALIZED_NAME_ANYTHING_CHANGED = "anythingChanged";
  @SerializedName(SERIALIZED_NAME_ANYTHING_CHANGED)
  private Boolean anythingChanged;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserForApiContract author;

  public static final String SERIALIZED_NAME_CHANGED_FIELDS = "changedFields";
  @SerializedName(SERIALIZED_NAME_CHANGED_FIELDS)
  private List<String> changedFields;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_SNAPSHOT = "isSnapshot";
  @SerializedName(SERIALIZED_NAME_IS_SNAPSHOT)
  private Boolean isSnapshot;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ArchivedObjectVersionForApiContract() {
  }

  public ArchivedObjectVersionForApiContract agentName(String agentName) {
    this.agentName = agentName;
    return this;
  }

  /**
   * Get agentName
   * @return agentName
   */
  @javax.annotation.Nullable
  public String getAgentName() {
    return agentName;
  }

  public void setAgentName(String agentName) {
    this.agentName = agentName;
  }


  public ArchivedObjectVersionForApiContract anythingChanged(Boolean anythingChanged) {
    this.anythingChanged = anythingChanged;
    return this;
  }

  /**
   * Get anythingChanged
   * @return anythingChanged
   */
  @javax.annotation.Nullable
  public Boolean getAnythingChanged() {
    return anythingChanged;
  }

  public void setAnythingChanged(Boolean anythingChanged) {
    this.anythingChanged = anythingChanged;
  }


  public ArchivedObjectVersionForApiContract author(UserForApiContract author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserForApiContract getAuthor() {
    return author;
  }

  public void setAuthor(UserForApiContract author) {
    this.author = author;
  }


  public ArchivedObjectVersionForApiContract changedFields(List<String> changedFields) {
    this.changedFields = changedFields;
    return this;
  }

  public ArchivedObjectVersionForApiContract addChangedFieldsItem(String changedFieldsItem) {
    if (this.changedFields == null) {
      this.changedFields = new ArrayList<>();
    }
    this.changedFields.add(changedFieldsItem);
    return this;
  }

  /**
   * Get changedFields
   * @return changedFields
   */
  @javax.annotation.Nullable
  public List<String> getChangedFields() {
    return changedFields;
  }

  public void setChangedFields(List<String> changedFields) {
    this.changedFields = changedFields;
  }


  public ArchivedObjectVersionForApiContract created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ArchivedObjectVersionForApiContract hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Get hidden
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public ArchivedObjectVersionForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ArchivedObjectVersionForApiContract isSnapshot(Boolean isSnapshot) {
    this.isSnapshot = isSnapshot;
    return this;
  }

  /**
   * Get isSnapshot
   * @return isSnapshot
   */
  @javax.annotation.Nullable
  public Boolean getIsSnapshot() {
    return isSnapshot;
  }

  public void setIsSnapshot(Boolean isSnapshot) {
    this.isSnapshot = isSnapshot;
  }


  public ArchivedObjectVersionForApiContract notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public ArchivedObjectVersionForApiContract reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ArchivedObjectVersionForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public ArchivedObjectVersionForApiContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArchivedObjectVersionForApiContract archivedObjectVersionForApiContract = (ArchivedObjectVersionForApiContract) o;
    return Objects.equals(this.agentName, archivedObjectVersionForApiContract.agentName) &&
        Objects.equals(this.anythingChanged, archivedObjectVersionForApiContract.anythingChanged) &&
        Objects.equals(this.author, archivedObjectVersionForApiContract.author) &&
        Objects.equals(this.changedFields, archivedObjectVersionForApiContract.changedFields) &&
        Objects.equals(this.created, archivedObjectVersionForApiContract.created) &&
        Objects.equals(this.hidden, archivedObjectVersionForApiContract.hidden) &&
        Objects.equals(this.id, archivedObjectVersionForApiContract.id) &&
        Objects.equals(this.isSnapshot, archivedObjectVersionForApiContract.isSnapshot) &&
        Objects.equals(this.notes, archivedObjectVersionForApiContract.notes) &&
        Objects.equals(this.reason, archivedObjectVersionForApiContract.reason) &&
        Objects.equals(this.status, archivedObjectVersionForApiContract.status) &&
        Objects.equals(this.version, archivedObjectVersionForApiContract.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentName, anythingChanged, author, changedFields, created, hidden, id, isSnapshot, notes, reason, status, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArchivedObjectVersionForApiContract {\n");
    sb.append("    agentName: ").append(toIndentedString(agentName)).append("\n");
    sb.append("    anythingChanged: ").append(toIndentedString(anythingChanged)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    changedFields: ").append(toIndentedString(changedFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isSnapshot: ").append(toIndentedString(isSnapshot)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentName");
    openapiFields.add("anythingChanged");
    openapiFields.add("author");
    openapiFields.add("changedFields");
    openapiFields.add("created");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("isSnapshot");
    openapiFields.add("notes");
    openapiFields.add("reason");
    openapiFields.add("status");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArchivedObjectVersionForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArchivedObjectVersionForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArchivedObjectVersionForApiContract is not found in the empty JSON string", ArchivedObjectVersionForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArchivedObjectVersionForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArchivedObjectVersionForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentName") != null && !jsonObj.get("agentName").isJsonNull()) && !jsonObj.get("agentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentName").toString()));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("author"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changedFields") != null && !jsonObj.get("changedFields").isJsonNull() && !jsonObj.get("changedFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changedFields` to be an array in the JSON string but got `%s`", jsonObj.get("changedFields").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArchivedObjectVersionForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArchivedObjectVersionForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArchivedObjectVersionForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArchivedObjectVersionForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ArchivedObjectVersionForApiContract>() {
           @Override
           public void write(JsonWriter out, ArchivedObjectVersionForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArchivedObjectVersionForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArchivedObjectVersionForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArchivedObjectVersionForApiContract
   * @throws IOException if the JSON string is invalid with respect to ArchivedObjectVersionForApiContract
   */
  public static ArchivedObjectVersionForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArchivedObjectVersionForApiContract.class);
  }

  /**
   * Convert an instance of ArchivedObjectVersionForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

