/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlbumForApiContract;
import org.openapitools.client.model.MediaType;
import org.openapitools.client.model.PurchaseStatus;
import org.openapitools.client.model.UserForApiContract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlbumForUserForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlbumForUserForApiContract {
  public static final String SERIALIZED_NAME_ALBUM = "album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  private AlbumForApiContract album;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private MediaType mediaType;

  public static final String SERIALIZED_NAME_PURCHASE_STATUS = "purchaseStatus";
  @SerializedName(SERIALIZED_NAME_PURCHASE_STATUS)
  private PurchaseStatus purchaseStatus;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Integer rating;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserForApiContract user;

  public AlbumForUserForApiContract() {
  }

  public AlbumForUserForApiContract album(AlbumForApiContract album) {
    this.album = album;
    return this;
  }

  /**
   * Get album
   * @return album
   */
  @javax.annotation.Nullable
  public AlbumForApiContract getAlbum() {
    return album;
  }

  public void setAlbum(AlbumForApiContract album) {
    this.album = album;
  }


  public AlbumForUserForApiContract mediaType(MediaType mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Get mediaType
   * @return mediaType
   */
  @javax.annotation.Nullable
  public MediaType getMediaType() {
    return mediaType;
  }

  public void setMediaType(MediaType mediaType) {
    this.mediaType = mediaType;
  }


  public AlbumForUserForApiContract purchaseStatus(PurchaseStatus purchaseStatus) {
    this.purchaseStatus = purchaseStatus;
    return this;
  }

  /**
   * Get purchaseStatus
   * @return purchaseStatus
   */
  @javax.annotation.Nullable
  public PurchaseStatus getPurchaseStatus() {
    return purchaseStatus;
  }

  public void setPurchaseStatus(PurchaseStatus purchaseStatus) {
    this.purchaseStatus = purchaseStatus;
  }


  public AlbumForUserForApiContract rating(Integer rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public Integer getRating() {
    return rating;
  }

  public void setRating(Integer rating) {
    this.rating = rating;
  }


  public AlbumForUserForApiContract user(UserForApiContract user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserForApiContract getUser() {
    return user;
  }

  public void setUser(UserForApiContract user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumForUserForApiContract albumForUserForApiContract = (AlbumForUserForApiContract) o;
    return Objects.equals(this.album, albumForUserForApiContract.album) &&
        Objects.equals(this.mediaType, albumForUserForApiContract.mediaType) &&
        Objects.equals(this.purchaseStatus, albumForUserForApiContract.purchaseStatus) &&
        Objects.equals(this.rating, albumForUserForApiContract.rating) &&
        Objects.equals(this.user, albumForUserForApiContract.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(album, mediaType, purchaseStatus, rating, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumForUserForApiContract {\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    purchaseStatus: ").append(toIndentedString(purchaseStatus)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("album");
    openapiFields.add("mediaType");
    openapiFields.add("purchaseStatus");
    openapiFields.add("rating");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlbumForUserForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlbumForUserForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlbumForUserForApiContract is not found in the empty JSON string", AlbumForUserForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlbumForUserForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlbumForUserForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `album`
      if (jsonObj.get("album") != null && !jsonObj.get("album").isJsonNull()) {
        AlbumForApiContract.validateJsonElement(jsonObj.get("album"));
      }
      // validate the optional field `mediaType`
      if (jsonObj.get("mediaType") != null && !jsonObj.get("mediaType").isJsonNull()) {
        MediaType.validateJsonElement(jsonObj.get("mediaType"));
      }
      // validate the optional field `purchaseStatus`
      if (jsonObj.get("purchaseStatus") != null && !jsonObj.get("purchaseStatus").isJsonNull()) {
        PurchaseStatus.validateJsonElement(jsonObj.get("purchaseStatus"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlbumForUserForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlbumForUserForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlbumForUserForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlbumForUserForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<AlbumForUserForApiContract>() {
           @Override
           public void write(JsonWriter out, AlbumForUserForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlbumForUserForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlbumForUserForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlbumForUserForApiContract
   * @throws IOException if the JSON string is invalid with respect to AlbumForUserForApiContract
   */
  public static AlbumForUserForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlbumForUserForApiContract.class);
  }

  /**
   * Convert an instance of AlbumForUserForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

