/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlbumContract;
import org.openapitools.client.model.ArtistForSongContract;
import org.openapitools.client.model.ContentLanguageSelection;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.LocalizedStringContract;
import org.openapitools.client.model.LyricsForSongContract;
import org.openapitools.client.model.PVContract;
import org.openapitools.client.model.PVServices;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.client.model.SongType;
import org.openapitools.client.model.TagUsageForApiContract;
import org.openapitools.client.model.WebLinkForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SongForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SongForApiContract {
  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_ALBUMS = "albums";
  @SerializedName(SERIALIZED_NAME_ALBUMS)
  private List<AlbumContract> albums;

  public static final String SERIALIZED_NAME_ARTIST_STRING = "artistString";
  @SerializedName(SERIALIZED_NAME_ARTIST_STRING)
  private String artistString;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<ArtistForSongContract> artists;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DEFAULT_NAME = "defaultName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME)
  private String defaultName;

  public static final String SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE = "defaultNameLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE)
  private ContentLanguageSelection defaultNameLanguage;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_FAVORITED_TIMES = "favoritedTimes";
  @SerializedName(SERIALIZED_NAME_FAVORITED_TIMES)
  private Integer favoritedTimes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LENGTH_SECONDS = "lengthSeconds";
  @SerializedName(SERIALIZED_NAME_LENGTH_SECONDS)
  private Integer lengthSeconds;

  public static final String SERIALIZED_NAME_LYRICS = "lyrics";
  @SerializedName(SERIALIZED_NAME_LYRICS)
  private List<LyricsForSongContract> lyrics;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_MAX_MILLI_BPM = "maxMilliBpm";
  @SerializedName(SERIALIZED_NAME_MAX_MILLI_BPM)
  private Integer maxMilliBpm;

  public static final String SERIALIZED_NAME_MERGED_TO = "mergedTo";
  @SerializedName(SERIALIZED_NAME_MERGED_TO)
  private Integer mergedTo;

  public static final String SERIALIZED_NAME_MIN_MILLI_BPM = "minMilliBpm";
  @SerializedName(SERIALIZED_NAME_MIN_MILLI_BPM)
  private Integer minMilliBpm;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<LocalizedStringContract> names;

  public static final String SERIALIZED_NAME_ORIGINAL_VERSION_ID = "originalVersionId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_VERSION_ID)
  private Integer originalVersionId;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "publishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private OffsetDateTime publishDate;

  public static final String SERIALIZED_NAME_PV_SERVICES = "pvServices";
  @SerializedName(SERIALIZED_NAME_PV_SERVICES)
  private PVServices pvServices;

  public static final String SERIALIZED_NAME_PVS = "pvs";
  @SerializedName(SERIALIZED_NAME_PVS)
  private List<PVContract> pvs;

  public static final String SERIALIZED_NAME_RATING_SCORE = "ratingScore";
  @SerializedName(SERIALIZED_NAME_RATING_SCORE)
  private Integer ratingScore;

  public static final String SERIALIZED_NAME_RELEASE_EVENT = "releaseEvent";
  @SerializedName(SERIALIZED_NAME_RELEASE_EVENT)
  private ReleaseEventForApiContract releaseEvent;

  public static final String SERIALIZED_NAME_SONG_TYPE = "songType";
  @SerializedName(SERIALIZED_NAME_SONG_TYPE)
  private SongType songType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagUsageForApiContract> tags;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumbUrl";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_WEB_LINKS = "webLinks";
  @SerializedName(SERIALIZED_NAME_WEB_LINKS)
  private List<WebLinkForApiContract> webLinks;

  public SongForApiContract() {
  }

  public SongForApiContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public SongForApiContract albums(List<AlbumContract> albums) {
    this.albums = albums;
    return this;
  }

  public SongForApiContract addAlbumsItem(AlbumContract albumsItem) {
    if (this.albums == null) {
      this.albums = new ArrayList<>();
    }
    this.albums.add(albumsItem);
    return this;
  }

  /**
   * Get albums
   * @return albums
   */
  @javax.annotation.Nullable
  public List<AlbumContract> getAlbums() {
    return albums;
  }

  public void setAlbums(List<AlbumContract> albums) {
    this.albums = albums;
  }


  public SongForApiContract artistString(String artistString) {
    this.artistString = artistString;
    return this;
  }

  /**
   * Get artistString
   * @return artistString
   */
  @javax.annotation.Nullable
  public String getArtistString() {
    return artistString;
  }

  public void setArtistString(String artistString) {
    this.artistString = artistString;
  }


  public SongForApiContract artists(List<ArtistForSongContract> artists) {
    this.artists = artists;
    return this;
  }

  public SongForApiContract addArtistsItem(ArtistForSongContract artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<ArtistForSongContract> getArtists() {
    return artists;
  }

  public void setArtists(List<ArtistForSongContract> artists) {
    this.artists = artists;
  }


  public SongForApiContract createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public SongForApiContract defaultName(String defaultName) {
    this.defaultName = defaultName;
    return this;
  }

  /**
   * Get defaultName
   * @return defaultName
   */
  @javax.annotation.Nullable
  public String getDefaultName() {
    return defaultName;
  }

  public void setDefaultName(String defaultName) {
    this.defaultName = defaultName;
  }


  public SongForApiContract defaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
    return this;
  }

  /**
   * Get defaultNameLanguage
   * @return defaultNameLanguage
   */
  @javax.annotation.Nullable
  public ContentLanguageSelection getDefaultNameLanguage() {
    return defaultNameLanguage;
  }

  public void setDefaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
  }


  public SongForApiContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public SongForApiContract favoritedTimes(Integer favoritedTimes) {
    this.favoritedTimes = favoritedTimes;
    return this;
  }

  /**
   * Get favoritedTimes
   * @return favoritedTimes
   */
  @javax.annotation.Nullable
  public Integer getFavoritedTimes() {
    return favoritedTimes;
  }

  public void setFavoritedTimes(Integer favoritedTimes) {
    this.favoritedTimes = favoritedTimes;
  }


  public SongForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SongForApiContract lengthSeconds(Integer lengthSeconds) {
    this.lengthSeconds = lengthSeconds;
    return this;
  }

  /**
   * Get lengthSeconds
   * @return lengthSeconds
   */
  @javax.annotation.Nullable
  public Integer getLengthSeconds() {
    return lengthSeconds;
  }

  public void setLengthSeconds(Integer lengthSeconds) {
    this.lengthSeconds = lengthSeconds;
  }


  public SongForApiContract lyrics(List<LyricsForSongContract> lyrics) {
    this.lyrics = lyrics;
    return this;
  }

  public SongForApiContract addLyricsItem(LyricsForSongContract lyricsItem) {
    if (this.lyrics == null) {
      this.lyrics = new ArrayList<>();
    }
    this.lyrics.add(lyricsItem);
    return this;
  }

  /**
   * Get lyrics
   * @return lyrics
   */
  @javax.annotation.Nullable
  public List<LyricsForSongContract> getLyrics() {
    return lyrics;
  }

  public void setLyrics(List<LyricsForSongContract> lyrics) {
    this.lyrics = lyrics;
  }


  public SongForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public SongForApiContract maxMilliBpm(Integer maxMilliBpm) {
    this.maxMilliBpm = maxMilliBpm;
    return this;
  }

  /**
   * Get maxMilliBpm
   * @return maxMilliBpm
   */
  @javax.annotation.Nullable
  public Integer getMaxMilliBpm() {
    return maxMilliBpm;
  }

  public void setMaxMilliBpm(Integer maxMilliBpm) {
    this.maxMilliBpm = maxMilliBpm;
  }


  public SongForApiContract mergedTo(Integer mergedTo) {
    this.mergedTo = mergedTo;
    return this;
  }

  /**
   * Get mergedTo
   * @return mergedTo
   */
  @javax.annotation.Nullable
  public Integer getMergedTo() {
    return mergedTo;
  }

  public void setMergedTo(Integer mergedTo) {
    this.mergedTo = mergedTo;
  }


  public SongForApiContract minMilliBpm(Integer minMilliBpm) {
    this.minMilliBpm = minMilliBpm;
    return this;
  }

  /**
   * Get minMilliBpm
   * @return minMilliBpm
   */
  @javax.annotation.Nullable
  public Integer getMinMilliBpm() {
    return minMilliBpm;
  }

  public void setMinMilliBpm(Integer minMilliBpm) {
    this.minMilliBpm = minMilliBpm;
  }


  public SongForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SongForApiContract names(List<LocalizedStringContract> names) {
    this.names = names;
    return this;
  }

  public SongForApiContract addNamesItem(LocalizedStringContract namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List<LocalizedStringContract> getNames() {
    return names;
  }

  public void setNames(List<LocalizedStringContract> names) {
    this.names = names;
  }


  public SongForApiContract originalVersionId(Integer originalVersionId) {
    this.originalVersionId = originalVersionId;
    return this;
  }

  /**
   * Get originalVersionId
   * @return originalVersionId
   */
  @javax.annotation.Nullable
  public Integer getOriginalVersionId() {
    return originalVersionId;
  }

  public void setOriginalVersionId(Integer originalVersionId) {
    this.originalVersionId = originalVersionId;
  }


  public SongForApiContract publishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * Get publishDate
   * @return publishDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
  }


  public SongForApiContract pvServices(PVServices pvServices) {
    this.pvServices = pvServices;
    return this;
  }

  /**
   * Get pvServices
   * @return pvServices
   */
  @javax.annotation.Nullable
  public PVServices getPvServices() {
    return pvServices;
  }

  public void setPvServices(PVServices pvServices) {
    this.pvServices = pvServices;
  }


  public SongForApiContract pvs(List<PVContract> pvs) {
    this.pvs = pvs;
    return this;
  }

  public SongForApiContract addPvsItem(PVContract pvsItem) {
    if (this.pvs == null) {
      this.pvs = new ArrayList<>();
    }
    this.pvs.add(pvsItem);
    return this;
  }

  /**
   * Get pvs
   * @return pvs
   */
  @javax.annotation.Nullable
  public List<PVContract> getPvs() {
    return pvs;
  }

  public void setPvs(List<PVContract> pvs) {
    this.pvs = pvs;
  }


  public SongForApiContract ratingScore(Integer ratingScore) {
    this.ratingScore = ratingScore;
    return this;
  }

  /**
   * Get ratingScore
   * @return ratingScore
   */
  @javax.annotation.Nullable
  public Integer getRatingScore() {
    return ratingScore;
  }

  public void setRatingScore(Integer ratingScore) {
    this.ratingScore = ratingScore;
  }


  public SongForApiContract releaseEvent(ReleaseEventForApiContract releaseEvent) {
    this.releaseEvent = releaseEvent;
    return this;
  }

  /**
   * Get releaseEvent
   * @return releaseEvent
   */
  @javax.annotation.Nullable
  public ReleaseEventForApiContract getReleaseEvent() {
    return releaseEvent;
  }

  public void setReleaseEvent(ReleaseEventForApiContract releaseEvent) {
    this.releaseEvent = releaseEvent;
  }


  public SongForApiContract songType(SongType songType) {
    this.songType = songType;
    return this;
  }

  /**
   * Get songType
   * @return songType
   */
  @javax.annotation.Nullable
  public SongType getSongType() {
    return songType;
  }

  public void setSongType(SongType songType) {
    this.songType = songType;
  }


  public SongForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public SongForApiContract tags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
    return this;
  }

  public SongForApiContract addTagsItem(TagUsageForApiContract tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagUsageForApiContract> getTags() {
    return tags;
  }

  public void setTags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
  }


  public SongForApiContract thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * Get thumbUrl
   * @return thumbUrl
   */
  @javax.annotation.Nullable
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public SongForApiContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public SongForApiContract webLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
    return this;
  }

  public SongForApiContract addWebLinksItem(WebLinkForApiContract webLinksItem) {
    if (this.webLinks == null) {
      this.webLinks = new ArrayList<>();
    }
    this.webLinks.add(webLinksItem);
    return this;
  }

  /**
   * Get webLinks
   * @return webLinks
   */
  @javax.annotation.Nullable
  public List<WebLinkForApiContract> getWebLinks() {
    return webLinks;
  }

  public void setWebLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SongForApiContract songForApiContract = (SongForApiContract) o;
    return Objects.equals(this.additionalNames, songForApiContract.additionalNames) &&
        Objects.equals(this.albums, songForApiContract.albums) &&
        Objects.equals(this.artistString, songForApiContract.artistString) &&
        Objects.equals(this.artists, songForApiContract.artists) &&
        Objects.equals(this.createDate, songForApiContract.createDate) &&
        Objects.equals(this.defaultName, songForApiContract.defaultName) &&
        Objects.equals(this.defaultNameLanguage, songForApiContract.defaultNameLanguage) &&
        Objects.equals(this.deleted, songForApiContract.deleted) &&
        Objects.equals(this.favoritedTimes, songForApiContract.favoritedTimes) &&
        Objects.equals(this.id, songForApiContract.id) &&
        Objects.equals(this.lengthSeconds, songForApiContract.lengthSeconds) &&
        Objects.equals(this.lyrics, songForApiContract.lyrics) &&
        Objects.equals(this.mainPicture, songForApiContract.mainPicture) &&
        Objects.equals(this.maxMilliBpm, songForApiContract.maxMilliBpm) &&
        Objects.equals(this.mergedTo, songForApiContract.mergedTo) &&
        Objects.equals(this.minMilliBpm, songForApiContract.minMilliBpm) &&
        Objects.equals(this.name, songForApiContract.name) &&
        Objects.equals(this.names, songForApiContract.names) &&
        Objects.equals(this.originalVersionId, songForApiContract.originalVersionId) &&
        Objects.equals(this.publishDate, songForApiContract.publishDate) &&
        Objects.equals(this.pvServices, songForApiContract.pvServices) &&
        Objects.equals(this.pvs, songForApiContract.pvs) &&
        Objects.equals(this.ratingScore, songForApiContract.ratingScore) &&
        Objects.equals(this.releaseEvent, songForApiContract.releaseEvent) &&
        Objects.equals(this.songType, songForApiContract.songType) &&
        Objects.equals(this.status, songForApiContract.status) &&
        Objects.equals(this.tags, songForApiContract.tags) &&
        Objects.equals(this.thumbUrl, songForApiContract.thumbUrl) &&
        Objects.equals(this.version, songForApiContract.version) &&
        Objects.equals(this.webLinks, songForApiContract.webLinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNames, albums, artistString, artists, createDate, defaultName, defaultNameLanguage, deleted, favoritedTimes, id, lengthSeconds, lyrics, mainPicture, maxMilliBpm, mergedTo, minMilliBpm, name, names, originalVersionId, publishDate, pvServices, pvs, ratingScore, releaseEvent, songType, status, tags, thumbUrl, version, webLinks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SongForApiContract {\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    albums: ").append(toIndentedString(albums)).append("\n");
    sb.append("    artistString: ").append(toIndentedString(artistString)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    defaultName: ").append(toIndentedString(defaultName)).append("\n");
    sb.append("    defaultNameLanguage: ").append(toIndentedString(defaultNameLanguage)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    favoritedTimes: ").append(toIndentedString(favoritedTimes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lengthSeconds: ").append(toIndentedString(lengthSeconds)).append("\n");
    sb.append("    lyrics: ").append(toIndentedString(lyrics)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    maxMilliBpm: ").append(toIndentedString(maxMilliBpm)).append("\n");
    sb.append("    mergedTo: ").append(toIndentedString(mergedTo)).append("\n");
    sb.append("    minMilliBpm: ").append(toIndentedString(minMilliBpm)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    originalVersionId: ").append(toIndentedString(originalVersionId)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("    pvServices: ").append(toIndentedString(pvServices)).append("\n");
    sb.append("    pvs: ").append(toIndentedString(pvs)).append("\n");
    sb.append("    ratingScore: ").append(toIndentedString(ratingScore)).append("\n");
    sb.append("    releaseEvent: ").append(toIndentedString(releaseEvent)).append("\n");
    sb.append("    songType: ").append(toIndentedString(songType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    webLinks: ").append(toIndentedString(webLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNames");
    openapiFields.add("albums");
    openapiFields.add("artistString");
    openapiFields.add("artists");
    openapiFields.add("createDate");
    openapiFields.add("defaultName");
    openapiFields.add("defaultNameLanguage");
    openapiFields.add("deleted");
    openapiFields.add("favoritedTimes");
    openapiFields.add("id");
    openapiFields.add("lengthSeconds");
    openapiFields.add("lyrics");
    openapiFields.add("mainPicture");
    openapiFields.add("maxMilliBpm");
    openapiFields.add("mergedTo");
    openapiFields.add("minMilliBpm");
    openapiFields.add("name");
    openapiFields.add("names");
    openapiFields.add("originalVersionId");
    openapiFields.add("publishDate");
    openapiFields.add("pvServices");
    openapiFields.add("pvs");
    openapiFields.add("ratingScore");
    openapiFields.add("releaseEvent");
    openapiFields.add("songType");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("thumbUrl");
    openapiFields.add("version");
    openapiFields.add("webLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SongForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SongForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SongForApiContract is not found in the empty JSON string", SongForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SongForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SongForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if (jsonObj.get("albums") != null && !jsonObj.get("albums").isJsonNull()) {
        JsonArray jsonArrayalbums = jsonObj.getAsJsonArray("albums");
        if (jsonArrayalbums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("albums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `albums` to be an array in the JSON string but got `%s`", jsonObj.get("albums").toString()));
          }

          // validate the optional field `albums` (array)
          for (int i = 0; i < jsonArrayalbums.size(); i++) {
            AlbumContract.validateJsonElement(jsonArrayalbums.get(i));
          };
        }
      }
      if ((jsonObj.get("artistString") != null && !jsonObj.get("artistString").isJsonNull()) && !jsonObj.get("artistString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistString").toString()));
      }
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            ArtistForSongContract.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
      if ((jsonObj.get("defaultName") != null && !jsonObj.get("defaultName").isJsonNull()) && !jsonObj.get("defaultName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultName").toString()));
      }
      // validate the optional field `defaultNameLanguage`
      if (jsonObj.get("defaultNameLanguage") != null && !jsonObj.get("defaultNameLanguage").isJsonNull()) {
        ContentLanguageSelection.validateJsonElement(jsonObj.get("defaultNameLanguage"));
      }
      if (jsonObj.get("lyrics") != null && !jsonObj.get("lyrics").isJsonNull()) {
        JsonArray jsonArraylyrics = jsonObj.getAsJsonArray("lyrics");
        if (jsonArraylyrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lyrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lyrics` to be an array in the JSON string but got `%s`", jsonObj.get("lyrics").toString()));
          }

          // validate the optional field `lyrics` (array)
          for (int i = 0; i < jsonArraylyrics.size(); i++) {
            LyricsForSongContract.validateJsonElement(jsonArraylyrics.get(i));
          };
        }
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            LocalizedStringContract.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      // validate the optional field `pvServices`
      if (jsonObj.get("pvServices") != null && !jsonObj.get("pvServices").isJsonNull()) {
        PVServices.validateJsonElement(jsonObj.get("pvServices"));
      }
      if (jsonObj.get("pvs") != null && !jsonObj.get("pvs").isJsonNull()) {
        JsonArray jsonArraypvs = jsonObj.getAsJsonArray("pvs");
        if (jsonArraypvs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pvs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pvs` to be an array in the JSON string but got `%s`", jsonObj.get("pvs").toString()));
          }

          // validate the optional field `pvs` (array)
          for (int i = 0; i < jsonArraypvs.size(); i++) {
            PVContract.validateJsonElement(jsonArraypvs.get(i));
          };
        }
      }
      // validate the optional field `releaseEvent`
      if (jsonObj.get("releaseEvent") != null && !jsonObj.get("releaseEvent").isJsonNull()) {
        ReleaseEventForApiContract.validateJsonElement(jsonObj.get("releaseEvent"));
      }
      // validate the optional field `songType`
      if (jsonObj.get("songType") != null && !jsonObj.get("songType").isJsonNull()) {
        SongType.validateJsonElement(jsonObj.get("songType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagUsageForApiContract.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("thumbUrl") != null && !jsonObj.get("thumbUrl").isJsonNull()) && !jsonObj.get("thumbUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbUrl").toString()));
      }
      if (jsonObj.get("webLinks") != null && !jsonObj.get("webLinks").isJsonNull()) {
        JsonArray jsonArraywebLinks = jsonObj.getAsJsonArray("webLinks");
        if (jsonArraywebLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webLinks` to be an array in the JSON string but got `%s`", jsonObj.get("webLinks").toString()));
          }

          // validate the optional field `webLinks` (array)
          for (int i = 0; i < jsonArraywebLinks.size(); i++) {
            WebLinkForApiContract.validateJsonElement(jsonArraywebLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SongForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SongForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SongForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SongForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<SongForApiContract>() {
           @Override
           public void write(JsonWriter out, SongForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SongForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SongForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SongForApiContract
   * @throws IOException if the JSON string is invalid with respect to SongForApiContract
   */
  public static SongForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SongForApiContract.class);
  }

  /**
   * Convert an instance of SongForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

