/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommentForApiContract;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.client.model.SongListFeaturedCategory;
import org.openapitools.client.model.TagUsageForApiContract;
import org.openapitools.client.model.UserForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SongListForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SongListForApiContract {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserForApiContract author;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<ReleaseEventForApiContract> events;

  public static final String SERIALIZED_NAME_FEATURED_CATEGORY = "featuredCategory";
  @SerializedName(SERIALIZED_NAME_FEATURED_CATEGORY)
  private SongListFeaturedCategory featuredCategory;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LATEST_COMMENTS = "latestComments";
  @SerializedName(SERIALIZED_NAME_LATEST_COMMENTS)
  private List<CommentForApiContract> latestComments;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagUsageForApiContract> tags;

  public SongListForApiContract() {
  }

  public SongListForApiContract author(UserForApiContract author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserForApiContract getAuthor() {
    return author;
  }

  public void setAuthor(UserForApiContract author) {
    this.author = author;
  }


  public SongListForApiContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public SongListForApiContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SongListForApiContract eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * Get eventDate
   * @return eventDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public SongListForApiContract events(List<ReleaseEventForApiContract> events) {
    this.events = events;
    return this;
  }

  public SongListForApiContract addEventsItem(ReleaseEventForApiContract eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<ReleaseEventForApiContract> getEvents() {
    return events;
  }

  public void setEvents(List<ReleaseEventForApiContract> events) {
    this.events = events;
  }


  public SongListForApiContract featuredCategory(SongListFeaturedCategory featuredCategory) {
    this.featuredCategory = featuredCategory;
    return this;
  }

  /**
   * Get featuredCategory
   * @return featuredCategory
   */
  @javax.annotation.Nullable
  public SongListFeaturedCategory getFeaturedCategory() {
    return featuredCategory;
  }

  public void setFeaturedCategory(SongListFeaturedCategory featuredCategory) {
    this.featuredCategory = featuredCategory;
  }


  public SongListForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SongListForApiContract latestComments(List<CommentForApiContract> latestComments) {
    this.latestComments = latestComments;
    return this;
  }

  public SongListForApiContract addLatestCommentsItem(CommentForApiContract latestCommentsItem) {
    if (this.latestComments == null) {
      this.latestComments = new ArrayList<>();
    }
    this.latestComments.add(latestCommentsItem);
    return this;
  }

  /**
   * Get latestComments
   * @return latestComments
   */
  @javax.annotation.Nullable
  public List<CommentForApiContract> getLatestComments() {
    return latestComments;
  }

  public void setLatestComments(List<CommentForApiContract> latestComments) {
    this.latestComments = latestComments;
  }


  public SongListForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public SongListForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SongListForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public SongListForApiContract tags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
    return this;
  }

  public SongListForApiContract addTagsItem(TagUsageForApiContract tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagUsageForApiContract> getTags() {
    return tags;
  }

  public void setTags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SongListForApiContract songListForApiContract = (SongListForApiContract) o;
    return Objects.equals(this.author, songListForApiContract.author) &&
        Objects.equals(this.deleted, songListForApiContract.deleted) &&
        Objects.equals(this.description, songListForApiContract.description) &&
        Objects.equals(this.eventDate, songListForApiContract.eventDate) &&
        Objects.equals(this.events, songListForApiContract.events) &&
        Objects.equals(this.featuredCategory, songListForApiContract.featuredCategory) &&
        Objects.equals(this.id, songListForApiContract.id) &&
        Objects.equals(this.latestComments, songListForApiContract.latestComments) &&
        Objects.equals(this.mainPicture, songListForApiContract.mainPicture) &&
        Objects.equals(this.name, songListForApiContract.name) &&
        Objects.equals(this.status, songListForApiContract.status) &&
        Objects.equals(this.tags, songListForApiContract.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, deleted, description, eventDate, events, featuredCategory, id, latestComments, mainPicture, name, status, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SongListForApiContract {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    featuredCategory: ").append(toIndentedString(featuredCategory)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latestComments: ").append(toIndentedString(latestComments)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("eventDate");
    openapiFields.add("events");
    openapiFields.add("featuredCategory");
    openapiFields.add("id");
    openapiFields.add("latestComments");
    openapiFields.add("mainPicture");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SongListForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SongListForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SongListForApiContract is not found in the empty JSON string", SongListForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SongListForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SongListForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("author"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            ReleaseEventForApiContract.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      // validate the optional field `featuredCategory`
      if (jsonObj.get("featuredCategory") != null && !jsonObj.get("featuredCategory").isJsonNull()) {
        SongListFeaturedCategory.validateJsonElement(jsonObj.get("featuredCategory"));
      }
      if (jsonObj.get("latestComments") != null && !jsonObj.get("latestComments").isJsonNull()) {
        JsonArray jsonArraylatestComments = jsonObj.getAsJsonArray("latestComments");
        if (jsonArraylatestComments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latestComments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latestComments` to be an array in the JSON string but got `%s`", jsonObj.get("latestComments").toString()));
          }

          // validate the optional field `latestComments` (array)
          for (int i = 0; i < jsonArraylatestComments.size(); i++) {
            CommentForApiContract.validateJsonElement(jsonArraylatestComments.get(i));
          };
        }
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagUsageForApiContract.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SongListForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SongListForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SongListForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SongListForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<SongListForApiContract>() {
           @Override
           public void write(JsonWriter out, SongListForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SongListForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SongListForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SongListForApiContract
   * @throws IOException if the JSON string is invalid with respect to SongListForApiContract
   */
  public static SongListForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SongListForApiContract.class);
  }

  /**
   * Convert an instance of SongListForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

