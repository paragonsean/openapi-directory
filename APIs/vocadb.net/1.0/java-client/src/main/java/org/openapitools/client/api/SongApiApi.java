/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdvancedSearchFilterParams;
import org.openapitools.client.model.ArtistAlbumParticipationStatus;
import org.openapitools.client.model.CommentForApiContract;
import org.openapitools.client.model.ContentLanguagePreference;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.LyricsForSongContract;
import org.openapitools.client.model.NameMatchMode;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PVService;
import org.openapitools.client.model.PVServices;
import org.openapitools.client.model.RatedSongForUserForApiContract;
import org.openapitools.client.model.RelatedSongsContract;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.client.model.SongForApiContractPartialFindResult;
import org.openapitools.client.model.SongOptionalFields;
import org.openapitools.client.model.SongRatingContract;
import org.openapitools.client.model.SongSortRule;
import org.openapitools.client.model.SongVocalistSelection;
import org.openapitools.client.model.TopSongsDateFilterType;
import org.openapitools.client.model.UserOptionalFields;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SongApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SongApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SongApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiSongsByPvGet
     * @param pvService  (optional)
     * @param pvId  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsByPvGetCall(PVService pvService, String pvId, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/byPv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pvService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pvService", pvService));
        }

        if (pvId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pvId", pvId));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsByPvGetValidateBeforeCall(PVService pvService, String pvId, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        return apiSongsByPvGetCall(pvService, pvId, fields, lang, _callback);

    }

    /**
     * 
     * 
     * @param pvService  (optional)
     * @param pvId  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return SongForApiContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SongForApiContract apiSongsByPvGet(PVService pvService, String pvId, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<SongForApiContract> localVarResp = apiSongsByPvGetWithHttpInfo(pvService, pvId, fields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param pvService  (optional)
     * @param pvId  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;SongForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SongForApiContract> apiSongsByPvGetWithHttpInfo(PVService pvService, String pvId, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiSongsByPvGetValidateBeforeCall(pvService, pvId, fields, lang, null);
        Type localVarReturnType = new TypeToken<SongForApiContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pvService  (optional)
     * @param pvId  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsByPvGetAsync(PVService pvService, String pvId, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback<SongForApiContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsByPvGetValidateBeforeCall(pvService, pvId, fields, lang, _callback);
        Type localVarReturnType = new TypeToken<SongForApiContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsCommentsCommentIdDelete
     * @param commentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsCommentsCommentIdDeleteCall(Integer commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/comments/{commentId}"
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsCommentsCommentIdDeleteValidateBeforeCall(Integer commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling apiSongsCommentsCommentIdDelete(Async)");
        }

        return apiSongsCommentsCommentIdDeleteCall(commentId, _callback);

    }

    /**
     * 
     * 
     * @param commentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiSongsCommentsCommentIdDelete(Integer commentId) throws ApiException {
        apiSongsCommentsCommentIdDeleteWithHttpInfo(commentId);
    }

    /**
     * 
     * 
     * @param commentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiSongsCommentsCommentIdDeleteWithHttpInfo(Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = apiSongsCommentsCommentIdDeleteValidateBeforeCall(commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param commentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsCommentsCommentIdDeleteAsync(Integer commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsCommentsCommentIdDeleteValidateBeforeCall(commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsCommentsCommentIdPost
     * @param commentId  (required)
     * @param commentForApiContract  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsCommentsCommentIdPostCall(Integer commentId, CommentForApiContract commentForApiContract, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentForApiContract;

        // create path and map variables
        String localVarPath = "/api/songs/comments/{commentId}"
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsCommentsCommentIdPostValidateBeforeCall(Integer commentId, CommentForApiContract commentForApiContract, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling apiSongsCommentsCommentIdPost(Async)");
        }

        return apiSongsCommentsCommentIdPostCall(commentId, commentForApiContract, _callback);

    }

    /**
     * 
     * 
     * @param commentId  (required)
     * @param commentForApiContract  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiSongsCommentsCommentIdPost(Integer commentId, CommentForApiContract commentForApiContract) throws ApiException {
        apiSongsCommentsCommentIdPostWithHttpInfo(commentId, commentForApiContract);
    }

    /**
     * 
     * 
     * @param commentId  (required)
     * @param commentForApiContract  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiSongsCommentsCommentIdPostWithHttpInfo(Integer commentId, CommentForApiContract commentForApiContract) throws ApiException {
        okhttp3.Call localVarCall = apiSongsCommentsCommentIdPostValidateBeforeCall(commentId, commentForApiContract, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param commentId  (required)
     * @param commentForApiContract  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsCommentsCommentIdPostAsync(Integer commentId, CommentForApiContract commentForApiContract, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsCommentsCommentIdPostValidateBeforeCall(commentId, commentForApiContract, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsGet
     * @param query  (optional, default to )
     * @param songTypes  (optional)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param tagName  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param unifyTypesAndTags  (optional, default to false)
     * @param artistId  (optional)
     * @param artistParticipationStatus  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param onlyWithPvs  (optional, default to false)
     * @param pvServices  (optional)
     * @param since  (optional)
     * @param minScore  (optional)
     * @param userCollectionId  (optional)
     * @param releaseEventId  (optional)
     * @param parentSongId  (optional)
     * @param status  (optional)
     * @param advancedFilters  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param preferAccurateMatches  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param minMilliBpm  (optional)
     * @param maxMilliBpm  (optional)
     * @param minLength  (optional)
     * @param maxLength  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsGetCall(String query, String songTypes, OffsetDateTime afterDate, OffsetDateTime beforeDate, List<String> tagName, List<Integer> tagId, Boolean childTags, Boolean unifyTypesAndTags, List<Integer> artistId, ArtistAlbumParticipationStatus artistParticipationStatus, Boolean childVoicebanks, Boolean includeMembers, Boolean onlyWithPvs, PVServices pvServices, Integer since, Integer minScore, Integer userCollectionId, Integer releaseEventId, Integer parentSongId, EntryStatus status, List<AdvancedSearchFilterParams> advancedFilters, Integer start, Integer maxResults, Boolean getTotalCount, SongSortRule sort, Boolean preferAccurateMatches, NameMatchMode nameMatchMode, SongOptionalFields fields, ContentLanguagePreference lang, Integer minMilliBpm, Integer maxMilliBpm, Integer minLength, Integer maxLength, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (songTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("songTypes", songTypes));
        }

        if (afterDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterDate", afterDate));
        }

        if (beforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeDate", beforeDate));
        }

        if (tagName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tagName[]", tagName));
        }

        if (tagId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tagId[]", tagId));
        }

        if (childTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("childTags", childTags));
        }

        if (unifyTypesAndTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unifyTypesAndTags", unifyTypesAndTags));
        }

        if (artistId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "artistId[]", artistId));
        }

        if (artistParticipationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artistParticipationStatus", artistParticipationStatus));
        }

        if (childVoicebanks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("childVoicebanks", childVoicebanks));
        }

        if (includeMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMembers", includeMembers));
        }

        if (onlyWithPvs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyWithPvs", onlyWithPvs));
        }

        if (pvServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pvServices", pvServices));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (minScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minScore", minScore));
        }

        if (userCollectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userCollectionId", userCollectionId));
        }

        if (releaseEventId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseEventId", releaseEventId));
        }

        if (parentSongId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentSongId", parentSongId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (advancedFilters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "advancedFilters", advancedFilters));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (getTotalCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getTotalCount", getTotalCount));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (preferAccurateMatches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preferAccurateMatches", preferAccurateMatches));
        }

        if (nameMatchMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameMatchMode", nameMatchMode));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (minMilliBpm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minMilliBpm", minMilliBpm));
        }

        if (maxMilliBpm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxMilliBpm", maxMilliBpm));
        }

        if (minLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minLength", minLength));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxLength", maxLength));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsGetValidateBeforeCall(String query, String songTypes, OffsetDateTime afterDate, OffsetDateTime beforeDate, List<String> tagName, List<Integer> tagId, Boolean childTags, Boolean unifyTypesAndTags, List<Integer> artistId, ArtistAlbumParticipationStatus artistParticipationStatus, Boolean childVoicebanks, Boolean includeMembers, Boolean onlyWithPvs, PVServices pvServices, Integer since, Integer minScore, Integer userCollectionId, Integer releaseEventId, Integer parentSongId, EntryStatus status, List<AdvancedSearchFilterParams> advancedFilters, Integer start, Integer maxResults, Boolean getTotalCount, SongSortRule sort, Boolean preferAccurateMatches, NameMatchMode nameMatchMode, SongOptionalFields fields, ContentLanguagePreference lang, Integer minMilliBpm, Integer maxMilliBpm, Integer minLength, Integer maxLength, final ApiCallback _callback) throws ApiException {
        return apiSongsGetCall(query, songTypes, afterDate, beforeDate, tagName, tagId, childTags, unifyTypesAndTags, artistId, artistParticipationStatus, childVoicebanks, includeMembers, onlyWithPvs, pvServices, since, minScore, userCollectionId, releaseEventId, parentSongId, status, advancedFilters, start, maxResults, getTotalCount, sort, preferAccurateMatches, nameMatchMode, fields, lang, minMilliBpm, maxMilliBpm, minLength, maxLength, _callback);

    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param songTypes  (optional)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param tagName  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param unifyTypesAndTags  (optional, default to false)
     * @param artistId  (optional)
     * @param artistParticipationStatus  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param onlyWithPvs  (optional, default to false)
     * @param pvServices  (optional)
     * @param since  (optional)
     * @param minScore  (optional)
     * @param userCollectionId  (optional)
     * @param releaseEventId  (optional)
     * @param parentSongId  (optional)
     * @param status  (optional)
     * @param advancedFilters  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param preferAccurateMatches  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param minMilliBpm  (optional)
     * @param maxMilliBpm  (optional)
     * @param minLength  (optional)
     * @param maxLength  (optional)
     * @return SongForApiContractPartialFindResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SongForApiContractPartialFindResult apiSongsGet(String query, String songTypes, OffsetDateTime afterDate, OffsetDateTime beforeDate, List<String> tagName, List<Integer> tagId, Boolean childTags, Boolean unifyTypesAndTags, List<Integer> artistId, ArtistAlbumParticipationStatus artistParticipationStatus, Boolean childVoicebanks, Boolean includeMembers, Boolean onlyWithPvs, PVServices pvServices, Integer since, Integer minScore, Integer userCollectionId, Integer releaseEventId, Integer parentSongId, EntryStatus status, List<AdvancedSearchFilterParams> advancedFilters, Integer start, Integer maxResults, Boolean getTotalCount, SongSortRule sort, Boolean preferAccurateMatches, NameMatchMode nameMatchMode, SongOptionalFields fields, ContentLanguagePreference lang, Integer minMilliBpm, Integer maxMilliBpm, Integer minLength, Integer maxLength) throws ApiException {
        ApiResponse<SongForApiContractPartialFindResult> localVarResp = apiSongsGetWithHttpInfo(query, songTypes, afterDate, beforeDate, tagName, tagId, childTags, unifyTypesAndTags, artistId, artistParticipationStatus, childVoicebanks, includeMembers, onlyWithPvs, pvServices, since, minScore, userCollectionId, releaseEventId, parentSongId, status, advancedFilters, start, maxResults, getTotalCount, sort, preferAccurateMatches, nameMatchMode, fields, lang, minMilliBpm, maxMilliBpm, minLength, maxLength);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param songTypes  (optional)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param tagName  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param unifyTypesAndTags  (optional, default to false)
     * @param artistId  (optional)
     * @param artistParticipationStatus  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param onlyWithPvs  (optional, default to false)
     * @param pvServices  (optional)
     * @param since  (optional)
     * @param minScore  (optional)
     * @param userCollectionId  (optional)
     * @param releaseEventId  (optional)
     * @param parentSongId  (optional)
     * @param status  (optional)
     * @param advancedFilters  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param preferAccurateMatches  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param minMilliBpm  (optional)
     * @param maxMilliBpm  (optional)
     * @param minLength  (optional)
     * @param maxLength  (optional)
     * @return ApiResponse&lt;SongForApiContractPartialFindResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SongForApiContractPartialFindResult> apiSongsGetWithHttpInfo(String query, String songTypes, OffsetDateTime afterDate, OffsetDateTime beforeDate, List<String> tagName, List<Integer> tagId, Boolean childTags, Boolean unifyTypesAndTags, List<Integer> artistId, ArtistAlbumParticipationStatus artistParticipationStatus, Boolean childVoicebanks, Boolean includeMembers, Boolean onlyWithPvs, PVServices pvServices, Integer since, Integer minScore, Integer userCollectionId, Integer releaseEventId, Integer parentSongId, EntryStatus status, List<AdvancedSearchFilterParams> advancedFilters, Integer start, Integer maxResults, Boolean getTotalCount, SongSortRule sort, Boolean preferAccurateMatches, NameMatchMode nameMatchMode, SongOptionalFields fields, ContentLanguagePreference lang, Integer minMilliBpm, Integer maxMilliBpm, Integer minLength, Integer maxLength) throws ApiException {
        okhttp3.Call localVarCall = apiSongsGetValidateBeforeCall(query, songTypes, afterDate, beforeDate, tagName, tagId, childTags, unifyTypesAndTags, artistId, artistParticipationStatus, childVoicebanks, includeMembers, onlyWithPvs, pvServices, since, minScore, userCollectionId, releaseEventId, parentSongId, status, advancedFilters, start, maxResults, getTotalCount, sort, preferAccurateMatches, nameMatchMode, fields, lang, minMilliBpm, maxMilliBpm, minLength, maxLength, null);
        Type localVarReturnType = new TypeToken<SongForApiContractPartialFindResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (optional, default to )
     * @param songTypes  (optional)
     * @param afterDate  (optional)
     * @param beforeDate  (optional)
     * @param tagName  (optional)
     * @param tagId  (optional)
     * @param childTags  (optional, default to false)
     * @param unifyTypesAndTags  (optional, default to false)
     * @param artistId  (optional)
     * @param artistParticipationStatus  (optional)
     * @param childVoicebanks  (optional, default to false)
     * @param includeMembers  (optional, default to false)
     * @param onlyWithPvs  (optional, default to false)
     * @param pvServices  (optional)
     * @param since  (optional)
     * @param minScore  (optional)
     * @param userCollectionId  (optional)
     * @param releaseEventId  (optional)
     * @param parentSongId  (optional)
     * @param status  (optional)
     * @param advancedFilters  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param sort  (optional)
     * @param preferAccurateMatches  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param minMilliBpm  (optional)
     * @param maxMilliBpm  (optional)
     * @param minLength  (optional)
     * @param maxLength  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsGetAsync(String query, String songTypes, OffsetDateTime afterDate, OffsetDateTime beforeDate, List<String> tagName, List<Integer> tagId, Boolean childTags, Boolean unifyTypesAndTags, List<Integer> artistId, ArtistAlbumParticipationStatus artistParticipationStatus, Boolean childVoicebanks, Boolean includeMembers, Boolean onlyWithPvs, PVServices pvServices, Integer since, Integer minScore, Integer userCollectionId, Integer releaseEventId, Integer parentSongId, EntryStatus status, List<AdvancedSearchFilterParams> advancedFilters, Integer start, Integer maxResults, Boolean getTotalCount, SongSortRule sort, Boolean preferAccurateMatches, NameMatchMode nameMatchMode, SongOptionalFields fields, ContentLanguagePreference lang, Integer minMilliBpm, Integer maxMilliBpm, Integer minLength, Integer maxLength, final ApiCallback<SongForApiContractPartialFindResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsGetValidateBeforeCall(query, songTypes, afterDate, beforeDate, tagName, tagId, childTags, unifyTypesAndTags, artistId, artistParticipationStatus, childVoicebanks, includeMembers, onlyWithPvs, pvServices, since, minScore, userCollectionId, releaseEventId, parentSongId, status, advancedFilters, start, maxResults, getTotalCount, sort, preferAccurateMatches, nameMatchMode, fields, lang, minMilliBpm, maxMilliBpm, minLength, maxLength, _callback);
        Type localVarReturnType = new TypeToken<SongForApiContractPartialFindResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsHighlightedGet
     * @param languagePreference  (optional)
     * @param fields  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsHighlightedGetCall(ContentLanguagePreference languagePreference, SongOptionalFields fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/highlighted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (languagePreference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languagePreference", languagePreference));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsHighlightedGetValidateBeforeCall(ContentLanguagePreference languagePreference, SongOptionalFields fields, final ApiCallback _callback) throws ApiException {
        return apiSongsHighlightedGetCall(languagePreference, fields, _callback);

    }

    /**
     * 
     * 
     * @param languagePreference  (optional)
     * @param fields  (optional)
     * @return List&lt;SongForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<SongForApiContract> apiSongsHighlightedGet(ContentLanguagePreference languagePreference, SongOptionalFields fields) throws ApiException {
        ApiResponse<List<SongForApiContract>> localVarResp = apiSongsHighlightedGetWithHttpInfo(languagePreference, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param languagePreference  (optional)
     * @param fields  (optional)
     * @return ApiResponse&lt;List&lt;SongForApiContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SongForApiContract>> apiSongsHighlightedGetWithHttpInfo(ContentLanguagePreference languagePreference, SongOptionalFields fields) throws ApiException {
        okhttp3.Call localVarCall = apiSongsHighlightedGetValidateBeforeCall(languagePreference, fields, null);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param languagePreference  (optional)
     * @param fields  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsHighlightedGetAsync(ContentLanguagePreference languagePreference, SongOptionalFields fields, final ApiCallback<List<SongForApiContract>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsHighlightedGetValidateBeforeCall(languagePreference, fields, _callback);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdCommentsGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdCommentsGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/{id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdCommentsGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdCommentsGet(Async)");
        }

        return apiSongsIdCommentsGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;CommentForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommentForApiContract> apiSongsIdCommentsGet(Integer id) throws ApiException {
        ApiResponse<List<CommentForApiContract>> localVarResp = apiSongsIdCommentsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;CommentForApiContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommentForApiContract>> apiSongsIdCommentsGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdCommentsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<CommentForApiContract>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdCommentsGetAsync(Integer id, final ApiCallback<List<CommentForApiContract>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdCommentsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<CommentForApiContract>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdCommentsPost
     * @param id  (required)
     * @param commentForApiContract  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdCommentsPostCall(Integer id, CommentForApiContract commentForApiContract, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentForApiContract;

        // create path and map variables
        String localVarPath = "/api/songs/{id}/comments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdCommentsPostValidateBeforeCall(Integer id, CommentForApiContract commentForApiContract, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdCommentsPost(Async)");
        }

        return apiSongsIdCommentsPostCall(id, commentForApiContract, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param commentForApiContract  (optional)
     * @return CommentForApiContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommentForApiContract apiSongsIdCommentsPost(Integer id, CommentForApiContract commentForApiContract) throws ApiException {
        ApiResponse<CommentForApiContract> localVarResp = apiSongsIdCommentsPostWithHttpInfo(id, commentForApiContract);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param commentForApiContract  (optional)
     * @return ApiResponse&lt;CommentForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentForApiContract> apiSongsIdCommentsPostWithHttpInfo(Integer id, CommentForApiContract commentForApiContract) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdCommentsPostValidateBeforeCall(id, commentForApiContract, null);
        Type localVarReturnType = new TypeToken<CommentForApiContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param commentForApiContract  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdCommentsPostAsync(Integer id, CommentForApiContract commentForApiContract, final ApiCallback<CommentForApiContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdCommentsPostValidateBeforeCall(id, commentForApiContract, _callback);
        Type localVarReturnType = new TypeToken<CommentForApiContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdDelete
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdDeleteCall(Integer id, String notes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdDeleteValidateBeforeCall(Integer id, String notes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdDelete(Async)");
        }

        return apiSongsIdDeleteCall(id, notes, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiSongsIdDelete(Integer id, String notes) throws ApiException {
        apiSongsIdDeleteWithHttpInfo(id, notes);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiSongsIdDeleteWithHttpInfo(Integer id, String notes) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdDeleteValidateBeforeCall(id, notes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdDeleteAsync(Integer id, String notes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdDeleteValidateBeforeCall(id, notes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdDerivedGet
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdDerivedGetCall(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/{id}/derived"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdDerivedGetValidateBeforeCall(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdDerivedGet(Async)");
        }

        return apiSongsIdDerivedGetCall(id, fields, lang, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return List&lt;SongForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<SongForApiContract> apiSongsIdDerivedGet(Integer id, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<List<SongForApiContract>> localVarResp = apiSongsIdDerivedGetWithHttpInfo(id, fields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;List&lt;SongForApiContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SongForApiContract>> apiSongsIdDerivedGetWithHttpInfo(Integer id, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdDerivedGetValidateBeforeCall(id, fields, lang, null);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdDerivedGetAsync(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback<List<SongForApiContract>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdDerivedGetValidateBeforeCall(id, fields, lang, _callback);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdGet
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdGetCall(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdGetValidateBeforeCall(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdGet(Async)");
        }

        return apiSongsIdGetCall(id, fields, lang, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return SongForApiContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SongForApiContract apiSongsIdGet(Integer id, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<SongForApiContract> localVarResp = apiSongsIdGetWithHttpInfo(id, fields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;SongForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SongForApiContract> apiSongsIdGetWithHttpInfo(Integer id, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdGetValidateBeforeCall(id, fields, lang, null);
        Type localVarReturnType = new TypeToken<SongForApiContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdGetAsync(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback<SongForApiContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdGetValidateBeforeCall(id, fields, lang, _callback);
        Type localVarReturnType = new TypeToken<SongForApiContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdRatingsGet
     * @param id  (required)
     * @param userFields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdRatingsGetCall(Integer id, UserOptionalFields userFields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/{id}/ratings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userFields", userFields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdRatingsGetValidateBeforeCall(Integer id, UserOptionalFields userFields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdRatingsGet(Async)");
        }

        return apiSongsIdRatingsGetCall(id, userFields, lang, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userFields  (optional)
     * @param lang  (optional)
     * @return List&lt;RatedSongForUserForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<RatedSongForUserForApiContract> apiSongsIdRatingsGet(Integer id, UserOptionalFields userFields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<List<RatedSongForUserForApiContract>> localVarResp = apiSongsIdRatingsGetWithHttpInfo(id, userFields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userFields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;List&lt;RatedSongForUserForApiContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RatedSongForUserForApiContract>> apiSongsIdRatingsGetWithHttpInfo(Integer id, UserOptionalFields userFields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdRatingsGetValidateBeforeCall(id, userFields, lang, null);
        Type localVarReturnType = new TypeToken<List<RatedSongForUserForApiContract>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param userFields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdRatingsGetAsync(Integer id, UserOptionalFields userFields, ContentLanguagePreference lang, final ApiCallback<List<RatedSongForUserForApiContract>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdRatingsGetValidateBeforeCall(id, userFields, lang, _callback);
        Type localVarReturnType = new TypeToken<List<RatedSongForUserForApiContract>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdRatingsPost
     * @param id  (required)
     * @param songRatingContract  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdRatingsPostCall(Integer id, SongRatingContract songRatingContract, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = songRatingContract;

        // create path and map variables
        String localVarPath = "/api/songs/{id}/ratings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdRatingsPostValidateBeforeCall(Integer id, SongRatingContract songRatingContract, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdRatingsPost(Async)");
        }

        return apiSongsIdRatingsPostCall(id, songRatingContract, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param songRatingContract  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiSongsIdRatingsPost(Integer id, SongRatingContract songRatingContract) throws ApiException {
        apiSongsIdRatingsPostWithHttpInfo(id, songRatingContract);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param songRatingContract  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiSongsIdRatingsPostWithHttpInfo(Integer id, SongRatingContract songRatingContract) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdRatingsPostValidateBeforeCall(id, songRatingContract, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param songRatingContract  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdRatingsPostAsync(Integer id, SongRatingContract songRatingContract, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdRatingsPostValidateBeforeCall(id, songRatingContract, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsIdRelatedGet
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdRelatedGetCall(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/{id}/related"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsIdRelatedGetValidateBeforeCall(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiSongsIdRelatedGet(Async)");
        }

        return apiSongsIdRelatedGetCall(id, fields, lang, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return RelatedSongsContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RelatedSongsContract apiSongsIdRelatedGet(Integer id, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        ApiResponse<RelatedSongsContract> localVarResp = apiSongsIdRelatedGetWithHttpInfo(id, fields, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;RelatedSongsContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelatedSongsContract> apiSongsIdRelatedGetWithHttpInfo(Integer id, SongOptionalFields fields, ContentLanguagePreference lang) throws ApiException {
        okhttp3.Call localVarCall = apiSongsIdRelatedGetValidateBeforeCall(id, fields, lang, null);
        Type localVarReturnType = new TypeToken<RelatedSongsContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsIdRelatedGetAsync(Integer id, SongOptionalFields fields, ContentLanguagePreference lang, final ApiCallback<RelatedSongsContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsIdRelatedGetValidateBeforeCall(id, fields, lang, _callback);
        Type localVarReturnType = new TypeToken<RelatedSongsContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsLyricsLyricsIdGet
     * @param lyricsId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsLyricsLyricsIdGetCall(Integer lyricsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/lyrics/{lyricsId}"
            .replace("{" + "lyricsId" + "}", localVarApiClient.escapeString(lyricsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsLyricsLyricsIdGetValidateBeforeCall(Integer lyricsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lyricsId' is set
        if (lyricsId == null) {
            throw new ApiException("Missing the required parameter 'lyricsId' when calling apiSongsLyricsLyricsIdGet(Async)");
        }

        return apiSongsLyricsLyricsIdGetCall(lyricsId, _callback);

    }

    /**
     * 
     * 
     * @param lyricsId  (required)
     * @return LyricsForSongContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LyricsForSongContract apiSongsLyricsLyricsIdGet(Integer lyricsId) throws ApiException {
        ApiResponse<LyricsForSongContract> localVarResp = apiSongsLyricsLyricsIdGetWithHttpInfo(lyricsId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param lyricsId  (required)
     * @return ApiResponse&lt;LyricsForSongContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LyricsForSongContract> apiSongsLyricsLyricsIdGetWithHttpInfo(Integer lyricsId) throws ApiException {
        okhttp3.Call localVarCall = apiSongsLyricsLyricsIdGetValidateBeforeCall(lyricsId, null);
        Type localVarReturnType = new TypeToken<LyricsForSongContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param lyricsId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsLyricsLyricsIdGetAsync(Integer lyricsId, final ApiCallback<LyricsForSongContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsLyricsLyricsIdGetValidateBeforeCall(lyricsId, _callback);
        Type localVarReturnType = new TypeToken<LyricsForSongContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsNamesGet
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param maxResults  (optional, default to 15)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsNamesGetCall(String query, NameMatchMode nameMatchMode, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (nameMatchMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameMatchMode", nameMatchMode));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsNamesGetValidateBeforeCall(String query, NameMatchMode nameMatchMode, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return apiSongsNamesGetCall(query, nameMatchMode, maxResults, _callback);

    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param maxResults  (optional, default to 15)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> apiSongsNamesGet(String query, NameMatchMode nameMatchMode, Integer maxResults) throws ApiException {
        ApiResponse<List<String>> localVarResp = apiSongsNamesGetWithHttpInfo(query, nameMatchMode, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param maxResults  (optional, default to 15)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> apiSongsNamesGetWithHttpInfo(String query, NameMatchMode nameMatchMode, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = apiSongsNamesGetValidateBeforeCall(query, nameMatchMode, maxResults, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (optional, default to )
     * @param nameMatchMode  (optional)
     * @param maxResults  (optional, default to 15)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsNamesGetAsync(String query, NameMatchMode nameMatchMode, Integer maxResults, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsNamesGetValidateBeforeCall(query, nameMatchMode, maxResults, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiSongsTopRatedGet
     * @param durationHours  (optional)
     * @param startDate  (optional)
     * @param filterBy  (optional)
     * @param vocalist  (optional)
     * @param maxResults  (optional, default to 25)
     * @param fields  (optional)
     * @param languagePreference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsTopRatedGetCall(Integer durationHours, OffsetDateTime startDate, TopSongsDateFilterType filterBy, SongVocalistSelection vocalist, Integer maxResults, SongOptionalFields fields, ContentLanguagePreference languagePreference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/songs/top-rated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (durationHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("durationHours", durationHours));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (filterBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterBy", filterBy));
        }

        if (vocalist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vocalist", vocalist));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (languagePreference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languagePreference", languagePreference));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSongsTopRatedGetValidateBeforeCall(Integer durationHours, OffsetDateTime startDate, TopSongsDateFilterType filterBy, SongVocalistSelection vocalist, Integer maxResults, SongOptionalFields fields, ContentLanguagePreference languagePreference, final ApiCallback _callback) throws ApiException {
        return apiSongsTopRatedGetCall(durationHours, startDate, filterBy, vocalist, maxResults, fields, languagePreference, _callback);

    }

    /**
     * 
     * 
     * @param durationHours  (optional)
     * @param startDate  (optional)
     * @param filterBy  (optional)
     * @param vocalist  (optional)
     * @param maxResults  (optional, default to 25)
     * @param fields  (optional)
     * @param languagePreference  (optional)
     * @return List&lt;SongForApiContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<SongForApiContract> apiSongsTopRatedGet(Integer durationHours, OffsetDateTime startDate, TopSongsDateFilterType filterBy, SongVocalistSelection vocalist, Integer maxResults, SongOptionalFields fields, ContentLanguagePreference languagePreference) throws ApiException {
        ApiResponse<List<SongForApiContract>> localVarResp = apiSongsTopRatedGetWithHttpInfo(durationHours, startDate, filterBy, vocalist, maxResults, fields, languagePreference);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param durationHours  (optional)
     * @param startDate  (optional)
     * @param filterBy  (optional)
     * @param vocalist  (optional)
     * @param maxResults  (optional, default to 25)
     * @param fields  (optional)
     * @param languagePreference  (optional)
     * @return ApiResponse&lt;List&lt;SongForApiContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SongForApiContract>> apiSongsTopRatedGetWithHttpInfo(Integer durationHours, OffsetDateTime startDate, TopSongsDateFilterType filterBy, SongVocalistSelection vocalist, Integer maxResults, SongOptionalFields fields, ContentLanguagePreference languagePreference) throws ApiException {
        okhttp3.Call localVarCall = apiSongsTopRatedGetValidateBeforeCall(durationHours, startDate, filterBy, vocalist, maxResults, fields, languagePreference, null);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param durationHours  (optional)
     * @param startDate  (optional)
     * @param filterBy  (optional)
     * @param vocalist  (optional)
     * @param maxResults  (optional, default to 25)
     * @param fields  (optional)
     * @param languagePreference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSongsTopRatedGetAsync(Integer durationHours, OffsetDateTime startDate, TopSongsDateFilterType filterBy, SongVocalistSelection vocalist, Integer maxResults, SongOptionalFields fields, ContentLanguagePreference languagePreference, final ApiCallback<List<SongForApiContract>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSongsTopRatedGetValidateBeforeCall(durationHours, startDate, filterBy, vocalist, maxResults, fields, languagePreference, _callback);
        Type localVarReturnType = new TypeToken<List<SongForApiContract>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
