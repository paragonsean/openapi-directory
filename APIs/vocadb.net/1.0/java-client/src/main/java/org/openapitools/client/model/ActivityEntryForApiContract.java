/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ArchivedObjectVersionForApiContract;
import org.openapitools.client.model.EntryEditEvent;
import org.openapitools.client.model.EntryForApiContract;
import org.openapitools.client.model.UserForApiContract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivityEntryForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityEntryForApiContract {
  public static final String SERIALIZED_NAME_ARCHIVED_VERSION = "archivedVersion";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_VERSION)
  private ArchivedObjectVersionForApiContract archivedVersion;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserForApiContract author;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_EDIT_EVENT = "editEvent";
  @SerializedName(SERIALIZED_NAME_EDIT_EVENT)
  private EntryEditEvent editEvent;

  public static final String SERIALIZED_NAME_ENTRY = "entry";
  @SerializedName(SERIALIZED_NAME_ENTRY)
  private EntryForApiContract entry;

  public ActivityEntryForApiContract() {
  }

  public ActivityEntryForApiContract archivedVersion(ArchivedObjectVersionForApiContract archivedVersion) {
    this.archivedVersion = archivedVersion;
    return this;
  }

  /**
   * Get archivedVersion
   * @return archivedVersion
   */
  @javax.annotation.Nullable
  public ArchivedObjectVersionForApiContract getArchivedVersion() {
    return archivedVersion;
  }

  public void setArchivedVersion(ArchivedObjectVersionForApiContract archivedVersion) {
    this.archivedVersion = archivedVersion;
  }


  public ActivityEntryForApiContract author(UserForApiContract author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserForApiContract getAuthor() {
    return author;
  }

  public void setAuthor(UserForApiContract author) {
    this.author = author;
  }


  public ActivityEntryForApiContract createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public ActivityEntryForApiContract editEvent(EntryEditEvent editEvent) {
    this.editEvent = editEvent;
    return this;
  }

  /**
   * Get editEvent
   * @return editEvent
   */
  @javax.annotation.Nullable
  public EntryEditEvent getEditEvent() {
    return editEvent;
  }

  public void setEditEvent(EntryEditEvent editEvent) {
    this.editEvent = editEvent;
  }


  public ActivityEntryForApiContract entry(EntryForApiContract entry) {
    this.entry = entry;
    return this;
  }

  /**
   * Get entry
   * @return entry
   */
  @javax.annotation.Nullable
  public EntryForApiContract getEntry() {
    return entry;
  }

  public void setEntry(EntryForApiContract entry) {
    this.entry = entry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityEntryForApiContract activityEntryForApiContract = (ActivityEntryForApiContract) o;
    return Objects.equals(this.archivedVersion, activityEntryForApiContract.archivedVersion) &&
        Objects.equals(this.author, activityEntryForApiContract.author) &&
        Objects.equals(this.createDate, activityEntryForApiContract.createDate) &&
        Objects.equals(this.editEvent, activityEntryForApiContract.editEvent) &&
        Objects.equals(this.entry, activityEntryForApiContract.entry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archivedVersion, author, createDate, editEvent, entry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityEntryForApiContract {\n");
    sb.append("    archivedVersion: ").append(toIndentedString(archivedVersion)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    editEvent: ").append(toIndentedString(editEvent)).append("\n");
    sb.append("    entry: ").append(toIndentedString(entry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archivedVersion");
    openapiFields.add("author");
    openapiFields.add("createDate");
    openapiFields.add("editEvent");
    openapiFields.add("entry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityEntryForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityEntryForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityEntryForApiContract is not found in the empty JSON string", ActivityEntryForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityEntryForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityEntryForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `archivedVersion`
      if (jsonObj.get("archivedVersion") != null && !jsonObj.get("archivedVersion").isJsonNull()) {
        ArchivedObjectVersionForApiContract.validateJsonElement(jsonObj.get("archivedVersion"));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserForApiContract.validateJsonElement(jsonObj.get("author"));
      }
      // validate the optional field `editEvent`
      if (jsonObj.get("editEvent") != null && !jsonObj.get("editEvent").isJsonNull()) {
        EntryEditEvent.validateJsonElement(jsonObj.get("editEvent"));
      }
      // validate the optional field `entry`
      if (jsonObj.get("entry") != null && !jsonObj.get("entry").isJsonNull()) {
        EntryForApiContract.validateJsonElement(jsonObj.get("entry"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityEntryForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityEntryForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityEntryForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityEntryForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityEntryForApiContract>() {
           @Override
           public void write(JsonWriter out, ActivityEntryForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityEntryForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityEntryForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityEntryForApiContract
   * @throws IOException if the JSON string is invalid with respect to ActivityEntryForApiContract
   */
  public static ActivityEntryForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityEntryForApiContract.class);
  }

  /**
   * Convert an instance of ActivityEntryForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

