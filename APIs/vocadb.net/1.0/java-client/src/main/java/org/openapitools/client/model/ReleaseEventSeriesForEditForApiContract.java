/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentLanguageSelection;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.LocalizedStringWithIdContract;
import org.openapitools.client.model.WebLinkForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReleaseEventSeriesForEditForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReleaseEventSeriesForEditForApiContract {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private EventCategory category;

  public static final String SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE = "defaultNameLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE)
  private ContentLanguageSelection defaultNameLanguage;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<LocalizedStringWithIdContract> names;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_WEB_LINKS = "webLinks";
  @SerializedName(SERIALIZED_NAME_WEB_LINKS)
  private List<WebLinkForApiContract> webLinks;

  public ReleaseEventSeriesForEditForApiContract() {
  }

  public ReleaseEventSeriesForEditForApiContract category(EventCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public EventCategory getCategory() {
    return category;
  }

  public void setCategory(EventCategory category) {
    this.category = category;
  }


  public ReleaseEventSeriesForEditForApiContract defaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
    return this;
  }

  /**
   * Get defaultNameLanguage
   * @return defaultNameLanguage
   */
  @javax.annotation.Nullable
  public ContentLanguageSelection getDefaultNameLanguage() {
    return defaultNameLanguage;
  }

  public void setDefaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
  }


  public ReleaseEventSeriesForEditForApiContract deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public ReleaseEventSeriesForEditForApiContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReleaseEventSeriesForEditForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ReleaseEventSeriesForEditForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public ReleaseEventSeriesForEditForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReleaseEventSeriesForEditForApiContract names(List<LocalizedStringWithIdContract> names) {
    this.names = names;
    return this;
  }

  public ReleaseEventSeriesForEditForApiContract addNamesItem(LocalizedStringWithIdContract namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List<LocalizedStringWithIdContract> getNames() {
    return names;
  }

  public void setNames(List<LocalizedStringWithIdContract> names) {
    this.names = names;
  }


  public ReleaseEventSeriesForEditForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public ReleaseEventSeriesForEditForApiContract webLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
    return this;
  }

  public ReleaseEventSeriesForEditForApiContract addWebLinksItem(WebLinkForApiContract webLinksItem) {
    if (this.webLinks == null) {
      this.webLinks = new ArrayList<>();
    }
    this.webLinks.add(webLinksItem);
    return this;
  }

  /**
   * Get webLinks
   * @return webLinks
   */
  @javax.annotation.Nullable
  public List<WebLinkForApiContract> getWebLinks() {
    return webLinks;
  }

  public void setWebLinks(List<WebLinkForApiContract> webLinks) {
    this.webLinks = webLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReleaseEventSeriesForEditForApiContract releaseEventSeriesForEditForApiContract = (ReleaseEventSeriesForEditForApiContract) o;
    return Objects.equals(this.category, releaseEventSeriesForEditForApiContract.category) &&
        Objects.equals(this.defaultNameLanguage, releaseEventSeriesForEditForApiContract.defaultNameLanguage) &&
        Objects.equals(this.deleted, releaseEventSeriesForEditForApiContract.deleted) &&
        Objects.equals(this.description, releaseEventSeriesForEditForApiContract.description) &&
        Objects.equals(this.id, releaseEventSeriesForEditForApiContract.id) &&
        Objects.equals(this.mainPicture, releaseEventSeriesForEditForApiContract.mainPicture) &&
        Objects.equals(this.name, releaseEventSeriesForEditForApiContract.name) &&
        Objects.equals(this.names, releaseEventSeriesForEditForApiContract.names) &&
        Objects.equals(this.status, releaseEventSeriesForEditForApiContract.status) &&
        Objects.equals(this.webLinks, releaseEventSeriesForEditForApiContract.webLinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, defaultNameLanguage, deleted, description, id, mainPicture, name, names, status, webLinks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReleaseEventSeriesForEditForApiContract {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    defaultNameLanguage: ").append(toIndentedString(defaultNameLanguage)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    webLinks: ").append(toIndentedString(webLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("defaultNameLanguage");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("mainPicture");
    openapiFields.add("name");
    openapiFields.add("names");
    openapiFields.add("status");
    openapiFields.add("webLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReleaseEventSeriesForEditForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReleaseEventSeriesForEditForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReleaseEventSeriesForEditForApiContract is not found in the empty JSON string", ReleaseEventSeriesForEditForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReleaseEventSeriesForEditForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReleaseEventSeriesForEditForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        EventCategory.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `defaultNameLanguage`
      if (jsonObj.get("defaultNameLanguage") != null && !jsonObj.get("defaultNameLanguage").isJsonNull()) {
        ContentLanguageSelection.validateJsonElement(jsonObj.get("defaultNameLanguage"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            LocalizedStringWithIdContract.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("webLinks") != null && !jsonObj.get("webLinks").isJsonNull()) {
        JsonArray jsonArraywebLinks = jsonObj.getAsJsonArray("webLinks");
        if (jsonArraywebLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webLinks` to be an array in the JSON string but got `%s`", jsonObj.get("webLinks").toString()));
          }

          // validate the optional field `webLinks` (array)
          for (int i = 0; i < jsonArraywebLinks.size(); i++) {
            WebLinkForApiContract.validateJsonElement(jsonArraywebLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReleaseEventSeriesForEditForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReleaseEventSeriesForEditForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReleaseEventSeriesForEditForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReleaseEventSeriesForEditForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ReleaseEventSeriesForEditForApiContract>() {
           @Override
           public void write(JsonWriter out, ReleaseEventSeriesForEditForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReleaseEventSeriesForEditForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReleaseEventSeriesForEditForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReleaseEventSeriesForEditForApiContract
   * @throws IOException if the JSON string is invalid with respect to ReleaseEventSeriesForEditForApiContract
   */
  public static ReleaseEventSeriesForEditForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReleaseEventSeriesForEditForApiContract.class);
  }

  /**
   * Convert an instance of ReleaseEventSeriesForEditForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

