/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContentLanguagePreference;
import org.openapitools.client.model.DistanceUnit;
import org.openapitools.client.model.NameMatchMode;
import org.openapitools.client.model.VenueForApiContractPartialFindResult;
import org.openapitools.client.model.VenueOptionalFields;
import org.openapitools.client.model.VenueReportType;
import org.openapitools.client.model.VenueSortRule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VenueApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VenueApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VenueApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiVenuesGet
     * @param query  (optional, default to )
     * @param fields  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param lang  (optional)
     * @param sortRule  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param radius  (optional)
     * @param distanceUnit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiVenuesGetCall(String query, VenueOptionalFields fields, Integer start, Integer maxResults, Boolean getTotalCount, NameMatchMode nameMatchMode, ContentLanguagePreference lang, VenueSortRule sortRule, Double latitude, Double longitude, Double radius, DistanceUnit distanceUnit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/venues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (getTotalCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getTotalCount", getTotalCount));
        }

        if (nameMatchMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameMatchMode", nameMatchMode));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (sortRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortRule", sortRule));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiVenuesGetValidateBeforeCall(String query, VenueOptionalFields fields, Integer start, Integer maxResults, Boolean getTotalCount, NameMatchMode nameMatchMode, ContentLanguagePreference lang, VenueSortRule sortRule, Double latitude, Double longitude, Double radius, DistanceUnit distanceUnit, final ApiCallback _callback) throws ApiException {
        return apiVenuesGetCall(query, fields, start, maxResults, getTotalCount, nameMatchMode, lang, sortRule, latitude, longitude, radius, distanceUnit, _callback);

    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param fields  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param lang  (optional)
     * @param sortRule  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param radius  (optional)
     * @param distanceUnit  (optional)
     * @return VenueForApiContractPartialFindResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VenueForApiContractPartialFindResult apiVenuesGet(String query, VenueOptionalFields fields, Integer start, Integer maxResults, Boolean getTotalCount, NameMatchMode nameMatchMode, ContentLanguagePreference lang, VenueSortRule sortRule, Double latitude, Double longitude, Double radius, DistanceUnit distanceUnit) throws ApiException {
        ApiResponse<VenueForApiContractPartialFindResult> localVarResp = apiVenuesGetWithHttpInfo(query, fields, start, maxResults, getTotalCount, nameMatchMode, lang, sortRule, latitude, longitude, radius, distanceUnit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (optional, default to )
     * @param fields  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param lang  (optional)
     * @param sortRule  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param radius  (optional)
     * @param distanceUnit  (optional)
     * @return ApiResponse&lt;VenueForApiContractPartialFindResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VenueForApiContractPartialFindResult> apiVenuesGetWithHttpInfo(String query, VenueOptionalFields fields, Integer start, Integer maxResults, Boolean getTotalCount, NameMatchMode nameMatchMode, ContentLanguagePreference lang, VenueSortRule sortRule, Double latitude, Double longitude, Double radius, DistanceUnit distanceUnit) throws ApiException {
        okhttp3.Call localVarCall = apiVenuesGetValidateBeforeCall(query, fields, start, maxResults, getTotalCount, nameMatchMode, lang, sortRule, latitude, longitude, radius, distanceUnit, null);
        Type localVarReturnType = new TypeToken<VenueForApiContractPartialFindResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (optional, default to )
     * @param fields  (optional)
     * @param start  (optional, default to 0)
     * @param maxResults  (optional, default to 10)
     * @param getTotalCount  (optional, default to false)
     * @param nameMatchMode  (optional)
     * @param lang  (optional)
     * @param sortRule  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param radius  (optional)
     * @param distanceUnit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiVenuesGetAsync(String query, VenueOptionalFields fields, Integer start, Integer maxResults, Boolean getTotalCount, NameMatchMode nameMatchMode, ContentLanguagePreference lang, VenueSortRule sortRule, Double latitude, Double longitude, Double radius, DistanceUnit distanceUnit, final ApiCallback<VenueForApiContractPartialFindResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiVenuesGetValidateBeforeCall(query, fields, start, maxResults, getTotalCount, nameMatchMode, lang, sortRule, latitude, longitude, radius, distanceUnit, _callback);
        Type localVarReturnType = new TypeToken<VenueForApiContractPartialFindResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiVenuesIdDelete
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiVenuesIdDeleteCall(Integer id, String notes, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/venues/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (hardDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hardDelete", hardDelete));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiVenuesIdDeleteValidateBeforeCall(Integer id, String notes, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiVenuesIdDelete(Async)");
        }

        return apiVenuesIdDeleteCall(id, notes, hardDelete, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiVenuesIdDelete(Integer id, String notes, Boolean hardDelete) throws ApiException {
        apiVenuesIdDeleteWithHttpInfo(id, notes, hardDelete);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiVenuesIdDeleteWithHttpInfo(Integer id, String notes, Boolean hardDelete) throws ApiException {
        okhttp3.Call localVarCall = apiVenuesIdDeleteValidateBeforeCall(id, notes, hardDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param notes  (optional, default to )
     * @param hardDelete  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiVenuesIdDeleteAsync(Integer id, String notes, Boolean hardDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiVenuesIdDeleteValidateBeforeCall(id, notes, hardDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiVenuesIdReportsPost
     * @param id  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiVenuesIdReportsPostCall(Integer id, VenueReportType reportType, String notes, Integer versionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/venues/{id}/reports"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reportType", reportType));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        if (versionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionNumber", versionNumber));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiVenuesIdReportsPostValidateBeforeCall(Integer id, VenueReportType reportType, String notes, Integer versionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiVenuesIdReportsPost(Async)");
        }

        return apiVenuesIdReportsPostCall(id, reportType, notes, versionNumber, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiVenuesIdReportsPost(Integer id, VenueReportType reportType, String notes, Integer versionNumber) throws ApiException {
        apiVenuesIdReportsPostWithHttpInfo(id, reportType, notes, versionNumber);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiVenuesIdReportsPostWithHttpInfo(Integer id, VenueReportType reportType, String notes, Integer versionNumber) throws ApiException {
        okhttp3.Call localVarCall = apiVenuesIdReportsPostValidateBeforeCall(id, reportType, notes, versionNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param reportType  (optional)
     * @param notes  (optional)
     * @param versionNumber  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiVenuesIdReportsPostAsync(Integer id, VenueReportType reportType, String notes, Integer versionNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiVenuesIdReportsPostValidateBeforeCall(id, reportType, notes, versionNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
