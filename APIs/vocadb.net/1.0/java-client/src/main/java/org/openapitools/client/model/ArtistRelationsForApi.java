/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlbumForApiContract;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArtistRelationsForApi
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArtistRelationsForApi {
  public static final String SERIALIZED_NAME_LATEST_ALBUMS = "latestAlbums";
  @SerializedName(SERIALIZED_NAME_LATEST_ALBUMS)
  private List<AlbumForApiContract> latestAlbums;

  public static final String SERIALIZED_NAME_LATEST_EVENTS = "latestEvents";
  @SerializedName(SERIALIZED_NAME_LATEST_EVENTS)
  private List<ReleaseEventForApiContract> latestEvents;

  public static final String SERIALIZED_NAME_LATEST_SONGS = "latestSongs";
  @SerializedName(SERIALIZED_NAME_LATEST_SONGS)
  private List<SongForApiContract> latestSongs;

  public static final String SERIALIZED_NAME_POPULAR_ALBUMS = "popularAlbums";
  @SerializedName(SERIALIZED_NAME_POPULAR_ALBUMS)
  private List<AlbumForApiContract> popularAlbums;

  public static final String SERIALIZED_NAME_POPULAR_SONGS = "popularSongs";
  @SerializedName(SERIALIZED_NAME_POPULAR_SONGS)
  private List<SongForApiContract> popularSongs;

  public ArtistRelationsForApi() {
  }

  public ArtistRelationsForApi latestAlbums(List<AlbumForApiContract> latestAlbums) {
    this.latestAlbums = latestAlbums;
    return this;
  }

  public ArtistRelationsForApi addLatestAlbumsItem(AlbumForApiContract latestAlbumsItem) {
    if (this.latestAlbums == null) {
      this.latestAlbums = new ArrayList<>();
    }
    this.latestAlbums.add(latestAlbumsItem);
    return this;
  }

  /**
   * Get latestAlbums
   * @return latestAlbums
   */
  @javax.annotation.Nullable
  public List<AlbumForApiContract> getLatestAlbums() {
    return latestAlbums;
  }

  public void setLatestAlbums(List<AlbumForApiContract> latestAlbums) {
    this.latestAlbums = latestAlbums;
  }


  public ArtistRelationsForApi latestEvents(List<ReleaseEventForApiContract> latestEvents) {
    this.latestEvents = latestEvents;
    return this;
  }

  public ArtistRelationsForApi addLatestEventsItem(ReleaseEventForApiContract latestEventsItem) {
    if (this.latestEvents == null) {
      this.latestEvents = new ArrayList<>();
    }
    this.latestEvents.add(latestEventsItem);
    return this;
  }

  /**
   * Get latestEvents
   * @return latestEvents
   */
  @javax.annotation.Nullable
  public List<ReleaseEventForApiContract> getLatestEvents() {
    return latestEvents;
  }

  public void setLatestEvents(List<ReleaseEventForApiContract> latestEvents) {
    this.latestEvents = latestEvents;
  }


  public ArtistRelationsForApi latestSongs(List<SongForApiContract> latestSongs) {
    this.latestSongs = latestSongs;
    return this;
  }

  public ArtistRelationsForApi addLatestSongsItem(SongForApiContract latestSongsItem) {
    if (this.latestSongs == null) {
      this.latestSongs = new ArrayList<>();
    }
    this.latestSongs.add(latestSongsItem);
    return this;
  }

  /**
   * Get latestSongs
   * @return latestSongs
   */
  @javax.annotation.Nullable
  public List<SongForApiContract> getLatestSongs() {
    return latestSongs;
  }

  public void setLatestSongs(List<SongForApiContract> latestSongs) {
    this.latestSongs = latestSongs;
  }


  public ArtistRelationsForApi popularAlbums(List<AlbumForApiContract> popularAlbums) {
    this.popularAlbums = popularAlbums;
    return this;
  }

  public ArtistRelationsForApi addPopularAlbumsItem(AlbumForApiContract popularAlbumsItem) {
    if (this.popularAlbums == null) {
      this.popularAlbums = new ArrayList<>();
    }
    this.popularAlbums.add(popularAlbumsItem);
    return this;
  }

  /**
   * Get popularAlbums
   * @return popularAlbums
   */
  @javax.annotation.Nullable
  public List<AlbumForApiContract> getPopularAlbums() {
    return popularAlbums;
  }

  public void setPopularAlbums(List<AlbumForApiContract> popularAlbums) {
    this.popularAlbums = popularAlbums;
  }


  public ArtistRelationsForApi popularSongs(List<SongForApiContract> popularSongs) {
    this.popularSongs = popularSongs;
    return this;
  }

  public ArtistRelationsForApi addPopularSongsItem(SongForApiContract popularSongsItem) {
    if (this.popularSongs == null) {
      this.popularSongs = new ArrayList<>();
    }
    this.popularSongs.add(popularSongsItem);
    return this;
  }

  /**
   * Get popularSongs
   * @return popularSongs
   */
  @javax.annotation.Nullable
  public List<SongForApiContract> getPopularSongs() {
    return popularSongs;
  }

  public void setPopularSongs(List<SongForApiContract> popularSongs) {
    this.popularSongs = popularSongs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtistRelationsForApi artistRelationsForApi = (ArtistRelationsForApi) o;
    return Objects.equals(this.latestAlbums, artistRelationsForApi.latestAlbums) &&
        Objects.equals(this.latestEvents, artistRelationsForApi.latestEvents) &&
        Objects.equals(this.latestSongs, artistRelationsForApi.latestSongs) &&
        Objects.equals(this.popularAlbums, artistRelationsForApi.popularAlbums) &&
        Objects.equals(this.popularSongs, artistRelationsForApi.popularSongs);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(latestAlbums, latestEvents, latestSongs, popularAlbums, popularSongs);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtistRelationsForApi {\n");
    sb.append("    latestAlbums: ").append(toIndentedString(latestAlbums)).append("\n");
    sb.append("    latestEvents: ").append(toIndentedString(latestEvents)).append("\n");
    sb.append("    latestSongs: ").append(toIndentedString(latestSongs)).append("\n");
    sb.append("    popularAlbums: ").append(toIndentedString(popularAlbums)).append("\n");
    sb.append("    popularSongs: ").append(toIndentedString(popularSongs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("latestAlbums");
    openapiFields.add("latestEvents");
    openapiFields.add("latestSongs");
    openapiFields.add("popularAlbums");
    openapiFields.add("popularSongs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArtistRelationsForApi
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArtistRelationsForApi.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArtistRelationsForApi is not found in the empty JSON string", ArtistRelationsForApi.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArtistRelationsForApi.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArtistRelationsForApi` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("latestAlbums") != null && !jsonObj.get("latestAlbums").isJsonNull()) {
        JsonArray jsonArraylatestAlbums = jsonObj.getAsJsonArray("latestAlbums");
        if (jsonArraylatestAlbums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latestAlbums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latestAlbums` to be an array in the JSON string but got `%s`", jsonObj.get("latestAlbums").toString()));
          }

          // validate the optional field `latestAlbums` (array)
          for (int i = 0; i < jsonArraylatestAlbums.size(); i++) {
            AlbumForApiContract.validateJsonElement(jsonArraylatestAlbums.get(i));
          };
        }
      }
      if (jsonObj.get("latestEvents") != null && !jsonObj.get("latestEvents").isJsonNull()) {
        JsonArray jsonArraylatestEvents = jsonObj.getAsJsonArray("latestEvents");
        if (jsonArraylatestEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latestEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latestEvents` to be an array in the JSON string but got `%s`", jsonObj.get("latestEvents").toString()));
          }

          // validate the optional field `latestEvents` (array)
          for (int i = 0; i < jsonArraylatestEvents.size(); i++) {
            ReleaseEventForApiContract.validateJsonElement(jsonArraylatestEvents.get(i));
          };
        }
      }
      if (jsonObj.get("latestSongs") != null && !jsonObj.get("latestSongs").isJsonNull()) {
        JsonArray jsonArraylatestSongs = jsonObj.getAsJsonArray("latestSongs");
        if (jsonArraylatestSongs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latestSongs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latestSongs` to be an array in the JSON string but got `%s`", jsonObj.get("latestSongs").toString()));
          }

          // validate the optional field `latestSongs` (array)
          for (int i = 0; i < jsonArraylatestSongs.size(); i++) {
            SongForApiContract.validateJsonElement(jsonArraylatestSongs.get(i));
          };
        }
      }
      if (jsonObj.get("popularAlbums") != null && !jsonObj.get("popularAlbums").isJsonNull()) {
        JsonArray jsonArraypopularAlbums = jsonObj.getAsJsonArray("popularAlbums");
        if (jsonArraypopularAlbums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("popularAlbums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `popularAlbums` to be an array in the JSON string but got `%s`", jsonObj.get("popularAlbums").toString()));
          }

          // validate the optional field `popularAlbums` (array)
          for (int i = 0; i < jsonArraypopularAlbums.size(); i++) {
            AlbumForApiContract.validateJsonElement(jsonArraypopularAlbums.get(i));
          };
        }
      }
      if (jsonObj.get("popularSongs") != null && !jsonObj.get("popularSongs").isJsonNull()) {
        JsonArray jsonArraypopularSongs = jsonObj.getAsJsonArray("popularSongs");
        if (jsonArraypopularSongs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("popularSongs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `popularSongs` to be an array in the JSON string but got `%s`", jsonObj.get("popularSongs").toString()));
          }

          // validate the optional field `popularSongs` (array)
          for (int i = 0; i < jsonArraypopularSongs.size(); i++) {
            SongForApiContract.validateJsonElement(jsonArraypopularSongs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArtistRelationsForApi.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArtistRelationsForApi' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArtistRelationsForApi> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArtistRelationsForApi.class));

       return (TypeAdapter<T>) new TypeAdapter<ArtistRelationsForApi>() {
           @Override
           public void write(JsonWriter out, ArtistRelationsForApi value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArtistRelationsForApi read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArtistRelationsForApi given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArtistRelationsForApi
   * @throws IOException if the JSON string is invalid with respect to ArtistRelationsForApi
   */
  public static ArtistRelationsForApi fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArtistRelationsForApi.class);
  }

  /**
   * Convert an instance of ArtistRelationsForApi to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

