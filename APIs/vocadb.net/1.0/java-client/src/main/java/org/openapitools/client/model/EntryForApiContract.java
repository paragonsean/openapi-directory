/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ArchivedWebLinkContract;
import org.openapitools.client.model.ArtistType;
import org.openapitools.client.model.ContentLanguageSelection;
import org.openapitools.client.model.DiscType;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EntryThumbForApiContract;
import org.openapitools.client.model.EntryType;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.LocalizedStringContract;
import org.openapitools.client.model.PVContract;
import org.openapitools.client.model.SongListFeaturedCategory;
import org.openapitools.client.model.SongType;
import org.openapitools.client.model.TagUsageForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntryForApiContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntryForApiContract {
  public static final String SERIALIZED_NAME_ACTIVITY_DATE = "activityDate";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DATE)
  private OffsetDateTime activityDate;

  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_ARTIST_STRING = "artistString";
  @SerializedName(SERIALIZED_NAME_ARTIST_STRING)
  private String artistString;

  public static final String SERIALIZED_NAME_ARTIST_TYPE = "artistType";
  @SerializedName(SERIALIZED_NAME_ARTIST_TYPE)
  private ArtistType artistType;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_DEFAULT_NAME = "defaultName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME)
  private String defaultName;

  public static final String SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE = "defaultNameLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAME_LANGUAGE)
  private ContentLanguageSelection defaultNameLanguage;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISC_TYPE = "discType";
  @SerializedName(SERIALIZED_NAME_DISC_TYPE)
  private DiscType discType;

  public static final String SERIALIZED_NAME_ENTRY_TYPE = "entryType";
  @SerializedName(SERIALIZED_NAME_ENTRY_TYPE)
  private EntryType entryType;

  public static final String SERIALIZED_NAME_EVENT_CATEGORY = "eventCategory";
  @SerializedName(SERIALIZED_NAME_EVENT_CATEGORY)
  private EventCategory eventCategory;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MAIN_PICTURE = "mainPicture";
  @SerializedName(SERIALIZED_NAME_MAIN_PICTURE)
  private EntryThumbForApiContract mainPicture;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<LocalizedStringContract> names;

  public static final String SERIALIZED_NAME_PVS = "pvs";
  @SerializedName(SERIALIZED_NAME_PVS)
  private List<PVContract> pvs;

  public static final String SERIALIZED_NAME_RELEASE_EVENT_SERIES_NAME = "releaseEventSeriesName";
  @SerializedName(SERIALIZED_NAME_RELEASE_EVENT_SERIES_NAME)
  private String releaseEventSeriesName;

  public static final String SERIALIZED_NAME_SONG_LIST_FEATURED_CATEGORY = "songListFeaturedCategory";
  @SerializedName(SERIALIZED_NAME_SONG_LIST_FEATURED_CATEGORY)
  private SongListFeaturedCategory songListFeaturedCategory;

  public static final String SERIALIZED_NAME_SONG_TYPE = "songType";
  @SerializedName(SERIALIZED_NAME_SONG_TYPE)
  private SongType songType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EntryStatus status;

  public static final String SERIALIZED_NAME_TAG_CATEGORY_NAME = "tagCategoryName";
  @SerializedName(SERIALIZED_NAME_TAG_CATEGORY_NAME)
  private String tagCategoryName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagUsageForApiContract> tags;

  public static final String SERIALIZED_NAME_URL_SLUG = "urlSlug";
  @SerializedName(SERIALIZED_NAME_URL_SLUG)
  private String urlSlug;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_WEB_LINKS = "webLinks";
  @SerializedName(SERIALIZED_NAME_WEB_LINKS)
  private List<ArchivedWebLinkContract> webLinks;

  public EntryForApiContract() {
  }

  public EntryForApiContract activityDate(OffsetDateTime activityDate) {
    this.activityDate = activityDate;
    return this;
  }

  /**
   * Get activityDate
   * @return activityDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivityDate() {
    return activityDate;
  }

  public void setActivityDate(OffsetDateTime activityDate) {
    this.activityDate = activityDate;
  }


  public EntryForApiContract additionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
    return this;
  }

  /**
   * Get additionalNames
   * @return additionalNames
   */
  @javax.annotation.Nullable
  public String getAdditionalNames() {
    return additionalNames;
  }

  public void setAdditionalNames(String additionalNames) {
    this.additionalNames = additionalNames;
  }


  public EntryForApiContract artistString(String artistString) {
    this.artistString = artistString;
    return this;
  }

  /**
   * Get artistString
   * @return artistString
   */
  @javax.annotation.Nullable
  public String getArtistString() {
    return artistString;
  }

  public void setArtistString(String artistString) {
    this.artistString = artistString;
  }


  public EntryForApiContract artistType(ArtistType artistType) {
    this.artistType = artistType;
    return this;
  }

  /**
   * Get artistType
   * @return artistType
   */
  @javax.annotation.Nullable
  public ArtistType getArtistType() {
    return artistType;
  }

  public void setArtistType(ArtistType artistType) {
    this.artistType = artistType;
  }


  public EntryForApiContract createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public EntryForApiContract defaultName(String defaultName) {
    this.defaultName = defaultName;
    return this;
  }

  /**
   * Get defaultName
   * @return defaultName
   */
  @javax.annotation.Nullable
  public String getDefaultName() {
    return defaultName;
  }

  public void setDefaultName(String defaultName) {
    this.defaultName = defaultName;
  }


  public EntryForApiContract defaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
    return this;
  }

  /**
   * Get defaultNameLanguage
   * @return defaultNameLanguage
   */
  @javax.annotation.Nullable
  public ContentLanguageSelection getDefaultNameLanguage() {
    return defaultNameLanguage;
  }

  public void setDefaultNameLanguage(ContentLanguageSelection defaultNameLanguage) {
    this.defaultNameLanguage = defaultNameLanguage;
  }


  public EntryForApiContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EntryForApiContract discType(DiscType discType) {
    this.discType = discType;
    return this;
  }

  /**
   * Get discType
   * @return discType
   */
  @javax.annotation.Nullable
  public DiscType getDiscType() {
    return discType;
  }

  public void setDiscType(DiscType discType) {
    this.discType = discType;
  }


  public EntryForApiContract entryType(EntryType entryType) {
    this.entryType = entryType;
    return this;
  }

  /**
   * Get entryType
   * @return entryType
   */
  @javax.annotation.Nullable
  public EntryType getEntryType() {
    return entryType;
  }

  public void setEntryType(EntryType entryType) {
    this.entryType = entryType;
  }


  public EntryForApiContract eventCategory(EventCategory eventCategory) {
    this.eventCategory = eventCategory;
    return this;
  }

  /**
   * Get eventCategory
   * @return eventCategory
   */
  @javax.annotation.Nullable
  public EventCategory getEventCategory() {
    return eventCategory;
  }

  public void setEventCategory(EventCategory eventCategory) {
    this.eventCategory = eventCategory;
  }


  public EntryForApiContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EntryForApiContract mainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
    return this;
  }

  /**
   * Get mainPicture
   * @return mainPicture
   */
  @javax.annotation.Nullable
  public EntryThumbForApiContract getMainPicture() {
    return mainPicture;
  }

  public void setMainPicture(EntryThumbForApiContract mainPicture) {
    this.mainPicture = mainPicture;
  }


  public EntryForApiContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EntryForApiContract names(List<LocalizedStringContract> names) {
    this.names = names;
    return this;
  }

  public EntryForApiContract addNamesItem(LocalizedStringContract namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  public List<LocalizedStringContract> getNames() {
    return names;
  }

  public void setNames(List<LocalizedStringContract> names) {
    this.names = names;
  }


  public EntryForApiContract pvs(List<PVContract> pvs) {
    this.pvs = pvs;
    return this;
  }

  public EntryForApiContract addPvsItem(PVContract pvsItem) {
    if (this.pvs == null) {
      this.pvs = new ArrayList<>();
    }
    this.pvs.add(pvsItem);
    return this;
  }

  /**
   * Get pvs
   * @return pvs
   */
  @javax.annotation.Nullable
  public List<PVContract> getPvs() {
    return pvs;
  }

  public void setPvs(List<PVContract> pvs) {
    this.pvs = pvs;
  }


  public EntryForApiContract releaseEventSeriesName(String releaseEventSeriesName) {
    this.releaseEventSeriesName = releaseEventSeriesName;
    return this;
  }

  /**
   * Get releaseEventSeriesName
   * @return releaseEventSeriesName
   */
  @javax.annotation.Nullable
  public String getReleaseEventSeriesName() {
    return releaseEventSeriesName;
  }

  public void setReleaseEventSeriesName(String releaseEventSeriesName) {
    this.releaseEventSeriesName = releaseEventSeriesName;
  }


  public EntryForApiContract songListFeaturedCategory(SongListFeaturedCategory songListFeaturedCategory) {
    this.songListFeaturedCategory = songListFeaturedCategory;
    return this;
  }

  /**
   * Get songListFeaturedCategory
   * @return songListFeaturedCategory
   */
  @javax.annotation.Nullable
  public SongListFeaturedCategory getSongListFeaturedCategory() {
    return songListFeaturedCategory;
  }

  public void setSongListFeaturedCategory(SongListFeaturedCategory songListFeaturedCategory) {
    this.songListFeaturedCategory = songListFeaturedCategory;
  }


  public EntryForApiContract songType(SongType songType) {
    this.songType = songType;
    return this;
  }

  /**
   * Get songType
   * @return songType
   */
  @javax.annotation.Nullable
  public SongType getSongType() {
    return songType;
  }

  public void setSongType(SongType songType) {
    this.songType = songType;
  }


  public EntryForApiContract status(EntryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EntryStatus getStatus() {
    return status;
  }

  public void setStatus(EntryStatus status) {
    this.status = status;
  }


  public EntryForApiContract tagCategoryName(String tagCategoryName) {
    this.tagCategoryName = tagCategoryName;
    return this;
  }

  /**
   * Get tagCategoryName
   * @return tagCategoryName
   */
  @javax.annotation.Nullable
  public String getTagCategoryName() {
    return tagCategoryName;
  }

  public void setTagCategoryName(String tagCategoryName) {
    this.tagCategoryName = tagCategoryName;
  }


  public EntryForApiContract tags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
    return this;
  }

  public EntryForApiContract addTagsItem(TagUsageForApiContract tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagUsageForApiContract> getTags() {
    return tags;
  }

  public void setTags(List<TagUsageForApiContract> tags) {
    this.tags = tags;
  }


  public EntryForApiContract urlSlug(String urlSlug) {
    this.urlSlug = urlSlug;
    return this;
  }

  /**
   * Get urlSlug
   * @return urlSlug
   */
  @javax.annotation.Nullable
  public String getUrlSlug() {
    return urlSlug;
  }

  public void setUrlSlug(String urlSlug) {
    this.urlSlug = urlSlug;
  }


  public EntryForApiContract version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public EntryForApiContract webLinks(List<ArchivedWebLinkContract> webLinks) {
    this.webLinks = webLinks;
    return this;
  }

  public EntryForApiContract addWebLinksItem(ArchivedWebLinkContract webLinksItem) {
    if (this.webLinks == null) {
      this.webLinks = new ArrayList<>();
    }
    this.webLinks.add(webLinksItem);
    return this;
  }

  /**
   * Get webLinks
   * @return webLinks
   */
  @javax.annotation.Nullable
  public List<ArchivedWebLinkContract> getWebLinks() {
    return webLinks;
  }

  public void setWebLinks(List<ArchivedWebLinkContract> webLinks) {
    this.webLinks = webLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryForApiContract entryForApiContract = (EntryForApiContract) o;
    return Objects.equals(this.activityDate, entryForApiContract.activityDate) &&
        Objects.equals(this.additionalNames, entryForApiContract.additionalNames) &&
        Objects.equals(this.artistString, entryForApiContract.artistString) &&
        Objects.equals(this.artistType, entryForApiContract.artistType) &&
        Objects.equals(this.createDate, entryForApiContract.createDate) &&
        Objects.equals(this.defaultName, entryForApiContract.defaultName) &&
        Objects.equals(this.defaultNameLanguage, entryForApiContract.defaultNameLanguage) &&
        Objects.equals(this.description, entryForApiContract.description) &&
        Objects.equals(this.discType, entryForApiContract.discType) &&
        Objects.equals(this.entryType, entryForApiContract.entryType) &&
        Objects.equals(this.eventCategory, entryForApiContract.eventCategory) &&
        Objects.equals(this.id, entryForApiContract.id) &&
        Objects.equals(this.mainPicture, entryForApiContract.mainPicture) &&
        Objects.equals(this.name, entryForApiContract.name) &&
        Objects.equals(this.names, entryForApiContract.names) &&
        Objects.equals(this.pvs, entryForApiContract.pvs) &&
        Objects.equals(this.releaseEventSeriesName, entryForApiContract.releaseEventSeriesName) &&
        Objects.equals(this.songListFeaturedCategory, entryForApiContract.songListFeaturedCategory) &&
        Objects.equals(this.songType, entryForApiContract.songType) &&
        Objects.equals(this.status, entryForApiContract.status) &&
        Objects.equals(this.tagCategoryName, entryForApiContract.tagCategoryName) &&
        Objects.equals(this.tags, entryForApiContract.tags) &&
        Objects.equals(this.urlSlug, entryForApiContract.urlSlug) &&
        Objects.equals(this.version, entryForApiContract.version) &&
        Objects.equals(this.webLinks, entryForApiContract.webLinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityDate, additionalNames, artistString, artistType, createDate, defaultName, defaultNameLanguage, description, discType, entryType, eventCategory, id, mainPicture, name, names, pvs, releaseEventSeriesName, songListFeaturedCategory, songType, status, tagCategoryName, tags, urlSlug, version, webLinks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryForApiContract {\n");
    sb.append("    activityDate: ").append(toIndentedString(activityDate)).append("\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    artistString: ").append(toIndentedString(artistString)).append("\n");
    sb.append("    artistType: ").append(toIndentedString(artistType)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    defaultName: ").append(toIndentedString(defaultName)).append("\n");
    sb.append("    defaultNameLanguage: ").append(toIndentedString(defaultNameLanguage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discType: ").append(toIndentedString(discType)).append("\n");
    sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
    sb.append("    eventCategory: ").append(toIndentedString(eventCategory)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mainPicture: ").append(toIndentedString(mainPicture)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    pvs: ").append(toIndentedString(pvs)).append("\n");
    sb.append("    releaseEventSeriesName: ").append(toIndentedString(releaseEventSeriesName)).append("\n");
    sb.append("    songListFeaturedCategory: ").append(toIndentedString(songListFeaturedCategory)).append("\n");
    sb.append("    songType: ").append(toIndentedString(songType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tagCategoryName: ").append(toIndentedString(tagCategoryName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    urlSlug: ").append(toIndentedString(urlSlug)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    webLinks: ").append(toIndentedString(webLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityDate");
    openapiFields.add("additionalNames");
    openapiFields.add("artistString");
    openapiFields.add("artistType");
    openapiFields.add("createDate");
    openapiFields.add("defaultName");
    openapiFields.add("defaultNameLanguage");
    openapiFields.add("description");
    openapiFields.add("discType");
    openapiFields.add("entryType");
    openapiFields.add("eventCategory");
    openapiFields.add("id");
    openapiFields.add("mainPicture");
    openapiFields.add("name");
    openapiFields.add("names");
    openapiFields.add("pvs");
    openapiFields.add("releaseEventSeriesName");
    openapiFields.add("songListFeaturedCategory");
    openapiFields.add("songType");
    openapiFields.add("status");
    openapiFields.add("tagCategoryName");
    openapiFields.add("tags");
    openapiFields.add("urlSlug");
    openapiFields.add("version");
    openapiFields.add("webLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryForApiContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryForApiContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryForApiContract is not found in the empty JSON string", EntryForApiContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryForApiContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryForApiContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if ((jsonObj.get("artistString") != null && !jsonObj.get("artistString").isJsonNull()) && !jsonObj.get("artistString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistString").toString()));
      }
      // validate the optional field `artistType`
      if (jsonObj.get("artistType") != null && !jsonObj.get("artistType").isJsonNull()) {
        ArtistType.validateJsonElement(jsonObj.get("artistType"));
      }
      if ((jsonObj.get("defaultName") != null && !jsonObj.get("defaultName").isJsonNull()) && !jsonObj.get("defaultName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultName").toString()));
      }
      // validate the optional field `defaultNameLanguage`
      if (jsonObj.get("defaultNameLanguage") != null && !jsonObj.get("defaultNameLanguage").isJsonNull()) {
        ContentLanguageSelection.validateJsonElement(jsonObj.get("defaultNameLanguage"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `discType`
      if (jsonObj.get("discType") != null && !jsonObj.get("discType").isJsonNull()) {
        DiscType.validateJsonElement(jsonObj.get("discType"));
      }
      // validate the optional field `entryType`
      if (jsonObj.get("entryType") != null && !jsonObj.get("entryType").isJsonNull()) {
        EntryType.validateJsonElement(jsonObj.get("entryType"));
      }
      // validate the optional field `eventCategory`
      if (jsonObj.get("eventCategory") != null && !jsonObj.get("eventCategory").isJsonNull()) {
        EventCategory.validateJsonElement(jsonObj.get("eventCategory"));
      }
      // validate the optional field `mainPicture`
      if (jsonObj.get("mainPicture") != null && !jsonObj.get("mainPicture").isJsonNull()) {
        EntryThumbForApiContract.validateJsonElement(jsonObj.get("mainPicture"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            LocalizedStringContract.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      if (jsonObj.get("pvs") != null && !jsonObj.get("pvs").isJsonNull()) {
        JsonArray jsonArraypvs = jsonObj.getAsJsonArray("pvs");
        if (jsonArraypvs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pvs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pvs` to be an array in the JSON string but got `%s`", jsonObj.get("pvs").toString()));
          }

          // validate the optional field `pvs` (array)
          for (int i = 0; i < jsonArraypvs.size(); i++) {
            PVContract.validateJsonElement(jsonArraypvs.get(i));
          };
        }
      }
      if ((jsonObj.get("releaseEventSeriesName") != null && !jsonObj.get("releaseEventSeriesName").isJsonNull()) && !jsonObj.get("releaseEventSeriesName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseEventSeriesName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseEventSeriesName").toString()));
      }
      // validate the optional field `songListFeaturedCategory`
      if (jsonObj.get("songListFeaturedCategory") != null && !jsonObj.get("songListFeaturedCategory").isJsonNull()) {
        SongListFeaturedCategory.validateJsonElement(jsonObj.get("songListFeaturedCategory"));
      }
      // validate the optional field `songType`
      if (jsonObj.get("songType") != null && !jsonObj.get("songType").isJsonNull()) {
        SongType.validateJsonElement(jsonObj.get("songType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EntryStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("tagCategoryName") != null && !jsonObj.get("tagCategoryName").isJsonNull()) && !jsonObj.get("tagCategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagCategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagCategoryName").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagUsageForApiContract.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("urlSlug") != null && !jsonObj.get("urlSlug").isJsonNull()) && !jsonObj.get("urlSlug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlSlug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlSlug").toString()));
      }
      if (jsonObj.get("webLinks") != null && !jsonObj.get("webLinks").isJsonNull()) {
        JsonArray jsonArraywebLinks = jsonObj.getAsJsonArray("webLinks");
        if (jsonArraywebLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webLinks` to be an array in the JSON string but got `%s`", jsonObj.get("webLinks").toString()));
          }

          // validate the optional field `webLinks` (array)
          for (int i = 0; i < jsonArraywebLinks.size(); i++) {
            ArchivedWebLinkContract.validateJsonElement(jsonArraywebLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryForApiContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryForApiContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryForApiContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryForApiContract.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryForApiContract>() {
           @Override
           public void write(JsonWriter out, EntryForApiContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryForApiContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryForApiContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryForApiContract
   * @throws IOException if the JSON string is invalid with respect to EntryForApiContract
   */
  public static EntryForApiContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryForApiContract.class);
  }

  /**
   * Convert an instance of EntryForApiContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

