/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PVExtendedMetadata;
import org.openapitools.client.model.PVService;
import org.openapitools.client.model.PVType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PVContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PVContract {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private Integer createdBy;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EXTENDED_METADATA = "extendedMetadata";
  @SerializedName(SERIALIZED_NAME_EXTENDED_METADATA)
  private PVExtendedMetadata extendedMetadata;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "publishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private OffsetDateTime publishDate;

  public static final String SERIALIZED_NAME_PV_ID = "pvId";
  @SerializedName(SERIALIZED_NAME_PV_ID)
  private String pvId;

  public static final String SERIALIZED_NAME_PV_TYPE = "pvType";
  @SerializedName(SERIALIZED_NAME_PV_TYPE)
  private PVType pvType;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private PVService service;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumbUrl";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public PVContract() {
  }

  public PVContract author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public PVContract createdBy(Integer createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public Integer getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Integer createdBy) {
    this.createdBy = createdBy;
  }


  public PVContract disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public PVContract extendedMetadata(PVExtendedMetadata extendedMetadata) {
    this.extendedMetadata = extendedMetadata;
    return this;
  }

  /**
   * Get extendedMetadata
   * @return extendedMetadata
   */
  @javax.annotation.Nullable
  public PVExtendedMetadata getExtendedMetadata() {
    return extendedMetadata;
  }

  public void setExtendedMetadata(PVExtendedMetadata extendedMetadata) {
    this.extendedMetadata = extendedMetadata;
  }


  public PVContract id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PVContract length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public PVContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PVContract publishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * Get publishDate
   * @return publishDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
  }


  public PVContract pvId(String pvId) {
    this.pvId = pvId;
    return this;
  }

  /**
   * Get pvId
   * @return pvId
   */
  @javax.annotation.Nullable
  public String getPvId() {
    return pvId;
  }

  public void setPvId(String pvId) {
    this.pvId = pvId;
  }


  public PVContract pvType(PVType pvType) {
    this.pvType = pvType;
    return this;
  }

  /**
   * Get pvType
   * @return pvType
   */
  @javax.annotation.Nullable
  public PVType getPvType() {
    return pvType;
  }

  public void setPvType(PVType pvType) {
    this.pvType = pvType;
  }


  public PVContract service(PVService service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public PVService getService() {
    return service;
  }

  public void setService(PVService service) {
    this.service = service;
  }


  public PVContract thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * Get thumbUrl
   * @return thumbUrl
   */
  @javax.annotation.Nullable
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public PVContract url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PVContract pvContract = (PVContract) o;
    return Objects.equals(this.author, pvContract.author) &&
        Objects.equals(this.createdBy, pvContract.createdBy) &&
        Objects.equals(this.disabled, pvContract.disabled) &&
        Objects.equals(this.extendedMetadata, pvContract.extendedMetadata) &&
        Objects.equals(this.id, pvContract.id) &&
        Objects.equals(this.length, pvContract.length) &&
        Objects.equals(this.name, pvContract.name) &&
        Objects.equals(this.publishDate, pvContract.publishDate) &&
        Objects.equals(this.pvId, pvContract.pvId) &&
        Objects.equals(this.pvType, pvContract.pvType) &&
        Objects.equals(this.service, pvContract.service) &&
        Objects.equals(this.thumbUrl, pvContract.thumbUrl) &&
        Objects.equals(this.url, pvContract.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, createdBy, disabled, extendedMetadata, id, length, name, publishDate, pvId, pvType, service, thumbUrl, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PVContract {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    extendedMetadata: ").append(toIndentedString(extendedMetadata)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("    pvId: ").append(toIndentedString(pvId)).append("\n");
    sb.append("    pvType: ").append(toIndentedString(pvType)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("createdBy");
    openapiFields.add("disabled");
    openapiFields.add("extendedMetadata");
    openapiFields.add("id");
    openapiFields.add("length");
    openapiFields.add("name");
    openapiFields.add("publishDate");
    openapiFields.add("pvId");
    openapiFields.add("pvType");
    openapiFields.add("service");
    openapiFields.add("thumbUrl");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PVContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PVContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PVContract is not found in the empty JSON string", PVContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PVContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PVContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      // validate the optional field `extendedMetadata`
      if (jsonObj.get("extendedMetadata") != null && !jsonObj.get("extendedMetadata").isJsonNull()) {
        PVExtendedMetadata.validateJsonElement(jsonObj.get("extendedMetadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pvId") != null && !jsonObj.get("pvId").isJsonNull()) && !jsonObj.get("pvId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pvId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pvId").toString()));
      }
      // validate the optional field `pvType`
      if (jsonObj.get("pvType") != null && !jsonObj.get("pvType").isJsonNull()) {
        PVType.validateJsonElement(jsonObj.get("pvType"));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        PVService.validateJsonElement(jsonObj.get("service"));
      }
      if ((jsonObj.get("thumbUrl") != null && !jsonObj.get("thumbUrl").isJsonNull()) && !jsonObj.get("thumbUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbUrl").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PVContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PVContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PVContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PVContract.class));

       return (TypeAdapter<T>) new TypeAdapter<PVContract>() {
           @Override
           public void write(JsonWriter out, PVContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PVContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PVContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PVContract
   * @throws IOException if the JSON string is invalid with respect to PVContract
   */
  public static PVContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PVContract.class);
  }

  /**
   * Convert an instance of PVContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

