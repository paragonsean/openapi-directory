/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RelatedSongsContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelatedSongsContract {
  public static final String SERIALIZED_NAME_ARTIST_MATCHES = "artistMatches";
  @SerializedName(SERIALIZED_NAME_ARTIST_MATCHES)
  private List<SongForApiContract> artistMatches;

  public static final String SERIALIZED_NAME_LIKE_MATCHES = "likeMatches";
  @SerializedName(SERIALIZED_NAME_LIKE_MATCHES)
  private List<SongForApiContract> likeMatches;

  public static final String SERIALIZED_NAME_TAG_MATCHES = "tagMatches";
  @SerializedName(SERIALIZED_NAME_TAG_MATCHES)
  private List<SongForApiContract> tagMatches;

  public RelatedSongsContract() {
  }

  public RelatedSongsContract artistMatches(List<SongForApiContract> artistMatches) {
    this.artistMatches = artistMatches;
    return this;
  }

  public RelatedSongsContract addArtistMatchesItem(SongForApiContract artistMatchesItem) {
    if (this.artistMatches == null) {
      this.artistMatches = new ArrayList<>();
    }
    this.artistMatches.add(artistMatchesItem);
    return this;
  }

  /**
   * Get artistMatches
   * @return artistMatches
   */
  @javax.annotation.Nullable
  public List<SongForApiContract> getArtistMatches() {
    return artistMatches;
  }

  public void setArtistMatches(List<SongForApiContract> artistMatches) {
    this.artistMatches = artistMatches;
  }


  public RelatedSongsContract likeMatches(List<SongForApiContract> likeMatches) {
    this.likeMatches = likeMatches;
    return this;
  }

  public RelatedSongsContract addLikeMatchesItem(SongForApiContract likeMatchesItem) {
    if (this.likeMatches == null) {
      this.likeMatches = new ArrayList<>();
    }
    this.likeMatches.add(likeMatchesItem);
    return this;
  }

  /**
   * Get likeMatches
   * @return likeMatches
   */
  @javax.annotation.Nullable
  public List<SongForApiContract> getLikeMatches() {
    return likeMatches;
  }

  public void setLikeMatches(List<SongForApiContract> likeMatches) {
    this.likeMatches = likeMatches;
  }


  public RelatedSongsContract tagMatches(List<SongForApiContract> tagMatches) {
    this.tagMatches = tagMatches;
    return this;
  }

  public RelatedSongsContract addTagMatchesItem(SongForApiContract tagMatchesItem) {
    if (this.tagMatches == null) {
      this.tagMatches = new ArrayList<>();
    }
    this.tagMatches.add(tagMatchesItem);
    return this;
  }

  /**
   * Get tagMatches
   * @return tagMatches
   */
  @javax.annotation.Nullable
  public List<SongForApiContract> getTagMatches() {
    return tagMatches;
  }

  public void setTagMatches(List<SongForApiContract> tagMatches) {
    this.tagMatches = tagMatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelatedSongsContract relatedSongsContract = (RelatedSongsContract) o;
    return Objects.equals(this.artistMatches, relatedSongsContract.artistMatches) &&
        Objects.equals(this.likeMatches, relatedSongsContract.likeMatches) &&
        Objects.equals(this.tagMatches, relatedSongsContract.tagMatches);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(artistMatches, likeMatches, tagMatches);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelatedSongsContract {\n");
    sb.append("    artistMatches: ").append(toIndentedString(artistMatches)).append("\n");
    sb.append("    likeMatches: ").append(toIndentedString(likeMatches)).append("\n");
    sb.append("    tagMatches: ").append(toIndentedString(tagMatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artistMatches");
    openapiFields.add("likeMatches");
    openapiFields.add("tagMatches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelatedSongsContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelatedSongsContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelatedSongsContract is not found in the empty JSON string", RelatedSongsContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelatedSongsContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelatedSongsContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artistMatches") != null && !jsonObj.get("artistMatches").isJsonNull()) {
        JsonArray jsonArrayartistMatches = jsonObj.getAsJsonArray("artistMatches");
        if (jsonArrayartistMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artistMatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artistMatches` to be an array in the JSON string but got `%s`", jsonObj.get("artistMatches").toString()));
          }

          // validate the optional field `artistMatches` (array)
          for (int i = 0; i < jsonArrayartistMatches.size(); i++) {
            SongForApiContract.validateJsonElement(jsonArrayartistMatches.get(i));
          };
        }
      }
      if (jsonObj.get("likeMatches") != null && !jsonObj.get("likeMatches").isJsonNull()) {
        JsonArray jsonArraylikeMatches = jsonObj.getAsJsonArray("likeMatches");
        if (jsonArraylikeMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("likeMatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `likeMatches` to be an array in the JSON string but got `%s`", jsonObj.get("likeMatches").toString()));
          }

          // validate the optional field `likeMatches` (array)
          for (int i = 0; i < jsonArraylikeMatches.size(); i++) {
            SongForApiContract.validateJsonElement(jsonArraylikeMatches.get(i));
          };
        }
      }
      if (jsonObj.get("tagMatches") != null && !jsonObj.get("tagMatches").isJsonNull()) {
        JsonArray jsonArraytagMatches = jsonObj.getAsJsonArray("tagMatches");
        if (jsonArraytagMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tagMatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tagMatches` to be an array in the JSON string but got `%s`", jsonObj.get("tagMatches").toString()));
          }

          // validate the optional field `tagMatches` (array)
          for (int i = 0; i < jsonArraytagMatches.size(); i++) {
            SongForApiContract.validateJsonElement(jsonArraytagMatches.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelatedSongsContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelatedSongsContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelatedSongsContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelatedSongsContract.class));

       return (TypeAdapter<T>) new TypeAdapter<RelatedSongsContract>() {
           @Override
           public void write(JsonWriter out, RelatedSongsContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelatedSongsContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelatedSongsContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelatedSongsContract
   * @throws IOException if the JSON string is invalid with respect to RelatedSongsContract
   */
  public static RelatedSongsContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelatedSongsContract.class);
  }

  /**
   * Convert an instance of RelatedSongsContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

