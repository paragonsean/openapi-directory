/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SongInListEditContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:40.974326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SongInListEditContract {
  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_SONG = "song";
  @SerializedName(SERIALIZED_NAME_SONG)
  private SongForApiContract song;

  public static final String SERIALIZED_NAME_SONG_IN_LIST_ID = "songInListId";
  @SerializedName(SERIALIZED_NAME_SONG_IN_LIST_ID)
  private Integer songInListId;

  public SongInListEditContract() {
  }

  public SongInListEditContract notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public SongInListEditContract order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public SongInListEditContract song(SongForApiContract song) {
    this.song = song;
    return this;
  }

  /**
   * Get song
   * @return song
   */
  @javax.annotation.Nullable
  public SongForApiContract getSong() {
    return song;
  }

  public void setSong(SongForApiContract song) {
    this.song = song;
  }


  public SongInListEditContract songInListId(Integer songInListId) {
    this.songInListId = songInListId;
    return this;
  }

  /**
   * Get songInListId
   * @return songInListId
   */
  @javax.annotation.Nullable
  public Integer getSongInListId() {
    return songInListId;
  }

  public void setSongInListId(Integer songInListId) {
    this.songInListId = songInListId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SongInListEditContract songInListEditContract = (SongInListEditContract) o;
    return Objects.equals(this.notes, songInListEditContract.notes) &&
        Objects.equals(this.order, songInListEditContract.order) &&
        Objects.equals(this.song, songInListEditContract.song) &&
        Objects.equals(this.songInListId, songInListEditContract.songInListId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(notes, order, song, songInListId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SongInListEditContract {\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    song: ").append(toIndentedString(song)).append("\n");
    sb.append("    songInListId: ").append(toIndentedString(songInListId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notes");
    openapiFields.add("order");
    openapiFields.add("song");
    openapiFields.add("songInListId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SongInListEditContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SongInListEditContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SongInListEditContract is not found in the empty JSON string", SongInListEditContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SongInListEditContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SongInListEditContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `song`
      if (jsonObj.get("song") != null && !jsonObj.get("song").isJsonNull()) {
        SongForApiContract.validateJsonElement(jsonObj.get("song"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SongInListEditContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SongInListEditContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SongInListEditContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SongInListEditContract.class));

       return (TypeAdapter<T>) new TypeAdapter<SongInListEditContract>() {
           @Override
           public void write(JsonWriter out, SongInListEditContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SongInListEditContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SongInListEditContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SongInListEditContract
   * @throws IOException if the JSON string is invalid with respect to SongInListEditContract
   */
  public static SongInListEditContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SongInListEditContract.class);
  }

  /**
   * Convert an instance of SongInListEditContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

