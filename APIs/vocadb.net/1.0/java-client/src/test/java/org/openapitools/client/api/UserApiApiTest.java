/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdvancedSearchFilterParams;
import org.openapitools.client.model.AlbumForUserForApiContract;
import org.openapitools.client.model.AlbumForUserForApiContractPartialFindResult;
import org.openapitools.client.model.AlbumOptionalFields;
import org.openapitools.client.model.AlbumSortRule;
import org.openapitools.client.model.ArtistForUserForApiContract;
import org.openapitools.client.model.ArtistForUserForApiContractPartialFindResult;
import org.openapitools.client.model.ArtistOptionalFields;
import org.openapitools.client.model.ArtistSortRule;
import org.openapitools.client.model.ArtistType;
import org.openapitools.client.model.CommentForApiContract;
import org.openapitools.client.model.CommentForApiContractPartialFindResult;
import org.openapitools.client.model.ContentLanguagePreference;
import org.openapitools.client.model.CreateReportModel;
import org.openapitools.client.model.DiscType;
import org.openapitools.client.model.EntryEditDataContract;
import org.openapitools.client.model.EntryType;
import org.openapitools.client.model.LogicalGrouping;
import org.openapitools.client.model.MediaType;
import org.openapitools.client.model.NameMatchMode;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PVServices;
import org.openapitools.client.model.PurchaseStatus;
import org.openapitools.client.model.PurchaseStatuses;
import org.openapitools.client.model.RatedSongForUserForApiContractPartialFindResult;
import org.openapitools.client.model.RatedSongForUserSortRule;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.client.model.SongListForApiContractPartialFindResult;
import org.openapitools.client.model.SongListOptionalFields;
import org.openapitools.client.model.SongListSortRule;
import org.openapitools.client.model.SongOptionalFields;
import org.openapitools.client.model.SongVoteRating;
import org.openapitools.client.model.UserEventRelationshipType;
import org.openapitools.client.model.UserForApiContract;
import org.openapitools.client.model.UserForApiContractPartialFindResult;
import org.openapitools.client.model.UserGroupId;
import org.openapitools.client.model.UserInboxType;
import org.openapitools.client.model.UserMessageContract;
import org.openapitools.client.model.UserMessageContractPartialFindResult;
import org.openapitools.client.model.UserOptionalFields;
import org.openapitools.client.model.UserSortRule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApiApi
 */
@Disabled
public class UserApiApiTest {

    private final UserApiApi api = new UserApiApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetTest() throws ApiException {
        Integer albumId = null;
        AlbumForUserForApiContract response = api.apiUsersCurrentAlbumCollectionStatusesAlbumIdGet(albumId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentAlbumsAlbumIdPostTest() throws ApiException {
        Integer albumId = null;
        PurchaseStatus collectionStatus = null;
        MediaType mediaType = null;
        Integer rating = null;
        String response = api.apiUsersCurrentAlbumsAlbumIdPost(albumId, collectionStatus, mediaType, rating);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentFollowedArtistsArtistIdGetTest() throws ApiException {
        Integer artistId = null;
        ArtistForUserForApiContract response = api.apiUsersCurrentFollowedArtistsArtistIdGet(artistId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentFollowedTagsTagIdDeleteTest() throws ApiException {
        Integer tagId = null;
        api.apiUsersCurrentFollowedTagsTagIdDelete(tagId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentFollowedTagsTagIdPostTest() throws ApiException {
        Integer tagId = null;
        api.apiUsersCurrentFollowedTagsTagIdPost(tagId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentGetTest() throws ApiException {
        UserOptionalFields fields = null;
        UserForApiContract response = api.apiUsersCurrentGet(fields);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentRatedSongsSongIdGetTest() throws ApiException {
        Integer songId = null;
        SongVoteRating response = api.apiUsersCurrentRatedSongsSongIdGet(songId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentRefreshEntryEditPostTest() throws ApiException {
        EntryType entryType = null;
        Integer entryId = null;
        EntryEditDataContract response = api.apiUsersCurrentRefreshEntryEditPost(entryType, entryId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersCurrentSongTagsSongIdPostTest() throws ApiException {
        Integer songId = null;
        api.apiUsersCurrentSongTagsSongIdPost(songId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersGetTest() throws ApiException {
        String query = null;
        UserGroupId groups = null;
        OffsetDateTime joinDateAfter = null;
        OffsetDateTime joinDateBefore = null;
        NameMatchMode nameMatchMode = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        UserSortRule sort = null;
        Boolean includeDisabled = null;
        Boolean onlyVerified = null;
        String knowsLanguage = null;
        UserOptionalFields fields = null;
        UserForApiContractPartialFindResult response = api.apiUsersGet(query, groups, joinDateAfter, joinDateBefore, nameMatchMode, start, maxResults, getTotalCount, sort, includeDisabled, onlyVerified, knowsLanguage, fields);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdAlbumCollectionStatusesAlbumIdGetTest() throws ApiException {
        Integer id = null;
        Integer albumId = null;
        AlbumForUserForApiContract response = api.apiUsersIdAlbumCollectionStatusesAlbumIdGet(id, albumId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdAlbumsGetTest() throws ApiException {
        Integer id = null;
        String query = null;
        Integer tagId = null;
        String tag = null;
        Integer artistId = null;
        PurchaseStatuses purchaseStatuses = null;
        Integer releaseEventId = null;
        DiscType albumTypes = null;
        List<AdvancedSearchFilterParams> advancedFilters = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        AlbumSortRule sort = null;
        NameMatchMode nameMatchMode = null;
        AlbumOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        MediaType mediaType = null;
        AlbumForUserForApiContractPartialFindResult response = api.apiUsersIdAlbumsGet(id, query, tagId, tag, artistId, purchaseStatuses, releaseEventId, albumTypes, advancedFilters, start, maxResults, getTotalCount, sort, nameMatchMode, fields, lang, mediaType);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdEventsGetTest() throws ApiException {
        Integer id = null;
        UserEventRelationshipType relationshipType = null;
        List<ReleaseEventForApiContract> response = api.apiUsersIdEventsGet(id, relationshipType);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdFollowedArtistsArtistIdGetTest() throws ApiException {
        Integer id = null;
        Integer artistId = null;
        ArtistForUserForApiContract response = api.apiUsersIdFollowedArtistsArtistIdGet(id, artistId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdFollowedArtistsGetTest() throws ApiException {
        Integer id = null;
        String query = null;
        List<Integer> tagId = null;
        ArtistType artistType = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        ArtistSortRule sort = null;
        NameMatchMode nameMatchMode = null;
        ArtistOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        ArtistForUserForApiContractPartialFindResult response = api.apiUsersIdFollowedArtistsGet(id, query, tagId, artistType, start, maxResults, getTotalCount, sort, nameMatchMode, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdGetTest() throws ApiException {
        Integer id = null;
        UserOptionalFields fields = null;
        UserForApiContract response = api.apiUsersIdGet(id, fields);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdMessagesDeleteTest() throws ApiException {
        Integer id = null;
        List<Integer> messageId = null;
        api.apiUsersIdMessagesDelete(id, messageId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdMessagesGetTest() throws ApiException {
        Integer id = null;
        UserInboxType inbox = null;
        Boolean unread = null;
        Integer anotherUserId = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        UserMessageContractPartialFindResult response = api.apiUsersIdMessagesGet(id, inbox, unread, anotherUserId, start, maxResults, getTotalCount);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdMessagesPostTest() throws ApiException {
        Integer id = null;
        UserMessageContract userMessageContract = null;
        UserMessageContract response = api.apiUsersIdMessagesPost(id, userMessageContract);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdProfileCommentsGetTest() throws ApiException {
        Integer id = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        CommentForApiContractPartialFindResult response = api.apiUsersIdProfileCommentsGet(id, start, maxResults, getTotalCount);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdProfileCommentsPostTest() throws ApiException {
        Integer id = null;
        CommentForApiContract commentForApiContract = null;
        CommentForApiContract response = api.apiUsersIdProfileCommentsPost(id, commentForApiContract);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdRatedSongsGetTest() throws ApiException {
        Integer id = null;
        String query = null;
        String tagName = null;
        List<Integer> tagId = null;
        List<Integer> artistId = null;
        Boolean childVoicebanks = null;
        LogicalGrouping artistGrouping = null;
        SongVoteRating rating = null;
        Integer songListId = null;
        Boolean groupByRating = null;
        PVServices pvServices = null;
        List<AdvancedSearchFilterParams> advancedFilters = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        RatedSongForUserSortRule sort = null;
        NameMatchMode nameMatchMode = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        RatedSongForUserForApiContractPartialFindResult response = api.apiUsersIdRatedSongsGet(id, query, tagName, tagId, artistId, childVoicebanks, artistGrouping, rating, songListId, groupByRating, pvServices, advancedFilters, start, maxResults, getTotalCount, sort, nameMatchMode, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdRatedSongsSongIdGetTest() throws ApiException {
        Integer id = null;
        Integer songId = null;
        SongVoteRating response = api.apiUsersIdRatedSongsSongIdGet(id, songId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdReportsPostTest() throws ApiException {
        Integer id = null;
        CreateReportModel createReportModel = null;
        Boolean response = api.apiUsersIdReportsPost(id, createReportModel);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdSettingsSettingNamePostTest() throws ApiException {
        Integer id = null;
        String settingName = null;
        String body = null;
        api.apiUsersIdSettingsSettingNamePost(id, settingName, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersIdSongListsGetTest() throws ApiException {
        Integer id = null;
        String query = null;
        List<Integer> tagId = null;
        Boolean childTags = null;
        NameMatchMode nameMatchMode = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        SongListSortRule sort = null;
        SongListOptionalFields fields = null;
        SongListForApiContractPartialFindResult response = api.apiUsersIdSongListsGet(id, query, tagId, childTags, nameMatchMode, start, maxResults, getTotalCount, sort, fields);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersMessagesMessageIdGetTest() throws ApiException {
        Integer messageId = null;
        UserMessageContract response = api.apiUsersMessagesMessageIdGet(messageId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersNamesGetTest() throws ApiException {
        String query = null;
        NameMatchMode nameMatchMode = null;
        Integer maxResults = null;
        Boolean includeDisabled = null;
        List<String> response = api.apiUsersNamesGet(query, nameMatchMode, maxResults, includeDisabled);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersProfileCommentsCommentIdDeleteTest() throws ApiException {
        Integer commentId = null;
        api.apiUsersProfileCommentsCommentIdDelete(commentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiUsersProfileCommentsCommentIdPostTest() throws ApiException {
        Integer commentId = null;
        CommentForApiContract commentForApiContract = null;
        api.apiUsersProfileCommentsCommentIdPost(commentId, commentForApiContract);
        // TODO: test validations
    }

}
