/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlbumForApiContract;
import org.openapitools.client.model.AlbumOptionalFields;
import org.openapitools.client.model.ContentLanguagePreference;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.EventReportType;
import org.openapitools.client.model.EventSortRule;
import org.openapitools.client.model.NameMatchMode;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ReleaseEventForApiContract;
import org.openapitools.client.model.ReleaseEventForApiContractPartialFindResult;
import org.openapitools.client.model.ReleaseEventOptionalFields;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.client.model.SongOptionalFields;
import org.openapitools.client.model.SortDirection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReleaseEventApiApi
 */
@Disabled
public class ReleaseEventApiApiTest {

    private final ReleaseEventApiApi api = new ReleaseEventApiApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseEventsEventIdAlbumsGetTest() throws ApiException {
        Integer eventId = null;
        AlbumOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        List<AlbumForApiContract> response = api.apiReleaseEventsEventIdAlbumsGet(eventId, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseEventsEventIdPublishedSongsGetTest() throws ApiException {
        Integer eventId = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        List<SongForApiContract> response = api.apiReleaseEventsEventIdPublishedSongsGet(eventId, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseEventsEventIdReportsPostTest() throws ApiException {
        Integer eventId = null;
        EventReportType reportType = null;
        String notes = null;
        Integer versionNumber = null;
        api.apiReleaseEventsEventIdReportsPost(eventId, reportType, notes, versionNumber);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseEventsGetTest() throws ApiException {
        String query = null;
        NameMatchMode nameMatchMode = null;
        Integer seriesId = null;
        OffsetDateTime afterDate = null;
        OffsetDateTime beforeDate = null;
        EventCategory category = null;
        Integer userCollectionId = null;
        List<Integer> tagId = null;
        Boolean childTags = null;
        List<Integer> artistId = null;
        Boolean childVoicebanks = null;
        Boolean includeMembers = null;
        EntryStatus status = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        EventSortRule sort = null;
        ReleaseEventOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        SortDirection sortDirection = null;
        ReleaseEventForApiContractPartialFindResult response = api.apiReleaseEventsGet(query, nameMatchMode, seriesId, afterDate, beforeDate, category, userCollectionId, tagId, childTags, artistId, childVoicebanks, includeMembers, status, start, maxResults, getTotalCount, sort, fields, lang, sortDirection);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseEventsIdDeleteTest() throws ApiException {
        Integer id = null;
        String notes = null;
        Boolean hardDelete = null;
        api.apiReleaseEventsIdDelete(id, notes, hardDelete);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseEventsIdGetTest() throws ApiException {
        Integer id = null;
        ReleaseEventOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        ReleaseEventForApiContract response = api.apiReleaseEventsIdGet(id, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseEventsNamesGetTest() throws ApiException {
        String query = null;
        Integer maxResults = null;
        List<String> response = api.apiReleaseEventsNamesGet(query, maxResults);
        // TODO: test validations
    }

}
