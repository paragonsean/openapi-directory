/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdvancedSearchFilterParams;
import org.openapitools.client.model.ArtistAlbumParticipationStatus;
import org.openapitools.client.model.CommentForApiContract;
import org.openapitools.client.model.ContentLanguagePreference;
import org.openapitools.client.model.EntryStatus;
import org.openapitools.client.model.LyricsForSongContract;
import org.openapitools.client.model.NameMatchMode;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PVService;
import org.openapitools.client.model.PVServices;
import org.openapitools.client.model.RatedSongForUserForApiContract;
import org.openapitools.client.model.RelatedSongsContract;
import org.openapitools.client.model.SongForApiContract;
import org.openapitools.client.model.SongForApiContractPartialFindResult;
import org.openapitools.client.model.SongOptionalFields;
import org.openapitools.client.model.SongRatingContract;
import org.openapitools.client.model.SongSortRule;
import org.openapitools.client.model.SongVocalistSelection;
import org.openapitools.client.model.TopSongsDateFilterType;
import org.openapitools.client.model.UserOptionalFields;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SongApiApi
 */
@Disabled
public class SongApiApiTest {

    private final SongApiApi api = new SongApiApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsByPvGetTest() throws ApiException {
        PVService pvService = null;
        String pvId = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        SongForApiContract response = api.apiSongsByPvGet(pvService, pvId, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsCommentsCommentIdDeleteTest() throws ApiException {
        Integer commentId = null;
        api.apiSongsCommentsCommentIdDelete(commentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsCommentsCommentIdPostTest() throws ApiException {
        Integer commentId = null;
        CommentForApiContract commentForApiContract = null;
        api.apiSongsCommentsCommentIdPost(commentId, commentForApiContract);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsGetTest() throws ApiException {
        String query = null;
        String songTypes = null;
        OffsetDateTime afterDate = null;
        OffsetDateTime beforeDate = null;
        List<String> tagName = null;
        List<Integer> tagId = null;
        Boolean childTags = null;
        Boolean unifyTypesAndTags = null;
        List<Integer> artistId = null;
        ArtistAlbumParticipationStatus artistParticipationStatus = null;
        Boolean childVoicebanks = null;
        Boolean includeMembers = null;
        Boolean onlyWithPvs = null;
        PVServices pvServices = null;
        Integer since = null;
        Integer minScore = null;
        Integer userCollectionId = null;
        Integer releaseEventId = null;
        Integer parentSongId = null;
        EntryStatus status = null;
        List<AdvancedSearchFilterParams> advancedFilters = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        SongSortRule sort = null;
        Boolean preferAccurateMatches = null;
        NameMatchMode nameMatchMode = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        Integer minMilliBpm = null;
        Integer maxMilliBpm = null;
        Integer minLength = null;
        Integer maxLength = null;
        SongForApiContractPartialFindResult response = api.apiSongsGet(query, songTypes, afterDate, beforeDate, tagName, tagId, childTags, unifyTypesAndTags, artistId, artistParticipationStatus, childVoicebanks, includeMembers, onlyWithPvs, pvServices, since, minScore, userCollectionId, releaseEventId, parentSongId, status, advancedFilters, start, maxResults, getTotalCount, sort, preferAccurateMatches, nameMatchMode, fields, lang, minMilliBpm, maxMilliBpm, minLength, maxLength);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsHighlightedGetTest() throws ApiException {
        ContentLanguagePreference languagePreference = null;
        SongOptionalFields fields = null;
        List<SongForApiContract> response = api.apiSongsHighlightedGet(languagePreference, fields);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdCommentsGetTest() throws ApiException {
        Integer id = null;
        List<CommentForApiContract> response = api.apiSongsIdCommentsGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdCommentsPostTest() throws ApiException {
        Integer id = null;
        CommentForApiContract commentForApiContract = null;
        CommentForApiContract response = api.apiSongsIdCommentsPost(id, commentForApiContract);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdDeleteTest() throws ApiException {
        Integer id = null;
        String notes = null;
        api.apiSongsIdDelete(id, notes);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdDerivedGetTest() throws ApiException {
        Integer id = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        List<SongForApiContract> response = api.apiSongsIdDerivedGet(id, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdGetTest() throws ApiException {
        Integer id = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        SongForApiContract response = api.apiSongsIdGet(id, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdRatingsGetTest() throws ApiException {
        Integer id = null;
        UserOptionalFields userFields = null;
        ContentLanguagePreference lang = null;
        List<RatedSongForUserForApiContract> response = api.apiSongsIdRatingsGet(id, userFields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdRatingsPostTest() throws ApiException {
        Integer id = null;
        SongRatingContract songRatingContract = null;
        api.apiSongsIdRatingsPost(id, songRatingContract);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsIdRelatedGetTest() throws ApiException {
        Integer id = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        RelatedSongsContract response = api.apiSongsIdRelatedGet(id, fields, lang);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsLyricsLyricsIdGetTest() throws ApiException {
        Integer lyricsId = null;
        LyricsForSongContract response = api.apiSongsLyricsLyricsIdGet(lyricsId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsNamesGetTest() throws ApiException {
        String query = null;
        NameMatchMode nameMatchMode = null;
        Integer maxResults = null;
        List<String> response = api.apiSongsNamesGet(query, nameMatchMode, maxResults);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiSongsTopRatedGetTest() throws ApiException {
        Integer durationHours = null;
        OffsetDateTime startDate = null;
        TopSongsDateFilterType filterBy = null;
        SongVocalistSelection vocalist = null;
        Integer maxResults = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference languagePreference = null;
        List<SongForApiContract> response = api.apiSongsTopRatedGet(durationHours, startDate, filterBy, vocalist, maxResults, fields, languagePreference);
        // TODO: test validations
    }

}
