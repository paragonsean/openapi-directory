/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedSongsContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedSongsContract::OAIRelatedSongsContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedSongsContract::OAIRelatedSongsContract() {
    this->initializeModel();
}

OAIRelatedSongsContract::~OAIRelatedSongsContract() {}

void OAIRelatedSongsContract::initializeModel() {

    m_artist_matches_isSet = false;
    m_artist_matches_isValid = false;

    m_like_matches_isSet = false;
    m_like_matches_isValid = false;

    m_tag_matches_isSet = false;
    m_tag_matches_isValid = false;
}

void OAIRelatedSongsContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedSongsContract::fromJsonObject(QJsonObject json) {

    m_artist_matches_isValid = ::OpenAPI::fromJsonValue(m_artist_matches, json[QString("artistMatches")]);
    m_artist_matches_isSet = !json[QString("artistMatches")].isNull() && m_artist_matches_isValid;

    m_like_matches_isValid = ::OpenAPI::fromJsonValue(m_like_matches, json[QString("likeMatches")]);
    m_like_matches_isSet = !json[QString("likeMatches")].isNull() && m_like_matches_isValid;

    m_tag_matches_isValid = ::OpenAPI::fromJsonValue(m_tag_matches, json[QString("tagMatches")]);
    m_tag_matches_isSet = !json[QString("tagMatches")].isNull() && m_tag_matches_isValid;
}

QString OAIRelatedSongsContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedSongsContract::asJsonObject() const {
    QJsonObject obj;
    if (m_artist_matches.size() > 0) {
        obj.insert(QString("artistMatches"), ::OpenAPI::toJsonValue(m_artist_matches));
    }
    if (m_like_matches.size() > 0) {
        obj.insert(QString("likeMatches"), ::OpenAPI::toJsonValue(m_like_matches));
    }
    if (m_tag_matches.size() > 0) {
        obj.insert(QString("tagMatches"), ::OpenAPI::toJsonValue(m_tag_matches));
    }
    return obj;
}

QList<OAISongForApiContract> OAIRelatedSongsContract::getArtistMatches() const {
    return m_artist_matches;
}
void OAIRelatedSongsContract::setArtistMatches(const QList<OAISongForApiContract> &artist_matches) {
    m_artist_matches = artist_matches;
    m_artist_matches_isSet = true;
}

bool OAIRelatedSongsContract::is_artist_matches_Set() const{
    return m_artist_matches_isSet;
}

bool OAIRelatedSongsContract::is_artist_matches_Valid() const{
    return m_artist_matches_isValid;
}

QList<OAISongForApiContract> OAIRelatedSongsContract::getLikeMatches() const {
    return m_like_matches;
}
void OAIRelatedSongsContract::setLikeMatches(const QList<OAISongForApiContract> &like_matches) {
    m_like_matches = like_matches;
    m_like_matches_isSet = true;
}

bool OAIRelatedSongsContract::is_like_matches_Set() const{
    return m_like_matches_isSet;
}

bool OAIRelatedSongsContract::is_like_matches_Valid() const{
    return m_like_matches_isValid;
}

QList<OAISongForApiContract> OAIRelatedSongsContract::getTagMatches() const {
    return m_tag_matches;
}
void OAIRelatedSongsContract::setTagMatches(const QList<OAISongForApiContract> &tag_matches) {
    m_tag_matches = tag_matches;
    m_tag_matches_isSet = true;
}

bool OAIRelatedSongsContract::is_tag_matches_Set() const{
    return m_tag_matches_isSet;
}

bool OAIRelatedSongsContract::is_tag_matches_Valid() const{
    return m_tag_matches_isValid;
}

bool OAIRelatedSongsContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artist_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedSongsContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
