/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtistType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtistType::OAIArtistType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtistType::OAIArtistType() {
    this->initializeModel();
}

OAIArtistType::~OAIArtistType() {}

void OAIArtistType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArtistType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArtistType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Circle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::CIRCLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Label", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::LABEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Producer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::PRODUCER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Animator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::ANIMATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Illustrator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::ILLUSTRATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Lyricist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::LYRICIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vocaloid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::VOCALOID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTAU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::UTAU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CeVIO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::CEVIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherVoiceSynthesizer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::OTHERVOICESYNTHESIZER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherVocalist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::OTHERVOCALIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::OTHERGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherIndividual", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::OTHERINDIVIDUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Utaite", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::UTAITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Band", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::BAND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vocalist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::VOCALIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Character", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::CHARACTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SynthesizerV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::SYNTHESIZERV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CoverArtist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistType::COVERARTIST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArtistType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArtistType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArtistType::UNKNOWN:
            val = "Unknown";
            break;
        case eOAIArtistType::CIRCLE:
            val = "Circle";
            break;
        case eOAIArtistType::LABEL:
            val = "Label";
            break;
        case eOAIArtistType::PRODUCER:
            val = "Producer";
            break;
        case eOAIArtistType::ANIMATOR:
            val = "Animator";
            break;
        case eOAIArtistType::ILLUSTRATOR:
            val = "Illustrator";
            break;
        case eOAIArtistType::LYRICIST:
            val = "Lyricist";
            break;
        case eOAIArtistType::VOCALOID:
            val = "Vocaloid";
            break;
        case eOAIArtistType::UTAU:
            val = "UTAU";
            break;
        case eOAIArtistType::CEVIO:
            val = "CeVIO";
            break;
        case eOAIArtistType::OTHERVOICESYNTHESIZER:
            val = "OtherVoiceSynthesizer";
            break;
        case eOAIArtistType::OTHERVOCALIST:
            val = "OtherVocalist";
            break;
        case eOAIArtistType::OTHERGROUP:
            val = "OtherGroup";
            break;
        case eOAIArtistType::OTHERINDIVIDUAL:
            val = "OtherIndividual";
            break;
        case eOAIArtistType::UTAITE:
            val = "Utaite";
            break;
        case eOAIArtistType::BAND:
            val = "Band";
            break;
        case eOAIArtistType::VOCALIST:
            val = "Vocalist";
            break;
        case eOAIArtistType::CHARACTER:
            val = "Character";
            break;
        case eOAIArtistType::SYNTHESIZERV:
            val = "SynthesizerV";
            break;
        case eOAIArtistType::COVERARTIST:
            val = "CoverArtist";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArtistType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArtistType::eOAIArtistType OAIArtistType::getValue() const {
    return m_value;
}

void OAIArtistType::setValue(const OAIArtistType::eOAIArtistType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArtistType::isSet() const {
    
    return m_value_isSet;
}

bool OAIArtistType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
