/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityEntryForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityEntryForApiContract::OAIActivityEntryForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityEntryForApiContract::OAIActivityEntryForApiContract() {
    this->initializeModel();
}

OAIActivityEntryForApiContract::~OAIActivityEntryForApiContract() {}

void OAIActivityEntryForApiContract::initializeModel() {

    m_archived_version_isSet = false;
    m_archived_version_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_edit_event_isSet = false;
    m_edit_event_isValid = false;

    m_entry_isSet = false;
    m_entry_isValid = false;
}

void OAIActivityEntryForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityEntryForApiContract::fromJsonObject(QJsonObject json) {

    m_archived_version_isValid = ::OpenAPI::fromJsonValue(m_archived_version, json[QString("archivedVersion")]);
    m_archived_version_isSet = !json[QString("archivedVersion")].isNull() && m_archived_version_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_edit_event_isValid = ::OpenAPI::fromJsonValue(m_edit_event, json[QString("editEvent")]);
    m_edit_event_isSet = !json[QString("editEvent")].isNull() && m_edit_event_isValid;

    m_entry_isValid = ::OpenAPI::fromJsonValue(m_entry, json[QString("entry")]);
    m_entry_isSet = !json[QString("entry")].isNull() && m_entry_isValid;
}

QString OAIActivityEntryForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityEntryForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_version.isSet()) {
        obj.insert(QString("archivedVersion"), ::OpenAPI::toJsonValue(m_archived_version));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_edit_event.isSet()) {
        obj.insert(QString("editEvent"), ::OpenAPI::toJsonValue(m_edit_event));
    }
    if (m_entry.isSet()) {
        obj.insert(QString("entry"), ::OpenAPI::toJsonValue(m_entry));
    }
    return obj;
}

OAIArchivedObjectVersionForApiContract OAIActivityEntryForApiContract::getArchivedVersion() const {
    return m_archived_version;
}
void OAIActivityEntryForApiContract::setArchivedVersion(const OAIArchivedObjectVersionForApiContract &archived_version) {
    m_archived_version = archived_version;
    m_archived_version_isSet = true;
}

bool OAIActivityEntryForApiContract::is_archived_version_Set() const{
    return m_archived_version_isSet;
}

bool OAIActivityEntryForApiContract::is_archived_version_Valid() const{
    return m_archived_version_isValid;
}

OAIUserForApiContract OAIActivityEntryForApiContract::getAuthor() const {
    return m_author;
}
void OAIActivityEntryForApiContract::setAuthor(const OAIUserForApiContract &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIActivityEntryForApiContract::is_author_Set() const{
    return m_author_isSet;
}

bool OAIActivityEntryForApiContract::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIActivityEntryForApiContract::getCreateDate() const {
    return m_create_date;
}
void OAIActivityEntryForApiContract::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIActivityEntryForApiContract::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIActivityEntryForApiContract::is_create_date_Valid() const{
    return m_create_date_isValid;
}

OAIEntryEditEvent OAIActivityEntryForApiContract::getEditEvent() const {
    return m_edit_event;
}
void OAIActivityEntryForApiContract::setEditEvent(const OAIEntryEditEvent &edit_event) {
    m_edit_event = edit_event;
    m_edit_event_isSet = true;
}

bool OAIActivityEntryForApiContract::is_edit_event_Set() const{
    return m_edit_event_isSet;
}

bool OAIActivityEntryForApiContract::is_edit_event_Valid() const{
    return m_edit_event_isValid;
}

OAIEntryForApiContract OAIActivityEntryForApiContract::getEntry() const {
    return m_entry;
}
void OAIActivityEntryForApiContract::setEntry(const OAIEntryForApiContract &entry) {
    m_entry = entry;
    m_entry_isSet = true;
}

bool OAIActivityEntryForApiContract::is_entry_Set() const{
    return m_entry_isSet;
}

bool OAIActivityEntryForApiContract::is_entry_Valid() const{
    return m_entry_isValid;
}

bool OAIActivityEntryForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityEntryForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
