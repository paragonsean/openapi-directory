/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagBaseContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagBaseContract::OAITagBaseContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagBaseContract::OAITagBaseContract() {
    this->initializeModel();
}

OAITagBaseContract::~OAITagBaseContract() {}

void OAITagBaseContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_slug_isSet = false;
    m_url_slug_isValid = false;
}

void OAITagBaseContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagBaseContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_slug_isValid = ::OpenAPI::fromJsonValue(m_url_slug, json[QString("urlSlug")]);
    m_url_slug_isSet = !json[QString("urlSlug")].isNull() && m_url_slug_isValid;
}

QString OAITagBaseContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagBaseContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_slug_isSet) {
        obj.insert(QString("urlSlug"), ::OpenAPI::toJsonValue(m_url_slug));
    }
    return obj;
}

QString OAITagBaseContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAITagBaseContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAITagBaseContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAITagBaseContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

QString OAITagBaseContract::getCategoryName() const {
    return m_category_name;
}
void OAITagBaseContract::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAITagBaseContract::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAITagBaseContract::is_category_name_Valid() const{
    return m_category_name_isValid;
}

qint32 OAITagBaseContract::getId() const {
    return m_id;
}
void OAITagBaseContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITagBaseContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAITagBaseContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITagBaseContract::getName() const {
    return m_name;
}
void OAITagBaseContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITagBaseContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAITagBaseContract::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITagBaseContract::getUrlSlug() const {
    return m_url_slug;
}
void OAITagBaseContract::setUrlSlug(const QString &url_slug) {
    m_url_slug = url_slug;
    m_url_slug_isSet = true;
}

bool OAITagBaseContract::is_url_slug_Set() const{
    return m_url_slug_isSet;
}

bool OAITagBaseContract::is_url_slug_Valid() const{
    return m_url_slug_isValid;
}

bool OAITagBaseContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagBaseContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
