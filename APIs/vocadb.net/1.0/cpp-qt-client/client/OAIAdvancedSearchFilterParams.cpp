/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedSearchFilterParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedSearchFilterParams::OAIAdvancedSearchFilterParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedSearchFilterParams::OAIAdvancedSearchFilterParams() {
    this->initializeModel();
}

OAIAdvancedSearchFilterParams::~OAIAdvancedSearchFilterParams() {}

void OAIAdvancedSearchFilterParams::initializeModel() {

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;

    m_negate_isSet = false;
    m_negate_isValid = false;

    m_param_isSet = false;
    m_param_isValid = false;
}

void OAIAdvancedSearchFilterParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedSearchFilterParams::fromJsonObject(QJsonObject json) {

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("filterType")]);
    m_filter_type_isSet = !json[QString("filterType")].isNull() && m_filter_type_isValid;

    m_negate_isValid = ::OpenAPI::fromJsonValue(m_negate, json[QString("negate")]);
    m_negate_isSet = !json[QString("negate")].isNull() && m_negate_isValid;

    m_param_isValid = ::OpenAPI::fromJsonValue(m_param, json[QString("param")]);
    m_param_isSet = !json[QString("param")].isNull() && m_param_isValid;
}

QString OAIAdvancedSearchFilterParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedSearchFilterParams::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_type.isSet()) {
        obj.insert(QString("filterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    if (m_negate_isSet) {
        obj.insert(QString("negate"), ::OpenAPI::toJsonValue(m_negate));
    }
    if (m_param_isSet) {
        obj.insert(QString("param"), ::OpenAPI::toJsonValue(m_param));
    }
    return obj;
}

OAIAdvancedFilterType OAIAdvancedSearchFilterParams::getFilterType() const {
    return m_filter_type;
}
void OAIAdvancedSearchFilterParams::setFilterType(const OAIAdvancedFilterType &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAIAdvancedSearchFilterParams::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAIAdvancedSearchFilterParams::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

bool OAIAdvancedSearchFilterParams::isNegate() const {
    return m_negate;
}
void OAIAdvancedSearchFilterParams::setNegate(const bool &negate) {
    m_negate = negate;
    m_negate_isSet = true;
}

bool OAIAdvancedSearchFilterParams::is_negate_Set() const{
    return m_negate_isSet;
}

bool OAIAdvancedSearchFilterParams::is_negate_Valid() const{
    return m_negate_isValid;
}

QString OAIAdvancedSearchFilterParams::getParam() const {
    return m_param;
}
void OAIAdvancedSearchFilterParams::setParam(const QString &param) {
    m_param = param;
    m_param_isSet = true;
}

bool OAIAdvancedSearchFilterParams::is_param_Set() const{
    return m_param_isSet;
}

bool OAIAdvancedSearchFilterParams::is_param_Valid() const{
    return m_param_isValid;
}

bool OAIAdvancedSearchFilterParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_param_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedSearchFilterParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
