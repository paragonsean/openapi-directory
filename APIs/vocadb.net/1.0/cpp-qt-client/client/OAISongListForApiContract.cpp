/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISongListForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISongListForApiContract::OAISongListForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISongListForApiContract::OAISongListForApiContract() {
    this->initializeModel();
}

OAISongListForApiContract::~OAISongListForApiContract() {}

void OAISongListForApiContract::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_featured_category_isSet = false;
    m_featured_category_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_comments_isSet = false;
    m_latest_comments_isValid = false;

    m_main_picture_isSet = false;
    m_main_picture_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISongListForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISongListForApiContract::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_featured_category_isValid = ::OpenAPI::fromJsonValue(m_featured_category, json[QString("featuredCategory")]);
    m_featured_category_isSet = !json[QString("featuredCategory")].isNull() && m_featured_category_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_comments_isValid = ::OpenAPI::fromJsonValue(m_latest_comments, json[QString("latestComments")]);
    m_latest_comments_isSet = !json[QString("latestComments")].isNull() && m_latest_comments_isValid;

    m_main_picture_isValid = ::OpenAPI::fromJsonValue(m_main_picture, json[QString("mainPicture")]);
    m_main_picture_isSet = !json[QString("mainPicture")].isNull() && m_main_picture_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISongListForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISongListForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_featured_category.isSet()) {
        obj.insert(QString("featuredCategory"), ::OpenAPI::toJsonValue(m_featured_category));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_comments.size() > 0) {
        obj.insert(QString("latestComments"), ::OpenAPI::toJsonValue(m_latest_comments));
    }
    if (m_main_picture.isSet()) {
        obj.insert(QString("mainPicture"), ::OpenAPI::toJsonValue(m_main_picture));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIUserForApiContract OAISongListForApiContract::getAuthor() const {
    return m_author;
}
void OAISongListForApiContract::setAuthor(const OAIUserForApiContract &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAISongListForApiContract::is_author_Set() const{
    return m_author_isSet;
}

bool OAISongListForApiContract::is_author_Valid() const{
    return m_author_isValid;
}

bool OAISongListForApiContract::isDeleted() const {
    return m_deleted;
}
void OAISongListForApiContract::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAISongListForApiContract::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAISongListForApiContract::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAISongListForApiContract::getDescription() const {
    return m_description;
}
void OAISongListForApiContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISongListForApiContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAISongListForApiContract::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAISongListForApiContract::getEventDate() const {
    return m_event_date;
}
void OAISongListForApiContract::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAISongListForApiContract::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAISongListForApiContract::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QList<OAIReleaseEventForApiContract> OAISongListForApiContract::getEvents() const {
    return m_events;
}
void OAISongListForApiContract::setEvents(const QList<OAIReleaseEventForApiContract> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAISongListForApiContract::is_events_Set() const{
    return m_events_isSet;
}

bool OAISongListForApiContract::is_events_Valid() const{
    return m_events_isValid;
}

OAISongListFeaturedCategory OAISongListForApiContract::getFeaturedCategory() const {
    return m_featured_category;
}
void OAISongListForApiContract::setFeaturedCategory(const OAISongListFeaturedCategory &featured_category) {
    m_featured_category = featured_category;
    m_featured_category_isSet = true;
}

bool OAISongListForApiContract::is_featured_category_Set() const{
    return m_featured_category_isSet;
}

bool OAISongListForApiContract::is_featured_category_Valid() const{
    return m_featured_category_isValid;
}

qint32 OAISongListForApiContract::getId() const {
    return m_id;
}
void OAISongListForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISongListForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAISongListForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAICommentForApiContract> OAISongListForApiContract::getLatestComments() const {
    return m_latest_comments;
}
void OAISongListForApiContract::setLatestComments(const QList<OAICommentForApiContract> &latest_comments) {
    m_latest_comments = latest_comments;
    m_latest_comments_isSet = true;
}

bool OAISongListForApiContract::is_latest_comments_Set() const{
    return m_latest_comments_isSet;
}

bool OAISongListForApiContract::is_latest_comments_Valid() const{
    return m_latest_comments_isValid;
}

OAIEntryThumbForApiContract OAISongListForApiContract::getMainPicture() const {
    return m_main_picture;
}
void OAISongListForApiContract::setMainPicture(const OAIEntryThumbForApiContract &main_picture) {
    m_main_picture = main_picture;
    m_main_picture_isSet = true;
}

bool OAISongListForApiContract::is_main_picture_Set() const{
    return m_main_picture_isSet;
}

bool OAISongListForApiContract::is_main_picture_Valid() const{
    return m_main_picture_isValid;
}

QString OAISongListForApiContract::getName() const {
    return m_name;
}
void OAISongListForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISongListForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAISongListForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntryStatus OAISongListForApiContract::getStatus() const {
    return m_status;
}
void OAISongListForApiContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISongListForApiContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAISongListForApiContract::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITagUsageForApiContract> OAISongListForApiContract::getTags() const {
    return m_tags;
}
void OAISongListForApiContract::setTags(const QList<OAITagUsageForApiContract> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISongListForApiContract::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISongListForApiContract::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISongListForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISongListForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
