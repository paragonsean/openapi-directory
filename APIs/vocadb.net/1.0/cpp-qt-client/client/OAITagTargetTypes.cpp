/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagTargetTypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagTargetTypes::OAITagTargetTypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagTargetTypes::OAITagTargetTypes() {
    this->initializeModel();
}

OAITagTargetTypes::~OAITagTargetTypes() {}

void OAITagTargetTypes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITagTargetTypes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITagTargetTypes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Nothing", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::NOTHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Album", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::ALBUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Artist", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::ARTIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AlbumArtist", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::ALBUMARTIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Event", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::EVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Song", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::SONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AlbumSong", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::ALBUMSONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArtistSong", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::ARTISTSONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SongList", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::SONGLIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("All", Qt::CaseInsensitive) == 0) {
        m_value = eOAITagTargetTypes::ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITagTargetTypes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITagTargetTypes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITagTargetTypes::NOTHING:
            val = "Nothing";
            break;
        case eOAITagTargetTypes::ALBUM:
            val = "Album";
            break;
        case eOAITagTargetTypes::ARTIST:
            val = "Artist";
            break;
        case eOAITagTargetTypes::ALBUMARTIST:
            val = "AlbumArtist";
            break;
        case eOAITagTargetTypes::EVENT:
            val = "Event";
            break;
        case eOAITagTargetTypes::SONG:
            val = "Song";
            break;
        case eOAITagTargetTypes::ALBUMSONG:
            val = "AlbumSong";
            break;
        case eOAITagTargetTypes::ARTISTSONG:
            val = "ArtistSong";
            break;
        case eOAITagTargetTypes::SONGLIST:
            val = "SongList";
            break;
        case eOAITagTargetTypes::ALL:
            val = "All";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITagTargetTypes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITagTargetTypes::eOAITagTargetTypes OAITagTargetTypes::getValue() const {
    return m_value;
}

void OAITagTargetTypes::setValue(const OAITagTargetTypes::eOAITagTargetTypes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITagTargetTypes::isSet() const {
    
    return m_value_isSet;
}

bool OAITagTargetTypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
