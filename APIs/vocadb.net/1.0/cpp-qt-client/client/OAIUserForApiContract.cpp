/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserForApiContract::OAIUserForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserForApiContract::OAIUserForApiContract() {
    this->initializeModel();
}

OAIUserForApiContract::~OAIUserForApiContract() {}

void OAIUserForApiContract::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_known_languages_isSet = false;
    m_known_languages_isValid = false;

    m_main_picture_isSet = false;
    m_main_picture_isValid = false;

    m_member_since_isSet = false;
    m_member_since_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_old_usernames_isSet = false;
    m_old_usernames_isValid = false;

    m_verified_artist_isSet = false;
    m_verified_artist_isValid = false;
}

void OAIUserForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserForApiContract::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_known_languages_isValid = ::OpenAPI::fromJsonValue(m_known_languages, json[QString("knownLanguages")]);
    m_known_languages_isSet = !json[QString("knownLanguages")].isNull() && m_known_languages_isValid;

    m_main_picture_isValid = ::OpenAPI::fromJsonValue(m_main_picture, json[QString("mainPicture")]);
    m_main_picture_isSet = !json[QString("mainPicture")].isNull() && m_main_picture_isValid;

    m_member_since_isValid = ::OpenAPI::fromJsonValue(m_member_since, json[QString("memberSince")]);
    m_member_since_isSet = !json[QString("memberSince")].isNull() && m_member_since_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_old_usernames_isValid = ::OpenAPI::fromJsonValue(m_old_usernames, json[QString("oldUsernames")]);
    m_old_usernames_isSet = !json[QString("oldUsernames")].isNull() && m_old_usernames_isValid;

    m_verified_artist_isValid = ::OpenAPI::fromJsonValue(m_verified_artist, json[QString("verifiedArtist")]);
    m_verified_artist_isSet = !json[QString("verifiedArtist")].isNull() && m_verified_artist_isValid;
}

QString OAIUserForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_group_id.isSet()) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_known_languages.size() > 0) {
        obj.insert(QString("knownLanguages"), ::OpenAPI::toJsonValue(m_known_languages));
    }
    if (m_main_picture.isSet()) {
        obj.insert(QString("mainPicture"), ::OpenAPI::toJsonValue(m_main_picture));
    }
    if (m_member_since_isSet) {
        obj.insert(QString("memberSince"), ::OpenAPI::toJsonValue(m_member_since));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_old_usernames.size() > 0) {
        obj.insert(QString("oldUsernames"), ::OpenAPI::toJsonValue(m_old_usernames));
    }
    if (m_verified_artist_isSet) {
        obj.insert(QString("verifiedArtist"), ::OpenAPI::toJsonValue(m_verified_artist));
    }
    return obj;
}

bool OAIUserForApiContract::isActive() const {
    return m_active;
}
void OAIUserForApiContract::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUserForApiContract::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUserForApiContract::is_active_Valid() const{
    return m_active_isValid;
}

OAIUserGroupId OAIUserForApiContract::getGroupId() const {
    return m_group_id;
}
void OAIUserForApiContract::setGroupId(const OAIUserGroupId &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIUserForApiContract::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIUserForApiContract::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint32 OAIUserForApiContract::getId() const {
    return m_id;
}
void OAIUserForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIUserKnownLanguageContract> OAIUserForApiContract::getKnownLanguages() const {
    return m_known_languages;
}
void OAIUserForApiContract::setKnownLanguages(const QList<OAIUserKnownLanguageContract> &known_languages) {
    m_known_languages = known_languages;
    m_known_languages_isSet = true;
}

bool OAIUserForApiContract::is_known_languages_Set() const{
    return m_known_languages_isSet;
}

bool OAIUserForApiContract::is_known_languages_Valid() const{
    return m_known_languages_isValid;
}

OAIEntryThumbForApiContract OAIUserForApiContract::getMainPicture() const {
    return m_main_picture;
}
void OAIUserForApiContract::setMainPicture(const OAIEntryThumbForApiContract &main_picture) {
    m_main_picture = main_picture;
    m_main_picture_isSet = true;
}

bool OAIUserForApiContract::is_main_picture_Set() const{
    return m_main_picture_isSet;
}

bool OAIUserForApiContract::is_main_picture_Valid() const{
    return m_main_picture_isValid;
}

QDateTime OAIUserForApiContract::getMemberSince() const {
    return m_member_since;
}
void OAIUserForApiContract::setMemberSince(const QDateTime &member_since) {
    m_member_since = member_since;
    m_member_since_isSet = true;
}

bool OAIUserForApiContract::is_member_since_Set() const{
    return m_member_since_isSet;
}

bool OAIUserForApiContract::is_member_since_Valid() const{
    return m_member_since_isValid;
}

QString OAIUserForApiContract::getName() const {
    return m_name;
}
void OAIUserForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOldUsernameContract> OAIUserForApiContract::getOldUsernames() const {
    return m_old_usernames;
}
void OAIUserForApiContract::setOldUsernames(const QList<OAIOldUsernameContract> &old_usernames) {
    m_old_usernames = old_usernames;
    m_old_usernames_isSet = true;
}

bool OAIUserForApiContract::is_old_usernames_Set() const{
    return m_old_usernames_isSet;
}

bool OAIUserForApiContract::is_old_usernames_Valid() const{
    return m_old_usernames_isValid;
}

bool OAIUserForApiContract::isVerifiedArtist() const {
    return m_verified_artist;
}
void OAIUserForApiContract::setVerifiedArtist(const bool &verified_artist) {
    m_verified_artist = verified_artist;
    m_verified_artist_isSet = true;
}

bool OAIUserForApiContract::is_verified_artist_Set() const{
    return m_verified_artist_isSet;
}

bool OAIUserForApiContract::is_verified_artist_Valid() const{
    return m_verified_artist_isValid;
}

bool OAIUserForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_artist_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
