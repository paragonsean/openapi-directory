/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtistRelationsForApi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtistRelationsForApi::OAIArtistRelationsForApi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtistRelationsForApi::OAIArtistRelationsForApi() {
    this->initializeModel();
}

OAIArtistRelationsForApi::~OAIArtistRelationsForApi() {}

void OAIArtistRelationsForApi::initializeModel() {

    m_latest_albums_isSet = false;
    m_latest_albums_isValid = false;

    m_latest_events_isSet = false;
    m_latest_events_isValid = false;

    m_latest_songs_isSet = false;
    m_latest_songs_isValid = false;

    m_popular_albums_isSet = false;
    m_popular_albums_isValid = false;

    m_popular_songs_isSet = false;
    m_popular_songs_isValid = false;
}

void OAIArtistRelationsForApi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtistRelationsForApi::fromJsonObject(QJsonObject json) {

    m_latest_albums_isValid = ::OpenAPI::fromJsonValue(m_latest_albums, json[QString("latestAlbums")]);
    m_latest_albums_isSet = !json[QString("latestAlbums")].isNull() && m_latest_albums_isValid;

    m_latest_events_isValid = ::OpenAPI::fromJsonValue(m_latest_events, json[QString("latestEvents")]);
    m_latest_events_isSet = !json[QString("latestEvents")].isNull() && m_latest_events_isValid;

    m_latest_songs_isValid = ::OpenAPI::fromJsonValue(m_latest_songs, json[QString("latestSongs")]);
    m_latest_songs_isSet = !json[QString("latestSongs")].isNull() && m_latest_songs_isValid;

    m_popular_albums_isValid = ::OpenAPI::fromJsonValue(m_popular_albums, json[QString("popularAlbums")]);
    m_popular_albums_isSet = !json[QString("popularAlbums")].isNull() && m_popular_albums_isValid;

    m_popular_songs_isValid = ::OpenAPI::fromJsonValue(m_popular_songs, json[QString("popularSongs")]);
    m_popular_songs_isSet = !json[QString("popularSongs")].isNull() && m_popular_songs_isValid;
}

QString OAIArtistRelationsForApi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtistRelationsForApi::asJsonObject() const {
    QJsonObject obj;
    if (m_latest_albums.size() > 0) {
        obj.insert(QString("latestAlbums"), ::OpenAPI::toJsonValue(m_latest_albums));
    }
    if (m_latest_events.size() > 0) {
        obj.insert(QString("latestEvents"), ::OpenAPI::toJsonValue(m_latest_events));
    }
    if (m_latest_songs.size() > 0) {
        obj.insert(QString("latestSongs"), ::OpenAPI::toJsonValue(m_latest_songs));
    }
    if (m_popular_albums.size() > 0) {
        obj.insert(QString("popularAlbums"), ::OpenAPI::toJsonValue(m_popular_albums));
    }
    if (m_popular_songs.size() > 0) {
        obj.insert(QString("popularSongs"), ::OpenAPI::toJsonValue(m_popular_songs));
    }
    return obj;
}

QList<OAIAlbumForApiContract> OAIArtistRelationsForApi::getLatestAlbums() const {
    return m_latest_albums;
}
void OAIArtistRelationsForApi::setLatestAlbums(const QList<OAIAlbumForApiContract> &latest_albums) {
    m_latest_albums = latest_albums;
    m_latest_albums_isSet = true;
}

bool OAIArtistRelationsForApi::is_latest_albums_Set() const{
    return m_latest_albums_isSet;
}

bool OAIArtistRelationsForApi::is_latest_albums_Valid() const{
    return m_latest_albums_isValid;
}

QList<OAIReleaseEventForApiContract> OAIArtistRelationsForApi::getLatestEvents() const {
    return m_latest_events;
}
void OAIArtistRelationsForApi::setLatestEvents(const QList<OAIReleaseEventForApiContract> &latest_events) {
    m_latest_events = latest_events;
    m_latest_events_isSet = true;
}

bool OAIArtistRelationsForApi::is_latest_events_Set() const{
    return m_latest_events_isSet;
}

bool OAIArtistRelationsForApi::is_latest_events_Valid() const{
    return m_latest_events_isValid;
}

QList<OAISongForApiContract> OAIArtistRelationsForApi::getLatestSongs() const {
    return m_latest_songs;
}
void OAIArtistRelationsForApi::setLatestSongs(const QList<OAISongForApiContract> &latest_songs) {
    m_latest_songs = latest_songs;
    m_latest_songs_isSet = true;
}

bool OAIArtistRelationsForApi::is_latest_songs_Set() const{
    return m_latest_songs_isSet;
}

bool OAIArtistRelationsForApi::is_latest_songs_Valid() const{
    return m_latest_songs_isValid;
}

QList<OAIAlbumForApiContract> OAIArtistRelationsForApi::getPopularAlbums() const {
    return m_popular_albums;
}
void OAIArtistRelationsForApi::setPopularAlbums(const QList<OAIAlbumForApiContract> &popular_albums) {
    m_popular_albums = popular_albums;
    m_popular_albums_isSet = true;
}

bool OAIArtistRelationsForApi::is_popular_albums_Set() const{
    return m_popular_albums_isSet;
}

bool OAIArtistRelationsForApi::is_popular_albums_Valid() const{
    return m_popular_albums_isValid;
}

QList<OAISongForApiContract> OAIArtistRelationsForApi::getPopularSongs() const {
    return m_popular_songs;
}
void OAIArtistRelationsForApi::setPopularSongs(const QList<OAISongForApiContract> &popular_songs) {
    m_popular_songs = popular_songs;
    m_popular_songs_isSet = true;
}

bool OAIArtistRelationsForApi::is_popular_songs_Set() const{
    return m_popular_songs_isSet;
}

bool OAIArtistRelationsForApi::is_popular_songs_Valid() const{
    return m_popular_songs_isValid;
}

bool OAIArtistRelationsForApi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_latest_albums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_songs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_popular_albums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_popular_songs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtistRelationsForApi::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
