/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscussionTopicContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscussionTopicContract::OAIDiscussionTopicContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscussionTopicContract::OAIDiscussionTopicContract() {
    this->initializeModel();
}

OAIDiscussionTopicContract::~OAIDiscussionTopicContract() {}

void OAIDiscussionTopicContract::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_comment_isSet = false;
    m_last_comment_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDiscussionTopicContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscussionTopicContract::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("folderId")]);
    m_folder_id_isSet = !json[QString("folderId")].isNull() && m_folder_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_comment_isValid = ::OpenAPI::fromJsonValue(m_last_comment, json[QString("lastComment")]);
    m_last_comment_isSet = !json[QString("lastComment")].isNull() && m_last_comment_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDiscussionTopicContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscussionTopicContract::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_folder_id_isSet) {
        obj.insert(QString("folderId"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_comment.isSet()) {
        obj.insert(QString("lastComment"), ::OpenAPI::toJsonValue(m_last_comment));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIUserForApiContract OAIDiscussionTopicContract::getAuthor() const {
    return m_author;
}
void OAIDiscussionTopicContract::setAuthor(const OAIUserForApiContract &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIDiscussionTopicContract::is_author_Set() const{
    return m_author_isSet;
}

bool OAIDiscussionTopicContract::is_author_Valid() const{
    return m_author_isValid;
}

qint32 OAIDiscussionTopicContract::getCommentCount() const {
    return m_comment_count;
}
void OAIDiscussionTopicContract::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIDiscussionTopicContract::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIDiscussionTopicContract::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

QList<OAICommentForApiContract> OAIDiscussionTopicContract::getComments() const {
    return m_comments;
}
void OAIDiscussionTopicContract::setComments(const QList<OAICommentForApiContract> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIDiscussionTopicContract::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIDiscussionTopicContract::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIDiscussionTopicContract::getContent() const {
    return m_content;
}
void OAIDiscussionTopicContract::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIDiscussionTopicContract::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDiscussionTopicContract::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIDiscussionTopicContract::getCreated() const {
    return m_created;
}
void OAIDiscussionTopicContract::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDiscussionTopicContract::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDiscussionTopicContract::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIDiscussionTopicContract::getFolderId() const {
    return m_folder_id;
}
void OAIDiscussionTopicContract::setFolderId(const qint32 &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIDiscussionTopicContract::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIDiscussionTopicContract::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

qint32 OAIDiscussionTopicContract::getId() const {
    return m_id;
}
void OAIDiscussionTopicContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDiscussionTopicContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDiscussionTopicContract::is_id_Valid() const{
    return m_id_isValid;
}

OAICommentForApiContract OAIDiscussionTopicContract::getLastComment() const {
    return m_last_comment;
}
void OAIDiscussionTopicContract::setLastComment(const OAICommentForApiContract &last_comment) {
    m_last_comment = last_comment;
    m_last_comment_isSet = true;
}

bool OAIDiscussionTopicContract::is_last_comment_Set() const{
    return m_last_comment_isSet;
}

bool OAIDiscussionTopicContract::is_last_comment_Valid() const{
    return m_last_comment_isValid;
}

bool OAIDiscussionTopicContract::isLocked() const {
    return m_locked;
}
void OAIDiscussionTopicContract::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIDiscussionTopicContract::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIDiscussionTopicContract::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIDiscussionTopicContract::getName() const {
    return m_name;
}
void OAIDiscussionTopicContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDiscussionTopicContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDiscussionTopicContract::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDiscussionTopicContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscussionTopicContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
