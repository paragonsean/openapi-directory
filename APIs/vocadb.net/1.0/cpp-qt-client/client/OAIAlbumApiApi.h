/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlbumApiApi_H
#define OAI_OAIAlbumApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvancedSearchFilterParams.h"
#include "OAIAlbumForApiContract.h"
#include "OAIAlbumForApiContractPartialFindResult.h"
#include "OAIAlbumForUserForApiContract.h"
#include "OAIAlbumOptionalFields.h"
#include "OAIAlbumReviewContract.h"
#include "OAIAlbumSortRule.h"
#include "OAIArtistAlbumParticipationStatus.h"
#include "OAICommentForApiContract.h"
#include "OAIContentLanguagePreference.h"
#include "OAIDiscType.h"
#include "OAIEntryStatus.h"
#include "OAINameMatchMode.h"
#include "OAISongInAlbumForApiContract.h"
#include "OAISongOptionalFields.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlbumApiApi : public QObject {
    Q_OBJECT

public:
    OAIAlbumApiApi(const int timeOut = 0);
    ~OAIAlbumApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  comment_id qint32 [required]
    */
    virtual void apiAlbumsCommentsCommentIdDelete(const qint32 &comment_id);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiAlbumsCommentsCommentIdPost(const qint32 &comment_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  disc_types OAIDiscType [optional]
    * @param[in]  tag_name QList<QString> [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  child_tags bool [optional]
    * @param[in]  artist_id QList<qint32> [optional]
    * @param[in]  artist_participation_status OAIArtistAlbumParticipationStatus [optional]
    * @param[in]  child_voicebanks bool [optional]
    * @param[in]  include_members bool [optional]
    * @param[in]  barcode QString [optional]
    * @param[in]  status OAIEntryStatus [optional]
    * @param[in]  release_date_after QDateTime [optional]
    * @param[in]  release_date_before QDateTime [optional]
    * @param[in]  advanced_filters QList<OAIAdvancedSearchFilterParams> [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAIAlbumSortRule [optional]
    * @param[in]  prefer_accurate_matches bool [optional]
    * @param[in]  deleted bool [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  fields OAIAlbumOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiAlbumsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDiscType> &disc_types = ::OpenAPI::OptionalParam<OAIDiscType>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_tags = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &artist_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIArtistAlbumParticipationStatus> &artist_participation_status = ::OpenAPI::OptionalParam<OAIArtistAlbumParticipationStatus>(), const ::OpenAPI::OptionalParam<bool> &child_voicebanks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_members = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &barcode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEntryStatus> &status = ::OpenAPI::OptionalParam<OAIEntryStatus>(), const ::OpenAPI::OptionalParam<QDateTime> &release_date_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &release_date_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>> &advanced_filters = ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAlbumSortRule> &sort = ::OpenAPI::OptionalParam<OAIAlbumSortRule>(), const ::OpenAPI::OptionalParam<bool> &prefer_accurate_matches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAIAlbumOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIAlbumOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiAlbumsIdCommentsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiAlbumsIdCommentsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  notes QString [optional]
    */
    virtual void apiAlbumsIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAIAlbumOptionalFields [optional]
    * @param[in]  song_fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiAlbumsIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIAlbumOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIAlbumOptionalFields>(), const ::OpenAPI::OptionalParam<OAISongOptionalFields> &song_fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  language_code QString [optional]
    */
    virtual void apiAlbumsIdReviewsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_album_review_contract OAIAlbumReviewContract [optional]
    */
    virtual void apiAlbumsIdReviewsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAIAlbumReviewContract> &oai_album_review_contract = ::OpenAPI::OptionalParam<OAIAlbumReviewContract>());

    /**
    * @param[in]  review_id qint32 [required]
    * @param[in]  id QString [required]
    */
    virtual void apiAlbumsIdReviewsReviewIdDelete(const qint32 &review_id, const QString &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  field QList<QString> [optional]
    * @param[in]  disc_number qint32 [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiAlbumsIdTracksFieldsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QList<QString>> &field = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &disc_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiAlbumsIdTracksGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  language_preference OAIContentLanguagePreference [optional]
    */
    virtual void apiAlbumsIdUserCollectionsGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &language_preference = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void apiAlbumsNamesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  language_preference OAIContentLanguagePreference [optional]
    * @param[in]  fields OAIAlbumOptionalFields [optional]
    */
    virtual void apiAlbumsNewGet(const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &language_preference = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>(), const ::OpenAPI::OptionalParam<OAIAlbumOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIAlbumOptionalFields>());

    /**
    * @param[in]  ignore_ids QList<qint32> [optional]
    * @param[in]  language_preference OAIContentLanguagePreference [optional]
    * @param[in]  fields OAIAlbumOptionalFields [optional]
    */
    virtual void apiAlbumsTopGet(const ::OpenAPI::OptionalParam<QList<qint32>> &ignore_ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &language_preference = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>(), const ::OpenAPI::OptionalParam<OAIAlbumOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIAlbumOptionalFields>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiAlbumsCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsCommentsCommentIdPostCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdReviewsGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdReviewsPostCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdReviewsReviewIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdTracksFieldsGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdTracksGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsIdUserCollectionsGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsNamesGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsNewGetCallback(OAIHttpRequestWorker *worker);
    void apiAlbumsTopGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiAlbumsCommentsCommentIdDeleteSignal();
    void apiAlbumsCommentsCommentIdPostSignal();
    void apiAlbumsGetSignal(OAIAlbumForApiContractPartialFindResult summary);
    void apiAlbumsIdCommentsGetSignal(QList<OAICommentForApiContract> summary);
    void apiAlbumsIdCommentsPostSignal(OAICommentForApiContract summary);
    void apiAlbumsIdDeleteSignal();
    void apiAlbumsIdGetSignal(OAIAlbumForApiContract summary);
    void apiAlbumsIdReviewsGetSignal(QList<OAIAlbumReviewContract> summary);
    void apiAlbumsIdReviewsPostSignal(OAIAlbumReviewContract summary);
    void apiAlbumsIdReviewsReviewIdDeleteSignal();
    void apiAlbumsIdTracksFieldsGetSignal(QList<QMap<QString, QString>> summary);
    void apiAlbumsIdTracksGetSignal(QList<OAISongInAlbumForApiContract> summary);
    void apiAlbumsIdUserCollectionsGetSignal(QList<OAIAlbumForUserForApiContract> summary);
    void apiAlbumsNamesGetSignal(QList<QString> summary);
    void apiAlbumsNewGetSignal(QList<OAIAlbumForApiContract> summary);
    void apiAlbumsTopGetSignal(QList<OAIAlbumForApiContract> summary);


    void apiAlbumsCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiAlbumsCommentsCommentIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiAlbumsGetSignalFull(OAIHttpRequestWorker *worker, OAIAlbumForApiContractPartialFindResult summary);
    void apiAlbumsIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICommentForApiContract> summary);
    void apiAlbumsIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContract summary);
    void apiAlbumsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiAlbumsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAlbumForApiContract summary);
    void apiAlbumsIdReviewsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbumReviewContract> summary);
    void apiAlbumsIdReviewsPostSignalFull(OAIHttpRequestWorker *worker, OAIAlbumReviewContract summary);
    void apiAlbumsIdReviewsReviewIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiAlbumsIdTracksFieldsGetSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QString>> summary);
    void apiAlbumsIdTracksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISongInAlbumForApiContract> summary);
    void apiAlbumsIdUserCollectionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbumForUserForApiContract> summary);
    void apiAlbumsNamesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiAlbumsNewGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbumForApiContract> summary);
    void apiAlbumsTopGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbumForApiContract> summary);

    Q_DECL_DEPRECATED_X("Use apiAlbumsCommentsCommentIdDeleteSignalError() instead")
    void apiAlbumsCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsCommentsCommentIdPostSignalError() instead")
    void apiAlbumsCommentsCommentIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsCommentsCommentIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsGetSignalError() instead")
    void apiAlbumsGetSignalE(OAIAlbumForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsGetSignalError(OAIAlbumForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdCommentsGetSignalError() instead")
    void apiAlbumsIdCommentsGetSignalE(QList<OAICommentForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdCommentsGetSignalError(QList<OAICommentForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdCommentsPostSignalError() instead")
    void apiAlbumsIdCommentsPostSignalE(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdCommentsPostSignalError(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdDeleteSignalError() instead")
    void apiAlbumsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdGetSignalError() instead")
    void apiAlbumsIdGetSignalE(OAIAlbumForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdGetSignalError(OAIAlbumForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdReviewsGetSignalError() instead")
    void apiAlbumsIdReviewsGetSignalE(QList<OAIAlbumReviewContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdReviewsGetSignalError(QList<OAIAlbumReviewContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdReviewsPostSignalError() instead")
    void apiAlbumsIdReviewsPostSignalE(OAIAlbumReviewContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdReviewsPostSignalError(OAIAlbumReviewContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdReviewsReviewIdDeleteSignalError() instead")
    void apiAlbumsIdReviewsReviewIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdReviewsReviewIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdTracksFieldsGetSignalError() instead")
    void apiAlbumsIdTracksFieldsGetSignalE(QList<QMap<QString, QString>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdTracksFieldsGetSignalError(QList<QMap<QString, QString>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdTracksGetSignalError() instead")
    void apiAlbumsIdTracksGetSignalE(QList<OAISongInAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdTracksGetSignalError(QList<OAISongInAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdUserCollectionsGetSignalError() instead")
    void apiAlbumsIdUserCollectionsGetSignalE(QList<OAIAlbumForUserForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdUserCollectionsGetSignalError(QList<OAIAlbumForUserForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsNamesGetSignalError() instead")
    void apiAlbumsNamesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsNamesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsNewGetSignalError() instead")
    void apiAlbumsNewGetSignalE(QList<OAIAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsNewGetSignalError(QList<OAIAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsTopGetSignalError() instead")
    void apiAlbumsTopGetSignalE(QList<OAIAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsTopGetSignalError(QList<OAIAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiAlbumsCommentsCommentIdDeleteSignalErrorFull() instead")
    void apiAlbumsCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsCommentsCommentIdPostSignalErrorFull() instead")
    void apiAlbumsCommentsCommentIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsCommentsCommentIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsGetSignalErrorFull() instead")
    void apiAlbumsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdCommentsGetSignalErrorFull() instead")
    void apiAlbumsIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdCommentsPostSignalErrorFull() instead")
    void apiAlbumsIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdDeleteSignalErrorFull() instead")
    void apiAlbumsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdGetSignalErrorFull() instead")
    void apiAlbumsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdReviewsGetSignalErrorFull() instead")
    void apiAlbumsIdReviewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdReviewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdReviewsPostSignalErrorFull() instead")
    void apiAlbumsIdReviewsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdReviewsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdReviewsReviewIdDeleteSignalErrorFull() instead")
    void apiAlbumsIdReviewsReviewIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdReviewsReviewIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdTracksFieldsGetSignalErrorFull() instead")
    void apiAlbumsIdTracksFieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdTracksFieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdTracksGetSignalErrorFull() instead")
    void apiAlbumsIdTracksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdTracksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsIdUserCollectionsGetSignalErrorFull() instead")
    void apiAlbumsIdUserCollectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsIdUserCollectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsNamesGetSignalErrorFull() instead")
    void apiAlbumsNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsNewGetSignalErrorFull() instead")
    void apiAlbumsNewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsNewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiAlbumsTopGetSignalErrorFull() instead")
    void apiAlbumsTopGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiAlbumsTopGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
