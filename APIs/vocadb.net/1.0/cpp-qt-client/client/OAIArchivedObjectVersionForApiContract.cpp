/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchivedObjectVersionForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchivedObjectVersionForApiContract::OAIArchivedObjectVersionForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchivedObjectVersionForApiContract::OAIArchivedObjectVersionForApiContract() {
    this->initializeModel();
}

OAIArchivedObjectVersionForApiContract::~OAIArchivedObjectVersionForApiContract() {}

void OAIArchivedObjectVersionForApiContract::initializeModel() {

    m_agent_name_isSet = false;
    m_agent_name_isValid = false;

    m_anything_changed_isSet = false;
    m_anything_changed_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_changed_fields_isSet = false;
    m_changed_fields_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_snapshot_isSet = false;
    m_is_snapshot_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIArchivedObjectVersionForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArchivedObjectVersionForApiContract::fromJsonObject(QJsonObject json) {

    m_agent_name_isValid = ::OpenAPI::fromJsonValue(m_agent_name, json[QString("agentName")]);
    m_agent_name_isSet = !json[QString("agentName")].isNull() && m_agent_name_isValid;

    m_anything_changed_isValid = ::OpenAPI::fromJsonValue(m_anything_changed, json[QString("anythingChanged")]);
    m_anything_changed_isSet = !json[QString("anythingChanged")].isNull() && m_anything_changed_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_changed_fields_isValid = ::OpenAPI::fromJsonValue(m_changed_fields, json[QString("changedFields")]);
    m_changed_fields_isSet = !json[QString("changedFields")].isNull() && m_changed_fields_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_snapshot_isValid = ::OpenAPI::fromJsonValue(m_is_snapshot, json[QString("isSnapshot")]);
    m_is_snapshot_isSet = !json[QString("isSnapshot")].isNull() && m_is_snapshot_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIArchivedObjectVersionForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArchivedObjectVersionForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_name_isSet) {
        obj.insert(QString("agentName"), ::OpenAPI::toJsonValue(m_agent_name));
    }
    if (m_anything_changed_isSet) {
        obj.insert(QString("anythingChanged"), ::OpenAPI::toJsonValue(m_anything_changed));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_changed_fields.size() > 0) {
        obj.insert(QString("changedFields"), ::OpenAPI::toJsonValue(m_changed_fields));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_snapshot_isSet) {
        obj.insert(QString("isSnapshot"), ::OpenAPI::toJsonValue(m_is_snapshot));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIArchivedObjectVersionForApiContract::getAgentName() const {
    return m_agent_name;
}
void OAIArchivedObjectVersionForApiContract::setAgentName(const QString &agent_name) {
    m_agent_name = agent_name;
    m_agent_name_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_agent_name_Set() const{
    return m_agent_name_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_agent_name_Valid() const{
    return m_agent_name_isValid;
}

bool OAIArchivedObjectVersionForApiContract::isAnythingChanged() const {
    return m_anything_changed;
}
void OAIArchivedObjectVersionForApiContract::setAnythingChanged(const bool &anything_changed) {
    m_anything_changed = anything_changed;
    m_anything_changed_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_anything_changed_Set() const{
    return m_anything_changed_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_anything_changed_Valid() const{
    return m_anything_changed_isValid;
}

OAIUserForApiContract OAIArchivedObjectVersionForApiContract::getAuthor() const {
    return m_author;
}
void OAIArchivedObjectVersionForApiContract::setAuthor(const OAIUserForApiContract &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_author_Set() const{
    return m_author_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_author_Valid() const{
    return m_author_isValid;
}

QList<QString> OAIArchivedObjectVersionForApiContract::getChangedFields() const {
    return m_changed_fields;
}
void OAIArchivedObjectVersionForApiContract::setChangedFields(const QList<QString> &changed_fields) {
    m_changed_fields = changed_fields;
    m_changed_fields_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_changed_fields_Set() const{
    return m_changed_fields_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_changed_fields_Valid() const{
    return m_changed_fields_isValid;
}

QDateTime OAIArchivedObjectVersionForApiContract::getCreated() const {
    return m_created;
}
void OAIArchivedObjectVersionForApiContract::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_created_Set() const{
    return m_created_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIArchivedObjectVersionForApiContract::isHidden() const {
    return m_hidden;
}
void OAIArchivedObjectVersionForApiContract::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_hidden_Valid() const{
    return m_hidden_isValid;
}

qint32 OAIArchivedObjectVersionForApiContract::getId() const {
    return m_id;
}
void OAIArchivedObjectVersionForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIArchivedObjectVersionForApiContract::isIsSnapshot() const {
    return m_is_snapshot;
}
void OAIArchivedObjectVersionForApiContract::setIsSnapshot(const bool &is_snapshot) {
    m_is_snapshot = is_snapshot;
    m_is_snapshot_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_is_snapshot_Set() const{
    return m_is_snapshot_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_is_snapshot_Valid() const{
    return m_is_snapshot_isValid;
}

QString OAIArchivedObjectVersionForApiContract::getNotes() const {
    return m_notes;
}
void OAIArchivedObjectVersionForApiContract::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIArchivedObjectVersionForApiContract::getReason() const {
    return m_reason;
}
void OAIArchivedObjectVersionForApiContract::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIEntryStatus OAIArchivedObjectVersionForApiContract::getStatus() const {
    return m_status;
}
void OAIArchivedObjectVersionForApiContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIArchivedObjectVersionForApiContract::getVersion() const {
    return m_version;
}
void OAIArchivedObjectVersionForApiContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIArchivedObjectVersionForApiContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAIArchivedObjectVersionForApiContract::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIArchivedObjectVersionForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anything_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArchivedObjectVersionForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
