/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryType::OAIEntryType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryType::OAIEntryType() {
    this->initializeModel();
}

OAIEntryType::~OAIEntryType() {}

void OAIEntryType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEntryType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEntryType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Undefined", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::UNDEFINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Album", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::ALBUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Artist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::ARTIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DiscussionTopic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::DISCUSSIONTOPIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::PV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReleaseEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::RELEASEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReleaseEventSeries", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::RELEASEEVENTSERIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Song", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::SONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SongList", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::SONGLIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tag", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::TAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("User", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::USER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Venue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntryType::VENUE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEntryType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEntryType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEntryType::UNDEFINED:
            val = "Undefined";
            break;
        case eOAIEntryType::ALBUM:
            val = "Album";
            break;
        case eOAIEntryType::ARTIST:
            val = "Artist";
            break;
        case eOAIEntryType::DISCUSSIONTOPIC:
            val = "DiscussionTopic";
            break;
        case eOAIEntryType::PV:
            val = "PV";
            break;
        case eOAIEntryType::RELEASEEVENT:
            val = "ReleaseEvent";
            break;
        case eOAIEntryType::RELEASEEVENTSERIES:
            val = "ReleaseEventSeries";
            break;
        case eOAIEntryType::SONG:
            val = "Song";
            break;
        case eOAIEntryType::SONGLIST:
            val = "SongList";
            break;
        case eOAIEntryType::TAG:
            val = "Tag";
            break;
        case eOAIEntryType::USER:
            val = "User";
            break;
        case eOAIEntryType::VENUE:
            val = "Venue";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEntryType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEntryType::eOAIEntryType OAIEntryType::getValue() const {
    return m_value;
}

void OAIEntryType::setValue(const OAIEntryType::eOAIEntryType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEntryType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEntryType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
