/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtistSortRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtistSortRule::OAIArtistSortRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtistSortRule::OAIArtistSortRule() {
    this->initializeModel();
}

OAIArtistSortRule::~OAIArtistSortRule() {}

void OAIArtistSortRule::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArtistSortRule::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArtistSortRule::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AdditionDate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::ADDITIONDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AdditionDateAsc", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::ADDITIONDATEASC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReleaseDate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::RELEASEDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SongCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::SONGCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SongRating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::SONGRATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FollowerCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::FOLLOWERCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArtistType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistSortRule::ARTISTTYPE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArtistSortRule::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArtistSortRule::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArtistSortRule::NONE:
            val = "None";
            break;
        case eOAIArtistSortRule::NAME:
            val = "Name";
            break;
        case eOAIArtistSortRule::ADDITIONDATE:
            val = "AdditionDate";
            break;
        case eOAIArtistSortRule::ADDITIONDATEASC:
            val = "AdditionDateAsc";
            break;
        case eOAIArtistSortRule::RELEASEDATE:
            val = "ReleaseDate";
            break;
        case eOAIArtistSortRule::SONGCOUNT:
            val = "SongCount";
            break;
        case eOAIArtistSortRule::SONGRATING:
            val = "SongRating";
            break;
        case eOAIArtistSortRule::FOLLOWERCOUNT:
            val = "FollowerCount";
            break;
        case eOAIArtistSortRule::ARTISTTYPE:
            val = "ArtistType";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArtistSortRule::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArtistSortRule::eOAIArtistSortRule OAIArtistSortRule::getValue() const {
    return m_value;
}

void OAIArtistSortRule::setValue(const OAIArtistSortRule::eOAIArtistSortRule& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArtistSortRule::isSet() const {
    
    return m_value_isSet;
}

bool OAIArtistSortRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
