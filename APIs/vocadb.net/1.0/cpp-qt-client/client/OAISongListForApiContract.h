/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISongListForApiContract.h
 *
 * 
 */

#ifndef OAISongListForApiContract_H
#define OAISongListForApiContract_H

#include <QJsonObject>

#include "OAICommentForApiContract.h"
#include "OAIEntryStatus.h"
#include "OAIEntryThumbForApiContract.h"
#include "OAIReleaseEventForApiContract.h"
#include "OAISongListFeaturedCategory.h"
#include "OAITagUsageForApiContract.h"
#include "OAIUserForApiContract.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserForApiContract;
class OAIReleaseEventForApiContract;
class OAICommentForApiContract;
class OAIEntryThumbForApiContract;
class OAITagUsageForApiContract;

class OAISongListForApiContract : public OAIObject {
public:
    OAISongListForApiContract();
    OAISongListForApiContract(QString json);
    ~OAISongListForApiContract() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUserForApiContract getAuthor() const;
    void setAuthor(const OAIUserForApiContract &author);
    bool is_author_Set() const;
    bool is_author_Valid() const;

    bool isDeleted() const;
    void setDeleted(const bool &deleted);
    bool is_deleted_Set() const;
    bool is_deleted_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getEventDate() const;
    void setEventDate(const QDateTime &event_date);
    bool is_event_date_Set() const;
    bool is_event_date_Valid() const;

    QList<OAIReleaseEventForApiContract> getEvents() const;
    void setEvents(const QList<OAIReleaseEventForApiContract> &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    OAISongListFeaturedCategory getFeaturedCategory() const;
    void setFeaturedCategory(const OAISongListFeaturedCategory &featured_category);
    bool is_featured_category_Set() const;
    bool is_featured_category_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAICommentForApiContract> getLatestComments() const;
    void setLatestComments(const QList<OAICommentForApiContract> &latest_comments);
    bool is_latest_comments_Set() const;
    bool is_latest_comments_Valid() const;

    OAIEntryThumbForApiContract getMainPicture() const;
    void setMainPicture(const OAIEntryThumbForApiContract &main_picture);
    bool is_main_picture_Set() const;
    bool is_main_picture_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIEntryStatus getStatus() const;
    void setStatus(const OAIEntryStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAITagUsageForApiContract> getTags() const;
    void setTags(const QList<OAITagUsageForApiContract> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUserForApiContract m_author;
    bool m_author_isSet;
    bool m_author_isValid;

    bool m_deleted;
    bool m_deleted_isSet;
    bool m_deleted_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_event_date;
    bool m_event_date_isSet;
    bool m_event_date_isValid;

    QList<OAIReleaseEventForApiContract> m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    OAISongListFeaturedCategory m_featured_category;
    bool m_featured_category_isSet;
    bool m_featured_category_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAICommentForApiContract> m_latest_comments;
    bool m_latest_comments_isSet;
    bool m_latest_comments_isValid;

    OAIEntryThumbForApiContract m_main_picture;
    bool m_main_picture_isSet;
    bool m_main_picture_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIEntryStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAITagUsageForApiContract> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISongListForApiContract)

#endif // OAISongListForApiContract_H
