/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserLanguageProficiency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserLanguageProficiency::OAIUserLanguageProficiency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserLanguageProficiency::OAIUserLanguageProficiency() {
    this->initializeModel();
}

OAIUserLanguageProficiency::~OAIUserLanguageProficiency() {}

void OAIUserLanguageProficiency::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUserLanguageProficiency::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUserLanguageProficiency::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Nothing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserLanguageProficiency::NOTHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Basics", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserLanguageProficiency::BASICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Intermediate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserLanguageProficiency::INTERMEDIATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Advanced", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserLanguageProficiency::ADVANCED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Native", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUserLanguageProficiency::NATIVE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUserLanguageProficiency::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUserLanguageProficiency::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUserLanguageProficiency::NOTHING:
            val = "Nothing";
            break;
        case eOAIUserLanguageProficiency::BASICS:
            val = "Basics";
            break;
        case eOAIUserLanguageProficiency::INTERMEDIATE:
            val = "Intermediate";
            break;
        case eOAIUserLanguageProficiency::ADVANCED:
            val = "Advanced";
            break;
        case eOAIUserLanguageProficiency::NATIVE:
            val = "Native";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUserLanguageProficiency::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUserLanguageProficiency::eOAIUserLanguageProficiency OAIUserLanguageProficiency::getValue() const {
    return m_value;
}

void OAIUserLanguageProficiency::setValue(const OAIUserLanguageProficiency::eOAIUserLanguageProficiency& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUserLanguageProficiency::isSet() const {
    
    return m_value_isSet;
}

bool OAIUserLanguageProficiency::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
