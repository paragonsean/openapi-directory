/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatedSongForUserForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatedSongForUserForApiContract::OAIRatedSongForUserForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatedSongForUserForApiContract::OAIRatedSongForUserForApiContract() {
    this->initializeModel();
}

OAIRatedSongForUserForApiContract::~OAIRatedSongForUserForApiContract() {}

void OAIRatedSongForUserForApiContract::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRatedSongForUserForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatedSongForUserForApiContract::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_song_isValid = ::OpenAPI::fromJsonValue(m_song, json[QString("song")]);
    m_song_isSet = !json[QString("song")].isNull() && m_song_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRatedSongForUserForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatedSongForUserForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_song.isSet()) {
        obj.insert(QString("song"), ::OpenAPI::toJsonValue(m_song));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIRatedSongForUserForApiContract::getDate() const {
    return m_date;
}
void OAIRatedSongForUserForApiContract::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIRatedSongForUserForApiContract::is_date_Set() const{
    return m_date_isSet;
}

bool OAIRatedSongForUserForApiContract::is_date_Valid() const{
    return m_date_isValid;
}

OAISongVoteRating OAIRatedSongForUserForApiContract::getRating() const {
    return m_rating;
}
void OAIRatedSongForUserForApiContract::setRating(const OAISongVoteRating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIRatedSongForUserForApiContract::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIRatedSongForUserForApiContract::is_rating_Valid() const{
    return m_rating_isValid;
}

OAISongForApiContract OAIRatedSongForUserForApiContract::getSong() const {
    return m_song;
}
void OAIRatedSongForUserForApiContract::setSong(const OAISongForApiContract &song) {
    m_song = song;
    m_song_isSet = true;
}

bool OAIRatedSongForUserForApiContract::is_song_Set() const{
    return m_song_isSet;
}

bool OAIRatedSongForUserForApiContract::is_song_Valid() const{
    return m_song_isValid;
}

OAIUserForApiContract OAIRatedSongForUserForApiContract::getUser() const {
    return m_user;
}
void OAIRatedSongForUserForApiContract::setUser(const OAIUserForApiContract &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRatedSongForUserForApiContract::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRatedSongForUserForApiContract::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRatedSongForUserForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_song.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatedSongForUserForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
