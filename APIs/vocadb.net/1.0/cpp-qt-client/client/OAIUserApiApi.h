/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApiApi_H
#define OAI_OAIUserApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvancedSearchFilterParams.h"
#include "OAIAlbumForUserForApiContract.h"
#include "OAIAlbumForUserForApiContractPartialFindResult.h"
#include "OAIAlbumOptionalFields.h"
#include "OAIAlbumSortRule.h"
#include "OAIArtistForUserForApiContract.h"
#include "OAIArtistForUserForApiContractPartialFindResult.h"
#include "OAIArtistOptionalFields.h"
#include "OAIArtistSortRule.h"
#include "OAIArtistType.h"
#include "OAICommentForApiContract.h"
#include "OAICommentForApiContractPartialFindResult.h"
#include "OAIContentLanguagePreference.h"
#include "OAICreateReportModel.h"
#include "OAIDiscType.h"
#include "OAIEntryEditDataContract.h"
#include "OAIEntryType.h"
#include "OAILogicalGrouping.h"
#include "OAIMediaType.h"
#include "OAINameMatchMode.h"
#include "OAIPVServices.h"
#include "OAIPurchaseStatus.h"
#include "OAIPurchaseStatuses.h"
#include "OAIRatedSongForUserForApiContractPartialFindResult.h"
#include "OAIRatedSongForUserSortRule.h"
#include "OAIReleaseEventForApiContract.h"
#include "OAISongListForApiContractPartialFindResult.h"
#include "OAISongListOptionalFields.h"
#include "OAISongListSortRule.h"
#include "OAISongOptionalFields.h"
#include "OAISongVoteRating.h"
#include "OAIUserEventRelationshipType.h"
#include "OAIUserForApiContract.h"
#include "OAIUserForApiContractPartialFindResult.h"
#include "OAIUserGroupId.h"
#include "OAIUserInboxType.h"
#include "OAIUserMessageContract.h"
#include "OAIUserMessageContractPartialFindResult.h"
#include "OAIUserOptionalFields.h"
#include "OAIUserSortRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApiApi : public QObject {
    Q_OBJECT

public:
    OAIUserApiApi(const int timeOut = 0);
    ~OAIUserApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  album_id qint32 [required]
    */
    virtual void apiUsersCurrentAlbumCollectionStatusesAlbumIdGet(const qint32 &album_id);

    /**
    * @param[in]  album_id qint32 [required]
    * @param[in]  collection_status OAIPurchaseStatus [optional]
    * @param[in]  media_type OAIMediaType [optional]
    * @param[in]  rating qint32 [optional]
    */
    virtual void apiUsersCurrentAlbumsAlbumIdPost(const qint32 &album_id, const ::OpenAPI::OptionalParam<OAIPurchaseStatus> &collection_status = ::OpenAPI::OptionalParam<OAIPurchaseStatus>(), const ::OpenAPI::OptionalParam<OAIMediaType> &media_type = ::OpenAPI::OptionalParam<OAIMediaType>(), const ::OpenAPI::OptionalParam<qint32> &rating = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  artist_id qint32 [required]
    */
    virtual void apiUsersCurrentFollowedArtistsArtistIdGet(const qint32 &artist_id);

    /**
    * @param[in]  tag_id qint32 [required]
    */
    virtual void apiUsersCurrentFollowedTagsTagIdDelete(const qint32 &tag_id);

    /**
    * @param[in]  tag_id qint32 [required]
    */
    virtual void apiUsersCurrentFollowedTagsTagIdPost(const qint32 &tag_id);

    /**
    * @param[in]  fields OAIUserOptionalFields [optional]
    */
    virtual void apiUsersCurrentGet(const ::OpenAPI::OptionalParam<OAIUserOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIUserOptionalFields>());

    /**
    * @param[in]  song_id qint32 [required]
    */
    virtual void apiUsersCurrentRatedSongsSongIdGet(const qint32 &song_id);

    /**
    * @param[in]  entry_type OAIEntryType [optional]
    * @param[in]  entry_id qint32 [optional]
    */
    virtual void apiUsersCurrentRefreshEntryEditPost(const ::OpenAPI::OptionalParam<OAIEntryType> &entry_type = ::OpenAPI::OptionalParam<OAIEntryType>(), const ::OpenAPI::OptionalParam<qint32> &entry_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  song_id qint32 [required]
    */
    virtual void apiUsersCurrentSongTagsSongIdPost(const qint32 &song_id);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  groups OAIUserGroupId [optional]
    * @param[in]  join_date_after QDateTime [optional]
    * @param[in]  join_date_before QDateTime [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAIUserSortRule [optional]
    * @param[in]  include_disabled bool [optional]
    * @param[in]  only_verified bool [optional]
    * @param[in]  knows_language QString [optional]
    * @param[in]  fields OAIUserOptionalFields [optional]
    */
    virtual void apiUsersGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUserGroupId> &groups = ::OpenAPI::OptionalParam<OAIUserGroupId>(), const ::OpenAPI::OptionalParam<QDateTime> &join_date_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &join_date_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIUserSortRule> &sort = ::OpenAPI::OptionalParam<OAIUserSortRule>(), const ::OpenAPI::OptionalParam<bool> &include_disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_verified = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &knows_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUserOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIUserOptionalFields>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  album_id qint32 [required]
    */
    virtual void apiUsersIdAlbumCollectionStatusesAlbumIdGet(const qint32 &id, const qint32 &album_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  query QString [optional]
    * @param[in]  tag_id qint32 [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  artist_id qint32 [optional]
    * @param[in]  purchase_statuses OAIPurchaseStatuses [optional]
    * @param[in]  release_event_id qint32 [optional]
    * @param[in]  album_types OAIDiscType [optional]
    * @param[in]  advanced_filters QList<OAIAdvancedSearchFilterParams> [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAIAlbumSortRule [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  fields OAIAlbumOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    * @param[in]  media_type OAIMediaType [optional]
    */
    virtual void apiUsersIdAlbumsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &tag_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &artist_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIPurchaseStatuses> &purchase_statuses = ::OpenAPI::OptionalParam<OAIPurchaseStatuses>(), const ::OpenAPI::OptionalParam<qint32> &release_event_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIDiscType> &album_types = ::OpenAPI::OptionalParam<OAIDiscType>(), const ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>> &advanced_filters = ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAlbumSortRule> &sort = ::OpenAPI::OptionalParam<OAIAlbumSortRule>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAIAlbumOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIAlbumOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>(), const ::OpenAPI::OptionalParam<OAIMediaType> &media_type = ::OpenAPI::OptionalParam<OAIMediaType>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  relationship_type OAIUserEventRelationshipType [optional]
    */
    virtual void apiUsersIdEventsGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIUserEventRelationshipType> &relationship_type = ::OpenAPI::OptionalParam<OAIUserEventRelationshipType>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  artist_id qint32 [required]
    */
    virtual void apiUsersIdFollowedArtistsArtistIdGet(const qint32 &id, const qint32 &artist_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  query QString [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  artist_type OAIArtistType [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAIArtistSortRule [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  fields OAIArtistOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiUsersIdFollowedArtistsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIArtistType> &artist_type = ::OpenAPI::OptionalParam<OAIArtistType>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIArtistSortRule> &sort = ::OpenAPI::OptionalParam<OAIArtistSortRule>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAIArtistOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIArtistOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAIUserOptionalFields [optional]
    */
    virtual void apiUsersIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIUserOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIUserOptionalFields>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  message_id QList<qint32> [optional]
    */
    virtual void apiUsersIdMessagesDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QList<qint32>> &message_id = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  inbox OAIUserInboxType [optional]
    * @param[in]  unread bool [optional]
    * @param[in]  another_user_id qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    */
    virtual void apiUsersIdMessagesGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIUserInboxType> &inbox = ::OpenAPI::OptionalParam<OAIUserInboxType>(), const ::OpenAPI::OptionalParam<bool> &unread = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &another_user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_user_message_contract OAIUserMessageContract [optional]
    */
    virtual void apiUsersIdMessagesPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAIUserMessageContract> &oai_user_message_contract = ::OpenAPI::OptionalParam<OAIUserMessageContract>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    */
    virtual void apiUsersIdProfileCommentsGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiUsersIdProfileCommentsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  query QString [optional]
    * @param[in]  tag_name QString [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  artist_id QList<qint32> [optional]
    * @param[in]  child_voicebanks bool [optional]
    * @param[in]  artist_grouping OAILogicalGrouping [optional]
    * @param[in]  rating OAISongVoteRating [optional]
    * @param[in]  song_list_id qint32 [optional]
    * @param[in]  group_by_rating bool [optional]
    * @param[in]  pv_services OAIPVServices [optional]
    * @param[in]  advanced_filters QList<OAIAdvancedSearchFilterParams> [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAIRatedSongForUserSortRule [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiUsersIdRatedSongsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &artist_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_voicebanks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILogicalGrouping> &artist_grouping = ::OpenAPI::OptionalParam<OAILogicalGrouping>(), const ::OpenAPI::OptionalParam<OAISongVoteRating> &rating = ::OpenAPI::OptionalParam<OAISongVoteRating>(), const ::OpenAPI::OptionalParam<qint32> &song_list_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &group_by_rating = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPVServices> &pv_services = ::OpenAPI::OptionalParam<OAIPVServices>(), const ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>> &advanced_filters = ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIRatedSongForUserSortRule> &sort = ::OpenAPI::OptionalParam<OAIRatedSongForUserSortRule>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  song_id qint32 [required]
    */
    virtual void apiUsersIdRatedSongsSongIdGet(const qint32 &id, const qint32 &song_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_create_report_model OAICreateReportModel [optional]
    */
    virtual void apiUsersIdReportsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAICreateReportModel> &oai_create_report_model = ::OpenAPI::OptionalParam<OAICreateReportModel>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  setting_name QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void apiUsersIdSettingsSettingNamePost(const qint32 &id, const QString &setting_name, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  query QString [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  child_tags bool [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAISongListSortRule [optional]
    * @param[in]  fields OAISongListOptionalFields [optional]
    */
    virtual void apiUsersIdSongListsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_tags = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAISongListSortRule> &sort = ::OpenAPI::OptionalParam<OAISongListSortRule>(), const ::OpenAPI::OptionalParam<OAISongListOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongListOptionalFields>());

    /**
    * @param[in]  message_id qint32 [required]
    */
    virtual void apiUsersMessagesMessageIdGet(const qint32 &message_id);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  include_disabled bool [optional]
    */
    virtual void apiUsersNamesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_disabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  comment_id qint32 [required]
    */
    virtual void apiUsersProfileCommentsCommentIdDelete(const qint32 &comment_id);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiUsersProfileCommentsCommentIdPost(const qint32 &comment_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentAlbumsAlbumIdPostCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentFollowedArtistsArtistIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentFollowedTagsTagIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentFollowedTagsTagIdPostCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentRatedSongsSongIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentRefreshEntryEditPostCallback(OAIHttpRequestWorker *worker);
    void apiUsersCurrentSongTagsSongIdPostCallback(OAIHttpRequestWorker *worker);
    void apiUsersGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdAlbumCollectionStatusesAlbumIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdAlbumsGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdEventsGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdFollowedArtistsArtistIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdFollowedArtistsGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdMessagesDeleteCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdMessagesGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdMessagesPostCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdProfileCommentsGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdProfileCommentsPostCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdRatedSongsGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdRatedSongsSongIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdReportsPostCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdSettingsSettingNamePostCallback(OAIHttpRequestWorker *worker);
    void apiUsersIdSongListsGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersMessagesMessageIdGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersNamesGetCallback(OAIHttpRequestWorker *worker);
    void apiUsersProfileCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiUsersProfileCommentsCommentIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignal(OAIAlbumForUserForApiContract summary);
    void apiUsersCurrentAlbumsAlbumIdPostSignal(QString summary);
    void apiUsersCurrentFollowedArtistsArtistIdGetSignal(OAIArtistForUserForApiContract summary);
    void apiUsersCurrentFollowedTagsTagIdDeleteSignal();
    void apiUsersCurrentFollowedTagsTagIdPostSignal();
    void apiUsersCurrentGetSignal(OAIUserForApiContract summary);
    void apiUsersCurrentRatedSongsSongIdGetSignal(OAISongVoteRating summary);
    void apiUsersCurrentRefreshEntryEditPostSignal(OAIEntryEditDataContract summary);
    void apiUsersCurrentSongTagsSongIdPostSignal();
    void apiUsersGetSignal(OAIUserForApiContractPartialFindResult summary);
    void apiUsersIdAlbumCollectionStatusesAlbumIdGetSignal(OAIAlbumForUserForApiContract summary);
    void apiUsersIdAlbumsGetSignal(OAIAlbumForUserForApiContractPartialFindResult summary);
    void apiUsersIdEventsGetSignal(QList<OAIReleaseEventForApiContract> summary);
    void apiUsersIdFollowedArtistsArtistIdGetSignal(OAIArtistForUserForApiContract summary);
    void apiUsersIdFollowedArtistsGetSignal(OAIArtistForUserForApiContractPartialFindResult summary);
    void apiUsersIdGetSignal(OAIUserForApiContract summary);
    void apiUsersIdMessagesDeleteSignal();
    void apiUsersIdMessagesGetSignal(OAIUserMessageContractPartialFindResult summary);
    void apiUsersIdMessagesPostSignal(OAIUserMessageContract summary);
    void apiUsersIdProfileCommentsGetSignal(OAICommentForApiContractPartialFindResult summary);
    void apiUsersIdProfileCommentsPostSignal(OAICommentForApiContract summary);
    void apiUsersIdRatedSongsGetSignal(OAIRatedSongForUserForApiContractPartialFindResult summary);
    void apiUsersIdRatedSongsSongIdGetSignal(OAISongVoteRating summary);
    void apiUsersIdReportsPostSignal(bool summary);
    void apiUsersIdSettingsSettingNamePostSignal();
    void apiUsersIdSongListsGetSignal(OAISongListForApiContractPartialFindResult summary);
    void apiUsersMessagesMessageIdGetSignal(OAIUserMessageContract summary);
    void apiUsersNamesGetSignal(QList<QString> summary);
    void apiUsersProfileCommentsCommentIdDeleteSignal();
    void apiUsersProfileCommentsCommentIdPostSignal();


    void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAlbumForUserForApiContract summary);
    void apiUsersCurrentAlbumsAlbumIdPostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void apiUsersCurrentFollowedArtistsArtistIdGetSignalFull(OAIHttpRequestWorker *worker, OAIArtistForUserForApiContract summary);
    void apiUsersCurrentFollowedTagsTagIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiUsersCurrentFollowedTagsTagIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiUsersCurrentGetSignalFull(OAIHttpRequestWorker *worker, OAIUserForApiContract summary);
    void apiUsersCurrentRatedSongsSongIdGetSignalFull(OAIHttpRequestWorker *worker, OAISongVoteRating summary);
    void apiUsersCurrentRefreshEntryEditPostSignalFull(OAIHttpRequestWorker *worker, OAIEntryEditDataContract summary);
    void apiUsersCurrentSongTagsSongIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiUsersGetSignalFull(OAIHttpRequestWorker *worker, OAIUserForApiContractPartialFindResult summary);
    void apiUsersIdAlbumCollectionStatusesAlbumIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAlbumForUserForApiContract summary);
    void apiUsersIdAlbumsGetSignalFull(OAIHttpRequestWorker *worker, OAIAlbumForUserForApiContractPartialFindResult summary);
    void apiUsersIdEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReleaseEventForApiContract> summary);
    void apiUsersIdFollowedArtistsArtistIdGetSignalFull(OAIHttpRequestWorker *worker, OAIArtistForUserForApiContract summary);
    void apiUsersIdFollowedArtistsGetSignalFull(OAIHttpRequestWorker *worker, OAIArtistForUserForApiContractPartialFindResult summary);
    void apiUsersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIUserForApiContract summary);
    void apiUsersIdMessagesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiUsersIdMessagesGetSignalFull(OAIHttpRequestWorker *worker, OAIUserMessageContractPartialFindResult summary);
    void apiUsersIdMessagesPostSignalFull(OAIHttpRequestWorker *worker, OAIUserMessageContract summary);
    void apiUsersIdProfileCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContractPartialFindResult summary);
    void apiUsersIdProfileCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContract summary);
    void apiUsersIdRatedSongsGetSignalFull(OAIHttpRequestWorker *worker, OAIRatedSongForUserForApiContractPartialFindResult summary);
    void apiUsersIdRatedSongsSongIdGetSignalFull(OAIHttpRequestWorker *worker, OAISongVoteRating summary);
    void apiUsersIdReportsPostSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void apiUsersIdSettingsSettingNamePostSignalFull(OAIHttpRequestWorker *worker);
    void apiUsersIdSongListsGetSignalFull(OAIHttpRequestWorker *worker, OAISongListForApiContractPartialFindResult summary);
    void apiUsersMessagesMessageIdGetSignalFull(OAIHttpRequestWorker *worker, OAIUserMessageContract summary);
    void apiUsersNamesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiUsersProfileCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiUsersProfileCommentsCommentIdPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignalError() instead")
    void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignalE(OAIAlbumForUserForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignalError(OAIAlbumForUserForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentAlbumsAlbumIdPostSignalError() instead")
    void apiUsersCurrentAlbumsAlbumIdPostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentAlbumsAlbumIdPostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentFollowedArtistsArtistIdGetSignalError() instead")
    void apiUsersCurrentFollowedArtistsArtistIdGetSignalE(OAIArtistForUserForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentFollowedArtistsArtistIdGetSignalError(OAIArtistForUserForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentFollowedTagsTagIdDeleteSignalError() instead")
    void apiUsersCurrentFollowedTagsTagIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentFollowedTagsTagIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentFollowedTagsTagIdPostSignalError() instead")
    void apiUsersCurrentFollowedTagsTagIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentFollowedTagsTagIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentGetSignalError() instead")
    void apiUsersCurrentGetSignalE(OAIUserForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentGetSignalError(OAIUserForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentRatedSongsSongIdGetSignalError() instead")
    void apiUsersCurrentRatedSongsSongIdGetSignalE(OAISongVoteRating summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentRatedSongsSongIdGetSignalError(OAISongVoteRating summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentRefreshEntryEditPostSignalError() instead")
    void apiUsersCurrentRefreshEntryEditPostSignalE(OAIEntryEditDataContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentRefreshEntryEditPostSignalError(OAIEntryEditDataContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentSongTagsSongIdPostSignalError() instead")
    void apiUsersCurrentSongTagsSongIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentSongTagsSongIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersGetSignalError() instead")
    void apiUsersGetSignalE(OAIUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersGetSignalError(OAIUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdAlbumCollectionStatusesAlbumIdGetSignalError() instead")
    void apiUsersIdAlbumCollectionStatusesAlbumIdGetSignalE(OAIAlbumForUserForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdAlbumCollectionStatusesAlbumIdGetSignalError(OAIAlbumForUserForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdAlbumsGetSignalError() instead")
    void apiUsersIdAlbumsGetSignalE(OAIAlbumForUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdAlbumsGetSignalError(OAIAlbumForUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdEventsGetSignalError() instead")
    void apiUsersIdEventsGetSignalE(QList<OAIReleaseEventForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdEventsGetSignalError(QList<OAIReleaseEventForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdFollowedArtistsArtistIdGetSignalError() instead")
    void apiUsersIdFollowedArtistsArtistIdGetSignalE(OAIArtistForUserForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdFollowedArtistsArtistIdGetSignalError(OAIArtistForUserForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdFollowedArtistsGetSignalError() instead")
    void apiUsersIdFollowedArtistsGetSignalE(OAIArtistForUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdFollowedArtistsGetSignalError(OAIArtistForUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdGetSignalError() instead")
    void apiUsersIdGetSignalE(OAIUserForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdGetSignalError(OAIUserForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdMessagesDeleteSignalError() instead")
    void apiUsersIdMessagesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdMessagesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdMessagesGetSignalError() instead")
    void apiUsersIdMessagesGetSignalE(OAIUserMessageContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdMessagesGetSignalError(OAIUserMessageContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdMessagesPostSignalError() instead")
    void apiUsersIdMessagesPostSignalE(OAIUserMessageContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdMessagesPostSignalError(OAIUserMessageContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdProfileCommentsGetSignalError() instead")
    void apiUsersIdProfileCommentsGetSignalE(OAICommentForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdProfileCommentsGetSignalError(OAICommentForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdProfileCommentsPostSignalError() instead")
    void apiUsersIdProfileCommentsPostSignalE(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdProfileCommentsPostSignalError(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdRatedSongsGetSignalError() instead")
    void apiUsersIdRatedSongsGetSignalE(OAIRatedSongForUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdRatedSongsGetSignalError(OAIRatedSongForUserForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdRatedSongsSongIdGetSignalError() instead")
    void apiUsersIdRatedSongsSongIdGetSignalE(OAISongVoteRating summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdRatedSongsSongIdGetSignalError(OAISongVoteRating summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdReportsPostSignalError() instead")
    void apiUsersIdReportsPostSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdReportsPostSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdSettingsSettingNamePostSignalError() instead")
    void apiUsersIdSettingsSettingNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdSettingsSettingNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdSongListsGetSignalError() instead")
    void apiUsersIdSongListsGetSignalE(OAISongListForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdSongListsGetSignalError(OAISongListForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersMessagesMessageIdGetSignalError() instead")
    void apiUsersMessagesMessageIdGetSignalE(OAIUserMessageContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersMessagesMessageIdGetSignalError(OAIUserMessageContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersNamesGetSignalError() instead")
    void apiUsersNamesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersNamesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersProfileCommentsCommentIdDeleteSignalError() instead")
    void apiUsersProfileCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersProfileCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersProfileCommentsCommentIdPostSignalError() instead")
    void apiUsersProfileCommentsCommentIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersProfileCommentsCommentIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignalErrorFull() instead")
    void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentAlbumCollectionStatusesAlbumIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentAlbumsAlbumIdPostSignalErrorFull() instead")
    void apiUsersCurrentAlbumsAlbumIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentAlbumsAlbumIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentFollowedArtistsArtistIdGetSignalErrorFull() instead")
    void apiUsersCurrentFollowedArtistsArtistIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentFollowedArtistsArtistIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentFollowedTagsTagIdDeleteSignalErrorFull() instead")
    void apiUsersCurrentFollowedTagsTagIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentFollowedTagsTagIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentFollowedTagsTagIdPostSignalErrorFull() instead")
    void apiUsersCurrentFollowedTagsTagIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentFollowedTagsTagIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentGetSignalErrorFull() instead")
    void apiUsersCurrentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentRatedSongsSongIdGetSignalErrorFull() instead")
    void apiUsersCurrentRatedSongsSongIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentRatedSongsSongIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentRefreshEntryEditPostSignalErrorFull() instead")
    void apiUsersCurrentRefreshEntryEditPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentRefreshEntryEditPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersCurrentSongTagsSongIdPostSignalErrorFull() instead")
    void apiUsersCurrentSongTagsSongIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersCurrentSongTagsSongIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersGetSignalErrorFull() instead")
    void apiUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdAlbumCollectionStatusesAlbumIdGetSignalErrorFull() instead")
    void apiUsersIdAlbumCollectionStatusesAlbumIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdAlbumCollectionStatusesAlbumIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdAlbumsGetSignalErrorFull() instead")
    void apiUsersIdAlbumsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdAlbumsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdEventsGetSignalErrorFull() instead")
    void apiUsersIdEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdFollowedArtistsArtistIdGetSignalErrorFull() instead")
    void apiUsersIdFollowedArtistsArtistIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdFollowedArtistsArtistIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdFollowedArtistsGetSignalErrorFull() instead")
    void apiUsersIdFollowedArtistsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdFollowedArtistsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdGetSignalErrorFull() instead")
    void apiUsersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdMessagesDeleteSignalErrorFull() instead")
    void apiUsersIdMessagesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdMessagesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdMessagesGetSignalErrorFull() instead")
    void apiUsersIdMessagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdMessagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdMessagesPostSignalErrorFull() instead")
    void apiUsersIdMessagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdMessagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdProfileCommentsGetSignalErrorFull() instead")
    void apiUsersIdProfileCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdProfileCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdProfileCommentsPostSignalErrorFull() instead")
    void apiUsersIdProfileCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdProfileCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdRatedSongsGetSignalErrorFull() instead")
    void apiUsersIdRatedSongsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdRatedSongsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdRatedSongsSongIdGetSignalErrorFull() instead")
    void apiUsersIdRatedSongsSongIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdRatedSongsSongIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdReportsPostSignalErrorFull() instead")
    void apiUsersIdReportsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdReportsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdSettingsSettingNamePostSignalErrorFull() instead")
    void apiUsersIdSettingsSettingNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdSettingsSettingNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersIdSongListsGetSignalErrorFull() instead")
    void apiUsersIdSongListsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersIdSongListsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersMessagesMessageIdGetSignalErrorFull() instead")
    void apiUsersMessagesMessageIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersMessagesMessageIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersNamesGetSignalErrorFull() instead")
    void apiUsersNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersProfileCommentsCommentIdDeleteSignalErrorFull() instead")
    void apiUsersProfileCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersProfileCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUsersProfileCommentsCommentIdPostSignalErrorFull() instead")
    void apiUsersProfileCommentsCommentIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUsersProfileCommentsCommentIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
