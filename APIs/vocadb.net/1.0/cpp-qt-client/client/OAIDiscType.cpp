/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscType::OAIDiscType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscType::OAIDiscType() {
    this->initializeModel();
}

OAIDiscType::~OAIDiscType() {}

void OAIDiscType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDiscType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDiscType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Album", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::ALBUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Single", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::SINGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::EP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SplitAlbum", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::SPLITALBUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Compilation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::COMPILATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Video", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::VIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Artbook", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::ARTBOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Game", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::GAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Fanmade", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::FANMADE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Instrumental", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::INSTRUMENTAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDiscType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDiscType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDiscType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDiscType::UNKNOWN:
            val = "Unknown";
            break;
        case eOAIDiscType::ALBUM:
            val = "Album";
            break;
        case eOAIDiscType::SINGLE:
            val = "Single";
            break;
        case eOAIDiscType::EP:
            val = "EP";
            break;
        case eOAIDiscType::SPLITALBUM:
            val = "SplitAlbum";
            break;
        case eOAIDiscType::COMPILATION:
            val = "Compilation";
            break;
        case eOAIDiscType::VIDEO:
            val = "Video";
            break;
        case eOAIDiscType::ARTBOOK:
            val = "Artbook";
            break;
        case eOAIDiscType::GAME:
            val = "Game";
            break;
        case eOAIDiscType::FANMADE:
            val = "Fanmade";
            break;
        case eOAIDiscType::INSTRUMENTAL:
            val = "Instrumental";
            break;
        case eOAIDiscType::OTHER:
            val = "Other";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDiscType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDiscType::eOAIDiscType OAIDiscType::getValue() const {
    return m_value;
}

void OAIDiscType::setValue(const OAIDiscType::eOAIDiscType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDiscType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDiscType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
