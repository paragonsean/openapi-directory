/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPVForSongContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPVForSongContract::OAIPVForSongContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPVForSongContract::OAIPVForSongContract() {
    this->initializeModel();
}

OAIPVForSongContract::~OAIPVForSongContract() {}

void OAIPVForSongContract::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_extended_metadata_isSet = false;
    m_extended_metadata_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publish_date_isSet = false;
    m_publish_date_isValid = false;

    m_pv_id_isSet = false;
    m_pv_id_isValid = false;

    m_pv_type_isSet = false;
    m_pv_type_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPVForSongContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPVForSongContract::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_extended_metadata_isValid = ::OpenAPI::fromJsonValue(m_extended_metadata, json[QString("extendedMetadata")]);
    m_extended_metadata_isSet = !json[QString("extendedMetadata")].isNull() && m_extended_metadata_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publish_date_isValid = ::OpenAPI::fromJsonValue(m_publish_date, json[QString("publishDate")]);
    m_publish_date_isSet = !json[QString("publishDate")].isNull() && m_publish_date_isValid;

    m_pv_id_isValid = ::OpenAPI::fromJsonValue(m_pv_id, json[QString("pvId")]);
    m_pv_id_isSet = !json[QString("pvId")].isNull() && m_pv_id_isValid;

    m_pv_type_isValid = ::OpenAPI::fromJsonValue(m_pv_type, json[QString("pvType")]);
    m_pv_type_isSet = !json[QString("pvType")].isNull() && m_pv_type_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_song_isValid = ::OpenAPI::fromJsonValue(m_song, json[QString("song")]);
    m_song_isSet = !json[QString("song")].isNull() && m_song_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumbUrl")]);
    m_thumb_url_isSet = !json[QString("thumbUrl")].isNull() && m_thumb_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPVForSongContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPVForSongContract::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_extended_metadata.isSet()) {
        obj.insert(QString("extendedMetadata"), ::OpenAPI::toJsonValue(m_extended_metadata));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publish_date_isSet) {
        obj.insert(QString("publishDate"), ::OpenAPI::toJsonValue(m_publish_date));
    }
    if (m_pv_id_isSet) {
        obj.insert(QString("pvId"), ::OpenAPI::toJsonValue(m_pv_id));
    }
    if (m_pv_type.isSet()) {
        obj.insert(QString("pvType"), ::OpenAPI::toJsonValue(m_pv_type));
    }
    if (m_service.isSet()) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_song.isSet()) {
        obj.insert(QString("song"), ::OpenAPI::toJsonValue(m_song));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumbUrl"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPVForSongContract::getAuthor() const {
    return m_author;
}
void OAIPVForSongContract::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPVForSongContract::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPVForSongContract::is_author_Valid() const{
    return m_author_isValid;
}

qint32 OAIPVForSongContract::getCreatedBy() const {
    return m_created_by;
}
void OAIPVForSongContract::setCreatedBy(const qint32 &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPVForSongContract::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPVForSongContract::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIPVForSongContract::isDisabled() const {
    return m_disabled;
}
void OAIPVForSongContract::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIPVForSongContract::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIPVForSongContract::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAIPVExtendedMetadata OAIPVForSongContract::getExtendedMetadata() const {
    return m_extended_metadata;
}
void OAIPVForSongContract::setExtendedMetadata(const OAIPVExtendedMetadata &extended_metadata) {
    m_extended_metadata = extended_metadata;
    m_extended_metadata_isSet = true;
}

bool OAIPVForSongContract::is_extended_metadata_Set() const{
    return m_extended_metadata_isSet;
}

bool OAIPVForSongContract::is_extended_metadata_Valid() const{
    return m_extended_metadata_isValid;
}

qint32 OAIPVForSongContract::getId() const {
    return m_id;
}
void OAIPVForSongContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPVForSongContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPVForSongContract::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPVForSongContract::getLength() const {
    return m_length;
}
void OAIPVForSongContract::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIPVForSongContract::is_length_Set() const{
    return m_length_isSet;
}

bool OAIPVForSongContract::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIPVForSongContract::getName() const {
    return m_name;
}
void OAIPVForSongContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPVForSongContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPVForSongContract::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIPVForSongContract::getPublishDate() const {
    return m_publish_date;
}
void OAIPVForSongContract::setPublishDate(const QDateTime &publish_date) {
    m_publish_date = publish_date;
    m_publish_date_isSet = true;
}

bool OAIPVForSongContract::is_publish_date_Set() const{
    return m_publish_date_isSet;
}

bool OAIPVForSongContract::is_publish_date_Valid() const{
    return m_publish_date_isValid;
}

QString OAIPVForSongContract::getPvId() const {
    return m_pv_id;
}
void OAIPVForSongContract::setPvId(const QString &pv_id) {
    m_pv_id = pv_id;
    m_pv_id_isSet = true;
}

bool OAIPVForSongContract::is_pv_id_Set() const{
    return m_pv_id_isSet;
}

bool OAIPVForSongContract::is_pv_id_Valid() const{
    return m_pv_id_isValid;
}

OAIPVType OAIPVForSongContract::getPvType() const {
    return m_pv_type;
}
void OAIPVForSongContract::setPvType(const OAIPVType &pv_type) {
    m_pv_type = pv_type;
    m_pv_type_isSet = true;
}

bool OAIPVForSongContract::is_pv_type_Set() const{
    return m_pv_type_isSet;
}

bool OAIPVForSongContract::is_pv_type_Valid() const{
    return m_pv_type_isValid;
}

OAIPVService OAIPVForSongContract::getService() const {
    return m_service;
}
void OAIPVForSongContract::setService(const OAIPVService &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIPVForSongContract::is_service_Set() const{
    return m_service_isSet;
}

bool OAIPVForSongContract::is_service_Valid() const{
    return m_service_isValid;
}

OAISongContract OAIPVForSongContract::getSong() const {
    return m_song;
}
void OAIPVForSongContract::setSong(const OAISongContract &song) {
    m_song = song;
    m_song_isSet = true;
}

bool OAIPVForSongContract::is_song_Set() const{
    return m_song_isSet;
}

bool OAIPVForSongContract::is_song_Valid() const{
    return m_song_isValid;
}

QString OAIPVForSongContract::getThumbUrl() const {
    return m_thumb_url;
}
void OAIPVForSongContract::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAIPVForSongContract::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAIPVForSongContract::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

QString OAIPVForSongContract::getUrl() const {
    return m_url;
}
void OAIPVForSongContract::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPVForSongContract::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPVForSongContract::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPVForSongContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pv_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pv_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_song.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPVForSongContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
