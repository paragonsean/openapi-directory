/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlbumContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlbumContract::OAIAlbumContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlbumContract::OAIAlbumContract() {
    this->initializeModel();
}

OAIAlbumContract::~OAIAlbumContract() {}

void OAIAlbumContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_artist_string_isSet = false;
    m_artist_string_isValid = false;

    m_cover_picture_mime_isSet = false;
    m_cover_picture_mime_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_disc_type_isSet = false;
    m_disc_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rating_average_isSet = false;
    m_rating_average_isValid = false;

    m_rating_count_isSet = false;
    m_rating_count_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_release_event_isSet = false;
    m_release_event_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAlbumContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlbumContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_artist_string_isValid = ::OpenAPI::fromJsonValue(m_artist_string, json[QString("artistString")]);
    m_artist_string_isSet = !json[QString("artistString")].isNull() && m_artist_string_isValid;

    m_cover_picture_mime_isValid = ::OpenAPI::fromJsonValue(m_cover_picture_mime, json[QString("coverPictureMime")]);
    m_cover_picture_mime_isSet = !json[QString("coverPictureMime")].isNull() && m_cover_picture_mime_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_disc_type_isValid = ::OpenAPI::fromJsonValue(m_disc_type, json[QString("discType")]);
    m_disc_type_isSet = !json[QString("discType")].isNull() && m_disc_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rating_average_isValid = ::OpenAPI::fromJsonValue(m_rating_average, json[QString("ratingAverage")]);
    m_rating_average_isSet = !json[QString("ratingAverage")].isNull() && m_rating_average_isValid;

    m_rating_count_isValid = ::OpenAPI::fromJsonValue(m_rating_count, json[QString("ratingCount")]);
    m_rating_count_isSet = !json[QString("ratingCount")].isNull() && m_rating_count_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_release_event_isValid = ::OpenAPI::fromJsonValue(m_release_event, json[QString("releaseEvent")]);
    m_release_event_isSet = !json[QString("releaseEvent")].isNull() && m_release_event_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAlbumContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlbumContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_artist_string_isSet) {
        obj.insert(QString("artistString"), ::OpenAPI::toJsonValue(m_artist_string));
    }
    if (m_cover_picture_mime_isSet) {
        obj.insert(QString("coverPictureMime"), ::OpenAPI::toJsonValue(m_cover_picture_mime));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_disc_type.isSet()) {
        obj.insert(QString("discType"), ::OpenAPI::toJsonValue(m_disc_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rating_average_isSet) {
        obj.insert(QString("ratingAverage"), ::OpenAPI::toJsonValue(m_rating_average));
    }
    if (m_rating_count_isSet) {
        obj.insert(QString("ratingCount"), ::OpenAPI::toJsonValue(m_rating_count));
    }
    if (m_release_date.isSet()) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_release_event.isSet()) {
        obj.insert(QString("releaseEvent"), ::OpenAPI::toJsonValue(m_release_event));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIAlbumContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAIAlbumContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAIAlbumContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAIAlbumContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

QString OAIAlbumContract::getArtistString() const {
    return m_artist_string;
}
void OAIAlbumContract::setArtistString(const QString &artist_string) {
    m_artist_string = artist_string;
    m_artist_string_isSet = true;
}

bool OAIAlbumContract::is_artist_string_Set() const{
    return m_artist_string_isSet;
}

bool OAIAlbumContract::is_artist_string_Valid() const{
    return m_artist_string_isValid;
}

QString OAIAlbumContract::getCoverPictureMime() const {
    return m_cover_picture_mime;
}
void OAIAlbumContract::setCoverPictureMime(const QString &cover_picture_mime) {
    m_cover_picture_mime = cover_picture_mime;
    m_cover_picture_mime_isSet = true;
}

bool OAIAlbumContract::is_cover_picture_mime_Set() const{
    return m_cover_picture_mime_isSet;
}

bool OAIAlbumContract::is_cover_picture_mime_Valid() const{
    return m_cover_picture_mime_isValid;
}

QDateTime OAIAlbumContract::getCreateDate() const {
    return m_create_date;
}
void OAIAlbumContract::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIAlbumContract::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIAlbumContract::is_create_date_Valid() const{
    return m_create_date_isValid;
}

bool OAIAlbumContract::isDeleted() const {
    return m_deleted;
}
void OAIAlbumContract::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIAlbumContract::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIAlbumContract::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAIDiscType OAIAlbumContract::getDiscType() const {
    return m_disc_type;
}
void OAIAlbumContract::setDiscType(const OAIDiscType &disc_type) {
    m_disc_type = disc_type;
    m_disc_type_isSet = true;
}

bool OAIAlbumContract::is_disc_type_Set() const{
    return m_disc_type_isSet;
}

bool OAIAlbumContract::is_disc_type_Valid() const{
    return m_disc_type_isValid;
}

qint32 OAIAlbumContract::getId() const {
    return m_id;
}
void OAIAlbumContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlbumContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlbumContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAlbumContract::getName() const {
    return m_name;
}
void OAIAlbumContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlbumContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlbumContract::is_name_Valid() const{
    return m_name_isValid;
}

double OAIAlbumContract::getRatingAverage() const {
    return m_rating_average;
}
void OAIAlbumContract::setRatingAverage(const double &rating_average) {
    m_rating_average = rating_average;
    m_rating_average_isSet = true;
}

bool OAIAlbumContract::is_rating_average_Set() const{
    return m_rating_average_isSet;
}

bool OAIAlbumContract::is_rating_average_Valid() const{
    return m_rating_average_isValid;
}

qint32 OAIAlbumContract::getRatingCount() const {
    return m_rating_count;
}
void OAIAlbumContract::setRatingCount(const qint32 &rating_count) {
    m_rating_count = rating_count;
    m_rating_count_isSet = true;
}

bool OAIAlbumContract::is_rating_count_Set() const{
    return m_rating_count_isSet;
}

bool OAIAlbumContract::is_rating_count_Valid() const{
    return m_rating_count_isValid;
}

OAIOptionalDateTimeContract OAIAlbumContract::getReleaseDate() const {
    return m_release_date;
}
void OAIAlbumContract::setReleaseDate(const OAIOptionalDateTimeContract &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIAlbumContract::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIAlbumContract::is_release_date_Valid() const{
    return m_release_date_isValid;
}

OAIReleaseEventForApiContract OAIAlbumContract::getReleaseEvent() const {
    return m_release_event;
}
void OAIAlbumContract::setReleaseEvent(const OAIReleaseEventForApiContract &release_event) {
    m_release_event = release_event;
    m_release_event_isSet = true;
}

bool OAIAlbumContract::is_release_event_Set() const{
    return m_release_event_isSet;
}

bool OAIAlbumContract::is_release_event_Valid() const{
    return m_release_event_isValid;
}

OAIEntryStatus OAIAlbumContract::getStatus() const {
    return m_status;
}
void OAIAlbumContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAlbumContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAlbumContract::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIAlbumContract::getVersion() const {
    return m_version;
}
void OAIAlbumContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAlbumContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAlbumContract::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAlbumContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_picture_mime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlbumContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
