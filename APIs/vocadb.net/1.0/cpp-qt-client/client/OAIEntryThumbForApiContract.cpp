/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryThumbForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryThumbForApiContract::OAIEntryThumbForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryThumbForApiContract::OAIEntryThumbForApiContract() {
    this->initializeModel();
}

OAIEntryThumbForApiContract::~OAIEntryThumbForApiContract() {}

void OAIEntryThumbForApiContract::initializeModel() {

    m_mime_isSet = false;
    m_mime_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_original_isSet = false;
    m_url_original_isValid = false;

    m_url_small_thumb_isSet = false;
    m_url_small_thumb_isValid = false;

    m_url_thumb_isSet = false;
    m_url_thumb_isValid = false;

    m_url_tiny_thumb_isSet = false;
    m_url_tiny_thumb_isValid = false;
}

void OAIEntryThumbForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryThumbForApiContract::fromJsonObject(QJsonObject json) {

    m_mime_isValid = ::OpenAPI::fromJsonValue(m_mime, json[QString("mime")]);
    m_mime_isSet = !json[QString("mime")].isNull() && m_mime_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_original_isValid = ::OpenAPI::fromJsonValue(m_url_original, json[QString("urlOriginal")]);
    m_url_original_isSet = !json[QString("urlOriginal")].isNull() && m_url_original_isValid;

    m_url_small_thumb_isValid = ::OpenAPI::fromJsonValue(m_url_small_thumb, json[QString("urlSmallThumb")]);
    m_url_small_thumb_isSet = !json[QString("urlSmallThumb")].isNull() && m_url_small_thumb_isValid;

    m_url_thumb_isValid = ::OpenAPI::fromJsonValue(m_url_thumb, json[QString("urlThumb")]);
    m_url_thumb_isSet = !json[QString("urlThumb")].isNull() && m_url_thumb_isValid;

    m_url_tiny_thumb_isValid = ::OpenAPI::fromJsonValue(m_url_tiny_thumb, json[QString("urlTinyThumb")]);
    m_url_tiny_thumb_isSet = !json[QString("urlTinyThumb")].isNull() && m_url_tiny_thumb_isValid;
}

QString OAIEntryThumbForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryThumbForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_mime_isSet) {
        obj.insert(QString("mime"), ::OpenAPI::toJsonValue(m_mime));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_original_isSet) {
        obj.insert(QString("urlOriginal"), ::OpenAPI::toJsonValue(m_url_original));
    }
    if (m_url_small_thumb_isSet) {
        obj.insert(QString("urlSmallThumb"), ::OpenAPI::toJsonValue(m_url_small_thumb));
    }
    if (m_url_thumb_isSet) {
        obj.insert(QString("urlThumb"), ::OpenAPI::toJsonValue(m_url_thumb));
    }
    if (m_url_tiny_thumb_isSet) {
        obj.insert(QString("urlTinyThumb"), ::OpenAPI::toJsonValue(m_url_tiny_thumb));
    }
    return obj;
}

QString OAIEntryThumbForApiContract::getMime() const {
    return m_mime;
}
void OAIEntryThumbForApiContract::setMime(const QString &mime) {
    m_mime = mime;
    m_mime_isSet = true;
}

bool OAIEntryThumbForApiContract::is_mime_Set() const{
    return m_mime_isSet;
}

bool OAIEntryThumbForApiContract::is_mime_Valid() const{
    return m_mime_isValid;
}

QString OAIEntryThumbForApiContract::getName() const {
    return m_name;
}
void OAIEntryThumbForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntryThumbForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntryThumbForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEntryThumbForApiContract::getUrlOriginal() const {
    return m_url_original;
}
void OAIEntryThumbForApiContract::setUrlOriginal(const QString &url_original) {
    m_url_original = url_original;
    m_url_original_isSet = true;
}

bool OAIEntryThumbForApiContract::is_url_original_Set() const{
    return m_url_original_isSet;
}

bool OAIEntryThumbForApiContract::is_url_original_Valid() const{
    return m_url_original_isValid;
}

QString OAIEntryThumbForApiContract::getUrlSmallThumb() const {
    return m_url_small_thumb;
}
void OAIEntryThumbForApiContract::setUrlSmallThumb(const QString &url_small_thumb) {
    m_url_small_thumb = url_small_thumb;
    m_url_small_thumb_isSet = true;
}

bool OAIEntryThumbForApiContract::is_url_small_thumb_Set() const{
    return m_url_small_thumb_isSet;
}

bool OAIEntryThumbForApiContract::is_url_small_thumb_Valid() const{
    return m_url_small_thumb_isValid;
}

QString OAIEntryThumbForApiContract::getUrlThumb() const {
    return m_url_thumb;
}
void OAIEntryThumbForApiContract::setUrlThumb(const QString &url_thumb) {
    m_url_thumb = url_thumb;
    m_url_thumb_isSet = true;
}

bool OAIEntryThumbForApiContract::is_url_thumb_Set() const{
    return m_url_thumb_isSet;
}

bool OAIEntryThumbForApiContract::is_url_thumb_Valid() const{
    return m_url_thumb_isValid;
}

QString OAIEntryThumbForApiContract::getUrlTinyThumb() const {
    return m_url_tiny_thumb;
}
void OAIEntryThumbForApiContract::setUrlTinyThumb(const QString &url_tiny_thumb) {
    m_url_tiny_thumb = url_tiny_thumb;
    m_url_tiny_thumb_isSet = true;
}

bool OAIEntryThumbForApiContract::is_url_tiny_thumb_Set() const{
    return m_url_tiny_thumb_isSet;
}

bool OAIEntryThumbForApiContract::is_url_tiny_thumb_Valid() const{
    return m_url_tiny_thumb_isValid;
}

bool OAIEntryThumbForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_small_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_tiny_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryThumbForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
