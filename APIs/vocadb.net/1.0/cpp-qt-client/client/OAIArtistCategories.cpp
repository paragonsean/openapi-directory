/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtistCategories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtistCategories::OAIArtistCategories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtistCategories::OAIArtistCategories() {
    this->initializeModel();
}

OAIArtistCategories::~OAIArtistCategories() {}

void OAIArtistCategories::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArtistCategories::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArtistCategories::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Nothing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::NOTHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vocalist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::VOCALIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Producer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::PRODUCER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Animator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::ANIMATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Label", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::LABEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Circle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::CIRCLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Band", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::BAND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Illustrator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::ILLUSTRATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Subject", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistCategories::SUBJECT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArtistCategories::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArtistCategories::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArtistCategories::NOTHING:
            val = "Nothing";
            break;
        case eOAIArtistCategories::VOCALIST:
            val = "Vocalist";
            break;
        case eOAIArtistCategories::PRODUCER:
            val = "Producer";
            break;
        case eOAIArtistCategories::ANIMATOR:
            val = "Animator";
            break;
        case eOAIArtistCategories::LABEL:
            val = "Label";
            break;
        case eOAIArtistCategories::CIRCLE:
            val = "Circle";
            break;
        case eOAIArtistCategories::OTHER:
            val = "Other";
            break;
        case eOAIArtistCategories::BAND:
            val = "Band";
            break;
        case eOAIArtistCategories::ILLUSTRATOR:
            val = "Illustrator";
            break;
        case eOAIArtistCategories::SUBJECT:
            val = "Subject";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArtistCategories::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArtistCategories::eOAIArtistCategories OAIArtistCategories::getValue() const {
    return m_value;
}

void OAIArtistCategories::setValue(const OAIArtistCategories::eOAIArtistCategories& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArtistCategories::isSet() const {
    
    return m_value_isSet;
}

bool OAIArtistCategories::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
