/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlbumForUserForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlbumForUserForApiContract::OAIAlbumForUserForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlbumForUserForApiContract::OAIAlbumForUserForApiContract() {
    this->initializeModel();
}

OAIAlbumForUserForApiContract::~OAIAlbumForUserForApiContract() {}

void OAIAlbumForUserForApiContract::initializeModel() {

    m_album_isSet = false;
    m_album_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_purchase_status_isSet = false;
    m_purchase_status_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAlbumForUserForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlbumForUserForApiContract::fromJsonObject(QJsonObject json) {

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_purchase_status_isValid = ::OpenAPI::fromJsonValue(m_purchase_status, json[QString("purchaseStatus")]);
    m_purchase_status_isSet = !json[QString("purchaseStatus")].isNull() && m_purchase_status_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAlbumForUserForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlbumForUserForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_album.isSet()) {
        obj.insert(QString("album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_purchase_status.isSet()) {
        obj.insert(QString("purchaseStatus"), ::OpenAPI::toJsonValue(m_purchase_status));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIAlbumForApiContract OAIAlbumForUserForApiContract::getAlbum() const {
    return m_album;
}
void OAIAlbumForUserForApiContract::setAlbum(const OAIAlbumForApiContract &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAIAlbumForUserForApiContract::is_album_Set() const{
    return m_album_isSet;
}

bool OAIAlbumForUserForApiContract::is_album_Valid() const{
    return m_album_isValid;
}

OAIMediaType OAIAlbumForUserForApiContract::getMediaType() const {
    return m_media_type;
}
void OAIAlbumForUserForApiContract::setMediaType(const OAIMediaType &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIAlbumForUserForApiContract::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIAlbumForUserForApiContract::is_media_type_Valid() const{
    return m_media_type_isValid;
}

OAIPurchaseStatus OAIAlbumForUserForApiContract::getPurchaseStatus() const {
    return m_purchase_status;
}
void OAIAlbumForUserForApiContract::setPurchaseStatus(const OAIPurchaseStatus &purchase_status) {
    m_purchase_status = purchase_status;
    m_purchase_status_isSet = true;
}

bool OAIAlbumForUserForApiContract::is_purchase_status_Set() const{
    return m_purchase_status_isSet;
}

bool OAIAlbumForUserForApiContract::is_purchase_status_Valid() const{
    return m_purchase_status_isValid;
}

qint32 OAIAlbumForUserForApiContract::getRating() const {
    return m_rating;
}
void OAIAlbumForUserForApiContract::setRating(const qint32 &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIAlbumForUserForApiContract::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIAlbumForUserForApiContract::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIUserForApiContract OAIAlbumForUserForApiContract::getUser() const {
    return m_user;
}
void OAIAlbumForUserForApiContract::setUser(const OAIUserForApiContract &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAlbumForUserForApiContract::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAlbumForUserForApiContract::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAlbumForUserForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlbumForUserForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
