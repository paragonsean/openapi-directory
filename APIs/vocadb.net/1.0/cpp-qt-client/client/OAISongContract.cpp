/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISongContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISongContract::OAISongContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISongContract::OAISongContract() {
    this->initializeModel();
}

OAISongContract::~OAISongContract() {}

void OAISongContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_artist_string_isSet = false;
    m_artist_string_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_favorited_times_isSet = false;
    m_favorited_times_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_length_seconds_isSet = false;
    m_length_seconds_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nico_id_isSet = false;
    m_nico_id_isValid = false;

    m_publish_date_isSet = false;
    m_publish_date_isValid = false;

    m_pv_services_isSet = false;
    m_pv_services_isValid = false;

    m_rating_score_isSet = false;
    m_rating_score_isValid = false;

    m_song_type_isSet = false;
    m_song_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISongContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISongContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_artist_string_isValid = ::OpenAPI::fromJsonValue(m_artist_string, json[QString("artistString")]);
    m_artist_string_isSet = !json[QString("artistString")].isNull() && m_artist_string_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_favorited_times_isValid = ::OpenAPI::fromJsonValue(m_favorited_times, json[QString("favoritedTimes")]);
    m_favorited_times_isSet = !json[QString("favoritedTimes")].isNull() && m_favorited_times_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_length_seconds_isValid = ::OpenAPI::fromJsonValue(m_length_seconds, json[QString("lengthSeconds")]);
    m_length_seconds_isSet = !json[QString("lengthSeconds")].isNull() && m_length_seconds_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nico_id_isValid = ::OpenAPI::fromJsonValue(m_nico_id, json[QString("nicoId")]);
    m_nico_id_isSet = !json[QString("nicoId")].isNull() && m_nico_id_isValid;

    m_publish_date_isValid = ::OpenAPI::fromJsonValue(m_publish_date, json[QString("publishDate")]);
    m_publish_date_isSet = !json[QString("publishDate")].isNull() && m_publish_date_isValid;

    m_pv_services_isValid = ::OpenAPI::fromJsonValue(m_pv_services, json[QString("pvServices")]);
    m_pv_services_isSet = !json[QString("pvServices")].isNull() && m_pv_services_isValid;

    m_rating_score_isValid = ::OpenAPI::fromJsonValue(m_rating_score, json[QString("ratingScore")]);
    m_rating_score_isSet = !json[QString("ratingScore")].isNull() && m_rating_score_isValid;

    m_song_type_isValid = ::OpenAPI::fromJsonValue(m_song_type, json[QString("songType")]);
    m_song_type_isSet = !json[QString("songType")].isNull() && m_song_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumbUrl")]);
    m_thumb_url_isSet = !json[QString("thumbUrl")].isNull() && m_thumb_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISongContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISongContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_artist_string_isSet) {
        obj.insert(QString("artistString"), ::OpenAPI::toJsonValue(m_artist_string));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_favorited_times_isSet) {
        obj.insert(QString("favoritedTimes"), ::OpenAPI::toJsonValue(m_favorited_times));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_length_seconds_isSet) {
        obj.insert(QString("lengthSeconds"), ::OpenAPI::toJsonValue(m_length_seconds));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nico_id_isSet) {
        obj.insert(QString("nicoId"), ::OpenAPI::toJsonValue(m_nico_id));
    }
    if (m_publish_date_isSet) {
        obj.insert(QString("publishDate"), ::OpenAPI::toJsonValue(m_publish_date));
    }
    if (m_pv_services.isSet()) {
        obj.insert(QString("pvServices"), ::OpenAPI::toJsonValue(m_pv_services));
    }
    if (m_rating_score_isSet) {
        obj.insert(QString("ratingScore"), ::OpenAPI::toJsonValue(m_rating_score));
    }
    if (m_song_type.isSet()) {
        obj.insert(QString("songType"), ::OpenAPI::toJsonValue(m_song_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumbUrl"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISongContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAISongContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAISongContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAISongContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

QString OAISongContract::getArtistString() const {
    return m_artist_string;
}
void OAISongContract::setArtistString(const QString &artist_string) {
    m_artist_string = artist_string;
    m_artist_string_isSet = true;
}

bool OAISongContract::is_artist_string_Set() const{
    return m_artist_string_isSet;
}

bool OAISongContract::is_artist_string_Valid() const{
    return m_artist_string_isValid;
}

QDateTime OAISongContract::getCreateDate() const {
    return m_create_date;
}
void OAISongContract::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAISongContract::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAISongContract::is_create_date_Valid() const{
    return m_create_date_isValid;
}

bool OAISongContract::isDeleted() const {
    return m_deleted;
}
void OAISongContract::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAISongContract::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAISongContract::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint32 OAISongContract::getFavoritedTimes() const {
    return m_favorited_times;
}
void OAISongContract::setFavoritedTimes(const qint32 &favorited_times) {
    m_favorited_times = favorited_times;
    m_favorited_times_isSet = true;
}

bool OAISongContract::is_favorited_times_Set() const{
    return m_favorited_times_isSet;
}

bool OAISongContract::is_favorited_times_Valid() const{
    return m_favorited_times_isValid;
}

qint32 OAISongContract::getId() const {
    return m_id;
}
void OAISongContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISongContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAISongContract::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISongContract::getLengthSeconds() const {
    return m_length_seconds;
}
void OAISongContract::setLengthSeconds(const qint32 &length_seconds) {
    m_length_seconds = length_seconds;
    m_length_seconds_isSet = true;
}

bool OAISongContract::is_length_seconds_Set() const{
    return m_length_seconds_isSet;
}

bool OAISongContract::is_length_seconds_Valid() const{
    return m_length_seconds_isValid;
}

QString OAISongContract::getName() const {
    return m_name;
}
void OAISongContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISongContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAISongContract::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISongContract::getNicoId() const {
    return m_nico_id;
}
void OAISongContract::setNicoId(const QString &nico_id) {
    m_nico_id = nico_id;
    m_nico_id_isSet = true;
}

bool OAISongContract::is_nico_id_Set() const{
    return m_nico_id_isSet;
}

bool OAISongContract::is_nico_id_Valid() const{
    return m_nico_id_isValid;
}

QDateTime OAISongContract::getPublishDate() const {
    return m_publish_date;
}
void OAISongContract::setPublishDate(const QDateTime &publish_date) {
    m_publish_date = publish_date;
    m_publish_date_isSet = true;
}

bool OAISongContract::is_publish_date_Set() const{
    return m_publish_date_isSet;
}

bool OAISongContract::is_publish_date_Valid() const{
    return m_publish_date_isValid;
}

OAIPVServices OAISongContract::getPvServices() const {
    return m_pv_services;
}
void OAISongContract::setPvServices(const OAIPVServices &pv_services) {
    m_pv_services = pv_services;
    m_pv_services_isSet = true;
}

bool OAISongContract::is_pv_services_Set() const{
    return m_pv_services_isSet;
}

bool OAISongContract::is_pv_services_Valid() const{
    return m_pv_services_isValid;
}

qint32 OAISongContract::getRatingScore() const {
    return m_rating_score;
}
void OAISongContract::setRatingScore(const qint32 &rating_score) {
    m_rating_score = rating_score;
    m_rating_score_isSet = true;
}

bool OAISongContract::is_rating_score_Set() const{
    return m_rating_score_isSet;
}

bool OAISongContract::is_rating_score_Valid() const{
    return m_rating_score_isValid;
}

OAISongType OAISongContract::getSongType() const {
    return m_song_type;
}
void OAISongContract::setSongType(const OAISongType &song_type) {
    m_song_type = song_type;
    m_song_type_isSet = true;
}

bool OAISongContract::is_song_type_Set() const{
    return m_song_type_isSet;
}

bool OAISongContract::is_song_type_Valid() const{
    return m_song_type_isValid;
}

OAIEntryStatus OAISongContract::getStatus() const {
    return m_status;
}
void OAISongContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISongContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAISongContract::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISongContract::getThumbUrl() const {
    return m_thumb_url;
}
void OAISongContract::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAISongContract::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAISongContract::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

qint32 OAISongContract::getVersion() const {
    return m_version;
}
void OAISongContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISongContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAISongContract::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISongContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorited_times_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nico_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pv_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISongContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
