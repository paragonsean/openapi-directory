/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiscussionApiApi_H
#define OAI_OAIDiscussionApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommentForApiContract.h"
#include "OAIDiscussionFolderContract.h"
#include "OAIDiscussionFolderOptionalFields.h"
#include "OAIDiscussionTopicContract.h"
#include "OAIDiscussionTopicContractPartialFindResult.h"
#include "OAIDiscussionTopicOptionalFields.h"
#include "OAIDiscussionTopicSortRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiscussionApiApi : public QObject {
    Q_OBJECT

public:
    OAIDiscussionApiApi(const int timeOut = 0);
    ~OAIDiscussionApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  comment_id qint32 [required]
    */
    virtual void apiDiscussionsCommentsCommentIdDelete(const qint32 &comment_id);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiDiscussionsCommentsCommentIdPost(const qint32 &comment_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  folder_id qint32 [required]
    * @param[in]  fields OAIDiscussionTopicOptionalFields [optional]
    */
    Q_DECL_DEPRECATED virtual void apiDiscussionsFoldersFolderIdTopicsGet(const qint32 &folder_id, const ::OpenAPI::OptionalParam<OAIDiscussionTopicOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIDiscussionTopicOptionalFields>());

    /**
    * @param[in]  folder_id qint32 [required]
    * @param[in]  oai_discussion_topic_contract OAIDiscussionTopicContract [optional]
    */
    virtual void apiDiscussionsFoldersFolderIdTopicsPost(const qint32 &folder_id, const ::OpenAPI::OptionalParam<OAIDiscussionTopicContract> &oai_discussion_topic_contract = ::OpenAPI::OptionalParam<OAIDiscussionTopicContract>());

    /**
    * @param[in]  fields OAIDiscussionFolderOptionalFields [optional]
    */
    virtual void apiDiscussionsFoldersGet(const ::OpenAPI::OptionalParam<OAIDiscussionFolderOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIDiscussionFolderOptionalFields>());

    /**
    * @param[in]  oai_discussion_folder_contract OAIDiscussionFolderContract [optional]
    */
    virtual void apiDiscussionsFoldersPost(const ::OpenAPI::OptionalParam<OAIDiscussionFolderContract> &oai_discussion_folder_contract = ::OpenAPI::OptionalParam<OAIDiscussionFolderContract>());

    /**
    * @param[in]  folder_id qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAIDiscussionTopicSortRule [optional]
    * @param[in]  fields OAIDiscussionTopicOptionalFields [optional]
    */
    virtual void apiDiscussionsTopicsGet(const ::OpenAPI::OptionalParam<qint32> &folder_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIDiscussionTopicSortRule> &sort = ::OpenAPI::OptionalParam<OAIDiscussionTopicSortRule>(), const ::OpenAPI::OptionalParam<OAIDiscussionTopicOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIDiscussionTopicOptionalFields>());

    /**
    * @param[in]  topic_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiDiscussionsTopicsTopicIdCommentsPost(const qint32 &topic_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  topic_id qint32 [required]
    */
    virtual void apiDiscussionsTopicsTopicIdDelete(const qint32 &topic_id);

    /**
    * @param[in]  topic_id qint32 [required]
    * @param[in]  fields OAIDiscussionTopicOptionalFields [optional]
    */
    virtual void apiDiscussionsTopicsTopicIdGet(const qint32 &topic_id, const ::OpenAPI::OptionalParam<OAIDiscussionTopicOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIDiscussionTopicOptionalFields>());

    /**
    * @param[in]  topic_id qint32 [required]
    * @param[in]  oai_discussion_topic_contract OAIDiscussionTopicContract [optional]
    */
    virtual void apiDiscussionsTopicsTopicIdPost(const qint32 &topic_id, const ::OpenAPI::OptionalParam<OAIDiscussionTopicContract> &oai_discussion_topic_contract = ::OpenAPI::OptionalParam<OAIDiscussionTopicContract>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiDiscussionsCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsCommentsCommentIdPostCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsFoldersFolderIdTopicsGetCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsFoldersFolderIdTopicsPostCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsFoldersGetCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsFoldersPostCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsTopicsGetCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsTopicsTopicIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsTopicsTopicIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsTopicsTopicIdGetCallback(OAIHttpRequestWorker *worker);
    void apiDiscussionsTopicsTopicIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiDiscussionsCommentsCommentIdDeleteSignal();
    void apiDiscussionsCommentsCommentIdPostSignal();
    void apiDiscussionsFoldersFolderIdTopicsGetSignal(QList<OAIDiscussionTopicContract> summary);
    void apiDiscussionsFoldersFolderIdTopicsPostSignal(OAIDiscussionTopicContract summary);
    void apiDiscussionsFoldersGetSignal(QList<OAIDiscussionFolderContract> summary);
    void apiDiscussionsFoldersPostSignal(OAIDiscussionFolderContract summary);
    void apiDiscussionsTopicsGetSignal(OAIDiscussionTopicContractPartialFindResult summary);
    void apiDiscussionsTopicsTopicIdCommentsPostSignal(OAICommentForApiContract summary);
    void apiDiscussionsTopicsTopicIdDeleteSignal();
    void apiDiscussionsTopicsTopicIdGetSignal(OAIDiscussionTopicContract summary);
    void apiDiscussionsTopicsTopicIdPostSignal();


    void apiDiscussionsCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiDiscussionsCommentsCommentIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiDiscussionsFoldersFolderIdTopicsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDiscussionTopicContract> summary);
    void apiDiscussionsFoldersFolderIdTopicsPostSignalFull(OAIHttpRequestWorker *worker, OAIDiscussionTopicContract summary);
    void apiDiscussionsFoldersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDiscussionFolderContract> summary);
    void apiDiscussionsFoldersPostSignalFull(OAIHttpRequestWorker *worker, OAIDiscussionFolderContract summary);
    void apiDiscussionsTopicsGetSignalFull(OAIHttpRequestWorker *worker, OAIDiscussionTopicContractPartialFindResult summary);
    void apiDiscussionsTopicsTopicIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContract summary);
    void apiDiscussionsTopicsTopicIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiDiscussionsTopicsTopicIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDiscussionTopicContract summary);
    void apiDiscussionsTopicsTopicIdPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiDiscussionsCommentsCommentIdDeleteSignalError() instead")
    void apiDiscussionsCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsCommentsCommentIdPostSignalError() instead")
    void apiDiscussionsCommentsCommentIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsCommentsCommentIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersFolderIdTopicsGetSignalError() instead")
    void apiDiscussionsFoldersFolderIdTopicsGetSignalE(QList<OAIDiscussionTopicContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersFolderIdTopicsGetSignalError(QList<OAIDiscussionTopicContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersFolderIdTopicsPostSignalError() instead")
    void apiDiscussionsFoldersFolderIdTopicsPostSignalE(OAIDiscussionTopicContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersFolderIdTopicsPostSignalError(OAIDiscussionTopicContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersGetSignalError() instead")
    void apiDiscussionsFoldersGetSignalE(QList<OAIDiscussionFolderContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersGetSignalError(QList<OAIDiscussionFolderContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersPostSignalError() instead")
    void apiDiscussionsFoldersPostSignalE(OAIDiscussionFolderContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersPostSignalError(OAIDiscussionFolderContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsGetSignalError() instead")
    void apiDiscussionsTopicsGetSignalE(OAIDiscussionTopicContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsGetSignalError(OAIDiscussionTopicContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdCommentsPostSignalError() instead")
    void apiDiscussionsTopicsTopicIdCommentsPostSignalE(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdCommentsPostSignalError(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdDeleteSignalError() instead")
    void apiDiscussionsTopicsTopicIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdGetSignalError() instead")
    void apiDiscussionsTopicsTopicIdGetSignalE(OAIDiscussionTopicContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdGetSignalError(OAIDiscussionTopicContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdPostSignalError() instead")
    void apiDiscussionsTopicsTopicIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiDiscussionsCommentsCommentIdDeleteSignalErrorFull() instead")
    void apiDiscussionsCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsCommentsCommentIdPostSignalErrorFull() instead")
    void apiDiscussionsCommentsCommentIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsCommentsCommentIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersFolderIdTopicsGetSignalErrorFull() instead")
    void apiDiscussionsFoldersFolderIdTopicsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersFolderIdTopicsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersFolderIdTopicsPostSignalErrorFull() instead")
    void apiDiscussionsFoldersFolderIdTopicsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersFolderIdTopicsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersGetSignalErrorFull() instead")
    void apiDiscussionsFoldersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsFoldersPostSignalErrorFull() instead")
    void apiDiscussionsFoldersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsFoldersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsGetSignalErrorFull() instead")
    void apiDiscussionsTopicsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdCommentsPostSignalErrorFull() instead")
    void apiDiscussionsTopicsTopicIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdDeleteSignalErrorFull() instead")
    void apiDiscussionsTopicsTopicIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdGetSignalErrorFull() instead")
    void apiDiscussionsTopicsTopicIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiscussionsTopicsTopicIdPostSignalErrorFull() instead")
    void apiDiscussionsTopicsTopicIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiscussionsTopicsTopicIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
