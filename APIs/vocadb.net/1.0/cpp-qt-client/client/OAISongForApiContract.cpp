/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISongForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISongForApiContract::OAISongForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISongForApiContract::OAISongForApiContract() {
    this->initializeModel();
}

OAISongForApiContract::~OAISongForApiContract() {}

void OAISongForApiContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_albums_isSet = false;
    m_albums_isValid = false;

    m_artist_string_isSet = false;
    m_artist_string_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_default_name_isSet = false;
    m_default_name_isValid = false;

    m_default_name_language_isSet = false;
    m_default_name_language_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_favorited_times_isSet = false;
    m_favorited_times_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_length_seconds_isSet = false;
    m_length_seconds_isValid = false;

    m_lyrics_isSet = false;
    m_lyrics_isValid = false;

    m_main_picture_isSet = false;
    m_main_picture_isValid = false;

    m_max_milli_bpm_isSet = false;
    m_max_milli_bpm_isValid = false;

    m_merged_to_isSet = false;
    m_merged_to_isValid = false;

    m_min_milli_bpm_isSet = false;
    m_min_milli_bpm_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_original_version_id_isSet = false;
    m_original_version_id_isValid = false;

    m_publish_date_isSet = false;
    m_publish_date_isValid = false;

    m_pv_services_isSet = false;
    m_pv_services_isValid = false;

    m_pvs_isSet = false;
    m_pvs_isValid = false;

    m_rating_score_isSet = false;
    m_rating_score_isValid = false;

    m_release_event_isSet = false;
    m_release_event_isValid = false;

    m_song_type_isSet = false;
    m_song_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_web_links_isSet = false;
    m_web_links_isValid = false;
}

void OAISongForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISongForApiContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_albums_isValid = ::OpenAPI::fromJsonValue(m_albums, json[QString("albums")]);
    m_albums_isSet = !json[QString("albums")].isNull() && m_albums_isValid;

    m_artist_string_isValid = ::OpenAPI::fromJsonValue(m_artist_string, json[QString("artistString")]);
    m_artist_string_isSet = !json[QString("artistString")].isNull() && m_artist_string_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_default_name_isValid = ::OpenAPI::fromJsonValue(m_default_name, json[QString("defaultName")]);
    m_default_name_isSet = !json[QString("defaultName")].isNull() && m_default_name_isValid;

    m_default_name_language_isValid = ::OpenAPI::fromJsonValue(m_default_name_language, json[QString("defaultNameLanguage")]);
    m_default_name_language_isSet = !json[QString("defaultNameLanguage")].isNull() && m_default_name_language_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_favorited_times_isValid = ::OpenAPI::fromJsonValue(m_favorited_times, json[QString("favoritedTimes")]);
    m_favorited_times_isSet = !json[QString("favoritedTimes")].isNull() && m_favorited_times_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_length_seconds_isValid = ::OpenAPI::fromJsonValue(m_length_seconds, json[QString("lengthSeconds")]);
    m_length_seconds_isSet = !json[QString("lengthSeconds")].isNull() && m_length_seconds_isValid;

    m_lyrics_isValid = ::OpenAPI::fromJsonValue(m_lyrics, json[QString("lyrics")]);
    m_lyrics_isSet = !json[QString("lyrics")].isNull() && m_lyrics_isValid;

    m_main_picture_isValid = ::OpenAPI::fromJsonValue(m_main_picture, json[QString("mainPicture")]);
    m_main_picture_isSet = !json[QString("mainPicture")].isNull() && m_main_picture_isValid;

    m_max_milli_bpm_isValid = ::OpenAPI::fromJsonValue(m_max_milli_bpm, json[QString("maxMilliBpm")]);
    m_max_milli_bpm_isSet = !json[QString("maxMilliBpm")].isNull() && m_max_milli_bpm_isValid;

    m_merged_to_isValid = ::OpenAPI::fromJsonValue(m_merged_to, json[QString("mergedTo")]);
    m_merged_to_isSet = !json[QString("mergedTo")].isNull() && m_merged_to_isValid;

    m_min_milli_bpm_isValid = ::OpenAPI::fromJsonValue(m_min_milli_bpm, json[QString("minMilliBpm")]);
    m_min_milli_bpm_isSet = !json[QString("minMilliBpm")].isNull() && m_min_milli_bpm_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_original_version_id_isValid = ::OpenAPI::fromJsonValue(m_original_version_id, json[QString("originalVersionId")]);
    m_original_version_id_isSet = !json[QString("originalVersionId")].isNull() && m_original_version_id_isValid;

    m_publish_date_isValid = ::OpenAPI::fromJsonValue(m_publish_date, json[QString("publishDate")]);
    m_publish_date_isSet = !json[QString("publishDate")].isNull() && m_publish_date_isValid;

    m_pv_services_isValid = ::OpenAPI::fromJsonValue(m_pv_services, json[QString("pvServices")]);
    m_pv_services_isSet = !json[QString("pvServices")].isNull() && m_pv_services_isValid;

    m_pvs_isValid = ::OpenAPI::fromJsonValue(m_pvs, json[QString("pvs")]);
    m_pvs_isSet = !json[QString("pvs")].isNull() && m_pvs_isValid;

    m_rating_score_isValid = ::OpenAPI::fromJsonValue(m_rating_score, json[QString("ratingScore")]);
    m_rating_score_isSet = !json[QString("ratingScore")].isNull() && m_rating_score_isValid;

    m_release_event_isValid = ::OpenAPI::fromJsonValue(m_release_event, json[QString("releaseEvent")]);
    m_release_event_isSet = !json[QString("releaseEvent")].isNull() && m_release_event_isValid;

    m_song_type_isValid = ::OpenAPI::fromJsonValue(m_song_type, json[QString("songType")]);
    m_song_type_isSet = !json[QString("songType")].isNull() && m_song_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumbUrl")]);
    m_thumb_url_isSet = !json[QString("thumbUrl")].isNull() && m_thumb_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_web_links_isValid = ::OpenAPI::fromJsonValue(m_web_links, json[QString("webLinks")]);
    m_web_links_isSet = !json[QString("webLinks")].isNull() && m_web_links_isValid;
}

QString OAISongForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISongForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_albums.size() > 0) {
        obj.insert(QString("albums"), ::OpenAPI::toJsonValue(m_albums));
    }
    if (m_artist_string_isSet) {
        obj.insert(QString("artistString"), ::OpenAPI::toJsonValue(m_artist_string));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_default_name_isSet) {
        obj.insert(QString("defaultName"), ::OpenAPI::toJsonValue(m_default_name));
    }
    if (m_default_name_language.isSet()) {
        obj.insert(QString("defaultNameLanguage"), ::OpenAPI::toJsonValue(m_default_name_language));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_favorited_times_isSet) {
        obj.insert(QString("favoritedTimes"), ::OpenAPI::toJsonValue(m_favorited_times));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_length_seconds_isSet) {
        obj.insert(QString("lengthSeconds"), ::OpenAPI::toJsonValue(m_length_seconds));
    }
    if (m_lyrics.size() > 0) {
        obj.insert(QString("lyrics"), ::OpenAPI::toJsonValue(m_lyrics));
    }
    if (m_main_picture.isSet()) {
        obj.insert(QString("mainPicture"), ::OpenAPI::toJsonValue(m_main_picture));
    }
    if (m_max_milli_bpm_isSet) {
        obj.insert(QString("maxMilliBpm"), ::OpenAPI::toJsonValue(m_max_milli_bpm));
    }
    if (m_merged_to_isSet) {
        obj.insert(QString("mergedTo"), ::OpenAPI::toJsonValue(m_merged_to));
    }
    if (m_min_milli_bpm_isSet) {
        obj.insert(QString("minMilliBpm"), ::OpenAPI::toJsonValue(m_min_milli_bpm));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_original_version_id_isSet) {
        obj.insert(QString("originalVersionId"), ::OpenAPI::toJsonValue(m_original_version_id));
    }
    if (m_publish_date_isSet) {
        obj.insert(QString("publishDate"), ::OpenAPI::toJsonValue(m_publish_date));
    }
    if (m_pv_services.isSet()) {
        obj.insert(QString("pvServices"), ::OpenAPI::toJsonValue(m_pv_services));
    }
    if (m_pvs.size() > 0) {
        obj.insert(QString("pvs"), ::OpenAPI::toJsonValue(m_pvs));
    }
    if (m_rating_score_isSet) {
        obj.insert(QString("ratingScore"), ::OpenAPI::toJsonValue(m_rating_score));
    }
    if (m_release_event.isSet()) {
        obj.insert(QString("releaseEvent"), ::OpenAPI::toJsonValue(m_release_event));
    }
    if (m_song_type.isSet()) {
        obj.insert(QString("songType"), ::OpenAPI::toJsonValue(m_song_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumbUrl"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_web_links.size() > 0) {
        obj.insert(QString("webLinks"), ::OpenAPI::toJsonValue(m_web_links));
    }
    return obj;
}

QString OAISongForApiContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAISongForApiContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAISongForApiContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAISongForApiContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

QList<OAIAlbumContract> OAISongForApiContract::getAlbums() const {
    return m_albums;
}
void OAISongForApiContract::setAlbums(const QList<OAIAlbumContract> &albums) {
    m_albums = albums;
    m_albums_isSet = true;
}

bool OAISongForApiContract::is_albums_Set() const{
    return m_albums_isSet;
}

bool OAISongForApiContract::is_albums_Valid() const{
    return m_albums_isValid;
}

QString OAISongForApiContract::getArtistString() const {
    return m_artist_string;
}
void OAISongForApiContract::setArtistString(const QString &artist_string) {
    m_artist_string = artist_string;
    m_artist_string_isSet = true;
}

bool OAISongForApiContract::is_artist_string_Set() const{
    return m_artist_string_isSet;
}

bool OAISongForApiContract::is_artist_string_Valid() const{
    return m_artist_string_isValid;
}

QList<OAIArtistForSongContract> OAISongForApiContract::getArtists() const {
    return m_artists;
}
void OAISongForApiContract::setArtists(const QList<OAIArtistForSongContract> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAISongForApiContract::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAISongForApiContract::is_artists_Valid() const{
    return m_artists_isValid;
}

QDateTime OAISongForApiContract::getCreateDate() const {
    return m_create_date;
}
void OAISongForApiContract::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAISongForApiContract::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAISongForApiContract::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAISongForApiContract::getDefaultName() const {
    return m_default_name;
}
void OAISongForApiContract::setDefaultName(const QString &default_name) {
    m_default_name = default_name;
    m_default_name_isSet = true;
}

bool OAISongForApiContract::is_default_name_Set() const{
    return m_default_name_isSet;
}

bool OAISongForApiContract::is_default_name_Valid() const{
    return m_default_name_isValid;
}

OAIContentLanguageSelection OAISongForApiContract::getDefaultNameLanguage() const {
    return m_default_name_language;
}
void OAISongForApiContract::setDefaultNameLanguage(const OAIContentLanguageSelection &default_name_language) {
    m_default_name_language = default_name_language;
    m_default_name_language_isSet = true;
}

bool OAISongForApiContract::is_default_name_language_Set() const{
    return m_default_name_language_isSet;
}

bool OAISongForApiContract::is_default_name_language_Valid() const{
    return m_default_name_language_isValid;
}

bool OAISongForApiContract::isDeleted() const {
    return m_deleted;
}
void OAISongForApiContract::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAISongForApiContract::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAISongForApiContract::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint32 OAISongForApiContract::getFavoritedTimes() const {
    return m_favorited_times;
}
void OAISongForApiContract::setFavoritedTimes(const qint32 &favorited_times) {
    m_favorited_times = favorited_times;
    m_favorited_times_isSet = true;
}

bool OAISongForApiContract::is_favorited_times_Set() const{
    return m_favorited_times_isSet;
}

bool OAISongForApiContract::is_favorited_times_Valid() const{
    return m_favorited_times_isValid;
}

qint32 OAISongForApiContract::getId() const {
    return m_id;
}
void OAISongForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISongForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAISongForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISongForApiContract::getLengthSeconds() const {
    return m_length_seconds;
}
void OAISongForApiContract::setLengthSeconds(const qint32 &length_seconds) {
    m_length_seconds = length_seconds;
    m_length_seconds_isSet = true;
}

bool OAISongForApiContract::is_length_seconds_Set() const{
    return m_length_seconds_isSet;
}

bool OAISongForApiContract::is_length_seconds_Valid() const{
    return m_length_seconds_isValid;
}

QList<OAILyricsForSongContract> OAISongForApiContract::getLyrics() const {
    return m_lyrics;
}
void OAISongForApiContract::setLyrics(const QList<OAILyricsForSongContract> &lyrics) {
    m_lyrics = lyrics;
    m_lyrics_isSet = true;
}

bool OAISongForApiContract::is_lyrics_Set() const{
    return m_lyrics_isSet;
}

bool OAISongForApiContract::is_lyrics_Valid() const{
    return m_lyrics_isValid;
}

OAIEntryThumbForApiContract OAISongForApiContract::getMainPicture() const {
    return m_main_picture;
}
void OAISongForApiContract::setMainPicture(const OAIEntryThumbForApiContract &main_picture) {
    m_main_picture = main_picture;
    m_main_picture_isSet = true;
}

bool OAISongForApiContract::is_main_picture_Set() const{
    return m_main_picture_isSet;
}

bool OAISongForApiContract::is_main_picture_Valid() const{
    return m_main_picture_isValid;
}

qint32 OAISongForApiContract::getMaxMilliBpm() const {
    return m_max_milli_bpm;
}
void OAISongForApiContract::setMaxMilliBpm(const qint32 &max_milli_bpm) {
    m_max_milli_bpm = max_milli_bpm;
    m_max_milli_bpm_isSet = true;
}

bool OAISongForApiContract::is_max_milli_bpm_Set() const{
    return m_max_milli_bpm_isSet;
}

bool OAISongForApiContract::is_max_milli_bpm_Valid() const{
    return m_max_milli_bpm_isValid;
}

qint32 OAISongForApiContract::getMergedTo() const {
    return m_merged_to;
}
void OAISongForApiContract::setMergedTo(const qint32 &merged_to) {
    m_merged_to = merged_to;
    m_merged_to_isSet = true;
}

bool OAISongForApiContract::is_merged_to_Set() const{
    return m_merged_to_isSet;
}

bool OAISongForApiContract::is_merged_to_Valid() const{
    return m_merged_to_isValid;
}

qint32 OAISongForApiContract::getMinMilliBpm() const {
    return m_min_milli_bpm;
}
void OAISongForApiContract::setMinMilliBpm(const qint32 &min_milli_bpm) {
    m_min_milli_bpm = min_milli_bpm;
    m_min_milli_bpm_isSet = true;
}

bool OAISongForApiContract::is_min_milli_bpm_Set() const{
    return m_min_milli_bpm_isSet;
}

bool OAISongForApiContract::is_min_milli_bpm_Valid() const{
    return m_min_milli_bpm_isValid;
}

QString OAISongForApiContract::getName() const {
    return m_name;
}
void OAISongForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISongForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAISongForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILocalizedStringContract> OAISongForApiContract::getNames() const {
    return m_names;
}
void OAISongForApiContract::setNames(const QList<OAILocalizedStringContract> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAISongForApiContract::is_names_Set() const{
    return m_names_isSet;
}

bool OAISongForApiContract::is_names_Valid() const{
    return m_names_isValid;
}

qint32 OAISongForApiContract::getOriginalVersionId() const {
    return m_original_version_id;
}
void OAISongForApiContract::setOriginalVersionId(const qint32 &original_version_id) {
    m_original_version_id = original_version_id;
    m_original_version_id_isSet = true;
}

bool OAISongForApiContract::is_original_version_id_Set() const{
    return m_original_version_id_isSet;
}

bool OAISongForApiContract::is_original_version_id_Valid() const{
    return m_original_version_id_isValid;
}

QDateTime OAISongForApiContract::getPublishDate() const {
    return m_publish_date;
}
void OAISongForApiContract::setPublishDate(const QDateTime &publish_date) {
    m_publish_date = publish_date;
    m_publish_date_isSet = true;
}

bool OAISongForApiContract::is_publish_date_Set() const{
    return m_publish_date_isSet;
}

bool OAISongForApiContract::is_publish_date_Valid() const{
    return m_publish_date_isValid;
}

OAIPVServices OAISongForApiContract::getPvServices() const {
    return m_pv_services;
}
void OAISongForApiContract::setPvServices(const OAIPVServices &pv_services) {
    m_pv_services = pv_services;
    m_pv_services_isSet = true;
}

bool OAISongForApiContract::is_pv_services_Set() const{
    return m_pv_services_isSet;
}

bool OAISongForApiContract::is_pv_services_Valid() const{
    return m_pv_services_isValid;
}

QList<OAIPVContract> OAISongForApiContract::getPvs() const {
    return m_pvs;
}
void OAISongForApiContract::setPvs(const QList<OAIPVContract> &pvs) {
    m_pvs = pvs;
    m_pvs_isSet = true;
}

bool OAISongForApiContract::is_pvs_Set() const{
    return m_pvs_isSet;
}

bool OAISongForApiContract::is_pvs_Valid() const{
    return m_pvs_isValid;
}

qint32 OAISongForApiContract::getRatingScore() const {
    return m_rating_score;
}
void OAISongForApiContract::setRatingScore(const qint32 &rating_score) {
    m_rating_score = rating_score;
    m_rating_score_isSet = true;
}

bool OAISongForApiContract::is_rating_score_Set() const{
    return m_rating_score_isSet;
}

bool OAISongForApiContract::is_rating_score_Valid() const{
    return m_rating_score_isValid;
}

OAIReleaseEventForApiContract OAISongForApiContract::getReleaseEvent() const {
    return m_release_event;
}
void OAISongForApiContract::setReleaseEvent(const OAIReleaseEventForApiContract &release_event) {
    m_release_event = release_event;
    m_release_event_isSet = true;
}

bool OAISongForApiContract::is_release_event_Set() const{
    return m_release_event_isSet;
}

bool OAISongForApiContract::is_release_event_Valid() const{
    return m_release_event_isValid;
}

OAISongType OAISongForApiContract::getSongType() const {
    return m_song_type;
}
void OAISongForApiContract::setSongType(const OAISongType &song_type) {
    m_song_type = song_type;
    m_song_type_isSet = true;
}

bool OAISongForApiContract::is_song_type_Set() const{
    return m_song_type_isSet;
}

bool OAISongForApiContract::is_song_type_Valid() const{
    return m_song_type_isValid;
}

OAIEntryStatus OAISongForApiContract::getStatus() const {
    return m_status;
}
void OAISongForApiContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISongForApiContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAISongForApiContract::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITagUsageForApiContract> OAISongForApiContract::getTags() const {
    return m_tags;
}
void OAISongForApiContract::setTags(const QList<OAITagUsageForApiContract> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISongForApiContract::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISongForApiContract::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAISongForApiContract::getThumbUrl() const {
    return m_thumb_url;
}
void OAISongForApiContract::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAISongForApiContract::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAISongForApiContract::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

qint32 OAISongForApiContract::getVersion() const {
    return m_version;
}
void OAISongForApiContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISongForApiContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAISongForApiContract::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIWebLinkForApiContract> OAISongForApiContract::getWebLinks() const {
    return m_web_links;
}
void OAISongForApiContract::setWebLinks(const QList<OAIWebLinkForApiContract> &web_links) {
    m_web_links = web_links;
    m_web_links_isSet = true;
}

bool OAISongForApiContract::is_web_links_Set() const{
    return m_web_links_isSet;
}

bool OAISongForApiContract::is_web_links_Valid() const{
    return m_web_links_isValid;
}

bool OAISongForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_albums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_name_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorited_times_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lyrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_milli_bpm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_milli_bpm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pv_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISongForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
