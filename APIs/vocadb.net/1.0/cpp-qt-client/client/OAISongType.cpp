/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISongType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISongType::OAISongType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISongType::OAISongType() {
    this->initializeModel();
}

OAISongType::~OAISongType() {}

void OAISongType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISongType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISongType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Unspecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::UNSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Original", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::ORIGINAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Remaster", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::REMASTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Remix", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::REMIX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cover", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::COVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Arrangement", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::ARRANGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Instrumental", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::INSTRUMENTAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Mashup", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::MASHUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MusicPV", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::MUSICPV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DramaPV", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::DRAMAPV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Live", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::LIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Illustration", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::ILLUSTRATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAISongType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISongType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISongType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISongType::UNSPECIFIED:
            val = "Unspecified";
            break;
        case eOAISongType::ORIGINAL:
            val = "Original";
            break;
        case eOAISongType::REMASTER:
            val = "Remaster";
            break;
        case eOAISongType::REMIX:
            val = "Remix";
            break;
        case eOAISongType::COVER:
            val = "Cover";
            break;
        case eOAISongType::ARRANGEMENT:
            val = "Arrangement";
            break;
        case eOAISongType::INSTRUMENTAL:
            val = "Instrumental";
            break;
        case eOAISongType::MASHUP:
            val = "Mashup";
            break;
        case eOAISongType::MUSICPV:
            val = "MusicPV";
            break;
        case eOAISongType::DRAMAPV:
            val = "DramaPV";
            break;
        case eOAISongType::LIVE:
            val = "Live";
            break;
        case eOAISongType::ILLUSTRATION:
            val = "Illustration";
            break;
        case eOAISongType::OTHER:
            val = "Other";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISongType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISongType::eOAISongType OAISongType::getValue() const {
    return m_value;
}

void OAISongType::setValue(const OAISongType::eOAISongType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISongType::isSet() const {
    
    return m_value_isSet;
}

bool OAISongType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
