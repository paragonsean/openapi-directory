/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPVService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPVService::OAIPVService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPVService::OAIPVService() {
    this->initializeModel();
}

OAIPVService::~OAIPVService() {}

void OAIPVService::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPVService::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPVService::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NicoNicoDouga", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::NICONICODOUGA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Youtube", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::YOUTUBE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SoundCloud", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::SOUNDCLOUD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vimeo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::VIMEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Piapro", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::PIAPRO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bilibili", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::BILIBILI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("File", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LocalFile", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::LOCALFILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Creofuga", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::CREOFUGA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bandcamp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPVService::BANDCAMP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPVService::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPVService::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPVService::NICONICODOUGA:
            val = "NicoNicoDouga";
            break;
        case eOAIPVService::YOUTUBE:
            val = "Youtube";
            break;
        case eOAIPVService::SOUNDCLOUD:
            val = "SoundCloud";
            break;
        case eOAIPVService::VIMEO:
            val = "Vimeo";
            break;
        case eOAIPVService::PIAPRO:
            val = "Piapro";
            break;
        case eOAIPVService::BILIBILI:
            val = "Bilibili";
            break;
        case eOAIPVService::FILE:
            val = "File";
            break;
        case eOAIPVService::LOCALFILE:
            val = "LocalFile";
            break;
        case eOAIPVService::CREOFUGA:
            val = "Creofuga";
            break;
        case eOAIPVService::BANDCAMP:
            val = "Bandcamp";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPVService::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPVService::eOAIPVService OAIPVService::getValue() const {
    return m_value;
}

void OAIPVService::setValue(const OAIPVService::eOAIPVService& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPVService::isSet() const {
    
    return m_value_isSet;
}

bool OAIPVService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
