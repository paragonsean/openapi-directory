/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventCategory::OAIEventCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventCategory::OAIEventCategory() {
    this->initializeModel();
}

OAIEventCategory::~OAIEventCategory() {}

void OAIEventCategory::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventCategory::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventCategory::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Unspecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::UNSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AlbumRelease", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::ALBUMRELEASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Anniversary", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::ANNIVERSARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Club", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::CLUB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Concert", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::CONCERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Contest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::CONTEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Convention", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::CONVENTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Festival", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventCategory::FESTIVAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventCategory::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventCategory::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventCategory::UNSPECIFIED:
            val = "Unspecified";
            break;
        case eOAIEventCategory::ALBUMRELEASE:
            val = "AlbumRelease";
            break;
        case eOAIEventCategory::ANNIVERSARY:
            val = "Anniversary";
            break;
        case eOAIEventCategory::CLUB:
            val = "Club";
            break;
        case eOAIEventCategory::CONCERT:
            val = "Concert";
            break;
        case eOAIEventCategory::CONTEST:
            val = "Contest";
            break;
        case eOAIEventCategory::CONVENTION:
            val = "Convention";
            break;
        case eOAIEventCategory::OTHER:
            val = "Other";
            break;
        case eOAIEventCategory::FESTIVAL:
            val = "Festival";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventCategory::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventCategory::eOAIEventCategory OAIEventCategory::getValue() const {
    return m_value;
}

void OAIEventCategory::setValue(const OAIEventCategory::eOAIEventCategory& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventCategory::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
