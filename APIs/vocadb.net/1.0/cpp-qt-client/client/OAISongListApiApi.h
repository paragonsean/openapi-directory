/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISongListApiApi_H
#define OAI_OAISongListApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvancedSearchFilterParams.h"
#include "OAICommentForApiContract.h"
#include "OAICommentForApiContractPartialFindResult.h"
#include "OAIContentLanguagePreference.h"
#include "OAINameMatchMode.h"
#include "OAIPVServices.h"
#include "OAISongInListForApiContractPartialFindResult.h"
#include "OAISongListFeaturedCategory.h"
#include "OAISongListForApiContractPartialFindResult.h"
#include "OAISongListForEditForApiContract.h"
#include "OAISongListOptionalFields.h"
#include "OAISongListSortRule.h"
#include "OAISongOptionalFields.h"
#include "OAISongSortRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISongListApiApi : public QObject {
    Q_OBJECT

public:
    OAISongListApiApi(const int timeOut = 0);
    ~OAISongListApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  comment_id qint32 [required]
    */
    virtual void apiSongListsCommentsCommentIdDelete(const qint32 &comment_id);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiSongListsCommentsCommentIdPost(const qint32 &comment_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  child_tags bool [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  featured_category OAISongListFeaturedCategory [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAISongListSortRule [optional]
    * @param[in]  fields OAISongListOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiSongListsFeaturedGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_tags = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAISongListFeaturedCategory> &featured_category = ::OpenAPI::OptionalParam<OAISongListFeaturedCategory>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAISongListSortRule> &sort = ::OpenAPI::OptionalParam<OAISongListSortRule>(), const ::OpenAPI::OptionalParam<OAISongListOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongListOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  featured_category OAISongListFeaturedCategory [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void apiSongListsFeaturedNamesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAISongListFeaturedCategory> &featured_category = ::OpenAPI::OptionalParam<OAISongListFeaturedCategory>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  notes QString [optional]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void apiSongListsIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  list_id qint32 [required]
    */
    virtual void apiSongListsListIdCommentsGet(const qint32 &list_id);

    /**
    * @param[in]  list_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiSongListsListIdCommentsPost(const qint32 &list_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  list_id qint32 [required]
    * @param[in]  query QString [optional]
    * @param[in]  song_types QString [optional]
    * @param[in]  pv_services OAIPVServices [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  artist_id QList<qint32> [optional]
    * @param[in]  child_voicebanks bool [optional]
    * @param[in]  advanced_filters QList<OAIAdvancedSearchFilterParams> [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAISongSortRule [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiSongListsListIdSongsGet(const qint32 &list_id, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &song_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPVServices> &pv_services = ::OpenAPI::OptionalParam<OAIPVServices>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &artist_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_voicebanks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>> &advanced_filters = ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAISongSortRule> &sort = ::OpenAPI::OptionalParam<OAISongSortRule>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  oai_song_list_for_edit_for_api_contract OAISongListForEditForApiContract [optional]
    */
    virtual void apiSongListsPost(const ::OpenAPI::OptionalParam<OAISongListForEditForApiContract> &oai_song_list_for_edit_for_api_contract = ::OpenAPI::OptionalParam<OAISongListForEditForApiContract>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiSongListsCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiSongListsCommentsCommentIdPostCallback(OAIHttpRequestWorker *worker);
    void apiSongListsFeaturedGetCallback(OAIHttpRequestWorker *worker);
    void apiSongListsFeaturedNamesGetCallback(OAIHttpRequestWorker *worker);
    void apiSongListsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiSongListsListIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void apiSongListsListIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void apiSongListsListIdSongsGetCallback(OAIHttpRequestWorker *worker);
    void apiSongListsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiSongListsCommentsCommentIdDeleteSignal();
    void apiSongListsCommentsCommentIdPostSignal();
    void apiSongListsFeaturedGetSignal(OAISongListForApiContractPartialFindResult summary);
    void apiSongListsFeaturedNamesGetSignal(QList<QString> summary);
    void apiSongListsIdDeleteSignal();
    void apiSongListsListIdCommentsGetSignal(OAICommentForApiContractPartialFindResult summary);
    void apiSongListsListIdCommentsPostSignal(OAICommentForApiContract summary);
    void apiSongListsListIdSongsGetSignal(OAISongInListForApiContractPartialFindResult summary);
    void apiSongListsPostSignal(qint32 summary);


    void apiSongListsCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiSongListsCommentsCommentIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiSongListsFeaturedGetSignalFull(OAIHttpRequestWorker *worker, OAISongListForApiContractPartialFindResult summary);
    void apiSongListsFeaturedNamesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiSongListsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiSongListsListIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContractPartialFindResult summary);
    void apiSongListsListIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContract summary);
    void apiSongListsListIdSongsGetSignalFull(OAIHttpRequestWorker *worker, OAISongInListForApiContractPartialFindResult summary);
    void apiSongListsPostSignalFull(OAIHttpRequestWorker *worker, qint32 summary);

    Q_DECL_DEPRECATED_X("Use apiSongListsCommentsCommentIdDeleteSignalError() instead")
    void apiSongListsCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsCommentsCommentIdPostSignalError() instead")
    void apiSongListsCommentsCommentIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsCommentsCommentIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsFeaturedGetSignalError() instead")
    void apiSongListsFeaturedGetSignalE(OAISongListForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsFeaturedGetSignalError(OAISongListForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsFeaturedNamesGetSignalError() instead")
    void apiSongListsFeaturedNamesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsFeaturedNamesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsIdDeleteSignalError() instead")
    void apiSongListsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsListIdCommentsGetSignalError() instead")
    void apiSongListsListIdCommentsGetSignalE(OAICommentForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsListIdCommentsGetSignalError(OAICommentForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsListIdCommentsPostSignalError() instead")
    void apiSongListsListIdCommentsPostSignalE(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsListIdCommentsPostSignalError(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsListIdSongsGetSignalError() instead")
    void apiSongListsListIdSongsGetSignalE(OAISongInListForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsListIdSongsGetSignalError(OAISongInListForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsPostSignalError() instead")
    void apiSongListsPostSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsPostSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiSongListsCommentsCommentIdDeleteSignalErrorFull() instead")
    void apiSongListsCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsCommentsCommentIdPostSignalErrorFull() instead")
    void apiSongListsCommentsCommentIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsCommentsCommentIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsFeaturedGetSignalErrorFull() instead")
    void apiSongListsFeaturedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsFeaturedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsFeaturedNamesGetSignalErrorFull() instead")
    void apiSongListsFeaturedNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsFeaturedNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsIdDeleteSignalErrorFull() instead")
    void apiSongListsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsListIdCommentsGetSignalErrorFull() instead")
    void apiSongListsListIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsListIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsListIdCommentsPostSignalErrorFull() instead")
    void apiSongListsListIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsListIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsListIdSongsGetSignalErrorFull() instead")
    void apiSongListsListIdSongsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsListIdSongsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongListsPostSignalErrorFull() instead")
    void apiSongListsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongListsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
