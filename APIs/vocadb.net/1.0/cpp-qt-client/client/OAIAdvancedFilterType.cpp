/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedFilterType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedFilterType::OAIAdvancedFilterType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedFilterType::OAIAdvancedFilterType() {
    this->initializeModel();
}

OAIAdvancedFilterType::~OAIAdvancedFilterType() {}

void OAIAdvancedFilterType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAdvancedFilterType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAdvancedFilterType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Nothing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::NOTHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ArtistType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::ARTISTTYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WebLink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::WEBLINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasUserAccount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASUSERACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RootVoicebank", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::ROOTVOICEBANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VoiceProvider", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::VOICEPROVIDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasStoreLink", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASSTORELINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasTracks", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASTRACKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NoCoverPicture", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::NOCOVERPICTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasAlbum", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASALBUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasOriginalMedia", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASORIGINALMEDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasMedia", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASMEDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasMultipleVoicebanks", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASMULTIPLEVOICEBANKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HasPublishDate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::HASPUBLISHDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Lyrics", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::LYRICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LyricsContent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdvancedFilterType::LYRICSCONTENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAdvancedFilterType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAdvancedFilterType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAdvancedFilterType::NOTHING:
            val = "Nothing";
            break;
        case eOAIAdvancedFilterType::ARTISTTYPE:
            val = "ArtistType";
            break;
        case eOAIAdvancedFilterType::WEBLINK:
            val = "WebLink";
            break;
        case eOAIAdvancedFilterType::HASUSERACCOUNT:
            val = "HasUserAccount";
            break;
        case eOAIAdvancedFilterType::ROOTVOICEBANK:
            val = "RootVoicebank";
            break;
        case eOAIAdvancedFilterType::VOICEPROVIDER:
            val = "VoiceProvider";
            break;
        case eOAIAdvancedFilterType::HASSTORELINK:
            val = "HasStoreLink";
            break;
        case eOAIAdvancedFilterType::HASTRACKS:
            val = "HasTracks";
            break;
        case eOAIAdvancedFilterType::NOCOVERPICTURE:
            val = "NoCoverPicture";
            break;
        case eOAIAdvancedFilterType::HASALBUM:
            val = "HasAlbum";
            break;
        case eOAIAdvancedFilterType::HASORIGINALMEDIA:
            val = "HasOriginalMedia";
            break;
        case eOAIAdvancedFilterType::HASMEDIA:
            val = "HasMedia";
            break;
        case eOAIAdvancedFilterType::HASMULTIPLEVOICEBANKS:
            val = "HasMultipleVoicebanks";
            break;
        case eOAIAdvancedFilterType::HASPUBLISHDATE:
            val = "HasPublishDate";
            break;
        case eOAIAdvancedFilterType::LYRICS:
            val = "Lyrics";
            break;
        case eOAIAdvancedFilterType::LYRICSCONTENT:
            val = "LyricsContent";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAdvancedFilterType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAdvancedFilterType::eOAIAdvancedFilterType OAIAdvancedFilterType::getValue() const {
    return m_value;
}

void OAIAdvancedFilterType::setValue(const OAIAdvancedFilterType::eOAIAdvancedFilterType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAdvancedFilterType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAdvancedFilterType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
