/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryForApiContract::OAIEntryForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryForApiContract::OAIEntryForApiContract() {
    this->initializeModel();
}

OAIEntryForApiContract::~OAIEntryForApiContract() {}

void OAIEntryForApiContract::initializeModel() {

    m_activity_date_isSet = false;
    m_activity_date_isValid = false;

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_artist_string_isSet = false;
    m_artist_string_isValid = false;

    m_artist_type_isSet = false;
    m_artist_type_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_default_name_isSet = false;
    m_default_name_isValid = false;

    m_default_name_language_isSet = false;
    m_default_name_language_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disc_type_isSet = false;
    m_disc_type_isValid = false;

    m_entry_type_isSet = false;
    m_entry_type_isValid = false;

    m_event_category_isSet = false;
    m_event_category_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_main_picture_isSet = false;
    m_main_picture_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_pvs_isSet = false;
    m_pvs_isValid = false;

    m_release_event_series_name_isSet = false;
    m_release_event_series_name_isValid = false;

    m_song_list_featured_category_isSet = false;
    m_song_list_featured_category_isValid = false;

    m_song_type_isSet = false;
    m_song_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_category_name_isSet = false;
    m_tag_category_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_slug_isSet = false;
    m_url_slug_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_web_links_isSet = false;
    m_web_links_isValid = false;
}

void OAIEntryForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryForApiContract::fromJsonObject(QJsonObject json) {

    m_activity_date_isValid = ::OpenAPI::fromJsonValue(m_activity_date, json[QString("activityDate")]);
    m_activity_date_isSet = !json[QString("activityDate")].isNull() && m_activity_date_isValid;

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_artist_string_isValid = ::OpenAPI::fromJsonValue(m_artist_string, json[QString("artistString")]);
    m_artist_string_isSet = !json[QString("artistString")].isNull() && m_artist_string_isValid;

    m_artist_type_isValid = ::OpenAPI::fromJsonValue(m_artist_type, json[QString("artistType")]);
    m_artist_type_isSet = !json[QString("artistType")].isNull() && m_artist_type_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_default_name_isValid = ::OpenAPI::fromJsonValue(m_default_name, json[QString("defaultName")]);
    m_default_name_isSet = !json[QString("defaultName")].isNull() && m_default_name_isValid;

    m_default_name_language_isValid = ::OpenAPI::fromJsonValue(m_default_name_language, json[QString("defaultNameLanguage")]);
    m_default_name_language_isSet = !json[QString("defaultNameLanguage")].isNull() && m_default_name_language_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disc_type_isValid = ::OpenAPI::fromJsonValue(m_disc_type, json[QString("discType")]);
    m_disc_type_isSet = !json[QString("discType")].isNull() && m_disc_type_isValid;

    m_entry_type_isValid = ::OpenAPI::fromJsonValue(m_entry_type, json[QString("entryType")]);
    m_entry_type_isSet = !json[QString("entryType")].isNull() && m_entry_type_isValid;

    m_event_category_isValid = ::OpenAPI::fromJsonValue(m_event_category, json[QString("eventCategory")]);
    m_event_category_isSet = !json[QString("eventCategory")].isNull() && m_event_category_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_main_picture_isValid = ::OpenAPI::fromJsonValue(m_main_picture, json[QString("mainPicture")]);
    m_main_picture_isSet = !json[QString("mainPicture")].isNull() && m_main_picture_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_pvs_isValid = ::OpenAPI::fromJsonValue(m_pvs, json[QString("pvs")]);
    m_pvs_isSet = !json[QString("pvs")].isNull() && m_pvs_isValid;

    m_release_event_series_name_isValid = ::OpenAPI::fromJsonValue(m_release_event_series_name, json[QString("releaseEventSeriesName")]);
    m_release_event_series_name_isSet = !json[QString("releaseEventSeriesName")].isNull() && m_release_event_series_name_isValid;

    m_song_list_featured_category_isValid = ::OpenAPI::fromJsonValue(m_song_list_featured_category, json[QString("songListFeaturedCategory")]);
    m_song_list_featured_category_isSet = !json[QString("songListFeaturedCategory")].isNull() && m_song_list_featured_category_isValid;

    m_song_type_isValid = ::OpenAPI::fromJsonValue(m_song_type, json[QString("songType")]);
    m_song_type_isSet = !json[QString("songType")].isNull() && m_song_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_category_name_isValid = ::OpenAPI::fromJsonValue(m_tag_category_name, json[QString("tagCategoryName")]);
    m_tag_category_name_isSet = !json[QString("tagCategoryName")].isNull() && m_tag_category_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_slug_isValid = ::OpenAPI::fromJsonValue(m_url_slug, json[QString("urlSlug")]);
    m_url_slug_isSet = !json[QString("urlSlug")].isNull() && m_url_slug_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_web_links_isValid = ::OpenAPI::fromJsonValue(m_web_links, json[QString("webLinks")]);
    m_web_links_isSet = !json[QString("webLinks")].isNull() && m_web_links_isValid;
}

QString OAIEntryForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_date_isSet) {
        obj.insert(QString("activityDate"), ::OpenAPI::toJsonValue(m_activity_date));
    }
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_artist_string_isSet) {
        obj.insert(QString("artistString"), ::OpenAPI::toJsonValue(m_artist_string));
    }
    if (m_artist_type.isSet()) {
        obj.insert(QString("artistType"), ::OpenAPI::toJsonValue(m_artist_type));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_default_name_isSet) {
        obj.insert(QString("defaultName"), ::OpenAPI::toJsonValue(m_default_name));
    }
    if (m_default_name_language.isSet()) {
        obj.insert(QString("defaultNameLanguage"), ::OpenAPI::toJsonValue(m_default_name_language));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disc_type.isSet()) {
        obj.insert(QString("discType"), ::OpenAPI::toJsonValue(m_disc_type));
    }
    if (m_entry_type.isSet()) {
        obj.insert(QString("entryType"), ::OpenAPI::toJsonValue(m_entry_type));
    }
    if (m_event_category.isSet()) {
        obj.insert(QString("eventCategory"), ::OpenAPI::toJsonValue(m_event_category));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_main_picture.isSet()) {
        obj.insert(QString("mainPicture"), ::OpenAPI::toJsonValue(m_main_picture));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_pvs.size() > 0) {
        obj.insert(QString("pvs"), ::OpenAPI::toJsonValue(m_pvs));
    }
    if (m_release_event_series_name_isSet) {
        obj.insert(QString("releaseEventSeriesName"), ::OpenAPI::toJsonValue(m_release_event_series_name));
    }
    if (m_song_list_featured_category.isSet()) {
        obj.insert(QString("songListFeaturedCategory"), ::OpenAPI::toJsonValue(m_song_list_featured_category));
    }
    if (m_song_type.isSet()) {
        obj.insert(QString("songType"), ::OpenAPI::toJsonValue(m_song_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_category_name_isSet) {
        obj.insert(QString("tagCategoryName"), ::OpenAPI::toJsonValue(m_tag_category_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_slug_isSet) {
        obj.insert(QString("urlSlug"), ::OpenAPI::toJsonValue(m_url_slug));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_web_links.size() > 0) {
        obj.insert(QString("webLinks"), ::OpenAPI::toJsonValue(m_web_links));
    }
    return obj;
}

QDateTime OAIEntryForApiContract::getActivityDate() const {
    return m_activity_date;
}
void OAIEntryForApiContract::setActivityDate(const QDateTime &activity_date) {
    m_activity_date = activity_date;
    m_activity_date_isSet = true;
}

bool OAIEntryForApiContract::is_activity_date_Set() const{
    return m_activity_date_isSet;
}

bool OAIEntryForApiContract::is_activity_date_Valid() const{
    return m_activity_date_isValid;
}

QString OAIEntryForApiContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAIEntryForApiContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAIEntryForApiContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAIEntryForApiContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

QString OAIEntryForApiContract::getArtistString() const {
    return m_artist_string;
}
void OAIEntryForApiContract::setArtistString(const QString &artist_string) {
    m_artist_string = artist_string;
    m_artist_string_isSet = true;
}

bool OAIEntryForApiContract::is_artist_string_Set() const{
    return m_artist_string_isSet;
}

bool OAIEntryForApiContract::is_artist_string_Valid() const{
    return m_artist_string_isValid;
}

OAIArtistType OAIEntryForApiContract::getArtistType() const {
    return m_artist_type;
}
void OAIEntryForApiContract::setArtistType(const OAIArtistType &artist_type) {
    m_artist_type = artist_type;
    m_artist_type_isSet = true;
}

bool OAIEntryForApiContract::is_artist_type_Set() const{
    return m_artist_type_isSet;
}

bool OAIEntryForApiContract::is_artist_type_Valid() const{
    return m_artist_type_isValid;
}

QDateTime OAIEntryForApiContract::getCreateDate() const {
    return m_create_date;
}
void OAIEntryForApiContract::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIEntryForApiContract::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIEntryForApiContract::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIEntryForApiContract::getDefaultName() const {
    return m_default_name;
}
void OAIEntryForApiContract::setDefaultName(const QString &default_name) {
    m_default_name = default_name;
    m_default_name_isSet = true;
}

bool OAIEntryForApiContract::is_default_name_Set() const{
    return m_default_name_isSet;
}

bool OAIEntryForApiContract::is_default_name_Valid() const{
    return m_default_name_isValid;
}

OAIContentLanguageSelection OAIEntryForApiContract::getDefaultNameLanguage() const {
    return m_default_name_language;
}
void OAIEntryForApiContract::setDefaultNameLanguage(const OAIContentLanguageSelection &default_name_language) {
    m_default_name_language = default_name_language;
    m_default_name_language_isSet = true;
}

bool OAIEntryForApiContract::is_default_name_language_Set() const{
    return m_default_name_language_isSet;
}

bool OAIEntryForApiContract::is_default_name_language_Valid() const{
    return m_default_name_language_isValid;
}

QString OAIEntryForApiContract::getDescription() const {
    return m_description;
}
void OAIEntryForApiContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEntryForApiContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEntryForApiContract::is_description_Valid() const{
    return m_description_isValid;
}

OAIDiscType OAIEntryForApiContract::getDiscType() const {
    return m_disc_type;
}
void OAIEntryForApiContract::setDiscType(const OAIDiscType &disc_type) {
    m_disc_type = disc_type;
    m_disc_type_isSet = true;
}

bool OAIEntryForApiContract::is_disc_type_Set() const{
    return m_disc_type_isSet;
}

bool OAIEntryForApiContract::is_disc_type_Valid() const{
    return m_disc_type_isValid;
}

OAIEntryType OAIEntryForApiContract::getEntryType() const {
    return m_entry_type;
}
void OAIEntryForApiContract::setEntryType(const OAIEntryType &entry_type) {
    m_entry_type = entry_type;
    m_entry_type_isSet = true;
}

bool OAIEntryForApiContract::is_entry_type_Set() const{
    return m_entry_type_isSet;
}

bool OAIEntryForApiContract::is_entry_type_Valid() const{
    return m_entry_type_isValid;
}

OAIEventCategory OAIEntryForApiContract::getEventCategory() const {
    return m_event_category;
}
void OAIEntryForApiContract::setEventCategory(const OAIEventCategory &event_category) {
    m_event_category = event_category;
    m_event_category_isSet = true;
}

bool OAIEntryForApiContract::is_event_category_Set() const{
    return m_event_category_isSet;
}

bool OAIEntryForApiContract::is_event_category_Valid() const{
    return m_event_category_isValid;
}

qint32 OAIEntryForApiContract::getId() const {
    return m_id;
}
void OAIEntryForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEntryForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEntryForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

OAIEntryThumbForApiContract OAIEntryForApiContract::getMainPicture() const {
    return m_main_picture;
}
void OAIEntryForApiContract::setMainPicture(const OAIEntryThumbForApiContract &main_picture) {
    m_main_picture = main_picture;
    m_main_picture_isSet = true;
}

bool OAIEntryForApiContract::is_main_picture_Set() const{
    return m_main_picture_isSet;
}

bool OAIEntryForApiContract::is_main_picture_Valid() const{
    return m_main_picture_isValid;
}

QString OAIEntryForApiContract::getName() const {
    return m_name;
}
void OAIEntryForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntryForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntryForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILocalizedStringContract> OAIEntryForApiContract::getNames() const {
    return m_names;
}
void OAIEntryForApiContract::setNames(const QList<OAILocalizedStringContract> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIEntryForApiContract::is_names_Set() const{
    return m_names_isSet;
}

bool OAIEntryForApiContract::is_names_Valid() const{
    return m_names_isValid;
}

QList<OAIPVContract> OAIEntryForApiContract::getPvs() const {
    return m_pvs;
}
void OAIEntryForApiContract::setPvs(const QList<OAIPVContract> &pvs) {
    m_pvs = pvs;
    m_pvs_isSet = true;
}

bool OAIEntryForApiContract::is_pvs_Set() const{
    return m_pvs_isSet;
}

bool OAIEntryForApiContract::is_pvs_Valid() const{
    return m_pvs_isValid;
}

QString OAIEntryForApiContract::getReleaseEventSeriesName() const {
    return m_release_event_series_name;
}
void OAIEntryForApiContract::setReleaseEventSeriesName(const QString &release_event_series_name) {
    m_release_event_series_name = release_event_series_name;
    m_release_event_series_name_isSet = true;
}

bool OAIEntryForApiContract::is_release_event_series_name_Set() const{
    return m_release_event_series_name_isSet;
}

bool OAIEntryForApiContract::is_release_event_series_name_Valid() const{
    return m_release_event_series_name_isValid;
}

OAISongListFeaturedCategory OAIEntryForApiContract::getSongListFeaturedCategory() const {
    return m_song_list_featured_category;
}
void OAIEntryForApiContract::setSongListFeaturedCategory(const OAISongListFeaturedCategory &song_list_featured_category) {
    m_song_list_featured_category = song_list_featured_category;
    m_song_list_featured_category_isSet = true;
}

bool OAIEntryForApiContract::is_song_list_featured_category_Set() const{
    return m_song_list_featured_category_isSet;
}

bool OAIEntryForApiContract::is_song_list_featured_category_Valid() const{
    return m_song_list_featured_category_isValid;
}

OAISongType OAIEntryForApiContract::getSongType() const {
    return m_song_type;
}
void OAIEntryForApiContract::setSongType(const OAISongType &song_type) {
    m_song_type = song_type;
    m_song_type_isSet = true;
}

bool OAIEntryForApiContract::is_song_type_Set() const{
    return m_song_type_isSet;
}

bool OAIEntryForApiContract::is_song_type_Valid() const{
    return m_song_type_isValid;
}

OAIEntryStatus OAIEntryForApiContract::getStatus() const {
    return m_status;
}
void OAIEntryForApiContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEntryForApiContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEntryForApiContract::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEntryForApiContract::getTagCategoryName() const {
    return m_tag_category_name;
}
void OAIEntryForApiContract::setTagCategoryName(const QString &tag_category_name) {
    m_tag_category_name = tag_category_name;
    m_tag_category_name_isSet = true;
}

bool OAIEntryForApiContract::is_tag_category_name_Set() const{
    return m_tag_category_name_isSet;
}

bool OAIEntryForApiContract::is_tag_category_name_Valid() const{
    return m_tag_category_name_isValid;
}

QList<OAITagUsageForApiContract> OAIEntryForApiContract::getTags() const {
    return m_tags;
}
void OAIEntryForApiContract::setTags(const QList<OAITagUsageForApiContract> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIEntryForApiContract::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIEntryForApiContract::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIEntryForApiContract::getUrlSlug() const {
    return m_url_slug;
}
void OAIEntryForApiContract::setUrlSlug(const QString &url_slug) {
    m_url_slug = url_slug;
    m_url_slug_isSet = true;
}

bool OAIEntryForApiContract::is_url_slug_Set() const{
    return m_url_slug_isSet;
}

bool OAIEntryForApiContract::is_url_slug_Valid() const{
    return m_url_slug_isValid;
}

qint32 OAIEntryForApiContract::getVersion() const {
    return m_version;
}
void OAIEntryForApiContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEntryForApiContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEntryForApiContract::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIArchivedWebLinkContract> OAIEntryForApiContract::getWebLinks() const {
    return m_web_links;
}
void OAIEntryForApiContract::setWebLinks(const QList<OAIArchivedWebLinkContract> &web_links) {
    m_web_links = web_links;
    m_web_links_isSet = true;
}

bool OAIEntryForApiContract::is_web_links_Set() const{
    return m_web_links_isSet;
}

bool OAIEntryForApiContract::is_web_links_Valid() const{
    return m_web_links_isValid;
}

bool OAIEntryForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_name_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_event_series_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_list_featured_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
