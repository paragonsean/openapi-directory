/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReleaseEventApiApi_H
#define OAI_OAIReleaseEventApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlbumForApiContract.h"
#include "OAIAlbumOptionalFields.h"
#include "OAIContentLanguagePreference.h"
#include "OAIEntryStatus.h"
#include "OAIEventCategory.h"
#include "OAIEventReportType.h"
#include "OAIEventSortRule.h"
#include "OAINameMatchMode.h"
#include "OAIReleaseEventForApiContract.h"
#include "OAIReleaseEventForApiContractPartialFindResult.h"
#include "OAIReleaseEventOptionalFields.h"
#include "OAISongForApiContract.h"
#include "OAISongOptionalFields.h"
#include "OAISortDirection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReleaseEventApiApi : public QObject {
    Q_OBJECT

public:
    OAIReleaseEventApiApi(const int timeOut = 0);
    ~OAIReleaseEventApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  event_id qint32 [required]
    * @param[in]  fields OAIAlbumOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiReleaseEventsEventIdAlbumsGet(const qint32 &event_id, const ::OpenAPI::OptionalParam<OAIAlbumOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIAlbumOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  event_id qint32 [required]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiReleaseEventsEventIdPublishedSongsGet(const qint32 &event_id, const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  event_id qint32 [required]
    * @param[in]  report_type OAIEventReportType [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  version_number qint32 [optional]
    */
    virtual void apiReleaseEventsEventIdReportsPost(const qint32 &event_id, const ::OpenAPI::OptionalParam<OAIEventReportType> &report_type = ::OpenAPI::OptionalParam<OAIEventReportType>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  series_id qint32 [optional]
    * @param[in]  after_date QDateTime [optional]
    * @param[in]  before_date QDateTime [optional]
    * @param[in]  category OAIEventCategory [optional]
    * @param[in]  user_collection_id qint32 [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  child_tags bool [optional]
    * @param[in]  artist_id QList<qint32> [optional]
    * @param[in]  child_voicebanks bool [optional]
    * @param[in]  include_members bool [optional]
    * @param[in]  status OAIEntryStatus [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAIEventSortRule [optional]
    * @param[in]  fields OAIReleaseEventOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    * @param[in]  sort_direction OAISortDirection [optional]
    */
    virtual void apiReleaseEventsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<qint32> &series_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &after_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIEventCategory> &category = ::OpenAPI::OptionalParam<OAIEventCategory>(), const ::OpenAPI::OptionalParam<qint32> &user_collection_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_tags = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &artist_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_voicebanks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_members = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIEntryStatus> &status = ::OpenAPI::OptionalParam<OAIEntryStatus>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIEventSortRule> &sort = ::OpenAPI::OptionalParam<OAIEventSortRule>(), const ::OpenAPI::OptionalParam<OAIReleaseEventOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIReleaseEventOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>(), const ::OpenAPI::OptionalParam<OAISortDirection> &sort_direction = ::OpenAPI::OptionalParam<OAISortDirection>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  notes QString [optional]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void apiReleaseEventsIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAIReleaseEventOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiReleaseEventsIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIReleaseEventOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIReleaseEventOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void apiReleaseEventsNamesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiReleaseEventsEventIdAlbumsGetCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventsEventIdPublishedSongsGetCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventsEventIdReportsPostCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventsGetCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventsNamesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiReleaseEventsEventIdAlbumsGetSignal(QList<OAIAlbumForApiContract> summary);
    void apiReleaseEventsEventIdPublishedSongsGetSignal(QList<OAISongForApiContract> summary);
    void apiReleaseEventsEventIdReportsPostSignal();
    void apiReleaseEventsGetSignal(OAIReleaseEventForApiContractPartialFindResult summary);
    void apiReleaseEventsIdDeleteSignal();
    void apiReleaseEventsIdGetSignal(OAIReleaseEventForApiContract summary);
    void apiReleaseEventsNamesGetSignal(QList<QString> summary);


    void apiReleaseEventsEventIdAlbumsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbumForApiContract> summary);
    void apiReleaseEventsEventIdPublishedSongsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISongForApiContract> summary);
    void apiReleaseEventsEventIdReportsPostSignalFull(OAIHttpRequestWorker *worker);
    void apiReleaseEventsGetSignalFull(OAIHttpRequestWorker *worker, OAIReleaseEventForApiContractPartialFindResult summary);
    void apiReleaseEventsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiReleaseEventsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIReleaseEventForApiContract summary);
    void apiReleaseEventsNamesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use apiReleaseEventsEventIdAlbumsGetSignalError() instead")
    void apiReleaseEventsEventIdAlbumsGetSignalE(QList<OAIAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsEventIdAlbumsGetSignalError(QList<OAIAlbumForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsEventIdPublishedSongsGetSignalError() instead")
    void apiReleaseEventsEventIdPublishedSongsGetSignalE(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsEventIdPublishedSongsGetSignalError(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsEventIdReportsPostSignalError() instead")
    void apiReleaseEventsEventIdReportsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsEventIdReportsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsGetSignalError() instead")
    void apiReleaseEventsGetSignalE(OAIReleaseEventForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsGetSignalError(OAIReleaseEventForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsIdDeleteSignalError() instead")
    void apiReleaseEventsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsIdGetSignalError() instead")
    void apiReleaseEventsIdGetSignalE(OAIReleaseEventForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsIdGetSignalError(OAIReleaseEventForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsNamesGetSignalError() instead")
    void apiReleaseEventsNamesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsNamesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiReleaseEventsEventIdAlbumsGetSignalErrorFull() instead")
    void apiReleaseEventsEventIdAlbumsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsEventIdAlbumsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsEventIdPublishedSongsGetSignalErrorFull() instead")
    void apiReleaseEventsEventIdPublishedSongsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsEventIdPublishedSongsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsEventIdReportsPostSignalErrorFull() instead")
    void apiReleaseEventsEventIdReportsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsEventIdReportsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsGetSignalErrorFull() instead")
    void apiReleaseEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsIdDeleteSignalErrorFull() instead")
    void apiReleaseEventsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsIdGetSignalErrorFull() instead")
    void apiReleaseEventsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventsNamesGetSignalErrorFull() instead")
    void apiReleaseEventsNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventsNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
