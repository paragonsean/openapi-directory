/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseEventContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseEventContract::OAIReleaseEventContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseEventContract::OAIReleaseEventContract() {
    this->initializeModel();
}

OAIReleaseEventContract::~OAIReleaseEventContract() {}

void OAIReleaseEventContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_custom_name_isSet = false;
    m_custom_name_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_has_venue_or_venue_name_isSet = false;
    m_has_venue_or_venue_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inherited_category_isSet = false;
    m_inherited_category_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_picture_mime_isSet = false;
    m_picture_mime_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_song_list_isSet = false;
    m_song_list_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_slug_isSet = false;
    m_url_slug_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_venue_name_isSet = false;
    m_venue_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIReleaseEventContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseEventContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_custom_name_isValid = ::OpenAPI::fromJsonValue(m_custom_name, json[QString("customName")]);
    m_custom_name_isSet = !json[QString("customName")].isNull() && m_custom_name_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_has_venue_or_venue_name_isValid = ::OpenAPI::fromJsonValue(m_has_venue_or_venue_name, json[QString("hasVenueOrVenueName")]);
    m_has_venue_or_venue_name_isSet = !json[QString("hasVenueOrVenueName")].isNull() && m_has_venue_or_venue_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inherited_category_isValid = ::OpenAPI::fromJsonValue(m_inherited_category, json[QString("inheritedCategory")]);
    m_inherited_category_isSet = !json[QString("inheritedCategory")].isNull() && m_inherited_category_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_picture_mime_isValid = ::OpenAPI::fromJsonValue(m_picture_mime, json[QString("pictureMime")]);
    m_picture_mime_isSet = !json[QString("pictureMime")].isNull() && m_picture_mime_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_song_list_isValid = ::OpenAPI::fromJsonValue(m_song_list, json[QString("songList")]);
    m_song_list_isSet = !json[QString("songList")].isNull() && m_song_list_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_slug_isValid = ::OpenAPI::fromJsonValue(m_url_slug, json[QString("urlSlug")]);
    m_url_slug_isSet = !json[QString("urlSlug")].isNull() && m_url_slug_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_venue_name_isValid = ::OpenAPI::fromJsonValue(m_venue_name, json[QString("venueName")]);
    m_venue_name_isSet = !json[QString("venueName")].isNull() && m_venue_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIReleaseEventContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseEventContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_custom_name_isSet) {
        obj.insert(QString("customName"), ::OpenAPI::toJsonValue(m_custom_name));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_has_venue_or_venue_name_isSet) {
        obj.insert(QString("hasVenueOrVenueName"), ::OpenAPI::toJsonValue(m_has_venue_or_venue_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inherited_category.isSet()) {
        obj.insert(QString("inheritedCategory"), ::OpenAPI::toJsonValue(m_inherited_category));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_picture_mime_isSet) {
        obj.insert(QString("pictureMime"), ::OpenAPI::toJsonValue(m_picture_mime));
    }
    if (m_series.isSet()) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_song_list.isSet()) {
        obj.insert(QString("songList"), ::OpenAPI::toJsonValue(m_song_list));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_slug_isSet) {
        obj.insert(QString("urlSlug"), ::OpenAPI::toJsonValue(m_url_slug));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_venue_name_isSet) {
        obj.insert(QString("venueName"), ::OpenAPI::toJsonValue(m_venue_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIReleaseEventContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAIReleaseEventContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAIReleaseEventContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAIReleaseEventContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

OAIEventCategory OAIReleaseEventContract::getCategory() const {
    return m_category;
}
void OAIReleaseEventContract::setCategory(const OAIEventCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIReleaseEventContract::is_category_Set() const{
    return m_category_isSet;
}

bool OAIReleaseEventContract::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIReleaseEventContract::isCustomName() const {
    return m_custom_name;
}
void OAIReleaseEventContract::setCustomName(const bool &custom_name) {
    m_custom_name = custom_name;
    m_custom_name_isSet = true;
}

bool OAIReleaseEventContract::is_custom_name_Set() const{
    return m_custom_name_isSet;
}

bool OAIReleaseEventContract::is_custom_name_Valid() const{
    return m_custom_name_isValid;
}

QDateTime OAIReleaseEventContract::getDate() const {
    return m_date;
}
void OAIReleaseEventContract::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReleaseEventContract::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReleaseEventContract::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIReleaseEventContract::isDeleted() const {
    return m_deleted;
}
void OAIReleaseEventContract::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIReleaseEventContract::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIReleaseEventContract::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIReleaseEventContract::getDescription() const {
    return m_description;
}
void OAIReleaseEventContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReleaseEventContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReleaseEventContract::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIReleaseEventContract::getEndDate() const {
    return m_end_date;
}
void OAIReleaseEventContract::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIReleaseEventContract::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIReleaseEventContract::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIReleaseEventContract::isHasVenueOrVenueName() const {
    return m_has_venue_or_venue_name;
}
void OAIReleaseEventContract::setHasVenueOrVenueName(const bool &has_venue_or_venue_name) {
    m_has_venue_or_venue_name = has_venue_or_venue_name;
    m_has_venue_or_venue_name_isSet = true;
}

bool OAIReleaseEventContract::is_has_venue_or_venue_name_Set() const{
    return m_has_venue_or_venue_name_isSet;
}

bool OAIReleaseEventContract::is_has_venue_or_venue_name_Valid() const{
    return m_has_venue_or_venue_name_isValid;
}

qint32 OAIReleaseEventContract::getId() const {
    return m_id;
}
void OAIReleaseEventContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReleaseEventContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReleaseEventContract::is_id_Valid() const{
    return m_id_isValid;
}

OAIEventCategory OAIReleaseEventContract::getInheritedCategory() const {
    return m_inherited_category;
}
void OAIReleaseEventContract::setInheritedCategory(const OAIEventCategory &inherited_category) {
    m_inherited_category = inherited_category;
    m_inherited_category_isSet = true;
}

bool OAIReleaseEventContract::is_inherited_category_Set() const{
    return m_inherited_category_isSet;
}

bool OAIReleaseEventContract::is_inherited_category_Valid() const{
    return m_inherited_category_isValid;
}

QString OAIReleaseEventContract::getName() const {
    return m_name;
}
void OAIReleaseEventContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReleaseEventContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReleaseEventContract::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIReleaseEventContract::getPictureMime() const {
    return m_picture_mime;
}
void OAIReleaseEventContract::setPictureMime(const QString &picture_mime) {
    m_picture_mime = picture_mime;
    m_picture_mime_isSet = true;
}

bool OAIReleaseEventContract::is_picture_mime_Set() const{
    return m_picture_mime_isSet;
}

bool OAIReleaseEventContract::is_picture_mime_Valid() const{
    return m_picture_mime_isValid;
}

OAIReleaseEventSeriesContract OAIReleaseEventContract::getSeries() const {
    return m_series;
}
void OAIReleaseEventContract::setSeries(const OAIReleaseEventSeriesContract &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIReleaseEventContract::is_series_Set() const{
    return m_series_isSet;
}

bool OAIReleaseEventContract::is_series_Valid() const{
    return m_series_isValid;
}

OAISongListBaseContract OAIReleaseEventContract::getSongList() const {
    return m_song_list;
}
void OAIReleaseEventContract::setSongList(const OAISongListBaseContract &song_list) {
    m_song_list = song_list;
    m_song_list_isSet = true;
}

bool OAIReleaseEventContract::is_song_list_Set() const{
    return m_song_list_isSet;
}

bool OAIReleaseEventContract::is_song_list_Valid() const{
    return m_song_list_isValid;
}

OAIEntryStatus OAIReleaseEventContract::getStatus() const {
    return m_status;
}
void OAIReleaseEventContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReleaseEventContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReleaseEventContract::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReleaseEventContract::getUrlSlug() const {
    return m_url_slug;
}
void OAIReleaseEventContract::setUrlSlug(const QString &url_slug) {
    m_url_slug = url_slug;
    m_url_slug_isSet = true;
}

bool OAIReleaseEventContract::is_url_slug_Set() const{
    return m_url_slug_isSet;
}

bool OAIReleaseEventContract::is_url_slug_Valid() const{
    return m_url_slug_isValid;
}

OAIVenueContract OAIReleaseEventContract::getVenue() const {
    return m_venue;
}
void OAIReleaseEventContract::setVenue(const OAIVenueContract &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIReleaseEventContract::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIReleaseEventContract::is_venue_Valid() const{
    return m_venue_isValid;
}

QString OAIReleaseEventContract::getVenueName() const {
    return m_venue_name;
}
void OAIReleaseEventContract::setVenueName(const QString &venue_name) {
    m_venue_name = venue_name;
    m_venue_name_isSet = true;
}

bool OAIReleaseEventContract::is_venue_name_Set() const{
    return m_venue_name_isSet;
}

bool OAIReleaseEventContract::is_venue_name_Valid() const{
    return m_venue_name_isValid;
}

qint32 OAIReleaseEventContract::getVersion() const {
    return m_version;
}
void OAIReleaseEventContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIReleaseEventContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAIReleaseEventContract::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIReleaseEventContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_venue_or_venue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherited_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_mime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseEventContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
