/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITagApiApi_H
#define OAI_OAITagApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommentForApiContract.h"
#include "OAICommentForApiContractPartialFindResult.h"
#include "OAIContentLanguagePreference.h"
#include "OAIEntryType.h"
#include "OAINameMatchMode.h"
#include "OAITagBaseContract.h"
#include "OAITagForApiContract.h"
#include "OAITagForApiContractPartialFindResult.h"
#include "OAITagOptionalFields.h"
#include "OAITagReportType.h"
#include "OAITagSortRule.h"
#include "OAITagTargetTypes.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITagApiApi : public QObject {
    Q_OBJECT

public:
    OAITagApiApi(const int timeOut = 0);
    ~OAITagApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  fields OAITagOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    Q_DECL_DEPRECATED virtual void apiTagsByNameNameGet(const QString &name, const ::OpenAPI::OptionalParam<OAITagOptionalFields> &fields = ::OpenAPI::OptionalParam<OAITagOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    */
    virtual void apiTagsCategoryNamesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>());

    /**
    * @param[in]  comment_id qint32 [required]
    */
    virtual void apiTagsCommentsCommentIdDelete(const qint32 &comment_id);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiTagsCommentsCommentIdPost(const qint32 &comment_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  allow_children bool [optional]
    * @param[in]  category_name QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  sort OAITagSortRule [optional]
    * @param[in]  prefer_accurate_matches bool [optional]
    * @param[in]  fields OAITagOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    * @param[in]  target OAITagTargetTypes [optional]
    */
    virtual void apiTagsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAITagSortRule> &sort = ::OpenAPI::OptionalParam<OAITagSortRule>(), const ::OpenAPI::OptionalParam<bool> &prefer_accurate_matches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAITagOptionalFields> &fields = ::OpenAPI::OptionalParam<OAITagOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>(), const ::OpenAPI::OptionalParam<OAITagTargetTypes> &target = ::OpenAPI::OptionalParam<OAITagTargetTypes>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  notes QString [optional]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void apiTagsIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAITagOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiTagsIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAITagOptionalFields> &fields = ::OpenAPI::OptionalParam<OAITagOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  allow_aliases bool [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void apiTagsNamesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_aliases = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [optional]
    */
    virtual void apiTagsPost(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag_id qint32 [required]
    * @param[in]  fields OAITagOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiTagsTagIdChildrenGet(const qint32 &tag_id, const ::OpenAPI::OptionalParam<OAITagOptionalFields> &fields = ::OpenAPI::OptionalParam<OAITagOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  tag_id qint32 [required]
    */
    virtual void apiTagsTagIdCommentsGet(const qint32 &tag_id);

    /**
    * @param[in]  tag_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiTagsTagIdCommentsPost(const qint32 &tag_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  tag_id qint32 [required]
    * @param[in]  report_type OAITagReportType [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  version_number qint32 [optional]
    */
    virtual void apiTagsTagIdReportsPost(const qint32 &tag_id, const ::OpenAPI::OptionalParam<OAITagReportType> &report_type = ::OpenAPI::OptionalParam<OAITagReportType>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  category_name QString [optional]
    * @param[in]  entry_type OAIEntryType [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiTagsTopGet(const ::OpenAPI::OptionalParam<QString> &category_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEntryType> &entry_type = ::OpenAPI::OptionalParam<OAIEntryType>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiTagsByNameNameGetCallback(OAIHttpRequestWorker *worker);
    void apiTagsCategoryNamesGetCallback(OAIHttpRequestWorker *worker);
    void apiTagsCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTagsCommentsCommentIdPostCallback(OAIHttpRequestWorker *worker);
    void apiTagsGetCallback(OAIHttpRequestWorker *worker);
    void apiTagsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiTagsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiTagsNamesGetCallback(OAIHttpRequestWorker *worker);
    void apiTagsPostCallback(OAIHttpRequestWorker *worker);
    void apiTagsTagIdChildrenGetCallback(OAIHttpRequestWorker *worker);
    void apiTagsTagIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void apiTagsTagIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void apiTagsTagIdReportsPostCallback(OAIHttpRequestWorker *worker);
    void apiTagsTopGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiTagsByNameNameGetSignal(OAITagForApiContract summary);
    void apiTagsCategoryNamesGetSignal(QList<QString> summary);
    void apiTagsCommentsCommentIdDeleteSignal();
    void apiTagsCommentsCommentIdPostSignal();
    void apiTagsGetSignal(OAITagForApiContractPartialFindResult summary);
    void apiTagsIdDeleteSignal();
    void apiTagsIdGetSignal(OAITagForApiContract summary);
    void apiTagsNamesGetSignal(QList<QString> summary);
    void apiTagsPostSignal(OAITagBaseContract summary);
    void apiTagsTagIdChildrenGetSignal(QList<OAITagForApiContract> summary);
    void apiTagsTagIdCommentsGetSignal(OAICommentForApiContractPartialFindResult summary);
    void apiTagsTagIdCommentsPostSignal(OAICommentForApiContract summary);
    void apiTagsTagIdReportsPostSignal();
    void apiTagsTopGetSignal(QList<OAITagBaseContract> summary);


    void apiTagsByNameNameGetSignalFull(OAIHttpRequestWorker *worker, OAITagForApiContract summary);
    void apiTagsCategoryNamesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiTagsCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTagsCommentsCommentIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiTagsGetSignalFull(OAIHttpRequestWorker *worker, OAITagForApiContractPartialFindResult summary);
    void apiTagsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiTagsIdGetSignalFull(OAIHttpRequestWorker *worker, OAITagForApiContract summary);
    void apiTagsNamesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiTagsPostSignalFull(OAIHttpRequestWorker *worker, OAITagBaseContract summary);
    void apiTagsTagIdChildrenGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagForApiContract> summary);
    void apiTagsTagIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContractPartialFindResult summary);
    void apiTagsTagIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContract summary);
    void apiTagsTagIdReportsPostSignalFull(OAIHttpRequestWorker *worker);
    void apiTagsTopGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagBaseContract> summary);

    Q_DECL_DEPRECATED_X("Use apiTagsByNameNameGetSignalError() instead")
    void apiTagsByNameNameGetSignalE(OAITagForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsByNameNameGetSignalError(OAITagForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsCategoryNamesGetSignalError() instead")
    void apiTagsCategoryNamesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsCategoryNamesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsCommentsCommentIdDeleteSignalError() instead")
    void apiTagsCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsCommentsCommentIdPostSignalError() instead")
    void apiTagsCommentsCommentIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsCommentsCommentIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsGetSignalError() instead")
    void apiTagsGetSignalE(OAITagForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsGetSignalError(OAITagForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsIdDeleteSignalError() instead")
    void apiTagsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsIdGetSignalError() instead")
    void apiTagsIdGetSignalE(OAITagForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsIdGetSignalError(OAITagForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsNamesGetSignalError() instead")
    void apiTagsNamesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsNamesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsPostSignalError() instead")
    void apiTagsPostSignalE(OAITagBaseContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsPostSignalError(OAITagBaseContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdChildrenGetSignalError() instead")
    void apiTagsTagIdChildrenGetSignalE(QList<OAITagForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdChildrenGetSignalError(QList<OAITagForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdCommentsGetSignalError() instead")
    void apiTagsTagIdCommentsGetSignalE(OAICommentForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdCommentsGetSignalError(OAICommentForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdCommentsPostSignalError() instead")
    void apiTagsTagIdCommentsPostSignalE(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdCommentsPostSignalError(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdReportsPostSignalError() instead")
    void apiTagsTagIdReportsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdReportsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTopGetSignalError() instead")
    void apiTagsTopGetSignalE(QList<OAITagBaseContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTopGetSignalError(QList<OAITagBaseContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiTagsByNameNameGetSignalErrorFull() instead")
    void apiTagsByNameNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsByNameNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsCategoryNamesGetSignalErrorFull() instead")
    void apiTagsCategoryNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsCategoryNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsCommentsCommentIdDeleteSignalErrorFull() instead")
    void apiTagsCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsCommentsCommentIdPostSignalErrorFull() instead")
    void apiTagsCommentsCommentIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsCommentsCommentIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsGetSignalErrorFull() instead")
    void apiTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsIdDeleteSignalErrorFull() instead")
    void apiTagsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsIdGetSignalErrorFull() instead")
    void apiTagsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsNamesGetSignalErrorFull() instead")
    void apiTagsNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsPostSignalErrorFull() instead")
    void apiTagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdChildrenGetSignalErrorFull() instead")
    void apiTagsTagIdChildrenGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdChildrenGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdCommentsGetSignalErrorFull() instead")
    void apiTagsTagIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdCommentsPostSignalErrorFull() instead")
    void apiTagsTagIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTagIdReportsPostSignalErrorFull() instead")
    void apiTagsTagIdReportsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTagIdReportsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiTagsTopGetSignalErrorFull() instead")
    void apiTagsTopGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiTagsTopGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
