/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtistEventRoles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtistEventRoles::OAIArtistEventRoles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtistEventRoles::OAIArtistEventRoles() {
    this->initializeModel();
}

OAIArtistEventRoles::~OAIArtistEventRoles() {}

void OAIArtistEventRoles::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArtistEventRoles::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArtistEventRoles::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Default", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Dancer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::DANCER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DJ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::DJ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Instrumentalist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::INSTRUMENTALIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Organizer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::ORGANIZER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Promoter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::PROMOTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VJ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::VJ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vocalist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::VOCALIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VoiceManipulator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::VOICEMANIPULATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherPerformer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::OTHERPERFORMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistEventRoles::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArtistEventRoles::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArtistEventRoles::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArtistEventRoles::DEFAULT:
            val = "Default";
            break;
        case eOAIArtistEventRoles::DANCER:
            val = "Dancer";
            break;
        case eOAIArtistEventRoles::DJ:
            val = "DJ";
            break;
        case eOAIArtistEventRoles::INSTRUMENTALIST:
            val = "Instrumentalist";
            break;
        case eOAIArtistEventRoles::ORGANIZER:
            val = "Organizer";
            break;
        case eOAIArtistEventRoles::PROMOTER:
            val = "Promoter";
            break;
        case eOAIArtistEventRoles::VJ:
            val = "VJ";
            break;
        case eOAIArtistEventRoles::VOCALIST:
            val = "Vocalist";
            break;
        case eOAIArtistEventRoles::VOICEMANIPULATOR:
            val = "VoiceManipulator";
            break;
        case eOAIArtistEventRoles::OTHERPERFORMER:
            val = "OtherPerformer";
            break;
        case eOAIArtistEventRoles::OTHER:
            val = "Other";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArtistEventRoles::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArtistEventRoles::eOAIArtistEventRoles OAIArtistEventRoles::getValue() const {
    return m_value;
}

void OAIArtistEventRoles::setValue(const OAIArtistEventRoles::eOAIArtistEventRoles& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArtistEventRoles::isSet() const {
    
    return m_value_isSet;
}

bool OAIArtistEventRoles::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
