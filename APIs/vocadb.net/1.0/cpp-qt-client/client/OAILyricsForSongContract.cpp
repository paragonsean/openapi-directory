/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILyricsForSongContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILyricsForSongContract::OAILyricsForSongContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILyricsForSongContract::OAILyricsForSongContract() {
    this->initializeModel();
}

OAILyricsForSongContract::~OAILyricsForSongContract() {}

void OAILyricsForSongContract::initializeModel() {

    m_culture_code_isSet = false;
    m_culture_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_translation_type_isSet = false;
    m_translation_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILyricsForSongContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILyricsForSongContract::fromJsonObject(QJsonObject json) {

    m_culture_code_isValid = ::OpenAPI::fromJsonValue(m_culture_code, json[QString("cultureCode")]);
    m_culture_code_isSet = !json[QString("cultureCode")].isNull() && m_culture_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_translation_type_isValid = ::OpenAPI::fromJsonValue(m_translation_type, json[QString("translationType")]);
    m_translation_type_isSet = !json[QString("translationType")].isNull() && m_translation_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILyricsForSongContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILyricsForSongContract::asJsonObject() const {
    QJsonObject obj;
    if (m_culture_code_isSet) {
        obj.insert(QString("cultureCode"), ::OpenAPI::toJsonValue(m_culture_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_translation_type.isSet()) {
        obj.insert(QString("translationType"), ::OpenAPI::toJsonValue(m_translation_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAILyricsForSongContract::getCultureCode() const {
    return m_culture_code;
}
void OAILyricsForSongContract::setCultureCode(const QString &culture_code) {
    m_culture_code = culture_code;
    m_culture_code_isSet = true;
}

bool OAILyricsForSongContract::is_culture_code_Set() const{
    return m_culture_code_isSet;
}

bool OAILyricsForSongContract::is_culture_code_Valid() const{
    return m_culture_code_isValid;
}

qint32 OAILyricsForSongContract::getId() const {
    return m_id;
}
void OAILyricsForSongContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILyricsForSongContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAILyricsForSongContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILyricsForSongContract::getSource() const {
    return m_source;
}
void OAILyricsForSongContract::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILyricsForSongContract::is_source_Set() const{
    return m_source_isSet;
}

bool OAILyricsForSongContract::is_source_Valid() const{
    return m_source_isValid;
}

OAITranslationType OAILyricsForSongContract::getTranslationType() const {
    return m_translation_type;
}
void OAILyricsForSongContract::setTranslationType(const OAITranslationType &translation_type) {
    m_translation_type = translation_type;
    m_translation_type_isSet = true;
}

bool OAILyricsForSongContract::is_translation_type_Set() const{
    return m_translation_type_isSet;
}

bool OAILyricsForSongContract::is_translation_type_Valid() const{
    return m_translation_type_isValid;
}

QString OAILyricsForSongContract::getUrl() const {
    return m_url;
}
void OAILyricsForSongContract::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILyricsForSongContract::is_url_Set() const{
    return m_url_isSet;
}

bool OAILyricsForSongContract::is_url_Valid() const{
    return m_url_isValid;
}

QString OAILyricsForSongContract::getValue() const {
    return m_value;
}
void OAILyricsForSongContract::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILyricsForSongContract::is_value_Set() const{
    return m_value_isSet;
}

bool OAILyricsForSongContract::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILyricsForSongContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_culture_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILyricsForSongContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
