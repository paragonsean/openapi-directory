/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserKnownLanguageContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserKnownLanguageContract::OAIUserKnownLanguageContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserKnownLanguageContract::OAIUserKnownLanguageContract() {
    this->initializeModel();
}

OAIUserKnownLanguageContract::~OAIUserKnownLanguageContract() {}

void OAIUserKnownLanguageContract::initializeModel() {

    m_culture_code_isSet = false;
    m_culture_code_isValid = false;

    m_proficiency_isSet = false;
    m_proficiency_isValid = false;
}

void OAIUserKnownLanguageContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserKnownLanguageContract::fromJsonObject(QJsonObject json) {

    m_culture_code_isValid = ::OpenAPI::fromJsonValue(m_culture_code, json[QString("cultureCode")]);
    m_culture_code_isSet = !json[QString("cultureCode")].isNull() && m_culture_code_isValid;

    m_proficiency_isValid = ::OpenAPI::fromJsonValue(m_proficiency, json[QString("proficiency")]);
    m_proficiency_isSet = !json[QString("proficiency")].isNull() && m_proficiency_isValid;
}

QString OAIUserKnownLanguageContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserKnownLanguageContract::asJsonObject() const {
    QJsonObject obj;
    if (m_culture_code_isSet) {
        obj.insert(QString("cultureCode"), ::OpenAPI::toJsonValue(m_culture_code));
    }
    if (m_proficiency.isSet()) {
        obj.insert(QString("proficiency"), ::OpenAPI::toJsonValue(m_proficiency));
    }
    return obj;
}

QString OAIUserKnownLanguageContract::getCultureCode() const {
    return m_culture_code;
}
void OAIUserKnownLanguageContract::setCultureCode(const QString &culture_code) {
    m_culture_code = culture_code;
    m_culture_code_isSet = true;
}

bool OAIUserKnownLanguageContract::is_culture_code_Set() const{
    return m_culture_code_isSet;
}

bool OAIUserKnownLanguageContract::is_culture_code_Valid() const{
    return m_culture_code_isValid;
}

OAIUserLanguageProficiency OAIUserKnownLanguageContract::getProficiency() const {
    return m_proficiency;
}
void OAIUserKnownLanguageContract::setProficiency(const OAIUserLanguageProficiency &proficiency) {
    m_proficiency = proficiency;
    m_proficiency_isSet = true;
}

bool OAIUserKnownLanguageContract::is_proficiency_Set() const{
    return m_proficiency_isSet;
}

bool OAIUserKnownLanguageContract::is_proficiency_Valid() const{
    return m_proficiency_isValid;
}

bool OAIUserKnownLanguageContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_culture_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proficiency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserKnownLanguageContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
