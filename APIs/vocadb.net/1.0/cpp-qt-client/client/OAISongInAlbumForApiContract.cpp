/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISongInAlbumForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISongInAlbumForApiContract::OAISongInAlbumForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISongInAlbumForApiContract::OAISongInAlbumForApiContract() {
    this->initializeModel();
}

OAISongInAlbumForApiContract::~OAISongInAlbumForApiContract() {}

void OAISongInAlbumForApiContract::initializeModel() {

    m_disc_number_isSet = false;
    m_disc_number_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;

    m_track_number_isSet = false;
    m_track_number_isValid = false;
}

void OAISongInAlbumForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISongInAlbumForApiContract::fromJsonObject(QJsonObject json) {

    m_disc_number_isValid = ::OpenAPI::fromJsonValue(m_disc_number, json[QString("discNumber")]);
    m_disc_number_isSet = !json[QString("discNumber")].isNull() && m_disc_number_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_song_isValid = ::OpenAPI::fromJsonValue(m_song, json[QString("song")]);
    m_song_isSet = !json[QString("song")].isNull() && m_song_isValid;

    m_track_number_isValid = ::OpenAPI::fromJsonValue(m_track_number, json[QString("trackNumber")]);
    m_track_number_isSet = !json[QString("trackNumber")].isNull() && m_track_number_isValid;
}

QString OAISongInAlbumForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISongInAlbumForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_disc_number_isSet) {
        obj.insert(QString("discNumber"), ::OpenAPI::toJsonValue(m_disc_number));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_song.isSet()) {
        obj.insert(QString("song"), ::OpenAPI::toJsonValue(m_song));
    }
    if (m_track_number_isSet) {
        obj.insert(QString("trackNumber"), ::OpenAPI::toJsonValue(m_track_number));
    }
    return obj;
}

qint32 OAISongInAlbumForApiContract::getDiscNumber() const {
    return m_disc_number;
}
void OAISongInAlbumForApiContract::setDiscNumber(const qint32 &disc_number) {
    m_disc_number = disc_number;
    m_disc_number_isSet = true;
}

bool OAISongInAlbumForApiContract::is_disc_number_Set() const{
    return m_disc_number_isSet;
}

bool OAISongInAlbumForApiContract::is_disc_number_Valid() const{
    return m_disc_number_isValid;
}

qint32 OAISongInAlbumForApiContract::getId() const {
    return m_id;
}
void OAISongInAlbumForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISongInAlbumForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAISongInAlbumForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISongInAlbumForApiContract::getName() const {
    return m_name;
}
void OAISongInAlbumForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISongInAlbumForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAISongInAlbumForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

OAISongVoteRating OAISongInAlbumForApiContract::getRating() const {
    return m_rating;
}
void OAISongInAlbumForApiContract::setRating(const OAISongVoteRating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAISongInAlbumForApiContract::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAISongInAlbumForApiContract::is_rating_Valid() const{
    return m_rating_isValid;
}

OAISongForApiContract OAISongInAlbumForApiContract::getSong() const {
    return m_song;
}
void OAISongInAlbumForApiContract::setSong(const OAISongForApiContract &song) {
    m_song = song;
    m_song_isSet = true;
}

bool OAISongInAlbumForApiContract::is_song_Set() const{
    return m_song_isSet;
}

bool OAISongInAlbumForApiContract::is_song_Valid() const{
    return m_song_isValid;
}

qint32 OAISongInAlbumForApiContract::getTrackNumber() const {
    return m_track_number;
}
void OAISongInAlbumForApiContract::setTrackNumber(const qint32 &track_number) {
    m_track_number = track_number;
    m_track_number_isSet = true;
}

bool OAISongInAlbumForApiContract::is_track_number_Set() const{
    return m_track_number_isSet;
}

bool OAISongInAlbumForApiContract::is_track_number_Valid() const{
    return m_track_number_isValid;
}

bool OAISongInAlbumForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_song.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISongInAlbumForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
