/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISongApiApi_H
#define OAI_OAISongApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvancedSearchFilterParams.h"
#include "OAIArtistAlbumParticipationStatus.h"
#include "OAICommentForApiContract.h"
#include "OAIContentLanguagePreference.h"
#include "OAIEntryStatus.h"
#include "OAILyricsForSongContract.h"
#include "OAINameMatchMode.h"
#include "OAIPVService.h"
#include "OAIPVServices.h"
#include "OAIRatedSongForUserForApiContract.h"
#include "OAIRelatedSongsContract.h"
#include "OAISongForApiContract.h"
#include "OAISongForApiContractPartialFindResult.h"
#include "OAISongOptionalFields.h"
#include "OAISongRatingContract.h"
#include "OAISongSortRule.h"
#include "OAISongVocalistSelection.h"
#include "OAITopSongsDateFilterType.h"
#include "OAIUserOptionalFields.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISongApiApi : public QObject {
    Q_OBJECT

public:
    OAISongApiApi(const int timeOut = 0);
    ~OAISongApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pv_service OAIPVService [optional]
    * @param[in]  pv_id QString [optional]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiSongsByPvGet(const ::OpenAPI::OptionalParam<OAIPVService> &pv_service = ::OpenAPI::OptionalParam<OAIPVService>(), const ::OpenAPI::OptionalParam<QString> &pv_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  comment_id qint32 [required]
    */
    virtual void apiSongsCommentsCommentIdDelete(const qint32 &comment_id);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiSongsCommentsCommentIdPost(const qint32 &comment_id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  song_types QString [optional]
    * @param[in]  after_date QDateTime [optional]
    * @param[in]  before_date QDateTime [optional]
    * @param[in]  tag_name QList<QString> [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  child_tags bool [optional]
    * @param[in]  unify_types_and_tags bool [optional]
    * @param[in]  artist_id QList<qint32> [optional]
    * @param[in]  artist_participation_status OAIArtistAlbumParticipationStatus [optional]
    * @param[in]  child_voicebanks bool [optional]
    * @param[in]  include_members bool [optional]
    * @param[in]  only_with_pvs bool [optional]
    * @param[in]  pv_services OAIPVServices [optional]
    * @param[in]  since qint32 [optional]
    * @param[in]  min_score qint32 [optional]
    * @param[in]  user_collection_id qint32 [optional]
    * @param[in]  release_event_id qint32 [optional]
    * @param[in]  parent_song_id qint32 [optional]
    * @param[in]  status OAIEntryStatus [optional]
    * @param[in]  advanced_filters QList<OAIAdvancedSearchFilterParams> [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  sort OAISongSortRule [optional]
    * @param[in]  prefer_accurate_matches bool [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    * @param[in]  min_milli_bpm qint32 [optional]
    * @param[in]  max_milli_bpm qint32 [optional]
    * @param[in]  min_length qint32 [optional]
    * @param[in]  max_length qint32 [optional]
    */
    virtual void apiSongsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &song_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &after_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &child_tags = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &unify_types_and_tags = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &artist_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIArtistAlbumParticipationStatus> &artist_participation_status = ::OpenAPI::OptionalParam<OAIArtistAlbumParticipationStatus>(), const ::OpenAPI::OptionalParam<bool> &child_voicebanks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_members = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_with_pvs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPVServices> &pv_services = ::OpenAPI::OptionalParam<OAIPVServices>(), const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_score = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_collection_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &release_event_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &parent_song_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEntryStatus> &status = ::OpenAPI::OptionalParam<OAIEntryStatus>(), const ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>> &advanced_filters = ::OpenAPI::OptionalParam<QList<OAIAdvancedSearchFilterParams>>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAISongSortRule> &sort = ::OpenAPI::OptionalParam<OAISongSortRule>(), const ::OpenAPI::OptionalParam<bool> &prefer_accurate_matches = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>(), const ::OpenAPI::OptionalParam<qint32> &min_milli_bpm = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_milli_bpm = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  language_preference OAIContentLanguagePreference [optional]
    * @param[in]  fields OAISongOptionalFields [optional]
    */
    virtual void apiSongsHighlightedGet(const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &language_preference = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>(), const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiSongsIdCommentsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_comment_for_api_contract OAICommentForApiContract [optional]
    */
    virtual void apiSongsIdCommentsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAICommentForApiContract> &oai_comment_for_api_contract = ::OpenAPI::OptionalParam<OAICommentForApiContract>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  notes QString [optional]
    */
    virtual void apiSongsIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiSongsIdDerivedGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiSongsIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  user_fields OAIUserOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiSongsIdRatingsGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIUserOptionalFields> &user_fields = ::OpenAPI::OptionalParam<OAIUserOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_song_rating_contract OAISongRatingContract [optional]
    */
    virtual void apiSongsIdRatingsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAISongRatingContract> &oai_song_rating_contract = ::OpenAPI::OptionalParam<OAISongRatingContract>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiSongsIdRelatedGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  lyrics_id qint32 [required]
    */
    virtual void apiSongsLyricsLyricsIdGet(const qint32 &lyrics_id);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void apiSongsNamesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  duration_hours qint32 [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  filter_by OAITopSongsDateFilterType [optional]
    * @param[in]  vocalist OAISongVocalistSelection [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  fields OAISongOptionalFields [optional]
    * @param[in]  language_preference OAIContentLanguagePreference [optional]
    */
    virtual void apiSongsTopRatedGet(const ::OpenAPI::OptionalParam<qint32> &duration_hours = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAITopSongsDateFilterType> &filter_by = ::OpenAPI::OptionalParam<OAITopSongsDateFilterType>(), const ::OpenAPI::OptionalParam<OAISongVocalistSelection> &vocalist = ::OpenAPI::OptionalParam<OAISongVocalistSelection>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISongOptionalFields> &fields = ::OpenAPI::OptionalParam<OAISongOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &language_preference = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiSongsByPvGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiSongsCommentsCommentIdPostCallback(OAIHttpRequestWorker *worker);
    void apiSongsGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsHighlightedGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdDerivedGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdRatingsGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdRatingsPostCallback(OAIHttpRequestWorker *worker);
    void apiSongsIdRelatedGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsLyricsLyricsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsNamesGetCallback(OAIHttpRequestWorker *worker);
    void apiSongsTopRatedGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiSongsByPvGetSignal(OAISongForApiContract summary);
    void apiSongsCommentsCommentIdDeleteSignal();
    void apiSongsCommentsCommentIdPostSignal();
    void apiSongsGetSignal(OAISongForApiContractPartialFindResult summary);
    void apiSongsHighlightedGetSignal(QList<OAISongForApiContract> summary);
    void apiSongsIdCommentsGetSignal(QList<OAICommentForApiContract> summary);
    void apiSongsIdCommentsPostSignal(OAICommentForApiContract summary);
    void apiSongsIdDeleteSignal();
    void apiSongsIdDerivedGetSignal(QList<OAISongForApiContract> summary);
    void apiSongsIdGetSignal(OAISongForApiContract summary);
    void apiSongsIdRatingsGetSignal(QList<OAIRatedSongForUserForApiContract> summary);
    void apiSongsIdRatingsPostSignal();
    void apiSongsIdRelatedGetSignal(OAIRelatedSongsContract summary);
    void apiSongsLyricsLyricsIdGetSignal(OAILyricsForSongContract summary);
    void apiSongsNamesGetSignal(QList<QString> summary);
    void apiSongsTopRatedGetSignal(QList<OAISongForApiContract> summary);


    void apiSongsByPvGetSignalFull(OAIHttpRequestWorker *worker, OAISongForApiContract summary);
    void apiSongsCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiSongsCommentsCommentIdPostSignalFull(OAIHttpRequestWorker *worker);
    void apiSongsGetSignalFull(OAIHttpRequestWorker *worker, OAISongForApiContractPartialFindResult summary);
    void apiSongsHighlightedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISongForApiContract> summary);
    void apiSongsIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICommentForApiContract> summary);
    void apiSongsIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAICommentForApiContract summary);
    void apiSongsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiSongsIdDerivedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISongForApiContract> summary);
    void apiSongsIdGetSignalFull(OAIHttpRequestWorker *worker, OAISongForApiContract summary);
    void apiSongsIdRatingsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRatedSongForUserForApiContract> summary);
    void apiSongsIdRatingsPostSignalFull(OAIHttpRequestWorker *worker);
    void apiSongsIdRelatedGetSignalFull(OAIHttpRequestWorker *worker, OAIRelatedSongsContract summary);
    void apiSongsLyricsLyricsIdGetSignalFull(OAIHttpRequestWorker *worker, OAILyricsForSongContract summary);
    void apiSongsNamesGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiSongsTopRatedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISongForApiContract> summary);

    Q_DECL_DEPRECATED_X("Use apiSongsByPvGetSignalError() instead")
    void apiSongsByPvGetSignalE(OAISongForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsByPvGetSignalError(OAISongForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsCommentsCommentIdDeleteSignalError() instead")
    void apiSongsCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsCommentsCommentIdPostSignalError() instead")
    void apiSongsCommentsCommentIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsCommentsCommentIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsGetSignalError() instead")
    void apiSongsGetSignalE(OAISongForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsGetSignalError(OAISongForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsHighlightedGetSignalError() instead")
    void apiSongsHighlightedGetSignalE(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsHighlightedGetSignalError(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdCommentsGetSignalError() instead")
    void apiSongsIdCommentsGetSignalE(QList<OAICommentForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdCommentsGetSignalError(QList<OAICommentForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdCommentsPostSignalError() instead")
    void apiSongsIdCommentsPostSignalE(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdCommentsPostSignalError(OAICommentForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdDeleteSignalError() instead")
    void apiSongsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdDerivedGetSignalError() instead")
    void apiSongsIdDerivedGetSignalE(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdDerivedGetSignalError(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdGetSignalError() instead")
    void apiSongsIdGetSignalE(OAISongForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdGetSignalError(OAISongForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdRatingsGetSignalError() instead")
    void apiSongsIdRatingsGetSignalE(QList<OAIRatedSongForUserForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdRatingsGetSignalError(QList<OAIRatedSongForUserForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdRatingsPostSignalError() instead")
    void apiSongsIdRatingsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdRatingsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdRelatedGetSignalError() instead")
    void apiSongsIdRelatedGetSignalE(OAIRelatedSongsContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdRelatedGetSignalError(OAIRelatedSongsContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsLyricsLyricsIdGetSignalError() instead")
    void apiSongsLyricsLyricsIdGetSignalE(OAILyricsForSongContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsLyricsLyricsIdGetSignalError(OAILyricsForSongContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsNamesGetSignalError() instead")
    void apiSongsNamesGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsNamesGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsTopRatedGetSignalError() instead")
    void apiSongsTopRatedGetSignalE(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsTopRatedGetSignalError(QList<OAISongForApiContract> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiSongsByPvGetSignalErrorFull() instead")
    void apiSongsByPvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsByPvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsCommentsCommentIdDeleteSignalErrorFull() instead")
    void apiSongsCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsCommentsCommentIdPostSignalErrorFull() instead")
    void apiSongsCommentsCommentIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsCommentsCommentIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsGetSignalErrorFull() instead")
    void apiSongsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsHighlightedGetSignalErrorFull() instead")
    void apiSongsHighlightedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsHighlightedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdCommentsGetSignalErrorFull() instead")
    void apiSongsIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdCommentsPostSignalErrorFull() instead")
    void apiSongsIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdDeleteSignalErrorFull() instead")
    void apiSongsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdDerivedGetSignalErrorFull() instead")
    void apiSongsIdDerivedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdDerivedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdGetSignalErrorFull() instead")
    void apiSongsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdRatingsGetSignalErrorFull() instead")
    void apiSongsIdRatingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdRatingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdRatingsPostSignalErrorFull() instead")
    void apiSongsIdRatingsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdRatingsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsIdRelatedGetSignalErrorFull() instead")
    void apiSongsIdRelatedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsIdRelatedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsLyricsLyricsIdGetSignalErrorFull() instead")
    void apiSongsLyricsLyricsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsLyricsLyricsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsNamesGetSignalErrorFull() instead")
    void apiSongsNamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsNamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiSongsTopRatedGetSignalErrorFull() instead")
    void apiSongsTopRatedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiSongsTopRatedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
