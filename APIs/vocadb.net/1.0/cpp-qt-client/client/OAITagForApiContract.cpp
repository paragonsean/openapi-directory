/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagForApiContract::OAITagForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagForApiContract::OAITagForApiContract() {
    this->initializeModel();
}

OAITagForApiContract::~OAITagForApiContract() {}

void OAITagForApiContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_aliased_to_isSet = false;
    m_aliased_to_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_default_name_language_isSet = false;
    m_default_name_language_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_main_picture_isSet = false;
    m_main_picture_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_related_tags_isSet = false;
    m_related_tags_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_translated_description_isSet = false;
    m_translated_description_isValid = false;

    m_url_slug_isSet = false;
    m_url_slug_isValid = false;

    m_usage_count_isSet = false;
    m_usage_count_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_web_links_isSet = false;
    m_web_links_isValid = false;
}

void OAITagForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagForApiContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_aliased_to_isValid = ::OpenAPI::fromJsonValue(m_aliased_to, json[QString("aliasedTo")]);
    m_aliased_to_isSet = !json[QString("aliasedTo")].isNull() && m_aliased_to_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_default_name_language_isValid = ::OpenAPI::fromJsonValue(m_default_name_language, json[QString("defaultNameLanguage")]);
    m_default_name_language_isSet = !json[QString("defaultNameLanguage")].isNull() && m_default_name_language_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_main_picture_isValid = ::OpenAPI::fromJsonValue(m_main_picture, json[QString("mainPicture")]);
    m_main_picture_isSet = !json[QString("mainPicture")].isNull() && m_main_picture_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_related_tags_isValid = ::OpenAPI::fromJsonValue(m_related_tags, json[QString("relatedTags")]);
    m_related_tags_isSet = !json[QString("relatedTags")].isNull() && m_related_tags_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_translated_description_isValid = ::OpenAPI::fromJsonValue(m_translated_description, json[QString("translatedDescription")]);
    m_translated_description_isSet = !json[QString("translatedDescription")].isNull() && m_translated_description_isValid;

    m_url_slug_isValid = ::OpenAPI::fromJsonValue(m_url_slug, json[QString("urlSlug")]);
    m_url_slug_isSet = !json[QString("urlSlug")].isNull() && m_url_slug_isValid;

    m_usage_count_isValid = ::OpenAPI::fromJsonValue(m_usage_count, json[QString("usageCount")]);
    m_usage_count_isSet = !json[QString("usageCount")].isNull() && m_usage_count_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_web_links_isValid = ::OpenAPI::fromJsonValue(m_web_links, json[QString("webLinks")]);
    m_web_links_isSet = !json[QString("webLinks")].isNull() && m_web_links_isValid;
}

QString OAITagForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_aliased_to.isSet()) {
        obj.insert(QString("aliasedTo"), ::OpenAPI::toJsonValue(m_aliased_to));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_default_name_language.isSet()) {
        obj.insert(QString("defaultNameLanguage"), ::OpenAPI::toJsonValue(m_default_name_language));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_main_picture.isSet()) {
        obj.insert(QString("mainPicture"), ::OpenAPI::toJsonValue(m_main_picture));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_related_tags.size() > 0) {
        obj.insert(QString("relatedTags"), ::OpenAPI::toJsonValue(m_related_tags));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_targets_isSet) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_translated_description.isSet()) {
        obj.insert(QString("translatedDescription"), ::OpenAPI::toJsonValue(m_translated_description));
    }
    if (m_url_slug_isSet) {
        obj.insert(QString("urlSlug"), ::OpenAPI::toJsonValue(m_url_slug));
    }
    if (m_usage_count_isSet) {
        obj.insert(QString("usageCount"), ::OpenAPI::toJsonValue(m_usage_count));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_web_links.size() > 0) {
        obj.insert(QString("webLinks"), ::OpenAPI::toJsonValue(m_web_links));
    }
    return obj;
}

QString OAITagForApiContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAITagForApiContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAITagForApiContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAITagForApiContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

OAITagBaseContract OAITagForApiContract::getAliasedTo() const {
    return m_aliased_to;
}
void OAITagForApiContract::setAliasedTo(const OAITagBaseContract &aliased_to) {
    m_aliased_to = aliased_to;
    m_aliased_to_isSet = true;
}

bool OAITagForApiContract::is_aliased_to_Set() const{
    return m_aliased_to_isSet;
}

bool OAITagForApiContract::is_aliased_to_Valid() const{
    return m_aliased_to_isValid;
}

QString OAITagForApiContract::getCategoryName() const {
    return m_category_name;
}
void OAITagForApiContract::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAITagForApiContract::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAITagForApiContract::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QDateTime OAITagForApiContract::getCreateDate() const {
    return m_create_date;
}
void OAITagForApiContract::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAITagForApiContract::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAITagForApiContract::is_create_date_Valid() const{
    return m_create_date_isValid;
}

OAIContentLanguageSelection OAITagForApiContract::getDefaultNameLanguage() const {
    return m_default_name_language;
}
void OAITagForApiContract::setDefaultNameLanguage(const OAIContentLanguageSelection &default_name_language) {
    m_default_name_language = default_name_language;
    m_default_name_language_isSet = true;
}

bool OAITagForApiContract::is_default_name_language_Set() const{
    return m_default_name_language_isSet;
}

bool OAITagForApiContract::is_default_name_language_Valid() const{
    return m_default_name_language_isValid;
}

QString OAITagForApiContract::getDescription() const {
    return m_description;
}
void OAITagForApiContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITagForApiContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAITagForApiContract::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAITagForApiContract::getId() const {
    return m_id;
}
void OAITagForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITagForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAITagForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

OAIEntryThumbForApiContract OAITagForApiContract::getMainPicture() const {
    return m_main_picture;
}
void OAITagForApiContract::setMainPicture(const OAIEntryThumbForApiContract &main_picture) {
    m_main_picture = main_picture;
    m_main_picture_isSet = true;
}

bool OAITagForApiContract::is_main_picture_Set() const{
    return m_main_picture_isSet;
}

bool OAITagForApiContract::is_main_picture_Valid() const{
    return m_main_picture_isValid;
}

QString OAITagForApiContract::getName() const {
    return m_name;
}
void OAITagForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITagForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAITagForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILocalizedStringWithIdContract> OAITagForApiContract::getNames() const {
    return m_names;
}
void OAITagForApiContract::setNames(const QList<OAILocalizedStringWithIdContract> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAITagForApiContract::is_names_Set() const{
    return m_names_isSet;
}

bool OAITagForApiContract::is_names_Valid() const{
    return m_names_isValid;
}

OAITagBaseContract OAITagForApiContract::getParent() const {
    return m_parent;
}
void OAITagForApiContract::setParent(const OAITagBaseContract &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAITagForApiContract::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAITagForApiContract::is_parent_Valid() const{
    return m_parent_isValid;
}

QList<OAITagBaseContract> OAITagForApiContract::getRelatedTags() const {
    return m_related_tags;
}
void OAITagForApiContract::setRelatedTags(const QList<OAITagBaseContract> &related_tags) {
    m_related_tags = related_tags;
    m_related_tags_isSet = true;
}

bool OAITagForApiContract::is_related_tags_Set() const{
    return m_related_tags_isSet;
}

bool OAITagForApiContract::is_related_tags_Valid() const{
    return m_related_tags_isValid;
}

OAIEntryStatus OAITagForApiContract::getStatus() const {
    return m_status;
}
void OAITagForApiContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITagForApiContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAITagForApiContract::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAITagForApiContract::getTargets() const {
    return m_targets;
}
void OAITagForApiContract::setTargets(const qint32 &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAITagForApiContract::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAITagForApiContract::is_targets_Valid() const{
    return m_targets_isValid;
}

OAIEnglishTranslatedStringContract OAITagForApiContract::getTranslatedDescription() const {
    return m_translated_description;
}
void OAITagForApiContract::setTranslatedDescription(const OAIEnglishTranslatedStringContract &translated_description) {
    m_translated_description = translated_description;
    m_translated_description_isSet = true;
}

bool OAITagForApiContract::is_translated_description_Set() const{
    return m_translated_description_isSet;
}

bool OAITagForApiContract::is_translated_description_Valid() const{
    return m_translated_description_isValid;
}

QString OAITagForApiContract::getUrlSlug() const {
    return m_url_slug;
}
void OAITagForApiContract::setUrlSlug(const QString &url_slug) {
    m_url_slug = url_slug;
    m_url_slug_isSet = true;
}

bool OAITagForApiContract::is_url_slug_Set() const{
    return m_url_slug_isSet;
}

bool OAITagForApiContract::is_url_slug_Valid() const{
    return m_url_slug_isValid;
}

qint32 OAITagForApiContract::getUsageCount() const {
    return m_usage_count;
}
void OAITagForApiContract::setUsageCount(const qint32 &usage_count) {
    m_usage_count = usage_count;
    m_usage_count_isSet = true;
}

bool OAITagForApiContract::is_usage_count_Set() const{
    return m_usage_count_isSet;
}

bool OAITagForApiContract::is_usage_count_Valid() const{
    return m_usage_count_isValid;
}

qint32 OAITagForApiContract::getVersion() const {
    return m_version;
}
void OAITagForApiContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITagForApiContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAITagForApiContract::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIWebLinkForApiContract> OAITagForApiContract::getWebLinks() const {
    return m_web_links;
}
void OAITagForApiContract::setWebLinks(const QList<OAIWebLinkForApiContract> &web_links) {
    m_web_links = web_links;
    m_web_links_isSet = true;
}

bool OAITagForApiContract::is_web_links_Set() const{
    return m_web_links_isSet;
}

bool OAITagForApiContract::is_web_links_Valid() const{
    return m_web_links_isValid;
}

bool OAITagForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliased_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_name_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
