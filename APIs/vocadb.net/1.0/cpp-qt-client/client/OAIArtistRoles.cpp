/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtistRoles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtistRoles::OAIArtistRoles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtistRoles::OAIArtistRoles() {
    this->initializeModel();
}

OAIArtistRoles::~OAIArtistRoles() {}

void OAIArtistRoles::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArtistRoles::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArtistRoles::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Default", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Animator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::ANIMATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Arranger", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::ARRANGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Composer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::COMPOSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Distributor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::DISTRIBUTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Illustrator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::ILLUSTRATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Instrumentalist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::INSTRUMENTALIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Lyricist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::LYRICIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Mastering", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::MASTERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Publisher", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::PUBLISHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vocalist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::VOCALIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VoiceManipulator", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::VOICEMANIPULATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Mixer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::MIXER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Chorus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::CHORUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Encoder", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::ENCODER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VocalDataProvider", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtistRoles::VOCALDATAPROVIDER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArtistRoles::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArtistRoles::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArtistRoles::DEFAULT:
            val = "Default";
            break;
        case eOAIArtistRoles::ANIMATOR:
            val = "Animator";
            break;
        case eOAIArtistRoles::ARRANGER:
            val = "Arranger";
            break;
        case eOAIArtistRoles::COMPOSER:
            val = "Composer";
            break;
        case eOAIArtistRoles::DISTRIBUTOR:
            val = "Distributor";
            break;
        case eOAIArtistRoles::ILLUSTRATOR:
            val = "Illustrator";
            break;
        case eOAIArtistRoles::INSTRUMENTALIST:
            val = "Instrumentalist";
            break;
        case eOAIArtistRoles::LYRICIST:
            val = "Lyricist";
            break;
        case eOAIArtistRoles::MASTERING:
            val = "Mastering";
            break;
        case eOAIArtistRoles::PUBLISHER:
            val = "Publisher";
            break;
        case eOAIArtistRoles::VOCALIST:
            val = "Vocalist";
            break;
        case eOAIArtistRoles::VOICEMANIPULATOR:
            val = "VoiceManipulator";
            break;
        case eOAIArtistRoles::OTHER:
            val = "Other";
            break;
        case eOAIArtistRoles::MIXER:
            val = "Mixer";
            break;
        case eOAIArtistRoles::CHORUS:
            val = "Chorus";
            break;
        case eOAIArtistRoles::ENCODER:
            val = "Encoder";
            break;
        case eOAIArtistRoles::VOCALDATAPROVIDER:
            val = "VocalDataProvider";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArtistRoles::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArtistRoles::eOAIArtistRoles OAIArtistRoles::getValue() const {
    return m_value;
}

void OAIArtistRoles::setValue(const OAIArtistRoles::eOAIArtistRoles& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArtistRoles::isSet() const {
    
    return m_value_isSet;
}

bool OAIArtistRoles::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
