/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentLanguagePreference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentLanguagePreference::OAIContentLanguagePreference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentLanguagePreference::OAIContentLanguagePreference() {
    this->initializeModel();
}

OAIContentLanguagePreference::~OAIContentLanguagePreference() {}

void OAIContentLanguagePreference::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIContentLanguagePreference::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIContentLanguagePreference::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Default", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentLanguagePreference::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Japanese", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentLanguagePreference::JAPANESE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Romaji", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentLanguagePreference::ROMAJI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("English", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContentLanguagePreference::ENGLISH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIContentLanguagePreference::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIContentLanguagePreference::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIContentLanguagePreference::DEFAULT:
            val = "Default";
            break;
        case eOAIContentLanguagePreference::JAPANESE:
            val = "Japanese";
            break;
        case eOAIContentLanguagePreference::ROMAJI:
            val = "Romaji";
            break;
        case eOAIContentLanguagePreference::ENGLISH:
            val = "English";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIContentLanguagePreference::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIContentLanguagePreference::eOAIContentLanguagePreference OAIContentLanguagePreference::getValue() const {
    return m_value;
}

void OAIContentLanguagePreference::setValue(const OAIContentLanguagePreference::eOAIContentLanguagePreference& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIContentLanguagePreference::isSet() const {
    
    return m_value_isSet;
}

bool OAIContentLanguagePreference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
