/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserMessageContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserMessageContract::OAIUserMessageContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserMessageContract::OAIUserMessageContract() {
    this->initializeModel();
}

OAIUserMessageContract::~OAIUserMessageContract() {}

void OAIUserMessageContract::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_formatted_isSet = false;
    m_created_formatted_isValid = false;

    m_high_priority_isSet = false;
    m_high_priority_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inbox_isSet = false;
    m_inbox_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_receiver_isSet = false;
    m_receiver_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIUserMessageContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserMessageContract::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_formatted_isValid = ::OpenAPI::fromJsonValue(m_created_formatted, json[QString("createdFormatted")]);
    m_created_formatted_isSet = !json[QString("createdFormatted")].isNull() && m_created_formatted_isValid;

    m_high_priority_isValid = ::OpenAPI::fromJsonValue(m_high_priority, json[QString("highPriority")]);
    m_high_priority_isSet = !json[QString("highPriority")].isNull() && m_high_priority_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inbox_isValid = ::OpenAPI::fromJsonValue(m_inbox, json[QString("inbox")]);
    m_inbox_isSet = !json[QString("inbox")].isNull() && m_inbox_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_receiver_isValid = ::OpenAPI::fromJsonValue(m_receiver, json[QString("receiver")]);
    m_receiver_isSet = !json[QString("receiver")].isNull() && m_receiver_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIUserMessageContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserMessageContract::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_formatted_isSet) {
        obj.insert(QString("createdFormatted"), ::OpenAPI::toJsonValue(m_created_formatted));
    }
    if (m_high_priority_isSet) {
        obj.insert(QString("highPriority"), ::OpenAPI::toJsonValue(m_high_priority));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inbox.isSet()) {
        obj.insert(QString("inbox"), ::OpenAPI::toJsonValue(m_inbox));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_receiver.isSet()) {
        obj.insert(QString("receiver"), ::OpenAPI::toJsonValue(m_receiver));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIUserMessageContract::getBody() const {
    return m_body;
}
void OAIUserMessageContract::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIUserMessageContract::is_body_Set() const{
    return m_body_isSet;
}

bool OAIUserMessageContract::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIUserMessageContract::getCreatedFormatted() const {
    return m_created_formatted;
}
void OAIUserMessageContract::setCreatedFormatted(const QString &created_formatted) {
    m_created_formatted = created_formatted;
    m_created_formatted_isSet = true;
}

bool OAIUserMessageContract::is_created_formatted_Set() const{
    return m_created_formatted_isSet;
}

bool OAIUserMessageContract::is_created_formatted_Valid() const{
    return m_created_formatted_isValid;
}

bool OAIUserMessageContract::isHighPriority() const {
    return m_high_priority;
}
void OAIUserMessageContract::setHighPriority(const bool &high_priority) {
    m_high_priority = high_priority;
    m_high_priority_isSet = true;
}

bool OAIUserMessageContract::is_high_priority_Set() const{
    return m_high_priority_isSet;
}

bool OAIUserMessageContract::is_high_priority_Valid() const{
    return m_high_priority_isValid;
}

qint32 OAIUserMessageContract::getId() const {
    return m_id;
}
void OAIUserMessageContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserMessageContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserMessageContract::is_id_Valid() const{
    return m_id_isValid;
}

OAIUserInboxType OAIUserMessageContract::getInbox() const {
    return m_inbox;
}
void OAIUserMessageContract::setInbox(const OAIUserInboxType &inbox) {
    m_inbox = inbox;
    m_inbox_isSet = true;
}

bool OAIUserMessageContract::is_inbox_Set() const{
    return m_inbox_isSet;
}

bool OAIUserMessageContract::is_inbox_Valid() const{
    return m_inbox_isValid;
}

bool OAIUserMessageContract::isRead() const {
    return m_read;
}
void OAIUserMessageContract::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIUserMessageContract::is_read_Set() const{
    return m_read_isSet;
}

bool OAIUserMessageContract::is_read_Valid() const{
    return m_read_isValid;
}

OAIUserForApiContract OAIUserMessageContract::getReceiver() const {
    return m_receiver;
}
void OAIUserMessageContract::setReceiver(const OAIUserForApiContract &receiver) {
    m_receiver = receiver;
    m_receiver_isSet = true;
}

bool OAIUserMessageContract::is_receiver_Set() const{
    return m_receiver_isSet;
}

bool OAIUserMessageContract::is_receiver_Valid() const{
    return m_receiver_isValid;
}

OAIUserForApiContract OAIUserMessageContract::getSender() const {
    return m_sender;
}
void OAIUserMessageContract::setSender(const OAIUserForApiContract &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIUserMessageContract::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIUserMessageContract::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIUserMessageContract::getSubject() const {
    return m_subject;
}
void OAIUserMessageContract::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIUserMessageContract::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIUserMessageContract::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIUserMessageContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbox.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserMessageContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
