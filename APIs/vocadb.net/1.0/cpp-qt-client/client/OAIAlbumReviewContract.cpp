/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlbumReviewContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlbumReviewContract::OAIAlbumReviewContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlbumReviewContract::OAIAlbumReviewContract() {
    this->initializeModel();
}

OAIAlbumReviewContract::~OAIAlbumReviewContract() {}

void OAIAlbumReviewContract::initializeModel() {

    m_album_id_isSet = false;
    m_album_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAlbumReviewContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlbumReviewContract::fromJsonObject(QJsonObject json) {

    m_album_id_isValid = ::OpenAPI::fromJsonValue(m_album_id, json[QString("albumId")]);
    m_album_id_isSet = !json[QString("albumId")].isNull() && m_album_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAlbumReviewContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlbumReviewContract::asJsonObject() const {
    QJsonObject obj;
    if (m_album_id_isSet) {
        obj.insert(QString("albumId"), ::OpenAPI::toJsonValue(m_album_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAIAlbumReviewContract::getAlbumId() const {
    return m_album_id;
}
void OAIAlbumReviewContract::setAlbumId(const qint32 &album_id) {
    m_album_id = album_id;
    m_album_id_isSet = true;
}

bool OAIAlbumReviewContract::is_album_id_Set() const{
    return m_album_id_isSet;
}

bool OAIAlbumReviewContract::is_album_id_Valid() const{
    return m_album_id_isValid;
}

QDateTime OAIAlbumReviewContract::getDate() const {
    return m_date;
}
void OAIAlbumReviewContract::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAlbumReviewContract::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAlbumReviewContract::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIAlbumReviewContract::getId() const {
    return m_id;
}
void OAIAlbumReviewContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlbumReviewContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlbumReviewContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAlbumReviewContract::getLanguageCode() const {
    return m_language_code;
}
void OAIAlbumReviewContract::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIAlbumReviewContract::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIAlbumReviewContract::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIAlbumReviewContract::getText() const {
    return m_text;
}
void OAIAlbumReviewContract::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAlbumReviewContract::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAlbumReviewContract::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIAlbumReviewContract::getTitle() const {
    return m_title;
}
void OAIAlbumReviewContract::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAlbumReviewContract::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAlbumReviewContract::is_title_Valid() const{
    return m_title_isValid;
}

OAIUserForApiContract OAIAlbumReviewContract::getUser() const {
    return m_user;
}
void OAIAlbumReviewContract::setUser(const OAIUserForApiContract &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAlbumReviewContract::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAlbumReviewContract::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAlbumReviewContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlbumReviewContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
