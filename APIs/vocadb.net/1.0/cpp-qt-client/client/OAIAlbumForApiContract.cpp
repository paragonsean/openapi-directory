/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlbumForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlbumForApiContract::OAIAlbumForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlbumForApiContract::OAIAlbumForApiContract() {
    this->initializeModel();
}

OAIAlbumForApiContract::~OAIAlbumForApiContract() {}

void OAIAlbumForApiContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_artist_string_isSet = false;
    m_artist_string_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_catalog_number_isSet = false;
    m_catalog_number_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_default_name_isSet = false;
    m_default_name_isValid = false;

    m_default_name_language_isSet = false;
    m_default_name_language_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disc_type_isSet = false;
    m_disc_type_isValid = false;

    m_discs_isSet = false;
    m_discs_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_main_picture_isSet = false;
    m_main_picture_isValid = false;

    m_merged_to_isSet = false;
    m_merged_to_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_pvs_isSet = false;
    m_pvs_isValid = false;

    m_rating_average_isSet = false;
    m_rating_average_isValid = false;

    m_rating_count_isSet = false;
    m_rating_count_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_release_event_isSet = false;
    m_release_event_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_web_links_isSet = false;
    m_web_links_isValid = false;
}

void OAIAlbumForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlbumForApiContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_artist_string_isValid = ::OpenAPI::fromJsonValue(m_artist_string, json[QString("artistString")]);
    m_artist_string_isSet = !json[QString("artistString")].isNull() && m_artist_string_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_catalog_number_isValid = ::OpenAPI::fromJsonValue(m_catalog_number, json[QString("catalogNumber")]);
    m_catalog_number_isSet = !json[QString("catalogNumber")].isNull() && m_catalog_number_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_default_name_isValid = ::OpenAPI::fromJsonValue(m_default_name, json[QString("defaultName")]);
    m_default_name_isSet = !json[QString("defaultName")].isNull() && m_default_name_isValid;

    m_default_name_language_isValid = ::OpenAPI::fromJsonValue(m_default_name_language, json[QString("defaultNameLanguage")]);
    m_default_name_language_isSet = !json[QString("defaultNameLanguage")].isNull() && m_default_name_language_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disc_type_isValid = ::OpenAPI::fromJsonValue(m_disc_type, json[QString("discType")]);
    m_disc_type_isSet = !json[QString("discType")].isNull() && m_disc_type_isValid;

    m_discs_isValid = ::OpenAPI::fromJsonValue(m_discs, json[QString("discs")]);
    m_discs_isSet = !json[QString("discs")].isNull() && m_discs_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_main_picture_isValid = ::OpenAPI::fromJsonValue(m_main_picture, json[QString("mainPicture")]);
    m_main_picture_isSet = !json[QString("mainPicture")].isNull() && m_main_picture_isValid;

    m_merged_to_isValid = ::OpenAPI::fromJsonValue(m_merged_to, json[QString("mergedTo")]);
    m_merged_to_isSet = !json[QString("mergedTo")].isNull() && m_merged_to_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_pvs_isValid = ::OpenAPI::fromJsonValue(m_pvs, json[QString("pvs")]);
    m_pvs_isSet = !json[QString("pvs")].isNull() && m_pvs_isValid;

    m_rating_average_isValid = ::OpenAPI::fromJsonValue(m_rating_average, json[QString("ratingAverage")]);
    m_rating_average_isSet = !json[QString("ratingAverage")].isNull() && m_rating_average_isValid;

    m_rating_count_isValid = ::OpenAPI::fromJsonValue(m_rating_count, json[QString("ratingCount")]);
    m_rating_count_isSet = !json[QString("ratingCount")].isNull() && m_rating_count_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_release_event_isValid = ::OpenAPI::fromJsonValue(m_release_event, json[QString("releaseEvent")]);
    m_release_event_isSet = !json[QString("releaseEvent")].isNull() && m_release_event_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_web_links_isValid = ::OpenAPI::fromJsonValue(m_web_links, json[QString("webLinks")]);
    m_web_links_isSet = !json[QString("webLinks")].isNull() && m_web_links_isValid;
}

QString OAIAlbumForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlbumForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_artist_string_isSet) {
        obj.insert(QString("artistString"), ::OpenAPI::toJsonValue(m_artist_string));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_barcode_isSet) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_catalog_number_isSet) {
        obj.insert(QString("catalogNumber"), ::OpenAPI::toJsonValue(m_catalog_number));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_default_name_isSet) {
        obj.insert(QString("defaultName"), ::OpenAPI::toJsonValue(m_default_name));
    }
    if (m_default_name_language.isSet()) {
        obj.insert(QString("defaultNameLanguage"), ::OpenAPI::toJsonValue(m_default_name_language));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disc_type.isSet()) {
        obj.insert(QString("discType"), ::OpenAPI::toJsonValue(m_disc_type));
    }
    if (m_discs.size() > 0) {
        obj.insert(QString("discs"), ::OpenAPI::toJsonValue(m_discs));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifiers.size() > 0) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_main_picture.isSet()) {
        obj.insert(QString("mainPicture"), ::OpenAPI::toJsonValue(m_main_picture));
    }
    if (m_merged_to_isSet) {
        obj.insert(QString("mergedTo"), ::OpenAPI::toJsonValue(m_merged_to));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_pvs.size() > 0) {
        obj.insert(QString("pvs"), ::OpenAPI::toJsonValue(m_pvs));
    }
    if (m_rating_average_isSet) {
        obj.insert(QString("ratingAverage"), ::OpenAPI::toJsonValue(m_rating_average));
    }
    if (m_rating_count_isSet) {
        obj.insert(QString("ratingCount"), ::OpenAPI::toJsonValue(m_rating_count));
    }
    if (m_release_date.isSet()) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_release_event.isSet()) {
        obj.insert(QString("releaseEvent"), ::OpenAPI::toJsonValue(m_release_event));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_web_links.size() > 0) {
        obj.insert(QString("webLinks"), ::OpenAPI::toJsonValue(m_web_links));
    }
    return obj;
}

QString OAIAlbumForApiContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAIAlbumForApiContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAIAlbumForApiContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAIAlbumForApiContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

QString OAIAlbumForApiContract::getArtistString() const {
    return m_artist_string;
}
void OAIAlbumForApiContract::setArtistString(const QString &artist_string) {
    m_artist_string = artist_string;
    m_artist_string_isSet = true;
}

bool OAIAlbumForApiContract::is_artist_string_Set() const{
    return m_artist_string_isSet;
}

bool OAIAlbumForApiContract::is_artist_string_Valid() const{
    return m_artist_string_isValid;
}

QList<OAIArtistForAlbumForApiContract> OAIAlbumForApiContract::getArtists() const {
    return m_artists;
}
void OAIAlbumForApiContract::setArtists(const QList<OAIArtistForAlbumForApiContract> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAIAlbumForApiContract::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAIAlbumForApiContract::is_artists_Valid() const{
    return m_artists_isValid;
}

QString OAIAlbumForApiContract::getBarcode() const {
    return m_barcode;
}
void OAIAlbumForApiContract::setBarcode(const QString &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIAlbumForApiContract::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIAlbumForApiContract::is_barcode_Valid() const{
    return m_barcode_isValid;
}

QString OAIAlbumForApiContract::getCatalogNumber() const {
    return m_catalog_number;
}
void OAIAlbumForApiContract::setCatalogNumber(const QString &catalog_number) {
    m_catalog_number = catalog_number;
    m_catalog_number_isSet = true;
}

bool OAIAlbumForApiContract::is_catalog_number_Set() const{
    return m_catalog_number_isSet;
}

bool OAIAlbumForApiContract::is_catalog_number_Valid() const{
    return m_catalog_number_isValid;
}

QDateTime OAIAlbumForApiContract::getCreateDate() const {
    return m_create_date;
}
void OAIAlbumForApiContract::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIAlbumForApiContract::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIAlbumForApiContract::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIAlbumForApiContract::getDefaultName() const {
    return m_default_name;
}
void OAIAlbumForApiContract::setDefaultName(const QString &default_name) {
    m_default_name = default_name;
    m_default_name_isSet = true;
}

bool OAIAlbumForApiContract::is_default_name_Set() const{
    return m_default_name_isSet;
}

bool OAIAlbumForApiContract::is_default_name_Valid() const{
    return m_default_name_isValid;
}

OAIContentLanguageSelection OAIAlbumForApiContract::getDefaultNameLanguage() const {
    return m_default_name_language;
}
void OAIAlbumForApiContract::setDefaultNameLanguage(const OAIContentLanguageSelection &default_name_language) {
    m_default_name_language = default_name_language;
    m_default_name_language_isSet = true;
}

bool OAIAlbumForApiContract::is_default_name_language_Set() const{
    return m_default_name_language_isSet;
}

bool OAIAlbumForApiContract::is_default_name_language_Valid() const{
    return m_default_name_language_isValid;
}

bool OAIAlbumForApiContract::isDeleted() const {
    return m_deleted;
}
void OAIAlbumForApiContract::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIAlbumForApiContract::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIAlbumForApiContract::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIAlbumForApiContract::getDescription() const {
    return m_description;
}
void OAIAlbumForApiContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAlbumForApiContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAlbumForApiContract::is_description_Valid() const{
    return m_description_isValid;
}

OAIDiscType OAIAlbumForApiContract::getDiscType() const {
    return m_disc_type;
}
void OAIAlbumForApiContract::setDiscType(const OAIDiscType &disc_type) {
    m_disc_type = disc_type;
    m_disc_type_isSet = true;
}

bool OAIAlbumForApiContract::is_disc_type_Set() const{
    return m_disc_type_isSet;
}

bool OAIAlbumForApiContract::is_disc_type_Valid() const{
    return m_disc_type_isValid;
}

QList<OAIAlbumDiscPropertiesContract> OAIAlbumForApiContract::getDiscs() const {
    return m_discs;
}
void OAIAlbumForApiContract::setDiscs(const QList<OAIAlbumDiscPropertiesContract> &discs) {
    m_discs = discs;
    m_discs_isSet = true;
}

bool OAIAlbumForApiContract::is_discs_Set() const{
    return m_discs_isSet;
}

bool OAIAlbumForApiContract::is_discs_Valid() const{
    return m_discs_isValid;
}

qint32 OAIAlbumForApiContract::getId() const {
    return m_id;
}
void OAIAlbumForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlbumForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlbumForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIAlbumIdentifierContract> OAIAlbumForApiContract::getIdentifiers() const {
    return m_identifiers;
}
void OAIAlbumForApiContract::setIdentifiers(const QList<OAIAlbumIdentifierContract> &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIAlbumForApiContract::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIAlbumForApiContract::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

OAIEntryThumbForApiContract OAIAlbumForApiContract::getMainPicture() const {
    return m_main_picture;
}
void OAIAlbumForApiContract::setMainPicture(const OAIEntryThumbForApiContract &main_picture) {
    m_main_picture = main_picture;
    m_main_picture_isSet = true;
}

bool OAIAlbumForApiContract::is_main_picture_Set() const{
    return m_main_picture_isSet;
}

bool OAIAlbumForApiContract::is_main_picture_Valid() const{
    return m_main_picture_isValid;
}

qint32 OAIAlbumForApiContract::getMergedTo() const {
    return m_merged_to;
}
void OAIAlbumForApiContract::setMergedTo(const qint32 &merged_to) {
    m_merged_to = merged_to;
    m_merged_to_isSet = true;
}

bool OAIAlbumForApiContract::is_merged_to_Set() const{
    return m_merged_to_isSet;
}

bool OAIAlbumForApiContract::is_merged_to_Valid() const{
    return m_merged_to_isValid;
}

QString OAIAlbumForApiContract::getName() const {
    return m_name;
}
void OAIAlbumForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlbumForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlbumForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILocalizedStringContract> OAIAlbumForApiContract::getNames() const {
    return m_names;
}
void OAIAlbumForApiContract::setNames(const QList<OAILocalizedStringContract> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIAlbumForApiContract::is_names_Set() const{
    return m_names_isSet;
}

bool OAIAlbumForApiContract::is_names_Valid() const{
    return m_names_isValid;
}

QList<OAIPVContract> OAIAlbumForApiContract::getPvs() const {
    return m_pvs;
}
void OAIAlbumForApiContract::setPvs(const QList<OAIPVContract> &pvs) {
    m_pvs = pvs;
    m_pvs_isSet = true;
}

bool OAIAlbumForApiContract::is_pvs_Set() const{
    return m_pvs_isSet;
}

bool OAIAlbumForApiContract::is_pvs_Valid() const{
    return m_pvs_isValid;
}

double OAIAlbumForApiContract::getRatingAverage() const {
    return m_rating_average;
}
void OAIAlbumForApiContract::setRatingAverage(const double &rating_average) {
    m_rating_average = rating_average;
    m_rating_average_isSet = true;
}

bool OAIAlbumForApiContract::is_rating_average_Set() const{
    return m_rating_average_isSet;
}

bool OAIAlbumForApiContract::is_rating_average_Valid() const{
    return m_rating_average_isValid;
}

qint32 OAIAlbumForApiContract::getRatingCount() const {
    return m_rating_count;
}
void OAIAlbumForApiContract::setRatingCount(const qint32 &rating_count) {
    m_rating_count = rating_count;
    m_rating_count_isSet = true;
}

bool OAIAlbumForApiContract::is_rating_count_Set() const{
    return m_rating_count_isSet;
}

bool OAIAlbumForApiContract::is_rating_count_Valid() const{
    return m_rating_count_isValid;
}

OAIOptionalDateTimeContract OAIAlbumForApiContract::getReleaseDate() const {
    return m_release_date;
}
void OAIAlbumForApiContract::setReleaseDate(const OAIOptionalDateTimeContract &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIAlbumForApiContract::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIAlbumForApiContract::is_release_date_Valid() const{
    return m_release_date_isValid;
}

OAIReleaseEventForApiContract OAIAlbumForApiContract::getReleaseEvent() const {
    return m_release_event;
}
void OAIAlbumForApiContract::setReleaseEvent(const OAIReleaseEventForApiContract &release_event) {
    m_release_event = release_event;
    m_release_event_isSet = true;
}

bool OAIAlbumForApiContract::is_release_event_Set() const{
    return m_release_event_isSet;
}

bool OAIAlbumForApiContract::is_release_event_Valid() const{
    return m_release_event_isValid;
}

OAIEntryStatus OAIAlbumForApiContract::getStatus() const {
    return m_status;
}
void OAIAlbumForApiContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAlbumForApiContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAlbumForApiContract::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITagUsageForApiContract> OAIAlbumForApiContract::getTags() const {
    return m_tags;
}
void OAIAlbumForApiContract::setTags(const QList<OAITagUsageForApiContract> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAlbumForApiContract::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAlbumForApiContract::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAISongInAlbumForApiContract> OAIAlbumForApiContract::getTracks() const {
    return m_tracks;
}
void OAIAlbumForApiContract::setTracks(const QList<OAISongInAlbumForApiContract> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIAlbumForApiContract::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIAlbumForApiContract::is_tracks_Valid() const{
    return m_tracks_isValid;
}

qint32 OAIAlbumForApiContract::getVersion() const {
    return m_version;
}
void OAIAlbumForApiContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAlbumForApiContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAlbumForApiContract::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIWebLinkForApiContract> OAIAlbumForApiContract::getWebLinks() const {
    return m_web_links;
}
void OAIAlbumForApiContract::setWebLinks(const QList<OAIWebLinkForApiContract> &web_links) {
    m_web_links = web_links;
    m_web_links_isSet = true;
}

bool OAIAlbumForApiContract::is_web_links_Set() const{
    return m_web_links_isSet;
}

bool OAIAlbumForApiContract::is_web_links_Valid() const{
    return m_web_links_isValid;
}

bool OAIAlbumForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_name_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disc_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlbumForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
