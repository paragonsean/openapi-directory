/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseEventForApiContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseEventForApiContract::OAIReleaseEventForApiContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseEventForApiContract::OAIReleaseEventForApiContract() {
    this->initializeModel();
}

OAIReleaseEventForApiContract::~OAIReleaseEventForApiContract() {}

void OAIReleaseEventForApiContract::initializeModel() {

    m_additional_names_isSet = false;
    m_additional_names_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_main_picture_isSet = false;
    m_main_picture_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_pvs_isSet = false;
    m_pvs_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_series_id_isSet = false;
    m_series_id_isValid = false;

    m_series_number_isSet = false;
    m_series_number_isValid = false;

    m_series_suffix_isSet = false;
    m_series_suffix_isValid = false;

    m_song_list_isSet = false;
    m_song_list_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_slug_isSet = false;
    m_url_slug_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_venue_name_isSet = false;
    m_venue_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_web_links_isSet = false;
    m_web_links_isValid = false;
}

void OAIReleaseEventForApiContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseEventForApiContract::fromJsonObject(QJsonObject json) {

    m_additional_names_isValid = ::OpenAPI::fromJsonValue(m_additional_names, json[QString("additionalNames")]);
    m_additional_names_isSet = !json[QString("additionalNames")].isNull() && m_additional_names_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_main_picture_isValid = ::OpenAPI::fromJsonValue(m_main_picture, json[QString("mainPicture")]);
    m_main_picture_isSet = !json[QString("mainPicture")].isNull() && m_main_picture_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_pvs_isValid = ::OpenAPI::fromJsonValue(m_pvs, json[QString("pvs")]);
    m_pvs_isSet = !json[QString("pvs")].isNull() && m_pvs_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_series_id_isValid = ::OpenAPI::fromJsonValue(m_series_id, json[QString("seriesId")]);
    m_series_id_isSet = !json[QString("seriesId")].isNull() && m_series_id_isValid;

    m_series_number_isValid = ::OpenAPI::fromJsonValue(m_series_number, json[QString("seriesNumber")]);
    m_series_number_isSet = !json[QString("seriesNumber")].isNull() && m_series_number_isValid;

    m_series_suffix_isValid = ::OpenAPI::fromJsonValue(m_series_suffix, json[QString("seriesSuffix")]);
    m_series_suffix_isSet = !json[QString("seriesSuffix")].isNull() && m_series_suffix_isValid;

    m_song_list_isValid = ::OpenAPI::fromJsonValue(m_song_list, json[QString("songList")]);
    m_song_list_isSet = !json[QString("songList")].isNull() && m_song_list_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_slug_isValid = ::OpenAPI::fromJsonValue(m_url_slug, json[QString("urlSlug")]);
    m_url_slug_isSet = !json[QString("urlSlug")].isNull() && m_url_slug_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_venue_name_isValid = ::OpenAPI::fromJsonValue(m_venue_name, json[QString("venueName")]);
    m_venue_name_isSet = !json[QString("venueName")].isNull() && m_venue_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_web_links_isValid = ::OpenAPI::fromJsonValue(m_web_links, json[QString("webLinks")]);
    m_web_links_isSet = !json[QString("webLinks")].isNull() && m_web_links_isValid;
}

QString OAIReleaseEventForApiContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseEventForApiContract::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_names_isSet) {
        obj.insert(QString("additionalNames"), ::OpenAPI::toJsonValue(m_additional_names));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_main_picture.isSet()) {
        obj.insert(QString("mainPicture"), ::OpenAPI::toJsonValue(m_main_picture));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_pvs.size() > 0) {
        obj.insert(QString("pvs"), ::OpenAPI::toJsonValue(m_pvs));
    }
    if (m_series.isSet()) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_series_id_isSet) {
        obj.insert(QString("seriesId"), ::OpenAPI::toJsonValue(m_series_id));
    }
    if (m_series_number_isSet) {
        obj.insert(QString("seriesNumber"), ::OpenAPI::toJsonValue(m_series_number));
    }
    if (m_series_suffix_isSet) {
        obj.insert(QString("seriesSuffix"), ::OpenAPI::toJsonValue(m_series_suffix));
    }
    if (m_song_list.isSet()) {
        obj.insert(QString("songList"), ::OpenAPI::toJsonValue(m_song_list));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_slug_isSet) {
        obj.insert(QString("urlSlug"), ::OpenAPI::toJsonValue(m_url_slug));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_venue_name_isSet) {
        obj.insert(QString("venueName"), ::OpenAPI::toJsonValue(m_venue_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_web_links.size() > 0) {
        obj.insert(QString("webLinks"), ::OpenAPI::toJsonValue(m_web_links));
    }
    return obj;
}

QString OAIReleaseEventForApiContract::getAdditionalNames() const {
    return m_additional_names;
}
void OAIReleaseEventForApiContract::setAdditionalNames(const QString &additional_names) {
    m_additional_names = additional_names;
    m_additional_names_isSet = true;
}

bool OAIReleaseEventForApiContract::is_additional_names_Set() const{
    return m_additional_names_isSet;
}

bool OAIReleaseEventForApiContract::is_additional_names_Valid() const{
    return m_additional_names_isValid;
}

QList<OAIArtistForEventContract> OAIReleaseEventForApiContract::getArtists() const {
    return m_artists;
}
void OAIReleaseEventForApiContract::setArtists(const QList<OAIArtistForEventContract> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAIReleaseEventForApiContract::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAIReleaseEventForApiContract::is_artists_Valid() const{
    return m_artists_isValid;
}

OAIEventCategory OAIReleaseEventForApiContract::getCategory() const {
    return m_category;
}
void OAIReleaseEventForApiContract::setCategory(const OAIEventCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIReleaseEventForApiContract::is_category_Set() const{
    return m_category_isSet;
}

bool OAIReleaseEventForApiContract::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIReleaseEventForApiContract::getDate() const {
    return m_date;
}
void OAIReleaseEventForApiContract::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReleaseEventForApiContract::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReleaseEventForApiContract::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIReleaseEventForApiContract::getDescription() const {
    return m_description;
}
void OAIReleaseEventForApiContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReleaseEventForApiContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReleaseEventForApiContract::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIReleaseEventForApiContract::getEndDate() const {
    return m_end_date;
}
void OAIReleaseEventForApiContract::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIReleaseEventForApiContract::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIReleaseEventForApiContract::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIReleaseEventForApiContract::getId() const {
    return m_id;
}
void OAIReleaseEventForApiContract::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReleaseEventForApiContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReleaseEventForApiContract::is_id_Valid() const{
    return m_id_isValid;
}

OAIEntryThumbForApiContract OAIReleaseEventForApiContract::getMainPicture() const {
    return m_main_picture;
}
void OAIReleaseEventForApiContract::setMainPicture(const OAIEntryThumbForApiContract &main_picture) {
    m_main_picture = main_picture;
    m_main_picture_isSet = true;
}

bool OAIReleaseEventForApiContract::is_main_picture_Set() const{
    return m_main_picture_isSet;
}

bool OAIReleaseEventForApiContract::is_main_picture_Valid() const{
    return m_main_picture_isValid;
}

QString OAIReleaseEventForApiContract::getName() const {
    return m_name;
}
void OAIReleaseEventForApiContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReleaseEventForApiContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReleaseEventForApiContract::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILocalizedStringContract> OAIReleaseEventForApiContract::getNames() const {
    return m_names;
}
void OAIReleaseEventForApiContract::setNames(const QList<OAILocalizedStringContract> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIReleaseEventForApiContract::is_names_Set() const{
    return m_names_isSet;
}

bool OAIReleaseEventForApiContract::is_names_Valid() const{
    return m_names_isValid;
}

QList<OAIPVContract> OAIReleaseEventForApiContract::getPvs() const {
    return m_pvs;
}
void OAIReleaseEventForApiContract::setPvs(const QList<OAIPVContract> &pvs) {
    m_pvs = pvs;
    m_pvs_isSet = true;
}

bool OAIReleaseEventForApiContract::is_pvs_Set() const{
    return m_pvs_isSet;
}

bool OAIReleaseEventForApiContract::is_pvs_Valid() const{
    return m_pvs_isValid;
}

OAIReleaseEventSeriesContract OAIReleaseEventForApiContract::getSeries() const {
    return m_series;
}
void OAIReleaseEventForApiContract::setSeries(const OAIReleaseEventSeriesContract &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIReleaseEventForApiContract::is_series_Set() const{
    return m_series_isSet;
}

bool OAIReleaseEventForApiContract::is_series_Valid() const{
    return m_series_isValid;
}

qint32 OAIReleaseEventForApiContract::getSeriesId() const {
    return m_series_id;
}
void OAIReleaseEventForApiContract::setSeriesId(const qint32 &series_id) {
    m_series_id = series_id;
    m_series_id_isSet = true;
}

bool OAIReleaseEventForApiContract::is_series_id_Set() const{
    return m_series_id_isSet;
}

bool OAIReleaseEventForApiContract::is_series_id_Valid() const{
    return m_series_id_isValid;
}

qint32 OAIReleaseEventForApiContract::getSeriesNumber() const {
    return m_series_number;
}
void OAIReleaseEventForApiContract::setSeriesNumber(const qint32 &series_number) {
    m_series_number = series_number;
    m_series_number_isSet = true;
}

bool OAIReleaseEventForApiContract::is_series_number_Set() const{
    return m_series_number_isSet;
}

bool OAIReleaseEventForApiContract::is_series_number_Valid() const{
    return m_series_number_isValid;
}

QString OAIReleaseEventForApiContract::getSeriesSuffix() const {
    return m_series_suffix;
}
void OAIReleaseEventForApiContract::setSeriesSuffix(const QString &series_suffix) {
    m_series_suffix = series_suffix;
    m_series_suffix_isSet = true;
}

bool OAIReleaseEventForApiContract::is_series_suffix_Set() const{
    return m_series_suffix_isSet;
}

bool OAIReleaseEventForApiContract::is_series_suffix_Valid() const{
    return m_series_suffix_isValid;
}

OAISongListBaseContract OAIReleaseEventForApiContract::getSongList() const {
    return m_song_list;
}
void OAIReleaseEventForApiContract::setSongList(const OAISongListBaseContract &song_list) {
    m_song_list = song_list;
    m_song_list_isSet = true;
}

bool OAIReleaseEventForApiContract::is_song_list_Set() const{
    return m_song_list_isSet;
}

bool OAIReleaseEventForApiContract::is_song_list_Valid() const{
    return m_song_list_isValid;
}

OAIEntryStatus OAIReleaseEventForApiContract::getStatus() const {
    return m_status;
}
void OAIReleaseEventForApiContract::setStatus(const OAIEntryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReleaseEventForApiContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReleaseEventForApiContract::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITagUsageForApiContract> OAIReleaseEventForApiContract::getTags() const {
    return m_tags;
}
void OAIReleaseEventForApiContract::setTags(const QList<OAITagUsageForApiContract> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIReleaseEventForApiContract::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIReleaseEventForApiContract::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIReleaseEventForApiContract::getUrlSlug() const {
    return m_url_slug;
}
void OAIReleaseEventForApiContract::setUrlSlug(const QString &url_slug) {
    m_url_slug = url_slug;
    m_url_slug_isSet = true;
}

bool OAIReleaseEventForApiContract::is_url_slug_Set() const{
    return m_url_slug_isSet;
}

bool OAIReleaseEventForApiContract::is_url_slug_Valid() const{
    return m_url_slug_isValid;
}

OAIVenueForApiContract OAIReleaseEventForApiContract::getVenue() const {
    return m_venue;
}
void OAIReleaseEventForApiContract::setVenue(const OAIVenueForApiContract &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIReleaseEventForApiContract::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIReleaseEventForApiContract::is_venue_Valid() const{
    return m_venue_isValid;
}

QString OAIReleaseEventForApiContract::getVenueName() const {
    return m_venue_name;
}
void OAIReleaseEventForApiContract::setVenueName(const QString &venue_name) {
    m_venue_name = venue_name;
    m_venue_name_isSet = true;
}

bool OAIReleaseEventForApiContract::is_venue_name_Set() const{
    return m_venue_name_isSet;
}

bool OAIReleaseEventForApiContract::is_venue_name_Valid() const{
    return m_venue_name_isValid;
}

qint32 OAIReleaseEventForApiContract::getVersion() const {
    return m_version;
}
void OAIReleaseEventForApiContract::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIReleaseEventForApiContract::is_version_Set() const{
    return m_version_isSet;
}

bool OAIReleaseEventForApiContract::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIWebLinkForApiContract> OAIReleaseEventForApiContract::getWebLinks() const {
    return m_web_links;
}
void OAIReleaseEventForApiContract::setWebLinks(const QList<OAIWebLinkForApiContract> &web_links) {
    m_web_links = web_links;
    m_web_links_isSet = true;
}

bool OAIReleaseEventForApiContract::is_web_links_Set() const{
    return m_web_links_isSet;
}

bool OAIReleaseEventForApiContract::is_web_links_Valid() const{
    return m_web_links_isValid;
}

bool OAIReleaseEventForApiContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_picture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseEventForApiContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
