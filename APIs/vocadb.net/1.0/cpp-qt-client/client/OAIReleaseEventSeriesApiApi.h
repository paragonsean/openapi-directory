/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReleaseEventSeriesApiApi_H
#define OAI_OAIReleaseEventSeriesApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContentLanguagePreference.h"
#include "OAINameMatchMode.h"
#include "OAIReleaseEventSeriesForApiContract.h"
#include "OAIReleaseEventSeriesForApiContractPartialFindResult.h"
#include "OAIReleaseEventSeriesForEditForApiContract.h"
#include "OAIReleaseEventSeriesOptionalFields.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReleaseEventSeriesApiApi : public QObject {
    Q_OBJECT

public:
    OAIReleaseEventSeriesApiApi(const int timeOut = 0);
    ~OAIReleaseEventSeriesApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  fields OAIReleaseEventSeriesOptionalFields [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  get_total_count bool [optional]
    * @param[in]  name_match_mode OAINameMatchMode [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiReleaseEventSeriesGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReleaseEventSeriesOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIReleaseEventSeriesOptionalFields>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &get_total_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAINameMatchMode> &name_match_mode = ::OpenAPI::OptionalParam<OAINameMatchMode>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  notes QString [optional]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void apiReleaseEventSeriesIdDelete(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiReleaseEventSeriesIdForEditGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  fields OAIReleaseEventSeriesOptionalFields [optional]
    * @param[in]  lang OAIContentLanguagePreference [optional]
    */
    virtual void apiReleaseEventSeriesIdGet(const qint32 &id, const ::OpenAPI::OptionalParam<OAIReleaseEventSeriesOptionalFields> &fields = ::OpenAPI::OptionalParam<OAIReleaseEventSeriesOptionalFields>(), const ::OpenAPI::OptionalParam<OAIContentLanguagePreference> &lang = ::OpenAPI::OptionalParam<OAIContentLanguagePreference>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiReleaseEventSeriesGetCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventSeriesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventSeriesIdForEditGetCallback(OAIHttpRequestWorker *worker);
    void apiReleaseEventSeriesIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiReleaseEventSeriesGetSignal(OAIReleaseEventSeriesForApiContractPartialFindResult summary);
    void apiReleaseEventSeriesIdDeleteSignal();
    void apiReleaseEventSeriesIdForEditGetSignal(OAIReleaseEventSeriesForEditForApiContract summary);
    void apiReleaseEventSeriesIdGetSignal(OAIReleaseEventSeriesForApiContract summary);


    void apiReleaseEventSeriesGetSignalFull(OAIHttpRequestWorker *worker, OAIReleaseEventSeriesForApiContractPartialFindResult summary);
    void apiReleaseEventSeriesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiReleaseEventSeriesIdForEditGetSignalFull(OAIHttpRequestWorker *worker, OAIReleaseEventSeriesForEditForApiContract summary);
    void apiReleaseEventSeriesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIReleaseEventSeriesForApiContract summary);

    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesGetSignalError() instead")
    void apiReleaseEventSeriesGetSignalE(OAIReleaseEventSeriesForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesGetSignalError(OAIReleaseEventSeriesForApiContractPartialFindResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesIdDeleteSignalError() instead")
    void apiReleaseEventSeriesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesIdForEditGetSignalError() instead")
    void apiReleaseEventSeriesIdForEditGetSignalE(OAIReleaseEventSeriesForEditForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesIdForEditGetSignalError(OAIReleaseEventSeriesForEditForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesIdGetSignalError() instead")
    void apiReleaseEventSeriesIdGetSignalE(OAIReleaseEventSeriesForApiContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesIdGetSignalError(OAIReleaseEventSeriesForApiContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesGetSignalErrorFull() instead")
    void apiReleaseEventSeriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesIdDeleteSignalErrorFull() instead")
    void apiReleaseEventSeriesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesIdForEditGetSignalErrorFull() instead")
    void apiReleaseEventSeriesIdForEditGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesIdForEditGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiReleaseEventSeriesIdGetSignalErrorFull() instead")
    void apiReleaseEventSeriesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiReleaseEventSeriesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
