/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArchivedWebLinkContract from './ArchivedWebLinkContract';
import ArtistType from './ArtistType';
import ContentLanguageSelection from './ContentLanguageSelection';
import DiscType from './DiscType';
import EntryStatus from './EntryStatus';
import EntryThumbForApiContract from './EntryThumbForApiContract';
import EntryType from './EntryType';
import EventCategory from './EventCategory';
import LocalizedStringContract from './LocalizedStringContract';
import PVContract from './PVContract';
import SongListFeaturedCategory from './SongListFeaturedCategory';
import SongType from './SongType';
import TagUsageForApiContract from './TagUsageForApiContract';

/**
 * The EntryForApiContract model module.
 * @module model/EntryForApiContract
 * @version 1.0
 */
class EntryForApiContract {
    /**
     * Constructs a new <code>EntryForApiContract</code>.
     * @alias module:model/EntryForApiContract
     */
    constructor() { 
        
        EntryForApiContract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntryForApiContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntryForApiContract} obj Optional instance to populate.
     * @return {module:model/EntryForApiContract} The populated <code>EntryForApiContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntryForApiContract();

            if (data.hasOwnProperty('activityDate')) {
                obj['activityDate'] = ApiClient.convertToType(data['activityDate'], 'Date');
            }
            if (data.hasOwnProperty('additionalNames')) {
                obj['additionalNames'] = ApiClient.convertToType(data['additionalNames'], 'String');
            }
            if (data.hasOwnProperty('artistString')) {
                obj['artistString'] = ApiClient.convertToType(data['artistString'], 'String');
            }
            if (data.hasOwnProperty('artistType')) {
                obj['artistType'] = ArtistType.constructFromObject(data['artistType']);
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultName')) {
                obj['defaultName'] = ApiClient.convertToType(data['defaultName'], 'String');
            }
            if (data.hasOwnProperty('defaultNameLanguage')) {
                obj['defaultNameLanguage'] = ContentLanguageSelection.constructFromObject(data['defaultNameLanguage']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discType')) {
                obj['discType'] = DiscType.constructFromObject(data['discType']);
            }
            if (data.hasOwnProperty('entryType')) {
                obj['entryType'] = EntryType.constructFromObject(data['entryType']);
            }
            if (data.hasOwnProperty('eventCategory')) {
                obj['eventCategory'] = EventCategory.constructFromObject(data['eventCategory']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('mainPicture')) {
                obj['mainPicture'] = EntryThumbForApiContract.constructFromObject(data['mainPicture']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], [LocalizedStringContract]);
            }
            if (data.hasOwnProperty('pvs')) {
                obj['pvs'] = ApiClient.convertToType(data['pvs'], [PVContract]);
            }
            if (data.hasOwnProperty('releaseEventSeriesName')) {
                obj['releaseEventSeriesName'] = ApiClient.convertToType(data['releaseEventSeriesName'], 'String');
            }
            if (data.hasOwnProperty('songListFeaturedCategory')) {
                obj['songListFeaturedCategory'] = SongListFeaturedCategory.constructFromObject(data['songListFeaturedCategory']);
            }
            if (data.hasOwnProperty('songType')) {
                obj['songType'] = SongType.constructFromObject(data['songType']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EntryStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tagCategoryName')) {
                obj['tagCategoryName'] = ApiClient.convertToType(data['tagCategoryName'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagUsageForApiContract]);
            }
            if (data.hasOwnProperty('urlSlug')) {
                obj['urlSlug'] = ApiClient.convertToType(data['urlSlug'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('webLinks')) {
                obj['webLinks'] = ApiClient.convertToType(data['webLinks'], [ArchivedWebLinkContract]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntryForApiContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntryForApiContract</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalNames'] && !(typeof data['additionalNames'] === 'string' || data['additionalNames'] instanceof String)) {
            throw new Error("Expected the field `additionalNames` to be a primitive type in the JSON string but got " + data['additionalNames']);
        }
        // ensure the json data is a string
        if (data['artistString'] && !(typeof data['artistString'] === 'string' || data['artistString'] instanceof String)) {
            throw new Error("Expected the field `artistString` to be a primitive type in the JSON string but got " + data['artistString']);
        }
        // ensure the json data is a string
        if (data['defaultName'] && !(typeof data['defaultName'] === 'string' || data['defaultName'] instanceof String)) {
            throw new Error("Expected the field `defaultName` to be a primitive type in the JSON string but got " + data['defaultName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `mainPicture`
        if (data['mainPicture']) { // data not null
          EntryThumbForApiContract.validateJSON(data['mainPicture']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['names']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['names'])) {
                throw new Error("Expected the field `names` to be an array in the JSON data but got " + data['names']);
            }
            // validate the optional field `names` (array)
            for (const item of data['names']) {
                LocalizedStringContract.validateJSON(item);
            };
        }
        if (data['pvs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pvs'])) {
                throw new Error("Expected the field `pvs` to be an array in the JSON data but got " + data['pvs']);
            }
            // validate the optional field `pvs` (array)
            for (const item of data['pvs']) {
                PVContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['releaseEventSeriesName'] && !(typeof data['releaseEventSeriesName'] === 'string' || data['releaseEventSeriesName'] instanceof String)) {
            throw new Error("Expected the field `releaseEventSeriesName` to be a primitive type in the JSON string but got " + data['releaseEventSeriesName']);
        }
        // ensure the json data is a string
        if (data['tagCategoryName'] && !(typeof data['tagCategoryName'] === 'string' || data['tagCategoryName'] instanceof String)) {
            throw new Error("Expected the field `tagCategoryName` to be a primitive type in the JSON string but got " + data['tagCategoryName']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagUsageForApiContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['urlSlug'] && !(typeof data['urlSlug'] === 'string' || data['urlSlug'] instanceof String)) {
            throw new Error("Expected the field `urlSlug` to be a primitive type in the JSON string but got " + data['urlSlug']);
        }
        if (data['webLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webLinks'])) {
                throw new Error("Expected the field `webLinks` to be an array in the JSON data but got " + data['webLinks']);
            }
            // validate the optional field `webLinks` (array)
            for (const item of data['webLinks']) {
                ArchivedWebLinkContract.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Date} activityDate
 */
EntryForApiContract.prototype['activityDate'] = undefined;

/**
 * @member {String} additionalNames
 */
EntryForApiContract.prototype['additionalNames'] = undefined;

/**
 * @member {String} artistString
 */
EntryForApiContract.prototype['artistString'] = undefined;

/**
 * @member {module:model/ArtistType} artistType
 */
EntryForApiContract.prototype['artistType'] = undefined;

/**
 * @member {Date} createDate
 */
EntryForApiContract.prototype['createDate'] = undefined;

/**
 * @member {String} defaultName
 */
EntryForApiContract.prototype['defaultName'] = undefined;

/**
 * @member {module:model/ContentLanguageSelection} defaultNameLanguage
 */
EntryForApiContract.prototype['defaultNameLanguage'] = undefined;

/**
 * @member {String} description
 */
EntryForApiContract.prototype['description'] = undefined;

/**
 * @member {module:model/DiscType} discType
 */
EntryForApiContract.prototype['discType'] = undefined;

/**
 * @member {module:model/EntryType} entryType
 */
EntryForApiContract.prototype['entryType'] = undefined;

/**
 * @member {module:model/EventCategory} eventCategory
 */
EntryForApiContract.prototype['eventCategory'] = undefined;

/**
 * @member {Number} id
 */
EntryForApiContract.prototype['id'] = undefined;

/**
 * @member {module:model/EntryThumbForApiContract} mainPicture
 */
EntryForApiContract.prototype['mainPicture'] = undefined;

/**
 * @member {String} name
 */
EntryForApiContract.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/LocalizedStringContract>} names
 */
EntryForApiContract.prototype['names'] = undefined;

/**
 * @member {Array.<module:model/PVContract>} pvs
 */
EntryForApiContract.prototype['pvs'] = undefined;

/**
 * @member {String} releaseEventSeriesName
 */
EntryForApiContract.prototype['releaseEventSeriesName'] = undefined;

/**
 * @member {module:model/SongListFeaturedCategory} songListFeaturedCategory
 */
EntryForApiContract.prototype['songListFeaturedCategory'] = undefined;

/**
 * @member {module:model/SongType} songType
 */
EntryForApiContract.prototype['songType'] = undefined;

/**
 * @member {module:model/EntryStatus} status
 */
EntryForApiContract.prototype['status'] = undefined;

/**
 * @member {String} tagCategoryName
 */
EntryForApiContract.prototype['tagCategoryName'] = undefined;

/**
 * @member {Array.<module:model/TagUsageForApiContract>} tags
 */
EntryForApiContract.prototype['tags'] = undefined;

/**
 * @member {String} urlSlug
 */
EntryForApiContract.prototype['urlSlug'] = undefined;

/**
 * @member {Number} version
 */
EntryForApiContract.prototype['version'] = undefined;

/**
 * @member {Array.<module:model/ArchivedWebLinkContract>} webLinks
 */
EntryForApiContract.prototype['webLinks'] = undefined;






export default EntryForApiContract;

