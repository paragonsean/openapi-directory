/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlbumDiscPropertiesContract from './AlbumDiscPropertiesContract';
import AlbumIdentifierContract from './AlbumIdentifierContract';
import ArtistForAlbumForApiContract from './ArtistForAlbumForApiContract';
import ContentLanguageSelection from './ContentLanguageSelection';
import DiscType from './DiscType';
import EntryStatus from './EntryStatus';
import EntryThumbForApiContract from './EntryThumbForApiContract';
import LocalizedStringContract from './LocalizedStringContract';
import OptionalDateTimeContract from './OptionalDateTimeContract';
import PVContract from './PVContract';
import ReleaseEventForApiContract from './ReleaseEventForApiContract';
import SongInAlbumForApiContract from './SongInAlbumForApiContract';
import TagUsageForApiContract from './TagUsageForApiContract';
import WebLinkForApiContract from './WebLinkForApiContract';

/**
 * The AlbumForApiContract model module.
 * @module model/AlbumForApiContract
 * @version 1.0
 */
class AlbumForApiContract {
    /**
     * Constructs a new <code>AlbumForApiContract</code>.
     * @alias module:model/AlbumForApiContract
     */
    constructor() { 
        
        AlbumForApiContract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlbumForApiContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlbumForApiContract} obj Optional instance to populate.
     * @return {module:model/AlbumForApiContract} The populated <code>AlbumForApiContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlbumForApiContract();

            if (data.hasOwnProperty('additionalNames')) {
                obj['additionalNames'] = ApiClient.convertToType(data['additionalNames'], 'String');
            }
            if (data.hasOwnProperty('artistString')) {
                obj['artistString'] = ApiClient.convertToType(data['artistString'], 'String');
            }
            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], [ArtistForAlbumForApiContract]);
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('catalogNumber')) {
                obj['catalogNumber'] = ApiClient.convertToType(data['catalogNumber'], 'String');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultName')) {
                obj['defaultName'] = ApiClient.convertToType(data['defaultName'], 'String');
            }
            if (data.hasOwnProperty('defaultNameLanguage')) {
                obj['defaultNameLanguage'] = ContentLanguageSelection.constructFromObject(data['defaultNameLanguage']);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discType')) {
                obj['discType'] = DiscType.constructFromObject(data['discType']);
            }
            if (data.hasOwnProperty('discs')) {
                obj['discs'] = ApiClient.convertToType(data['discs'], [AlbumDiscPropertiesContract]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], [AlbumIdentifierContract]);
            }
            if (data.hasOwnProperty('mainPicture')) {
                obj['mainPicture'] = EntryThumbForApiContract.constructFromObject(data['mainPicture']);
            }
            if (data.hasOwnProperty('mergedTo')) {
                obj['mergedTo'] = ApiClient.convertToType(data['mergedTo'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], [LocalizedStringContract]);
            }
            if (data.hasOwnProperty('pvs')) {
                obj['pvs'] = ApiClient.convertToType(data['pvs'], [PVContract]);
            }
            if (data.hasOwnProperty('ratingAverage')) {
                obj['ratingAverage'] = ApiClient.convertToType(data['ratingAverage'], 'Number');
            }
            if (data.hasOwnProperty('ratingCount')) {
                obj['ratingCount'] = ApiClient.convertToType(data['ratingCount'], 'Number');
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = OptionalDateTimeContract.constructFromObject(data['releaseDate']);
            }
            if (data.hasOwnProperty('releaseEvent')) {
                obj['releaseEvent'] = ReleaseEventForApiContract.constructFromObject(data['releaseEvent']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EntryStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagUsageForApiContract]);
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [SongInAlbumForApiContract]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('webLinks')) {
                obj['webLinks'] = ApiClient.convertToType(data['webLinks'], [WebLinkForApiContract]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlbumForApiContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlbumForApiContract</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalNames'] && !(typeof data['additionalNames'] === 'string' || data['additionalNames'] instanceof String)) {
            throw new Error("Expected the field `additionalNames` to be a primitive type in the JSON string but got " + data['additionalNames']);
        }
        // ensure the json data is a string
        if (data['artistString'] && !(typeof data['artistString'] === 'string' || data['artistString'] instanceof String)) {
            throw new Error("Expected the field `artistString` to be a primitive type in the JSON string but got " + data['artistString']);
        }
        if (data['artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artists'])) {
                throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
            }
            // validate the optional field `artists` (array)
            for (const item of data['artists']) {
                ArtistForAlbumForApiContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // ensure the json data is a string
        if (data['catalogNumber'] && !(typeof data['catalogNumber'] === 'string' || data['catalogNumber'] instanceof String)) {
            throw new Error("Expected the field `catalogNumber` to be a primitive type in the JSON string but got " + data['catalogNumber']);
        }
        // ensure the json data is a string
        if (data['defaultName'] && !(typeof data['defaultName'] === 'string' || data['defaultName'] instanceof String)) {
            throw new Error("Expected the field `defaultName` to be a primitive type in the JSON string but got " + data['defaultName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['discs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discs'])) {
                throw new Error("Expected the field `discs` to be an array in the JSON data but got " + data['discs']);
            }
            // validate the optional field `discs` (array)
            for (const item of data['discs']) {
                AlbumDiscPropertiesContract.validateJSON(item);
            };
        }
        if (data['identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identifiers'])) {
                throw new Error("Expected the field `identifiers` to be an array in the JSON data but got " + data['identifiers']);
            }
            // validate the optional field `identifiers` (array)
            for (const item of data['identifiers']) {
                AlbumIdentifierContract.validateJSON(item);
            };
        }
        // validate the optional field `mainPicture`
        if (data['mainPicture']) { // data not null
          EntryThumbForApiContract.validateJSON(data['mainPicture']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['names']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['names'])) {
                throw new Error("Expected the field `names` to be an array in the JSON data but got " + data['names']);
            }
            // validate the optional field `names` (array)
            for (const item of data['names']) {
                LocalizedStringContract.validateJSON(item);
            };
        }
        if (data['pvs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pvs'])) {
                throw new Error("Expected the field `pvs` to be an array in the JSON data but got " + data['pvs']);
            }
            // validate the optional field `pvs` (array)
            for (const item of data['pvs']) {
                PVContract.validateJSON(item);
            };
        }
        // validate the optional field `releaseDate`
        if (data['releaseDate']) { // data not null
          OptionalDateTimeContract.validateJSON(data['releaseDate']);
        }
        // validate the optional field `releaseEvent`
        if (data['releaseEvent']) { // data not null
          ReleaseEventForApiContract.validateJSON(data['releaseEvent']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagUsageForApiContract.validateJSON(item);
            };
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                SongInAlbumForApiContract.validateJSON(item);
            };
        }
        if (data['webLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webLinks'])) {
                throw new Error("Expected the field `webLinks` to be an array in the JSON data but got " + data['webLinks']);
            }
            // validate the optional field `webLinks` (array)
            for (const item of data['webLinks']) {
                WebLinkForApiContract.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} additionalNames
 */
AlbumForApiContract.prototype['additionalNames'] = undefined;

/**
 * @member {String} artistString
 */
AlbumForApiContract.prototype['artistString'] = undefined;

/**
 * @member {Array.<module:model/ArtistForAlbumForApiContract>} artists
 */
AlbumForApiContract.prototype['artists'] = undefined;

/**
 * @member {String} barcode
 */
AlbumForApiContract.prototype['barcode'] = undefined;

/**
 * @member {String} catalogNumber
 */
AlbumForApiContract.prototype['catalogNumber'] = undefined;

/**
 * @member {Date} createDate
 */
AlbumForApiContract.prototype['createDate'] = undefined;

/**
 * @member {String} defaultName
 */
AlbumForApiContract.prototype['defaultName'] = undefined;

/**
 * @member {module:model/ContentLanguageSelection} defaultNameLanguage
 */
AlbumForApiContract.prototype['defaultNameLanguage'] = undefined;

/**
 * @member {Boolean} deleted
 */
AlbumForApiContract.prototype['deleted'] = undefined;

/**
 * @member {String} description
 */
AlbumForApiContract.prototype['description'] = undefined;

/**
 * @member {module:model/DiscType} discType
 */
AlbumForApiContract.prototype['discType'] = undefined;

/**
 * @member {Array.<module:model/AlbumDiscPropertiesContract>} discs
 */
AlbumForApiContract.prototype['discs'] = undefined;

/**
 * @member {Number} id
 */
AlbumForApiContract.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/AlbumIdentifierContract>} identifiers
 */
AlbumForApiContract.prototype['identifiers'] = undefined;

/**
 * @member {module:model/EntryThumbForApiContract} mainPicture
 */
AlbumForApiContract.prototype['mainPicture'] = undefined;

/**
 * @member {Number} mergedTo
 */
AlbumForApiContract.prototype['mergedTo'] = undefined;

/**
 * @member {String} name
 */
AlbumForApiContract.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/LocalizedStringContract>} names
 */
AlbumForApiContract.prototype['names'] = undefined;

/**
 * @member {Array.<module:model/PVContract>} pvs
 */
AlbumForApiContract.prototype['pvs'] = undefined;

/**
 * @member {Number} ratingAverage
 */
AlbumForApiContract.prototype['ratingAverage'] = undefined;

/**
 * @member {Number} ratingCount
 */
AlbumForApiContract.prototype['ratingCount'] = undefined;

/**
 * @member {module:model/OptionalDateTimeContract} releaseDate
 */
AlbumForApiContract.prototype['releaseDate'] = undefined;

/**
 * @member {module:model/ReleaseEventForApiContract} releaseEvent
 */
AlbumForApiContract.prototype['releaseEvent'] = undefined;

/**
 * @member {module:model/EntryStatus} status
 */
AlbumForApiContract.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/TagUsageForApiContract>} tags
 */
AlbumForApiContract.prototype['tags'] = undefined;

/**
 * @member {Array.<module:model/SongInAlbumForApiContract>} tracks
 */
AlbumForApiContract.prototype['tracks'] = undefined;

/**
 * @member {Number} version
 */
AlbumForApiContract.prototype['version'] = undefined;

/**
 * @member {Array.<module:model/WebLinkForApiContract>} webLinks
 */
AlbumForApiContract.prototype['webLinks'] = undefined;






export default AlbumForApiContract;

