/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentForApiContract from './CommentForApiContract';
import UserForApiContract from './UserForApiContract';

/**
 * The DiscussionTopicContract model module.
 * @module model/DiscussionTopicContract
 * @version 1.0
 */
class DiscussionTopicContract {
    /**
     * Constructs a new <code>DiscussionTopicContract</code>.
     * @alias module:model/DiscussionTopicContract
     */
    constructor() { 
        
        DiscussionTopicContract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiscussionTopicContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiscussionTopicContract} obj Optional instance to populate.
     * @return {module:model/DiscussionTopicContract} The populated <code>DiscussionTopicContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiscussionTopicContract();

            if (data.hasOwnProperty('author')) {
                obj['author'] = UserForApiContract.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('commentCount')) {
                obj['commentCount'] = ApiClient.convertToType(data['commentCount'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [CommentForApiContract]);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('folderId')) {
                obj['folderId'] = ApiClient.convertToType(data['folderId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastComment')) {
                obj['lastComment'] = CommentForApiContract.constructFromObject(data['lastComment']);
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiscussionTopicContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiscussionTopicContract</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          UserForApiContract.validateJSON(data['author']);
        }
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                CommentForApiContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // validate the optional field `lastComment`
        if (data['lastComment']) { // data not null
          CommentForApiContract.validateJSON(data['lastComment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/UserForApiContract} author
 */
DiscussionTopicContract.prototype['author'] = undefined;

/**
 * @member {Number} commentCount
 */
DiscussionTopicContract.prototype['commentCount'] = undefined;

/**
 * @member {Array.<module:model/CommentForApiContract>} comments
 */
DiscussionTopicContract.prototype['comments'] = undefined;

/**
 * @member {String} content
 */
DiscussionTopicContract.prototype['content'] = undefined;

/**
 * @member {Date} created
 */
DiscussionTopicContract.prototype['created'] = undefined;

/**
 * @member {Number} folderId
 */
DiscussionTopicContract.prototype['folderId'] = undefined;

/**
 * @member {Number} id
 */
DiscussionTopicContract.prototype['id'] = undefined;

/**
 * @member {module:model/CommentForApiContract} lastComment
 */
DiscussionTopicContract.prototype['lastComment'] = undefined;

/**
 * @member {Boolean} locked
 */
DiscussionTopicContract.prototype['locked'] = undefined;

/**
 * @member {String} name
 */
DiscussionTopicContract.prototype['name'] = undefined;






export default DiscussionTopicContract;

