/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiscType from './DiscType';
import EntryStatus from './EntryStatus';
import OptionalDateTimeContract from './OptionalDateTimeContract';
import ReleaseEventForApiContract from './ReleaseEventForApiContract';

/**
 * The AlbumContract model module.
 * @module model/AlbumContract
 * @version 1.0
 */
class AlbumContract {
    /**
     * Constructs a new <code>AlbumContract</code>.
     * @alias module:model/AlbumContract
     */
    constructor() { 
        
        AlbumContract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlbumContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlbumContract} obj Optional instance to populate.
     * @return {module:model/AlbumContract} The populated <code>AlbumContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlbumContract();

            if (data.hasOwnProperty('additionalNames')) {
                obj['additionalNames'] = ApiClient.convertToType(data['additionalNames'], 'String');
            }
            if (data.hasOwnProperty('artistString')) {
                obj['artistString'] = ApiClient.convertToType(data['artistString'], 'String');
            }
            if (data.hasOwnProperty('coverPictureMime')) {
                obj['coverPictureMime'] = ApiClient.convertToType(data['coverPictureMime'], 'String');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('discType')) {
                obj['discType'] = DiscType.constructFromObject(data['discType']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ratingAverage')) {
                obj['ratingAverage'] = ApiClient.convertToType(data['ratingAverage'], 'Number');
            }
            if (data.hasOwnProperty('ratingCount')) {
                obj['ratingCount'] = ApiClient.convertToType(data['ratingCount'], 'Number');
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = OptionalDateTimeContract.constructFromObject(data['releaseDate']);
            }
            if (data.hasOwnProperty('releaseEvent')) {
                obj['releaseEvent'] = ReleaseEventForApiContract.constructFromObject(data['releaseEvent']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EntryStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlbumContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlbumContract</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalNames'] && !(typeof data['additionalNames'] === 'string' || data['additionalNames'] instanceof String)) {
            throw new Error("Expected the field `additionalNames` to be a primitive type in the JSON string but got " + data['additionalNames']);
        }
        // ensure the json data is a string
        if (data['artistString'] && !(typeof data['artistString'] === 'string' || data['artistString'] instanceof String)) {
            throw new Error("Expected the field `artistString` to be a primitive type in the JSON string but got " + data['artistString']);
        }
        // ensure the json data is a string
        if (data['coverPictureMime'] && !(typeof data['coverPictureMime'] === 'string' || data['coverPictureMime'] instanceof String)) {
            throw new Error("Expected the field `coverPictureMime` to be a primitive type in the JSON string but got " + data['coverPictureMime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `releaseDate`
        if (data['releaseDate']) { // data not null
          OptionalDateTimeContract.validateJSON(data['releaseDate']);
        }
        // validate the optional field `releaseEvent`
        if (data['releaseEvent']) { // data not null
          ReleaseEventForApiContract.validateJSON(data['releaseEvent']);
        }

        return true;
    }


}



/**
 * @member {String} additionalNames
 */
AlbumContract.prototype['additionalNames'] = undefined;

/**
 * @member {String} artistString
 */
AlbumContract.prototype['artistString'] = undefined;

/**
 * @member {String} coverPictureMime
 */
AlbumContract.prototype['coverPictureMime'] = undefined;

/**
 * @member {Date} createDate
 */
AlbumContract.prototype['createDate'] = undefined;

/**
 * @member {Boolean} deleted
 */
AlbumContract.prototype['deleted'] = undefined;

/**
 * @member {module:model/DiscType} discType
 */
AlbumContract.prototype['discType'] = undefined;

/**
 * @member {Number} id
 */
AlbumContract.prototype['id'] = undefined;

/**
 * @member {String} name
 */
AlbumContract.prototype['name'] = undefined;

/**
 * @member {Number} ratingAverage
 */
AlbumContract.prototype['ratingAverage'] = undefined;

/**
 * @member {Number} ratingCount
 */
AlbumContract.prototype['ratingCount'] = undefined;

/**
 * @member {module:model/OptionalDateTimeContract} releaseDate
 */
AlbumContract.prototype['releaseDate'] = undefined;

/**
 * @member {module:model/ReleaseEventForApiContract} releaseEvent
 */
AlbumContract.prototype['releaseEvent'] = undefined;

/**
 * @member {module:model/EntryStatus} status
 */
AlbumContract.prototype['status'] = undefined;

/**
 * @member {Number} version
 */
AlbumContract.prototype['version'] = undefined;






export default AlbumContract;

