/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlbumContract from './AlbumContract';
import ArtistForSongContract from './ArtistForSongContract';
import ContentLanguageSelection from './ContentLanguageSelection';
import EntryStatus from './EntryStatus';
import EntryThumbForApiContract from './EntryThumbForApiContract';
import LocalizedStringContract from './LocalizedStringContract';
import LyricsForSongContract from './LyricsForSongContract';
import PVContract from './PVContract';
import PVServices from './PVServices';
import ReleaseEventForApiContract from './ReleaseEventForApiContract';
import SongType from './SongType';
import TagUsageForApiContract from './TagUsageForApiContract';
import WebLinkForApiContract from './WebLinkForApiContract';

/**
 * The SongForApiContract model module.
 * @module model/SongForApiContract
 * @version 1.0
 */
class SongForApiContract {
    /**
     * Constructs a new <code>SongForApiContract</code>.
     * @alias module:model/SongForApiContract
     */
    constructor() { 
        
        SongForApiContract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SongForApiContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SongForApiContract} obj Optional instance to populate.
     * @return {module:model/SongForApiContract} The populated <code>SongForApiContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SongForApiContract();

            if (data.hasOwnProperty('additionalNames')) {
                obj['additionalNames'] = ApiClient.convertToType(data['additionalNames'], 'String');
            }
            if (data.hasOwnProperty('albums')) {
                obj['albums'] = ApiClient.convertToType(data['albums'], [AlbumContract]);
            }
            if (data.hasOwnProperty('artistString')) {
                obj['artistString'] = ApiClient.convertToType(data['artistString'], 'String');
            }
            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], [ArtistForSongContract]);
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultName')) {
                obj['defaultName'] = ApiClient.convertToType(data['defaultName'], 'String');
            }
            if (data.hasOwnProperty('defaultNameLanguage')) {
                obj['defaultNameLanguage'] = ContentLanguageSelection.constructFromObject(data['defaultNameLanguage']);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('favoritedTimes')) {
                obj['favoritedTimes'] = ApiClient.convertToType(data['favoritedTimes'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lengthSeconds')) {
                obj['lengthSeconds'] = ApiClient.convertToType(data['lengthSeconds'], 'Number');
            }
            if (data.hasOwnProperty('lyrics')) {
                obj['lyrics'] = ApiClient.convertToType(data['lyrics'], [LyricsForSongContract]);
            }
            if (data.hasOwnProperty('mainPicture')) {
                obj['mainPicture'] = EntryThumbForApiContract.constructFromObject(data['mainPicture']);
            }
            if (data.hasOwnProperty('maxMilliBpm')) {
                obj['maxMilliBpm'] = ApiClient.convertToType(data['maxMilliBpm'], 'Number');
            }
            if (data.hasOwnProperty('mergedTo')) {
                obj['mergedTo'] = ApiClient.convertToType(data['mergedTo'], 'Number');
            }
            if (data.hasOwnProperty('minMilliBpm')) {
                obj['minMilliBpm'] = ApiClient.convertToType(data['minMilliBpm'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], [LocalizedStringContract]);
            }
            if (data.hasOwnProperty('originalVersionId')) {
                obj['originalVersionId'] = ApiClient.convertToType(data['originalVersionId'], 'Number');
            }
            if (data.hasOwnProperty('publishDate')) {
                obj['publishDate'] = ApiClient.convertToType(data['publishDate'], 'Date');
            }
            if (data.hasOwnProperty('pvServices')) {
                obj['pvServices'] = PVServices.constructFromObject(data['pvServices']);
            }
            if (data.hasOwnProperty('pvs')) {
                obj['pvs'] = ApiClient.convertToType(data['pvs'], [PVContract]);
            }
            if (data.hasOwnProperty('ratingScore')) {
                obj['ratingScore'] = ApiClient.convertToType(data['ratingScore'], 'Number');
            }
            if (data.hasOwnProperty('releaseEvent')) {
                obj['releaseEvent'] = ReleaseEventForApiContract.constructFromObject(data['releaseEvent']);
            }
            if (data.hasOwnProperty('songType')) {
                obj['songType'] = SongType.constructFromObject(data['songType']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EntryStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagUsageForApiContract]);
            }
            if (data.hasOwnProperty('thumbUrl')) {
                obj['thumbUrl'] = ApiClient.convertToType(data['thumbUrl'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('webLinks')) {
                obj['webLinks'] = ApiClient.convertToType(data['webLinks'], [WebLinkForApiContract]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SongForApiContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SongForApiContract</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalNames'] && !(typeof data['additionalNames'] === 'string' || data['additionalNames'] instanceof String)) {
            throw new Error("Expected the field `additionalNames` to be a primitive type in the JSON string but got " + data['additionalNames']);
        }
        if (data['albums']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['albums'])) {
                throw new Error("Expected the field `albums` to be an array in the JSON data but got " + data['albums']);
            }
            // validate the optional field `albums` (array)
            for (const item of data['albums']) {
                AlbumContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['artistString'] && !(typeof data['artistString'] === 'string' || data['artistString'] instanceof String)) {
            throw new Error("Expected the field `artistString` to be a primitive type in the JSON string but got " + data['artistString']);
        }
        if (data['artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artists'])) {
                throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
            }
            // validate the optional field `artists` (array)
            for (const item of data['artists']) {
                ArtistForSongContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['defaultName'] && !(typeof data['defaultName'] === 'string' || data['defaultName'] instanceof String)) {
            throw new Error("Expected the field `defaultName` to be a primitive type in the JSON string but got " + data['defaultName']);
        }
        if (data['lyrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lyrics'])) {
                throw new Error("Expected the field `lyrics` to be an array in the JSON data but got " + data['lyrics']);
            }
            // validate the optional field `lyrics` (array)
            for (const item of data['lyrics']) {
                LyricsForSongContract.validateJSON(item);
            };
        }
        // validate the optional field `mainPicture`
        if (data['mainPicture']) { // data not null
          EntryThumbForApiContract.validateJSON(data['mainPicture']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['names']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['names'])) {
                throw new Error("Expected the field `names` to be an array in the JSON data but got " + data['names']);
            }
            // validate the optional field `names` (array)
            for (const item of data['names']) {
                LocalizedStringContract.validateJSON(item);
            };
        }
        if (data['pvs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pvs'])) {
                throw new Error("Expected the field `pvs` to be an array in the JSON data but got " + data['pvs']);
            }
            // validate the optional field `pvs` (array)
            for (const item of data['pvs']) {
                PVContract.validateJSON(item);
            };
        }
        // validate the optional field `releaseEvent`
        if (data['releaseEvent']) { // data not null
          ReleaseEventForApiContract.validateJSON(data['releaseEvent']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                TagUsageForApiContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['thumbUrl'] && !(typeof data['thumbUrl'] === 'string' || data['thumbUrl'] instanceof String)) {
            throw new Error("Expected the field `thumbUrl` to be a primitive type in the JSON string but got " + data['thumbUrl']);
        }
        if (data['webLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webLinks'])) {
                throw new Error("Expected the field `webLinks` to be an array in the JSON data but got " + data['webLinks']);
            }
            // validate the optional field `webLinks` (array)
            for (const item of data['webLinks']) {
                WebLinkForApiContract.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} additionalNames
 */
SongForApiContract.prototype['additionalNames'] = undefined;

/**
 * @member {Array.<module:model/AlbumContract>} albums
 */
SongForApiContract.prototype['albums'] = undefined;

/**
 * @member {String} artistString
 */
SongForApiContract.prototype['artistString'] = undefined;

/**
 * @member {Array.<module:model/ArtistForSongContract>} artists
 */
SongForApiContract.prototype['artists'] = undefined;

/**
 * @member {Date} createDate
 */
SongForApiContract.prototype['createDate'] = undefined;

/**
 * @member {String} defaultName
 */
SongForApiContract.prototype['defaultName'] = undefined;

/**
 * @member {module:model/ContentLanguageSelection} defaultNameLanguage
 */
SongForApiContract.prototype['defaultNameLanguage'] = undefined;

/**
 * @member {Boolean} deleted
 */
SongForApiContract.prototype['deleted'] = undefined;

/**
 * @member {Number} favoritedTimes
 */
SongForApiContract.prototype['favoritedTimes'] = undefined;

/**
 * @member {Number} id
 */
SongForApiContract.prototype['id'] = undefined;

/**
 * @member {Number} lengthSeconds
 */
SongForApiContract.prototype['lengthSeconds'] = undefined;

/**
 * @member {Array.<module:model/LyricsForSongContract>} lyrics
 */
SongForApiContract.prototype['lyrics'] = undefined;

/**
 * @member {module:model/EntryThumbForApiContract} mainPicture
 */
SongForApiContract.prototype['mainPicture'] = undefined;

/**
 * @member {Number} maxMilliBpm
 */
SongForApiContract.prototype['maxMilliBpm'] = undefined;

/**
 * @member {Number} mergedTo
 */
SongForApiContract.prototype['mergedTo'] = undefined;

/**
 * @member {Number} minMilliBpm
 */
SongForApiContract.prototype['minMilliBpm'] = undefined;

/**
 * @member {String} name
 */
SongForApiContract.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/LocalizedStringContract>} names
 */
SongForApiContract.prototype['names'] = undefined;

/**
 * @member {Number} originalVersionId
 */
SongForApiContract.prototype['originalVersionId'] = undefined;

/**
 * @member {Date} publishDate
 */
SongForApiContract.prototype['publishDate'] = undefined;

/**
 * @member {module:model/PVServices} pvServices
 */
SongForApiContract.prototype['pvServices'] = undefined;

/**
 * @member {Array.<module:model/PVContract>} pvs
 */
SongForApiContract.prototype['pvs'] = undefined;

/**
 * @member {Number} ratingScore
 */
SongForApiContract.prototype['ratingScore'] = undefined;

/**
 * @member {module:model/ReleaseEventForApiContract} releaseEvent
 */
SongForApiContract.prototype['releaseEvent'] = undefined;

/**
 * @member {module:model/SongType} songType
 */
SongForApiContract.prototype['songType'] = undefined;

/**
 * @member {module:model/EntryStatus} status
 */
SongForApiContract.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/TagUsageForApiContract>} tags
 */
SongForApiContract.prototype['tags'] = undefined;

/**
 * @member {String} thumbUrl
 */
SongForApiContract.prototype['thumbUrl'] = undefined;

/**
 * @member {Number} version
 */
SongForApiContract.prototype['version'] = undefined;

/**
 * @member {Array.<module:model/WebLinkForApiContract>} webLinks
 */
SongForApiContract.prototype['webLinks'] = undefined;






export default SongForApiContract;

