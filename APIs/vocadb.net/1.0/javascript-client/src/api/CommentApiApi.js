/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentForApiContract from '../model/CommentForApiContract';
import CommentForApiContractPartialFindResult from '../model/CommentForApiContractPartialFindResult';
import CommentOptionalFields from '../model/CommentOptionalFields';
import CommentSortRule from '../model/CommentSortRule';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import EntryOptionalFields from '../model/EntryOptionalFields';
import EntryType from '../model/EntryType';

/**
* CommentApi service.
* @module api/CommentApiApi
* @version 1.0
*/
export default class CommentApiApi {

    /**
    * Constructs a new CommentApiApi. 
    * @alias module:api/CommentApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCommentsEntryTypeCommentsCommentIdDelete operation.
     * @callback module:api/CommentApiApi~apiCommentsEntryTypeCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EntryType} entryType 
     * @param {Number} commentId 
     * @param {module:api/CommentApiApi~apiCommentsEntryTypeCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCommentsEntryTypeCommentsCommentIdDelete(entryType, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'entryType' is set
      if (entryType === undefined || entryType === null) {
        throw new Error("Missing the required parameter 'entryType' when calling apiCommentsEntryTypeCommentsCommentIdDelete");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiCommentsEntryTypeCommentsCommentIdDelete");
      }

      let pathParams = {
        'entryType': entryType,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/comments/{entryType}-comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCommentsEntryTypeCommentsCommentIdPost operation.
     * @callback module:api/CommentApiApi~apiCommentsEntryTypeCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EntryType} entryType 
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/CommentApiApi~apiCommentsEntryTypeCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCommentsEntryTypeCommentsCommentIdPost(entryType, commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'entryType' is set
      if (entryType === undefined || entryType === null) {
        throw new Error("Missing the required parameter 'entryType' when calling apiCommentsEntryTypeCommentsCommentIdPost");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiCommentsEntryTypeCommentsCommentIdPost");
      }

      let pathParams = {
        'entryType': entryType,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/comments/{entryType}-comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCommentsEntryTypeCommentsGet operation.
     * @callback module:api/CommentApiApi~apiCommentsEntryTypeCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EntryType} entryType 
     * @param {Object} opts Optional parameters
     * @param {Number} [entryId] 
     * @param {module:api/CommentApiApi~apiCommentsEntryTypeCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContractPartialFindResult}
     */
    apiCommentsEntryTypeCommentsGet(entryType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entryType' is set
      if (entryType === undefined || entryType === null) {
        throw new Error("Missing the required parameter 'entryType' when calling apiCommentsEntryTypeCommentsGet");
      }

      let pathParams = {
        'entryType': entryType
      };
      let queryParams = {
        'entryId': opts['entryId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/comments/{entryType}-comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCommentsEntryTypeCommentsPost operation.
     * @callback module:api/CommentApiApi~apiCommentsEntryTypeCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EntryType} entryType 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/CommentApiApi~apiCommentsEntryTypeCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiCommentsEntryTypeCommentsPost(entryType, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'entryType' is set
      if (entryType === undefined || entryType === null) {
        throw new Error("Missing the required parameter 'entryType' when calling apiCommentsEntryTypeCommentsPost");
      }

      let pathParams = {
        'entryType': entryType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/comments/{entryType}-comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCommentsGet operation.
     * @callback module:api/CommentApiApi~apiCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Date} [before] 
     * @param {Date} [since] 
     * @param {Number} [userId] 
     * @param {module:model/EntryType} [entryType] 
     * @param {Number} [maxResults = 50)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/CommentOptionalFields} [fields] 
     * @param {module:model/EntryOptionalFields} [entryFields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:model/CommentSortRule} [sortRule] 
     * @param {module:api/CommentApiApi~apiCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContractPartialFindResult}
     */
    apiCommentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'before': opts['before'],
        'since': opts['since'],
        'userId': opts['userId'],
        'entryType': opts['entryType'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'fields': opts['fields'],
        'entryFields': opts['entryFields'],
        'lang': opts['lang'],
        'sortRule': opts['sortRule']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
