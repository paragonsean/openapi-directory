/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentForApiContract from '../model/CommentForApiContract';
import CommentForApiContractPartialFindResult from '../model/CommentForApiContractPartialFindResult';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import EntryType from '../model/EntryType';
import NameMatchMode from '../model/NameMatchMode';
import TagBaseContract from '../model/TagBaseContract';
import TagForApiContract from '../model/TagForApiContract';
import TagForApiContractPartialFindResult from '../model/TagForApiContractPartialFindResult';
import TagOptionalFields from '../model/TagOptionalFields';
import TagReportType from '../model/TagReportType';
import TagSortRule from '../model/TagSortRule';
import TagTargetTypes from '../model/TagTargetTypes';

/**
* TagApi service.
* @module api/TagApiApi
* @version 1.0
*/
export default class TagApiApi {

    /**
    * Constructs a new TagApiApi. 
    * @alias module:api/TagApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTagsByNameNameGet operation.
     * @callback module:api/TagApiApi~apiTagsByNameNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {module:model/TagOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/TagApiApi~apiTagsByNameNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagForApiContract}
     */
    apiTagsByNameNameGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiTagsByNameNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TagForApiContract;
      return this.apiClient.callApi(
        '/api/tags/byName/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsCategoryNamesGet operation.
     * @callback module:api/TagApiApi~apiTagsCategoryNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:api/TagApiApi~apiTagsCategoryNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiTagsCategoryNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'nameMatchMode': opts['nameMatchMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/tags/categoryNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsCommentsCommentIdDelete operation.
     * @callback module:api/TagApiApi~apiTagsCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {module:api/TagApiApi~apiTagsCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTagsCommentsCommentIdDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiTagsCommentsCommentIdDelete");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/tags/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsCommentsCommentIdPost operation.
     * @callback module:api/TagApiApi~apiTagsCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/TagApiApi~apiTagsCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTagsCommentsCommentIdPost(commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiTagsCommentsCommentIdPost");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/tags/comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsGet operation.
     * @callback module:api/TagApiApi~apiTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {Boolean} [allowChildren = true)] 
     * @param {String} [categoryName = '')] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/TagSortRule} [sort] 
     * @param {Boolean} [preferAccurateMatches = false)] 
     * @param {module:model/TagOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:model/TagTargetTypes} [target] 
     * @param {module:api/TagApiApi~apiTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagForApiContractPartialFindResult}
     */
    apiTagsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'allowChildren': opts['allowChildren'],
        'categoryName': opts['categoryName'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'nameMatchMode': opts['nameMatchMode'],
        'sort': opts['sort'],
        'preferAccurateMatches': opts['preferAccurateMatches'],
        'fields': opts['fields'],
        'lang': opts['lang'],
        'target': opts['target']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TagForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsIdDelete operation.
     * @callback module:api/TagApiApi~apiTagsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notes = '')] 
     * @param {Boolean} [hardDelete = false)] 
     * @param {module:api/TagApiApi~apiTagsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTagsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTagsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notes': opts['notes'],
        'hardDelete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/tags/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsIdGet operation.
     * @callback module:api/TagApiApi~apiTagsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/TagOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/TagApiApi~apiTagsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagForApiContract}
     */
    apiTagsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTagsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TagForApiContract;
      return this.apiClient.callApi(
        '/api/tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsNamesGet operation.
     * @callback module:api/TagApiApi~apiTagsNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {Boolean} [allowAliases = true)] 
     * @param {Number} [maxResults = 10)] 
     * @param {module:api/TagApiApi~apiTagsNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiTagsNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'allowAliases': opts['allowAliases'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/tags/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsPost operation.
     * @callback module:api/TagApiApi~apiTagsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagBaseContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {module:api/TagApiApi~apiTagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagBaseContract}
     */
    apiTagsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = TagBaseContract;
      return this.apiClient.callApi(
        '/api/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsTagIdChildrenGet operation.
     * @callback module:api/TagApiApi~apiTagsTagIdChildrenGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TagOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/TagApiApi~apiTagsTagIdChildrenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagForApiContract>}
     */
    apiTagsTagIdChildrenGet(tagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling apiTagsTagIdChildrenGet");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [TagForApiContract];
      return this.apiClient.callApi(
        '/api/tags/{tagId}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsTagIdCommentsGet operation.
     * @callback module:api/TagApiApi~apiTagsTagIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {module:api/TagApiApi~apiTagsTagIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContractPartialFindResult}
     */
    apiTagsTagIdCommentsGet(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling apiTagsTagIdCommentsGet");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/tags/{tagId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsTagIdCommentsPost operation.
     * @callback module:api/TagApiApi~apiTagsTagIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/TagApiApi~apiTagsTagIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiTagsTagIdCommentsPost(tagId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling apiTagsTagIdCommentsPost");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/tags/{tagId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsTagIdReportsPost operation.
     * @callback module:api/TagApiApi~apiTagsTagIdReportsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TagReportType} [reportType] 
     * @param {String} [notes] 
     * @param {Number} [versionNumber] 
     * @param {module:api/TagApiApi~apiTagsTagIdReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTagsTagIdReportsPost(tagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling apiTagsTagIdReportsPost");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
        'reportType': opts['reportType'],
        'notes': opts['notes'],
        'versionNumber': opts['versionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/tags/{tagId}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTagsTopGet operation.
     * @callback module:api/TagApiApi~apiTagsTopGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagBaseContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [categoryName] 
     * @param {module:model/EntryType} [entryType] 
     * @param {Number} [maxResults = 15)] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/TagApiApi~apiTagsTopGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagBaseContract>}
     */
    apiTagsTopGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'categoryName': opts['categoryName'],
        'entryType': opts['entryType'],
        'maxResults': opts['maxResults'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [TagBaseContract];
      return this.apiClient.callApi(
        '/api/tags/top', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
