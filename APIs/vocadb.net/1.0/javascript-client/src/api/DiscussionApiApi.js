/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentForApiContract from '../model/CommentForApiContract';
import DiscussionFolderContract from '../model/DiscussionFolderContract';
import DiscussionFolderOptionalFields from '../model/DiscussionFolderOptionalFields';
import DiscussionTopicContract from '../model/DiscussionTopicContract';
import DiscussionTopicContractPartialFindResult from '../model/DiscussionTopicContractPartialFindResult';
import DiscussionTopicOptionalFields from '../model/DiscussionTopicOptionalFields';
import DiscussionTopicSortRule from '../model/DiscussionTopicSortRule';

/**
* DiscussionApi service.
* @module api/DiscussionApiApi
* @version 1.0
*/
export default class DiscussionApiApi {

    /**
    * Constructs a new DiscussionApiApi. 
    * @alias module:api/DiscussionApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDiscussionsCommentsCommentIdDelete operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {module:api/DiscussionApiApi~apiDiscussionsCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDiscussionsCommentsCommentIdDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiDiscussionsCommentsCommentIdDelete");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/discussions/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsCommentsCommentIdPost operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDiscussionsCommentsCommentIdPost(commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiDiscussionsCommentsCommentIdPost");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/discussions/comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsFoldersFolderIdTopicsGet operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsFoldersFolderIdTopicsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DiscussionTopicContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} folderId 
     * @param {Object} opts Optional parameters
     * @param {module:model/DiscussionTopicOptionalFields} [fields] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsFoldersFolderIdTopicsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DiscussionTopicContract>}
     */
    apiDiscussionsFoldersFolderIdTopicsGet(folderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling apiDiscussionsFoldersFolderIdTopicsGet");
      }

      let pathParams = {
        'folderId': folderId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [DiscussionTopicContract];
      return this.apiClient.callApi(
        '/api/discussions/folders/{folderId}/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsFoldersFolderIdTopicsPost operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsFoldersFolderIdTopicsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscussionTopicContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} folderId 
     * @param {Object} opts Optional parameters
     * @param {module:model/DiscussionTopicContract} [discussionTopicContract] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsFoldersFolderIdTopicsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscussionTopicContract}
     */
    apiDiscussionsFoldersFolderIdTopicsPost(folderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['discussionTopicContract'];
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling apiDiscussionsFoldersFolderIdTopicsPost");
      }

      let pathParams = {
        'folderId': folderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = DiscussionTopicContract;
      return this.apiClient.callApi(
        '/api/discussions/folders/{folderId}/topics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsFoldersGet operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsFoldersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DiscussionFolderContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DiscussionFolderOptionalFields} [fields] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsFoldersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DiscussionFolderContract>}
     */
    apiDiscussionsFoldersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [DiscussionFolderContract];
      return this.apiClient.callApi(
        '/api/discussions/folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsFoldersPost operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsFoldersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscussionFolderContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DiscussionFolderContract} [discussionFolderContract] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsFoldersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscussionFolderContract}
     */
    apiDiscussionsFoldersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['discussionFolderContract'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = DiscussionFolderContract;
      return this.apiClient.callApi(
        '/api/discussions/folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsTopicsGet operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsTopicsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscussionTopicContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [folderId] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/DiscussionTopicSortRule} [sort] 
     * @param {module:model/DiscussionTopicOptionalFields} [fields] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsTopicsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscussionTopicContractPartialFindResult}
     */
    apiDiscussionsTopicsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'folderId': opts['folderId'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = DiscussionTopicContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/discussions/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsTopicsTopicIdCommentsPost operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} topicId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiDiscussionsTopicsTopicIdCommentsPost(topicId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling apiDiscussionsTopicsTopicIdCommentsPost");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/discussions/topics/{topicId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsTopicsTopicIdDelete operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} topicId 
     * @param {module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDiscussionsTopicsTopicIdDelete(topicId, callback) {
      let postBody = null;
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling apiDiscussionsTopicsTopicIdDelete");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/discussions/topics/{topicId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsTopicsTopicIdGet operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscussionTopicContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} topicId 
     * @param {Object} opts Optional parameters
     * @param {module:model/DiscussionTopicOptionalFields} [fields] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscussionTopicContract}
     */
    apiDiscussionsTopicsTopicIdGet(topicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling apiDiscussionsTopicsTopicIdGet");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = DiscussionTopicContract;
      return this.apiClient.callApi(
        '/api/discussions/topics/{topicId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscussionsTopicsTopicIdPost operation.
     * @callback module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} topicId 
     * @param {Object} opts Optional parameters
     * @param {module:model/DiscussionTopicContract} [discussionTopicContract] 
     * @param {module:api/DiscussionApiApi~apiDiscussionsTopicsTopicIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDiscussionsTopicsTopicIdPost(topicId, opts, callback) {
      opts = opts || {};
      let postBody = opts['discussionTopicContract'];
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling apiDiscussionsTopicsTopicIdPost");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/discussions/topics/{topicId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
