/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedSearchFilterParams from '../model/AdvancedSearchFilterParams';
import CommentForApiContract from '../model/CommentForApiContract';
import CommentForApiContractPartialFindResult from '../model/CommentForApiContractPartialFindResult';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import NameMatchMode from '../model/NameMatchMode';
import PVServices from '../model/PVServices';
import SongInListForApiContractPartialFindResult from '../model/SongInListForApiContractPartialFindResult';
import SongListFeaturedCategory from '../model/SongListFeaturedCategory';
import SongListForApiContractPartialFindResult from '../model/SongListForApiContractPartialFindResult';
import SongListForEditForApiContract from '../model/SongListForEditForApiContract';
import SongListOptionalFields from '../model/SongListOptionalFields';
import SongListSortRule from '../model/SongListSortRule';
import SongOptionalFields from '../model/SongOptionalFields';
import SongSortRule from '../model/SongSortRule';

/**
* SongListApi service.
* @module api/SongListApiApi
* @version 1.0
*/
export default class SongListApiApi {

    /**
    * Constructs a new SongListApiApi. 
    * @alias module:api/SongListApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSongListsCommentsCommentIdDelete operation.
     * @callback module:api/SongListApiApi~apiSongListsCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {module:api/SongListApiApi~apiSongListsCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSongListsCommentsCommentIdDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiSongListsCommentsCommentIdDelete");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/songLists/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsCommentsCommentIdPost operation.
     * @callback module:api/SongListApiApi~apiSongListsCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/SongListApiApi~apiSongListsCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSongListsCommentsCommentIdPost(commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiSongListsCommentsCommentIdPost");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/songLists/comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsFeaturedGet operation.
     * @callback module:api/SongListApiApi~apiSongListsFeaturedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongListForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {Array.<Number>} [tagId] 
     * @param {Boolean} [childTags = false)] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/SongListFeaturedCategory} [featuredCategory] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/SongListSortRule} [sort] 
     * @param {module:model/SongListOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/SongListApiApi~apiSongListsFeaturedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongListForApiContractPartialFindResult}
     */
    apiSongListsFeaturedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'childTags': opts['childTags'],
        'nameMatchMode': opts['nameMatchMode'],
        'featuredCategory': opts['featuredCategory'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongListForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/songLists/featured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsFeaturedNamesGet operation.
     * @callback module:api/SongListApiApi~apiSongListsFeaturedNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/SongListFeaturedCategory} [featuredCategory] 
     * @param {Number} [maxResults = 10)] 
     * @param {module:api/SongListApiApi~apiSongListsFeaturedNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiSongListsFeaturedNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'nameMatchMode': opts['nameMatchMode'],
        'featuredCategory': opts['featuredCategory'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/songLists/featured/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsIdDelete operation.
     * @callback module:api/SongListApiApi~apiSongListsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notes = '')] 
     * @param {Boolean} [hardDelete = false)] 
     * @param {module:api/SongListApiApi~apiSongListsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSongListsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongListsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notes': opts['notes'],
        'hardDelete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/songLists/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsListIdCommentsGet operation.
     * @callback module:api/SongListApiApi~apiSongListsListIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} listId 
     * @param {module:api/SongListApiApi~apiSongListsListIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContractPartialFindResult}
     */
    apiSongListsListIdCommentsGet(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling apiSongListsListIdCommentsGet");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/songLists/{listId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsListIdCommentsPost operation.
     * @callback module:api/SongListApiApi~apiSongListsListIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} listId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/SongListApiApi~apiSongListsListIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiSongListsListIdCommentsPost(listId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling apiSongListsListIdCommentsPost");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/songLists/{listId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsListIdSongsGet operation.
     * @callback module:api/SongListApiApi~apiSongListsListIdSongsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongInListForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} listId 
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {String} [songTypes] 
     * @param {module:model/PVServices} [pvServices] 
     * @param {Array.<Number>} [tagId] 
     * @param {Array.<Number>} [artistId] 
     * @param {Boolean} [childVoicebanks = false)] 
     * @param {Array.<module:model/AdvancedSearchFilterParams>} [advancedFilters] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/SongSortRule} [sort] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/SongListApiApi~apiSongListsListIdSongsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongInListForApiContractPartialFindResult}
     */
    apiSongListsListIdSongsGet(listId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling apiSongListsListIdSongsGet");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
        'query': opts['query'],
        'songTypes': opts['songTypes'],
        'pvServices': opts['pvServices'],
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'artistId[]': this.apiClient.buildCollectionParam(opts['artistId'], 'multi'),
        'childVoicebanks': opts['childVoicebanks'],
        'advancedFilters': this.apiClient.buildCollectionParam(opts['advancedFilters'], 'multi'),
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'nameMatchMode': opts['nameMatchMode'],
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongInListForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/songLists/{listId}/songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongListsPost operation.
     * @callback module:api/SongListApiApi~apiSongListsPostCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/SongListForEditForApiContract} [songListForEditForApiContract] 
     * @param {module:api/SongListApiApi~apiSongListsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    apiSongListsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['songListForEditForApiContract'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/songLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
