/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedSearchFilterParams from '../model/AdvancedSearchFilterParams';
import AlbumForApiContract from '../model/AlbumForApiContract';
import AlbumForApiContractPartialFindResult from '../model/AlbumForApiContractPartialFindResult';
import AlbumForUserForApiContract from '../model/AlbumForUserForApiContract';
import AlbumOptionalFields from '../model/AlbumOptionalFields';
import AlbumReviewContract from '../model/AlbumReviewContract';
import AlbumSortRule from '../model/AlbumSortRule';
import ArtistAlbumParticipationStatus from '../model/ArtistAlbumParticipationStatus';
import CommentForApiContract from '../model/CommentForApiContract';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import DiscType from '../model/DiscType';
import EntryStatus from '../model/EntryStatus';
import NameMatchMode from '../model/NameMatchMode';
import SongInAlbumForApiContract from '../model/SongInAlbumForApiContract';
import SongOptionalFields from '../model/SongOptionalFields';

/**
* AlbumApi service.
* @module api/AlbumApiApi
* @version 1.0
*/
export default class AlbumApiApi {

    /**
    * Constructs a new AlbumApiApi. 
    * @alias module:api/AlbumApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiAlbumsCommentsCommentIdDelete operation.
     * @callback module:api/AlbumApiApi~apiAlbumsCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {module:api/AlbumApiApi~apiAlbumsCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlbumsCommentsCommentIdDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiAlbumsCommentsCommentIdDelete");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/albums/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsCommentsCommentIdPost operation.
     * @callback module:api/AlbumApiApi~apiAlbumsCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/AlbumApiApi~apiAlbumsCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlbumsCommentsCommentIdPost(commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiAlbumsCommentsCommentIdPost");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/albums/comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/DiscType} [discTypes] 
     * @param {Array.<String>} [tagName] 
     * @param {Array.<Number>} [tagId] 
     * @param {Boolean} [childTags = false)] 
     * @param {Array.<Number>} [artistId] 
     * @param {module:model/ArtistAlbumParticipationStatus} [artistParticipationStatus] 
     * @param {Boolean} [childVoicebanks = false)] 
     * @param {Boolean} [includeMembers = false)] 
     * @param {String} [barcode] 
     * @param {module:model/EntryStatus} [status] 
     * @param {Date} [releaseDateAfter] 
     * @param {Date} [releaseDateBefore] 
     * @param {Array.<module:model/AdvancedSearchFilterParams>} [advancedFilters] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/AlbumSortRule} [sort] 
     * @param {Boolean} [preferAccurateMatches = false)] 
     * @param {Boolean} [deleted = false)] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/AlbumOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/AlbumApiApi~apiAlbumsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumForApiContractPartialFindResult}
     */
    apiAlbumsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'discTypes': opts['discTypes'],
        'tagName[]': this.apiClient.buildCollectionParam(opts['tagName'], 'multi'),
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'childTags': opts['childTags'],
        'artistId[]': this.apiClient.buildCollectionParam(opts['artistId'], 'multi'),
        'artistParticipationStatus': opts['artistParticipationStatus'],
        'childVoicebanks': opts['childVoicebanks'],
        'includeMembers': opts['includeMembers'],
        'barcode': opts['barcode'],
        'status': opts['status'],
        'releaseDateAfter': opts['releaseDateAfter'],
        'releaseDateBefore': opts['releaseDateBefore'],
        'advancedFilters': this.apiClient.buildCollectionParam(opts['advancedFilters'], 'multi'),
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'preferAccurateMatches': opts['preferAccurateMatches'],
        'deleted': opts['deleted'],
        'nameMatchMode': opts['nameMatchMode'],
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlbumForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdCommentsGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AlbumApiApi~apiAlbumsIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentForApiContract>}
     */
    apiAlbumsIdCommentsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdCommentsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CommentForApiContract];
      return this.apiClient.callApi(
        '/api/albums/{id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdCommentsPost operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiAlbumsIdCommentsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdCommentsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/albums/{id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdDelete operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notes = '')] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlbumsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/albums/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/AlbumOptionalFields} [fields] 
     * @param {module:model/SongOptionalFields} [songFields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumForApiContract}
     */
    apiAlbumsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'songFields': opts['songFields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlbumForApiContract;
      return this.apiClient.callApi(
        '/api/albums/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdReviewsGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlbumReviewContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [languageCode] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlbumReviewContract>}
     */
    apiAlbumsIdReviewsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdReviewsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'languageCode': opts['languageCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlbumReviewContract];
      return this.apiClient.callApi(
        '/api/albums/{id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdReviewsPost operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdReviewsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumReviewContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/AlbumReviewContract} [albumReviewContract] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdReviewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumReviewContract}
     */
    apiAlbumsIdReviewsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['albumReviewContract'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdReviewsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlbumReviewContract;
      return this.apiClient.callApi(
        '/api/albums/{id}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdReviewsReviewIdDelete operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdReviewsReviewIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} reviewId 
     * @param {String} id 
     * @param {module:api/AlbumApiApi~apiAlbumsIdReviewsReviewIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlbumsIdReviewsReviewIdDelete(reviewId, id, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling apiAlbumsIdReviewsReviewIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdReviewsReviewIdDelete");
      }

      let pathParams = {
        'reviewId': reviewId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/albums/{id}/reviews/{reviewId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdTracksFieldsGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdTracksFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [field] 
     * @param {Number} [discNumber] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdTracksFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: String}>}
     */
    apiAlbumsIdTracksFieldsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdTracksFieldsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'field[]': this.apiClient.buildCollectionParam(opts['field'], 'multi'),
        'discNumber': opts['discNumber'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [{'String': 'String'}];
      return this.apiClient.callApi(
        '/api/albums/{id}/tracks/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdTracksGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdTracksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongInAlbumForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdTracksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongInAlbumForApiContract>}
     */
    apiAlbumsIdTracksGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdTracksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SongInAlbumForApiContract];
      return this.apiClient.callApi(
        '/api/albums/{id}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsIdUserCollectionsGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsIdUserCollectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlbumForUserForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentLanguagePreference} [languagePreference] 
     * @param {module:api/AlbumApiApi~apiAlbumsIdUserCollectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlbumForUserForApiContract>}
     */
    apiAlbumsIdUserCollectionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlbumsIdUserCollectionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'languagePreference': opts['languagePreference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlbumForUserForApiContract];
      return this.apiClient.callApi(
        '/api/albums/{id}/user-collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsNamesGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {Number} [maxResults = 15)] 
     * @param {module:api/AlbumApiApi~apiAlbumsNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiAlbumsNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'nameMatchMode': opts['nameMatchMode'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/albums/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsNewGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsNewGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlbumForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentLanguagePreference} [languagePreference] 
     * @param {module:model/AlbumOptionalFields} [fields] 
     * @param {module:api/AlbumApiApi~apiAlbumsNewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlbumForApiContract>}
     */
    apiAlbumsNewGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'languagePreference': opts['languagePreference'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlbumForApiContract];
      return this.apiClient.callApi(
        '/api/albums/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlbumsTopGet operation.
     * @callback module:api/AlbumApiApi~apiAlbumsTopGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlbumForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ignoreIds] 
     * @param {module:model/ContentLanguagePreference} [languagePreference] 
     * @param {module:model/AlbumOptionalFields} [fields] 
     * @param {module:api/AlbumApiApi~apiAlbumsTopGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlbumForApiContract>}
     */
    apiAlbumsTopGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ignoreIds[]': this.apiClient.buildCollectionParam(opts['ignoreIds'], 'multi'),
        'languagePreference': opts['languagePreference'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlbumForApiContract];
      return this.apiClient.callApi(
        '/api/albums/top', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
