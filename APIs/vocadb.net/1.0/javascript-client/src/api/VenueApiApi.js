/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import DistanceUnit from '../model/DistanceUnit';
import NameMatchMode from '../model/NameMatchMode';
import VenueForApiContractPartialFindResult from '../model/VenueForApiContractPartialFindResult';
import VenueOptionalFields from '../model/VenueOptionalFields';
import VenueReportType from '../model/VenueReportType';
import VenueSortRule from '../model/VenueSortRule';

/**
* VenueApi service.
* @module api/VenueApiApi
* @version 1.0
*/
export default class VenueApiApi {

    /**
    * Constructs a new VenueApiApi. 
    * @alias module:api/VenueApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiVenuesGet operation.
     * @callback module:api/VenueApiApi~apiVenuesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VenueForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/VenueOptionalFields} [fields] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:model/VenueSortRule} [sortRule] 
     * @param {Number} [latitude] 
     * @param {Number} [longitude] 
     * @param {Number} [radius] 
     * @param {module:model/DistanceUnit} [distanceUnit] 
     * @param {module:api/VenueApiApi~apiVenuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VenueForApiContractPartialFindResult}
     */
    apiVenuesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'fields': opts['fields'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'nameMatchMode': opts['nameMatchMode'],
        'lang': opts['lang'],
        'sortRule': opts['sortRule'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'distanceUnit': opts['distanceUnit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = VenueForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/venues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVenuesIdDelete operation.
     * @callback module:api/VenueApiApi~apiVenuesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notes = '')] 
     * @param {Boolean} [hardDelete = false)] 
     * @param {module:api/VenueApiApi~apiVenuesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiVenuesIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiVenuesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notes': opts['notes'],
        'hardDelete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/venues/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVenuesIdReportsPost operation.
     * @callback module:api/VenueApiApi~apiVenuesIdReportsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/VenueReportType} [reportType] 
     * @param {String} [notes] 
     * @param {Number} [versionNumber] 
     * @param {module:api/VenueApiApi~apiVenuesIdReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiVenuesIdReportsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiVenuesIdReportsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'reportType': opts['reportType'],
        'notes': opts['notes'],
        'versionNumber': opts['versionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/venues/{id}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
