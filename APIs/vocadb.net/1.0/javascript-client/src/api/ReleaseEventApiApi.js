/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlbumForApiContract from '../model/AlbumForApiContract';
import AlbumOptionalFields from '../model/AlbumOptionalFields';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import EntryStatus from '../model/EntryStatus';
import EventCategory from '../model/EventCategory';
import EventReportType from '../model/EventReportType';
import EventSortRule from '../model/EventSortRule';
import NameMatchMode from '../model/NameMatchMode';
import ReleaseEventForApiContract from '../model/ReleaseEventForApiContract';
import ReleaseEventForApiContractPartialFindResult from '../model/ReleaseEventForApiContractPartialFindResult';
import ReleaseEventOptionalFields from '../model/ReleaseEventOptionalFields';
import SongForApiContract from '../model/SongForApiContract';
import SongOptionalFields from '../model/SongOptionalFields';
import SortDirection from '../model/SortDirection';

/**
* ReleaseEventApi service.
* @module api/ReleaseEventApiApi
* @version 1.0
*/
export default class ReleaseEventApiApi {

    /**
    * Constructs a new ReleaseEventApiApi. 
    * @alias module:api/ReleaseEventApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiReleaseEventsEventIdAlbumsGet operation.
     * @callback module:api/ReleaseEventApiApi~apiReleaseEventsEventIdAlbumsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlbumForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} eventId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AlbumOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/ReleaseEventApiApi~apiReleaseEventsEventIdAlbumsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlbumForApiContract>}
     */
    apiReleaseEventsEventIdAlbumsGet(eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling apiReleaseEventsEventIdAlbumsGet");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [AlbumForApiContract];
      return this.apiClient.callApi(
        '/api/releaseEvents/{eventId}/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReleaseEventsEventIdPublishedSongsGet operation.
     * @callback module:api/ReleaseEventApiApi~apiReleaseEventsEventIdPublishedSongsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} eventId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/ReleaseEventApiApi~apiReleaseEventsEventIdPublishedSongsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongForApiContract>}
     */
    apiReleaseEventsEventIdPublishedSongsGet(eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling apiReleaseEventsEventIdPublishedSongsGet");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SongForApiContract];
      return this.apiClient.callApi(
        '/api/releaseEvents/{eventId}/published-songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReleaseEventsEventIdReportsPost operation.
     * @callback module:api/ReleaseEventApiApi~apiReleaseEventsEventIdReportsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} eventId 
     * @param {Object} opts Optional parameters
     * @param {module:model/EventReportType} [reportType] 
     * @param {String} [notes] 
     * @param {Number} [versionNumber] 
     * @param {module:api/ReleaseEventApiApi~apiReleaseEventsEventIdReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiReleaseEventsEventIdReportsPost(eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling apiReleaseEventsEventIdReportsPost");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'reportType': opts['reportType'],
        'notes': opts['notes'],
        'versionNumber': opts['versionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/releaseEvents/{eventId}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReleaseEventsGet operation.
     * @callback module:api/ReleaseEventApiApi~apiReleaseEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleaseEventForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {Number} [seriesId = 0)] 
     * @param {Date} [afterDate] 
     * @param {Date} [beforeDate] 
     * @param {module:model/EventCategory} [category] 
     * @param {Number} [userCollectionId] 
     * @param {Array.<Number>} [tagId] 
     * @param {Boolean} [childTags = false)] 
     * @param {Array.<Number>} [artistId] 
     * @param {Boolean} [childVoicebanks = false)] 
     * @param {Boolean} [includeMembers = false)] 
     * @param {module:model/EntryStatus} [status] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/EventSortRule} [sort] 
     * @param {module:model/ReleaseEventOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:model/SortDirection} [sortDirection] 
     * @param {module:api/ReleaseEventApiApi~apiReleaseEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleaseEventForApiContractPartialFindResult}
     */
    apiReleaseEventsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'nameMatchMode': opts['nameMatchMode'],
        'seriesId': opts['seriesId'],
        'afterDate': opts['afterDate'],
        'beforeDate': opts['beforeDate'],
        'category': opts['category'],
        'userCollectionId': opts['userCollectionId'],
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'childTags': opts['childTags'],
        'artistId[]': this.apiClient.buildCollectionParam(opts['artistId'], 'multi'),
        'childVoicebanks': opts['childVoicebanks'],
        'includeMembers': opts['includeMembers'],
        'status': opts['status'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'fields': opts['fields'],
        'lang': opts['lang'],
        'sortDirection': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ReleaseEventForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/releaseEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReleaseEventsIdDelete operation.
     * @callback module:api/ReleaseEventApiApi~apiReleaseEventsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notes = '')] 
     * @param {Boolean} [hardDelete = false)] 
     * @param {module:api/ReleaseEventApiApi~apiReleaseEventsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiReleaseEventsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiReleaseEventsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notes': opts['notes'],
        'hardDelete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/releaseEvents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReleaseEventsIdGet operation.
     * @callback module:api/ReleaseEventApiApi~apiReleaseEventsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReleaseEventForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReleaseEventOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/ReleaseEventApiApi~apiReleaseEventsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReleaseEventForApiContract}
     */
    apiReleaseEventsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiReleaseEventsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ReleaseEventForApiContract;
      return this.apiClient.callApi(
        '/api/releaseEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiReleaseEventsNamesGet operation.
     * @callback module:api/ReleaseEventApiApi~apiReleaseEventsNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {Number} [maxResults = 10)] 
     * @param {module:api/ReleaseEventApiApi~apiReleaseEventsNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiReleaseEventsNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/releaseEvents/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
