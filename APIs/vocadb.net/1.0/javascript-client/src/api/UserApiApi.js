/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedSearchFilterParams from '../model/AdvancedSearchFilterParams';
import AlbumForUserForApiContract from '../model/AlbumForUserForApiContract';
import AlbumForUserForApiContractPartialFindResult from '../model/AlbumForUserForApiContractPartialFindResult';
import AlbumOptionalFields from '../model/AlbumOptionalFields';
import AlbumSortRule from '../model/AlbumSortRule';
import ArtistForUserForApiContract from '../model/ArtistForUserForApiContract';
import ArtistForUserForApiContractPartialFindResult from '../model/ArtistForUserForApiContractPartialFindResult';
import ArtistOptionalFields from '../model/ArtistOptionalFields';
import ArtistSortRule from '../model/ArtistSortRule';
import ArtistType from '../model/ArtistType';
import CommentForApiContract from '../model/CommentForApiContract';
import CommentForApiContractPartialFindResult from '../model/CommentForApiContractPartialFindResult';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import CreateReportModel from '../model/CreateReportModel';
import DiscType from '../model/DiscType';
import EntryEditDataContract from '../model/EntryEditDataContract';
import EntryType from '../model/EntryType';
import LogicalGrouping from '../model/LogicalGrouping';
import MediaType from '../model/MediaType';
import NameMatchMode from '../model/NameMatchMode';
import PVServices from '../model/PVServices';
import PurchaseStatus from '../model/PurchaseStatus';
import PurchaseStatuses from '../model/PurchaseStatuses';
import RatedSongForUserForApiContractPartialFindResult from '../model/RatedSongForUserForApiContractPartialFindResult';
import RatedSongForUserSortRule from '../model/RatedSongForUserSortRule';
import ReleaseEventForApiContract from '../model/ReleaseEventForApiContract';
import SongListForApiContractPartialFindResult from '../model/SongListForApiContractPartialFindResult';
import SongListOptionalFields from '../model/SongListOptionalFields';
import SongListSortRule from '../model/SongListSortRule';
import SongOptionalFields from '../model/SongOptionalFields';
import SongVoteRating from '../model/SongVoteRating';
import UserEventRelationshipType from '../model/UserEventRelationshipType';
import UserForApiContract from '../model/UserForApiContract';
import UserForApiContractPartialFindResult from '../model/UserForApiContractPartialFindResult';
import UserGroupId from '../model/UserGroupId';
import UserInboxType from '../model/UserInboxType';
import UserMessageContract from '../model/UserMessageContract';
import UserMessageContractPartialFindResult from '../model/UserMessageContractPartialFindResult';
import UserOptionalFields from '../model/UserOptionalFields';
import UserSortRule from '../model/UserSortRule';

/**
* UserApi service.
* @module api/UserApiApi
* @version 1.0
*/
export default class UserApiApi {

    /**
    * Constructs a new UserApiApi. 
    * @alias module:api/UserApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiUsersCurrentAlbumCollectionStatusesAlbumIdGet operation.
     * @callback module:api/UserApiApi~apiUsersCurrentAlbumCollectionStatusesAlbumIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumForUserForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} albumId 
     * @param {module:api/UserApiApi~apiUsersCurrentAlbumCollectionStatusesAlbumIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumForUserForApiContract}
     */
    apiUsersCurrentAlbumCollectionStatusesAlbumIdGet(albumId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling apiUsersCurrentAlbumCollectionStatusesAlbumIdGet");
      }

      let pathParams = {
        'albumId': albumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlbumForUserForApiContract;
      return this.apiClient.callApi(
        '/api/users/current/album-collection-statuses/{albumId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentAlbumsAlbumIdPost operation.
     * @callback module:api/UserApiApi~apiUsersCurrentAlbumsAlbumIdPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} albumId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PurchaseStatus} [collectionStatus] 
     * @param {module:model/MediaType} [mediaType] 
     * @param {Number} [rating] 
     * @param {module:api/UserApiApi~apiUsersCurrentAlbumsAlbumIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiUsersCurrentAlbumsAlbumIdPost(albumId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling apiUsersCurrentAlbumsAlbumIdPost");
      }

      let pathParams = {
        'albumId': albumId
      };
      let queryParams = {
        'collectionStatus': opts['collectionStatus'],
        'mediaType': opts['mediaType'],
        'rating': opts['rating']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/users/current/albums/{albumId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentFollowedArtistsArtistIdGet operation.
     * @callback module:api/UserApiApi~apiUsersCurrentFollowedArtistsArtistIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistForUserForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} artistId 
     * @param {module:api/UserApiApi~apiUsersCurrentFollowedArtistsArtistIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistForUserForApiContract}
     */
    apiUsersCurrentFollowedArtistsArtistIdGet(artistId, callback) {
      let postBody = null;
      // verify the required parameter 'artistId' is set
      if (artistId === undefined || artistId === null) {
        throw new Error("Missing the required parameter 'artistId' when calling apiUsersCurrentFollowedArtistsArtistIdGet");
      }

      let pathParams = {
        'artistId': artistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ArtistForUserForApiContract;
      return this.apiClient.callApi(
        '/api/users/current/followedArtists/{artistId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentFollowedTagsTagIdDelete operation.
     * @callback module:api/UserApiApi~apiUsersCurrentFollowedTagsTagIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {module:api/UserApiApi~apiUsersCurrentFollowedTagsTagIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersCurrentFollowedTagsTagIdDelete(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling apiUsersCurrentFollowedTagsTagIdDelete");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/current/followedTags/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentFollowedTagsTagIdPost operation.
     * @callback module:api/UserApiApi~apiUsersCurrentFollowedTagsTagIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} tagId 
     * @param {module:api/UserApiApi~apiUsersCurrentFollowedTagsTagIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersCurrentFollowedTagsTagIdPost(tagId, callback) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling apiUsersCurrentFollowedTagsTagIdPost");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/current/followedTags/{tagId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentGet operation.
     * @callback module:api/UserApiApi~apiUsersCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UserOptionalFields} [fields] 
     * @param {module:api/UserApiApi~apiUsersCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserForApiContract}
     */
    apiUsersCurrentGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserForApiContract;
      return this.apiClient.callApi(
        '/api/users/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentRatedSongsSongIdGet operation.
     * @callback module:api/UserApiApi~apiUsersCurrentRatedSongsSongIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongVoteRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} songId 
     * @param {module:api/UserApiApi~apiUsersCurrentRatedSongsSongIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongVoteRating}
     */
    apiUsersCurrentRatedSongsSongIdGet(songId, callback) {
      let postBody = null;
      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling apiUsersCurrentRatedSongsSongIdGet");
      }

      let pathParams = {
        'songId': songId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongVoteRating;
      return this.apiClient.callApi(
        '/api/users/current/ratedSongs/{songId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentRefreshEntryEditPost operation.
     * @callback module:api/UserApiApi~apiUsersCurrentRefreshEntryEditPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntryEditDataContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/EntryType} [entryType] 
     * @param {Number} [entryId] 
     * @param {module:api/UserApiApi~apiUsersCurrentRefreshEntryEditPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntryEditDataContract}
     */
    apiUsersCurrentRefreshEntryEditPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'entryType': opts['entryType'],
        'entryId': opts['entryId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = EntryEditDataContract;
      return this.apiClient.callApi(
        '/api/users/current/refreshEntryEdit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersCurrentSongTagsSongIdPost operation.
     * @callback module:api/UserApiApi~apiUsersCurrentSongTagsSongIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} songId 
     * @param {module:api/UserApiApi~apiUsersCurrentSongTagsSongIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersCurrentSongTagsSongIdPost(songId, callback) {
      let postBody = null;
      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling apiUsersCurrentSongTagsSongIdPost");
      }

      let pathParams = {
        'songId': songId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/current/songTags/{songId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersGet operation.
     * @callback module:api/UserApiApi~apiUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/UserGroupId} [groups] 
     * @param {Date} [joinDateAfter] 
     * @param {Date} [joinDateBefore] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/UserSortRule} [sort] 
     * @param {Boolean} [includeDisabled = false)] 
     * @param {Boolean} [onlyVerified = false)] 
     * @param {String} [knowsLanguage] 
     * @param {module:model/UserOptionalFields} [fields] 
     * @param {module:api/UserApiApi~apiUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserForApiContractPartialFindResult}
     */
    apiUsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'groups': opts['groups'],
        'joinDateAfter': opts['joinDateAfter'],
        'joinDateBefore': opts['joinDateBefore'],
        'nameMatchMode': opts['nameMatchMode'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'includeDisabled': opts['includeDisabled'],
        'onlyVerified': opts['onlyVerified'],
        'knowsLanguage': opts['knowsLanguage'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdAlbumCollectionStatusesAlbumIdGet operation.
     * @callback module:api/UserApiApi~apiUsersIdAlbumCollectionStatusesAlbumIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumForUserForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Number} albumId 
     * @param {module:api/UserApiApi~apiUsersIdAlbumCollectionStatusesAlbumIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumForUserForApiContract}
     */
    apiUsersIdAlbumCollectionStatusesAlbumIdGet(id, albumId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdAlbumCollectionStatusesAlbumIdGet");
      }
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling apiUsersIdAlbumCollectionStatusesAlbumIdGet");
      }

      let pathParams = {
        'id': id,
        'albumId': albumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlbumForUserForApiContract;
      return this.apiClient.callApi(
        '/api/users/{id}/album-collection-statuses/{albumId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdAlbumsGet operation.
     * @callback module:api/UserApiApi~apiUsersIdAlbumsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumForUserForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {Number} [tagId] 
     * @param {String} [tag] 
     * @param {Number} [artistId] 
     * @param {module:model/PurchaseStatuses} [purchaseStatuses] 
     * @param {Number} [releaseEventId = 0)] 
     * @param {module:model/DiscType} [albumTypes] 
     * @param {Array.<module:model/AdvancedSearchFilterParams>} [advancedFilters] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/AlbumSortRule} [sort] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/AlbumOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:model/MediaType} [mediaType] 
     * @param {module:api/UserApiApi~apiUsersIdAlbumsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumForUserForApiContractPartialFindResult}
     */
    apiUsersIdAlbumsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdAlbumsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': opts['query'],
        'tagId': opts['tagId'],
        'tag': opts['tag'],
        'artistId': opts['artistId'],
        'purchaseStatuses': opts['purchaseStatuses'],
        'releaseEventId': opts['releaseEventId'],
        'albumTypes': opts['albumTypes'],
        'advancedFilters': this.apiClient.buildCollectionParam(opts['advancedFilters'], 'multi'),
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'nameMatchMode': opts['nameMatchMode'],
        'fields': opts['fields'],
        'lang': opts['lang'],
        'mediaType': opts['mediaType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = AlbumForUserForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/users/{id}/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdEventsGet operation.
     * @callback module:api/UserApiApi~apiUsersIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReleaseEventForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserEventRelationshipType} [relationshipType] 
     * @param {module:api/UserApiApi~apiUsersIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReleaseEventForApiContract>}
     */
    apiUsersIdEventsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdEventsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'relationshipType': opts['relationshipType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [ReleaseEventForApiContract];
      return this.apiClient.callApi(
        '/api/users/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdFollowedArtistsArtistIdGet operation.
     * @callback module:api/UserApiApi~apiUsersIdFollowedArtistsArtistIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistForUserForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Number} artistId 
     * @param {module:api/UserApiApi~apiUsersIdFollowedArtistsArtistIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistForUserForApiContract}
     */
    apiUsersIdFollowedArtistsArtistIdGet(id, artistId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdFollowedArtistsArtistIdGet");
      }
      // verify the required parameter 'artistId' is set
      if (artistId === undefined || artistId === null) {
        throw new Error("Missing the required parameter 'artistId' when calling apiUsersIdFollowedArtistsArtistIdGet");
      }

      let pathParams = {
        'id': id,
        'artistId': artistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ArtistForUserForApiContract;
      return this.apiClient.callApi(
        '/api/users/{id}/followedArtists/{artistId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdFollowedArtistsGet operation.
     * @callback module:api/UserApiApi~apiUsersIdFollowedArtistsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistForUserForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {Array.<Number>} [tagId] 
     * @param {module:model/ArtistType} [artistType] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/ArtistSortRule} [sort] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/ArtistOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/UserApiApi~apiUsersIdFollowedArtistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistForUserForApiContractPartialFindResult}
     */
    apiUsersIdFollowedArtistsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdFollowedArtistsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': opts['query'],
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'artistType': opts['artistType'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'nameMatchMode': opts['nameMatchMode'],
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ArtistForUserForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/users/{id}/followedArtists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdGet operation.
     * @callback module:api/UserApiApi~apiUsersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserOptionalFields} [fields] 
     * @param {module:api/UserApiApi~apiUsersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserForApiContract}
     */
    apiUsersIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserForApiContract;
      return this.apiClient.callApi(
        '/api/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdMessagesDelete operation.
     * @callback module:api/UserApiApi~apiUsersIdMessagesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [messageId] 
     * @param {module:api/UserApiApi~apiUsersIdMessagesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersIdMessagesDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdMessagesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'messageId': this.apiClient.buildCollectionParam(opts['messageId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/{id}/messages', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdMessagesGet operation.
     * @callback module:api/UserApiApi~apiUsersIdMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserMessageContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInboxType} [inbox] 
     * @param {Boolean} [unread = false)] 
     * @param {Number} [anotherUserId] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:api/UserApiApi~apiUsersIdMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserMessageContractPartialFindResult}
     */
    apiUsersIdMessagesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdMessagesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'inbox': opts['inbox'],
        'unread': opts['unread'],
        'anotherUserId': opts['anotherUserId'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserMessageContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/users/{id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdMessagesPost operation.
     * @callback module:api/UserApiApi~apiUsersIdMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserMessageContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserMessageContract} [userMessageContract] 
     * @param {module:api/UserApiApi~apiUsersIdMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserMessageContract}
     */
    apiUsersIdMessagesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['userMessageContract'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdMessagesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserMessageContract;
      return this.apiClient.callApi(
        '/api/users/{id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdProfileCommentsGet operation.
     * @callback module:api/UserApiApi~apiUsersIdProfileCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:api/UserApiApi~apiUsersIdProfileCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContractPartialFindResult}
     */
    apiUsersIdProfileCommentsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdProfileCommentsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/users/{id}/profileComments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdProfileCommentsPost operation.
     * @callback module:api/UserApiApi~apiUsersIdProfileCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/UserApiApi~apiUsersIdProfileCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiUsersIdProfileCommentsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdProfileCommentsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/users/{id}/profileComments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdRatedSongsGet operation.
     * @callback module:api/UserApiApi~apiUsersIdRatedSongsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RatedSongForUserForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {String} [tagName] 
     * @param {Array.<Number>} [tagId] 
     * @param {Array.<Number>} [artistId] 
     * @param {Boolean} [childVoicebanks = false)] 
     * @param {module:model/LogicalGrouping} [artistGrouping] 
     * @param {module:model/SongVoteRating} [rating] 
     * @param {Number} [songListId] 
     * @param {Boolean} [groupByRating = true)] 
     * @param {module:model/PVServices} [pvServices] 
     * @param {Array.<module:model/AdvancedSearchFilterParams>} [advancedFilters] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/RatedSongForUserSortRule} [sort] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/UserApiApi~apiUsersIdRatedSongsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RatedSongForUserForApiContractPartialFindResult}
     */
    apiUsersIdRatedSongsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdRatedSongsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': opts['query'],
        'tagName': opts['tagName'],
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'artistId[]': this.apiClient.buildCollectionParam(opts['artistId'], 'multi'),
        'childVoicebanks': opts['childVoicebanks'],
        'artistGrouping': opts['artistGrouping'],
        'rating': opts['rating'],
        'songListId': opts['songListId'],
        'groupByRating': opts['groupByRating'],
        'pvServices': opts['pvServices'],
        'advancedFilters': this.apiClient.buildCollectionParam(opts['advancedFilters'], 'multi'),
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'nameMatchMode': opts['nameMatchMode'],
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = RatedSongForUserForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/users/{id}/ratedSongs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdRatedSongsSongIdGet operation.
     * @callback module:api/UserApiApi~apiUsersIdRatedSongsSongIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongVoteRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Number} songId 
     * @param {module:api/UserApiApi~apiUsersIdRatedSongsSongIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongVoteRating}
     */
    apiUsersIdRatedSongsSongIdGet(id, songId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdRatedSongsSongIdGet");
      }
      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling apiUsersIdRatedSongsSongIdGet");
      }

      let pathParams = {
        'id': id,
        'songId': songId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongVoteRating;
      return this.apiClient.callApi(
        '/api/users/{id}/ratedSongs/{songId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdReportsPost operation.
     * @callback module:api/UserApiApi~apiUsersIdReportsPostCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateReportModel} [createReportModel] 
     * @param {module:api/UserApiApi~apiUsersIdReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    apiUsersIdReportsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['createReportModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdReportsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/users/{id}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdSettingsSettingNamePost operation.
     * @callback module:api/UserApiApi~apiUsersIdSettingsSettingNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {String} settingName 
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/UserApiApi~apiUsersIdSettingsSettingNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersIdSettingsSettingNamePost(id, settingName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdSettingsSettingNamePost");
      }
      // verify the required parameter 'settingName' is set
      if (settingName === undefined || settingName === null) {
        throw new Error("Missing the required parameter 'settingName' when calling apiUsersIdSettingsSettingNamePost");
      }

      let pathParams = {
        'id': id,
        'settingName': settingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/{id}/settings/{settingName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersIdSongListsGet operation.
     * @callback module:api/UserApiApi~apiUsersIdSongListsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongListForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {Array.<Number>} [tagId] 
     * @param {Boolean} [childTags = false)] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/SongListSortRule} [sort] 
     * @param {module:model/SongListOptionalFields} [fields] 
     * @param {module:api/UserApiApi~apiUsersIdSongListsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongListForApiContractPartialFindResult}
     */
    apiUsersIdSongListsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUsersIdSongListsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': opts['query'],
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'childTags': opts['childTags'],
        'nameMatchMode': opts['nameMatchMode'],
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongListForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/users/{id}/songLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersMessagesMessageIdGet operation.
     * @callback module:api/UserApiApi~apiUsersMessagesMessageIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserMessageContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} messageId 
     * @param {module:api/UserApiApi~apiUsersMessagesMessageIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserMessageContract}
     */
    apiUsersMessagesMessageIdGet(messageId, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling apiUsersMessagesMessageIdGet");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = UserMessageContract;
      return this.apiClient.callApi(
        '/api/users/messages/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersNamesGet operation.
     * @callback module:api/UserApiApi~apiUsersNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [includeDisabled = false)] 
     * @param {module:api/UserApiApi~apiUsersNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiUsersNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'nameMatchMode': opts['nameMatchMode'],
        'maxResults': opts['maxResults'],
        'includeDisabled': opts['includeDisabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/users/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersProfileCommentsCommentIdDelete operation.
     * @callback module:api/UserApiApi~apiUsersProfileCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {module:api/UserApiApi~apiUsersProfileCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersProfileCommentsCommentIdDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiUsersProfileCommentsCommentIdDelete");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/profileComments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUsersProfileCommentsCommentIdPost operation.
     * @callback module:api/UserApiApi~apiUsersProfileCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/UserApiApi~apiUsersProfileCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUsersProfileCommentsCommentIdPost(commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiUsersProfileCommentsCommentIdPost");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/users/profileComments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
