/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedSearchFilterParams from '../model/AdvancedSearchFilterParams';
import ArtistForApiContract from '../model/ArtistForApiContract';
import ArtistForApiContractPartialFindResult from '../model/ArtistForApiContractPartialFindResult';
import ArtistOptionalFields from '../model/ArtistOptionalFields';
import ArtistRelationsFields from '../model/ArtistRelationsFields';
import ArtistSortRule from '../model/ArtistSortRule';
import CommentForApiContract from '../model/CommentForApiContract';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import EntryStatus from '../model/EntryStatus';
import NameMatchMode from '../model/NameMatchMode';

/**
* ArtistApi service.
* @module api/ArtistApiApi
* @version 1.0
*/
export default class ArtistApiApi {

    /**
    * Constructs a new ArtistApiApi. 
    * @alias module:api/ArtistApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiArtistsCommentsCommentIdDelete operation.
     * @callback module:api/ArtistApiApi~apiArtistsCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {module:api/ArtistApiApi~apiArtistsCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiArtistsCommentsCommentIdDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiArtistsCommentsCommentIdDelete");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/artists/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiArtistsCommentsCommentIdPost operation.
     * @callback module:api/ArtistApiApi~apiArtistsCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/ArtistApiApi~apiArtistsCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiArtistsCommentsCommentIdPost(commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiArtistsCommentsCommentIdPost");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/artists/comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiArtistsGet operation.
     * @callback module:api/ArtistApiApi~apiArtistsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {String} [artistTypes] 
     * @param {Boolean} [allowBaseVoicebanks = true)] 
     * @param {Array.<String>} [tagName] 
     * @param {Array.<Number>} [tagId] 
     * @param {Boolean} [childTags = false)] 
     * @param {Number} [followedByUserId] 
     * @param {module:model/EntryStatus} [status] 
     * @param {Array.<module:model/AdvancedSearchFilterParams>} [advancedFilters] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/ArtistSortRule} [sort] 
     * @param {Boolean} [preferAccurateMatches = false)] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/ArtistOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/ArtistApiApi~apiArtistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistForApiContractPartialFindResult}
     */
    apiArtistsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'artistTypes': opts['artistTypes'],
        'allowBaseVoicebanks': opts['allowBaseVoicebanks'],
        'tagName[]': this.apiClient.buildCollectionParam(opts['tagName'], 'multi'),
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'childTags': opts['childTags'],
        'followedByUserId': opts['followedByUserId'],
        'status': opts['status'],
        'advancedFilters': this.apiClient.buildCollectionParam(opts['advancedFilters'], 'multi'),
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'preferAccurateMatches': opts['preferAccurateMatches'],
        'nameMatchMode': opts['nameMatchMode'],
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ArtistForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/artists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiArtistsIdCommentsGet operation.
     * @callback module:api/ArtistApiApi~apiArtistsIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/ArtistApiApi~apiArtistsIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentForApiContract>}
     */
    apiArtistsIdCommentsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiArtistsIdCommentsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CommentForApiContract];
      return this.apiClient.callApi(
        '/api/artists/{id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiArtistsIdCommentsPost operation.
     * @callback module:api/ArtistApiApi~apiArtistsIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/ArtistApiApi~apiArtistsIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiArtistsIdCommentsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiArtistsIdCommentsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/artists/{id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiArtistsIdDelete operation.
     * @callback module:api/ArtistApiApi~apiArtistsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notes = '')] 
     * @param {module:api/ArtistApiApi~apiArtistsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiArtistsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiArtistsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/artists/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiArtistsIdGet operation.
     * @callback module:api/ArtistApiApi~apiArtistsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ArtistOptionalFields} [fields] 
     * @param {module:model/ArtistRelationsFields} [relations] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/ArtistApiApi~apiArtistsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistForApiContract}
     */
    apiArtistsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiArtistsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'relations': opts['relations'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ArtistForApiContract;
      return this.apiClient.callApi(
        '/api/artists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiArtistsNamesGet operation.
     * @callback module:api/ArtistApiApi~apiArtistsNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {Number} [maxResults = 15)] 
     * @param {module:api/ArtistApiApi~apiArtistsNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiArtistsNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'nameMatchMode': opts['nameMatchMode'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/artists/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
