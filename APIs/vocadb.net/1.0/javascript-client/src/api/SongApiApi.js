/**
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedSearchFilterParams from '../model/AdvancedSearchFilterParams';
import ArtistAlbumParticipationStatus from '../model/ArtistAlbumParticipationStatus';
import CommentForApiContract from '../model/CommentForApiContract';
import ContentLanguagePreference from '../model/ContentLanguagePreference';
import EntryStatus from '../model/EntryStatus';
import LyricsForSongContract from '../model/LyricsForSongContract';
import NameMatchMode from '../model/NameMatchMode';
import PVService from '../model/PVService';
import PVServices from '../model/PVServices';
import RatedSongForUserForApiContract from '../model/RatedSongForUserForApiContract';
import RelatedSongsContract from '../model/RelatedSongsContract';
import SongForApiContract from '../model/SongForApiContract';
import SongForApiContractPartialFindResult from '../model/SongForApiContractPartialFindResult';
import SongOptionalFields from '../model/SongOptionalFields';
import SongRatingContract from '../model/SongRatingContract';
import SongSortRule from '../model/SongSortRule';
import SongVocalistSelection from '../model/SongVocalistSelection';
import TopSongsDateFilterType from '../model/TopSongsDateFilterType';
import UserOptionalFields from '../model/UserOptionalFields';

/**
* SongApi service.
* @module api/SongApiApi
* @version 1.0
*/
export default class SongApiApi {

    /**
    * Constructs a new SongApiApi. 
    * @alias module:api/SongApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSongsByPvGet operation.
     * @callback module:api/SongApiApi~apiSongsByPvGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/PVService} [pvService] 
     * @param {String} [pvId] 
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/SongApiApi~apiSongsByPvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongForApiContract}
     */
    apiSongsByPvGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pvService': opts['pvService'],
        'pvId': opts['pvId'],
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongForApiContract;
      return this.apiClient.callApi(
        '/api/songs/byPv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsCommentsCommentIdDelete operation.
     * @callback module:api/SongApiApi~apiSongsCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {module:api/SongApiApi~apiSongsCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSongsCommentsCommentIdDelete(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiSongsCommentsCommentIdDelete");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/songs/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsCommentsCommentIdPost operation.
     * @callback module:api/SongApiApi~apiSongsCommentsCommentIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/SongApiApi~apiSongsCommentsCommentIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSongsCommentsCommentIdPost(commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling apiSongsCommentsCommentIdPost");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/songs/comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsGet operation.
     * @callback module:api/SongApiApi~apiSongsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongForApiContractPartialFindResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {String} [songTypes] 
     * @param {Date} [afterDate] 
     * @param {Date} [beforeDate] 
     * @param {Array.<String>} [tagName] 
     * @param {Array.<Number>} [tagId] 
     * @param {Boolean} [childTags = false)] 
     * @param {Boolean} [unifyTypesAndTags = false)] 
     * @param {Array.<Number>} [artistId] 
     * @param {module:model/ArtistAlbumParticipationStatus} [artistParticipationStatus] 
     * @param {Boolean} [childVoicebanks = false)] 
     * @param {Boolean} [includeMembers = false)] 
     * @param {Boolean} [onlyWithPvs = false)] 
     * @param {module:model/PVServices} [pvServices] 
     * @param {Number} [since] 
     * @param {Number} [minScore] 
     * @param {Number} [userCollectionId] 
     * @param {Number} [releaseEventId] 
     * @param {Number} [parentSongId] 
     * @param {module:model/EntryStatus} [status] 
     * @param {Array.<module:model/AdvancedSearchFilterParams>} [advancedFilters] 
     * @param {Number} [start = 0)] 
     * @param {Number} [maxResults = 10)] 
     * @param {Boolean} [getTotalCount = false)] 
     * @param {module:model/SongSortRule} [sort] 
     * @param {Boolean} [preferAccurateMatches = false)] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {Number} [minMilliBpm] 
     * @param {Number} [maxMilliBpm] 
     * @param {Number} [minLength] 
     * @param {Number} [maxLength] 
     * @param {module:api/SongApiApi~apiSongsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongForApiContractPartialFindResult}
     */
    apiSongsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'songTypes': opts['songTypes'],
        'afterDate': opts['afterDate'],
        'beforeDate': opts['beforeDate'],
        'tagName[]': this.apiClient.buildCollectionParam(opts['tagName'], 'multi'),
        'tagId[]': this.apiClient.buildCollectionParam(opts['tagId'], 'multi'),
        'childTags': opts['childTags'],
        'unifyTypesAndTags': opts['unifyTypesAndTags'],
        'artistId[]': this.apiClient.buildCollectionParam(opts['artistId'], 'multi'),
        'artistParticipationStatus': opts['artistParticipationStatus'],
        'childVoicebanks': opts['childVoicebanks'],
        'includeMembers': opts['includeMembers'],
        'onlyWithPvs': opts['onlyWithPvs'],
        'pvServices': opts['pvServices'],
        'since': opts['since'],
        'minScore': opts['minScore'],
        'userCollectionId': opts['userCollectionId'],
        'releaseEventId': opts['releaseEventId'],
        'parentSongId': opts['parentSongId'],
        'status': opts['status'],
        'advancedFilters': this.apiClient.buildCollectionParam(opts['advancedFilters'], 'multi'),
        'start': opts['start'],
        'maxResults': opts['maxResults'],
        'getTotalCount': opts['getTotalCount'],
        'sort': opts['sort'],
        'preferAccurateMatches': opts['preferAccurateMatches'],
        'nameMatchMode': opts['nameMatchMode'],
        'fields': opts['fields'],
        'lang': opts['lang'],
        'minMilliBpm': opts['minMilliBpm'],
        'maxMilliBpm': opts['maxMilliBpm'],
        'minLength': opts['minLength'],
        'maxLength': opts['maxLength']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongForApiContractPartialFindResult;
      return this.apiClient.callApi(
        '/api/songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsHighlightedGet operation.
     * @callback module:api/SongApiApi~apiSongsHighlightedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentLanguagePreference} [languagePreference] 
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:api/SongApiApi~apiSongsHighlightedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongForApiContract>}
     */
    apiSongsHighlightedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'languagePreference': opts['languagePreference'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SongForApiContract];
      return this.apiClient.callApi(
        '/api/songs/highlighted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdCommentsGet operation.
     * @callback module:api/SongApiApi~apiSongsIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SongApiApi~apiSongsIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentForApiContract>}
     */
    apiSongsIdCommentsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdCommentsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CommentForApiContract];
      return this.apiClient.callApi(
        '/api/songs/{id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdCommentsPost operation.
     * @callback module:api/SongApiApi~apiSongsIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentForApiContract} [commentForApiContract] 
     * @param {module:api/SongApiApi~apiSongsIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentForApiContract}
     */
    apiSongsIdCommentsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentForApiContract'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdCommentsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CommentForApiContract;
      return this.apiClient.callApi(
        '/api/songs/{id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdDelete operation.
     * @callback module:api/SongApiApi~apiSongsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} [notes = '')] 
     * @param {module:api/SongApiApi~apiSongsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSongsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notes': opts['notes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/songs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdDerivedGet operation.
     * @callback module:api/SongApiApi~apiSongsIdDerivedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/SongApiApi~apiSongsIdDerivedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongForApiContract>}
     */
    apiSongsIdDerivedGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdDerivedGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SongForApiContract];
      return this.apiClient.callApi(
        '/api/songs/{id}/derived', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdGet operation.
     * @callback module:api/SongApiApi~apiSongsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongForApiContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/SongApiApi~apiSongsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongForApiContract}
     */
    apiSongsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SongForApiContract;
      return this.apiClient.callApi(
        '/api/songs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdRatingsGet operation.
     * @callback module:api/SongApiApi~apiSongsIdRatingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RatedSongForUserForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserOptionalFields} [userFields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/SongApiApi~apiSongsIdRatingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RatedSongForUserForApiContract>}
     */
    apiSongsIdRatingsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdRatingsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'userFields': opts['userFields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [RatedSongForUserForApiContract];
      return this.apiClient.callApi(
        '/api/songs/{id}/ratings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdRatingsPost operation.
     * @callback module:api/SongApiApi~apiSongsIdRatingsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SongRatingContract} [songRatingContract] 
     * @param {module:api/SongApiApi~apiSongsIdRatingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSongsIdRatingsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['songRatingContract'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdRatingsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/songs/{id}/ratings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsIdRelatedGet operation.
     * @callback module:api/SongApiApi~apiSongsIdRelatedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedSongsContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [lang] 
     * @param {module:api/SongApiApi~apiSongsIdRelatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedSongsContract}
     */
    apiSongsIdRelatedGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSongsIdRelatedGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = RelatedSongsContract;
      return this.apiClient.callApi(
        '/api/songs/{id}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsLyricsLyricsIdGet operation.
     * @callback module:api/SongApiApi~apiSongsLyricsLyricsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LyricsForSongContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} lyricsId 
     * @param {module:api/SongApiApi~apiSongsLyricsLyricsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LyricsForSongContract}
     */
    apiSongsLyricsLyricsIdGet(lyricsId, callback) {
      let postBody = null;
      // verify the required parameter 'lyricsId' is set
      if (lyricsId === undefined || lyricsId === null) {
        throw new Error("Missing the required parameter 'lyricsId' when calling apiSongsLyricsLyricsIdGet");
      }

      let pathParams = {
        'lyricsId': lyricsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = LyricsForSongContract;
      return this.apiClient.callApi(
        '/api/songs/lyrics/{lyricsId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsNamesGet operation.
     * @callback module:api/SongApiApi~apiSongsNamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [query = '')] 
     * @param {module:model/NameMatchMode} [nameMatchMode] 
     * @param {Number} [maxResults = 15)] 
     * @param {module:api/SongApiApi~apiSongsNamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiSongsNamesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'nameMatchMode': opts['nameMatchMode'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/songs/names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSongsTopRatedGet operation.
     * @callback module:api/SongApiApi~apiSongsTopRatedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongForApiContract>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [durationHours] 
     * @param {Date} [startDate] 
     * @param {module:model/TopSongsDateFilterType} [filterBy] 
     * @param {module:model/SongVocalistSelection} [vocalist] 
     * @param {Number} [maxResults = 25)] 
     * @param {module:model/SongOptionalFields} [fields] 
     * @param {module:model/ContentLanguagePreference} [languagePreference] 
     * @param {module:api/SongApiApi~apiSongsTopRatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongForApiContract>}
     */
    apiSongsTopRatedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'durationHours': opts['durationHours'],
        'startDate': opts['startDate'],
        'filterBy': opts['filterBy'],
        'vocalist': opts['vocalist'],
        'maxResults': opts['maxResults'],
        'fields': opts['fields'],
        'languagePreference': opts['languagePreference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SongForApiContract];
      return this.apiClient.callApi(
        '/api/songs/top-rated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
