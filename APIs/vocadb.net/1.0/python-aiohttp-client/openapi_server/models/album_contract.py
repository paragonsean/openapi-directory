# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disc_type import DiscType
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.optional_date_time_contract import OptionalDateTimeContract
from openapi_server.models.release_event_for_api_contract import ReleaseEventForApiContract
from openapi_server import util


class AlbumContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, artist_string: str=None, cover_picture_mime: str=None, create_date: datetime=None, deleted: bool=None, disc_type: DiscType=None, id: int=None, name: str=None, rating_average: float=None, rating_count: int=None, release_date: OptionalDateTimeContract=None, release_event: ReleaseEventForApiContract=None, status: EntryStatus=None, version: int=None):
        """AlbumContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this AlbumContract.
        :param artist_string: The artist_string of this AlbumContract.
        :param cover_picture_mime: The cover_picture_mime of this AlbumContract.
        :param create_date: The create_date of this AlbumContract.
        :param deleted: The deleted of this AlbumContract.
        :param disc_type: The disc_type of this AlbumContract.
        :param id: The id of this AlbumContract.
        :param name: The name of this AlbumContract.
        :param rating_average: The rating_average of this AlbumContract.
        :param rating_count: The rating_count of this AlbumContract.
        :param release_date: The release_date of this AlbumContract.
        :param release_event: The release_event of this AlbumContract.
        :param status: The status of this AlbumContract.
        :param version: The version of this AlbumContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'artist_string': str,
            'cover_picture_mime': str,
            'create_date': datetime,
            'deleted': bool,
            'disc_type': DiscType,
            'id': int,
            'name': str,
            'rating_average': float,
            'rating_count': int,
            'release_date': OptionalDateTimeContract,
            'release_event': ReleaseEventForApiContract,
            'status': EntryStatus,
            'version': int
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'artist_string': 'artistString',
            'cover_picture_mime': 'coverPictureMime',
            'create_date': 'createDate',
            'deleted': 'deleted',
            'disc_type': 'discType',
            'id': 'id',
            'name': 'name',
            'rating_average': 'ratingAverage',
            'rating_count': 'ratingCount',
            'release_date': 'releaseDate',
            'release_event': 'releaseEvent',
            'status': 'status',
            'version': 'version'
        }

        self._additional_names = additional_names
        self._artist_string = artist_string
        self._cover_picture_mime = cover_picture_mime
        self._create_date = create_date
        self._deleted = deleted
        self._disc_type = disc_type
        self._id = id
        self._name = name
        self._rating_average = rating_average
        self._rating_count = rating_count
        self._release_date = release_date
        self._release_event = release_event
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlbumContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlbumContract of this AlbumContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this AlbumContract.


        :return: The additional_names of this AlbumContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this AlbumContract.


        :param additional_names: The additional_names of this AlbumContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def artist_string(self):
        """Gets the artist_string of this AlbumContract.


        :return: The artist_string of this AlbumContract.
        :rtype: str
        """
        return self._artist_string

    @artist_string.setter
    def artist_string(self, artist_string):
        """Sets the artist_string of this AlbumContract.


        :param artist_string: The artist_string of this AlbumContract.
        :type artist_string: str
        """

        self._artist_string = artist_string

    @property
    def cover_picture_mime(self):
        """Gets the cover_picture_mime of this AlbumContract.


        :return: The cover_picture_mime of this AlbumContract.
        :rtype: str
        """
        return self._cover_picture_mime

    @cover_picture_mime.setter
    def cover_picture_mime(self, cover_picture_mime):
        """Sets the cover_picture_mime of this AlbumContract.


        :param cover_picture_mime: The cover_picture_mime of this AlbumContract.
        :type cover_picture_mime: str
        """

        self._cover_picture_mime = cover_picture_mime

    @property
    def create_date(self):
        """Gets the create_date of this AlbumContract.


        :return: The create_date of this AlbumContract.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AlbumContract.


        :param create_date: The create_date of this AlbumContract.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def deleted(self):
        """Gets the deleted of this AlbumContract.


        :return: The deleted of this AlbumContract.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AlbumContract.


        :param deleted: The deleted of this AlbumContract.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def disc_type(self):
        """Gets the disc_type of this AlbumContract.


        :return: The disc_type of this AlbumContract.
        :rtype: DiscType
        """
        return self._disc_type

    @disc_type.setter
    def disc_type(self, disc_type):
        """Sets the disc_type of this AlbumContract.


        :param disc_type: The disc_type of this AlbumContract.
        :type disc_type: DiscType
        """

        self._disc_type = disc_type

    @property
    def id(self):
        """Gets the id of this AlbumContract.


        :return: The id of this AlbumContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlbumContract.


        :param id: The id of this AlbumContract.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AlbumContract.


        :return: The name of this AlbumContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlbumContract.


        :param name: The name of this AlbumContract.
        :type name: str
        """

        self._name = name

    @property
    def rating_average(self):
        """Gets the rating_average of this AlbumContract.


        :return: The rating_average of this AlbumContract.
        :rtype: float
        """
        return self._rating_average

    @rating_average.setter
    def rating_average(self, rating_average):
        """Sets the rating_average of this AlbumContract.


        :param rating_average: The rating_average of this AlbumContract.
        :type rating_average: float
        """

        self._rating_average = rating_average

    @property
    def rating_count(self):
        """Gets the rating_count of this AlbumContract.


        :return: The rating_count of this AlbumContract.
        :rtype: int
        """
        return self._rating_count

    @rating_count.setter
    def rating_count(self, rating_count):
        """Sets the rating_count of this AlbumContract.


        :param rating_count: The rating_count of this AlbumContract.
        :type rating_count: int
        """

        self._rating_count = rating_count

    @property
    def release_date(self):
        """Gets the release_date of this AlbumContract.


        :return: The release_date of this AlbumContract.
        :rtype: OptionalDateTimeContract
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this AlbumContract.


        :param release_date: The release_date of this AlbumContract.
        :type release_date: OptionalDateTimeContract
        """

        self._release_date = release_date

    @property
    def release_event(self):
        """Gets the release_event of this AlbumContract.


        :return: The release_event of this AlbumContract.
        :rtype: ReleaseEventForApiContract
        """
        return self._release_event

    @release_event.setter
    def release_event(self, release_event):
        """Sets the release_event of this AlbumContract.


        :param release_event: The release_event of this AlbumContract.
        :type release_event: ReleaseEventForApiContract
        """

        self._release_event = release_event

    @property
    def status(self):
        """Gets the status of this AlbumContract.


        :return: The status of this AlbumContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlbumContract.


        :param status: The status of this AlbumContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this AlbumContract.


        :return: The version of this AlbumContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AlbumContract.


        :param version: The version of this AlbumContract.
        :type version: int
        """

        self._version = version
