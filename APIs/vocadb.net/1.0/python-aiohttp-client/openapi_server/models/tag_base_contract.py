# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagBaseContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, category_name: str=None, id: int=None, name: str=None, url_slug: str=None):
        """TagBaseContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this TagBaseContract.
        :param category_name: The category_name of this TagBaseContract.
        :param id: The id of this TagBaseContract.
        :param name: The name of this TagBaseContract.
        :param url_slug: The url_slug of this TagBaseContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'category_name': str,
            'id': int,
            'name': str,
            'url_slug': str
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'category_name': 'categoryName',
            'id': 'id',
            'name': 'name',
            'url_slug': 'urlSlug'
        }

        self._additional_names = additional_names
        self._category_name = category_name
        self._id = id
        self._name = name
        self._url_slug = url_slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagBaseContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagBaseContract of this TagBaseContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this TagBaseContract.


        :return: The additional_names of this TagBaseContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this TagBaseContract.


        :param additional_names: The additional_names of this TagBaseContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def category_name(self):
        """Gets the category_name of this TagBaseContract.


        :return: The category_name of this TagBaseContract.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this TagBaseContract.


        :param category_name: The category_name of this TagBaseContract.
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def id(self):
        """Gets the id of this TagBaseContract.


        :return: The id of this TagBaseContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagBaseContract.


        :param id: The id of this TagBaseContract.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TagBaseContract.


        :return: The name of this TagBaseContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagBaseContract.


        :param name: The name of this TagBaseContract.
        :type name: str
        """

        self._name = name

    @property
    def url_slug(self):
        """Gets the url_slug of this TagBaseContract.


        :return: The url_slug of this TagBaseContract.
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this TagBaseContract.


        :param url_slug: The url_slug of this TagBaseContract.
        :type url_slug: str
        """

        self._url_slug = url_slug
