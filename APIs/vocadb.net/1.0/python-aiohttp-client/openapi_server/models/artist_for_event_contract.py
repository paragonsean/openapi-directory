# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artist_contract import ArtistContract
from openapi_server.models.artist_event_roles import ArtistEventRoles
from openapi_server import util


class ArtistForEventContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artist: ArtistContract=None, effective_roles: ArtistEventRoles=None, id: int=None, name: str=None, roles: ArtistEventRoles=None):
        """ArtistForEventContract - a model defined in OpenAPI

        :param artist: The artist of this ArtistForEventContract.
        :param effective_roles: The effective_roles of this ArtistForEventContract.
        :param id: The id of this ArtistForEventContract.
        :param name: The name of this ArtistForEventContract.
        :param roles: The roles of this ArtistForEventContract.
        """
        self.openapi_types = {
            'artist': ArtistContract,
            'effective_roles': ArtistEventRoles,
            'id': int,
            'name': str,
            'roles': ArtistEventRoles
        }

        self.attribute_map = {
            'artist': 'artist',
            'effective_roles': 'effectiveRoles',
            'id': 'id',
            'name': 'name',
            'roles': 'roles'
        }

        self._artist = artist
        self._effective_roles = effective_roles
        self._id = id
        self._name = name
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtistForEventContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtistForEventContract of this ArtistForEventContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist(self):
        """Gets the artist of this ArtistForEventContract.


        :return: The artist of this ArtistForEventContract.
        :rtype: ArtistContract
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this ArtistForEventContract.


        :param artist: The artist of this ArtistForEventContract.
        :type artist: ArtistContract
        """

        self._artist = artist

    @property
    def effective_roles(self):
        """Gets the effective_roles of this ArtistForEventContract.


        :return: The effective_roles of this ArtistForEventContract.
        :rtype: ArtistEventRoles
        """
        return self._effective_roles

    @effective_roles.setter
    def effective_roles(self, effective_roles):
        """Sets the effective_roles of this ArtistForEventContract.


        :param effective_roles: The effective_roles of this ArtistForEventContract.
        :type effective_roles: ArtistEventRoles
        """

        self._effective_roles = effective_roles

    @property
    def id(self):
        """Gets the id of this ArtistForEventContract.


        :return: The id of this ArtistForEventContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArtistForEventContract.


        :param id: The id of this ArtistForEventContract.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ArtistForEventContract.


        :return: The name of this ArtistForEventContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtistForEventContract.


        :param name: The name of this ArtistForEventContract.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this ArtistForEventContract.


        :return: The roles of this ArtistForEventContract.
        :rtype: ArtistEventRoles
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ArtistForEventContract.


        :param roles: The roles of this ArtistForEventContract.
        :type roles: ArtistEventRoles
        """

        self._roles = roles
