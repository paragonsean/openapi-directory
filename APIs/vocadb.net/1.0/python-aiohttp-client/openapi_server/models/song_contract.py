# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.pv_services import PVServices
from openapi_server.models.song_type import SongType
from openapi_server import util


class SongContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, artist_string: str=None, create_date: datetime=None, deleted: bool=None, favorited_times: int=None, id: int=None, length_seconds: int=None, name: str=None, nico_id: str=None, publish_date: datetime=None, pv_services: PVServices=None, rating_score: int=None, song_type: SongType=None, status: EntryStatus=None, thumb_url: str=None, version: int=None):
        """SongContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this SongContract.
        :param artist_string: The artist_string of this SongContract.
        :param create_date: The create_date of this SongContract.
        :param deleted: The deleted of this SongContract.
        :param favorited_times: The favorited_times of this SongContract.
        :param id: The id of this SongContract.
        :param length_seconds: The length_seconds of this SongContract.
        :param name: The name of this SongContract.
        :param nico_id: The nico_id of this SongContract.
        :param publish_date: The publish_date of this SongContract.
        :param pv_services: The pv_services of this SongContract.
        :param rating_score: The rating_score of this SongContract.
        :param song_type: The song_type of this SongContract.
        :param status: The status of this SongContract.
        :param thumb_url: The thumb_url of this SongContract.
        :param version: The version of this SongContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'artist_string': str,
            'create_date': datetime,
            'deleted': bool,
            'favorited_times': int,
            'id': int,
            'length_seconds': int,
            'name': str,
            'nico_id': str,
            'publish_date': datetime,
            'pv_services': PVServices,
            'rating_score': int,
            'song_type': SongType,
            'status': EntryStatus,
            'thumb_url': str,
            'version': int
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'artist_string': 'artistString',
            'create_date': 'createDate',
            'deleted': 'deleted',
            'favorited_times': 'favoritedTimes',
            'id': 'id',
            'length_seconds': 'lengthSeconds',
            'name': 'name',
            'nico_id': 'nicoId',
            'publish_date': 'publishDate',
            'pv_services': 'pvServices',
            'rating_score': 'ratingScore',
            'song_type': 'songType',
            'status': 'status',
            'thumb_url': 'thumbUrl',
            'version': 'version'
        }

        self._additional_names = additional_names
        self._artist_string = artist_string
        self._create_date = create_date
        self._deleted = deleted
        self._favorited_times = favorited_times
        self._id = id
        self._length_seconds = length_seconds
        self._name = name
        self._nico_id = nico_id
        self._publish_date = publish_date
        self._pv_services = pv_services
        self._rating_score = rating_score
        self._song_type = song_type
        self._status = status
        self._thumb_url = thumb_url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SongContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SongContract of this SongContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this SongContract.


        :return: The additional_names of this SongContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this SongContract.


        :param additional_names: The additional_names of this SongContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def artist_string(self):
        """Gets the artist_string of this SongContract.


        :return: The artist_string of this SongContract.
        :rtype: str
        """
        return self._artist_string

    @artist_string.setter
    def artist_string(self, artist_string):
        """Sets the artist_string of this SongContract.


        :param artist_string: The artist_string of this SongContract.
        :type artist_string: str
        """

        self._artist_string = artist_string

    @property
    def create_date(self):
        """Gets the create_date of this SongContract.


        :return: The create_date of this SongContract.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this SongContract.


        :param create_date: The create_date of this SongContract.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def deleted(self):
        """Gets the deleted of this SongContract.


        :return: The deleted of this SongContract.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SongContract.


        :param deleted: The deleted of this SongContract.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def favorited_times(self):
        """Gets the favorited_times of this SongContract.


        :return: The favorited_times of this SongContract.
        :rtype: int
        """
        return self._favorited_times

    @favorited_times.setter
    def favorited_times(self, favorited_times):
        """Sets the favorited_times of this SongContract.


        :param favorited_times: The favorited_times of this SongContract.
        :type favorited_times: int
        """

        self._favorited_times = favorited_times

    @property
    def id(self):
        """Gets the id of this SongContract.


        :return: The id of this SongContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SongContract.


        :param id: The id of this SongContract.
        :type id: int
        """

        self._id = id

    @property
    def length_seconds(self):
        """Gets the length_seconds of this SongContract.


        :return: The length_seconds of this SongContract.
        :rtype: int
        """
        return self._length_seconds

    @length_seconds.setter
    def length_seconds(self, length_seconds):
        """Sets the length_seconds of this SongContract.


        :param length_seconds: The length_seconds of this SongContract.
        :type length_seconds: int
        """

        self._length_seconds = length_seconds

    @property
    def name(self):
        """Gets the name of this SongContract.


        :return: The name of this SongContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SongContract.


        :param name: The name of this SongContract.
        :type name: str
        """

        self._name = name

    @property
    def nico_id(self):
        """Gets the nico_id of this SongContract.


        :return: The nico_id of this SongContract.
        :rtype: str
        """
        return self._nico_id

    @nico_id.setter
    def nico_id(self, nico_id):
        """Sets the nico_id of this SongContract.


        :param nico_id: The nico_id of this SongContract.
        :type nico_id: str
        """

        self._nico_id = nico_id

    @property
    def publish_date(self):
        """Gets the publish_date of this SongContract.


        :return: The publish_date of this SongContract.
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this SongContract.


        :param publish_date: The publish_date of this SongContract.
        :type publish_date: datetime
        """

        self._publish_date = publish_date

    @property
    def pv_services(self):
        """Gets the pv_services of this SongContract.


        :return: The pv_services of this SongContract.
        :rtype: PVServices
        """
        return self._pv_services

    @pv_services.setter
    def pv_services(self, pv_services):
        """Sets the pv_services of this SongContract.


        :param pv_services: The pv_services of this SongContract.
        :type pv_services: PVServices
        """

        self._pv_services = pv_services

    @property
    def rating_score(self):
        """Gets the rating_score of this SongContract.


        :return: The rating_score of this SongContract.
        :rtype: int
        """
        return self._rating_score

    @rating_score.setter
    def rating_score(self, rating_score):
        """Sets the rating_score of this SongContract.


        :param rating_score: The rating_score of this SongContract.
        :type rating_score: int
        """

        self._rating_score = rating_score

    @property
    def song_type(self):
        """Gets the song_type of this SongContract.


        :return: The song_type of this SongContract.
        :rtype: SongType
        """
        return self._song_type

    @song_type.setter
    def song_type(self, song_type):
        """Sets the song_type of this SongContract.


        :param song_type: The song_type of this SongContract.
        :type song_type: SongType
        """

        self._song_type = song_type

    @property
    def status(self):
        """Gets the status of this SongContract.


        :return: The status of this SongContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SongContract.


        :param status: The status of this SongContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def thumb_url(self):
        """Gets the thumb_url of this SongContract.


        :return: The thumb_url of this SongContract.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this SongContract.


        :param thumb_url: The thumb_url of this SongContract.
        :type thumb_url: str
        """

        self._thumb_url = thumb_url

    @property
    def version(self):
        """Gets the version of this SongContract.


        :return: The version of this SongContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SongContract.


        :param version: The version of this SongContract.
        :type version: int
        """

        self._version = version
