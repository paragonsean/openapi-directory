# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_for_api_contract import UserForApiContract
from openapi_server.models.user_inbox_type import UserInboxType
from openapi_server import util


class UserMessageContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, created_formatted: str=None, high_priority: bool=None, id: int=None, inbox: UserInboxType=None, read: bool=None, receiver: UserForApiContract=None, sender: UserForApiContract=None, subject: str=None):
        """UserMessageContract - a model defined in OpenAPI

        :param body: The body of this UserMessageContract.
        :param created_formatted: The created_formatted of this UserMessageContract.
        :param high_priority: The high_priority of this UserMessageContract.
        :param id: The id of this UserMessageContract.
        :param inbox: The inbox of this UserMessageContract.
        :param read: The read of this UserMessageContract.
        :param receiver: The receiver of this UserMessageContract.
        :param sender: The sender of this UserMessageContract.
        :param subject: The subject of this UserMessageContract.
        """
        self.openapi_types = {
            'body': str,
            'created_formatted': str,
            'high_priority': bool,
            'id': int,
            'inbox': UserInboxType,
            'read': bool,
            'receiver': UserForApiContract,
            'sender': UserForApiContract,
            'subject': str
        }

        self.attribute_map = {
            'body': 'body',
            'created_formatted': 'createdFormatted',
            'high_priority': 'highPriority',
            'id': 'id',
            'inbox': 'inbox',
            'read': 'read',
            'receiver': 'receiver',
            'sender': 'sender',
            'subject': 'subject'
        }

        self._body = body
        self._created_formatted = created_formatted
        self._high_priority = high_priority
        self._id = id
        self._inbox = inbox
        self._read = read
        self._receiver = receiver
        self._sender = sender
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMessageContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserMessageContract of this UserMessageContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this UserMessageContract.


        :return: The body of this UserMessageContract.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this UserMessageContract.


        :param body: The body of this UserMessageContract.
        :type body: str
        """

        self._body = body

    @property
    def created_formatted(self):
        """Gets the created_formatted of this UserMessageContract.


        :return: The created_formatted of this UserMessageContract.
        :rtype: str
        """
        return self._created_formatted

    @created_formatted.setter
    def created_formatted(self, created_formatted):
        """Sets the created_formatted of this UserMessageContract.


        :param created_formatted: The created_formatted of this UserMessageContract.
        :type created_formatted: str
        """

        self._created_formatted = created_formatted

    @property
    def high_priority(self):
        """Gets the high_priority of this UserMessageContract.


        :return: The high_priority of this UserMessageContract.
        :rtype: bool
        """
        return self._high_priority

    @high_priority.setter
    def high_priority(self, high_priority):
        """Sets the high_priority of this UserMessageContract.


        :param high_priority: The high_priority of this UserMessageContract.
        :type high_priority: bool
        """

        self._high_priority = high_priority

    @property
    def id(self):
        """Gets the id of this UserMessageContract.


        :return: The id of this UserMessageContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserMessageContract.


        :param id: The id of this UserMessageContract.
        :type id: int
        """

        self._id = id

    @property
    def inbox(self):
        """Gets the inbox of this UserMessageContract.


        :return: The inbox of this UserMessageContract.
        :rtype: UserInboxType
        """
        return self._inbox

    @inbox.setter
    def inbox(self, inbox):
        """Sets the inbox of this UserMessageContract.


        :param inbox: The inbox of this UserMessageContract.
        :type inbox: UserInboxType
        """

        self._inbox = inbox

    @property
    def read(self):
        """Gets the read of this UserMessageContract.


        :return: The read of this UserMessageContract.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this UserMessageContract.


        :param read: The read of this UserMessageContract.
        :type read: bool
        """

        self._read = read

    @property
    def receiver(self):
        """Gets the receiver of this UserMessageContract.


        :return: The receiver of this UserMessageContract.
        :rtype: UserForApiContract
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this UserMessageContract.


        :param receiver: The receiver of this UserMessageContract.
        :type receiver: UserForApiContract
        """

        self._receiver = receiver

    @property
    def sender(self):
        """Gets the sender of this UserMessageContract.


        :return: The sender of this UserMessageContract.
        :rtype: UserForApiContract
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this UserMessageContract.


        :param sender: The sender of this UserMessageContract.
        :type sender: UserForApiContract
        """

        self._sender = sender

    @property
    def subject(self):
        """Gets the subject of this UserMessageContract.


        :return: The subject of this UserMessageContract.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this UserMessageContract.


        :param subject: The subject of this UserMessageContract.
        :type subject: str
        """

        self._subject = subject
