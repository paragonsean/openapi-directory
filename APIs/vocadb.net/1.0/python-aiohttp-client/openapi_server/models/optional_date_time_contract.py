# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OptionalDateTimeContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day: int=None, formatted: str=None, is_empty: bool=None, month: int=None, year: int=None):
        """OptionalDateTimeContract - a model defined in OpenAPI

        :param day: The day of this OptionalDateTimeContract.
        :param formatted: The formatted of this OptionalDateTimeContract.
        :param is_empty: The is_empty of this OptionalDateTimeContract.
        :param month: The month of this OptionalDateTimeContract.
        :param year: The year of this OptionalDateTimeContract.
        """
        self.openapi_types = {
            'day': int,
            'formatted': str,
            'is_empty': bool,
            'month': int,
            'year': int
        }

        self.attribute_map = {
            'day': 'day',
            'formatted': 'formatted',
            'is_empty': 'isEmpty',
            'month': 'month',
            'year': 'year'
        }

        self._day = day
        self._formatted = formatted
        self._is_empty = is_empty
        self._month = month
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptionalDateTimeContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptionalDateTimeContract of this OptionalDateTimeContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day(self):
        """Gets the day of this OptionalDateTimeContract.


        :return: The day of this OptionalDateTimeContract.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this OptionalDateTimeContract.


        :param day: The day of this OptionalDateTimeContract.
        :type day: int
        """

        self._day = day

    @property
    def formatted(self):
        """Gets the formatted of this OptionalDateTimeContract.


        :return: The formatted of this OptionalDateTimeContract.
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this OptionalDateTimeContract.


        :param formatted: The formatted of this OptionalDateTimeContract.
        :type formatted: str
        """

        self._formatted = formatted

    @property
    def is_empty(self):
        """Gets the is_empty of this OptionalDateTimeContract.


        :return: The is_empty of this OptionalDateTimeContract.
        :rtype: bool
        """
        return self._is_empty

    @is_empty.setter
    def is_empty(self, is_empty):
        """Sets the is_empty of this OptionalDateTimeContract.


        :param is_empty: The is_empty of this OptionalDateTimeContract.
        :type is_empty: bool
        """

        self._is_empty = is_empty

    @property
    def month(self):
        """Gets the month of this OptionalDateTimeContract.


        :return: The month of this OptionalDateTimeContract.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this OptionalDateTimeContract.


        :param month: The month of this OptionalDateTimeContract.
        :type month: int
        """

        self._month = month

    @property
    def year(self):
        """Gets the year of this OptionalDateTimeContract.


        :return: The year of this OptionalDateTimeContract.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this OptionalDateTimeContract.


        :param year: The year of this OptionalDateTimeContract.
        :type year: int
        """

        self._year = year
