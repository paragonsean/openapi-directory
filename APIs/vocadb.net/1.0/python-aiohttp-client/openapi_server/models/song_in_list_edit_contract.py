# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.song_for_api_contract import SongForApiContract
from openapi_server import util


class SongInListEditContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notes: str=None, order: int=None, song: SongForApiContract=None, song_in_list_id: int=None):
        """SongInListEditContract - a model defined in OpenAPI

        :param notes: The notes of this SongInListEditContract.
        :param order: The order of this SongInListEditContract.
        :param song: The song of this SongInListEditContract.
        :param song_in_list_id: The song_in_list_id of this SongInListEditContract.
        """
        self.openapi_types = {
            'notes': str,
            'order': int,
            'song': SongForApiContract,
            'song_in_list_id': int
        }

        self.attribute_map = {
            'notes': 'notes',
            'order': 'order',
            'song': 'song',
            'song_in_list_id': 'songInListId'
        }

        self._notes = notes
        self._order = order
        self._song = song
        self._song_in_list_id = song_in_list_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SongInListEditContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SongInListEditContract of this SongInListEditContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notes(self):
        """Gets the notes of this SongInListEditContract.


        :return: The notes of this SongInListEditContract.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SongInListEditContract.


        :param notes: The notes of this SongInListEditContract.
        :type notes: str
        """

        self._notes = notes

    @property
    def order(self):
        """Gets the order of this SongInListEditContract.


        :return: The order of this SongInListEditContract.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SongInListEditContract.


        :param order: The order of this SongInListEditContract.
        :type order: int
        """

        self._order = order

    @property
    def song(self):
        """Gets the song of this SongInListEditContract.


        :return: The song of this SongInListEditContract.
        :rtype: SongForApiContract
        """
        return self._song

    @song.setter
    def song(self, song):
        """Sets the song of this SongInListEditContract.


        :param song: The song of this SongInListEditContract.
        :type song: SongForApiContract
        """

        self._song = song

    @property
    def song_in_list_id(self):
        """Gets the song_in_list_id of this SongInListEditContract.


        :return: The song_in_list_id of this SongInListEditContract.
        :rtype: int
        """
        return self._song_in_list_id

    @song_in_list_id.setter
    def song_in_list_id(self, song_in_list_id):
        """Sets the song_in_list_id of this SongInListEditContract.


        :param song_in_list_id: The song_in_list_id of this SongInListEditContract.
        :type song_in_list_id: int
        """

        self._song_in_list_id = song_in_list_id
