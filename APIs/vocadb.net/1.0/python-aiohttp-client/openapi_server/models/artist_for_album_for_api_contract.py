# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artist_categories import ArtistCategories
from openapi_server.models.artist_contract import ArtistContract
from openapi_server.models.artist_roles import ArtistRoles
from openapi_server import util


class ArtistForAlbumForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artist: ArtistContract=None, categories: ArtistCategories=None, effective_roles: ArtistRoles=None, is_support: bool=None, name: str=None, roles: ArtistRoles=None):
        """ArtistForAlbumForApiContract - a model defined in OpenAPI

        :param artist: The artist of this ArtistForAlbumForApiContract.
        :param categories: The categories of this ArtistForAlbumForApiContract.
        :param effective_roles: The effective_roles of this ArtistForAlbumForApiContract.
        :param is_support: The is_support of this ArtistForAlbumForApiContract.
        :param name: The name of this ArtistForAlbumForApiContract.
        :param roles: The roles of this ArtistForAlbumForApiContract.
        """
        self.openapi_types = {
            'artist': ArtistContract,
            'categories': ArtistCategories,
            'effective_roles': ArtistRoles,
            'is_support': bool,
            'name': str,
            'roles': ArtistRoles
        }

        self.attribute_map = {
            'artist': 'artist',
            'categories': 'categories',
            'effective_roles': 'effectiveRoles',
            'is_support': 'isSupport',
            'name': 'name',
            'roles': 'roles'
        }

        self._artist = artist
        self._categories = categories
        self._effective_roles = effective_roles
        self._is_support = is_support
        self._name = name
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtistForAlbumForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtistForAlbumForApiContract of this ArtistForAlbumForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist(self):
        """Gets the artist of this ArtistForAlbumForApiContract.


        :return: The artist of this ArtistForAlbumForApiContract.
        :rtype: ArtistContract
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this ArtistForAlbumForApiContract.


        :param artist: The artist of this ArtistForAlbumForApiContract.
        :type artist: ArtistContract
        """

        self._artist = artist

    @property
    def categories(self):
        """Gets the categories of this ArtistForAlbumForApiContract.


        :return: The categories of this ArtistForAlbumForApiContract.
        :rtype: ArtistCategories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ArtistForAlbumForApiContract.


        :param categories: The categories of this ArtistForAlbumForApiContract.
        :type categories: ArtistCategories
        """

        self._categories = categories

    @property
    def effective_roles(self):
        """Gets the effective_roles of this ArtistForAlbumForApiContract.


        :return: The effective_roles of this ArtistForAlbumForApiContract.
        :rtype: ArtistRoles
        """
        return self._effective_roles

    @effective_roles.setter
    def effective_roles(self, effective_roles):
        """Sets the effective_roles of this ArtistForAlbumForApiContract.


        :param effective_roles: The effective_roles of this ArtistForAlbumForApiContract.
        :type effective_roles: ArtistRoles
        """

        self._effective_roles = effective_roles

    @property
    def is_support(self):
        """Gets the is_support of this ArtistForAlbumForApiContract.


        :return: The is_support of this ArtistForAlbumForApiContract.
        :rtype: bool
        """
        return self._is_support

    @is_support.setter
    def is_support(self, is_support):
        """Sets the is_support of this ArtistForAlbumForApiContract.


        :param is_support: The is_support of this ArtistForAlbumForApiContract.
        :type is_support: bool
        """

        self._is_support = is_support

    @property
    def name(self):
        """Gets the name of this ArtistForAlbumForApiContract.


        :return: The name of this ArtistForAlbumForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtistForAlbumForApiContract.


        :param name: The name of this ArtistForAlbumForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this ArtistForAlbumForApiContract.


        :return: The roles of this ArtistForAlbumForApiContract.
        :rtype: ArtistRoles
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ArtistForAlbumForApiContract.


        :param roles: The roles of this ArtistForAlbumForApiContract.
        :type roles: ArtistRoles
        """

        self._roles = roles
