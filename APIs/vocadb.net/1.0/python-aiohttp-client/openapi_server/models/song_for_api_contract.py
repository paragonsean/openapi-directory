# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album_contract import AlbumContract
from openapi_server.models.artist_for_song_contract import ArtistForSongContract
from openapi_server.models.content_language_selection import ContentLanguageSelection
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.entry_thumb_for_api_contract import EntryThumbForApiContract
from openapi_server.models.localized_string_contract import LocalizedStringContract
from openapi_server.models.lyrics_for_song_contract import LyricsForSongContract
from openapi_server.models.pv_contract import PVContract
from openapi_server.models.pv_services import PVServices
from openapi_server.models.release_event_for_api_contract import ReleaseEventForApiContract
from openapi_server.models.song_type import SongType
from openapi_server.models.tag_usage_for_api_contract import TagUsageForApiContract
from openapi_server.models.web_link_for_api_contract import WebLinkForApiContract
from openapi_server import util


class SongForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, albums: List[AlbumContract]=None, artist_string: str=None, artists: List[ArtistForSongContract]=None, create_date: datetime=None, default_name: str=None, default_name_language: ContentLanguageSelection=None, deleted: bool=None, favorited_times: int=None, id: int=None, length_seconds: int=None, lyrics: List[LyricsForSongContract]=None, main_picture: EntryThumbForApiContract=None, max_milli_bpm: int=None, merged_to: int=None, min_milli_bpm: int=None, name: str=None, names: List[LocalizedStringContract]=None, original_version_id: int=None, publish_date: datetime=None, pv_services: PVServices=None, pvs: List[PVContract]=None, rating_score: int=None, release_event: ReleaseEventForApiContract=None, song_type: SongType=None, status: EntryStatus=None, tags: List[TagUsageForApiContract]=None, thumb_url: str=None, version: int=None, web_links: List[WebLinkForApiContract]=None):
        """SongForApiContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this SongForApiContract.
        :param albums: The albums of this SongForApiContract.
        :param artist_string: The artist_string of this SongForApiContract.
        :param artists: The artists of this SongForApiContract.
        :param create_date: The create_date of this SongForApiContract.
        :param default_name: The default_name of this SongForApiContract.
        :param default_name_language: The default_name_language of this SongForApiContract.
        :param deleted: The deleted of this SongForApiContract.
        :param favorited_times: The favorited_times of this SongForApiContract.
        :param id: The id of this SongForApiContract.
        :param length_seconds: The length_seconds of this SongForApiContract.
        :param lyrics: The lyrics of this SongForApiContract.
        :param main_picture: The main_picture of this SongForApiContract.
        :param max_milli_bpm: The max_milli_bpm of this SongForApiContract.
        :param merged_to: The merged_to of this SongForApiContract.
        :param min_milli_bpm: The min_milli_bpm of this SongForApiContract.
        :param name: The name of this SongForApiContract.
        :param names: The names of this SongForApiContract.
        :param original_version_id: The original_version_id of this SongForApiContract.
        :param publish_date: The publish_date of this SongForApiContract.
        :param pv_services: The pv_services of this SongForApiContract.
        :param pvs: The pvs of this SongForApiContract.
        :param rating_score: The rating_score of this SongForApiContract.
        :param release_event: The release_event of this SongForApiContract.
        :param song_type: The song_type of this SongForApiContract.
        :param status: The status of this SongForApiContract.
        :param tags: The tags of this SongForApiContract.
        :param thumb_url: The thumb_url of this SongForApiContract.
        :param version: The version of this SongForApiContract.
        :param web_links: The web_links of this SongForApiContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'albums': List[AlbumContract],
            'artist_string': str,
            'artists': List[ArtistForSongContract],
            'create_date': datetime,
            'default_name': str,
            'default_name_language': ContentLanguageSelection,
            'deleted': bool,
            'favorited_times': int,
            'id': int,
            'length_seconds': int,
            'lyrics': List[LyricsForSongContract],
            'main_picture': EntryThumbForApiContract,
            'max_milli_bpm': int,
            'merged_to': int,
            'min_milli_bpm': int,
            'name': str,
            'names': List[LocalizedStringContract],
            'original_version_id': int,
            'publish_date': datetime,
            'pv_services': PVServices,
            'pvs': List[PVContract],
            'rating_score': int,
            'release_event': ReleaseEventForApiContract,
            'song_type': SongType,
            'status': EntryStatus,
            'tags': List[TagUsageForApiContract],
            'thumb_url': str,
            'version': int,
            'web_links': List[WebLinkForApiContract]
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'albums': 'albums',
            'artist_string': 'artistString',
            'artists': 'artists',
            'create_date': 'createDate',
            'default_name': 'defaultName',
            'default_name_language': 'defaultNameLanguage',
            'deleted': 'deleted',
            'favorited_times': 'favoritedTimes',
            'id': 'id',
            'length_seconds': 'lengthSeconds',
            'lyrics': 'lyrics',
            'main_picture': 'mainPicture',
            'max_milli_bpm': 'maxMilliBpm',
            'merged_to': 'mergedTo',
            'min_milli_bpm': 'minMilliBpm',
            'name': 'name',
            'names': 'names',
            'original_version_id': 'originalVersionId',
            'publish_date': 'publishDate',
            'pv_services': 'pvServices',
            'pvs': 'pvs',
            'rating_score': 'ratingScore',
            'release_event': 'releaseEvent',
            'song_type': 'songType',
            'status': 'status',
            'tags': 'tags',
            'thumb_url': 'thumbUrl',
            'version': 'version',
            'web_links': 'webLinks'
        }

        self._additional_names = additional_names
        self._albums = albums
        self._artist_string = artist_string
        self._artists = artists
        self._create_date = create_date
        self._default_name = default_name
        self._default_name_language = default_name_language
        self._deleted = deleted
        self._favorited_times = favorited_times
        self._id = id
        self._length_seconds = length_seconds
        self._lyrics = lyrics
        self._main_picture = main_picture
        self._max_milli_bpm = max_milli_bpm
        self._merged_to = merged_to
        self._min_milli_bpm = min_milli_bpm
        self._name = name
        self._names = names
        self._original_version_id = original_version_id
        self._publish_date = publish_date
        self._pv_services = pv_services
        self._pvs = pvs
        self._rating_score = rating_score
        self._release_event = release_event
        self._song_type = song_type
        self._status = status
        self._tags = tags
        self._thumb_url = thumb_url
        self._version = version
        self._web_links = web_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SongForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SongForApiContract of this SongForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this SongForApiContract.


        :return: The additional_names of this SongForApiContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this SongForApiContract.


        :param additional_names: The additional_names of this SongForApiContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def albums(self):
        """Gets the albums of this SongForApiContract.


        :return: The albums of this SongForApiContract.
        :rtype: List[AlbumContract]
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this SongForApiContract.


        :param albums: The albums of this SongForApiContract.
        :type albums: List[AlbumContract]
        """

        self._albums = albums

    @property
    def artist_string(self):
        """Gets the artist_string of this SongForApiContract.


        :return: The artist_string of this SongForApiContract.
        :rtype: str
        """
        return self._artist_string

    @artist_string.setter
    def artist_string(self, artist_string):
        """Sets the artist_string of this SongForApiContract.


        :param artist_string: The artist_string of this SongForApiContract.
        :type artist_string: str
        """

        self._artist_string = artist_string

    @property
    def artists(self):
        """Gets the artists of this SongForApiContract.


        :return: The artists of this SongForApiContract.
        :rtype: List[ArtistForSongContract]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this SongForApiContract.


        :param artists: The artists of this SongForApiContract.
        :type artists: List[ArtistForSongContract]
        """

        self._artists = artists

    @property
    def create_date(self):
        """Gets the create_date of this SongForApiContract.


        :return: The create_date of this SongForApiContract.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this SongForApiContract.


        :param create_date: The create_date of this SongForApiContract.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def default_name(self):
        """Gets the default_name of this SongForApiContract.


        :return: The default_name of this SongForApiContract.
        :rtype: str
        """
        return self._default_name

    @default_name.setter
    def default_name(self, default_name):
        """Sets the default_name of this SongForApiContract.


        :param default_name: The default_name of this SongForApiContract.
        :type default_name: str
        """

        self._default_name = default_name

    @property
    def default_name_language(self):
        """Gets the default_name_language of this SongForApiContract.


        :return: The default_name_language of this SongForApiContract.
        :rtype: ContentLanguageSelection
        """
        return self._default_name_language

    @default_name_language.setter
    def default_name_language(self, default_name_language):
        """Sets the default_name_language of this SongForApiContract.


        :param default_name_language: The default_name_language of this SongForApiContract.
        :type default_name_language: ContentLanguageSelection
        """

        self._default_name_language = default_name_language

    @property
    def deleted(self):
        """Gets the deleted of this SongForApiContract.


        :return: The deleted of this SongForApiContract.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SongForApiContract.


        :param deleted: The deleted of this SongForApiContract.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def favorited_times(self):
        """Gets the favorited_times of this SongForApiContract.


        :return: The favorited_times of this SongForApiContract.
        :rtype: int
        """
        return self._favorited_times

    @favorited_times.setter
    def favorited_times(self, favorited_times):
        """Sets the favorited_times of this SongForApiContract.


        :param favorited_times: The favorited_times of this SongForApiContract.
        :type favorited_times: int
        """

        self._favorited_times = favorited_times

    @property
    def id(self):
        """Gets the id of this SongForApiContract.


        :return: The id of this SongForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SongForApiContract.


        :param id: The id of this SongForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def length_seconds(self):
        """Gets the length_seconds of this SongForApiContract.


        :return: The length_seconds of this SongForApiContract.
        :rtype: int
        """
        return self._length_seconds

    @length_seconds.setter
    def length_seconds(self, length_seconds):
        """Sets the length_seconds of this SongForApiContract.


        :param length_seconds: The length_seconds of this SongForApiContract.
        :type length_seconds: int
        """

        self._length_seconds = length_seconds

    @property
    def lyrics(self):
        """Gets the lyrics of this SongForApiContract.


        :return: The lyrics of this SongForApiContract.
        :rtype: List[LyricsForSongContract]
        """
        return self._lyrics

    @lyrics.setter
    def lyrics(self, lyrics):
        """Sets the lyrics of this SongForApiContract.


        :param lyrics: The lyrics of this SongForApiContract.
        :type lyrics: List[LyricsForSongContract]
        """

        self._lyrics = lyrics

    @property
    def main_picture(self):
        """Gets the main_picture of this SongForApiContract.


        :return: The main_picture of this SongForApiContract.
        :rtype: EntryThumbForApiContract
        """
        return self._main_picture

    @main_picture.setter
    def main_picture(self, main_picture):
        """Sets the main_picture of this SongForApiContract.


        :param main_picture: The main_picture of this SongForApiContract.
        :type main_picture: EntryThumbForApiContract
        """

        self._main_picture = main_picture

    @property
    def max_milli_bpm(self):
        """Gets the max_milli_bpm of this SongForApiContract.


        :return: The max_milli_bpm of this SongForApiContract.
        :rtype: int
        """
        return self._max_milli_bpm

    @max_milli_bpm.setter
    def max_milli_bpm(self, max_milli_bpm):
        """Sets the max_milli_bpm of this SongForApiContract.


        :param max_milli_bpm: The max_milli_bpm of this SongForApiContract.
        :type max_milli_bpm: int
        """

        self._max_milli_bpm = max_milli_bpm

    @property
    def merged_to(self):
        """Gets the merged_to of this SongForApiContract.


        :return: The merged_to of this SongForApiContract.
        :rtype: int
        """
        return self._merged_to

    @merged_to.setter
    def merged_to(self, merged_to):
        """Sets the merged_to of this SongForApiContract.


        :param merged_to: The merged_to of this SongForApiContract.
        :type merged_to: int
        """

        self._merged_to = merged_to

    @property
    def min_milli_bpm(self):
        """Gets the min_milli_bpm of this SongForApiContract.


        :return: The min_milli_bpm of this SongForApiContract.
        :rtype: int
        """
        return self._min_milli_bpm

    @min_milli_bpm.setter
    def min_milli_bpm(self, min_milli_bpm):
        """Sets the min_milli_bpm of this SongForApiContract.


        :param min_milli_bpm: The min_milli_bpm of this SongForApiContract.
        :type min_milli_bpm: int
        """

        self._min_milli_bpm = min_milli_bpm

    @property
    def name(self):
        """Gets the name of this SongForApiContract.


        :return: The name of this SongForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SongForApiContract.


        :param name: The name of this SongForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def names(self):
        """Gets the names of this SongForApiContract.


        :return: The names of this SongForApiContract.
        :rtype: List[LocalizedStringContract]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this SongForApiContract.


        :param names: The names of this SongForApiContract.
        :type names: List[LocalizedStringContract]
        """

        self._names = names

    @property
    def original_version_id(self):
        """Gets the original_version_id of this SongForApiContract.


        :return: The original_version_id of this SongForApiContract.
        :rtype: int
        """
        return self._original_version_id

    @original_version_id.setter
    def original_version_id(self, original_version_id):
        """Sets the original_version_id of this SongForApiContract.


        :param original_version_id: The original_version_id of this SongForApiContract.
        :type original_version_id: int
        """

        self._original_version_id = original_version_id

    @property
    def publish_date(self):
        """Gets the publish_date of this SongForApiContract.


        :return: The publish_date of this SongForApiContract.
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this SongForApiContract.


        :param publish_date: The publish_date of this SongForApiContract.
        :type publish_date: datetime
        """

        self._publish_date = publish_date

    @property
    def pv_services(self):
        """Gets the pv_services of this SongForApiContract.


        :return: The pv_services of this SongForApiContract.
        :rtype: PVServices
        """
        return self._pv_services

    @pv_services.setter
    def pv_services(self, pv_services):
        """Sets the pv_services of this SongForApiContract.


        :param pv_services: The pv_services of this SongForApiContract.
        :type pv_services: PVServices
        """

        self._pv_services = pv_services

    @property
    def pvs(self):
        """Gets the pvs of this SongForApiContract.


        :return: The pvs of this SongForApiContract.
        :rtype: List[PVContract]
        """
        return self._pvs

    @pvs.setter
    def pvs(self, pvs):
        """Sets the pvs of this SongForApiContract.


        :param pvs: The pvs of this SongForApiContract.
        :type pvs: List[PVContract]
        """

        self._pvs = pvs

    @property
    def rating_score(self):
        """Gets the rating_score of this SongForApiContract.


        :return: The rating_score of this SongForApiContract.
        :rtype: int
        """
        return self._rating_score

    @rating_score.setter
    def rating_score(self, rating_score):
        """Sets the rating_score of this SongForApiContract.


        :param rating_score: The rating_score of this SongForApiContract.
        :type rating_score: int
        """

        self._rating_score = rating_score

    @property
    def release_event(self):
        """Gets the release_event of this SongForApiContract.


        :return: The release_event of this SongForApiContract.
        :rtype: ReleaseEventForApiContract
        """
        return self._release_event

    @release_event.setter
    def release_event(self, release_event):
        """Sets the release_event of this SongForApiContract.


        :param release_event: The release_event of this SongForApiContract.
        :type release_event: ReleaseEventForApiContract
        """

        self._release_event = release_event

    @property
    def song_type(self):
        """Gets the song_type of this SongForApiContract.


        :return: The song_type of this SongForApiContract.
        :rtype: SongType
        """
        return self._song_type

    @song_type.setter
    def song_type(self, song_type):
        """Sets the song_type of this SongForApiContract.


        :param song_type: The song_type of this SongForApiContract.
        :type song_type: SongType
        """

        self._song_type = song_type

    @property
    def status(self):
        """Gets the status of this SongForApiContract.


        :return: The status of this SongForApiContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SongForApiContract.


        :param status: The status of this SongForApiContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this SongForApiContract.


        :return: The tags of this SongForApiContract.
        :rtype: List[TagUsageForApiContract]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SongForApiContract.


        :param tags: The tags of this SongForApiContract.
        :type tags: List[TagUsageForApiContract]
        """

        self._tags = tags

    @property
    def thumb_url(self):
        """Gets the thumb_url of this SongForApiContract.


        :return: The thumb_url of this SongForApiContract.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this SongForApiContract.


        :param thumb_url: The thumb_url of this SongForApiContract.
        :type thumb_url: str
        """

        self._thumb_url = thumb_url

    @property
    def version(self):
        """Gets the version of this SongForApiContract.


        :return: The version of this SongForApiContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SongForApiContract.


        :param version: The version of this SongForApiContract.
        :type version: int
        """

        self._version = version

    @property
    def web_links(self):
        """Gets the web_links of this SongForApiContract.


        :return: The web_links of this SongForApiContract.
        :rtype: List[WebLinkForApiContract]
        """
        return self._web_links

    @web_links.setter
    def web_links(self, web_links):
        """Sets the web_links of this SongForApiContract.


        :param web_links: The web_links of this SongForApiContract.
        :type web_links: List[WebLinkForApiContract]
        """

        self._web_links = web_links
