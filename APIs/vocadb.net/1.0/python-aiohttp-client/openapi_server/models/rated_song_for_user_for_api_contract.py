# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.song_for_api_contract import SongForApiContract
from openapi_server.models.song_vote_rating import SongVoteRating
from openapi_server.models.user_for_api_contract import UserForApiContract
from openapi_server import util


class RatedSongForUserForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, rating: SongVoteRating=None, song: SongForApiContract=None, user: UserForApiContract=None):
        """RatedSongForUserForApiContract - a model defined in OpenAPI

        :param _date: The _date of this RatedSongForUserForApiContract.
        :param rating: The rating of this RatedSongForUserForApiContract.
        :param song: The song of this RatedSongForUserForApiContract.
        :param user: The user of this RatedSongForUserForApiContract.
        """
        self.openapi_types = {
            '_date': datetime,
            'rating': SongVoteRating,
            'song': SongForApiContract,
            'user': UserForApiContract
        }

        self.attribute_map = {
            '_date': 'date',
            'rating': 'rating',
            'song': 'song',
            'user': 'user'
        }

        self.__date = _date
        self._rating = rating
        self._song = song
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatedSongForUserForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatedSongForUserForApiContract of this RatedSongForUserForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this RatedSongForUserForApiContract.


        :return: The _date of this RatedSongForUserForApiContract.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this RatedSongForUserForApiContract.


        :param _date: The _date of this RatedSongForUserForApiContract.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def rating(self):
        """Gets the rating of this RatedSongForUserForApiContract.


        :return: The rating of this RatedSongForUserForApiContract.
        :rtype: SongVoteRating
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this RatedSongForUserForApiContract.


        :param rating: The rating of this RatedSongForUserForApiContract.
        :type rating: SongVoteRating
        """

        self._rating = rating

    @property
    def song(self):
        """Gets the song of this RatedSongForUserForApiContract.


        :return: The song of this RatedSongForUserForApiContract.
        :rtype: SongForApiContract
        """
        return self._song

    @song.setter
    def song(self, song):
        """Sets the song of this RatedSongForUserForApiContract.


        :param song: The song of this RatedSongForUserForApiContract.
        :type song: SongForApiContract
        """

        self._song = song

    @property
    def user(self):
        """Gets the user of this RatedSongForUserForApiContract.


        :return: The user of this RatedSongForUserForApiContract.
        :rtype: UserForApiContract
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RatedSongForUserForApiContract.


        :param user: The user of this RatedSongForUserForApiContract.
        :type user: UserForApiContract
        """

        self._user = user
