# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.user_for_api_contract import UserForApiContract
from openapi_server import util


class ArchivedObjectVersionForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_name: str=None, anything_changed: bool=None, author: UserForApiContract=None, changed_fields: List[str]=None, created: datetime=None, hidden: bool=None, id: int=None, is_snapshot: bool=None, notes: str=None, reason: str=None, status: EntryStatus=None, version: int=None):
        """ArchivedObjectVersionForApiContract - a model defined in OpenAPI

        :param agent_name: The agent_name of this ArchivedObjectVersionForApiContract.
        :param anything_changed: The anything_changed of this ArchivedObjectVersionForApiContract.
        :param author: The author of this ArchivedObjectVersionForApiContract.
        :param changed_fields: The changed_fields of this ArchivedObjectVersionForApiContract.
        :param created: The created of this ArchivedObjectVersionForApiContract.
        :param hidden: The hidden of this ArchivedObjectVersionForApiContract.
        :param id: The id of this ArchivedObjectVersionForApiContract.
        :param is_snapshot: The is_snapshot of this ArchivedObjectVersionForApiContract.
        :param notes: The notes of this ArchivedObjectVersionForApiContract.
        :param reason: The reason of this ArchivedObjectVersionForApiContract.
        :param status: The status of this ArchivedObjectVersionForApiContract.
        :param version: The version of this ArchivedObjectVersionForApiContract.
        """
        self.openapi_types = {
            'agent_name': str,
            'anything_changed': bool,
            'author': UserForApiContract,
            'changed_fields': List[str],
            'created': datetime,
            'hidden': bool,
            'id': int,
            'is_snapshot': bool,
            'notes': str,
            'reason': str,
            'status': EntryStatus,
            'version': int
        }

        self.attribute_map = {
            'agent_name': 'agentName',
            'anything_changed': 'anythingChanged',
            'author': 'author',
            'changed_fields': 'changedFields',
            'created': 'created',
            'hidden': 'hidden',
            'id': 'id',
            'is_snapshot': 'isSnapshot',
            'notes': 'notes',
            'reason': 'reason',
            'status': 'status',
            'version': 'version'
        }

        self._agent_name = agent_name
        self._anything_changed = anything_changed
        self._author = author
        self._changed_fields = changed_fields
        self._created = created
        self._hidden = hidden
        self._id = id
        self._is_snapshot = is_snapshot
        self._notes = notes
        self._reason = reason
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchivedObjectVersionForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchivedObjectVersionForApiContract of this ArchivedObjectVersionForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_name(self):
        """Gets the agent_name of this ArchivedObjectVersionForApiContract.


        :return: The agent_name of this ArchivedObjectVersionForApiContract.
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this ArchivedObjectVersionForApiContract.


        :param agent_name: The agent_name of this ArchivedObjectVersionForApiContract.
        :type agent_name: str
        """

        self._agent_name = agent_name

    @property
    def anything_changed(self):
        """Gets the anything_changed of this ArchivedObjectVersionForApiContract.


        :return: The anything_changed of this ArchivedObjectVersionForApiContract.
        :rtype: bool
        """
        return self._anything_changed

    @anything_changed.setter
    def anything_changed(self, anything_changed):
        """Sets the anything_changed of this ArchivedObjectVersionForApiContract.


        :param anything_changed: The anything_changed of this ArchivedObjectVersionForApiContract.
        :type anything_changed: bool
        """

        self._anything_changed = anything_changed

    @property
    def author(self):
        """Gets the author of this ArchivedObjectVersionForApiContract.


        :return: The author of this ArchivedObjectVersionForApiContract.
        :rtype: UserForApiContract
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ArchivedObjectVersionForApiContract.


        :param author: The author of this ArchivedObjectVersionForApiContract.
        :type author: UserForApiContract
        """

        self._author = author

    @property
    def changed_fields(self):
        """Gets the changed_fields of this ArchivedObjectVersionForApiContract.


        :return: The changed_fields of this ArchivedObjectVersionForApiContract.
        :rtype: List[str]
        """
        return self._changed_fields

    @changed_fields.setter
    def changed_fields(self, changed_fields):
        """Sets the changed_fields of this ArchivedObjectVersionForApiContract.


        :param changed_fields: The changed_fields of this ArchivedObjectVersionForApiContract.
        :type changed_fields: List[str]
        """

        self._changed_fields = changed_fields

    @property
    def created(self):
        """Gets the created of this ArchivedObjectVersionForApiContract.


        :return: The created of this ArchivedObjectVersionForApiContract.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ArchivedObjectVersionForApiContract.


        :param created: The created of this ArchivedObjectVersionForApiContract.
        :type created: datetime
        """

        self._created = created

    @property
    def hidden(self):
        """Gets the hidden of this ArchivedObjectVersionForApiContract.


        :return: The hidden of this ArchivedObjectVersionForApiContract.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ArchivedObjectVersionForApiContract.


        :param hidden: The hidden of this ArchivedObjectVersionForApiContract.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this ArchivedObjectVersionForApiContract.


        :return: The id of this ArchivedObjectVersionForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArchivedObjectVersionForApiContract.


        :param id: The id of this ArchivedObjectVersionForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def is_snapshot(self):
        """Gets the is_snapshot of this ArchivedObjectVersionForApiContract.


        :return: The is_snapshot of this ArchivedObjectVersionForApiContract.
        :rtype: bool
        """
        return self._is_snapshot

    @is_snapshot.setter
    def is_snapshot(self, is_snapshot):
        """Sets the is_snapshot of this ArchivedObjectVersionForApiContract.


        :param is_snapshot: The is_snapshot of this ArchivedObjectVersionForApiContract.
        :type is_snapshot: bool
        """

        self._is_snapshot = is_snapshot

    @property
    def notes(self):
        """Gets the notes of this ArchivedObjectVersionForApiContract.


        :return: The notes of this ArchivedObjectVersionForApiContract.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ArchivedObjectVersionForApiContract.


        :param notes: The notes of this ArchivedObjectVersionForApiContract.
        :type notes: str
        """

        self._notes = notes

    @property
    def reason(self):
        """Gets the reason of this ArchivedObjectVersionForApiContract.


        :return: The reason of this ArchivedObjectVersionForApiContract.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ArchivedObjectVersionForApiContract.


        :param reason: The reason of this ArchivedObjectVersionForApiContract.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this ArchivedObjectVersionForApiContract.


        :return: The status of this ArchivedObjectVersionForApiContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArchivedObjectVersionForApiContract.


        :param status: The status of this ArchivedObjectVersionForApiContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this ArchivedObjectVersionForApiContract.


        :return: The version of this ArchivedObjectVersionForApiContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ArchivedObjectVersionForApiContract.


        :param version: The version of this ArchivedObjectVersionForApiContract.
        :type version: int
        """

        self._version = version
