# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_for_api_contract import CommentForApiContract
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.entry_thumb_for_api_contract import EntryThumbForApiContract
from openapi_server.models.release_event_for_api_contract import ReleaseEventForApiContract
from openapi_server.models.song_list_featured_category import SongListFeaturedCategory
from openapi_server.models.tag_usage_for_api_contract import TagUsageForApiContract
from openapi_server.models.user_for_api_contract import UserForApiContract
from openapi_server import util


class SongListForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: UserForApiContract=None, deleted: bool=None, description: str=None, event_date: datetime=None, events: List[ReleaseEventForApiContract]=None, featured_category: SongListFeaturedCategory=None, id: int=None, latest_comments: List[CommentForApiContract]=None, main_picture: EntryThumbForApiContract=None, name: str=None, status: EntryStatus=None, tags: List[TagUsageForApiContract]=None):
        """SongListForApiContract - a model defined in OpenAPI

        :param author: The author of this SongListForApiContract.
        :param deleted: The deleted of this SongListForApiContract.
        :param description: The description of this SongListForApiContract.
        :param event_date: The event_date of this SongListForApiContract.
        :param events: The events of this SongListForApiContract.
        :param featured_category: The featured_category of this SongListForApiContract.
        :param id: The id of this SongListForApiContract.
        :param latest_comments: The latest_comments of this SongListForApiContract.
        :param main_picture: The main_picture of this SongListForApiContract.
        :param name: The name of this SongListForApiContract.
        :param status: The status of this SongListForApiContract.
        :param tags: The tags of this SongListForApiContract.
        """
        self.openapi_types = {
            'author': UserForApiContract,
            'deleted': bool,
            'description': str,
            'event_date': datetime,
            'events': List[ReleaseEventForApiContract],
            'featured_category': SongListFeaturedCategory,
            'id': int,
            'latest_comments': List[CommentForApiContract],
            'main_picture': EntryThumbForApiContract,
            'name': str,
            'status': EntryStatus,
            'tags': List[TagUsageForApiContract]
        }

        self.attribute_map = {
            'author': 'author',
            'deleted': 'deleted',
            'description': 'description',
            'event_date': 'eventDate',
            'events': 'events',
            'featured_category': 'featuredCategory',
            'id': 'id',
            'latest_comments': 'latestComments',
            'main_picture': 'mainPicture',
            'name': 'name',
            'status': 'status',
            'tags': 'tags'
        }

        self._author = author
        self._deleted = deleted
        self._description = description
        self._event_date = event_date
        self._events = events
        self._featured_category = featured_category
        self._id = id
        self._latest_comments = latest_comments
        self._main_picture = main_picture
        self._name = name
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SongListForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SongListForApiContract of this SongListForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this SongListForApiContract.


        :return: The author of this SongListForApiContract.
        :rtype: UserForApiContract
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this SongListForApiContract.


        :param author: The author of this SongListForApiContract.
        :type author: UserForApiContract
        """

        self._author = author

    @property
    def deleted(self):
        """Gets the deleted of this SongListForApiContract.


        :return: The deleted of this SongListForApiContract.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SongListForApiContract.


        :param deleted: The deleted of this SongListForApiContract.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this SongListForApiContract.


        :return: The description of this SongListForApiContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SongListForApiContract.


        :param description: The description of this SongListForApiContract.
        :type description: str
        """

        self._description = description

    @property
    def event_date(self):
        """Gets the event_date of this SongListForApiContract.


        :return: The event_date of this SongListForApiContract.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this SongListForApiContract.


        :param event_date: The event_date of this SongListForApiContract.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def events(self):
        """Gets the events of this SongListForApiContract.


        :return: The events of this SongListForApiContract.
        :rtype: List[ReleaseEventForApiContract]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this SongListForApiContract.


        :param events: The events of this SongListForApiContract.
        :type events: List[ReleaseEventForApiContract]
        """

        self._events = events

    @property
    def featured_category(self):
        """Gets the featured_category of this SongListForApiContract.


        :return: The featured_category of this SongListForApiContract.
        :rtype: SongListFeaturedCategory
        """
        return self._featured_category

    @featured_category.setter
    def featured_category(self, featured_category):
        """Sets the featured_category of this SongListForApiContract.


        :param featured_category: The featured_category of this SongListForApiContract.
        :type featured_category: SongListFeaturedCategory
        """

        self._featured_category = featured_category

    @property
    def id(self):
        """Gets the id of this SongListForApiContract.


        :return: The id of this SongListForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SongListForApiContract.


        :param id: The id of this SongListForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def latest_comments(self):
        """Gets the latest_comments of this SongListForApiContract.


        :return: The latest_comments of this SongListForApiContract.
        :rtype: List[CommentForApiContract]
        """
        return self._latest_comments

    @latest_comments.setter
    def latest_comments(self, latest_comments):
        """Sets the latest_comments of this SongListForApiContract.


        :param latest_comments: The latest_comments of this SongListForApiContract.
        :type latest_comments: List[CommentForApiContract]
        """

        self._latest_comments = latest_comments

    @property
    def main_picture(self):
        """Gets the main_picture of this SongListForApiContract.


        :return: The main_picture of this SongListForApiContract.
        :rtype: EntryThumbForApiContract
        """
        return self._main_picture

    @main_picture.setter
    def main_picture(self, main_picture):
        """Sets the main_picture of this SongListForApiContract.


        :param main_picture: The main_picture of this SongListForApiContract.
        :type main_picture: EntryThumbForApiContract
        """

        self._main_picture = main_picture

    @property
    def name(self):
        """Gets the name of this SongListForApiContract.


        :return: The name of this SongListForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SongListForApiContract.


        :param name: The name of this SongListForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this SongListForApiContract.


        :return: The status of this SongListForApiContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SongListForApiContract.


        :param status: The status of this SongListForApiContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this SongListForApiContract.


        :return: The tags of this SongListForApiContract.
        :rtype: List[TagUsageForApiContract]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SongListForApiContract.


        :param tags: The tags of this SongListForApiContract.
        :type tags: List[TagUsageForApiContract]
        """

        self._tags = tags
