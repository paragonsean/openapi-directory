# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album_disc_properties_contract import AlbumDiscPropertiesContract
from openapi_server.models.album_identifier_contract import AlbumIdentifierContract
from openapi_server.models.artist_for_album_for_api_contract import ArtistForAlbumForApiContract
from openapi_server.models.content_language_selection import ContentLanguageSelection
from openapi_server.models.disc_type import DiscType
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.entry_thumb_for_api_contract import EntryThumbForApiContract
from openapi_server.models.localized_string_contract import LocalizedStringContract
from openapi_server.models.optional_date_time_contract import OptionalDateTimeContract
from openapi_server.models.pv_contract import PVContract
from openapi_server.models.release_event_for_api_contract import ReleaseEventForApiContract
from openapi_server.models.song_in_album_for_api_contract import SongInAlbumForApiContract
from openapi_server.models.tag_usage_for_api_contract import TagUsageForApiContract
from openapi_server.models.web_link_for_api_contract import WebLinkForApiContract
from openapi_server import util


class AlbumForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, artist_string: str=None, artists: List[ArtistForAlbumForApiContract]=None, barcode: str=None, catalog_number: str=None, create_date: datetime=None, default_name: str=None, default_name_language: ContentLanguageSelection=None, deleted: bool=None, description: str=None, disc_type: DiscType=None, discs: List[AlbumDiscPropertiesContract]=None, id: int=None, identifiers: List[AlbumIdentifierContract]=None, main_picture: EntryThumbForApiContract=None, merged_to: int=None, name: str=None, names: List[LocalizedStringContract]=None, pvs: List[PVContract]=None, rating_average: float=None, rating_count: int=None, release_date: OptionalDateTimeContract=None, release_event: ReleaseEventForApiContract=None, status: EntryStatus=None, tags: List[TagUsageForApiContract]=None, tracks: List[SongInAlbumForApiContract]=None, version: int=None, web_links: List[WebLinkForApiContract]=None):
        """AlbumForApiContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this AlbumForApiContract.
        :param artist_string: The artist_string of this AlbumForApiContract.
        :param artists: The artists of this AlbumForApiContract.
        :param barcode: The barcode of this AlbumForApiContract.
        :param catalog_number: The catalog_number of this AlbumForApiContract.
        :param create_date: The create_date of this AlbumForApiContract.
        :param default_name: The default_name of this AlbumForApiContract.
        :param default_name_language: The default_name_language of this AlbumForApiContract.
        :param deleted: The deleted of this AlbumForApiContract.
        :param description: The description of this AlbumForApiContract.
        :param disc_type: The disc_type of this AlbumForApiContract.
        :param discs: The discs of this AlbumForApiContract.
        :param id: The id of this AlbumForApiContract.
        :param identifiers: The identifiers of this AlbumForApiContract.
        :param main_picture: The main_picture of this AlbumForApiContract.
        :param merged_to: The merged_to of this AlbumForApiContract.
        :param name: The name of this AlbumForApiContract.
        :param names: The names of this AlbumForApiContract.
        :param pvs: The pvs of this AlbumForApiContract.
        :param rating_average: The rating_average of this AlbumForApiContract.
        :param rating_count: The rating_count of this AlbumForApiContract.
        :param release_date: The release_date of this AlbumForApiContract.
        :param release_event: The release_event of this AlbumForApiContract.
        :param status: The status of this AlbumForApiContract.
        :param tags: The tags of this AlbumForApiContract.
        :param tracks: The tracks of this AlbumForApiContract.
        :param version: The version of this AlbumForApiContract.
        :param web_links: The web_links of this AlbumForApiContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'artist_string': str,
            'artists': List[ArtistForAlbumForApiContract],
            'barcode': str,
            'catalog_number': str,
            'create_date': datetime,
            'default_name': str,
            'default_name_language': ContentLanguageSelection,
            'deleted': bool,
            'description': str,
            'disc_type': DiscType,
            'discs': List[AlbumDiscPropertiesContract],
            'id': int,
            'identifiers': List[AlbumIdentifierContract],
            'main_picture': EntryThumbForApiContract,
            'merged_to': int,
            'name': str,
            'names': List[LocalizedStringContract],
            'pvs': List[PVContract],
            'rating_average': float,
            'rating_count': int,
            'release_date': OptionalDateTimeContract,
            'release_event': ReleaseEventForApiContract,
            'status': EntryStatus,
            'tags': List[TagUsageForApiContract],
            'tracks': List[SongInAlbumForApiContract],
            'version': int,
            'web_links': List[WebLinkForApiContract]
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'artist_string': 'artistString',
            'artists': 'artists',
            'barcode': 'barcode',
            'catalog_number': 'catalogNumber',
            'create_date': 'createDate',
            'default_name': 'defaultName',
            'default_name_language': 'defaultNameLanguage',
            'deleted': 'deleted',
            'description': 'description',
            'disc_type': 'discType',
            'discs': 'discs',
            'id': 'id',
            'identifiers': 'identifiers',
            'main_picture': 'mainPicture',
            'merged_to': 'mergedTo',
            'name': 'name',
            'names': 'names',
            'pvs': 'pvs',
            'rating_average': 'ratingAverage',
            'rating_count': 'ratingCount',
            'release_date': 'releaseDate',
            'release_event': 'releaseEvent',
            'status': 'status',
            'tags': 'tags',
            'tracks': 'tracks',
            'version': 'version',
            'web_links': 'webLinks'
        }

        self._additional_names = additional_names
        self._artist_string = artist_string
        self._artists = artists
        self._barcode = barcode
        self._catalog_number = catalog_number
        self._create_date = create_date
        self._default_name = default_name
        self._default_name_language = default_name_language
        self._deleted = deleted
        self._description = description
        self._disc_type = disc_type
        self._discs = discs
        self._id = id
        self._identifiers = identifiers
        self._main_picture = main_picture
        self._merged_to = merged_to
        self._name = name
        self._names = names
        self._pvs = pvs
        self._rating_average = rating_average
        self._rating_count = rating_count
        self._release_date = release_date
        self._release_event = release_event
        self._status = status
        self._tags = tags
        self._tracks = tracks
        self._version = version
        self._web_links = web_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlbumForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlbumForApiContract of this AlbumForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this AlbumForApiContract.


        :return: The additional_names of this AlbumForApiContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this AlbumForApiContract.


        :param additional_names: The additional_names of this AlbumForApiContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def artist_string(self):
        """Gets the artist_string of this AlbumForApiContract.


        :return: The artist_string of this AlbumForApiContract.
        :rtype: str
        """
        return self._artist_string

    @artist_string.setter
    def artist_string(self, artist_string):
        """Sets the artist_string of this AlbumForApiContract.


        :param artist_string: The artist_string of this AlbumForApiContract.
        :type artist_string: str
        """

        self._artist_string = artist_string

    @property
    def artists(self):
        """Gets the artists of this AlbumForApiContract.


        :return: The artists of this AlbumForApiContract.
        :rtype: List[ArtistForAlbumForApiContract]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this AlbumForApiContract.


        :param artists: The artists of this AlbumForApiContract.
        :type artists: List[ArtistForAlbumForApiContract]
        """

        self._artists = artists

    @property
    def barcode(self):
        """Gets the barcode of this AlbumForApiContract.


        :return: The barcode of this AlbumForApiContract.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this AlbumForApiContract.


        :param barcode: The barcode of this AlbumForApiContract.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def catalog_number(self):
        """Gets the catalog_number of this AlbumForApiContract.


        :return: The catalog_number of this AlbumForApiContract.
        :rtype: str
        """
        return self._catalog_number

    @catalog_number.setter
    def catalog_number(self, catalog_number):
        """Sets the catalog_number of this AlbumForApiContract.


        :param catalog_number: The catalog_number of this AlbumForApiContract.
        :type catalog_number: str
        """

        self._catalog_number = catalog_number

    @property
    def create_date(self):
        """Gets the create_date of this AlbumForApiContract.


        :return: The create_date of this AlbumForApiContract.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AlbumForApiContract.


        :param create_date: The create_date of this AlbumForApiContract.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def default_name(self):
        """Gets the default_name of this AlbumForApiContract.


        :return: The default_name of this AlbumForApiContract.
        :rtype: str
        """
        return self._default_name

    @default_name.setter
    def default_name(self, default_name):
        """Sets the default_name of this AlbumForApiContract.


        :param default_name: The default_name of this AlbumForApiContract.
        :type default_name: str
        """

        self._default_name = default_name

    @property
    def default_name_language(self):
        """Gets the default_name_language of this AlbumForApiContract.


        :return: The default_name_language of this AlbumForApiContract.
        :rtype: ContentLanguageSelection
        """
        return self._default_name_language

    @default_name_language.setter
    def default_name_language(self, default_name_language):
        """Sets the default_name_language of this AlbumForApiContract.


        :param default_name_language: The default_name_language of this AlbumForApiContract.
        :type default_name_language: ContentLanguageSelection
        """

        self._default_name_language = default_name_language

    @property
    def deleted(self):
        """Gets the deleted of this AlbumForApiContract.


        :return: The deleted of this AlbumForApiContract.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AlbumForApiContract.


        :param deleted: The deleted of this AlbumForApiContract.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this AlbumForApiContract.


        :return: The description of this AlbumForApiContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlbumForApiContract.


        :param description: The description of this AlbumForApiContract.
        :type description: str
        """

        self._description = description

    @property
    def disc_type(self):
        """Gets the disc_type of this AlbumForApiContract.


        :return: The disc_type of this AlbumForApiContract.
        :rtype: DiscType
        """
        return self._disc_type

    @disc_type.setter
    def disc_type(self, disc_type):
        """Sets the disc_type of this AlbumForApiContract.


        :param disc_type: The disc_type of this AlbumForApiContract.
        :type disc_type: DiscType
        """

        self._disc_type = disc_type

    @property
    def discs(self):
        """Gets the discs of this AlbumForApiContract.


        :return: The discs of this AlbumForApiContract.
        :rtype: List[AlbumDiscPropertiesContract]
        """
        return self._discs

    @discs.setter
    def discs(self, discs):
        """Sets the discs of this AlbumForApiContract.


        :param discs: The discs of this AlbumForApiContract.
        :type discs: List[AlbumDiscPropertiesContract]
        """

        self._discs = discs

    @property
    def id(self):
        """Gets the id of this AlbumForApiContract.


        :return: The id of this AlbumForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlbumForApiContract.


        :param id: The id of this AlbumForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this AlbumForApiContract.


        :return: The identifiers of this AlbumForApiContract.
        :rtype: List[AlbumIdentifierContract]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this AlbumForApiContract.


        :param identifiers: The identifiers of this AlbumForApiContract.
        :type identifiers: List[AlbumIdentifierContract]
        """

        self._identifiers = identifiers

    @property
    def main_picture(self):
        """Gets the main_picture of this AlbumForApiContract.


        :return: The main_picture of this AlbumForApiContract.
        :rtype: EntryThumbForApiContract
        """
        return self._main_picture

    @main_picture.setter
    def main_picture(self, main_picture):
        """Sets the main_picture of this AlbumForApiContract.


        :param main_picture: The main_picture of this AlbumForApiContract.
        :type main_picture: EntryThumbForApiContract
        """

        self._main_picture = main_picture

    @property
    def merged_to(self):
        """Gets the merged_to of this AlbumForApiContract.


        :return: The merged_to of this AlbumForApiContract.
        :rtype: int
        """
        return self._merged_to

    @merged_to.setter
    def merged_to(self, merged_to):
        """Sets the merged_to of this AlbumForApiContract.


        :param merged_to: The merged_to of this AlbumForApiContract.
        :type merged_to: int
        """

        self._merged_to = merged_to

    @property
    def name(self):
        """Gets the name of this AlbumForApiContract.


        :return: The name of this AlbumForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlbumForApiContract.


        :param name: The name of this AlbumForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def names(self):
        """Gets the names of this AlbumForApiContract.


        :return: The names of this AlbumForApiContract.
        :rtype: List[LocalizedStringContract]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this AlbumForApiContract.


        :param names: The names of this AlbumForApiContract.
        :type names: List[LocalizedStringContract]
        """

        self._names = names

    @property
    def pvs(self):
        """Gets the pvs of this AlbumForApiContract.


        :return: The pvs of this AlbumForApiContract.
        :rtype: List[PVContract]
        """
        return self._pvs

    @pvs.setter
    def pvs(self, pvs):
        """Sets the pvs of this AlbumForApiContract.


        :param pvs: The pvs of this AlbumForApiContract.
        :type pvs: List[PVContract]
        """

        self._pvs = pvs

    @property
    def rating_average(self):
        """Gets the rating_average of this AlbumForApiContract.


        :return: The rating_average of this AlbumForApiContract.
        :rtype: float
        """
        return self._rating_average

    @rating_average.setter
    def rating_average(self, rating_average):
        """Sets the rating_average of this AlbumForApiContract.


        :param rating_average: The rating_average of this AlbumForApiContract.
        :type rating_average: float
        """

        self._rating_average = rating_average

    @property
    def rating_count(self):
        """Gets the rating_count of this AlbumForApiContract.


        :return: The rating_count of this AlbumForApiContract.
        :rtype: int
        """
        return self._rating_count

    @rating_count.setter
    def rating_count(self, rating_count):
        """Sets the rating_count of this AlbumForApiContract.


        :param rating_count: The rating_count of this AlbumForApiContract.
        :type rating_count: int
        """

        self._rating_count = rating_count

    @property
    def release_date(self):
        """Gets the release_date of this AlbumForApiContract.


        :return: The release_date of this AlbumForApiContract.
        :rtype: OptionalDateTimeContract
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this AlbumForApiContract.


        :param release_date: The release_date of this AlbumForApiContract.
        :type release_date: OptionalDateTimeContract
        """

        self._release_date = release_date

    @property
    def release_event(self):
        """Gets the release_event of this AlbumForApiContract.


        :return: The release_event of this AlbumForApiContract.
        :rtype: ReleaseEventForApiContract
        """
        return self._release_event

    @release_event.setter
    def release_event(self, release_event):
        """Sets the release_event of this AlbumForApiContract.


        :param release_event: The release_event of this AlbumForApiContract.
        :type release_event: ReleaseEventForApiContract
        """

        self._release_event = release_event

    @property
    def status(self):
        """Gets the status of this AlbumForApiContract.


        :return: The status of this AlbumForApiContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlbumForApiContract.


        :param status: The status of this AlbumForApiContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this AlbumForApiContract.


        :return: The tags of this AlbumForApiContract.
        :rtype: List[TagUsageForApiContract]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AlbumForApiContract.


        :param tags: The tags of this AlbumForApiContract.
        :type tags: List[TagUsageForApiContract]
        """

        self._tags = tags

    @property
    def tracks(self):
        """Gets the tracks of this AlbumForApiContract.


        :return: The tracks of this AlbumForApiContract.
        :rtype: List[SongInAlbumForApiContract]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this AlbumForApiContract.


        :param tracks: The tracks of this AlbumForApiContract.
        :type tracks: List[SongInAlbumForApiContract]
        """

        self._tracks = tracks

    @property
    def version(self):
        """Gets the version of this AlbumForApiContract.


        :return: The version of this AlbumForApiContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AlbumForApiContract.


        :param version: The version of this AlbumForApiContract.
        :type version: int
        """

        self._version = version

    @property
    def web_links(self):
        """Gets the web_links of this AlbumForApiContract.


        :return: The web_links of this AlbumForApiContract.
        :rtype: List[WebLinkForApiContract]
        """
        return self._web_links

    @web_links.setter
    def web_links(self, web_links):
        """Sets the web_links of this AlbumForApiContract.


        :param web_links: The web_links of this AlbumForApiContract.
        :type web_links: List[WebLinkForApiContract]
        """

        self._web_links = web_links
