# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artist_type import ArtistType
from openapi_server.models.entry_status import EntryStatus
from openapi_server import util


class ArtistContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, artist_type: ArtistType=None, deleted: bool=None, id: int=None, name: str=None, picture_mime: str=None, release_date: datetime=None, status: EntryStatus=None, version: int=None):
        """ArtistContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this ArtistContract.
        :param artist_type: The artist_type of this ArtistContract.
        :param deleted: The deleted of this ArtistContract.
        :param id: The id of this ArtistContract.
        :param name: The name of this ArtistContract.
        :param picture_mime: The picture_mime of this ArtistContract.
        :param release_date: The release_date of this ArtistContract.
        :param status: The status of this ArtistContract.
        :param version: The version of this ArtistContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'artist_type': ArtistType,
            'deleted': bool,
            'id': int,
            'name': str,
            'picture_mime': str,
            'release_date': datetime,
            'status': EntryStatus,
            'version': int
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'artist_type': 'artistType',
            'deleted': 'deleted',
            'id': 'id',
            'name': 'name',
            'picture_mime': 'pictureMime',
            'release_date': 'releaseDate',
            'status': 'status',
            'version': 'version'
        }

        self._additional_names = additional_names
        self._artist_type = artist_type
        self._deleted = deleted
        self._id = id
        self._name = name
        self._picture_mime = picture_mime
        self._release_date = release_date
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtistContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtistContract of this ArtistContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this ArtistContract.


        :return: The additional_names of this ArtistContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this ArtistContract.


        :param additional_names: The additional_names of this ArtistContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def artist_type(self):
        """Gets the artist_type of this ArtistContract.


        :return: The artist_type of this ArtistContract.
        :rtype: ArtistType
        """
        return self._artist_type

    @artist_type.setter
    def artist_type(self, artist_type):
        """Sets the artist_type of this ArtistContract.


        :param artist_type: The artist_type of this ArtistContract.
        :type artist_type: ArtistType
        """

        self._artist_type = artist_type

    @property
    def deleted(self):
        """Gets the deleted of this ArtistContract.


        :return: The deleted of this ArtistContract.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ArtistContract.


        :param deleted: The deleted of this ArtistContract.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this ArtistContract.


        :return: The id of this ArtistContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArtistContract.


        :param id: The id of this ArtistContract.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ArtistContract.


        :return: The name of this ArtistContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtistContract.


        :param name: The name of this ArtistContract.
        :type name: str
        """

        self._name = name

    @property
    def picture_mime(self):
        """Gets the picture_mime of this ArtistContract.


        :return: The picture_mime of this ArtistContract.
        :rtype: str
        """
        return self._picture_mime

    @picture_mime.setter
    def picture_mime(self, picture_mime):
        """Sets the picture_mime of this ArtistContract.


        :param picture_mime: The picture_mime of this ArtistContract.
        :type picture_mime: str
        """

        self._picture_mime = picture_mime

    @property
    def release_date(self):
        """Gets the release_date of this ArtistContract.


        :return: The release_date of this ArtistContract.
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ArtistContract.


        :param release_date: The release_date of this ArtistContract.
        :type release_date: datetime
        """

        self._release_date = release_date

    @property
    def status(self):
        """Gets the status of this ArtistContract.


        :return: The status of this ArtistContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArtistContract.


        :param status: The status of this ArtistContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this ArtistContract.


        :return: The version of this ArtistContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ArtistContract.


        :param version: The version of this ArtistContract.
        :type version: int
        """

        self._version = version
