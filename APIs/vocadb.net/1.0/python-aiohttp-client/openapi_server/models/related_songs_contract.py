# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.song_for_api_contract import SongForApiContract
from openapi_server import util


class RelatedSongsContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artist_matches: List[SongForApiContract]=None, like_matches: List[SongForApiContract]=None, tag_matches: List[SongForApiContract]=None):
        """RelatedSongsContract - a model defined in OpenAPI

        :param artist_matches: The artist_matches of this RelatedSongsContract.
        :param like_matches: The like_matches of this RelatedSongsContract.
        :param tag_matches: The tag_matches of this RelatedSongsContract.
        """
        self.openapi_types = {
            'artist_matches': List[SongForApiContract],
            'like_matches': List[SongForApiContract],
            'tag_matches': List[SongForApiContract]
        }

        self.attribute_map = {
            'artist_matches': 'artistMatches',
            'like_matches': 'likeMatches',
            'tag_matches': 'tagMatches'
        }

        self._artist_matches = artist_matches
        self._like_matches = like_matches
        self._tag_matches = tag_matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedSongsContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelatedSongsContract of this RelatedSongsContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist_matches(self):
        """Gets the artist_matches of this RelatedSongsContract.


        :return: The artist_matches of this RelatedSongsContract.
        :rtype: List[SongForApiContract]
        """
        return self._artist_matches

    @artist_matches.setter
    def artist_matches(self, artist_matches):
        """Sets the artist_matches of this RelatedSongsContract.


        :param artist_matches: The artist_matches of this RelatedSongsContract.
        :type artist_matches: List[SongForApiContract]
        """

        self._artist_matches = artist_matches

    @property
    def like_matches(self):
        """Gets the like_matches of this RelatedSongsContract.


        :return: The like_matches of this RelatedSongsContract.
        :rtype: List[SongForApiContract]
        """
        return self._like_matches

    @like_matches.setter
    def like_matches(self, like_matches):
        """Sets the like_matches of this RelatedSongsContract.


        :param like_matches: The like_matches of this RelatedSongsContract.
        :type like_matches: List[SongForApiContract]
        """

        self._like_matches = like_matches

    @property
    def tag_matches(self):
        """Gets the tag_matches of this RelatedSongsContract.


        :return: The tag_matches of this RelatedSongsContract.
        :rtype: List[SongForApiContract]
        """
        return self._tag_matches

    @tag_matches.setter
    def tag_matches(self, tag_matches):
        """Sets the tag_matches of this RelatedSongsContract.


        :param tag_matches: The tag_matches of this RelatedSongsContract.
        :type tag_matches: List[SongForApiContract]
        """

        self._tag_matches = tag_matches
