# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.entry_thumb_for_api_contract import EntryThumbForApiContract
from openapi_server.models.song_in_list_edit_contract import SongInListEditContract
from openapi_server.models.song_list_featured_category import SongListFeaturedCategory
from openapi_server import util


class SongListForEditForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted: bool=None, description: str=None, event_date: datetime=None, featured_category: SongListFeaturedCategory=None, id: int=None, main_picture: EntryThumbForApiContract=None, name: str=None, song_links: List[SongInListEditContract]=None, status: EntryStatus=None, update_notes: str=None):
        """SongListForEditForApiContract - a model defined in OpenAPI

        :param deleted: The deleted of this SongListForEditForApiContract.
        :param description: The description of this SongListForEditForApiContract.
        :param event_date: The event_date of this SongListForEditForApiContract.
        :param featured_category: The featured_category of this SongListForEditForApiContract.
        :param id: The id of this SongListForEditForApiContract.
        :param main_picture: The main_picture of this SongListForEditForApiContract.
        :param name: The name of this SongListForEditForApiContract.
        :param song_links: The song_links of this SongListForEditForApiContract.
        :param status: The status of this SongListForEditForApiContract.
        :param update_notes: The update_notes of this SongListForEditForApiContract.
        """
        self.openapi_types = {
            'deleted': bool,
            'description': str,
            'event_date': datetime,
            'featured_category': SongListFeaturedCategory,
            'id': int,
            'main_picture': EntryThumbForApiContract,
            'name': str,
            'song_links': List[SongInListEditContract],
            'status': EntryStatus,
            'update_notes': str
        }

        self.attribute_map = {
            'deleted': 'deleted',
            'description': 'description',
            'event_date': 'eventDate',
            'featured_category': 'featuredCategory',
            'id': 'id',
            'main_picture': 'mainPicture',
            'name': 'name',
            'song_links': 'songLinks',
            'status': 'status',
            'update_notes': 'updateNotes'
        }

        self._deleted = deleted
        self._description = description
        self._event_date = event_date
        self._featured_category = featured_category
        self._id = id
        self._main_picture = main_picture
        self._name = name
        self._song_links = song_links
        self._status = status
        self._update_notes = update_notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SongListForEditForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SongListForEditForApiContract of this SongListForEditForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted(self):
        """Gets the deleted of this SongListForEditForApiContract.


        :return: The deleted of this SongListForEditForApiContract.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SongListForEditForApiContract.


        :param deleted: The deleted of this SongListForEditForApiContract.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this SongListForEditForApiContract.


        :return: The description of this SongListForEditForApiContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SongListForEditForApiContract.


        :param description: The description of this SongListForEditForApiContract.
        :type description: str
        """

        self._description = description

    @property
    def event_date(self):
        """Gets the event_date of this SongListForEditForApiContract.


        :return: The event_date of this SongListForEditForApiContract.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this SongListForEditForApiContract.


        :param event_date: The event_date of this SongListForEditForApiContract.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def featured_category(self):
        """Gets the featured_category of this SongListForEditForApiContract.


        :return: The featured_category of this SongListForEditForApiContract.
        :rtype: SongListFeaturedCategory
        """
        return self._featured_category

    @featured_category.setter
    def featured_category(self, featured_category):
        """Sets the featured_category of this SongListForEditForApiContract.


        :param featured_category: The featured_category of this SongListForEditForApiContract.
        :type featured_category: SongListFeaturedCategory
        """

        self._featured_category = featured_category

    @property
    def id(self):
        """Gets the id of this SongListForEditForApiContract.


        :return: The id of this SongListForEditForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SongListForEditForApiContract.


        :param id: The id of this SongListForEditForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def main_picture(self):
        """Gets the main_picture of this SongListForEditForApiContract.


        :return: The main_picture of this SongListForEditForApiContract.
        :rtype: EntryThumbForApiContract
        """
        return self._main_picture

    @main_picture.setter
    def main_picture(self, main_picture):
        """Sets the main_picture of this SongListForEditForApiContract.


        :param main_picture: The main_picture of this SongListForEditForApiContract.
        :type main_picture: EntryThumbForApiContract
        """

        self._main_picture = main_picture

    @property
    def name(self):
        """Gets the name of this SongListForEditForApiContract.


        :return: The name of this SongListForEditForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SongListForEditForApiContract.


        :param name: The name of this SongListForEditForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def song_links(self):
        """Gets the song_links of this SongListForEditForApiContract.


        :return: The song_links of this SongListForEditForApiContract.
        :rtype: List[SongInListEditContract]
        """
        return self._song_links

    @song_links.setter
    def song_links(self, song_links):
        """Sets the song_links of this SongListForEditForApiContract.


        :param song_links: The song_links of this SongListForEditForApiContract.
        :type song_links: List[SongInListEditContract]
        """

        self._song_links = song_links

    @property
    def status(self):
        """Gets the status of this SongListForEditForApiContract.


        :return: The status of this SongListForEditForApiContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SongListForEditForApiContract.


        :param status: The status of this SongListForEditForApiContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def update_notes(self):
        """Gets the update_notes of this SongListForEditForApiContract.


        :return: The update_notes of this SongListForEditForApiContract.
        :rtype: str
        """
        return self._update_notes

    @update_notes.setter
    def update_notes(self, update_notes):
        """Sets the update_notes of this SongListForEditForApiContract.


        :param update_notes: The update_notes of this SongListForEditForApiContract.
        :type update_notes: str
        """

        self._update_notes = update_notes
