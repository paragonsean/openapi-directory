# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.song_for_api_contract import SongForApiContract
from openapi_server.models.song_vote_rating import SongVoteRating
from openapi_server import util


class SongInAlbumForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disc_number: int=None, id: int=None, name: str=None, rating: SongVoteRating=None, song: SongForApiContract=None, track_number: int=None):
        """SongInAlbumForApiContract - a model defined in OpenAPI

        :param disc_number: The disc_number of this SongInAlbumForApiContract.
        :param id: The id of this SongInAlbumForApiContract.
        :param name: The name of this SongInAlbumForApiContract.
        :param rating: The rating of this SongInAlbumForApiContract.
        :param song: The song of this SongInAlbumForApiContract.
        :param track_number: The track_number of this SongInAlbumForApiContract.
        """
        self.openapi_types = {
            'disc_number': int,
            'id': int,
            'name': str,
            'rating': SongVoteRating,
            'song': SongForApiContract,
            'track_number': int
        }

        self.attribute_map = {
            'disc_number': 'discNumber',
            'id': 'id',
            'name': 'name',
            'rating': 'rating',
            'song': 'song',
            'track_number': 'trackNumber'
        }

        self._disc_number = disc_number
        self._id = id
        self._name = name
        self._rating = rating
        self._song = song
        self._track_number = track_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SongInAlbumForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SongInAlbumForApiContract of this SongInAlbumForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disc_number(self):
        """Gets the disc_number of this SongInAlbumForApiContract.


        :return: The disc_number of this SongInAlbumForApiContract.
        :rtype: int
        """
        return self._disc_number

    @disc_number.setter
    def disc_number(self, disc_number):
        """Sets the disc_number of this SongInAlbumForApiContract.


        :param disc_number: The disc_number of this SongInAlbumForApiContract.
        :type disc_number: int
        """

        self._disc_number = disc_number

    @property
    def id(self):
        """Gets the id of this SongInAlbumForApiContract.


        :return: The id of this SongInAlbumForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SongInAlbumForApiContract.


        :param id: The id of this SongInAlbumForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SongInAlbumForApiContract.


        :return: The name of this SongInAlbumForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SongInAlbumForApiContract.


        :param name: The name of this SongInAlbumForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def rating(self):
        """Gets the rating of this SongInAlbumForApiContract.


        :return: The rating of this SongInAlbumForApiContract.
        :rtype: SongVoteRating
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this SongInAlbumForApiContract.


        :param rating: The rating of this SongInAlbumForApiContract.
        :type rating: SongVoteRating
        """

        self._rating = rating

    @property
    def song(self):
        """Gets the song of this SongInAlbumForApiContract.


        :return: The song of this SongInAlbumForApiContract.
        :rtype: SongForApiContract
        """
        return self._song

    @song.setter
    def song(self, song):
        """Sets the song of this SongInAlbumForApiContract.


        :param song: The song of this SongInAlbumForApiContract.
        :type song: SongForApiContract
        """

        self._song = song

    @property
    def track_number(self):
        """Gets the track_number of this SongInAlbumForApiContract.


        :return: The track_number of this SongInAlbumForApiContract.
        :rtype: int
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this SongInAlbumForApiContract.


        :param track_number: The track_number of this SongInAlbumForApiContract.
        :type track_number: int
        """

        self._track_number = track_number
