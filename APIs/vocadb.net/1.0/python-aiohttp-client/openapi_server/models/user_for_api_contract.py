# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_thumb_for_api_contract import EntryThumbForApiContract
from openapi_server.models.old_username_contract import OldUsernameContract
from openapi_server.models.user_group_id import UserGroupId
from openapi_server.models.user_known_language_contract import UserKnownLanguageContract
from openapi_server import util


class UserForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, group_id: UserGroupId=None, id: int=None, known_languages: List[UserKnownLanguageContract]=None, main_picture: EntryThumbForApiContract=None, member_since: datetime=None, name: str=None, old_usernames: List[OldUsernameContract]=None, verified_artist: bool=None):
        """UserForApiContract - a model defined in OpenAPI

        :param active: The active of this UserForApiContract.
        :param group_id: The group_id of this UserForApiContract.
        :param id: The id of this UserForApiContract.
        :param known_languages: The known_languages of this UserForApiContract.
        :param main_picture: The main_picture of this UserForApiContract.
        :param member_since: The member_since of this UserForApiContract.
        :param name: The name of this UserForApiContract.
        :param old_usernames: The old_usernames of this UserForApiContract.
        :param verified_artist: The verified_artist of this UserForApiContract.
        """
        self.openapi_types = {
            'active': bool,
            'group_id': UserGroupId,
            'id': int,
            'known_languages': List[UserKnownLanguageContract],
            'main_picture': EntryThumbForApiContract,
            'member_since': datetime,
            'name': str,
            'old_usernames': List[OldUsernameContract],
            'verified_artist': bool
        }

        self.attribute_map = {
            'active': 'active',
            'group_id': 'groupId',
            'id': 'id',
            'known_languages': 'knownLanguages',
            'main_picture': 'mainPicture',
            'member_since': 'memberSince',
            'name': 'name',
            'old_usernames': 'oldUsernames',
            'verified_artist': 'verifiedArtist'
        }

        self._active = active
        self._group_id = group_id
        self._id = id
        self._known_languages = known_languages
        self._main_picture = main_picture
        self._member_since = member_since
        self._name = name
        self._old_usernames = old_usernames
        self._verified_artist = verified_artist

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserForApiContract of this UserForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this UserForApiContract.


        :return: The active of this UserForApiContract.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserForApiContract.


        :param active: The active of this UserForApiContract.
        :type active: bool
        """

        self._active = active

    @property
    def group_id(self):
        """Gets the group_id of this UserForApiContract.


        :return: The group_id of this UserForApiContract.
        :rtype: UserGroupId
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this UserForApiContract.


        :param group_id: The group_id of this UserForApiContract.
        :type group_id: UserGroupId
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this UserForApiContract.


        :return: The id of this UserForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserForApiContract.


        :param id: The id of this UserForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def known_languages(self):
        """Gets the known_languages of this UserForApiContract.


        :return: The known_languages of this UserForApiContract.
        :rtype: List[UserKnownLanguageContract]
        """
        return self._known_languages

    @known_languages.setter
    def known_languages(self, known_languages):
        """Sets the known_languages of this UserForApiContract.


        :param known_languages: The known_languages of this UserForApiContract.
        :type known_languages: List[UserKnownLanguageContract]
        """

        self._known_languages = known_languages

    @property
    def main_picture(self):
        """Gets the main_picture of this UserForApiContract.


        :return: The main_picture of this UserForApiContract.
        :rtype: EntryThumbForApiContract
        """
        return self._main_picture

    @main_picture.setter
    def main_picture(self, main_picture):
        """Sets the main_picture of this UserForApiContract.


        :param main_picture: The main_picture of this UserForApiContract.
        :type main_picture: EntryThumbForApiContract
        """

        self._main_picture = main_picture

    @property
    def member_since(self):
        """Gets the member_since of this UserForApiContract.


        :return: The member_since of this UserForApiContract.
        :rtype: datetime
        """
        return self._member_since

    @member_since.setter
    def member_since(self, member_since):
        """Sets the member_since of this UserForApiContract.


        :param member_since: The member_since of this UserForApiContract.
        :type member_since: datetime
        """

        self._member_since = member_since

    @property
    def name(self):
        """Gets the name of this UserForApiContract.


        :return: The name of this UserForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserForApiContract.


        :param name: The name of this UserForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def old_usernames(self):
        """Gets the old_usernames of this UserForApiContract.


        :return: The old_usernames of this UserForApiContract.
        :rtype: List[OldUsernameContract]
        """
        return self._old_usernames

    @old_usernames.setter
    def old_usernames(self, old_usernames):
        """Sets the old_usernames of this UserForApiContract.


        :param old_usernames: The old_usernames of this UserForApiContract.
        :type old_usernames: List[OldUsernameContract]
        """

        self._old_usernames = old_usernames

    @property
    def verified_artist(self):
        """Gets the verified_artist of this UserForApiContract.


        :return: The verified_artist of this UserForApiContract.
        :rtype: bool
        """
        return self._verified_artist

    @verified_artist.setter
    def verified_artist(self, verified_artist):
        """Sets the verified_artist of this UserForApiContract.


        :param verified_artist: The verified_artist of this UserForApiContract.
        :type verified_artist: bool
        """

        self._verified_artist = verified_artist
