# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entry_for_api_contract import EntryForApiContract
from openapi_server.models.user_for_api_contract import UserForApiContract
from openapi_server import util


class CommentForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: UserForApiContract=None, author_name: str=None, created: datetime=None, entry: EntryForApiContract=None, id: int=None, message: str=None):
        """CommentForApiContract - a model defined in OpenAPI

        :param author: The author of this CommentForApiContract.
        :param author_name: The author_name of this CommentForApiContract.
        :param created: The created of this CommentForApiContract.
        :param entry: The entry of this CommentForApiContract.
        :param id: The id of this CommentForApiContract.
        :param message: The message of this CommentForApiContract.
        """
        self.openapi_types = {
            'author': UserForApiContract,
            'author_name': str,
            'created': datetime,
            'entry': EntryForApiContract,
            'id': int,
            'message': str
        }

        self.attribute_map = {
            'author': 'author',
            'author_name': 'authorName',
            'created': 'created',
            'entry': 'entry',
            'id': 'id',
            'message': 'message'
        }

        self._author = author
        self._author_name = author_name
        self._created = created
        self._entry = entry
        self._id = id
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentForApiContract of this CommentForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CommentForApiContract.


        :return: The author of this CommentForApiContract.
        :rtype: UserForApiContract
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommentForApiContract.


        :param author: The author of this CommentForApiContract.
        :type author: UserForApiContract
        """

        self._author = author

    @property
    def author_name(self):
        """Gets the author_name of this CommentForApiContract.


        :return: The author_name of this CommentForApiContract.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this CommentForApiContract.


        :param author_name: The author_name of this CommentForApiContract.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def created(self):
        """Gets the created of this CommentForApiContract.


        :return: The created of this CommentForApiContract.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CommentForApiContract.


        :param created: The created of this CommentForApiContract.
        :type created: datetime
        """

        self._created = created

    @property
    def entry(self):
        """Gets the entry of this CommentForApiContract.


        :return: The entry of this CommentForApiContract.
        :rtype: EntryForApiContract
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this CommentForApiContract.


        :param entry: The entry of this CommentForApiContract.
        :type entry: EntryForApiContract
        """

        self._entry = entry

    @property
    def id(self):
        """Gets the id of this CommentForApiContract.


        :return: The id of this CommentForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommentForApiContract.


        :param id: The id of this CommentForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this CommentForApiContract.


        :return: The message of this CommentForApiContract.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CommentForApiContract.


        :param message: The message of this CommentForApiContract.
        :type message: str
        """

        self._message = message
