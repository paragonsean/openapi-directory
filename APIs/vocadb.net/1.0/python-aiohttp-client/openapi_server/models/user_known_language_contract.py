# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_language_proficiency import UserLanguageProficiency
from openapi_server import util


class UserKnownLanguageContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, culture_code: str=None, proficiency: UserLanguageProficiency=None):
        """UserKnownLanguageContract - a model defined in OpenAPI

        :param culture_code: The culture_code of this UserKnownLanguageContract.
        :param proficiency: The proficiency of this UserKnownLanguageContract.
        """
        self.openapi_types = {
            'culture_code': str,
            'proficiency': UserLanguageProficiency
        }

        self.attribute_map = {
            'culture_code': 'cultureCode',
            'proficiency': 'proficiency'
        }

        self._culture_code = culture_code
        self._proficiency = proficiency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserKnownLanguageContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserKnownLanguageContract of this UserKnownLanguageContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def culture_code(self):
        """Gets the culture_code of this UserKnownLanguageContract.


        :return: The culture_code of this UserKnownLanguageContract.
        :rtype: str
        """
        return self._culture_code

    @culture_code.setter
    def culture_code(self, culture_code):
        """Sets the culture_code of this UserKnownLanguageContract.


        :param culture_code: The culture_code of this UserKnownLanguageContract.
        :type culture_code: str
        """

        self._culture_code = culture_code

    @property
    def proficiency(self):
        """Gets the proficiency of this UserKnownLanguageContract.


        :return: The proficiency of this UserKnownLanguageContract.
        :rtype: UserLanguageProficiency
        """
        return self._proficiency

    @proficiency.setter
    def proficiency(self, proficiency):
        """Sets the proficiency of this UserKnownLanguageContract.


        :param proficiency: The proficiency of this UserKnownLanguageContract.
        :type proficiency: UserLanguageProficiency
        """

        self._proficiency = proficiency
