# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_language_selection import ContentLanguageSelection
from openapi_server.models.english_translated_string_contract import EnglishTranslatedStringContract
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.entry_thumb_for_api_contract import EntryThumbForApiContract
from openapi_server.models.localized_string_with_id_contract import LocalizedStringWithIdContract
from openapi_server.models.tag_base_contract import TagBaseContract
from openapi_server.models.web_link_for_api_contract import WebLinkForApiContract
from openapi_server import util


class TagForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, aliased_to: TagBaseContract=None, category_name: str=None, create_date: datetime=None, default_name_language: ContentLanguageSelection=None, description: str=None, id: int=None, main_picture: EntryThumbForApiContract=None, name: str=None, names: List[LocalizedStringWithIdContract]=None, parent: TagBaseContract=None, related_tags: List[TagBaseContract]=None, status: EntryStatus=None, targets: int=None, translated_description: EnglishTranslatedStringContract=None, url_slug: str=None, usage_count: int=None, version: int=None, web_links: List[WebLinkForApiContract]=None):
        """TagForApiContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this TagForApiContract.
        :param aliased_to: The aliased_to of this TagForApiContract.
        :param category_name: The category_name of this TagForApiContract.
        :param create_date: The create_date of this TagForApiContract.
        :param default_name_language: The default_name_language of this TagForApiContract.
        :param description: The description of this TagForApiContract.
        :param id: The id of this TagForApiContract.
        :param main_picture: The main_picture of this TagForApiContract.
        :param name: The name of this TagForApiContract.
        :param names: The names of this TagForApiContract.
        :param parent: The parent of this TagForApiContract.
        :param related_tags: The related_tags of this TagForApiContract.
        :param status: The status of this TagForApiContract.
        :param targets: The targets of this TagForApiContract.
        :param translated_description: The translated_description of this TagForApiContract.
        :param url_slug: The url_slug of this TagForApiContract.
        :param usage_count: The usage_count of this TagForApiContract.
        :param version: The version of this TagForApiContract.
        :param web_links: The web_links of this TagForApiContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'aliased_to': TagBaseContract,
            'category_name': str,
            'create_date': datetime,
            'default_name_language': ContentLanguageSelection,
            'description': str,
            'id': int,
            'main_picture': EntryThumbForApiContract,
            'name': str,
            'names': List[LocalizedStringWithIdContract],
            'parent': TagBaseContract,
            'related_tags': List[TagBaseContract],
            'status': EntryStatus,
            'targets': int,
            'translated_description': EnglishTranslatedStringContract,
            'url_slug': str,
            'usage_count': int,
            'version': int,
            'web_links': List[WebLinkForApiContract]
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'aliased_to': 'aliasedTo',
            'category_name': 'categoryName',
            'create_date': 'createDate',
            'default_name_language': 'defaultNameLanguage',
            'description': 'description',
            'id': 'id',
            'main_picture': 'mainPicture',
            'name': 'name',
            'names': 'names',
            'parent': 'parent',
            'related_tags': 'relatedTags',
            'status': 'status',
            'targets': 'targets',
            'translated_description': 'translatedDescription',
            'url_slug': 'urlSlug',
            'usage_count': 'usageCount',
            'version': 'version',
            'web_links': 'webLinks'
        }

        self._additional_names = additional_names
        self._aliased_to = aliased_to
        self._category_name = category_name
        self._create_date = create_date
        self._default_name_language = default_name_language
        self._description = description
        self._id = id
        self._main_picture = main_picture
        self._name = name
        self._names = names
        self._parent = parent
        self._related_tags = related_tags
        self._status = status
        self._targets = targets
        self._translated_description = translated_description
        self._url_slug = url_slug
        self._usage_count = usage_count
        self._version = version
        self._web_links = web_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagForApiContract of this TagForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this TagForApiContract.


        :return: The additional_names of this TagForApiContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this TagForApiContract.


        :param additional_names: The additional_names of this TagForApiContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def aliased_to(self):
        """Gets the aliased_to of this TagForApiContract.


        :return: The aliased_to of this TagForApiContract.
        :rtype: TagBaseContract
        """
        return self._aliased_to

    @aliased_to.setter
    def aliased_to(self, aliased_to):
        """Sets the aliased_to of this TagForApiContract.


        :param aliased_to: The aliased_to of this TagForApiContract.
        :type aliased_to: TagBaseContract
        """

        self._aliased_to = aliased_to

    @property
    def category_name(self):
        """Gets the category_name of this TagForApiContract.


        :return: The category_name of this TagForApiContract.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this TagForApiContract.


        :param category_name: The category_name of this TagForApiContract.
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def create_date(self):
        """Gets the create_date of this TagForApiContract.


        :return: The create_date of this TagForApiContract.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this TagForApiContract.


        :param create_date: The create_date of this TagForApiContract.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def default_name_language(self):
        """Gets the default_name_language of this TagForApiContract.


        :return: The default_name_language of this TagForApiContract.
        :rtype: ContentLanguageSelection
        """
        return self._default_name_language

    @default_name_language.setter
    def default_name_language(self, default_name_language):
        """Sets the default_name_language of this TagForApiContract.


        :param default_name_language: The default_name_language of this TagForApiContract.
        :type default_name_language: ContentLanguageSelection
        """

        self._default_name_language = default_name_language

    @property
    def description(self):
        """Gets the description of this TagForApiContract.


        :return: The description of this TagForApiContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TagForApiContract.


        :param description: The description of this TagForApiContract.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TagForApiContract.


        :return: The id of this TagForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TagForApiContract.


        :param id: The id of this TagForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def main_picture(self):
        """Gets the main_picture of this TagForApiContract.


        :return: The main_picture of this TagForApiContract.
        :rtype: EntryThumbForApiContract
        """
        return self._main_picture

    @main_picture.setter
    def main_picture(self, main_picture):
        """Sets the main_picture of this TagForApiContract.


        :param main_picture: The main_picture of this TagForApiContract.
        :type main_picture: EntryThumbForApiContract
        """

        self._main_picture = main_picture

    @property
    def name(self):
        """Gets the name of this TagForApiContract.


        :return: The name of this TagForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagForApiContract.


        :param name: The name of this TagForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def names(self):
        """Gets the names of this TagForApiContract.


        :return: The names of this TagForApiContract.
        :rtype: List[LocalizedStringWithIdContract]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this TagForApiContract.


        :param names: The names of this TagForApiContract.
        :type names: List[LocalizedStringWithIdContract]
        """

        self._names = names

    @property
    def parent(self):
        """Gets the parent of this TagForApiContract.


        :return: The parent of this TagForApiContract.
        :rtype: TagBaseContract
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TagForApiContract.


        :param parent: The parent of this TagForApiContract.
        :type parent: TagBaseContract
        """

        self._parent = parent

    @property
    def related_tags(self):
        """Gets the related_tags of this TagForApiContract.


        :return: The related_tags of this TagForApiContract.
        :rtype: List[TagBaseContract]
        """
        return self._related_tags

    @related_tags.setter
    def related_tags(self, related_tags):
        """Sets the related_tags of this TagForApiContract.


        :param related_tags: The related_tags of this TagForApiContract.
        :type related_tags: List[TagBaseContract]
        """

        self._related_tags = related_tags

    @property
    def status(self):
        """Gets the status of this TagForApiContract.


        :return: The status of this TagForApiContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TagForApiContract.


        :param status: The status of this TagForApiContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def targets(self):
        """Gets the targets of this TagForApiContract.


        :return: The targets of this TagForApiContract.
        :rtype: int
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this TagForApiContract.


        :param targets: The targets of this TagForApiContract.
        :type targets: int
        """

        self._targets = targets

    @property
    def translated_description(self):
        """Gets the translated_description of this TagForApiContract.


        :return: The translated_description of this TagForApiContract.
        :rtype: EnglishTranslatedStringContract
        """
        return self._translated_description

    @translated_description.setter
    def translated_description(self, translated_description):
        """Sets the translated_description of this TagForApiContract.


        :param translated_description: The translated_description of this TagForApiContract.
        :type translated_description: EnglishTranslatedStringContract
        """

        self._translated_description = translated_description

    @property
    def url_slug(self):
        """Gets the url_slug of this TagForApiContract.


        :return: The url_slug of this TagForApiContract.
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this TagForApiContract.


        :param url_slug: The url_slug of this TagForApiContract.
        :type url_slug: str
        """

        self._url_slug = url_slug

    @property
    def usage_count(self):
        """Gets the usage_count of this TagForApiContract.


        :return: The usage_count of this TagForApiContract.
        :rtype: int
        """
        return self._usage_count

    @usage_count.setter
    def usage_count(self, usage_count):
        """Sets the usage_count of this TagForApiContract.


        :param usage_count: The usage_count of this TagForApiContract.
        :type usage_count: int
        """

        self._usage_count = usage_count

    @property
    def version(self):
        """Gets the version of this TagForApiContract.


        :return: The version of this TagForApiContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TagForApiContract.


        :param version: The version of this TagForApiContract.
        :type version: int
        """

        self._version = version

    @property
    def web_links(self):
        """Gets the web_links of this TagForApiContract.


        :return: The web_links of this TagForApiContract.
        :rtype: List[WebLinkForApiContract]
        """
        return self._web_links

    @web_links.setter
    def web_links(self, web_links):
        """Sets the web_links of this TagForApiContract.


        :param web_links: The web_links of this TagForApiContract.
        :type web_links: List[WebLinkForApiContract]
        """

        self._web_links = web_links
