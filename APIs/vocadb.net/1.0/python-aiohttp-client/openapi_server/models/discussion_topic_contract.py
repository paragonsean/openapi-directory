# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_for_api_contract import CommentForApiContract
from openapi_server.models.user_for_api_contract import UserForApiContract
from openapi_server import util


class DiscussionTopicContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: UserForApiContract=None, comment_count: int=None, comments: List[CommentForApiContract]=None, content: str=None, created: datetime=None, folder_id: int=None, id: int=None, last_comment: CommentForApiContract=None, locked: bool=None, name: str=None):
        """DiscussionTopicContract - a model defined in OpenAPI

        :param author: The author of this DiscussionTopicContract.
        :param comment_count: The comment_count of this DiscussionTopicContract.
        :param comments: The comments of this DiscussionTopicContract.
        :param content: The content of this DiscussionTopicContract.
        :param created: The created of this DiscussionTopicContract.
        :param folder_id: The folder_id of this DiscussionTopicContract.
        :param id: The id of this DiscussionTopicContract.
        :param last_comment: The last_comment of this DiscussionTopicContract.
        :param locked: The locked of this DiscussionTopicContract.
        :param name: The name of this DiscussionTopicContract.
        """
        self.openapi_types = {
            'author': UserForApiContract,
            'comment_count': int,
            'comments': List[CommentForApiContract],
            'content': str,
            'created': datetime,
            'folder_id': int,
            'id': int,
            'last_comment': CommentForApiContract,
            'locked': bool,
            'name': str
        }

        self.attribute_map = {
            'author': 'author',
            'comment_count': 'commentCount',
            'comments': 'comments',
            'content': 'content',
            'created': 'created',
            'folder_id': 'folderId',
            'id': 'id',
            'last_comment': 'lastComment',
            'locked': 'locked',
            'name': 'name'
        }

        self._author = author
        self._comment_count = comment_count
        self._comments = comments
        self._content = content
        self._created = created
        self._folder_id = folder_id
        self._id = id
        self._last_comment = last_comment
        self._locked = locked
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscussionTopicContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscussionTopicContract of this DiscussionTopicContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this DiscussionTopicContract.


        :return: The author of this DiscussionTopicContract.
        :rtype: UserForApiContract
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this DiscussionTopicContract.


        :param author: The author of this DiscussionTopicContract.
        :type author: UserForApiContract
        """

        self._author = author

    @property
    def comment_count(self):
        """Gets the comment_count of this DiscussionTopicContract.


        :return: The comment_count of this DiscussionTopicContract.
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this DiscussionTopicContract.


        :param comment_count: The comment_count of this DiscussionTopicContract.
        :type comment_count: int
        """

        self._comment_count = comment_count

    @property
    def comments(self):
        """Gets the comments of this DiscussionTopicContract.


        :return: The comments of this DiscussionTopicContract.
        :rtype: List[CommentForApiContract]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this DiscussionTopicContract.


        :param comments: The comments of this DiscussionTopicContract.
        :type comments: List[CommentForApiContract]
        """

        self._comments = comments

    @property
    def content(self):
        """Gets the content of this DiscussionTopicContract.


        :return: The content of this DiscussionTopicContract.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DiscussionTopicContract.


        :param content: The content of this DiscussionTopicContract.
        :type content: str
        """

        self._content = content

    @property
    def created(self):
        """Gets the created of this DiscussionTopicContract.


        :return: The created of this DiscussionTopicContract.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DiscussionTopicContract.


        :param created: The created of this DiscussionTopicContract.
        :type created: datetime
        """

        self._created = created

    @property
    def folder_id(self):
        """Gets the folder_id of this DiscussionTopicContract.


        :return: The folder_id of this DiscussionTopicContract.
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this DiscussionTopicContract.


        :param folder_id: The folder_id of this DiscussionTopicContract.
        :type folder_id: int
        """

        self._folder_id = folder_id

    @property
    def id(self):
        """Gets the id of this DiscussionTopicContract.


        :return: The id of this DiscussionTopicContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscussionTopicContract.


        :param id: The id of this DiscussionTopicContract.
        :type id: int
        """

        self._id = id

    @property
    def last_comment(self):
        """Gets the last_comment of this DiscussionTopicContract.


        :return: The last_comment of this DiscussionTopicContract.
        :rtype: CommentForApiContract
        """
        return self._last_comment

    @last_comment.setter
    def last_comment(self, last_comment):
        """Sets the last_comment of this DiscussionTopicContract.


        :param last_comment: The last_comment of this DiscussionTopicContract.
        :type last_comment: CommentForApiContract
        """

        self._last_comment = last_comment

    @property
    def locked(self):
        """Gets the locked of this DiscussionTopicContract.


        :return: The locked of this DiscussionTopicContract.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this DiscussionTopicContract.


        :param locked: The locked of this DiscussionTopicContract.
        :type locked: bool
        """

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this DiscussionTopicContract.


        :return: The name of this DiscussionTopicContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscussionTopicContract.


        :param name: The name of this DiscussionTopicContract.
        :type name: str
        """

        self._name = name
