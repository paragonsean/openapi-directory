# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artist_for_event_contract import ArtistForEventContract
from openapi_server.models.entry_status import EntryStatus
from openapi_server.models.entry_thumb_for_api_contract import EntryThumbForApiContract
from openapi_server.models.event_category import EventCategory
from openapi_server.models.localized_string_contract import LocalizedStringContract
from openapi_server.models.pv_contract import PVContract
from openapi_server.models.release_event_series_contract import ReleaseEventSeriesContract
from openapi_server.models.song_list_base_contract import SongListBaseContract
from openapi_server.models.tag_usage_for_api_contract import TagUsageForApiContract
from openapi_server.models.venue_for_api_contract import VenueForApiContract
from openapi_server.models.web_link_for_api_contract import WebLinkForApiContract
from openapi_server import util


class ReleaseEventForApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_names: str=None, artists: List[ArtistForEventContract]=None, category: EventCategory=None, _date: datetime=None, description: str=None, end_date: datetime=None, id: int=None, main_picture: EntryThumbForApiContract=None, name: str=None, names: List[LocalizedStringContract]=None, pvs: List[PVContract]=None, series: ReleaseEventSeriesContract=None, series_id: int=None, series_number: int=None, series_suffix: str=None, song_list: SongListBaseContract=None, status: EntryStatus=None, tags: List[TagUsageForApiContract]=None, url_slug: str=None, venue: VenueForApiContract=None, venue_name: str=None, version: int=None, web_links: List[WebLinkForApiContract]=None):
        """ReleaseEventForApiContract - a model defined in OpenAPI

        :param additional_names: The additional_names of this ReleaseEventForApiContract.
        :param artists: The artists of this ReleaseEventForApiContract.
        :param category: The category of this ReleaseEventForApiContract.
        :param _date: The _date of this ReleaseEventForApiContract.
        :param description: The description of this ReleaseEventForApiContract.
        :param end_date: The end_date of this ReleaseEventForApiContract.
        :param id: The id of this ReleaseEventForApiContract.
        :param main_picture: The main_picture of this ReleaseEventForApiContract.
        :param name: The name of this ReleaseEventForApiContract.
        :param names: The names of this ReleaseEventForApiContract.
        :param pvs: The pvs of this ReleaseEventForApiContract.
        :param series: The series of this ReleaseEventForApiContract.
        :param series_id: The series_id of this ReleaseEventForApiContract.
        :param series_number: The series_number of this ReleaseEventForApiContract.
        :param series_suffix: The series_suffix of this ReleaseEventForApiContract.
        :param song_list: The song_list of this ReleaseEventForApiContract.
        :param status: The status of this ReleaseEventForApiContract.
        :param tags: The tags of this ReleaseEventForApiContract.
        :param url_slug: The url_slug of this ReleaseEventForApiContract.
        :param venue: The venue of this ReleaseEventForApiContract.
        :param venue_name: The venue_name of this ReleaseEventForApiContract.
        :param version: The version of this ReleaseEventForApiContract.
        :param web_links: The web_links of this ReleaseEventForApiContract.
        """
        self.openapi_types = {
            'additional_names': str,
            'artists': List[ArtistForEventContract],
            'category': EventCategory,
            '_date': datetime,
            'description': str,
            'end_date': datetime,
            'id': int,
            'main_picture': EntryThumbForApiContract,
            'name': str,
            'names': List[LocalizedStringContract],
            'pvs': List[PVContract],
            'series': ReleaseEventSeriesContract,
            'series_id': int,
            'series_number': int,
            'series_suffix': str,
            'song_list': SongListBaseContract,
            'status': EntryStatus,
            'tags': List[TagUsageForApiContract],
            'url_slug': str,
            'venue': VenueForApiContract,
            'venue_name': str,
            'version': int,
            'web_links': List[WebLinkForApiContract]
        }

        self.attribute_map = {
            'additional_names': 'additionalNames',
            'artists': 'artists',
            'category': 'category',
            '_date': 'date',
            'description': 'description',
            'end_date': 'endDate',
            'id': 'id',
            'main_picture': 'mainPicture',
            'name': 'name',
            'names': 'names',
            'pvs': 'pvs',
            'series': 'series',
            'series_id': 'seriesId',
            'series_number': 'seriesNumber',
            'series_suffix': 'seriesSuffix',
            'song_list': 'songList',
            'status': 'status',
            'tags': 'tags',
            'url_slug': 'urlSlug',
            'venue': 'venue',
            'venue_name': 'venueName',
            'version': 'version',
            'web_links': 'webLinks'
        }

        self._additional_names = additional_names
        self._artists = artists
        self._category = category
        self.__date = _date
        self._description = description
        self._end_date = end_date
        self._id = id
        self._main_picture = main_picture
        self._name = name
        self._names = names
        self._pvs = pvs
        self._series = series
        self._series_id = series_id
        self._series_number = series_number
        self._series_suffix = series_suffix
        self._song_list = song_list
        self._status = status
        self._tags = tags
        self._url_slug = url_slug
        self._venue = venue
        self._venue_name = venue_name
        self._version = version
        self._web_links = web_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseEventForApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseEventForApiContract of this ReleaseEventForApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_names(self):
        """Gets the additional_names of this ReleaseEventForApiContract.


        :return: The additional_names of this ReleaseEventForApiContract.
        :rtype: str
        """
        return self._additional_names

    @additional_names.setter
    def additional_names(self, additional_names):
        """Sets the additional_names of this ReleaseEventForApiContract.


        :param additional_names: The additional_names of this ReleaseEventForApiContract.
        :type additional_names: str
        """

        self._additional_names = additional_names

    @property
    def artists(self):
        """Gets the artists of this ReleaseEventForApiContract.


        :return: The artists of this ReleaseEventForApiContract.
        :rtype: List[ArtistForEventContract]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this ReleaseEventForApiContract.


        :param artists: The artists of this ReleaseEventForApiContract.
        :type artists: List[ArtistForEventContract]
        """

        self._artists = artists

    @property
    def category(self):
        """Gets the category of this ReleaseEventForApiContract.


        :return: The category of this ReleaseEventForApiContract.
        :rtype: EventCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ReleaseEventForApiContract.


        :param category: The category of this ReleaseEventForApiContract.
        :type category: EventCategory
        """

        self._category = category

    @property
    def _date(self):
        """Gets the _date of this ReleaseEventForApiContract.


        :return: The _date of this ReleaseEventForApiContract.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ReleaseEventForApiContract.


        :param _date: The _date of this ReleaseEventForApiContract.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this ReleaseEventForApiContract.


        :return: The description of this ReleaseEventForApiContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReleaseEventForApiContract.


        :param description: The description of this ReleaseEventForApiContract.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this ReleaseEventForApiContract.


        :return: The end_date of this ReleaseEventForApiContract.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ReleaseEventForApiContract.


        :param end_date: The end_date of this ReleaseEventForApiContract.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this ReleaseEventForApiContract.


        :return: The id of this ReleaseEventForApiContract.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseEventForApiContract.


        :param id: The id of this ReleaseEventForApiContract.
        :type id: int
        """

        self._id = id

    @property
    def main_picture(self):
        """Gets the main_picture of this ReleaseEventForApiContract.


        :return: The main_picture of this ReleaseEventForApiContract.
        :rtype: EntryThumbForApiContract
        """
        return self._main_picture

    @main_picture.setter
    def main_picture(self, main_picture):
        """Sets the main_picture of this ReleaseEventForApiContract.


        :param main_picture: The main_picture of this ReleaseEventForApiContract.
        :type main_picture: EntryThumbForApiContract
        """

        self._main_picture = main_picture

    @property
    def name(self):
        """Gets the name of this ReleaseEventForApiContract.


        :return: The name of this ReleaseEventForApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseEventForApiContract.


        :param name: The name of this ReleaseEventForApiContract.
        :type name: str
        """

        self._name = name

    @property
    def names(self):
        """Gets the names of this ReleaseEventForApiContract.


        :return: The names of this ReleaseEventForApiContract.
        :rtype: List[LocalizedStringContract]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this ReleaseEventForApiContract.


        :param names: The names of this ReleaseEventForApiContract.
        :type names: List[LocalizedStringContract]
        """

        self._names = names

    @property
    def pvs(self):
        """Gets the pvs of this ReleaseEventForApiContract.


        :return: The pvs of this ReleaseEventForApiContract.
        :rtype: List[PVContract]
        """
        return self._pvs

    @pvs.setter
    def pvs(self, pvs):
        """Sets the pvs of this ReleaseEventForApiContract.


        :param pvs: The pvs of this ReleaseEventForApiContract.
        :type pvs: List[PVContract]
        """

        self._pvs = pvs

    @property
    def series(self):
        """Gets the series of this ReleaseEventForApiContract.


        :return: The series of this ReleaseEventForApiContract.
        :rtype: ReleaseEventSeriesContract
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this ReleaseEventForApiContract.


        :param series: The series of this ReleaseEventForApiContract.
        :type series: ReleaseEventSeriesContract
        """

        self._series = series

    @property
    def series_id(self):
        """Gets the series_id of this ReleaseEventForApiContract.


        :return: The series_id of this ReleaseEventForApiContract.
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this ReleaseEventForApiContract.


        :param series_id: The series_id of this ReleaseEventForApiContract.
        :type series_id: int
        """

        self._series_id = series_id

    @property
    def series_number(self):
        """Gets the series_number of this ReleaseEventForApiContract.


        :return: The series_number of this ReleaseEventForApiContract.
        :rtype: int
        """
        return self._series_number

    @series_number.setter
    def series_number(self, series_number):
        """Sets the series_number of this ReleaseEventForApiContract.


        :param series_number: The series_number of this ReleaseEventForApiContract.
        :type series_number: int
        """

        self._series_number = series_number

    @property
    def series_suffix(self):
        """Gets the series_suffix of this ReleaseEventForApiContract.


        :return: The series_suffix of this ReleaseEventForApiContract.
        :rtype: str
        """
        return self._series_suffix

    @series_suffix.setter
    def series_suffix(self, series_suffix):
        """Sets the series_suffix of this ReleaseEventForApiContract.


        :param series_suffix: The series_suffix of this ReleaseEventForApiContract.
        :type series_suffix: str
        """

        self._series_suffix = series_suffix

    @property
    def song_list(self):
        """Gets the song_list of this ReleaseEventForApiContract.


        :return: The song_list of this ReleaseEventForApiContract.
        :rtype: SongListBaseContract
        """
        return self._song_list

    @song_list.setter
    def song_list(self, song_list):
        """Sets the song_list of this ReleaseEventForApiContract.


        :param song_list: The song_list of this ReleaseEventForApiContract.
        :type song_list: SongListBaseContract
        """

        self._song_list = song_list

    @property
    def status(self):
        """Gets the status of this ReleaseEventForApiContract.


        :return: The status of this ReleaseEventForApiContract.
        :rtype: EntryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReleaseEventForApiContract.


        :param status: The status of this ReleaseEventForApiContract.
        :type status: EntryStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this ReleaseEventForApiContract.


        :return: The tags of this ReleaseEventForApiContract.
        :rtype: List[TagUsageForApiContract]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReleaseEventForApiContract.


        :param tags: The tags of this ReleaseEventForApiContract.
        :type tags: List[TagUsageForApiContract]
        """

        self._tags = tags

    @property
    def url_slug(self):
        """Gets the url_slug of this ReleaseEventForApiContract.


        :return: The url_slug of this ReleaseEventForApiContract.
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this ReleaseEventForApiContract.


        :param url_slug: The url_slug of this ReleaseEventForApiContract.
        :type url_slug: str
        """

        self._url_slug = url_slug

    @property
    def venue(self):
        """Gets the venue of this ReleaseEventForApiContract.


        :return: The venue of this ReleaseEventForApiContract.
        :rtype: VenueForApiContract
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this ReleaseEventForApiContract.


        :param venue: The venue of this ReleaseEventForApiContract.
        :type venue: VenueForApiContract
        """

        self._venue = venue

    @property
    def venue_name(self):
        """Gets the venue_name of this ReleaseEventForApiContract.


        :return: The venue_name of this ReleaseEventForApiContract.
        :rtype: str
        """
        return self._venue_name

    @venue_name.setter
    def venue_name(self, venue_name):
        """Sets the venue_name of this ReleaseEventForApiContract.


        :param venue_name: The venue_name of this ReleaseEventForApiContract.
        :type venue_name: str
        """

        self._venue_name = venue_name

    @property
    def version(self):
        """Gets the version of this ReleaseEventForApiContract.


        :return: The version of this ReleaseEventForApiContract.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseEventForApiContract.


        :param version: The version of this ReleaseEventForApiContract.
        :type version: int
        """

        self._version = version

    @property
    def web_links(self):
        """Gets the web_links of this ReleaseEventForApiContract.


        :return: The web_links of this ReleaseEventForApiContract.
        :rtype: List[WebLinkForApiContract]
        """
        return self._web_links

    @web_links.setter
    def web_links(self, web_links):
        """Sets the web_links of this ReleaseEventForApiContract.


        :param web_links: The web_links of this ReleaseEventForApiContract.
        :type web_links: List[WebLinkForApiContract]
        """

        self._web_links = web_links
