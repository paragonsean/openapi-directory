/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutesResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutesResponse_data::OAIRoutesResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutesResponse_data::OAIRoutesResponse_data() {
    this->initializeModel();
}

OAIRoutesResponse_data::~OAIRoutesResponse_data() {}

void OAIRoutesResponse_data::initializeModel() {

    m_operators_isSet = false;
    m_operators_isValid = false;

    m_places_isSet = false;
    m_places_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;
}

void OAIRoutesResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutesResponse_data::fromJsonObject(QJsonObject json) {

    m_operators_isValid = ::OpenAPI::fromJsonValue(m_operators, json[QString("operators")]);
    m_operators_isSet = !json[QString("operators")].isNull() && m_operators_isValid;

    m_places_isValid = ::OpenAPI::fromJsonValue(m_places, json[QString("places")]);
    m_places_isSet = !json[QString("places")].isNull() && m_places_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(m_routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;
}

QString OAIRoutesResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutesResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_operators.size() > 0) {
        obj.insert(QString("operators"), ::OpenAPI::toJsonValue(m_operators));
    }
    if (m_places.size() > 0) {
        obj.insert(QString("places"), ::OpenAPI::toJsonValue(m_places));
    }
    if (m_routes.size() > 0) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(m_routes));
    }
    return obj;
}

QList<OAIRoutesResponse_data_operators_inner> OAIRoutesResponse_data::getOperators() const {
    return m_operators;
}
void OAIRoutesResponse_data::setOperators(const QList<OAIRoutesResponse_data_operators_inner> &operators) {
    m_operators = operators;
    m_operators_isSet = true;
}

bool OAIRoutesResponse_data::is_operators_Set() const{
    return m_operators_isSet;
}

bool OAIRoutesResponse_data::is_operators_Valid() const{
    return m_operators_isValid;
}

QList<OAIPlaceResponse> OAIRoutesResponse_data::getPlaces() const {
    return m_places;
}
void OAIRoutesResponse_data::setPlaces(const QList<OAIPlaceResponse> &places) {
    m_places = places;
    m_places_isSet = true;
}

bool OAIRoutesResponse_data::is_places_Set() const{
    return m_places_isSet;
}

bool OAIRoutesResponse_data::is_places_Valid() const{
    return m_places_isValid;
}

QList<OAIRoutesResponse_data_routes_inner> OAIRoutesResponse_data::getRoutes() const {
    return m_routes;
}
void OAIRoutesResponse_data::setRoutes(const QList<OAIRoutesResponse_data_routes_inner> &routes) {
    m_routes = routes;
    m_routes_isSet = true;
}

bool OAIRoutesResponse_data::is_routes_Set() const{
    return m_routes_isSet;
}

bool OAIRoutesResponse_data::is_routes_Valid() const{
    return m_routes_isValid;
}

bool OAIRoutesResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_places.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutesResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operators_isValid && m_places_isValid && m_routes_isValid && true;
}

} // namespace OpenAPI
