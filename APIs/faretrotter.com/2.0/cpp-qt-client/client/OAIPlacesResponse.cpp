/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlacesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlacesResponse::OAIPlacesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlacesResponse::OAIPlacesResponse() {
    this->initializeModel();
}

OAIPlacesResponse::~OAIPlacesResponse() {}

void OAIPlacesResponse::initializeModel() {

    m_places_isSet = false;
    m_places_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPlacesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlacesResponse::fromJsonObject(QJsonObject json) {

    m_places_isValid = ::OpenAPI::fromJsonValue(m_places, json[QString("places")]);
    m_places_isSet = !json[QString("places")].isNull() && m_places_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPlacesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlacesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_places.size() > 0) {
        obj.insert(QString("places"), ::OpenAPI::toJsonValue(m_places));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIPlaceResponse> OAIPlacesResponse::getPlaces() const {
    return m_places;
}
void OAIPlacesResponse::setPlaces(const QList<OAIPlaceResponse> &places) {
    m_places = places;
    m_places_isSet = true;
}

bool OAIPlacesResponse::is_places_Set() const{
    return m_places_isSet;
}

bool OAIPlacesResponse::is_places_Valid() const{
    return m_places_isValid;
}

OAIPlacesResponse_request OAIPlacesResponse::getRequest() const {
    return m_request;
}
void OAIPlacesResponse::setRequest(const OAIPlacesResponse_request &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIPlacesResponse::is_request_Set() const{
    return m_request_isSet;
}

bool OAIPlacesResponse::is_request_Valid() const{
    return m_request_isValid;
}

OAIPlacesResponse_status OAIPlacesResponse::getStatus() const {
    return m_status;
}
void OAIPlacesResponse::setStatus(const OAIPlacesResponse_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlacesResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlacesResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPlacesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_places.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlacesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_places_isValid && m_request_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
