/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutesResponse_data_routes_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutesResponse_data_routes_inner::OAIRoutesResponse_data_routes_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutesResponse_data_routes_inner::OAIRoutesResponse_data_routes_inner() {
    this->initializeModel();
}

OAIRoutesResponse_data_routes_inner::~OAIRoutesResponse_data_routes_inner() {}

void OAIRoutesResponse_data_routes_inner::initializeModel() {

    m_co2_isSet = false;
    m_co2_isValid = false;

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fare_isSet = false;
    m_fare_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_origin_id_isSet = false;
    m_origin_id_isValid = false;
}

void OAIRoutesResponse_data_routes_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutesResponse_data_routes_inner::fromJsonObject(QJsonObject json) {

    m_co2_isValid = ::OpenAPI::fromJsonValue(m_co2, json[QString("co2")]);
    m_co2_isSet = !json[QString("co2")].isNull() && m_co2_isValid;

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("destination_id")]);
    m_destination_id_isSet = !json[QString("destination_id")].isNull() && m_destination_id_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_fare_isValid = ::OpenAPI::fromJsonValue(m_fare, json[QString("fare")]);
    m_fare_isSet = !json[QString("fare")].isNull() && m_fare_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_origin_id_isValid = ::OpenAPI::fromJsonValue(m_origin_id, json[QString("origin_id")]);
    m_origin_id_isSet = !json[QString("origin_id")].isNull() && m_origin_id_isValid;
}

QString OAIRoutesResponse_data_routes_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutesResponse_data_routes_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_co2_isSet) {
        obj.insert(QString("co2"), ::OpenAPI::toJsonValue(m_co2));
    }
    if (m_destination_id_isSet) {
        obj.insert(QString("destination_id"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fare_isSet) {
        obj.insert(QString("fare"), ::OpenAPI::toJsonValue(m_fare));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_origin_id_isSet) {
        obj.insert(QString("origin_id"), ::OpenAPI::toJsonValue(m_origin_id));
    }
    return obj;
}

double OAIRoutesResponse_data_routes_inner::getCo2() const {
    return m_co2;
}
void OAIRoutesResponse_data_routes_inner::setCo2(const double &co2) {
    m_co2 = co2;
    m_co2_isSet = true;
}

bool OAIRoutesResponse_data_routes_inner::is_co2_Set() const{
    return m_co2_isSet;
}

bool OAIRoutesResponse_data_routes_inner::is_co2_Valid() const{
    return m_co2_isValid;
}

QString OAIRoutesResponse_data_routes_inner::getDestinationId() const {
    return m_destination_id;
}
void OAIRoutesResponse_data_routes_inner::setDestinationId(const QString &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAIRoutesResponse_data_routes_inner::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAIRoutesResponse_data_routes_inner::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

double OAIRoutesResponse_data_routes_inner::getDuration() const {
    return m_duration;
}
void OAIRoutesResponse_data_routes_inner::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIRoutesResponse_data_routes_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIRoutesResponse_data_routes_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIRoutesResponse_data_routes_inner::getFare() const {
    return m_fare;
}
void OAIRoutesResponse_data_routes_inner::setFare(const double &fare) {
    m_fare = fare;
    m_fare_isSet = true;
}

bool OAIRoutesResponse_data_routes_inner::is_fare_Set() const{
    return m_fare_isSet;
}

bool OAIRoutesResponse_data_routes_inner::is_fare_Valid() const{
    return m_fare_isValid;
}

QString OAIRoutesResponse_data_routes_inner::getMode() const {
    return m_mode;
}
void OAIRoutesResponse_data_routes_inner::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIRoutesResponse_data_routes_inner::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIRoutesResponse_data_routes_inner::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIRoutesResponse_data_routes_inner::getOriginId() const {
    return m_origin_id;
}
void OAIRoutesResponse_data_routes_inner::setOriginId(const QString &origin_id) {
    m_origin_id = origin_id;
    m_origin_id_isSet = true;
}

bool OAIRoutesResponse_data_routes_inner::is_origin_id_Set() const{
    return m_origin_id_isSet;
}

bool OAIRoutesResponse_data_routes_inner::is_origin_id_Valid() const{
    return m_origin_id_isValid;
}

bool OAIRoutesResponse_data_routes_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_co2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutesResponse_data_routes_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_co2_isValid && m_destination_id_isValid && m_duration_isValid && m_fare_isValid && m_mode_isValid && m_origin_id_isValid && true;
}

} // namespace OpenAPI
