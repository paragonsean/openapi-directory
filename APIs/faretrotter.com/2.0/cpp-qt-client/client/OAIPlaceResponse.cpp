/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaceResponse::OAIPlaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaceResponse::OAIPlaceResponse() {
    this->initializeModel();
}

OAIPlaceResponse::~OAIPlaceResponse() {}

void OAIPlaceResponse::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_geoname_id_isSet = false;
    m_geoname_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_long_isSet = false;
    m_name_long_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPlaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaceResponse::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_geoname_id_isValid = ::OpenAPI::fromJsonValue(m_geoname_id, json[QString("geoname_id")]);
    m_geoname_id_isSet = !json[QString("geoname_id")].isNull() && m_geoname_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_long_isValid = ::OpenAPI::fromJsonValue(m_name_long, json[QString("name_long")]);
    m_name_long_isSet = !json[QString("name_long")].isNull() && m_name_long_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPlaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_geoname_id_isSet) {
        obj.insert(QString("geoname_id"), ::OpenAPI::toJsonValue(m_geoname_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_long_isSet) {
        obj.insert(QString("name_long"), ::OpenAPI::toJsonValue(m_name_long));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPlaceResponse::getCity() const {
    return m_city;
}
void OAIPlaceResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPlaceResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPlaceResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIPlaceResponse::getCountry() const {
    return m_country;
}
void OAIPlaceResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPlaceResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPlaceResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPlaceResponse::getGeonameId() const {
    return m_geoname_id;
}
void OAIPlaceResponse::setGeonameId(const QString &geoname_id) {
    m_geoname_id = geoname_id;
    m_geoname_id_isSet = true;
}

bool OAIPlaceResponse::is_geoname_id_Set() const{
    return m_geoname_id_isSet;
}

bool OAIPlaceResponse::is_geoname_id_Valid() const{
    return m_geoname_id_isValid;
}

QString OAIPlaceResponse::getId() const {
    return m_id;
}
void OAIPlaceResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaceResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaceResponse::is_id_Valid() const{
    return m_id_isValid;
}

double OAIPlaceResponse::getLat() const {
    return m_lat;
}
void OAIPlaceResponse::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIPlaceResponse::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIPlaceResponse::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIPlaceResponse::getLng() const {
    return m_lng;
}
void OAIPlaceResponse::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIPlaceResponse::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIPlaceResponse::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIPlaceResponse::getName() const {
    return m_name;
}
void OAIPlaceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaceResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlaceResponse::getNameLong() const {
    return m_name_long;
}
void OAIPlaceResponse::setNameLong(const QString &name_long) {
    m_name_long = name_long;
    m_name_long_isSet = true;
}

bool OAIPlaceResponse::is_name_long_Set() const{
    return m_name_long_isSet;
}

bool OAIPlaceResponse::is_name_long_Valid() const{
    return m_name_long_isValid;
}

QString OAIPlaceResponse::getRegion() const {
    return m_region;
}
void OAIPlaceResponse::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPlaceResponse::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPlaceResponse::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIPlaceResponse::getSlug() const {
    return m_slug;
}
void OAIPlaceResponse::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIPlaceResponse::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIPlaceResponse::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIPlaceResponse::getType() const {
    return m_type;
}
void OAIPlaceResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaceResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaceResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPlaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geoname_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_country_isValid && m_geoname_id_isValid && m_id_isValid && m_lat_isValid && m_lng_isValid && m_name_isValid && m_name_long_isValid && m_region_isValid && m_slug_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
