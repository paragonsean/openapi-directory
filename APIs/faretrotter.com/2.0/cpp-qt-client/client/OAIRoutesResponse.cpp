/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutesResponse::OAIRoutesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutesResponse::OAIRoutesResponse() {
    this->initializeModel();
}

OAIRoutesResponse::~OAIRoutesResponse() {}

void OAIRoutesResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRoutesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutesResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRoutesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIRoutesResponse_data OAIRoutesResponse::getData() const {
    return m_data;
}
void OAIRoutesResponse::setData(const OAIRoutesResponse_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIRoutesResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIRoutesResponse::is_data_Valid() const{
    return m_data_isValid;
}

OAIPlacesResponse_request OAIRoutesResponse::getRequest() const {
    return m_request;
}
void OAIRoutesResponse::setRequest(const OAIPlacesResponse_request &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIRoutesResponse::is_request_Set() const{
    return m_request_isSet;
}

bool OAIRoutesResponse::is_request_Valid() const{
    return m_request_isValid;
}

OAIRoutesResponse_response OAIRoutesResponse::getResponse() const {
    return m_response;
}
void OAIRoutesResponse::setResponse(const OAIRoutesResponse_response &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIRoutesResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAIRoutesResponse::is_response_Valid() const{
    return m_response_isValid;
}

OAIPlacesResponse_status OAIRoutesResponse::getStatus() const {
    return m_status;
}
void OAIRoutesResponse::setStatus(const OAIPlacesResponse_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRoutesResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRoutesResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRoutesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_request_isValid && m_response_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
