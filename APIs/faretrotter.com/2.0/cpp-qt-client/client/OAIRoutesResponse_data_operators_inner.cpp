/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutesResponse_data_operators_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutesResponse_data_operators_inner::OAIRoutesResponse_data_operators_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutesResponse_data_operators_inner::OAIRoutesResponse_data_operators_inner() {
    this->initializeModel();
}

OAIRoutesResponse_data_operators_inner::~OAIRoutesResponse_data_operators_inner() {}

void OAIRoutesResponse_data_operators_inner::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_img_isSet = false;
    m_logo_img_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIRoutesResponse_data_operators_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutesResponse_data_operators_inner::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_img_isValid = ::OpenAPI::fromJsonValue(m_logo_img, json[QString("logo_img")]);
    m_logo_img_isSet = !json[QString("logo_img")].isNull() && m_logo_img_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIRoutesResponse_data_operators_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutesResponse_data_operators_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo_img_isSet) {
        obj.insert(QString("logo_img"), ::OpenAPI::toJsonValue(m_logo_img));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIRoutesResponse_data_operators_inner::getAttributes() const {
    return m_attributes;
}
void OAIRoutesResponse_data_operators_inner::setAttributes(const QList<QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRoutesResponse_data_operators_inner::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRoutesResponse_data_operators_inner::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIRoutesResponse_data_operators_inner::getCode() const {
    return m_code;
}
void OAIRoutesResponse_data_operators_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIRoutesResponse_data_operators_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRoutesResponse_data_operators_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIRoutesResponse_data_operators_inner::getId() const {
    return m_id;
}
void OAIRoutesResponse_data_operators_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoutesResponse_data_operators_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoutesResponse_data_operators_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRoutesResponse_data_operators_inner::getLogoImg() const {
    return m_logo_img;
}
void OAIRoutesResponse_data_operators_inner::setLogoImg(const QString &logo_img) {
    m_logo_img = logo_img;
    m_logo_img_isSet = true;
}

bool OAIRoutesResponse_data_operators_inner::is_logo_img_Set() const{
    return m_logo_img_isSet;
}

bool OAIRoutesResponse_data_operators_inner::is_logo_img_Valid() const{
    return m_logo_img_isValid;
}

QString OAIRoutesResponse_data_operators_inner::getMode() const {
    return m_mode;
}
void OAIRoutesResponse_data_operators_inner::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIRoutesResponse_data_operators_inner::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIRoutesResponse_data_operators_inner::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIRoutesResponse_data_operators_inner::getName() const {
    return m_name;
}
void OAIRoutesResponse_data_operators_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoutesResponse_data_operators_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoutesResponse_data_operators_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIRoutesResponse_data_operators_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_img_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutesResponse_data_operators_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && m_code_isValid && m_id_isValid && m_logo_img_isValid && m_mode_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
