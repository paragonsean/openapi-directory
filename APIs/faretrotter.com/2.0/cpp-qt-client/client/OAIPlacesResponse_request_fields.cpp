/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlacesResponse_request_fields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlacesResponse_request_fields::OAIPlacesResponse_request_fields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlacesResponse_request_fields::OAIPlacesResponse_request_fields() {
    this->initializeModel();
}

OAIPlacesResponse_request_fields::~OAIPlacesResponse_request_fields() {}

void OAIPlacesResponse_request_fields::initializeModel() {

    m_destination_lat_isSet = false;
    m_destination_lat_isValid = false;

    m_destination_lng_isSet = false;
    m_destination_lng_isValid = false;

    m_origin_lat_isSet = false;
    m_origin_lat_isValid = false;

    m_origin_lng_isSet = false;
    m_origin_lng_isValid = false;
}

void OAIPlacesResponse_request_fields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlacesResponse_request_fields::fromJsonObject(QJsonObject json) {

    m_destination_lat_isValid = ::OpenAPI::fromJsonValue(m_destination_lat, json[QString("destination_lat")]);
    m_destination_lat_isSet = !json[QString("destination_lat")].isNull() && m_destination_lat_isValid;

    m_destination_lng_isValid = ::OpenAPI::fromJsonValue(m_destination_lng, json[QString("destination_lng")]);
    m_destination_lng_isSet = !json[QString("destination_lng")].isNull() && m_destination_lng_isValid;

    m_origin_lat_isValid = ::OpenAPI::fromJsonValue(m_origin_lat, json[QString("origin_lat")]);
    m_origin_lat_isSet = !json[QString("origin_lat")].isNull() && m_origin_lat_isValid;

    m_origin_lng_isValid = ::OpenAPI::fromJsonValue(m_origin_lng, json[QString("origin_lng")]);
    m_origin_lng_isSet = !json[QString("origin_lng")].isNull() && m_origin_lng_isValid;
}

QString OAIPlacesResponse_request_fields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlacesResponse_request_fields::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_lat_isSet) {
        obj.insert(QString("destination_lat"), ::OpenAPI::toJsonValue(m_destination_lat));
    }
    if (m_destination_lng_isSet) {
        obj.insert(QString("destination_lng"), ::OpenAPI::toJsonValue(m_destination_lng));
    }
    if (m_origin_lat_isSet) {
        obj.insert(QString("origin_lat"), ::OpenAPI::toJsonValue(m_origin_lat));
    }
    if (m_origin_lng_isSet) {
        obj.insert(QString("origin_lng"), ::OpenAPI::toJsonValue(m_origin_lng));
    }
    return obj;
}

double OAIPlacesResponse_request_fields::getDestinationLat() const {
    return m_destination_lat;
}
void OAIPlacesResponse_request_fields::setDestinationLat(const double &destination_lat) {
    m_destination_lat = destination_lat;
    m_destination_lat_isSet = true;
}

bool OAIPlacesResponse_request_fields::is_destination_lat_Set() const{
    return m_destination_lat_isSet;
}

bool OAIPlacesResponse_request_fields::is_destination_lat_Valid() const{
    return m_destination_lat_isValid;
}

double OAIPlacesResponse_request_fields::getDestinationLng() const {
    return m_destination_lng;
}
void OAIPlacesResponse_request_fields::setDestinationLng(const double &destination_lng) {
    m_destination_lng = destination_lng;
    m_destination_lng_isSet = true;
}

bool OAIPlacesResponse_request_fields::is_destination_lng_Set() const{
    return m_destination_lng_isSet;
}

bool OAIPlacesResponse_request_fields::is_destination_lng_Valid() const{
    return m_destination_lng_isValid;
}

double OAIPlacesResponse_request_fields::getOriginLat() const {
    return m_origin_lat;
}
void OAIPlacesResponse_request_fields::setOriginLat(const double &origin_lat) {
    m_origin_lat = origin_lat;
    m_origin_lat_isSet = true;
}

bool OAIPlacesResponse_request_fields::is_origin_lat_Set() const{
    return m_origin_lat_isSet;
}

bool OAIPlacesResponse_request_fields::is_origin_lat_Valid() const{
    return m_origin_lat_isValid;
}

double OAIPlacesResponse_request_fields::getOriginLng() const {
    return m_origin_lng;
}
void OAIPlacesResponse_request_fields::setOriginLng(const double &origin_lng) {
    m_origin_lng = origin_lng;
    m_origin_lng_isSet = true;
}

bool OAIPlacesResponse_request_fields::is_origin_lng_Set() const{
    return m_origin_lng_isSet;
}

bool OAIPlacesResponse_request_fields::is_origin_lng_Valid() const{
    return m_origin_lng_isValid;
}

bool OAIPlacesResponse_request_fields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_lng_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlacesResponse_request_fields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_lat_isValid && m_destination_lng_isValid && m_origin_lat_isValid && m_origin_lng_isValid && true;
}

} // namespace OpenAPI
