/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlaceResponse from '../model/PlaceResponse';
import RoutesResponse from '../model/RoutesResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETPlaces operation.
     * @callback module:api/DefaultApi~gETPlacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns possible modes of transportation between two cities.
     * @param {module:api/DefaultApi~gETPlacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaceResponse}
     */
    gETPlaces(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaceResponse;
      return this.apiClient.callApi(
        '/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRoutes operation.
     * @callback module:api/DefaultApi~gETRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} originLat 
     * @param {Number} originLng 
     * @param {Number} destinationLat 
     * @param {Number} destinationLng 
     * @param {module:api/DefaultApi~gETRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutesResponse}
     */
    gETRoutes(originLat, originLng, destinationLat, destinationLng, callback) {
      let postBody = null;
      // verify the required parameter 'originLat' is set
      if (originLat === undefined || originLat === null) {
        throw new Error("Missing the required parameter 'originLat' when calling gETRoutes");
      }
      // verify the required parameter 'originLng' is set
      if (originLng === undefined || originLng === null) {
        throw new Error("Missing the required parameter 'originLng' when calling gETRoutes");
      }
      // verify the required parameter 'destinationLat' is set
      if (destinationLat === undefined || destinationLat === null) {
        throw new Error("Missing the required parameter 'destinationLat' when calling gETRoutes");
      }
      // verify the required parameter 'destinationLng' is set
      if (destinationLng === undefined || destinationLng === null) {
        throw new Error("Missing the required parameter 'destinationLng' when calling gETRoutes");
      }

      let pathParams = {
      };
      let queryParams = {
        'origin_lat': originLat,
        'origin_lng': originLng,
        'destination_lat': destinationLat,
        'destination_lng': destinationLng
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoutesResponse;
      return this.apiClient.callApi(
        '/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
