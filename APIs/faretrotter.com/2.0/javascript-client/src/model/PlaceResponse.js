/**
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlaceResponse model module.
 * @module model/PlaceResponse
 * @version 2.0
 */
class PlaceResponse {
    /**
     * Constructs a new <code>PlaceResponse</code>.
     * @alias module:model/PlaceResponse
     * @param city {String} 
     * @param country {String} 
     * @param geonameId {String} 
     * @param id {String} 
     * @param lat {Number} 
     * @param lng {Number} 
     * @param name {String} 
     * @param nameLong {String} 
     * @param region {String} 
     * @param slug {String} 
     * @param type {String} 
     */
    constructor(city, country, geonameId, id, lat, lng, name, nameLong, region, slug, type) { 
        
        PlaceResponse.initialize(this, city, country, geonameId, id, lat, lng, name, nameLong, region, slug, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, country, geonameId, id, lat, lng, name, nameLong, region, slug, type) { 
        obj['city'] = city;
        obj['country'] = country;
        obj['geoname_id'] = geonameId;
        obj['id'] = id;
        obj['lat'] = lat;
        obj['lng'] = lng;
        obj['name'] = name;
        obj['name_long'] = nameLong;
        obj['region'] = region;
        obj['slug'] = slug;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PlaceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaceResponse} obj Optional instance to populate.
     * @return {module:model/PlaceResponse} The populated <code>PlaceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaceResponse();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('geoname_id')) {
                obj['geoname_id'] = ApiClient.convertToType(data['geoname_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('name_long')) {
                obj['name_long'] = ApiClient.convertToType(data['name_long'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaceResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PlaceResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['geoname_id'] && !(typeof data['geoname_id'] === 'string' || data['geoname_id'] instanceof String)) {
            throw new Error("Expected the field `geoname_id` to be a primitive type in the JSON string but got " + data['geoname_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['name_long'] && !(typeof data['name_long'] === 'string' || data['name_long'] instanceof String)) {
            throw new Error("Expected the field `name_long` to be a primitive type in the JSON string but got " + data['name_long']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PlaceResponse.RequiredProperties = ["city", "country", "geoname_id", "id", "lat", "lng", "name", "name_long", "region", "slug", "type"];

/**
 * @member {String} city
 */
PlaceResponse.prototype['city'] = undefined;

/**
 * @member {String} country
 */
PlaceResponse.prototype['country'] = undefined;

/**
 * @member {String} geoname_id
 */
PlaceResponse.prototype['geoname_id'] = undefined;

/**
 * @member {String} id
 */
PlaceResponse.prototype['id'] = undefined;

/**
 * @member {Number} lat
 */
PlaceResponse.prototype['lat'] = undefined;

/**
 * @member {Number} lng
 */
PlaceResponse.prototype['lng'] = undefined;

/**
 * @member {String} name
 */
PlaceResponse.prototype['name'] = undefined;

/**
 * @member {String} name_long
 */
PlaceResponse.prototype['name_long'] = undefined;

/**
 * @member {String} region
 */
PlaceResponse.prototype['region'] = undefined;

/**
 * @member {String} slug
 */
PlaceResponse.prototype['slug'] = undefined;

/**
 * @member {String} type
 */
PlaceResponse.prototype['type'] = undefined;






export default PlaceResponse;

