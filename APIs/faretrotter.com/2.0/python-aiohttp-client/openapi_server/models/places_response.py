# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.place_response import PlaceResponse
from openapi_server.models.places_response_request import PlacesResponseRequest
from openapi_server.models.places_response_status import PlacesResponseStatus
from openapi_server import util


class PlacesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, places: List[PlaceResponse]=None, request: PlacesResponseRequest=None, status: PlacesResponseStatus=None):
        """PlacesResponse - a model defined in OpenAPI

        :param places: The places of this PlacesResponse.
        :param request: The request of this PlacesResponse.
        :param status: The status of this PlacesResponse.
        """
        self.openapi_types = {
            'places': List[PlaceResponse],
            'request': PlacesResponseRequest,
            'status': PlacesResponseStatus
        }

        self.attribute_map = {
            'places': 'places',
            'request': 'request',
            'status': 'status'
        }

        self._places = places
        self._request = request
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlacesResponse of this PlacesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def places(self):
        """Gets the places of this PlacesResponse.


        :return: The places of this PlacesResponse.
        :rtype: List[PlaceResponse]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this PlacesResponse.


        :param places: The places of this PlacesResponse.
        :type places: List[PlaceResponse]
        """
        if places is None:
            raise ValueError("Invalid value for `places`, must not be `None`")

        self._places = places

    @property
    def request(self):
        """Gets the request of this PlacesResponse.


        :return: The request of this PlacesResponse.
        :rtype: PlacesResponseRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this PlacesResponse.


        :param request: The request of this PlacesResponse.
        :type request: PlacesResponseRequest
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")

        self._request = request

    @property
    def status(self):
        """Gets the status of this PlacesResponse.


        :return: The status of this PlacesResponse.
        :rtype: PlacesResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlacesResponse.


        :param status: The status of this PlacesResponse.
        :type status: PlacesResponseStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
