# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoutesResponseDataRoutesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, co2: float=None, destination_id: str=None, duration: float=None, fare: float=None, mode: str=None, origin_id: str=None):
        """RoutesResponseDataRoutesInner - a model defined in OpenAPI

        :param co2: The co2 of this RoutesResponseDataRoutesInner.
        :param destination_id: The destination_id of this RoutesResponseDataRoutesInner.
        :param duration: The duration of this RoutesResponseDataRoutesInner.
        :param fare: The fare of this RoutesResponseDataRoutesInner.
        :param mode: The mode of this RoutesResponseDataRoutesInner.
        :param origin_id: The origin_id of this RoutesResponseDataRoutesInner.
        """
        self.openapi_types = {
            'co2': float,
            'destination_id': str,
            'duration': float,
            'fare': float,
            'mode': str,
            'origin_id': str
        }

        self.attribute_map = {
            'co2': 'co2',
            'destination_id': 'destination_id',
            'duration': 'duration',
            'fare': 'fare',
            'mode': 'mode',
            'origin_id': 'origin_id'
        }

        self._co2 = co2
        self._destination_id = destination_id
        self._duration = duration
        self._fare = fare
        self._mode = mode
        self._origin_id = origin_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutesResponseDataRoutesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutesResponse_data_routes_inner of this RoutesResponseDataRoutesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def co2(self):
        """Gets the co2 of this RoutesResponseDataRoutesInner.


        :return: The co2 of this RoutesResponseDataRoutesInner.
        :rtype: float
        """
        return self._co2

    @co2.setter
    def co2(self, co2):
        """Sets the co2 of this RoutesResponseDataRoutesInner.


        :param co2: The co2 of this RoutesResponseDataRoutesInner.
        :type co2: float
        """
        if co2 is None:
            raise ValueError("Invalid value for `co2`, must not be `None`")

        self._co2 = co2

    @property
    def destination_id(self):
        """Gets the destination_id of this RoutesResponseDataRoutesInner.


        :return: The destination_id of this RoutesResponseDataRoutesInner.
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this RoutesResponseDataRoutesInner.


        :param destination_id: The destination_id of this RoutesResponseDataRoutesInner.
        :type destination_id: str
        """
        if destination_id is None:
            raise ValueError("Invalid value for `destination_id`, must not be `None`")

        self._destination_id = destination_id

    @property
    def duration(self):
        """Gets the duration of this RoutesResponseDataRoutesInner.


        :return: The duration of this RoutesResponseDataRoutesInner.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RoutesResponseDataRoutesInner.


        :param duration: The duration of this RoutesResponseDataRoutesInner.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def fare(self):
        """Gets the fare of this RoutesResponseDataRoutesInner.


        :return: The fare of this RoutesResponseDataRoutesInner.
        :rtype: float
        """
        return self._fare

    @fare.setter
    def fare(self, fare):
        """Sets the fare of this RoutesResponseDataRoutesInner.


        :param fare: The fare of this RoutesResponseDataRoutesInner.
        :type fare: float
        """
        if fare is None:
            raise ValueError("Invalid value for `fare`, must not be `None`")

        self._fare = fare

    @property
    def mode(self):
        """Gets the mode of this RoutesResponseDataRoutesInner.


        :return: The mode of this RoutesResponseDataRoutesInner.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RoutesResponseDataRoutesInner.


        :param mode: The mode of this RoutesResponseDataRoutesInner.
        :type mode: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def origin_id(self):
        """Gets the origin_id of this RoutesResponseDataRoutesInner.


        :return: The origin_id of this RoutesResponseDataRoutesInner.
        :rtype: str
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id):
        """Sets the origin_id of this RoutesResponseDataRoutesInner.


        :param origin_id: The origin_id of this RoutesResponseDataRoutesInner.
        :type origin_id: str
        """
        if origin_id is None:
            raise ValueError("Invalid value for `origin_id`, must not be `None`")

        self._origin_id = origin_id
