# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.place_response import PlaceResponse
from openapi_server.models.routes_response_data_operators_inner import RoutesResponseDataOperatorsInner
from openapi_server.models.routes_response_data_routes_inner import RoutesResponseDataRoutesInner
from openapi_server import util


class RoutesResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operators: List[RoutesResponseDataOperatorsInner]=None, places: List[PlaceResponse]=None, routes: List[RoutesResponseDataRoutesInner]=None):
        """RoutesResponseData - a model defined in OpenAPI

        :param operators: The operators of this RoutesResponseData.
        :param places: The places of this RoutesResponseData.
        :param routes: The routes of this RoutesResponseData.
        """
        self.openapi_types = {
            'operators': List[RoutesResponseDataOperatorsInner],
            'places': List[PlaceResponse],
            'routes': List[RoutesResponseDataRoutesInner]
        }

        self.attribute_map = {
            'operators': 'operators',
            'places': 'places',
            'routes': 'routes'
        }

        self._operators = operators
        self._places = places
        self._routes = routes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutesResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutesResponse_data of this RoutesResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operators(self):
        """Gets the operators of this RoutesResponseData.


        :return: The operators of this RoutesResponseData.
        :rtype: List[RoutesResponseDataOperatorsInner]
        """
        return self._operators

    @operators.setter
    def operators(self, operators):
        """Sets the operators of this RoutesResponseData.


        :param operators: The operators of this RoutesResponseData.
        :type operators: List[RoutesResponseDataOperatorsInner]
        """
        if operators is None:
            raise ValueError("Invalid value for `operators`, must not be `None`")

        self._operators = operators

    @property
    def places(self):
        """Gets the places of this RoutesResponseData.


        :return: The places of this RoutesResponseData.
        :rtype: List[PlaceResponse]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this RoutesResponseData.


        :param places: The places of this RoutesResponseData.
        :type places: List[PlaceResponse]
        """
        if places is None:
            raise ValueError("Invalid value for `places`, must not be `None`")

        self._places = places

    @property
    def routes(self):
        """Gets the routes of this RoutesResponseData.


        :return: The routes of this RoutesResponseData.
        :rtype: List[RoutesResponseDataRoutesInner]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this RoutesResponseData.


        :param routes: The routes of this RoutesResponseData.
        :type routes: List[RoutesResponseDataRoutesInner]
        """
        if routes is None:
            raise ValueError("Invalid value for `routes`, must not be `None`")

        self._routes = routes
