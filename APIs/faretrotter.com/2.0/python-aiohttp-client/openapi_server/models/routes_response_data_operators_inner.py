# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoutesResponseDataOperatorsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[str]=None, code: str=None, id: str=None, logo_img: str=None, mode: str=None, name: str=None):
        """RoutesResponseDataOperatorsInner - a model defined in OpenAPI

        :param attributes: The attributes of this RoutesResponseDataOperatorsInner.
        :param code: The code of this RoutesResponseDataOperatorsInner.
        :param id: The id of this RoutesResponseDataOperatorsInner.
        :param logo_img: The logo_img of this RoutesResponseDataOperatorsInner.
        :param mode: The mode of this RoutesResponseDataOperatorsInner.
        :param name: The name of this RoutesResponseDataOperatorsInner.
        """
        self.openapi_types = {
            'attributes': List[str],
            'code': str,
            'id': str,
            'logo_img': str,
            'mode': str,
            'name': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'code': 'code',
            'id': 'id',
            'logo_img': 'logo_img',
            'mode': 'mode',
            'name': 'name'
        }

        self._attributes = attributes
        self._code = code
        self._id = id
        self._logo_img = logo_img
        self._mode = mode
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutesResponseDataOperatorsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutesResponse_data_operators_inner of this RoutesResponseDataOperatorsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this RoutesResponseDataOperatorsInner.


        :return: The attributes of this RoutesResponseDataOperatorsInner.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this RoutesResponseDataOperatorsInner.


        :param attributes: The attributes of this RoutesResponseDataOperatorsInner.
        :type attributes: List[str]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def code(self):
        """Gets the code of this RoutesResponseDataOperatorsInner.


        :return: The code of this RoutesResponseDataOperatorsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this RoutesResponseDataOperatorsInner.


        :param code: The code of this RoutesResponseDataOperatorsInner.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def id(self):
        """Gets the id of this RoutesResponseDataOperatorsInner.


        :return: The id of this RoutesResponseDataOperatorsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoutesResponseDataOperatorsInner.


        :param id: The id of this RoutesResponseDataOperatorsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def logo_img(self):
        """Gets the logo_img of this RoutesResponseDataOperatorsInner.


        :return: The logo_img of this RoutesResponseDataOperatorsInner.
        :rtype: str
        """
        return self._logo_img

    @logo_img.setter
    def logo_img(self, logo_img):
        """Sets the logo_img of this RoutesResponseDataOperatorsInner.


        :param logo_img: The logo_img of this RoutesResponseDataOperatorsInner.
        :type logo_img: str
        """
        if logo_img is None:
            raise ValueError("Invalid value for `logo_img`, must not be `None`")

        self._logo_img = logo_img

    @property
    def mode(self):
        """Gets the mode of this RoutesResponseDataOperatorsInner.


        :return: The mode of this RoutesResponseDataOperatorsInner.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RoutesResponseDataOperatorsInner.


        :param mode: The mode of this RoutesResponseDataOperatorsInner.
        :type mode: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this RoutesResponseDataOperatorsInner.


        :return: The name of this RoutesResponseDataOperatorsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoutesResponseDataOperatorsInner.


        :param name: The name of this RoutesResponseDataOperatorsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
