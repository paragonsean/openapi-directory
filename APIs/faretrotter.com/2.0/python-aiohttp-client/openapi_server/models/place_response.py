# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, geoname_id: str=None, id: str=None, lat: float=None, lng: float=None, name: str=None, name_long: str=None, region: str=None, slug: str=None, type: str=None):
        """PlaceResponse - a model defined in OpenAPI

        :param city: The city of this PlaceResponse.
        :param country: The country of this PlaceResponse.
        :param geoname_id: The geoname_id of this PlaceResponse.
        :param id: The id of this PlaceResponse.
        :param lat: The lat of this PlaceResponse.
        :param lng: The lng of this PlaceResponse.
        :param name: The name of this PlaceResponse.
        :param name_long: The name_long of this PlaceResponse.
        :param region: The region of this PlaceResponse.
        :param slug: The slug of this PlaceResponse.
        :param type: The type of this PlaceResponse.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'geoname_id': str,
            'id': str,
            'lat': float,
            'lng': float,
            'name': str,
            'name_long': str,
            'region': str,
            'slug': str,
            'type': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'geoname_id': 'geoname_id',
            'id': 'id',
            'lat': 'lat',
            'lng': 'lng',
            'name': 'name',
            'name_long': 'name_long',
            'region': 'region',
            'slug': 'slug',
            'type': 'type'
        }

        self._city = city
        self._country = country
        self._geoname_id = geoname_id
        self._id = id
        self._lat = lat
        self._lng = lng
        self._name = name
        self._name_long = name_long
        self._region = region
        self._slug = slug
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceResponse of this PlaceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this PlaceResponse.


        :return: The city of this PlaceResponse.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PlaceResponse.


        :param city: The city of this PlaceResponse.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this PlaceResponse.


        :return: The country of this PlaceResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PlaceResponse.


        :param country: The country of this PlaceResponse.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def geoname_id(self):
        """Gets the geoname_id of this PlaceResponse.


        :return: The geoname_id of this PlaceResponse.
        :rtype: str
        """
        return self._geoname_id

    @geoname_id.setter
    def geoname_id(self, geoname_id):
        """Sets the geoname_id of this PlaceResponse.


        :param geoname_id: The geoname_id of this PlaceResponse.
        :type geoname_id: str
        """
        if geoname_id is None:
            raise ValueError("Invalid value for `geoname_id`, must not be `None`")

        self._geoname_id = geoname_id

    @property
    def id(self):
        """Gets the id of this PlaceResponse.


        :return: The id of this PlaceResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaceResponse.


        :param id: The id of this PlaceResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this PlaceResponse.


        :return: The lat of this PlaceResponse.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this PlaceResponse.


        :param lat: The lat of this PlaceResponse.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this PlaceResponse.


        :return: The lng of this PlaceResponse.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this PlaceResponse.


        :param lng: The lng of this PlaceResponse.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")

        self._lng = lng

    @property
    def name(self):
        """Gets the name of this PlaceResponse.


        :return: The name of this PlaceResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlaceResponse.


        :param name: The name of this PlaceResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_long(self):
        """Gets the name_long of this PlaceResponse.


        :return: The name_long of this PlaceResponse.
        :rtype: str
        """
        return self._name_long

    @name_long.setter
    def name_long(self, name_long):
        """Sets the name_long of this PlaceResponse.


        :param name_long: The name_long of this PlaceResponse.
        :type name_long: str
        """
        if name_long is None:
            raise ValueError("Invalid value for `name_long`, must not be `None`")

        self._name_long = name_long

    @property
    def region(self):
        """Gets the region of this PlaceResponse.


        :return: The region of this PlaceResponse.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PlaceResponse.


        :param region: The region of this PlaceResponse.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def slug(self):
        """Gets the slug of this PlaceResponse.


        :return: The slug of this PlaceResponse.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PlaceResponse.


        :param slug: The slug of this PlaceResponse.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def type(self):
        """Gets the type of this PlaceResponse.


        :return: The type of this PlaceResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlaceResponse.


        :param type: The type of this PlaceResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
