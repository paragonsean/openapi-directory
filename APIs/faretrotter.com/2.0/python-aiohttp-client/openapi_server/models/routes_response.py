# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.places_response_request import PlacesResponseRequest
from openapi_server.models.places_response_status import PlacesResponseStatus
from openapi_server.models.routes_response_data import RoutesResponseData
from openapi_server.models.routes_response_response import RoutesResponseResponse
from openapi_server import util


class RoutesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: RoutesResponseData=None, request: PlacesResponseRequest=None, response: RoutesResponseResponse=None, status: PlacesResponseStatus=None):
        """RoutesResponse - a model defined in OpenAPI

        :param data: The data of this RoutesResponse.
        :param request: The request of this RoutesResponse.
        :param response: The response of this RoutesResponse.
        :param status: The status of this RoutesResponse.
        """
        self.openapi_types = {
            'data': RoutesResponseData,
            'request': PlacesResponseRequest,
            'response': RoutesResponseResponse,
            'status': PlacesResponseStatus
        }

        self.attribute_map = {
            'data': 'data',
            'request': 'request',
            'response': 'response',
            'status': 'status'
        }

        self._data = data
        self._request = request
        self._response = response
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutesResponse of this RoutesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this RoutesResponse.


        :return: The data of this RoutesResponse.
        :rtype: RoutesResponseData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RoutesResponse.


        :param data: The data of this RoutesResponse.
        :type data: RoutesResponseData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def request(self):
        """Gets the request of this RoutesResponse.


        :return: The request of this RoutesResponse.
        :rtype: PlacesResponseRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this RoutesResponse.


        :param request: The request of this RoutesResponse.
        :type request: PlacesResponseRequest
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")

        self._request = request

    @property
    def response(self):
        """Gets the response of this RoutesResponse.


        :return: The response of this RoutesResponse.
        :rtype: RoutesResponseResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this RoutesResponse.


        :param response: The response of this RoutesResponse.
        :type response: RoutesResponseResponse
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def status(self):
        """Gets the status of this RoutesResponse.


        :return: The status of this RoutesResponse.
        :rtype: PlacesResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RoutesResponse.


        :param status: The status of this RoutesResponse.
        :type status: PlacesResponseStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
