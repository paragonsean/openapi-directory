/*
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlaceResponse;
import org.openapitools.client.model.RoutesResponseDataOperatorsInner;
import org.openapitools.client.model.RoutesResponseDataRoutesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RoutesResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:42.734637-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutesResponseData {
  public static final String SERIALIZED_NAME_OPERATORS = "operators";
  @SerializedName(SERIALIZED_NAME_OPERATORS)
  private List<RoutesResponseDataOperatorsInner> operators = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACES = "places";
  @SerializedName(SERIALIZED_NAME_PLACES)
  private List<PlaceResponse> places = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTES = "routes";
  @SerializedName(SERIALIZED_NAME_ROUTES)
  private List<RoutesResponseDataRoutesInner> routes = new ArrayList<>();

  public RoutesResponseData() {
  }

  public RoutesResponseData operators(List<RoutesResponseDataOperatorsInner> operators) {
    this.operators = operators;
    return this;
  }

  public RoutesResponseData addOperatorsItem(RoutesResponseDataOperatorsInner operatorsItem) {
    if (this.operators == null) {
      this.operators = new ArrayList<>();
    }
    this.operators.add(operatorsItem);
    return this;
  }

  /**
   * Get operators
   * @return operators
   */
  @javax.annotation.Nonnull
  public List<RoutesResponseDataOperatorsInner> getOperators() {
    return operators;
  }

  public void setOperators(List<RoutesResponseDataOperatorsInner> operators) {
    this.operators = operators;
  }


  public RoutesResponseData places(List<PlaceResponse> places) {
    this.places = places;
    return this;
  }

  public RoutesResponseData addPlacesItem(PlaceResponse placesItem) {
    if (this.places == null) {
      this.places = new ArrayList<>();
    }
    this.places.add(placesItem);
    return this;
  }

  /**
   * Get places
   * @return places
   */
  @javax.annotation.Nonnull
  public List<PlaceResponse> getPlaces() {
    return places;
  }

  public void setPlaces(List<PlaceResponse> places) {
    this.places = places;
  }


  public RoutesResponseData routes(List<RoutesResponseDataRoutesInner> routes) {
    this.routes = routes;
    return this;
  }

  public RoutesResponseData addRoutesItem(RoutesResponseDataRoutesInner routesItem) {
    if (this.routes == null) {
      this.routes = new ArrayList<>();
    }
    this.routes.add(routesItem);
    return this;
  }

  /**
   * Get routes
   * @return routes
   */
  @javax.annotation.Nonnull
  public List<RoutesResponseDataRoutesInner> getRoutes() {
    return routes;
  }

  public void setRoutes(List<RoutesResponseDataRoutesInner> routes) {
    this.routes = routes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutesResponseData routesResponseData = (RoutesResponseData) o;
    return Objects.equals(this.operators, routesResponseData.operators) &&
        Objects.equals(this.places, routesResponseData.places) &&
        Objects.equals(this.routes, routesResponseData.routes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operators, places, routes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutesResponseData {\n");
    sb.append("    operators: ").append(toIndentedString(operators)).append("\n");
    sb.append("    places: ").append(toIndentedString(places)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operators");
    openapiFields.add("places");
    openapiFields.add("routes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operators");
    openapiRequiredFields.add("places");
    openapiRequiredFields.add("routes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutesResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutesResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutesResponseData is not found in the empty JSON string", RoutesResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutesResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutesResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoutesResponseData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("operators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operators` to be an array in the JSON string but got `%s`", jsonObj.get("operators").toString()));
      }

      JsonArray jsonArrayoperators = jsonObj.getAsJsonArray("operators");
      // validate the required field `operators` (array)
      for (int i = 0; i < jsonArrayoperators.size(); i++) {
        RoutesResponseDataOperatorsInner.validateJsonElement(jsonArrayoperators.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("places").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `places` to be an array in the JSON string but got `%s`", jsonObj.get("places").toString()));
      }

      JsonArray jsonArrayplaces = jsonObj.getAsJsonArray("places");
      // validate the required field `places` (array)
      for (int i = 0; i < jsonArrayplaces.size(); i++) {
        PlaceResponse.validateJsonElement(jsonArrayplaces.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("routes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `routes` to be an array in the JSON string but got `%s`", jsonObj.get("routes").toString()));
      }

      JsonArray jsonArrayroutes = jsonObj.getAsJsonArray("routes");
      // validate the required field `routes` (array)
      for (int i = 0; i < jsonArrayroutes.size(); i++) {
        RoutesResponseDataRoutesInner.validateJsonElement(jsonArrayroutes.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutesResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutesResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutesResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutesResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutesResponseData>() {
           @Override
           public void write(JsonWriter out, RoutesResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutesResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutesResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutesResponseData
   * @throws IOException if the JSON string is invalid with respect to RoutesResponseData
   */
  public static RoutesResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutesResponseData.class);
  }

  /**
   * Convert an instance of RoutesResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

