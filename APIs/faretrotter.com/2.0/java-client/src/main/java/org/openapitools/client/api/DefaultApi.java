/*
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.PlaceResponse;
import org.openapitools.client.model.RoutesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETPlaces
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPlacesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPlacesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return gETPlacesCall(_callback);

    }

    /**
     * Returns possible modes of transportation between two cities.
     * 
     * @return PlaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public PlaceResponse gETPlaces() throws ApiException {
        ApiResponse<PlaceResponse> localVarResp = gETPlacesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns possible modes of transportation between two cities.
     * 
     * @return ApiResponse&lt;PlaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceResponse> gETPlacesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = gETPlacesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns possible modes of transportation between two cities. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPlacesAsync(final ApiCallback<PlaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPlacesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PlaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRoutes
     * @param originLat  (required)
     * @param originLng  (required)
     * @param destinationLat  (required)
     * @param destinationLng  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRoutesCall(BigDecimal originLat, BigDecimal originLng, BigDecimal destinationLat, BigDecimal destinationLng, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/routes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (originLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin_lat", originLat));
        }

        if (originLng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin_lng", originLng));
        }

        if (destinationLat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination_lat", destinationLat));
        }

        if (destinationLng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination_lng", destinationLng));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRoutesValidateBeforeCall(BigDecimal originLat, BigDecimal originLng, BigDecimal destinationLat, BigDecimal destinationLng, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'originLat' is set
        if (originLat == null) {
            throw new ApiException("Missing the required parameter 'originLat' when calling gETRoutes(Async)");
        }

        // verify the required parameter 'originLng' is set
        if (originLng == null) {
            throw new ApiException("Missing the required parameter 'originLng' when calling gETRoutes(Async)");
        }

        // verify the required parameter 'destinationLat' is set
        if (destinationLat == null) {
            throw new ApiException("Missing the required parameter 'destinationLat' when calling gETRoutes(Async)");
        }

        // verify the required parameter 'destinationLng' is set
        if (destinationLng == null) {
            throw new ApiException("Missing the required parameter 'destinationLng' when calling gETRoutes(Async)");
        }

        return gETRoutesCall(originLat, originLng, destinationLat, destinationLng, _callback);

    }

    /**
     * 
     * 
     * @param originLat  (required)
     * @param originLng  (required)
     * @param destinationLat  (required)
     * @param destinationLng  (required)
     * @return RoutesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesResponse gETRoutes(BigDecimal originLat, BigDecimal originLng, BigDecimal destinationLat, BigDecimal destinationLng) throws ApiException {
        ApiResponse<RoutesResponse> localVarResp = gETRoutesWithHttpInfo(originLat, originLng, destinationLat, destinationLng);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param originLat  (required)
     * @param originLng  (required)
     * @param destinationLat  (required)
     * @param destinationLng  (required)
     * @return ApiResponse&lt;RoutesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesResponse> gETRoutesWithHttpInfo(BigDecimal originLat, BigDecimal originLng, BigDecimal destinationLat, BigDecimal destinationLng) throws ApiException {
        okhttp3.Call localVarCall = gETRoutesValidateBeforeCall(originLat, originLng, destinationLat, destinationLng, null);
        Type localVarReturnType = new TypeToken<RoutesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param originLat  (required)
     * @param originLng  (required)
     * @param destinationLat  (required)
     * @param destinationLng  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything worked as expected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parameters did not match the endpoint requirements. Check that all required fields are present and spelt correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication Failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> All parameters are correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Request IP does not match IP address registered with key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The endpoint doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests hit the API too quickly. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRoutesAsync(BigDecimal originLat, BigDecimal originLng, BigDecimal destinationLat, BigDecimal destinationLng, final ApiCallback<RoutesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRoutesValidateBeforeCall(originLat, originLng, destinationLat, destinationLng, _callback);
        Type localVarReturnType = new TypeToken<RoutesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
