/*
 * Faretrotter Travel API
 * Multimodal travel API to return modes of transportation between cities and points of interest.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RoutesResponseDataRoutesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:42.734637-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutesResponseDataRoutesInner {
  public static final String SERIALIZED_NAME_CO2 = "co2";
  @SerializedName(SERIALIZED_NAME_CO2)
  private BigDecimal co2;

  public static final String SERIALIZED_NAME_DESTINATION_ID = "destination_id";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ID)
  private String destinationId;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_FARE = "fare";
  @SerializedName(SERIALIZED_NAME_FARE)
  private BigDecimal fare;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_ORIGIN_ID = "origin_id";
  @SerializedName(SERIALIZED_NAME_ORIGIN_ID)
  private String originId;

  public RoutesResponseDataRoutesInner() {
  }

  public RoutesResponseDataRoutesInner co2(BigDecimal co2) {
    this.co2 = co2;
    return this;
  }

  /**
   * Get co2
   * @return co2
   */
  @javax.annotation.Nonnull
  public BigDecimal getCo2() {
    return co2;
  }

  public void setCo2(BigDecimal co2) {
    this.co2 = co2;
  }


  public RoutesResponseDataRoutesInner destinationId(String destinationId) {
    this.destinationId = destinationId;
    return this;
  }

  /**
   * Get destinationId
   * @return destinationId
   */
  @javax.annotation.Nonnull
  public String getDestinationId() {
    return destinationId;
  }

  public void setDestinationId(String destinationId) {
    this.destinationId = destinationId;
  }


  public RoutesResponseDataRoutesInner duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public RoutesResponseDataRoutesInner fare(BigDecimal fare) {
    this.fare = fare;
    return this;
  }

  /**
   * Get fare
   * @return fare
   */
  @javax.annotation.Nonnull
  public BigDecimal getFare() {
    return fare;
  }

  public void setFare(BigDecimal fare) {
    this.fare = fare;
  }


  public RoutesResponseDataRoutesInner mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nonnull
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public RoutesResponseDataRoutesInner originId(String originId) {
    this.originId = originId;
    return this;
  }

  /**
   * Get originId
   * @return originId
   */
  @javax.annotation.Nonnull
  public String getOriginId() {
    return originId;
  }

  public void setOriginId(String originId) {
    this.originId = originId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutesResponseDataRoutesInner routesResponseDataRoutesInner = (RoutesResponseDataRoutesInner) o;
    return Objects.equals(this.co2, routesResponseDataRoutesInner.co2) &&
        Objects.equals(this.destinationId, routesResponseDataRoutesInner.destinationId) &&
        Objects.equals(this.duration, routesResponseDataRoutesInner.duration) &&
        Objects.equals(this.fare, routesResponseDataRoutesInner.fare) &&
        Objects.equals(this.mode, routesResponseDataRoutesInner.mode) &&
        Objects.equals(this.originId, routesResponseDataRoutesInner.originId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(co2, destinationId, duration, fare, mode, originId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutesResponseDataRoutesInner {\n");
    sb.append("    co2: ").append(toIndentedString(co2)).append("\n");
    sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    fare: ").append(toIndentedString(fare)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    originId: ").append(toIndentedString(originId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("co2");
    openapiFields.add("destination_id");
    openapiFields.add("duration");
    openapiFields.add("fare");
    openapiFields.add("mode");
    openapiFields.add("origin_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("co2");
    openapiRequiredFields.add("destination_id");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("fare");
    openapiRequiredFields.add("mode");
    openapiRequiredFields.add("origin_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutesResponseDataRoutesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutesResponseDataRoutesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutesResponseDataRoutesInner is not found in the empty JSON string", RoutesResponseDataRoutesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutesResponseDataRoutesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutesResponseDataRoutesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoutesResponseDataRoutesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destination_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_id").toString()));
      }
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      if (!jsonObj.get("origin_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutesResponseDataRoutesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutesResponseDataRoutesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutesResponseDataRoutesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutesResponseDataRoutesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutesResponseDataRoutesInner>() {
           @Override
           public void write(JsonWriter out, RoutesResponseDataRoutesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutesResponseDataRoutesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutesResponseDataRoutesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutesResponseDataRoutesInner
   * @throws IOException if the JSON string is invalid with respect to RoutesResponseDataRoutesInner
   */
  public static RoutesResponseDataRoutesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutesResponseDataRoutesInner.class);
  }

  /**
   * Convert an instance of RoutesResponseDataRoutesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

