# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ticket_counts_detailed_entity_event_channels_inner_event_categories_inner import TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner
from openapi_server import util


class TicketCountsDetailedEntityEventChannelsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_categories: List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner]=None, id: int=None):
        """TicketCountsDetailedEntityEventChannelsInner - a model defined in OpenAPI

        :param event_categories: The event_categories of this TicketCountsDetailedEntityEventChannelsInner.
        :param id: The id of this TicketCountsDetailedEntityEventChannelsInner.
        """
        self.openapi_types = {
            'event_categories': List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner],
            'id': int
        }

        self.attribute_map = {
            'event_categories': 'event_categories',
            'id': 'id'
        }

        self._event_categories = event_categories
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketCountsDetailedEntityEventChannelsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketCountsDetailedEntity_event_channels_inner of this TicketCountsDetailedEntityEventChannelsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_categories(self):
        """Gets the event_categories of this TicketCountsDetailedEntityEventChannelsInner.

        Array of event categories which where sold.

        :return: The event_categories of this TicketCountsDetailedEntityEventChannelsInner.
        :rtype: List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner]
        """
        return self._event_categories

    @event_categories.setter
    def event_categories(self, event_categories):
        """Sets the event_categories of this TicketCountsDetailedEntityEventChannelsInner.

        Array of event categories which where sold.

        :param event_categories: The event_categories of this TicketCountsDetailedEntityEventChannelsInner.
        :type event_categories: List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner]
        """
        if event_categories is None:
            raise ValueError("Invalid value for `event_categories`, must not be `None`")

        self._event_categories = event_categories

    @property
    def id(self):
        """Gets the id of this TicketCountsDetailedEntityEventChannelsInner.

        ID of the event channel.

        :return: The id of this TicketCountsDetailedEntityEventChannelsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketCountsDetailedEntityEventChannelsInner.

        ID of the event channel.

        :param id: The id of this TicketCountsDetailedEntityEventChannelsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
