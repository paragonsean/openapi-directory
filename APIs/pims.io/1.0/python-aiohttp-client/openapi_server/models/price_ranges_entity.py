# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PriceRangesEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, ignored: bool=None, label: str=None, last_update_timestamp: int=None, short_label: str=None):
        """PriceRangesEntity - a model defined in OpenAPI

        :param id: The id of this PriceRangesEntity.
        :param ignored: The ignored of this PriceRangesEntity.
        :param label: The label of this PriceRangesEntity.
        :param last_update_timestamp: The last_update_timestamp of this PriceRangesEntity.
        :param short_label: The short_label of this PriceRangesEntity.
        """
        self.openapi_types = {
            'id': int,
            'ignored': bool,
            'label': str,
            'last_update_timestamp': int,
            'short_label': str
        }

        self.attribute_map = {
            'id': 'id',
            'ignored': 'ignored',
            'label': 'label',
            'last_update_timestamp': 'last_update_timestamp',
            'short_label': 'short_label'
        }

        self._id = id
        self._ignored = ignored
        self._label = label
        self._last_update_timestamp = last_update_timestamp
        self._short_label = short_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceRangesEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceRangesEntity of this PriceRangesEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PriceRangesEntity.

        Unique ID of the price range.

        :return: The id of this PriceRangesEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PriceRangesEntity.

        Unique ID of the price range.

        :param id: The id of this PriceRangesEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ignored(self):
        """Gets the ignored of this PriceRangesEntity.

        Defines whether this price range is ignored or not.

        :return: The ignored of this PriceRangesEntity.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this PriceRangesEntity.

        Defines whether this price range is ignored or not.

        :param ignored: The ignored of this PriceRangesEntity.
        :type ignored: bool
        """
        if ignored is None:
            raise ValueError("Invalid value for `ignored`, must not be `None`")

        self._ignored = ignored

    @property
    def label(self):
        """Gets the label of this PriceRangesEntity.

        Full label of the price range.

        :return: The label of this PriceRangesEntity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PriceRangesEntity.

        Full label of the price range.

        :param label: The label of this PriceRangesEntity.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this PriceRangesEntity.

        Timestamp for when the price range was last updated in the customer's database.

        :return: The last_update_timestamp of this PriceRangesEntity.
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this PriceRangesEntity.

        Timestamp for when the price range was last updated in the customer's database.

        :param last_update_timestamp: The last_update_timestamp of this PriceRangesEntity.
        :type last_update_timestamp: int
        """
        if last_update_timestamp is None:
            raise ValueError("Invalid value for `last_update_timestamp`, must not be `None`")

        self._last_update_timestamp = last_update_timestamp

    @property
    def short_label(self):
        """Gets the short_label of this PriceRangesEntity.

        Short label of the price range (generally less than 5 characters).

        :return: The short_label of this PriceRangesEntity.
        :rtype: str
        """
        return self._short_label

    @short_label.setter
    def short_label(self, short_label):
        """Sets the short_label of this PriceRangesEntity.

        Short label of the price range (generally less than 5 characters).

        :param short_label: The short_label of this PriceRangesEntity.
        :type short_label: str
        """
        if short_label is None:
            raise ValueError("Invalid value for `short_label`, must not be `None`")

        self._short_label = short_label
