# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TicketCountsEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved: bool=None, comment: str=None, currency: str=None, _date: date=None, final: bool=None, gross: float=None, id: int=None, reservations: int=None, sales: int=None):
        """TicketCountsEntity - a model defined in OpenAPI

        :param approved: The approved of this TicketCountsEntity.
        :param comment: The comment of this TicketCountsEntity.
        :param currency: The currency of this TicketCountsEntity.
        :param _date: The _date of this TicketCountsEntity.
        :param final: The final of this TicketCountsEntity.
        :param gross: The gross of this TicketCountsEntity.
        :param id: The id of this TicketCountsEntity.
        :param reservations: The reservations of this TicketCountsEntity.
        :param sales: The sales of this TicketCountsEntity.
        """
        self.openapi_types = {
            'approved': bool,
            'comment': str,
            'currency': str,
            '_date': date,
            'final': bool,
            'gross': float,
            'id': int,
            'reservations': int,
            'sales': int
        }

        self.attribute_map = {
            'approved': 'approved',
            'comment': 'comment',
            'currency': 'currency',
            '_date': 'date',
            'final': 'final',
            'gross': 'gross',
            'id': 'id',
            'reservations': 'reservations',
            'sales': 'sales'
        }

        self._approved = approved
        self._comment = comment
        self._currency = currency
        self.__date = _date
        self._final = final
        self._gross = gross
        self._id = id
        self._reservations = reservations
        self._sales = sales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketCountsEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketCountsEntity of this TicketCountsEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved(self):
        """Gets the approved of this TicketCountsEntity.

        Defines whether this ticket count is approved or not.

        :return: The approved of this TicketCountsEntity.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this TicketCountsEntity.

        Defines whether this ticket count is approved or not.

        :param approved: The approved of this TicketCountsEntity.
        :type approved: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")

        self._approved = approved

    @property
    def comment(self):
        """Gets the comment of this TicketCountsEntity.

        Comment for the ticket count.

        :return: The comment of this TicketCountsEntity.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TicketCountsEntity.

        Comment for the ticket count.

        :param comment: The comment of this TicketCountsEntity.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def currency(self):
        """Gets the currency of this TicketCountsEntity.

        Currency of the gross (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO 4212 alphabetic code</a>).

        :return: The currency of this TicketCountsEntity.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TicketCountsEntity.

        Currency of the gross (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO 4212 alphabetic code</a>).

        :param currency: The currency of this TicketCountsEntity.
        :type currency: str
        """

        self._currency = currency

    @property
    def _date(self):
        """Gets the _date of this TicketCountsEntity.

        Date of the ticket count.

        :return: The _date of this TicketCountsEntity.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TicketCountsEntity.

        Date of the ticket count.

        :param _date: The _date of this TicketCountsEntity.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def final(self):
        """Gets the final of this TicketCountsEntity.

        Whether this ticket count is the last and final one of its event or not. If it is, it means that no further ticket counts will be added for the event it belongs to.

        :return: The final of this TicketCountsEntity.
        :rtype: bool
        """
        return self._final

    @final.setter
    def final(self, final):
        """Sets the final of this TicketCountsEntity.

        Whether this ticket count is the last and final one of its event or not. If it is, it means that no further ticket counts will be added for the event it belongs to.

        :param final: The final of this TicketCountsEntity.
        :type final: bool
        """
        if final is None:
            raise ValueError("Invalid value for `final`, must not be `None`")

        self._final = final

    @property
    def gross(self):
        """Gets the gross of this TicketCountsEntity.

        Gross (= income for the sold tickets, including VAT but excluding all commissions).

        :return: The gross of this TicketCountsEntity.
        :rtype: float
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this TicketCountsEntity.

        Gross (= income for the sold tickets, including VAT but excluding all commissions).

        :param gross: The gross of this TicketCountsEntity.
        :type gross: float
        """
        if gross is not None and gross < 0:
            raise ValueError("Invalid value for `gross`, must be a value greater than or equal to `0`")

        self._gross = gross

    @property
    def id(self):
        """Gets the id of this TicketCountsEntity.

        Unique ID of the ticket count.

        :return: The id of this TicketCountsEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketCountsEntity.

        Unique ID of the ticket count.

        :param id: The id of this TicketCountsEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reservations(self):
        """Gets the reservations of this TicketCountsEntity.

        Ticket reservations (= number of reserved tickets). *This field may be omitted according to the customer configuration.*

        :return: The reservations of this TicketCountsEntity.
        :rtype: int
        """
        return self._reservations

    @reservations.setter
    def reservations(self, reservations):
        """Sets the reservations of this TicketCountsEntity.

        Ticket reservations (= number of reserved tickets). *This field may be omitted according to the customer configuration.*

        :param reservations: The reservations of this TicketCountsEntity.
        :type reservations: int
        """
        if reservations is not None and reservations < 0:
            raise ValueError("Invalid value for `reservations`, must be a value greater than or equal to `0`")

        self._reservations = reservations

    @property
    def sales(self):
        """Gets the sales of this TicketCountsEntity.

        Ticket sales (= number of sold tickets).

        :return: The sales of this TicketCountsEntity.
        :rtype: int
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this TicketCountsEntity.

        Ticket sales (= number of sold tickets).

        :param sales: The sales of this TicketCountsEntity.
        :type sales: int
        """
        if sales is None:
            raise ValueError("Invalid value for `sales`, must not be `None`")
        if sales is not None and sales < 0:
            raise ValueError("Invalid value for `sales`, must be a value greater than or equal to `0`")

        self._sales = sales
