# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ticket_counts_detailed_entity_event_channels_inner import TicketCountsDetailedEntityEventChannelsInner
from openapi_server import util


class TicketCountsDetailedEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved: bool=None, comment: str=None, _date: date=None, event_channels: List[TicketCountsDetailedEntityEventChannelsInner]=None, final: bool=None, id: int=None):
        """TicketCountsDetailedEntity - a model defined in OpenAPI

        :param approved: The approved of this TicketCountsDetailedEntity.
        :param comment: The comment of this TicketCountsDetailedEntity.
        :param _date: The _date of this TicketCountsDetailedEntity.
        :param event_channels: The event_channels of this TicketCountsDetailedEntity.
        :param final: The final of this TicketCountsDetailedEntity.
        :param id: The id of this TicketCountsDetailedEntity.
        """
        self.openapi_types = {
            'approved': bool,
            'comment': str,
            '_date': date,
            'event_channels': List[TicketCountsDetailedEntityEventChannelsInner],
            'final': bool,
            'id': int
        }

        self.attribute_map = {
            'approved': 'approved',
            'comment': 'comment',
            '_date': 'date',
            'event_channels': 'event_channels',
            'final': 'final',
            'id': 'id'
        }

        self._approved = approved
        self._comment = comment
        self.__date = _date
        self._event_channels = event_channels
        self._final = final
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketCountsDetailedEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketCountsDetailedEntity of this TicketCountsDetailedEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved(self):
        """Gets the approved of this TicketCountsDetailedEntity.

        Defines whether this ticket count is approved or not.

        :return: The approved of this TicketCountsDetailedEntity.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this TicketCountsDetailedEntity.

        Defines whether this ticket count is approved or not.

        :param approved: The approved of this TicketCountsDetailedEntity.
        :type approved: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")

        self._approved = approved

    @property
    def comment(self):
        """Gets the comment of this TicketCountsDetailedEntity.

        Comment for the ticket count.

        :return: The comment of this TicketCountsDetailedEntity.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TicketCountsDetailedEntity.

        Comment for the ticket count.

        :param comment: The comment of this TicketCountsDetailedEntity.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def _date(self):
        """Gets the _date of this TicketCountsDetailedEntity.

        Date of the ticket count.

        :return: The _date of this TicketCountsDetailedEntity.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TicketCountsDetailedEntity.

        Date of the ticket count.

        :param _date: The _date of this TicketCountsDetailedEntity.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def event_channels(self):
        """Gets the event_channels of this TicketCountsDetailedEntity.

        Array of event channels where the sales were made.

        :return: The event_channels of this TicketCountsDetailedEntity.
        :rtype: List[TicketCountsDetailedEntityEventChannelsInner]
        """
        return self._event_channels

    @event_channels.setter
    def event_channels(self, event_channels):
        """Sets the event_channels of this TicketCountsDetailedEntity.

        Array of event channels where the sales were made.

        :param event_channels: The event_channels of this TicketCountsDetailedEntity.
        :type event_channels: List[TicketCountsDetailedEntityEventChannelsInner]
        """

        self._event_channels = event_channels

    @property
    def final(self):
        """Gets the final of this TicketCountsDetailedEntity.

        Whether this ticket count is the last and final one of its event or not. If it is, it means that no further ticket counts will be added for the event it belongs to.

        :return: The final of this TicketCountsDetailedEntity.
        :rtype: bool
        """
        return self._final

    @final.setter
    def final(self, final):
        """Sets the final of this TicketCountsDetailedEntity.

        Whether this ticket count is the last and final one of its event or not. If it is, it means that no further ticket counts will be added for the event it belongs to.

        :param final: The final of this TicketCountsDetailedEntity.
        :type final: bool
        """
        if final is None:
            raise ValueError("Invalid value for `final`, must not be `None`")

        self._final = final

    @property
    def id(self):
        """Gets the id of this TicketCountsDetailedEntity.

        Unique ID of the ticket count.

        :return: The id of this TicketCountsDetailedEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketCountsDetailedEntity.

        Unique ID of the ticket count.

        :param id: The id of this TicketCountsDetailedEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
