# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.series_entity_contract import SeriesEntityContract
from openapi_server.models.series_entity_type import SeriesEntityType
from openapi_server.models.venues_entity import VenuesEntity
from openapi_server import util


class SeriesEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract: SeriesEntityContract=None, costing_capacity: int=None, creation_timestamp: int=None, first_date: date=None, id: int=None, label: str=None, last_date: date=None, last_update_timestamp: int=None, type: SeriesEntityType=None, venue: VenuesEntity=None):
        """SeriesEntity - a model defined in OpenAPI

        :param contract: The contract of this SeriesEntity.
        :param costing_capacity: The costing_capacity of this SeriesEntity.
        :param creation_timestamp: The creation_timestamp of this SeriesEntity.
        :param first_date: The first_date of this SeriesEntity.
        :param id: The id of this SeriesEntity.
        :param label: The label of this SeriesEntity.
        :param last_date: The last_date of this SeriesEntity.
        :param last_update_timestamp: The last_update_timestamp of this SeriesEntity.
        :param type: The type of this SeriesEntity.
        :param venue: The venue of this SeriesEntity.
        """
        self.openapi_types = {
            'contract': SeriesEntityContract,
            'costing_capacity': int,
            'creation_timestamp': int,
            'first_date': date,
            'id': int,
            'label': str,
            'last_date': date,
            'last_update_timestamp': int,
            'type': SeriesEntityType,
            'venue': VenuesEntity
        }

        self.attribute_map = {
            'contract': 'contract',
            'costing_capacity': 'costing_capacity',
            'creation_timestamp': 'creation_timestamp',
            'first_date': 'first_date',
            'id': 'id',
            'label': 'label',
            'last_date': 'last_date',
            'last_update_timestamp': 'last_update_timestamp',
            'type': 'type',
            'venue': 'venue'
        }

        self._contract = contract
        self._costing_capacity = costing_capacity
        self._creation_timestamp = creation_timestamp
        self._first_date = first_date
        self._id = id
        self._label = label
        self._last_date = last_date
        self._last_update_timestamp = last_update_timestamp
        self._type = type
        self._venue = venue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeriesEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeriesEntity of this SeriesEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract(self):
        """Gets the contract of this SeriesEntity.


        :return: The contract of this SeriesEntity.
        :rtype: SeriesEntityContract
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this SeriesEntity.


        :param contract: The contract of this SeriesEntity.
        :type contract: SeriesEntityContract
        """

        self._contract = contract

    @property
    def costing_capacity(self):
        """Gets the costing_capacity of this SeriesEntity.

        Value of the costing capacity.

        :return: The costing_capacity of this SeriesEntity.
        :rtype: int
        """
        return self._costing_capacity

    @costing_capacity.setter
    def costing_capacity(self, costing_capacity):
        """Sets the costing_capacity of this SeriesEntity.

        Value of the costing capacity.

        :param costing_capacity: The costing_capacity of this SeriesEntity.
        :type costing_capacity: int
        """
        if costing_capacity is not None and costing_capacity < 0:
            raise ValueError("Invalid value for `costing_capacity`, must be a value greater than or equal to `0`")

        self._costing_capacity = costing_capacity

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this SeriesEntity.

        Timestamp for when the series was created in the customer's database.

        :return: The creation_timestamp of this SeriesEntity.
        :rtype: int
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this SeriesEntity.

        Timestamp for when the series was created in the customer's database.

        :param creation_timestamp: The creation_timestamp of this SeriesEntity.
        :type creation_timestamp: int
        """
        if creation_timestamp is None:
            raise ValueError("Invalid value for `creation_timestamp`, must not be `None`")

        self._creation_timestamp = creation_timestamp

    @property
    def first_date(self):
        """Gets the first_date of this SeriesEntity.

        Date of the first event in the series.

        :return: The first_date of this SeriesEntity.
        :rtype: date
        """
        return self._first_date

    @first_date.setter
    def first_date(self, first_date):
        """Sets the first_date of this SeriesEntity.

        Date of the first event in the series.

        :param first_date: The first_date of this SeriesEntity.
        :type first_date: date
        """
        if first_date is None:
            raise ValueError("Invalid value for `first_date`, must not be `None`")

        self._first_date = first_date

    @property
    def id(self):
        """Gets the id of this SeriesEntity.

        Unique ID of the series.

        :return: The id of this SeriesEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SeriesEntity.

        Unique ID of the series.

        :param id: The id of this SeriesEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this SeriesEntity.

        Label of the series.

        :return: The label of this SeriesEntity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SeriesEntity.

        Label of the series.

        :param label: The label of this SeriesEntity.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def last_date(self):
        """Gets the last_date of this SeriesEntity.

        Date of the last event in the series.

        :return: The last_date of this SeriesEntity.
        :rtype: date
        """
        return self._last_date

    @last_date.setter
    def last_date(self, last_date):
        """Sets the last_date of this SeriesEntity.

        Date of the last event in the series.

        :param last_date: The last_date of this SeriesEntity.
        :type last_date: date
        """
        if last_date is None:
            raise ValueError("Invalid value for `last_date`, must not be `None`")

        self._last_date = last_date

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this SeriesEntity.

        Timestamp for when the series was last updated in the customer's database.

        :return: The last_update_timestamp of this SeriesEntity.
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this SeriesEntity.

        Timestamp for when the series was last updated in the customer's database.

        :param last_update_timestamp: The last_update_timestamp of this SeriesEntity.
        :type last_update_timestamp: int
        """
        if last_update_timestamp is None:
            raise ValueError("Invalid value for `last_update_timestamp`, must not be `None`")

        self._last_update_timestamp = last_update_timestamp

    @property
    def type(self):
        """Gets the type of this SeriesEntity.


        :return: The type of this SeriesEntity.
        :rtype: SeriesEntityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SeriesEntity.


        :param type: The type of this SeriesEntity.
        :type type: SeriesEntityType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def venue(self):
        """Gets the venue of this SeriesEntity.


        :return: The venue of this SeriesEntity.
        :rtype: VenuesEntity
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this SeriesEntity.


        :param venue: The venue of this SeriesEntity.
        :type venue: VenuesEntity
        """

        self._venue = venue
