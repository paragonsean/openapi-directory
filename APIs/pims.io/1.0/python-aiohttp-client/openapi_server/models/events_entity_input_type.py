# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsEntityInputType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, label: str=None):
        """EventsEntityInputType - a model defined in OpenAPI

        :param id: The id of this EventsEntityInputType.
        :param label: The label of this EventsEntityInputType.
        """
        self.openapi_types = {
            'id': str,
            'label': str
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label'
        }

        self._id = id
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsEntityInputType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsEntity_input_type of this EventsEntityInputType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EventsEntityInputType.

        String identifying the input type of the event.

        :return: The id of this EventsEntityInputType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsEntityInputType.

        String identifying the input type of the event.

        :param id: The id of this EventsEntityInputType.
        :type id: str
        """
        allowed_values = ["DET", "GLO"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def label(self):
        """Gets the label of this EventsEntityInputType.

        Label of the input type. This value is translated according to the 'Accept-Language' header.

        :return: The label of this EventsEntityInputType.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EventsEntityInputType.

        Label of the input type. This value is translated according to the 'Accept-Language' header.

        :param label: The label of this EventsEntityInputType.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
