# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channels_entity import ChannelsEntity
from openapi_server import util


class EventsChannelsEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: ChannelsEntity=None, id: int=None, ignored: bool=None):
        """EventsChannelsEntity - a model defined in OpenAPI

        :param channel: The channel of this EventsChannelsEntity.
        :param id: The id of this EventsChannelsEntity.
        :param ignored: The ignored of this EventsChannelsEntity.
        """
        self.openapi_types = {
            'channel': ChannelsEntity,
            'id': int,
            'ignored': bool
        }

        self.attribute_map = {
            'channel': 'channel',
            'id': 'id',
            'ignored': 'ignored'
        }

        self._channel = channel
        self._id = id
        self._ignored = ignored

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsChannelsEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsChannelsEntity of this EventsChannelsEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this EventsChannelsEntity.


        :return: The channel of this EventsChannelsEntity.
        :rtype: ChannelsEntity
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this EventsChannelsEntity.


        :param channel: The channel of this EventsChannelsEntity.
        :type channel: ChannelsEntity
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def id(self):
        """Gets the id of this EventsChannelsEntity.

        Unique ID of the event channel.

        :return: The id of this EventsChannelsEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsChannelsEntity.

        Unique ID of the event channel.

        :param id: The id of this EventsChannelsEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ignored(self):
        """Gets the ignored of this EventsChannelsEntity.

        Defines whether this event channel is ignored or not.

        :return: The ignored of this EventsChannelsEntity.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this EventsChannelsEntity.

        Defines whether this event channel is ignored or not.

        :param ignored: The ignored of this EventsChannelsEntity.
        :type ignored: bool
        """
        if ignored is None:
            raise ValueError("Invalid value for `ignored`, must not be `None`")

        self._ignored = ignored
