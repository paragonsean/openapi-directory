# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_ranges_entity import PriceRangesEntity
from openapi_server import util


class EventsCategoriesEntityEventPriceRangesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_price: float=None, currency: str=None, id: int=None, ignored: bool=None, price_range: PriceRangesEntity=None, public_price: float=None):
        """EventsCategoriesEntityEventPriceRangesInner - a model defined in OpenAPI

        :param base_price: The base_price of this EventsCategoriesEntityEventPriceRangesInner.
        :param currency: The currency of this EventsCategoriesEntityEventPriceRangesInner.
        :param id: The id of this EventsCategoriesEntityEventPriceRangesInner.
        :param ignored: The ignored of this EventsCategoriesEntityEventPriceRangesInner.
        :param price_range: The price_range of this EventsCategoriesEntityEventPriceRangesInner.
        :param public_price: The public_price of this EventsCategoriesEntityEventPriceRangesInner.
        """
        self.openapi_types = {
            'base_price': float,
            'currency': str,
            'id': int,
            'ignored': bool,
            'price_range': PriceRangesEntity,
            'public_price': float
        }

        self.attribute_map = {
            'base_price': 'base_price',
            'currency': 'currency',
            'id': 'id',
            'ignored': 'ignored',
            'price_range': 'price_range',
            'public_price': 'public_price'
        }

        self._base_price = base_price
        self._currency = currency
        self._id = id
        self._ignored = ignored
        self._price_range = price_range
        self._public_price = public_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsCategoriesEntityEventPriceRangesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsCategoriesEntity_event_price_ranges_inner of this EventsCategoriesEntityEventPriceRangesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_price(self):
        """Gets the base_price of this EventsCategoriesEntityEventPriceRangesInner.

        Base price of the event price range (i.e. including VAT but excluding all commissions).

        :return: The base_price of this EventsCategoriesEntityEventPriceRangesInner.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this EventsCategoriesEntityEventPriceRangesInner.

        Base price of the event price range (i.e. including VAT but excluding all commissions).

        :param base_price: The base_price of this EventsCategoriesEntityEventPriceRangesInner.
        :type base_price: float
        """
        if base_price is None:
            raise ValueError("Invalid value for `base_price`, must not be `None`")
        if base_price is not None and base_price < 0:
            raise ValueError("Invalid value for `base_price`, must be a value greater than or equal to `0`")

        self._base_price = base_price

    @property
    def currency(self):
        """Gets the currency of this EventsCategoriesEntityEventPriceRangesInner.

        Currency of the prices.

        :return: The currency of this EventsCategoriesEntityEventPriceRangesInner.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EventsCategoriesEntityEventPriceRangesInner.

        Currency of the prices.

        :param currency: The currency of this EventsCategoriesEntityEventPriceRangesInner.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this EventsCategoriesEntityEventPriceRangesInner.

        ID of the event price range.

        :return: The id of this EventsCategoriesEntityEventPriceRangesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsCategoriesEntityEventPriceRangesInner.

        ID of the event price range.

        :param id: The id of this EventsCategoriesEntityEventPriceRangesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ignored(self):
        """Gets the ignored of this EventsCategoriesEntityEventPriceRangesInner.

        Defines whether this event price range is ignored or not.

        :return: The ignored of this EventsCategoriesEntityEventPriceRangesInner.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this EventsCategoriesEntityEventPriceRangesInner.

        Defines whether this event price range is ignored or not.

        :param ignored: The ignored of this EventsCategoriesEntityEventPriceRangesInner.
        :type ignored: bool
        """

        self._ignored = ignored

    @property
    def price_range(self):
        """Gets the price_range of this EventsCategoriesEntityEventPriceRangesInner.


        :return: The price_range of this EventsCategoriesEntityEventPriceRangesInner.
        :rtype: PriceRangesEntity
        """
        return self._price_range

    @price_range.setter
    def price_range(self, price_range):
        """Sets the price_range of this EventsCategoriesEntityEventPriceRangesInner.


        :param price_range: The price_range of this EventsCategoriesEntityEventPriceRangesInner.
        :type price_range: PriceRangesEntity
        """
        if price_range is None:
            raise ValueError("Invalid value for `price_range`, must not be `None`")

        self._price_range = price_range

    @property
    def public_price(self):
        """Gets the public_price of this EventsCategoriesEntityEventPriceRangesInner.

        Public price of the event price range (i.e. including VAT and all commissions).

        :return: The public_price of this EventsCategoriesEntityEventPriceRangesInner.
        :rtype: float
        """
        return self._public_price

    @public_price.setter
    def public_price(self, public_price):
        """Sets the public_price of this EventsCategoriesEntityEventPriceRangesInner.

        Public price of the event price range (i.e. including VAT and all commissions).

        :param public_price: The public_price of this EventsCategoriesEntityEventPriceRangesInner.
        :type public_price: float
        """
        if public_price is None:
            raise ValueError("Invalid value for `public_price`, must not be `None`")
        if public_price is not None and public_price < 0:
            raise ValueError("Invalid value for `public_price`, must be a value greater than or equal to `0`")

        self._public_price = public_price
