# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ticket_counts_detailed_entity_event_channels_inner_event_categories_inner_event_price_ranges_inner import TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner
from openapi_server import util


class TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_price_ranges: List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner]=None, id: int=None):
        """TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner - a model defined in OpenAPI

        :param event_price_ranges: The event_price_ranges of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.
        :param id: The id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.
        """
        self.openapi_types = {
            'event_price_ranges': List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner],
            'id': int
        }

        self.attribute_map = {
            'event_price_ranges': 'event_price_ranges',
            'id': 'id'
        }

        self._event_price_ranges = event_price_ranges
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketCountsDetailedEntity_event_channels_inner_event_categories_inner of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_price_ranges(self):
        """Gets the event_price_ranges of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.

        Array of event price ranges which where sold.

        :return: The event_price_ranges of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.
        :rtype: List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner]
        """
        return self._event_price_ranges

    @event_price_ranges.setter
    def event_price_ranges(self, event_price_ranges):
        """Sets the event_price_ranges of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.

        Array of event price ranges which where sold.

        :param event_price_ranges: The event_price_ranges of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.
        :type event_price_ranges: List[TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner]
        """
        if event_price_ranges is None:
            raise ValueError("Invalid value for `event_price_ranges`, must not be `None`")

        self._event_price_ranges = event_price_ranges

    @property
    def id(self):
        """Gets the id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.

        ID of the event category.

        :return: The id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.

        ID of the event category.

        :param id: The id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
