# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.events_entity_contract_partner import EventsEntityContractPartner
from openapi_server.models.events_entity_contract_type import EventsEntityContractType
from openapi_server import util


class EventsEntityContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partner: EventsEntityContractPartner=None, type: EventsEntityContractType=None):
        """EventsEntityContract - a model defined in OpenAPI

        :param partner: The partner of this EventsEntityContract.
        :param type: The type of this EventsEntityContract.
        """
        self.openapi_types = {
            'partner': EventsEntityContractPartner,
            'type': EventsEntityContractType
        }

        self.attribute_map = {
            'partner': 'partner',
            'type': 'type'
        }

        self._partner = partner
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsEntityContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsEntity_contract of this EventsEntityContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partner(self):
        """Gets the partner of this EventsEntityContract.


        :return: The partner of this EventsEntityContract.
        :rtype: EventsEntityContractPartner
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this EventsEntityContract.


        :param partner: The partner of this EventsEntityContract.
        :type partner: EventsEntityContractPartner
        """
        if partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")

        self._partner = partner

    @property
    def type(self):
        """Gets the type of this EventsEntityContract.


        :return: The type of this EventsEntityContract.
        :rtype: EventsEntityContractType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsEntityContract.


        :param type: The type of this EventsEntityContract.
        :type type: EventsEntityContractType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
