# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, gross: float=None, id: int=None, reservations: int=None, sales: int=None):
        """TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner - a model defined in OpenAPI

        :param currency: The currency of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :param gross: The gross of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :param id: The id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :param reservations: The reservations of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :param sales: The sales of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        """
        self.openapi_types = {
            'currency': str,
            'gross': float,
            'id': int,
            'reservations': int,
            'sales': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'gross': 'gross',
            'id': 'id',
            'reservations': 'reservations',
            'sales': 'sales'
        }

        self._currency = currency
        self._gross = gross
        self._id = id
        self._reservations = reservations
        self._sales = sales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TicketCountsDetailedEntity_event_channels_inner_event_categories_inner_event_price_ranges_inner of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Currency of the gross (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO 4212 alphabetic code</a>).

        :return: The currency of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Currency of the gross (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO 4212 alphabetic code</a>).

        :param currency: The currency of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def gross(self):
        """Gets the gross of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Gross (= income for the sold tickets for the current channel/category/price range, including VAT but excluding all commissions).

        :return: The gross of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :rtype: float
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Gross (= income for the sold tickets for the current channel/category/price range, including VAT but excluding all commissions).

        :param gross: The gross of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :type gross: float
        """
        if gross is None:
            raise ValueError("Invalid value for `gross`, must not be `None`")
        if gross is not None and gross < 0:
            raise ValueError("Invalid value for `gross`, must be a value greater than or equal to `0`")

        self._gross = gross

    @property
    def id(self):
        """Gets the id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        ID of the event price range.

        :return: The id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        ID of the event price range.

        :param id: The id of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reservations(self):
        """Gets the reservations of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Detailed ticket reservations (= number of reserved tickets for the current channel/category/price range). *This field may be omitted according to the customer configuration.*

        :return: The reservations of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :rtype: int
        """
        return self._reservations

    @reservations.setter
    def reservations(self, reservations):
        """Sets the reservations of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Detailed ticket reservations (= number of reserved tickets for the current channel/category/price range). *This field may be omitted according to the customer configuration.*

        :param reservations: The reservations of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :type reservations: int
        """
        if reservations is not None and reservations < 0:
            raise ValueError("Invalid value for `reservations`, must be a value greater than or equal to `0`")

        self._reservations = reservations

    @property
    def sales(self):
        """Gets the sales of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Detailed ticket sales (= number of sold tickets for the current channel/category/price range).

        :return: The sales of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :rtype: int
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.

        Detailed ticket sales (= number of sold tickets for the current channel/category/price range).

        :param sales: The sales of this TicketCountsDetailedEntityEventChannelsInnerEventCategoriesInnerEventPriceRangesInner.
        :type sales: int
        """
        if sales is None:
            raise ValueError("Invalid value for `sales`, must not be `None`")
        if sales is not None and sales < 0:
            raise ValueError("Invalid value for `sales`, must be a value greater than or equal to `0`")

        self._sales = sales
