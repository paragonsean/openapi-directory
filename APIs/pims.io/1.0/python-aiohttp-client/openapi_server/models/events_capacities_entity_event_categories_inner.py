# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsCapacitiesEntityEventCategoriesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comps: int=None, holds: int=None, id: int=None, kills: int=None, sellable_capacity: int=None, total_capacity: int=None):
        """EventsCapacitiesEntityEventCategoriesInner - a model defined in OpenAPI

        :param comps: The comps of this EventsCapacitiesEntityEventCategoriesInner.
        :param holds: The holds of this EventsCapacitiesEntityEventCategoriesInner.
        :param id: The id of this EventsCapacitiesEntityEventCategoriesInner.
        :param kills: The kills of this EventsCapacitiesEntityEventCategoriesInner.
        :param sellable_capacity: The sellable_capacity of this EventsCapacitiesEntityEventCategoriesInner.
        :param total_capacity: The total_capacity of this EventsCapacitiesEntityEventCategoriesInner.
        """
        self.openapi_types = {
            'comps': int,
            'holds': int,
            'id': int,
            'kills': int,
            'sellable_capacity': int,
            'total_capacity': int
        }

        self.attribute_map = {
            'comps': 'comps',
            'holds': 'holds',
            'id': 'id',
            'kills': 'kills',
            'sellable_capacity': 'sellable_capacity',
            'total_capacity': 'total_capacity'
        }

        self._comps = comps
        self._holds = holds
        self._id = id
        self._kills = kills
        self._sellable_capacity = sellable_capacity
        self._total_capacity = total_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsCapacitiesEntityEventCategoriesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsCapacitiesEntity_event_categories_inner of this EventsCapacitiesEntityEventCategoriesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comps(self):
        """Gets the comps of this EventsCapacitiesEntityEventCategoriesInner.

        Number of comps in the category.

        :return: The comps of this EventsCapacitiesEntityEventCategoriesInner.
        :rtype: int
        """
        return self._comps

    @comps.setter
    def comps(self, comps):
        """Sets the comps of this EventsCapacitiesEntityEventCategoriesInner.

        Number of comps in the category.

        :param comps: The comps of this EventsCapacitiesEntityEventCategoriesInner.
        :type comps: int
        """
        if comps is None:
            raise ValueError("Invalid value for `comps`, must not be `None`")

        self._comps = comps

    @property
    def holds(self):
        """Gets the holds of this EventsCapacitiesEntityEventCategoriesInner.

        Number of *holds* in the category. <span class=\"definition\">Holds</span> are seats/places that are not in sale at the date of the capacity, but will eventually be later.

        :return: The holds of this EventsCapacitiesEntityEventCategoriesInner.
        :rtype: int
        """
        return self._holds

    @holds.setter
    def holds(self, holds):
        """Sets the holds of this EventsCapacitiesEntityEventCategoriesInner.

        Number of *holds* in the category. <span class=\"definition\">Holds</span> are seats/places that are not in sale at the date of the capacity, but will eventually be later.

        :param holds: The holds of this EventsCapacitiesEntityEventCategoriesInner.
        :type holds: int
        """
        if holds is None:
            raise ValueError("Invalid value for `holds`, must not be `None`")

        self._holds = holds

    @property
    def id(self):
        """Gets the id of this EventsCapacitiesEntityEventCategoriesInner.

        Unique ID of the event category.

        :return: The id of this EventsCapacitiesEntityEventCategoriesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsCapacitiesEntityEventCategoriesInner.

        Unique ID of the event category.

        :param id: The id of this EventsCapacitiesEntityEventCategoriesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def kills(self):
        """Gets the kills of this EventsCapacitiesEntityEventCategoriesInner.

        Number of *kills* in the category. <span class=\"definition\">Kills</span> are seats/places that will not be sold for technical reasons.

        :return: The kills of this EventsCapacitiesEntityEventCategoriesInner.
        :rtype: int
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this EventsCapacitiesEntityEventCategoriesInner.

        Number of *kills* in the category. <span class=\"definition\">Kills</span> are seats/places that will not be sold for technical reasons.

        :param kills: The kills of this EventsCapacitiesEntityEventCategoriesInner.
        :type kills: int
        """
        if kills is None:
            raise ValueError("Invalid value for `kills`, must not be `None`")

        self._kills = kills

    @property
    def sellable_capacity(self):
        """Gets the sellable_capacity of this EventsCapacitiesEntityEventCategoriesInner.

        Number of sellable seats/places in the category. This is calculated by the formula: `total_capacity - kills - comps - holds`.

        :return: The sellable_capacity of this EventsCapacitiesEntityEventCategoriesInner.
        :rtype: int
        """
        return self._sellable_capacity

    @sellable_capacity.setter
    def sellable_capacity(self, sellable_capacity):
        """Sets the sellable_capacity of this EventsCapacitiesEntityEventCategoriesInner.

        Number of sellable seats/places in the category. This is calculated by the formula: `total_capacity - kills - comps - holds`.

        :param sellable_capacity: The sellable_capacity of this EventsCapacitiesEntityEventCategoriesInner.
        :type sellable_capacity: int
        """
        if sellable_capacity is None:
            raise ValueError("Invalid value for `sellable_capacity`, must not be `None`")

        self._sellable_capacity = sellable_capacity

    @property
    def total_capacity(self):
        """Gets the total_capacity of this EventsCapacitiesEntityEventCategoriesInner.

        Total number of seats/places in the category.

        :return: The total_capacity of this EventsCapacitiesEntityEventCategoriesInner.
        :rtype: int
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this EventsCapacitiesEntityEventCategoriesInner.

        Total number of seats/places in the category.

        :param total_capacity: The total_capacity of this EventsCapacitiesEntityEventCategoriesInner.
        :type total_capacity: int
        """
        if total_capacity is None:
            raise ValueError("Invalid value for `total_capacity`, must not be `None`")

        self._total_capacity = total_capacity
