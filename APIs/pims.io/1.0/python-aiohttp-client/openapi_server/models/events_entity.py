# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.events_entity_contract import EventsEntityContract
from openapi_server.models.events_entity_input_type import EventsEntityInputType
from openapi_server.models.venues_entity import VenuesEntity
from openapi_server import util


class EventsEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, break_even: int=None, cancellation_date: date=None, contract: EventsEntityContract=None, costing_capacity: int=None, creation_timestamp: int=None, currency: str=None, datetime: str=None, free: bool=None, general_sales_date: date=None, id: int=None, input_type: EventsEntityInputType=None, label: str=None, last_update_timestamp: int=None, max_capacity: int=None, presales_date: date=None, series_id: int=None, sold_out_date: date=None, venue: VenuesEntity=None):
        """EventsEntity - a model defined in OpenAPI

        :param break_even: The break_even of this EventsEntity.
        :param cancellation_date: The cancellation_date of this EventsEntity.
        :param contract: The contract of this EventsEntity.
        :param costing_capacity: The costing_capacity of this EventsEntity.
        :param creation_timestamp: The creation_timestamp of this EventsEntity.
        :param currency: The currency of this EventsEntity.
        :param datetime: The datetime of this EventsEntity.
        :param free: The free of this EventsEntity.
        :param general_sales_date: The general_sales_date of this EventsEntity.
        :param id: The id of this EventsEntity.
        :param input_type: The input_type of this EventsEntity.
        :param label: The label of this EventsEntity.
        :param last_update_timestamp: The last_update_timestamp of this EventsEntity.
        :param max_capacity: The max_capacity of this EventsEntity.
        :param presales_date: The presales_date of this EventsEntity.
        :param series_id: The series_id of this EventsEntity.
        :param sold_out_date: The sold_out_date of this EventsEntity.
        :param venue: The venue of this EventsEntity.
        """
        self.openapi_types = {
            'break_even': int,
            'cancellation_date': date,
            'contract': EventsEntityContract,
            'costing_capacity': int,
            'creation_timestamp': int,
            'currency': str,
            'datetime': str,
            'free': bool,
            'general_sales_date': date,
            'id': int,
            'input_type': EventsEntityInputType,
            'label': str,
            'last_update_timestamp': int,
            'max_capacity': int,
            'presales_date': date,
            'series_id': int,
            'sold_out_date': date,
            'venue': VenuesEntity
        }

        self.attribute_map = {
            'break_even': 'break_even',
            'cancellation_date': 'cancellation_date',
            'contract': 'contract',
            'costing_capacity': 'costing_capacity',
            'creation_timestamp': 'creation_timestamp',
            'currency': 'currency',
            'datetime': 'datetime',
            'free': 'free',
            'general_sales_date': 'general_sales_date',
            'id': 'id',
            'input_type': 'input_type',
            'label': 'label',
            'last_update_timestamp': 'last_update_timestamp',
            'max_capacity': 'max_capacity',
            'presales_date': 'presales_date',
            'series_id': 'series_id',
            'sold_out_date': 'sold_out_date',
            'venue': 'venue'
        }

        self._break_even = break_even
        self._cancellation_date = cancellation_date
        self._contract = contract
        self._costing_capacity = costing_capacity
        self._creation_timestamp = creation_timestamp
        self._currency = currency
        self._datetime = datetime
        self._free = free
        self._general_sales_date = general_sales_date
        self._id = id
        self._input_type = input_type
        self._label = label
        self._last_update_timestamp = last_update_timestamp
        self._max_capacity = max_capacity
        self._presales_date = presales_date
        self._series_id = series_id
        self._sold_out_date = sold_out_date
        self._venue = venue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsEntity of this EventsEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def break_even(self):
        """Gets the break_even of this EventsEntity.

        Value of the break-even for the event.

        :return: The break_even of this EventsEntity.
        :rtype: int
        """
        return self._break_even

    @break_even.setter
    def break_even(self, break_even):
        """Sets the break_even of this EventsEntity.

        Value of the break-even for the event.

        :param break_even: The break_even of this EventsEntity.
        :type break_even: int
        """
        if break_even is not None and break_even < 0:
            raise ValueError("Invalid value for `break_even`, must be a value greater than or equal to `0`")

        self._break_even = break_even

    @property
    def cancellation_date(self):
        """Gets the cancellation_date of this EventsEntity.

        Date the event was canceled.

        :return: The cancellation_date of this EventsEntity.
        :rtype: date
        """
        return self._cancellation_date

    @cancellation_date.setter
    def cancellation_date(self, cancellation_date):
        """Sets the cancellation_date of this EventsEntity.

        Date the event was canceled.

        :param cancellation_date: The cancellation_date of this EventsEntity.
        :type cancellation_date: date
        """

        self._cancellation_date = cancellation_date

    @property
    def contract(self):
        """Gets the contract of this EventsEntity.


        :return: The contract of this EventsEntity.
        :rtype: EventsEntityContract
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this EventsEntity.


        :param contract: The contract of this EventsEntity.
        :type contract: EventsEntityContract
        """
        if contract is None:
            raise ValueError("Invalid value for `contract`, must not be `None`")

        self._contract = contract

    @property
    def costing_capacity(self):
        """Gets the costing_capacity of this EventsEntity.

        Costing capacity of the event.

        :return: The costing_capacity of this EventsEntity.
        :rtype: int
        """
        return self._costing_capacity

    @costing_capacity.setter
    def costing_capacity(self, costing_capacity):
        """Sets the costing_capacity of this EventsEntity.

        Costing capacity of the event.

        :param costing_capacity: The costing_capacity of this EventsEntity.
        :type costing_capacity: int
        """
        if costing_capacity is not None and costing_capacity < 0:
            raise ValueError("Invalid value for `costing_capacity`, must be a value greater than or equal to `0`")

        self._costing_capacity = costing_capacity

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this EventsEntity.

        Timestamp for when the venue was created in the customer's database.

        :return: The creation_timestamp of this EventsEntity.
        :rtype: int
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this EventsEntity.

        Timestamp for when the venue was created in the customer's database.

        :param creation_timestamp: The creation_timestamp of this EventsEntity.
        :type creation_timestamp: int
        """
        if creation_timestamp is None:
            raise ValueError("Invalid value for `creation_timestamp`, must not be `None`")

        self._creation_timestamp = creation_timestamp

    @property
    def currency(self):
        """Gets the currency of this EventsEntity.

        Currency of the prices.

        :return: The currency of this EventsEntity.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EventsEntity.

        Currency of the prices.

        :param currency: The currency of this EventsEntity.
        :type currency: str
        """

        self._currency = currency

    @property
    def datetime(self):
        """Gets the datetime of this EventsEntity.

        Datetime of the event (relative to the timezone of the venue).

        :return: The datetime of this EventsEntity.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this EventsEntity.

        Datetime of the event (relative to the timezone of the venue).

        :param datetime: The datetime of this EventsEntity.
        :type datetime: str
        """
        if datetime is None:
            raise ValueError("Invalid value for `datetime`, must not be `None`")

        self._datetime = datetime

    @property
    def free(self):
        """Gets the free of this EventsEntity.

        Whether this event is free or not.

        :return: The free of this EventsEntity.
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this EventsEntity.

        Whether this event is free or not.

        :param free: The free of this EventsEntity.
        :type free: bool
        """
        if free is None:
            raise ValueError("Invalid value for `free`, must not be `None`")

        self._free = free

    @property
    def general_sales_date(self):
        """Gets the general_sales_date of this EventsEntity.

        Date the event went on general sales (relative to the timezone of the venue).

        :return: The general_sales_date of this EventsEntity.
        :rtype: date
        """
        return self._general_sales_date

    @general_sales_date.setter
    def general_sales_date(self, general_sales_date):
        """Sets the general_sales_date of this EventsEntity.

        Date the event went on general sales (relative to the timezone of the venue).

        :param general_sales_date: The general_sales_date of this EventsEntity.
        :type general_sales_date: date
        """

        self._general_sales_date = general_sales_date

    @property
    def id(self):
        """Gets the id of this EventsEntity.

        Unique ID of the event.

        :return: The id of this EventsEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsEntity.

        Unique ID of the event.

        :param id: The id of this EventsEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_type(self):
        """Gets the input_type of this EventsEntity.


        :return: The input_type of this EventsEntity.
        :rtype: EventsEntityInputType
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this EventsEntity.


        :param input_type: The input_type of this EventsEntity.
        :type input_type: EventsEntityInputType
        """
        if input_type is None:
            raise ValueError("Invalid value for `input_type`, must not be `None`")

        self._input_type = input_type

    @property
    def label(self):
        """Gets the label of this EventsEntity.

        Label of the event.

        :return: The label of this EventsEntity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EventsEntity.

        Label of the event.

        :param label: The label of this EventsEntity.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this EventsEntity.

        Timestamp for when the venue was last updated in the customer's database.

        :return: The last_update_timestamp of this EventsEntity.
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this EventsEntity.

        Timestamp for when the venue was last updated in the customer's database.

        :param last_update_timestamp: The last_update_timestamp of this EventsEntity.
        :type last_update_timestamp: int
        """
        if last_update_timestamp is None:
            raise ValueError("Invalid value for `last_update_timestamp`, must not be `None`")

        self._last_update_timestamp = last_update_timestamp

    @property
    def max_capacity(self):
        """Gets the max_capacity of this EventsEntity.

        Maximum capacity for the venue in which the event occurs.

        :return: The max_capacity of this EventsEntity.
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this EventsEntity.

        Maximum capacity for the venue in which the event occurs.

        :param max_capacity: The max_capacity of this EventsEntity.
        :type max_capacity: int
        """
        if max_capacity is not None and max_capacity < 0:
            raise ValueError("Invalid value for `max_capacity`, must be a value greater than or equal to `0`")

        self._max_capacity = max_capacity

    @property
    def presales_date(self):
        """Gets the presales_date of this EventsEntity.

        Date the event went on presales (relative to the timezone of the venue).

        :return: The presales_date of this EventsEntity.
        :rtype: date
        """
        return self._presales_date

    @presales_date.setter
    def presales_date(self, presales_date):
        """Sets the presales_date of this EventsEntity.

        Date the event went on presales (relative to the timezone of the venue).

        :param presales_date: The presales_date of this EventsEntity.
        :type presales_date: date
        """

        self._presales_date = presales_date

    @property
    def series_id(self):
        """Gets the series_id of this EventsEntity.

        ID of the series the event belongs to.

        :return: The series_id of this EventsEntity.
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this EventsEntity.

        ID of the series the event belongs to.

        :param series_id: The series_id of this EventsEntity.
        :type series_id: int
        """
        if series_id is None:
            raise ValueError("Invalid value for `series_id`, must not be `None`")

        self._series_id = series_id

    @property
    def sold_out_date(self):
        """Gets the sold_out_date of this EventsEntity.

        Date the event was sold out.

        :return: The sold_out_date of this EventsEntity.
        :rtype: date
        """
        return self._sold_out_date

    @sold_out_date.setter
    def sold_out_date(self, sold_out_date):
        """Sets the sold_out_date of this EventsEntity.

        Date the event was sold out.

        :param sold_out_date: The sold_out_date of this EventsEntity.
        :type sold_out_date: date
        """

        self._sold_out_date = sold_out_date

    @property
    def venue(self):
        """Gets the venue of this EventsEntity.


        :return: The venue of this EventsEntity.
        :rtype: VenuesEntity
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this EventsEntity.


        :param venue: The venue of this EventsEntity.
        :type venue: VenuesEntity
        """
        if venue is None:
            raise ValueError("Invalid value for `venue`, must not be `None`")

        self._venue = venue
