# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.promotions_entity_cost_state import PromotionsEntityCostState
from openapi_server.models.promotions_entity_cost_type import PromotionsEntityCostType
from openapi_server import util


class PromotionsEntityCost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, exchange: str=None, quantity: float=None, state: PromotionsEntityCostState=None, type: PromotionsEntityCostType=None, unit_cost: float=None, valorized_quantity: float=None, valorized_unit_cost: float=None):
        """PromotionsEntityCost - a model defined in OpenAPI

        :param currency: The currency of this PromotionsEntityCost.
        :param exchange: The exchange of this PromotionsEntityCost.
        :param quantity: The quantity of this PromotionsEntityCost.
        :param state: The state of this PromotionsEntityCost.
        :param type: The type of this PromotionsEntityCost.
        :param unit_cost: The unit_cost of this PromotionsEntityCost.
        :param valorized_quantity: The valorized_quantity of this PromotionsEntityCost.
        :param valorized_unit_cost: The valorized_unit_cost of this PromotionsEntityCost.
        """
        self.openapi_types = {
            'currency': str,
            'exchange': str,
            'quantity': float,
            'state': PromotionsEntityCostState,
            'type': PromotionsEntityCostType,
            'unit_cost': float,
            'valorized_quantity': float,
            'valorized_unit_cost': float
        }

        self.attribute_map = {
            'currency': 'currency',
            'exchange': 'exchange',
            'quantity': 'quantity',
            'state': 'state',
            'type': 'type',
            'unit_cost': 'unit_cost',
            'valorized_quantity': 'valorized_quantity',
            'valorized_unit_cost': 'valorized_unit_cost'
        }

        self._currency = currency
        self._exchange = exchange
        self._quantity = quantity
        self._state = state
        self._type = type
        self._unit_cost = unit_cost
        self._valorized_quantity = valorized_quantity
        self._valorized_unit_cost = valorized_unit_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionsEntityCost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionsEntity_cost of this PromotionsEntityCost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this PromotionsEntityCost.

        Currency of the unit_cost (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO 4212 alphabetic code</a>).

        :return: The currency of this PromotionsEntityCost.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PromotionsEntityCost.

        Currency of the unit_cost (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO 4212 alphabetic code</a>).

        :param currency: The currency of this PromotionsEntityCost.
        :type currency: str
        """

        self._currency = currency

    @property
    def exchange(self):
        """Gets the exchange of this PromotionsEntityCost.

        What was offered in exchange of the promotion.

        :return: The exchange of this PromotionsEntityCost.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this PromotionsEntityCost.

        What was offered in exchange of the promotion.

        :param exchange: The exchange of this PromotionsEntityCost.
        :type exchange: str
        """

        self._exchange = exchange

    @property
    def quantity(self):
        """Gets the quantity of this PromotionsEntityCost.

        Quantity of the promotion (see unit_cost).

        :return: The quantity of this PromotionsEntityCost.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PromotionsEntityCost.

        Quantity of the promotion (see unit_cost).

        :param quantity: The quantity of this PromotionsEntityCost.
        :type quantity: float
        """
        if quantity is not None and quantity < 0:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")

        self._quantity = quantity

    @property
    def state(self):
        """Gets the state of this PromotionsEntityCost.


        :return: The state of this PromotionsEntityCost.
        :rtype: PromotionsEntityCostState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PromotionsEntityCost.


        :param state: The state of this PromotionsEntityCost.
        :type state: PromotionsEntityCostState
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this PromotionsEntityCost.


        :return: The type of this PromotionsEntityCost.
        :rtype: PromotionsEntityCostType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PromotionsEntityCost.


        :param type: The type of this PromotionsEntityCost.
        :type type: PromotionsEntityCostType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def unit_cost(self):
        """Gets the unit_cost of this PromotionsEntityCost.

        Unit cost of the promotion. The total cost of the promotion can be calculated with: quantity × unit_cost.

        :return: The unit_cost of this PromotionsEntityCost.
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this PromotionsEntityCost.

        Unit cost of the promotion. The total cost of the promotion can be calculated with: quantity × unit_cost.

        :param unit_cost: The unit_cost of this PromotionsEntityCost.
        :type unit_cost: float
        """
        if unit_cost is not None and unit_cost < 0:
            raise ValueError("Invalid value for `unit_cost`, must be a value greater than or equal to `0`")

        self._unit_cost = unit_cost

    @property
    def valorized_quantity(self):
        """Gets the valorized_quantity of this PromotionsEntityCost.

        Valorized quantity of the promotion (see valorized_unit_cost). *This field may be omitted according to the customer configuration.*

        :return: The valorized_quantity of this PromotionsEntityCost.
        :rtype: float
        """
        return self._valorized_quantity

    @valorized_quantity.setter
    def valorized_quantity(self, valorized_quantity):
        """Sets the valorized_quantity of this PromotionsEntityCost.

        Valorized quantity of the promotion (see valorized_unit_cost). *This field may be omitted according to the customer configuration.*

        :param valorized_quantity: The valorized_quantity of this PromotionsEntityCost.
        :type valorized_quantity: float
        """
        if valorized_quantity is not None and valorized_quantity < 0:
            raise ValueError("Invalid value for `valorized_quantity`, must be a value greater than or equal to `0`")

        self._valorized_quantity = valorized_quantity

    @property
    def valorized_unit_cost(self):
        """Gets the valorized_unit_cost of this PromotionsEntityCost.

        Valorized unit cost of the promotion. The total valorized cost of the promotion can be calculated with: valorized_quantity × valorized_unit_cost. *This field may be omitted according to the customer configuration.*

        :return: The valorized_unit_cost of this PromotionsEntityCost.
        :rtype: float
        """
        return self._valorized_unit_cost

    @valorized_unit_cost.setter
    def valorized_unit_cost(self, valorized_unit_cost):
        """Sets the valorized_unit_cost of this PromotionsEntityCost.

        Valorized unit cost of the promotion. The total valorized cost of the promotion can be calculated with: valorized_quantity × valorized_unit_cost. *This field may be omitted according to the customer configuration.*

        :param valorized_unit_cost: The valorized_unit_cost of this PromotionsEntityCost.
        :type valorized_unit_cost: float
        """
        if valorized_unit_cost is not None and valorized_unit_cost < 0:
            raise ValueError("Invalid value for `valorized_unit_cost`, must be a value greater than or equal to `0`")

        self._valorized_unit_cost = valorized_unit_cost
