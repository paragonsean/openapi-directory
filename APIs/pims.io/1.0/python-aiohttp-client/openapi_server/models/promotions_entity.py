# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.promotions_entity_applied_to_inner import PromotionsEntityAppliedToInner
from openapi_server.models.promotions_entity_cost import PromotionsEntityCost
from openapi_server.models.promotions_entity_supplier import PromotionsEntitySupplier
from openapi_server.models.promotions_entity_type import PromotionsEntityType
from openapi_server import util


class PromotionsEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_to: List[PromotionsEntityAppliedToInner]=None, comments: str=None, cost: PromotionsEntityCost=None, end_date: date=None, file: str=None, id: int=None, label: str=None, start_date: date=None, supplier: PromotionsEntitySupplier=None, type: PromotionsEntityType=None):
        """PromotionsEntity - a model defined in OpenAPI

        :param applied_to: The applied_to of this PromotionsEntity.
        :param comments: The comments of this PromotionsEntity.
        :param cost: The cost of this PromotionsEntity.
        :param end_date: The end_date of this PromotionsEntity.
        :param file: The file of this PromotionsEntity.
        :param id: The id of this PromotionsEntity.
        :param label: The label of this PromotionsEntity.
        :param start_date: The start_date of this PromotionsEntity.
        :param supplier: The supplier of this PromotionsEntity.
        :param type: The type of this PromotionsEntity.
        """
        self.openapi_types = {
            'applied_to': List[PromotionsEntityAppliedToInner],
            'comments': str,
            'cost': PromotionsEntityCost,
            'end_date': date,
            'file': str,
            'id': int,
            'label': str,
            'start_date': date,
            'supplier': PromotionsEntitySupplier,
            'type': PromotionsEntityType
        }

        self.attribute_map = {
            'applied_to': 'applied_to',
            'comments': 'comments',
            'cost': 'cost',
            'end_date': 'end_date',
            'file': 'file',
            'id': 'id',
            'label': 'label',
            'start_date': 'start_date',
            'supplier': 'supplier',
            'type': 'type'
        }

        self._applied_to = applied_to
        self._comments = comments
        self._cost = cost
        self._end_date = end_date
        self._file = file
        self._id = id
        self._label = label
        self._start_date = start_date
        self._supplier = supplier
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionsEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionsEntity of this PromotionsEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_to(self):
        """Gets the applied_to of this PromotionsEntity.

        List of events and/or series where the promotion is applied. A promotion can be applied on several events, and its costs can be split between those events.

        :return: The applied_to of this PromotionsEntity.
        :rtype: List[PromotionsEntityAppliedToInner]
        """
        return self._applied_to

    @applied_to.setter
    def applied_to(self, applied_to):
        """Sets the applied_to of this PromotionsEntity.

        List of events and/or series where the promotion is applied. A promotion can be applied on several events, and its costs can be split between those events.

        :param applied_to: The applied_to of this PromotionsEntity.
        :type applied_to: List[PromotionsEntityAppliedToInner]
        """
        if applied_to is None:
            raise ValueError("Invalid value for `applied_to`, must not be `None`")

        self._applied_to = applied_to

    @property
    def comments(self):
        """Gets the comments of this PromotionsEntity.

        Comments on the promotion.

        :return: The comments of this PromotionsEntity.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PromotionsEntity.

        Comments on the promotion.

        :param comments: The comments of this PromotionsEntity.
        :type comments: str
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def cost(self):
        """Gets the cost of this PromotionsEntity.


        :return: The cost of this PromotionsEntity.
        :rtype: PromotionsEntityCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this PromotionsEntity.


        :param cost: The cost of this PromotionsEntity.
        :type cost: PromotionsEntityCost
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def end_date(self):
        """Gets the end_date of this PromotionsEntity.

        Date the promotion ends. (If null, has the same value as start_date.)

        :return: The end_date of this PromotionsEntity.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PromotionsEntity.

        Date the promotion ends. (If null, has the same value as start_date.)

        :param end_date: The end_date of this PromotionsEntity.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def file(self):
        """Gets the file of this PromotionsEntity.

        File associated to the promotion.

        :return: The file of this PromotionsEntity.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this PromotionsEntity.

        File associated to the promotion.

        :param file: The file of this PromotionsEntity.
        :type file: str
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this PromotionsEntity.

        Unique ID of the promotion.

        :return: The id of this PromotionsEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PromotionsEntity.

        Unique ID of the promotion.

        :param id: The id of this PromotionsEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this PromotionsEntity.

        Label of the promotion.

        :return: The label of this PromotionsEntity.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PromotionsEntity.

        Label of the promotion.

        :param label: The label of this PromotionsEntity.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def start_date(self):
        """Gets the start_date of this PromotionsEntity.

        Date the promotion begins.

        :return: The start_date of this PromotionsEntity.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PromotionsEntity.

        Date the promotion begins.

        :param start_date: The start_date of this PromotionsEntity.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def supplier(self):
        """Gets the supplier of this PromotionsEntity.


        :return: The supplier of this PromotionsEntity.
        :rtype: PromotionsEntitySupplier
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this PromotionsEntity.


        :param supplier: The supplier of this PromotionsEntity.
        :type supplier: PromotionsEntitySupplier
        """
        if supplier is None:
            raise ValueError("Invalid value for `supplier`, must not be `None`")

        self._supplier = supplier

    @property
    def type(self):
        """Gets the type of this PromotionsEntity.


        :return: The type of this PromotionsEntity.
        :rtype: PromotionsEntityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PromotionsEntity.


        :param type: The type of this PromotionsEntity.
        :type type: PromotionsEntityType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
