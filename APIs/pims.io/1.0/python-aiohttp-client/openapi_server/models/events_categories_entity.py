# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.categories_entity import CategoriesEntity
from openapi_server.models.events_categories_entity_event_price_ranges_inner import EventsCategoriesEntityEventPriceRangesInner
from openapi_server import util


class EventsCategoriesEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: CategoriesEntity=None, event_price_ranges: List[EventsCategoriesEntityEventPriceRangesInner]=None, id: int=None, ignored: bool=None):
        """EventsCategoriesEntity - a model defined in OpenAPI

        :param category: The category of this EventsCategoriesEntity.
        :param event_price_ranges: The event_price_ranges of this EventsCategoriesEntity.
        :param id: The id of this EventsCategoriesEntity.
        :param ignored: The ignored of this EventsCategoriesEntity.
        """
        self.openapi_types = {
            'category': CategoriesEntity,
            'event_price_ranges': List[EventsCategoriesEntityEventPriceRangesInner],
            'id': int,
            'ignored': bool
        }

        self.attribute_map = {
            'category': 'category',
            'event_price_ranges': 'event_price_ranges',
            'id': 'id',
            'ignored': 'ignored'
        }

        self._category = category
        self._event_price_ranges = event_price_ranges
        self._id = id
        self._ignored = ignored

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsCategoriesEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsCategoriesEntity of this EventsCategoriesEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EventsCategoriesEntity.


        :return: The category of this EventsCategoriesEntity.
        :rtype: CategoriesEntity
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventsCategoriesEntity.


        :param category: The category of this EventsCategoriesEntity.
        :type category: CategoriesEntity
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def event_price_ranges(self):
        """Gets the event_price_ranges of this EventsCategoriesEntity.

        Array of event price ranges.

        :return: The event_price_ranges of this EventsCategoriesEntity.
        :rtype: List[EventsCategoriesEntityEventPriceRangesInner]
        """
        return self._event_price_ranges

    @event_price_ranges.setter
    def event_price_ranges(self, event_price_ranges):
        """Sets the event_price_ranges of this EventsCategoriesEntity.

        Array of event price ranges.

        :param event_price_ranges: The event_price_ranges of this EventsCategoriesEntity.
        :type event_price_ranges: List[EventsCategoriesEntityEventPriceRangesInner]
        """

        self._event_price_ranges = event_price_ranges

    @property
    def id(self):
        """Gets the id of this EventsCategoriesEntity.

        Unique ID of the event category.

        :return: The id of this EventsCategoriesEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsCategoriesEntity.

        Unique ID of the event category.

        :param id: The id of this EventsCategoriesEntity.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ignored(self):
        """Gets the ignored of this EventsCategoriesEntity.

        Defines whether this event category is ignored or not.

        :return: The ignored of this EventsCategoriesEntity.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this EventsCategoriesEntity.

        Defines whether this event category is ignored or not.

        :param ignored: The ignored of this EventsCategoriesEntity.
        :type ignored: bool
        """
        if ignored is None:
            raise ValueError("Invalid value for `ignored`, must not be `None`")

        self._ignored = ignored
