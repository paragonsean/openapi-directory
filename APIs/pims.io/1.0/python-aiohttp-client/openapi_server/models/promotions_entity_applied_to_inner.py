# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PromotionsEntityAppliedToInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: int=None, quantity: float=None, series_id: int=None, unit_cost: float=None, valorized_quantity: float=None, valorized_unit_cost: float=None):
        """PromotionsEntityAppliedToInner - a model defined in OpenAPI

        :param event_id: The event_id of this PromotionsEntityAppliedToInner.
        :param quantity: The quantity of this PromotionsEntityAppliedToInner.
        :param series_id: The series_id of this PromotionsEntityAppliedToInner.
        :param unit_cost: The unit_cost of this PromotionsEntityAppliedToInner.
        :param valorized_quantity: The valorized_quantity of this PromotionsEntityAppliedToInner.
        :param valorized_unit_cost: The valorized_unit_cost of this PromotionsEntityAppliedToInner.
        """
        self.openapi_types = {
            'event_id': int,
            'quantity': float,
            'series_id': int,
            'unit_cost': float,
            'valorized_quantity': float,
            'valorized_unit_cost': float
        }

        self.attribute_map = {
            'event_id': 'event_id',
            'quantity': 'quantity',
            'series_id': 'series_id',
            'unit_cost': 'unit_cost',
            'valorized_quantity': 'valorized_quantity',
            'valorized_unit_cost': 'valorized_unit_cost'
        }

        self._event_id = event_id
        self._quantity = quantity
        self._series_id = series_id
        self._unit_cost = unit_cost
        self._valorized_quantity = valorized_quantity
        self._valorized_unit_cost = valorized_unit_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromotionsEntityAppliedToInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromotionsEntity_applied_to_inner of this PromotionsEntityAppliedToInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this PromotionsEntityAppliedToInner.

        ID of the event the promotion applies to. This property is exclusive with 'series_id': if defined, then 'series_id' will not be displayed.

        :return: The event_id of this PromotionsEntityAppliedToInner.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PromotionsEntityAppliedToInner.

        ID of the event the promotion applies to. This property is exclusive with 'series_id': if defined, then 'series_id' will not be displayed.

        :param event_id: The event_id of this PromotionsEntityAppliedToInner.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def quantity(self):
        """Gets the quantity of this PromotionsEntityAppliedToInner.

        Quantity share of the promotion devoted to this event/series.

        :return: The quantity of this PromotionsEntityAppliedToInner.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PromotionsEntityAppliedToInner.

        Quantity share of the promotion devoted to this event/series.

        :param quantity: The quantity of this PromotionsEntityAppliedToInner.
        :type quantity: float
        """
        if quantity is not None and quantity < 0:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")

        self._quantity = quantity

    @property
    def series_id(self):
        """Gets the series_id of this PromotionsEntityAppliedToInner.

        ID of the series the promotion applies to. This property is exclusive with 'event_id': if defined, then 'event_id' will not be displayed.

        :return: The series_id of this PromotionsEntityAppliedToInner.
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this PromotionsEntityAppliedToInner.

        ID of the series the promotion applies to. This property is exclusive with 'event_id': if defined, then 'event_id' will not be displayed.

        :param series_id: The series_id of this PromotionsEntityAppliedToInner.
        :type series_id: int
        """

        self._series_id = series_id

    @property
    def unit_cost(self):
        """Gets the unit_cost of this PromotionsEntityAppliedToInner.

        Unit cost share of the promotion devoted to this event/series. The total cost of the share can be calculated with: quantity × unit_cost. *This field may be omitted according to the customer configuration.*

        :return: The unit_cost of this PromotionsEntityAppliedToInner.
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this PromotionsEntityAppliedToInner.

        Unit cost share of the promotion devoted to this event/series. The total cost of the share can be calculated with: quantity × unit_cost. *This field may be omitted according to the customer configuration.*

        :param unit_cost: The unit_cost of this PromotionsEntityAppliedToInner.
        :type unit_cost: float
        """
        if unit_cost is not None and unit_cost < 0:
            raise ValueError("Invalid value for `unit_cost`, must be a value greater than or equal to `0`")

        self._unit_cost = unit_cost

    @property
    def valorized_quantity(self):
        """Gets the valorized_quantity of this PromotionsEntityAppliedToInner.

        Valorized quantity share of the promotion devoted to this event/series. *This field may be omitted according to the customer configuration.*

        :return: The valorized_quantity of this PromotionsEntityAppliedToInner.
        :rtype: float
        """
        return self._valorized_quantity

    @valorized_quantity.setter
    def valorized_quantity(self, valorized_quantity):
        """Sets the valorized_quantity of this PromotionsEntityAppliedToInner.

        Valorized quantity share of the promotion devoted to this event/series. *This field may be omitted according to the customer configuration.*

        :param valorized_quantity: The valorized_quantity of this PromotionsEntityAppliedToInner.
        :type valorized_quantity: float
        """
        if valorized_quantity is not None and valorized_quantity < 0:
            raise ValueError("Invalid value for `valorized_quantity`, must be a value greater than or equal to `0`")

        self._valorized_quantity = valorized_quantity

    @property
    def valorized_unit_cost(self):
        """Gets the valorized_unit_cost of this PromotionsEntityAppliedToInner.

        Valorized unit cost share of the promotion devoted to this event/series. The total valorized cost of the share can be calculated with: valorized_quantity × valorized_unit_cost.

        :return: The valorized_unit_cost of this PromotionsEntityAppliedToInner.
        :rtype: float
        """
        return self._valorized_unit_cost

    @valorized_unit_cost.setter
    def valorized_unit_cost(self, valorized_unit_cost):
        """Sets the valorized_unit_cost of this PromotionsEntityAppliedToInner.

        Valorized unit cost share of the promotion devoted to this event/series. The total valorized cost of the share can be calculated with: valorized_quantity × valorized_unit_cost.

        :param valorized_unit_cost: The valorized_unit_cost of this PromotionsEntityAppliedToInner.
        :type valorized_unit_cost: float
        """
        if valorized_unit_cost is not None and valorized_unit_cost < 0:
            raise ValueError("Invalid value for `valorized_unit_cost`, must be a value greater than or equal to `0`")

        self._valorized_unit_cost = valorized_unit_cost
