openapi: 3.0.1
info:
  contact:
    email: support@pims.io
  description: "\nHereafter is the documentation of the private API of [Pims: Pointages\
    \ Intelligents pour le Monde du Spectacle](https://pims.io). This API is designed\
    \ for 3rd-party softwares, editors and partners. Its main purpose is to give access\
    \ the core data of a Pims customer (i.e. events, ticket counts and promotions).\n\
    \n## Authentication\nThe API uses [basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication),\
    \ meaning you will need a username and password to get authorized.\n\nAs each\
    \ customer in Pims has its own domain (e.g. caramba.pims.io, gdp.pims.io...),\
    \ each credentials will be valid for one domain/customer only. If you need dedicated\
    \ credentials for one domain, please contact us. (In any case, we will need an\
    \ explicit agreement from the customer before we create these credentials.)\n\n\
    <div class=\"info\">\nTo make your life easy, you can try all endpoints with the\
    \ public credentials below, pointing to our [demo domain](https://demo.pims.io):\n\
    \  <ul>\n    <li>Base path: `https://demo.pims.io/api`</li>\n    <li>Username:\
    \ `demo`</li>\n    <li>Password: `q83792db2GCvgYVdKpU3yG3R`</li>\n  </ul>\n</div>\n\
    \n## Response format\nThe API returns JSON and matches the [HAL specification](http://stateless.co/hal_specification.html).\
    \ The `Content-Type` of each response will be `application/hal+json`, unless an\
    \ error occurs.\n\nPlease note that this documentation describes all responses\
    \ “as if” they were plain JSON. The specificities of HAL are ignored on purpose,\
    \ in order to remain compact and avoid repetition.\n<div style=\"-webkit-column-count:\
    \ 2; -moz-column-count: 2; column-count: 2; -webkit-column-rule: 1px dotted #e0e0e0;\
    \ -moz-column-rule: 1px dotted #e0e0e0; column-rule: 1px dotted #e0e0e0;\">\n\t\
    <div style=\"display: inline-block; width:100%;\">\n\t\t<strong>So when you read\
    \ in the doc:</strong>\n<pre><code class=\"lang-json\">{\n\t<span class=\"token\
    \ string\">\"id\"</span>: <span class=\"token number\">123</span>,\n\t<span class=\"\
    token string\">\"property1\"</span>: <span class=\"token string\">\"Lorem ipsum\"\
    </span>,\n\t<span class=\"token string\">\"object\"</span>: {\n\t\t<span class=\"\
    token string\">\"id\"</span>: <span class=\"token number\">456</span>,\n\t\t<span\
    \ class=\"token string\">\"property2\"</span>: <span class=\"token number\">7.89</span>\n\
    \t}\n}</code></pre>\n\t</div>\n\t<div style=\"display: inline-block; width:100%;\"\
    >\n\t\t<strong>... you'll get in the Real World®:</strong>\n<pre><code class=\"\
    lang-json\">{\n\t<span class=\"token string\">\"id\"</span>: <span class=\"token\
    \ number\">123</span>,\n\t<span class=\"token string\">\"property2\"</span>: <span\
    \ class=\"token string\">\"Lorem ipsum\"</span>,\n\t<span class=\"token string\"\
    >\"_embedded\"</span>: {\n\t\t<span class=\"token string\">\"object\"</span>:\
    \ {\n\t\t\t<span class=\"token string\">\"id\"</span>: <span class=\"token number\"\
    >456</span>,\n\t\t\t<span class=\"token string\">\"property2\"</span>: <span class=\"\
    token number\">7.89</span>,\n\t\t\t<span class=\"token string\">\"_links\"</span>:\
    \ {\n\t\t\t\t<span class=\"token string\">\"self\"</span>: {\n\t\t\t\t\t<span\
    \ class=\"token string\">\"href\"</span>: <span class=\"token string\">\"https://api.mydomain.com/other-item/456\"\
    </span>\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"token string\">\"_links\"\
    </span>: {\n\t\t<span class=\"token string\">\"self\"</span>: {\n\t\t\t<span class=\"\
    token string\">\"href\"</span>: <span class=\"token string\">\"https://api.mydomain.com/item/123\"\
    </span>\n\t\t}\n\t}\n}</code></pre>\n\t</div>\n</div>\n\n### Errors\nErrors return\
    \ JSON too and tries to match the [Problem Details for HTTP APIs specification](https://tools.ietf.org/html/rfc7807).\
    \ If it does not match this spec, that's either a bug or a compatibility issue.\
    \ Please contact us to solve the problem.\n\nThe `Content-Type` of errors will\
    \ be `application/problem+json`. The content will match the following JSON:\n\
    ```json\n{\n\t\"type\": \"https://tools.ietf.org/html/rfc2616#section-10\",\n\
    \    \"title\": \"Not Found\",\n\t\"status\": 404,\n    \"detail\": \"Entity not\
    \ found\"\n}\n```\n\n## Versioning\nThe API is fully versionned, using an URL-versioning\
    \ scheme: `https://demo.pims.io/api/v1/events`, `https://demo.pims.io/api/v2/events`,...\n\
    \nThe version part of the URL is optional, and will be completed with the last\
    \ stable version if omitted.\n\n## Pagination\nAll responses corresponding to\
    \ a collection of resources (e.g. `/venues` or `/series/:id/events`) are paginated.\
    \ When so, you will only get the first 25 resources you asked for.\n\nIf you need\
    \ to get more resources in one call, you can use the `page_size` query parameter.\
    \ E.g. `/venues?page_size=50` to get the 50 first venues.\n\nAlso note that with\
    \ HAL, the navigation in paginated responses is a piece of cake, as you can see\
    \ below:\n```json\n{\n\t\"_links\": {\n\t\t\"self\": {\n\t\t\t\"href\": \"https://demo.pims.io/api/v1/events?page=1\"\
    \n\t\t},\n\t\t\"first\": {\n\t\t\t\"href\": \"https://demo.pims.io/api/v1/events\"\
    \n\t\t},\n\t\t\"last\": {\n\t\t\t\"href\": \"https://demo.pims.io/api/v1/events?page=14\"\
    \n\t\t},\n\t\t\"next\": {\n\t\t\t\"href\": \"https://demo.pims.io/api/v1/events?page=2\"\
    \n\t\t}\n\t},\n\t\"_embedded\": {\n \t\t... // data content goes here\n\t},\n\t\
    \"page_count\": 14,\n\t\"page_size\": 25,\n\t\"total_items\": 331,\n\t\"page\"\
    : 1\n}\n```\n\n## Filtering and sorting\nEvery textual filter (e.g. `/events?label=U2`)\
    \ and/or sort (e.g. `/events?sort=label`) performed with the API uses UTF8_UNICODE_CI\
    \ collation, meaning it is:\n- Case insensitive: “Chloé” will be considered the\
    \ same as “CHLOÉ”;\n- Diacritic insensitive: “Chloé” will be considered the same\
    \ as “Chloe”.\n\nWhen performing a sort, it will always be *ascending* by default.\
    \ To make it *descending*, just use a minus sign (`-`) in front of the parameter\
    \ value (e.g. `/events?sort=-label`).\n\n## I18n\nIn responses, some labels can\
    \ be translated (e.g. promotion types, event input types, etc.). These translatable\
    \ labels are clearly indicated in the documentation below.\n\nBy default, they\
    \ will be displayed in English, but you can change this behaviour via the `Accept-Language`\
    \ header. E.g., use `fr` as a value for French.\n\n## PHP SDK\nWe provide a simple\
    \ yet convenient SDK for the PHP language, see [the Github page of the project](https://github.com/pimssas/pims-api-client-php).\n\
    \n## And now?\nGeneraly, you will start by [fetching one or more events](#tag/Events).\
    \ An <span class=\"definition\">event</span> can be anything that occurs in one\
    \ venue at one given date and time: a concert, a play, a match, a conference,\
    \ etc. Additionnally, you can explore the [series](#tag/Series): a <span class=\"\
    definition\">series</span> is just a group of events (e.g. a tour or a festival).\n\
    \nOnce you retrieved the events you were interested in, you can look for the sales\
    \ (<span class=\"definition\">ticket counts</span>):\n- Get a quick overview with\
    \ [`/events/:id/ticket-counts`](#operation/fetchAllTicketCounts)\n- Or get a full\
    \ insight by calling these endpoints:\n    1. [`/events/:id/categories`](#operation/fetchAllEventsCategories)\n\
    \    2. [`/events/:id/channels`](#operation/fetchAllEventsChannels)\n    3. [`/events/:id/ticket-counts/detailed`](#operation/fetchAllDetailedTicketCounts)\n\
    \nEventually, you may also want to fetch the [promotions](#tag/Promotions). A\
    \ <span class=\"definition\">promotion</span> can be anything meant to leverage\
    \ the sales: ads, marketing campaigns, buzz or news around the event, etc. A promotion\
    \ can be linked to any combination of events and/or series."
  license:
    name: Creative Commons CC BY-NC-ND 2.0
    url: https://creativecommons.org/licenses/by-nc-nd/2.0/
  title: Pims
  version: "1.0"
  x-apisguru-categories:
  - ecommerce
  x-logo:
    backgroundColor: '#FF9800'
    url: https://cdn.pims.io/api/logo_white.svg
  x-origin:
  - format: swagger
    url: https://cdn.pims.io/api/swagger.json
    version: "2.0"
  x-providerName: pims.io
servers:
- url: https://demo.pims.io/api/v1
security:
- Basic Auth: []
paths:
  /categories:
    get:
      operationId: fetch_all_categories
      parameters:
      - description: Find only the categories whose label/short label contains this
          value.
        in: query
        name: label
        schema:
          type: string
      - description: "If set to `false`, show only the categories which are not ignored.\
          \ If set to `true`, show all categories."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: Sort the categories in the corresponding order.
        in: query
        name: sort
        schema:
          default: order
          enum:
          - label
          - -label
          - order
          - -order
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: Accept-Language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/CategoriesEntity'
                type: array
          description: "Successful operation, gives an array of categories"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all categories
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
  /categories/{category_id}:
    get:
      operationId: fetch_one_category
      parameters:
      - description: ID of the targeted category.
        in: path
        name: category_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CategoriesEntity'
          description: "Successful operation, gives one category"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one category by ID
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
  /channels:
    get:
      operationId: fetch_all_channels
      parameters:
      - description: Find only the channels whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: "If set to `false`, show only the channels which are not ignored.\
          \ If set to `true`, show all channels."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: Sort the channels in the corresponding order.
        in: query
        name: sort
        schema:
          default: label
          enum:
          - label
          - -label
          - order
          - -order
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/ChannelsEntity'
                type: array
          description: "Successful operation, gives an array of channels"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all channels
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
  /channels/{channel_id}:
    get:
      operationId: fetch_one_channel
      parameters:
      - description: ID of the targeted channel.
        in: path
        name: channel_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ChannelsEntity'
          description: "Successful operation, gives one channel"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one channel by ID
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
  /events:
    get:
      operationId: fetch_all_events
      parameters:
      - description: Find only the events whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: Find only the events starting after this date.
        in: query
        name: from_datetime
        schema:
          format: date
          type: string
      - description: Find only the events starting before this date.
        in: query
        name: to_datetime
        schema:
          format: date
          type: string
      - description: Find only the events whose venue city (or metropolitan area)
          contains this value.
        in: query
        name: city
        schema:
          type: string
      - description: Sort the events in the corresponding order.
        in: query
        name: sort
        schema:
          default: label
          enum:
          - label
          - -label
          - datetime
          - -datetime
          - venue_label
          - -venue_label
          - city
          - -city
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/EventsEntity'
                type: array
          description: "Successful operation, gives an array of events"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all events
      tags:
      - Events
      x-openapi-router-controller: openapi_server.controllers.events_controller
  /events/{event_id}:
    get:
      operationId: fetch_one_event
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EventsEntity'
          description: "Successful operation, gives one event"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one event by ID
      tags:
      - Events
      x-openapi-router-controller: openapi_server.controllers.events_controller
  /events/{event_id}/capacities:
    get:
      operationId: fetch_all_events_capacities
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: "If set to `false`, show only the [event-]categories which are\
          \ not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: Sort the capacities in the corresponding order.
        in: query
        name: sort
        schema:
          default: date
          enum:
          - date
          - -date
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/EventsCapacitiesEntity'
                type: array
          description: "Successful operation, gives an array of events capacities"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all capacities for one event
      tags:
      - Capacities
      x-openapi-router-controller: openapi_server.controllers.capacities_controller
  /events/{event_id}/capacities/{capacity_id}:
    get:
      operationId: fetch_one_event_capacity
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: ID of the targeted capacity.
        in: path
        name: capacity_id
        required: true
        schema:
          format: int32
          type: integer
      - description: "If set to `false`, show only the [event-]categories which are\
          \ not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EventsCapacitiesEntity'
          description: "Successful operation, gives one event capacity"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one capacity by ID
      tags:
      - Capacities
      x-openapi-router-controller: openapi_server.controllers.capacities_controller
  /events/{event_id}/categories:
    get:
      operationId: fetch_all_events_categories
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: "If set to `false`, show only the [event-]categories/[event-]price\
          \ ranges which are not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/EventsCategoriesEntity'
                type: array
          description: "Successful operation, gives an array of events categories"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all categories for one event
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
  /events/{event_id}/categories/{category_id}:
    get:
      operationId: fetch_one_event_category
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: ID of the targeted event category.
        in: path
        name: category_id
        required: true
        schema:
          format: int32
          type: number
      - description: "If set to `false`, show only the embedded [event-]price ranges\
          \ which are not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EventsCategoriesEntity'
          description: "Successful operation, gives one event category"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one event category by ID
      tags:
      - Categories
      x-openapi-router-controller: openapi_server.controllers.categories_controller
  /events/{event_id}/channels:
    get:
      operationId: fetch_all_events_channels
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: "If set to `false`, show only the [event-]channels which are\
          \ not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/EventsChannelsEntity'
                type: array
          description: "Successful operation, gives an array of events channels"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all channels for one event
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
  /events/{event_id}/channels/{channel_id}:
    get:
      operationId: fetch_one_event_channel
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: ID of the targeted event channel.
        in: path
        name: channel_id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EventsChannelsEntity'
          description: "Successful operation, gives one event channel"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one event channel by ID
      tags:
      - Channels
      x-openapi-router-controller: openapi_server.controllers.channels_controller
  /events/{event_id}/promotions:
    get:
      operationId: fetch_all_events_promotions
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Find only the promotions whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: Find only the promotions starting after this date.
        in: query
        name: from_date
        schema:
          format: date
          type: string
      - description: Find only the promotions ending before this date.
        in: query
        name: to_date
        schema:
          format: date
          type: string
      - description: Find only the promotions whose type is equal to this value.
        in: query
        name: type
        schema:
          type: string
      - description: Find only the promotions whose family is equal to this value.
        in: query
        name: family
        schema:
          type: string
      - description: Sort the promotions in the corresponding order.
        in: query
        name: sort
        schema:
          default: date
          enum:
          - date
          - -date
          - total_cost
          - -total_cost
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/PromotionsEntity'
                type: array
          description: "Successful operation, gives an array of promotions"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all promotions for one event
      tags:
      - Promotions
      x-openapi-router-controller: openapi_server.controllers.promotions_controller
  /events/{event_id}/ticket-counts:
    get:
      operationId: fetch_all_ticket_counts
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Find only the ticket counts after this date.
        in: query
        name: from_date
        schema:
          format: date
          type: string
      - description: Find only the ticket counts before this date.
        in: query
        name: to_date
        schema:
          format: date
          type: string
      - description: "If set to `false`, show only the [event-]categories/[event-]price\
          \ ranges/[event]channels which are not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: "If set to `false`, show only the approved ticket counts. If\
          \ set to `true`, show all the ticket counts."
        in: query
        name: show_not_approved
        schema:
          default: false
          type: boolean
      - description: Sort the ticket counts in the corresponding order.
        in: query
        name: sort
        schema:
          default: date
          enum:
          - date
          - -date
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/TicketCountsEntity'
                type: array
          description: "Successful operation, gives an array of ticket counts"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all ticket counts for one event
      tags:
      - Counts
      x-openapi-router-controller: openapi_server.controllers.counts_controller
  /events/{event_id}/ticket-counts/detailed:
    get:
      operationId: fetch_all_detailed_ticket_counts
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Find only the ticket counts after this date.
        in: query
        name: from_date
        schema:
          format: date
          type: string
      - description: Find only the ticket counts before this date.
        in: query
        name: to_date
        schema:
          format: date
          type: string
      - description: "If set to `false`, show only the [event-]categories/[event-]price\
          \ ranges/[event]channels which are not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: "If set to `false`, show only the approved ticket counts. If\
          \ set to `true`, show all the ticket counts."
        in: query
        name: show_not_approved
        schema:
          default: false
          type: boolean
      - description: Sort the ticket counts in the corresponding order.
        in: query
        name: sort
        schema:
          default: date
          enum:
          - date
          - -date
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/TicketCountsDetailedEntity'
                type: array
          description: "Successful operation, gives an array of detailed ticket counts"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all detailed ticket counts for one event
      tags:
      - Counts
      x-openapi-router-controller: openapi_server.controllers.counts_controller
  /events/{event_id}/ticket-counts/detailed/{ticket_count_id}:
    get:
      operationId: fetch_one_detailed_ticket_count
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: ID of the targeted ticket count.
        in: path
        name: ticket_count_id
        required: true
        schema:
          format: int32
          type: integer
      - description: "If set to `false`, show only the [event-]categories/[event-]price\
          \ ranges/[event]channels which are not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/TicketCountsDetailedEntity'
          description: "Successful operation, gives one detailed ticket count"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one detailed ticket count by ID
      tags:
      - Counts
      x-openapi-router-controller: openapi_server.controllers.counts_controller
  /events/{event_id}/ticket-counts/{ticket_count_id}:
    get:
      operationId: fetch_one_ticket_count
      parameters:
      - description: ID of the targeted event.
        in: path
        name: event_id
        required: true
        schema:
          format: int32
          type: integer
      - description: ID of the targeted ticket count.
        in: path
        name: ticket_count_id
        required: true
        schema:
          format: int32
          type: integer
      - description: "If set to `false`, show only the [event-]categories/[event-]price\
          \ ranges/[event]channels which are not ignored. If set to `true`, show everything."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/TicketCountsEntity'
          description: "Successful operation, gives one ticket count"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one ticket count by ID
      tags:
      - Counts
      x-openapi-router-controller: openapi_server.controllers.counts_controller
  /price-ranges:
    get:
      operationId: fetch_all_price_ranges
      parameters:
      - description: Find only the price ranges whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: "If set to `false`, show only the price ranges which are not\
          \ ignored. If set to `true`, show all price ranges."
        in: query
        name: show_ignored
        schema:
          default: false
          type: boolean
      - description: Sort the price ranges in the corresponding order.
        in: query
        name: sort
        schema:
          default: label
          enum:
          - label
          - -label
          - order
          - -order
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/PriceRangesEntity'
                type: array
          description: "Successful operation, gives an array of price ranges"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all price ranges
      tags:
      - Price ranges
      x-openapi-router-controller: openapi_server.controllers.price_ranges_controller
  /price-ranges/{price_range_id}:
    get:
      operationId: fetch_one_price_range
      parameters:
      - description: ID of the targeted price range.
        in: path
        name: price_range_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/VenuesEntity'
          description: "Successful operation, gives one price range"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one price range by ID
      tags:
      - Price ranges
      x-openapi-router-controller: openapi_server.controllers.price_ranges_controller
  /promotions:
    get:
      operationId: fetch_all_promotions
      parameters:
      - description: Find only the promotions whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: Find only the promotions starting after this date.
        in: query
        name: from_date
        schema:
          format: date
          type: string
      - description: Find only the promotions ending before this date.
        in: query
        name: to_date
        schema:
          format: date
          type: string
      - description: Find only the promotions whose type is equal to this value.
        in: query
        name: type
        schema:
          type: string
      - description: Find only the promotions whose family is equal to this value.
        in: query
        name: family
        schema:
          type: string
      - description: Sort the promotions in the corresponding order.
        in: query
        name: sort
        schema:
          default: date
          enum:
          - date
          - -date
          - total_cost
          - -total_cost
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/PromotionsEntity'
                type: array
          description: "Successful operation, gives an array of promotions"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all promotions
      tags:
      - Promotions
      x-openapi-router-controller: openapi_server.controllers.promotions_controller
  /promotions/{promotion_id}:
    get:
      operationId: fetch_one_promotion
      parameters:
      - description: ID of the targeted promotion.
        in: path
        name: promotion_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PromotionsEntity'
          description: "Successful operation, gives one promotion"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one promotion by ID
      tags:
      - Promotions
      x-openapi-router-controller: openapi_server.controllers.promotions_controller
  /series:
    get:
      operationId: fetch_all_series
      parameters:
      - description: Find only the venues whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: Find only the series starting after this date.
        in: query
        name: from_date
        schema:
          format: date
          type: string
      - description: Find only the series ending before this date.
        in: query
        name: to_date
        schema:
          format: date
          type: string
      - description: Find only the series whose type is equal to this value.
        in: query
        name: type
        schema:
          enum:
          - TOU
          - LGS
          type: string
      - description: Sort the series in the corresponding order.
        in: query
        name: sort
        schema:
          default: first_date
          enum:
          - label
          - -label
          - first_date
          - -first_date
          - last_date
          - -last_date
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/SeriesEntity'
                type: array
          description: "Successful operation, gives an array of series"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all series
      tags:
      - Series
      x-openapi-router-controller: openapi_server.controllers.series_controller
  /series/{series_id}:
    get:
      operationId: fetch_one_series
      parameters:
      - description: ID of the targeted series.
        in: path
        name: series_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/SeriesEntity'
          description: "Successful operation, gives one series"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one series by ID
      tags:
      - Series
      x-openapi-router-controller: openapi_server.controllers.series_controller
  /series/{series_id}/events:
    get:
      operationId: fetch_all_series_events
      parameters:
      - description: ID of the targeted series.
        in: path
        name: series_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Find only the events starting after this date.
        in: query
        name: from_datetime
        schema:
          format: date
          type: string
      - description: Find only the events starting before this date.
        in: query
        name: to_datetime
        schema:
          format: date
          type: string
      - description: Find only the events whose venue city (or metropolitan area)
          contains this value.
        in: query
        name: city
        schema:
          type: string
      - description: Sort the events in the corresponding order.
        in: query
        name: sort
        schema:
          default: label
          enum:
          - label
          - -label
          - datetime
          - -datetime
          - venue_label
          - -venue_label
          - city
          - -city
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/EventsEntity'
                type: array
          description: "Successful operation, gives an array of events"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all events for one series
      tags:
      - Events
      x-openapi-router-controller: openapi_server.controllers.events_controller
  /series/{series_id}/promotions:
    get:
      operationId: fetch_all_series_promotions
      parameters:
      - description: ID of the targeted series.
        in: path
        name: series_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Find only the promotions whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: Find only the promotions starting after this date.
        in: query
        name: from_date
        schema:
          format: date
          type: string
      - description: Find only the promotions ending before this date.
        in: query
        name: to_date
        schema:
          format: date
          type: string
      - description: Find only the promotions whose type is equal to this value.
        in: query
        name: type
        schema:
          type: string
      - description: Find only the promotions whose family is equal to this value.
        in: query
        name: family
        schema:
          type: string
      - description: Sort the promotions in the corresponding order.
        in: query
        name: sort
        schema:
          default: date
          enum:
          - date
          - -date
          - total_cost
          - -total_cost
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/PromotionsEntity'
                type: array
          description: "Successful operation, gives an array of promotions"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all promotions for one series
      tags:
      - Promotions
      x-openapi-router-controller: openapi_server.controllers.promotions_controller
  /venues:
    get:
      operationId: fetch_all_venues
      parameters:
      - description: Find only the venues whose label contains this value.
        in: query
        name: label
        schema:
          type: string
      - description: Find only the venues whose city contains this value.
        in: query
        name: city
        schema:
          type: string
      - description: Find only the venues whose country_code is equal to this value.
        in: query
        name: country_code
        schema:
          type: string
      - description: Find only the venues whose type is equal to this value.
        in: query
        name: type
        schema:
          enum:
          - SAL
          - FES
          type: string
      - description: Sort the venues in the corresponding order.
        in: query
        name: sort
        schema:
          default: label
          enum:
          - label
          - -label
          - city
          - -city
          - country
          - -country
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/VenuesEntity'
                type: array
          description: "Successful operation, gives an array of venues"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all venues
      tags:
      - Venues
      x-openapi-router-controller: openapi_server.controllers.venues_controller
  /venues/{venue_id}:
    get:
      operationId: fetch_one_venue
      parameters:
      - description: ID of the targeted venue.
        in: path
        name: venue_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/VenuesEntity'
          description: "Successful operation, gives one venue"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "404":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Get one venue by ID
      tags:
      - Venues
      x-openapi-router-controller: openapi_server.controllers.venues_controller
  /venues/{venue_id}/events:
    get:
      operationId: fetch_all_venues_events
      parameters:
      - description: ID of the targeted venue.
        in: path
        name: venue_id
        required: true
        schema:
          format: int32
          type: integer
      - description: Find only the events starting after this date.
        in: query
        name: from_datetime
        schema:
          format: date
          type: string
      - description: Find only the events starting before this date.
        in: query
        name: to_datetime
        schema:
          format: date
          type: string
      - description: Find only the events whose venue city (or metropolitan area)
          contains this value.
        in: query
        name: city
        schema:
          type: string
      - description: Sort the events in the corresponding order.
        in: query
        name: sort
        schema:
          default: label
          enum:
          - label
          - -label
          - datetime
          - -datetime
          - venue_label
          - -venue_label
          - city
          - -city
          type: string
      - description: "Pagination size, i.e. maximum number of items to be displayed\
          \ in the response."
        in: query
        name: page_size
        schema:
          default: 25
          format: int32
          type: integer
      - description: Language used for the translatable labels.
        in: header
        name: accept_language
        schema:
          default: en
          enum:
          - de
          - en
          - fr
          type: string
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                items:
                  $ref: '#/components/schemas/EventsEntity'
                type: array
          description: "Successful operation, gives an array of events"
        "401":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error401'
          description: "Unauthorized, no authentication was made"
        "403":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: "Forbidden, the authentication is wrong"
        "422":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error422'
          description: Unprocessable Entity
        "500":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Unexpected error
      summary: Find all events for one venue
      tags:
      - Events
      x-openapi-router-controller: openapi_server.controllers.events_controller
components:
  parameters:
    header_Accept-Language:
      description: Language used for the translatable labels.
      in: header
      name: Accept-Language
      schema:
        default: en
        enum:
        - de
        - en
        - fr
        type: string
    path_event-id:
      description: ID of the targeted event.
      in: path
      name: event_id
      required: true
      schema:
        format: int32
        type: integer
    query_capacities_show-ignored:
      description: "If set to `false`, show only the [event-]categories which are\
        \ not ignored. If set to `true`, show everything."
      in: query
      name: show_ignored
      schema:
        default: false
        type: boolean
    query_events_city:
      description: Find only the events whose venue city (or metropolitan area) contains
        this value.
      in: query
      name: city
      schema:
        type: string
    query_events_from-datetime:
      description: Find only the events starting after this date.
      in: query
      name: from_datetime
      schema:
        format: date
        type: string
    query_events_label:
      description: Find only the events whose label contains this value.
      in: query
      name: label
      schema:
        type: string
    query_events_sort:
      description: Sort the events in the corresponding order.
      in: query
      name: sort
      schema:
        default: label
        enum:
        - label
        - -label
        - datetime
        - -datetime
        - venue_label
        - -venue_label
        - city
        - -city
        type: string
    query_events_to-datetime:
      description: Find only the events starting before this date.
      in: query
      name: to_datetime
      schema:
        format: date
        type: string
    query_page-size:
      description: "Pagination size, i.e. maximum number of items to be displayed\
        \ in the response."
      in: query
      name: page_size
      schema:
        default: 25
        format: int32
        type: integer
    query_promotions_family:
      description: Find only the promotions whose family is equal to this value.
      in: query
      name: family
      schema:
        type: string
    query_promotions_from-date:
      description: Find only the promotions starting after this date.
      in: query
      name: from_date
      schema:
        format: date
        type: string
    query_promotions_label:
      description: Find only the promotions whose label contains this value.
      in: query
      name: label
      schema:
        type: string
    query_promotions_sort:
      description: Sort the promotions in the corresponding order.
      in: query
      name: sort
      schema:
        default: date
        enum:
        - date
        - -date
        - total_cost
        - -total_cost
        type: string
    query_promotions_to-date:
      description: Find only the promotions ending before this date.
      in: query
      name: to_date
      schema:
        format: date
        type: string
    query_promotions_type:
      description: Find only the promotions whose type is equal to this value.
      in: query
      name: type
      schema:
        type: string
    query_ticket-counts_from-date:
      description: Find only the ticket counts after this date.
      in: query
      name: from_date
      schema:
        format: date
        type: string
    query_ticket-counts_show-ignored:
      description: "If set to `false`, show only the [event-]categories/[event-]price\
        \ ranges/[event]channels which are not ignored. If set to `true`, show everything."
      in: query
      name: show_ignored
      schema:
        default: false
        type: boolean
    query_ticket-counts_show-not-approved:
      description: "If set to `false`, show only the approved ticket counts. If set\
        \ to `true`, show all the ticket counts."
      in: query
      name: show_not_approved
      schema:
        default: false
        type: boolean
    query_ticket-counts_sort:
      description: Sort the ticket counts in the corresponding order.
      in: query
      name: sort
      schema:
        default: date
        enum:
        - date
        - -date
        type: string
    query_ticket-counts_to-date:
      description: Find only the ticket counts before this date.
      in: query
      name: to_date
      schema:
        format: date
        type: string
  responses:
    "401":
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error401'
      description: "Unauthorized, no authentication was made"
    "403":
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error403'
      description: "Forbidden, the authentication is wrong"
    "404":
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error404'
      description: Not Found
    "422":
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error422'
      description: Unprocessable Entity
    "500":
      content:
        application/hal+json:
          schema:
            $ref: '#/components/schemas/Error500'
      description: Unexpected error
    "200-events":
      content:
        application/hal+json:
          schema:
            items:
              $ref: '#/components/schemas/EventsEntity'
            type: array
      description: "Successful operation, gives an array of events"
    "200-promotions":
      content:
        application/hal+json:
          schema:
            items:
              $ref: '#/components/schemas/PromotionsEntity'
            type: array
      description: "Successful operation, gives an array of promotions"
  schemas:
    CategoriesEntity:
      properties:
        id:
          description: Unique ID of the category.
          example: 123
          format: int32
          title: id
          type: integer
        ignored:
          description: Defines whether this category is ignored or not.
          example: false
          title: ignored
          type: boolean
        label:
          description: Full label of the category.
          example: CATEGORY 1
          title: label
          type: string
        last_update_timestamp:
          description: Timestamp for when the category was last updated in the customer's
            database.
          example: 1516500001
          format: int64
          title: last_update_timestamp
          type: integer
        short_label:
          description: Short label of the category (generally less than 5 characters).
          example: CAT1
          nullable: true
          title: short_label
          type: string
      required:
      - id
      - ignored
      - label
      - last_update_timestamp
      - short_label
      title: Category
      type: object
    ChannelsEntity:
      properties:
        id:
          description: Unique ID of the channel.
          example: 123
          format: int32
          title: id
          type: integer
        ignored:
          description: Defines whether this channel is ignored or not.
          example: false
          title: ignored
          type: boolean
        label:
          description: Full label of the channel.
          example: TICKETMASTER
          title: label
          type: string
        last_update_timestamp:
          description: Timestamp for when the channel was last updated in the customer's
            database.
          example: 1516500001
          format: int64
          title: last_update_timestamp
          type: integer
        short_label:
          description: Short label of the channel (generally less than 5 characters).
          example: TKM
          nullable: true
          title: short_label
          type: string
      required:
      - id
      - ignored
      - label
      - last_update_timestamp
      - short_label
      title: Channel
      type: object
    Error401:
      properties:
        detail:
          description: Description of the error.
          example: Unauthorized
          title: detail
          type: string
        status:
          description: Status code of the error.
          example: 401
          format: int32
          title: status
          type: integer
        title:
          description: Message corresponding to the status code.
          example: Unauthorized
          title: title
          type: string
        type:
          description: Link to RFC 2616 about status codes definitions.
          example: https://tools.ietf.org/html/rfc2616#section-10
          title: type
          type: string
      required:
      - detail
      - status
      - title
      - type
      title: Error401
      type: object
    Error403:
      properties:
        detail:
          description: Description of the error.
          example: Forbidden
          title: detail
          type: string
        status:
          description: Status code of the error.
          example: 403
          format: int32
          title: status
          type: integer
        title:
          description: Message corresponding to the status code.
          example: Forbidden
          title: title
          type: string
        type:
          description: Link to RFC 2616 about status codes definitions.
          example: https://tools.ietf.org/html/rfc2616#section-10
          title: type
          type: string
      required:
      - detail
      - status
      - title
      - type
      title: Error403
      type: object
    Error404:
      properties:
        detail:
          description: Description of the error.
          example: Entity not found.
          title: detail
          type: string
        status:
          description: Status code of the error.
          example: 404
          format: int32
          title: status
          type: integer
        title:
          description: Message corresponding to the status code.
          example: Not Found
          title: title
          type: string
        type:
          description: Link to RFC 2616 about status codes definitions.
          example: https://tools.ietf.org/html/rfc2616#section-10
          title: type
          type: string
      required:
      - detail
      - status
      - title
      - type
      title: Error404
      type: object
    Error422:
      properties:
        detail:
          description: Description of the error.
          example: "Unknown date format, should be 'Y-m-d?H:i:s'"
          title: detail
          type: string
        status:
          description: Status code of the error.
          example: 422
          format: int32
          title: status
          type: integer
        title:
          description: Message corresponding to the status code.
          example: Unprocessable Entity
          title: title
          type: string
        type:
          description: Link to RFC 2616 about status codes definitions.
          example: https://tools.ietf.org/html/rfc2616#section-10
          title: type
          type: string
      required:
      - detail
      - status
      - title
      - type
      title: Error422
      type: object
    Error500:
      properties:
        detail:
          description: Description of the error.
          example: Internal Server Error
          title: detail
          type: string
        status:
          description: Status code of the error.
          example: 500
          format: int32
          title: status
          type: integer
        title:
          description: Message corresponding to the status code.
          example: Internal Server Error
          title: title
          type: string
        type:
          description: Link to RFC 2616 about status codes definitions.
          example: https://tools.ietf.org/html/rfc2616#section-10
          title: type
          type: string
      required:
      - detail
      - status
      - title
      - type
      title: Error500
      type: object
    EventsCapacitiesEntity:
      properties:
        date:
          description: Date from which the capacity is active.
          format: date
          title: date
          type: string
        event_categories:
          description: Array of categories with their detailed capacities.
          items:
            $ref: '#/components/schemas/EventsCapacitiesEntity_event_categories_inner'
          title: event_categories
          type: array
        id:
          description: Unique ID of the event capacity.
          format: int32
          title: id
          type: integer
      required:
      - date
      - id
      title: Event capacity
      type: object
    EventsCategoriesEntity:
      properties:
        category:
          $ref: '#/components/schemas/CategoriesEntity'
        event_price_ranges:
          description: Array of event price ranges.
          items:
            $ref: '#/components/schemas/EventsCategoriesEntity_event_price_ranges_inner'
          title: event_price_ranges
          type: array
        id:
          description: Unique ID of the event category.
          example: 12345
          format: int32
          title: id
          type: integer
        ignored:
          description: Defines whether this event category is ignored or not.
          example: false
          title: ignored
          type: boolean
      required:
      - category
      - id
      - ignored
      title: Event category
      type: object
    EventsChannelsEntity:
      properties:
        channel:
          $ref: '#/components/schemas/ChannelsEntity'
        id:
          description: Unique ID of the event channel.
          example: 12345
          format: int32
          title: id
          type: integer
        ignored:
          description: Defines whether this event channel is ignored or not.
          example: false
          title: ignored
          type: boolean
      required:
      - channel
      - id
      - ignored
      title: Event channel
      type: object
    EventsEntity:
      properties:
        break_even:
          description: Value of the break-even for the event.
          example: 1727
          format: int32
          minimum: 0
          title: break_even
          type: integer
        cancellation_date:
          description: Date the event was canceled.
          format: date
          title: cancellation_date
          type: string
        contract:
          $ref: '#/components/schemas/EventsEntity_contract'
        costing_capacity:
          description: Costing capacity of the event.
          example: 2074
          format: int32
          minimum: 0
          title: costing_capacity
          type: integer
        creation_timestamp:
          description: Timestamp for when the venue was created in the customer's
            database.
          example: 1496903403
          format: int64
          title: creation_timestamp
          type: integer
        currency:
          description: Currency of the prices.
          title: currency
          type: string
        datetime:
          description: Datetime of the event (relative to the timezone of the venue).
          example: 2018-01-11T20:00:00
          format: datetime
          title: datetime
          type: string
        free:
          description: Whether this event is free or not.
          title: free
          type: boolean
        general_sales_date:
          description: Date the event went on general sales (relative to the timezone
            of the venue).
          example: 2017-06-15
          format: date
          title: general_sales_date
          type: string
        id:
          description: Unique ID of the event.
          example: 2142
          format: int32
          title: id
          type: integer
        input_type:
          $ref: '#/components/schemas/EventsEntity_input_type'
        label:
          description: Label of the event.
          example: Alan Wilson
          title: label
          type: string
        last_update_timestamp:
          description: Timestamp for when the venue was last updated in the customer's
            database.
          example: 1516500001
          format: int64
          title: last_update_timestamp
          type: integer
        max_capacity:
          description: Maximum capacity for the venue in which the event occurs.
          example: 2100
          format: int32
          minimum: 0
          title: max_capacity
          type: integer
        presales_date:
          description: Date the event went on presales (relative to the timezone of
            the venue).
          example: 2017-06-14
          format: date
          title: presales_date
          type: string
        series_id:
          description: ID of the series the event belongs to.
          example: 263
          format: int32
          nullable: true
          title: series_id
          type: integer
        sold_out_date:
          description: Date the event was sold out.
          format: date
          title: sold_out_date
          type: string
        venue:
          $ref: '#/components/schemas/VenuesEntity'
      required:
      - contract
      - creation_timestamp
      - datetime
      - free
      - id
      - input_type
      - label
      - last_update_timestamp
      - series_id
      - venue
      title: Event
      type: object
    PriceRangesEntity:
      properties:
        id:
          description: Unique ID of the price range.
          example: 123
          format: int32
          title: id
          type: integer
        ignored:
          description: Defines whether this price range is ignored or not.
          example: false
          title: ignored
          type: boolean
        label:
          description: Full label of the price range.
          example: REDUCED PRICE
          title: label
          type: string
        last_update_timestamp:
          description: Timestamp for when the price range was last updated in the
            customer's database.
          example: 1516500001
          format: int64
          title: last_update_timestamp
          type: integer
        short_label:
          description: Short label of the price range (generally less than 5 characters).
          example: RED
          nullable: true
          title: short_label
          type: string
      required:
      - id
      - ignored
      - label
      - last_update_timestamp
      - short_label
      title: Price range
      type: object
    PromotionsEntity:
      properties:
        applied_to:
          description: "List of events and/or series where the promotion is applied.\
            \ A promotion can be applied on several events, and its costs can be split\
            \ between those events."
          items:
            $ref: '#/components/schemas/PromotionsEntity_applied_to_inner'
          title: applied_to
          type: array
        comments:
          description: Comments on the promotion.
          nullable: true
          title: comments
          type: string
        cost:
          $ref: '#/components/schemas/PromotionsEntity_cost'
        end_date:
          description: "Date the promotion ends. (If null, has the same value as start_date.)"
          example: 2018-01-31
          format: date
          nullable: true
          title: end_date
          type: string
        file:
          description: File associated to the promotion.
          nullable: true
          title: file
          type: string
        id:
          description: Unique ID of the promotion.
          example: 2404
          format: int32
          title: id
          type: integer
        label:
          description: Label of the promotion.
          example: 1/2 page Club et Concerts
          title: label
          type: string
        start_date:
          description: Date the promotion begins.
          example: 2018-01-02
          format: date
          nullable: true
          title: start_date
          type: string
        supplier:
          $ref: '#/components/schemas/PromotionsEntity_supplier'
        type:
          $ref: '#/components/schemas/PromotionsEntity_type'
      required:
      - applied_to
      - comments
      - cost
      - end_date
      - id
      - label
      - start_date
      - supplier
      - type
      title: Promotion
      type: object
    SeriesEntity:
      properties:
        contract:
          $ref: '#/components/schemas/SeriesEntity_contract'
        costing_capacity:
          description: Value of the costing capacity.
          example: 1465
          format: int32
          minimum: 0
          nullable: true
          title: costing_capacity
          type: integer
        creation_timestamp:
          description: Timestamp for when the series was created in the customer's
            database.
          example: 1503655564
          format: int64
          title: creation_timestamp
          type: integer
        first_date:
          description: Date of the first event in the series.
          example: 2018-05-22
          format: date
          title: first_date
          type: string
        id:
          description: Unique ID of the series.
          example: 263
          format: int32
          title: id
          type: integer
        label:
          description: Label of the series.
          example: Tintin et Milou Live - Paris 2018
          title: label
          type: string
        last_date:
          description: Date of the last event in the series.
          example: 2018-06-03
          format: date
          title: last_date
          type: string
        last_update_timestamp:
          description: Timestamp for when the series was last updated in the customer's
            database.
          example: 1516500001
          format: int64
          title: last_update_timestamp
          type: integer
        type:
          $ref: '#/components/schemas/SeriesEntity_type'
        venue:
          $ref: '#/components/schemas/VenuesEntity'
      required:
      - creation_timestamp
      - first_date
      - id
      - label
      - last_date
      - last_update_timestamp
      - type
      title: Series
      type: object
    TicketCountsDetailedEntity:
      properties:
        approved:
          description: Defines whether this ticket count is approved or not.
          example: true
          title: approved
          type: boolean
        comment:
          description: Comment for the ticket count.
          example: No sales
          nullable: true
          title: comment
          type: string
        date:
          description: Date of the ticket count.
          example: 2018-07-03
          format: date
          title: date
          type: string
        event_channels:
          description: Array of event channels where the sales were made.
          items:
            $ref: '#/components/schemas/TicketCountsDetailedEntity_event_channels_inner'
          title: event_channels
          type: array
        final:
          description: "Whether this ticket count is the last and final one of its\
            \ event or not. If it is, it means that no further ticket counts will\
            \ be added for the event it belongs to."
          example: false
          title: final
          type: boolean
        id:
          description: Unique ID of the ticket count.
          example: 12345
          format: int32
          title: id
          type: integer
      required:
      - approved
      - comment
      - date
      - final
      - id
      title: Detailed ticket count
      type: object
    TicketCountsEntity:
      properties:
        approved:
          description: Defines whether this ticket count is approved or not.
          example: true
          title: approved
          type: boolean
        comment:
          description: Comment for the ticket count.
          example: No sales
          nullable: true
          title: comment
          type: string
        currency:
          description: Currency of the gross (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO
            4212 alphabetic code</a>).
          example: EUR
          title: currency
          type: string
        date:
          description: Date of the ticket count.
          example: 2018-07-03
          format: date
          title: date
          type: string
        final:
          description: "Whether this ticket count is the last and final one of its\
            \ event or not. If it is, it means that no further ticket counts will\
            \ be added for the event it belongs to."
          example: false
          title: final
          type: boolean
        gross:
          description: "Gross (= income for the sold tickets, including VAT but excluding\
            \ all commissions)."
          example: 48735.6
          format: float
          minimum: 0
          title: gross
          type: number
        id:
          description: Unique ID of the ticket count.
          example: 12345
          format: int32
          title: id
          type: integer
        reservations:
          description: Ticket reservations (= number of reserved tickets). *This field
            may be omitted according to the customer configuration.*
          example: 81
          format: int32
          minimum: 0
          title: reservations
          type: integer
        sales:
          description: Ticket sales (= number of sold tickets).
          example: 1025
          format: int32
          minimum: 0
          title: sales
          type: integer
      required:
      - approved
      - comment
      - date
      - final
      - id
      - sales
      title: Ticket count
      type: object
    VenuesEntity:
      properties:
        alternative_labels:
          description: Array of alternative/old names of the venue.
          items:
            type: string
          title: alternative_labels
          type: array
        city:
          description: City in which the venue is.
          example: Saint-Herblain
          title: city
          type: string
        country_code:
          description: Country in which the venue is (<a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3'>ISO
            3166-1 alpha-3 code</a>).
          example: FR
          title: country_code
          type: string
        creation_timestamp:
          description: Timestamp for when the venue was created in the customer's
            database.
          example: 1262300401
          format: int64
          title: creation_timestamp
          type: integer
        first_address:
          description: First address field of the venue.
          example: ZAC d'Ar Mor
          nullable: true
          title: first_address
          type: string
        id:
          description: Unique ID of the venue.
          example: 27
          format: int32
          title: id
          type: integer
        label:
          description: Name of the venue.
          example: Zénith de Nantes Métropole
          title: label
          type: string
        last_update_timestamp:
          description: Timestamp for when the venue was last updated in the customer's
            database.
          example: 1473008115
          format: int64
          title: last_update_timestamp
          type: integer
        major_city:
          description: Major city or metropolitan area the venue belongs to.
          example: Nantes
          nullable: true
          title: major_city
          type: string
        second_address:
          description: Second address field of the venue.
          example: Boulevard du Zénith
          nullable: true
          title: second_address
          type: string
        type:
          $ref: '#/components/schemas/VenuesEntity_type'
        zip_code:
          description: ZIP code of the venue.
          example: "44800"
          nullable: true
          title: zip_code
          type: string
      required:
      - city
      - country_code
      - creation_timestamp
      - first_address
      - id
      - label
      - last_update_timestamp
      - major_city
      - second_address
      - type
      - zip_code
      title: Venue
      type: object
    EventsCapacitiesEntity_event_categories_inner:
      properties:
        comps:
          description: Number of comps in the category.
          format: int32
          nullable: true
          title: comps
          type: integer
        holds:
          description: "Number of *holds* in the category. <span class=\"definition\"\
            >Holds</span> are seats/places that are not in sale at the date of the\
            \ capacity, but will eventually be later."
          format: int32
          nullable: true
          title: holds
          type: integer
        id:
          description: Unique ID of the event category.
          format: int32
          title: id
          type: integer
        kills:
          description: Number of *kills* in the category. <span class="definition">Kills</span>
            are seats/places that will not be sold for technical reasons.
          format: int32
          nullable: true
          title: kills
          type: integer
        sellable_capacity:
          description: "Number of sellable seats/places in the category. This is calculated\
            \ by the formula: `total_capacity - kills - comps - holds`."
          format: int32
          title: sellable_capacity
          type: integer
        total_capacity:
          description: Total number of seats/places in the category.
          format: int32
          title: total_capacity
          type: integer
      required:
      - comps
      - holds
      - id
      - kills
      - sellable_capacity
      - total_capacity
      title: EventsCapacitiesEntity_event_categories_inner
      type: object
    EventsCategoriesEntity_event_price_ranges_inner:
      properties:
        base_price:
          description: Base price of the event price range (i.e. including VAT but
            excluding all commissions).
          example: 44.5
          format: float
          minimum: 0
          title: base_price
          type: number
        currency:
          description: Currency of the prices.
          example: EUR
          title: currency
          type: string
        id:
          description: ID of the event price range.
          example: 56789
          format: int32
          title: id
          type: integer
        ignored:
          description: Defines whether this event price range is ignored or not.
          example: false
          title: ignored
          type: boolean
        price_range:
          $ref: '#/components/schemas/PriceRangesEntity'
        public_price:
          description: Public price of the event price range (i.e. including VAT and
            all commissions).
          example: 50.0
          format: float
          minimum: 0
          nullable: true
          title: public_price
          type: number
      required:
      - base_price
      - currency
      - id
      - price_range
      - public_price
      title: EventsCategoriesEntity_event_price_ranges_inner
      type: object
    EventsEntity_contract_partner:
      description: Contract partner.
      nullable: true
      properties:
        id:
          description: Unique ID identifying the contract partner.
          example: 12
          format: int32
          title: id
          type: integer
        label:
          description: Label of the contract partner.
          example: K Prod
          title: label
          type: string
      required:
      - id
      - label
      title: EventsEntity_contract_partner
      type: object
    EventsEntity_contract_type:
      description: Contract type.
      properties:
        id:
          description: String identifying the contract type.
          enum:
          - PRO
          - COP
          - PLO
          - COR
          - CES
          example: COP
          title: id
          type: string
        label:
          description: Label of the contract type. This value is translated according
            to the 'Accept-Language' header.
          example: Coprod
          title: label
          type: string
      required:
      - id
      - label
      title: EventsEntity_contract_type
      type: object
    EventsEntity_contract:
      description: Contract of the series.
      properties:
        partner:
          $ref: '#/components/schemas/EventsEntity_contract_partner'
        type:
          $ref: '#/components/schemas/EventsEntity_contract_type'
      required:
      - partner
      - type
      title: EventsEntity_contract
      type: object
    EventsEntity_input_type:
      description: Input type of the event.
      properties:
        id:
          description: String identifying the input type of the event.
          enum:
          - DET
          - GLO
          example: DET
          title: id
          type: string
        label:
          description: Label of the input type. This value is translated according
            to the 'Accept-Language' header.
          example: Detailed sales
          title: label
          type: string
      required:
      - id
      - label
      title: EventsEntity_input_type
      type: object
    PromotionsEntity_applied_to_inner:
      properties:
        event_id:
          description: "ID of the event the promotion applies to. This property is\
            \ exclusive with 'series_id': if defined, then 'series_id' will not be\
            \ displayed."
          example: 2142
          format: int32
          nullable: true
          title: event_id
          type: integer
        quantity:
          description: Quantity share of the promotion devoted to this event/series.
          format: float
          minimum: 0
          nullable: true
          title: quantity
          type: number
        series_id:
          description: "ID of the series the promotion applies to. This property is\
            \ exclusive with 'event_id': if defined, then 'event_id' will not be displayed."
          example: 263
          format: int32
          nullable: true
          title: series_id
          type: integer
        unit_cost:
          description: "Unit cost share of the promotion devoted to this event/series.\
            \ The total cost of the share can be calculated with: quantity × unit_cost.\
            \ *This field may be omitted according to the customer configuration.*"
          format: float
          minimum: 0
          nullable: true
          title: unit_cost
          type: number
        valorized_quantity:
          description: Valorized quantity share of the promotion devoted to this event/series.
            *This field may be omitted according to the customer configuration.*
          format: float
          minimum: 0
          nullable: true
          title: valorized_quantity
          type: number
        valorized_unit_cost:
          description: "Valorized unit cost share of the promotion devoted to this\
            \ event/series. The total valorized cost of the share can be calculated\
            \ with: valorized_quantity × valorized_unit_cost."
          format: float
          minimum: 0
          nullable: true
          title: valorized_unit_cost
          type: number
      title: PromotionsEntity_applied_to_inner
      type: object
    PromotionsEntity_cost_state:
      description: State of the promotion cost. *This object may be omitted according
        to the customer configuration.*
      nullable: true
      properties:
        id:
          description: String identifying the state of the promotion cost.
          enum:
          - PRE
          - ENG
          - FAC
          - PAY
          title: id
          type: string
        label:
          description: Label of the state of the promotion cost. This value is translated
            according to the 'Accept-Language' header.
          title: label
          type: string
      required:
      - id
      - label
      title: PromotionsEntity_cost_state
      type: object
    PromotionsEntity_cost_type:
      description: Type of the promotion cost.
      properties:
        id:
          description: String identifying the type of the promotion cost.
          enum:
          - PAY
          - ECH
          - GRA
          example: GRA
          title: id
          type: string
        label:
          description: Label of the type of the promotion cost. This value is translated
            according to the 'Accept-Language' header.
          example: Free
          title: label
          type: string
      required:
      - id
      - label
      title: PromotionsEntity_cost_type
      type: object
    PromotionsEntity_cost:
      description: Cost of the promotion.
      properties:
        currency:
          description: Currency of the unit_cost (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO
            4212 alphabetic code</a>).
          nullable: true
          title: currency
          type: string
        exchange:
          description: What was offered in exchange of the promotion.
          nullable: true
          title: exchange
          type: string
        quantity:
          description: Quantity of the promotion (see unit_cost).
          format: float
          minimum: 0
          nullable: true
          title: quantity
          type: number
        state:
          $ref: '#/components/schemas/PromotionsEntity_cost_state'
        type:
          $ref: '#/components/schemas/PromotionsEntity_cost_type'
        unit_cost:
          description: "Unit cost of the promotion. The total cost of the promotion\
            \ can be calculated with: quantity × unit_cost."
          format: float
          minimum: 0
          nullable: true
          title: unit_cost
          type: number
        valorized_quantity:
          description: Valorized quantity of the promotion (see valorized_unit_cost).
            *This field may be omitted according to the customer configuration.*
          format: float
          minimum: 0
          nullable: true
          title: valorized_quantity
          type: number
        valorized_unit_cost:
          description: "Valorized unit cost of the promotion. The total valorized\
            \ cost of the promotion can be calculated with: valorized_quantity × valorized_unit_cost.\
            \ *This field may be omitted according to the customer configuration.*"
          format: float
          minimum: 0
          nullable: true
          title: valorized_unit_cost
          type: number
      required:
      - type
      title: PromotionsEntity_cost
      type: object
    PromotionsEntity_supplier:
      description: Supplier of the promotion.
      nullable: true
      properties:
        id:
          description: Unique ID of the supplier.
          format: int32
          title: id
          type: integer
        label:
          description: Name of the supplier.
          title: label
          type: string
      required:
      - id
      - label
      title: PromotionsEntity_supplier
      type: object
    PromotionsEntity_type_family:
      description: Family the promotion type belongs to.
      properties:
        id:
          description: String identifying the promotion family.
          example: PRE
          title: id
          type: string
        label:
          description: Label of the promotion family. This value is translated according
            to the 'Accept-Language' header.
          example: Press
          title: label
          type: string
      required:
      - id
      - label
      title: PromotionsEntity_type_family
      type: object
    PromotionsEntity_type:
      description: Type of the promotion.
      properties:
        family:
          $ref: '#/components/schemas/PromotionsEntity_type_family'
        id:
          description: String identifying the promotion type.
          example: PPR
          title: id
          type: string
        label:
          description: Label of the promotion type. This value is translated according
            to the 'Accept-Language' header.
          example: Media ads
          title: label
          type: string
      required:
      - family
      - id
      - label
      title: PromotionsEntity_type
      type: object
    SeriesEntity_contract_partner:
      description: Contract partner.
      nullable: true
      properties:
        id:
          description: Unique ID identifying the contract partner.
          format: int32
          title: id
          type: integer
        label:
          description: Label of the contract partner.
          title: label
          type: string
      required:
      - id
      - label
      title: SeriesEntity_contract_partner
      type: object
    SeriesEntity_contract_type:
      description: Contract type.
      properties:
        id:
          description: String identifying the contract type.
          enum:
          - PRO
          - COP
          - PLO
          - COR
          - CES
          example: PRO
          title: id
          type: string
        label:
          description: Label of the contract type. This value is translated according
            to the 'Accept-Language' header.
          example: Production
          title: label
          type: string
      required:
      - id
      - label
      title: SeriesEntity_contract_type
      type: object
    SeriesEntity_contract:
      description: Contract of the series.
      properties:
        partner:
          $ref: '#/components/schemas/SeriesEntity_contract_partner'
        type:
          $ref: '#/components/schemas/SeriesEntity_contract_type'
      required:
      - type
      title: SeriesEntity_contract
      type: object
    SeriesEntity_type:
      description: Type of the series
      properties:
        id:
          description: String identifying the series type.
          enum:
          - TOU
          - LGS
          example: LGS
          title: id
          type: string
        label:
          description: Label of the series type. This value is translated according
            to the 'Accept-Language' header.
          example: Long series
          title: label
          type: string
      required:
      - id
      - label
      title: SeriesEntity_type
      type: object
    TicketCountsDetailedEntity_event_channels_inner_event_categories_inner_event_price_ranges_inner:
      properties:
        currency:
          description: Currency of the gross (<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO
            4212 alphabetic code</a>).
          example: EUR
          title: currency
          type: string
        gross:
          description: "Gross (= income for the sold tickets for the current channel/category/price\
            \ range, including VAT but excluding all commissions)."
          example: 864.0
          format: float
          minimum: 0
          nullable: true
          title: gross
          type: number
        id:
          description: ID of the event price range.
          example: 24680
          format: int32
          title: id
          type: integer
        reservations:
          description: Detailed ticket reservations (= number of reserved tickets
            for the current channel/category/price range). *This field may be omitted
            according to the customer configuration.*
          example: 0
          format: int32
          minimum: 0
          nullable: true
          title: reservations
          type: integer
        sales:
          description: Detailed ticket sales (= number of sold tickets for the current
            channel/category/price range).
          example: 37
          format: int32
          minimum: 0
          nullable: true
          title: sales
          type: integer
      required:
      - currency
      - gross
      - id
      - sales
      title: TicketCountsDetailedEntity_event_channels_inner_event_categories_inner_event_price_ranges_inner
      type: object
    TicketCountsDetailedEntity_event_channels_inner_event_categories_inner:
      properties:
        event_price_ranges:
          description: Array of event price ranges which where sold.
          items:
            $ref: '#/components/schemas/TicketCountsDetailedEntity_event_channels_inner_event_categories_inner_event_price_ranges_inner'
          title: event_price_ranges
          type: array
        id:
          description: ID of the event category.
          example: 56789
          format: int32
          title: id
          type: integer
      required:
      - event_price_ranges
      - id
      title: TicketCountsDetailedEntity_event_channels_inner_event_categories_inner
      type: object
    TicketCountsDetailedEntity_event_channels_inner:
      properties:
        event_categories:
          description: Array of event categories which where sold.
          items:
            $ref: '#/components/schemas/TicketCountsDetailedEntity_event_channels_inner_event_categories_inner'
          title: event_categories
          type: array
        id:
          description: ID of the event channel.
          example: 12345
          format: int32
          title: id
          type: integer
      required:
      - event_categories
      - id
      title: TicketCountsDetailedEntity_event_channels_inner
      type: object
    VenuesEntity_type:
      properties:
        id:
          description: String identifying the venue type.
          enum:
          - SAL
          - FES
          example: SAL
          title: id
          type: string
        label:
          description: Label of the venue type. This value is translated according
            to the 'Accept-Language' header.
          example: Venue
          title: label
          type: string
      required:
      - id
      - label
      title: VenuesEntity_type
      type: object
  securitySchemes:
    Basic Auth:
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.controllers.security_controller.info_from_Basic
        Auth
x-servers:
- description: "Server for testing purposes, with sandbox data from demo.pims.io"
  url: https://demo.pims.io/api
- description: Example of server for a real customer (Gérard Drouot Productions)
  url: https://gdp.pims.io/api
x-tagGroups:
- name: Structure
  tags:
  - Events
  - Series
  - Venues
- name: Ticket settings
  tags:
  - Categories
  - Price ranges
  - Channels
- name: Ticket counts
  tags:
  - Capacities
  - Counts
- name: Promotion
  tags:
  - Promotions
- name: Misc
  tags:
  - Bindings
  - Subsidiaries
x-original-swagger-version: "2.0"
