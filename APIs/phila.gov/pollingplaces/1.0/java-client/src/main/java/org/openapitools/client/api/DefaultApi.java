/*
 * Polling Places API
 *  This data set contains the list of polling places. It can be organized by ward/division, accessibility rating, or type of building.  This list is used to assign poll workers, send the machines and necessary accessibility materials, etc.  **Endpoint:** http://api.phila.gov/polling-places/v1 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Features;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rootGet
     * @param ward Ward Number (required)
     * @param division Division Number (required)
     * @param paramCallback Optional parameter for jsonp support. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array containing the polling place </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetCall(Integer ward, Integer division, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ward != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ward", ward));
        }

        if (division != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("division", division));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootGetValidateBeforeCall(Integer ward, Integer division, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ward' is set
        if (ward == null) {
            throw new ApiException("Missing the required parameter 'ward' when calling rootGet(Async)");
        }

        // verify the required parameter 'division' is set
        if (division == null) {
            throw new ApiException("Missing the required parameter 'division' when calling rootGet(Async)");
        }

        return rootGetCall(ward, division, paramCallback, _callback);

    }

    /**
     * Get Polling Places Data
     * 
     * @param ward Ward Number (required)
     * @param division Division Number (required)
     * @param paramCallback Optional parameter for jsonp support. (optional)
     * @return Features
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array containing the polling place </td><td>  -  </td></tr>
     </table>
     */
    public Features rootGet(Integer ward, Integer division, String paramCallback) throws ApiException {
        ApiResponse<Features> localVarResp = rootGetWithHttpInfo(ward, division, paramCallback);
        return localVarResp.getData();
    }

    /**
     * Get Polling Places Data
     * 
     * @param ward Ward Number (required)
     * @param division Division Number (required)
     * @param paramCallback Optional parameter for jsonp support. (optional)
     * @return ApiResponse&lt;Features&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array containing the polling place </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Features> rootGetWithHttpInfo(Integer ward, Integer division, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ward, division, paramCallback, null);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Polling Places Data (asynchronously)
     * 
     * @param ward Ward Number (required)
     * @param division Division Number (required)
     * @param paramCallback Optional parameter for jsonp support. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array containing the polling place </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetAsync(Integer ward, Integer division, String paramCallback, final ApiCallback<Features> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ward, division, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<Features>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
