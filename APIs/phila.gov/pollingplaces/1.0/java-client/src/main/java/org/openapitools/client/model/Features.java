/*
 * Polling Places API
 *  This data set contains the list of polling places. It can be organized by ward/division, accessibility rating, or type of building.  This list is used to assign poll workers, send the machines and necessary accessibility materials, etc.  **Endpoint:** http://api.phila.gov/polling-places/v1 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Features
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:06.146664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Features {
  public static final String SERIALIZED_NAME_BUILDING = "building";
  @SerializedName(SERIALIZED_NAME_BUILDING)
  private String building;

  public static final String SERIALIZED_NAME_DISPLAY_ADDRESS = "display_address";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ADDRESS)
  private String displayAddress;

  public static final String SERIALIZED_NAME_DIVISION = "division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private String division;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private Float lat;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private Float lng;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PARKING = "parking";
  @SerializedName(SERIALIZED_NAME_PARKING)
  private String parking;

  public static final String SERIALIZED_NAME_PIN_ADDRESS = "pin_address";
  @SerializedName(SERIALIZED_NAME_PIN_ADDRESS)
  private String pinAddress;

  public static final String SERIALIZED_NAME_WARD = "ward";
  @SerializedName(SERIALIZED_NAME_WARD)
  private String ward;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zip_code";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private Integer zipCode;

  public Features() {
  }

  public Features building(String building) {
    this.building = building;
    return this;
  }

  /**
   * Assigned code to denote the accessibility of the polling place. See above for details of the codes. F &#x3D; Building Fully Accessible; B &#x3D; Building Substantially Accessible; M &#x3D; Building Accessibilty Modified; A &#x3D; Alternate Entrance; R &#x3D; Building Accessible With Ramp; N &#x3D; Building Not Accessible 
   * @return building
   */
  @javax.annotation.Nullable
  public String getBuilding() {
    return building;
  }

  public void setBuilding(String building) {
    this.building = building;
  }


  public Features displayAddress(String displayAddress) {
    this.displayAddress = displayAddress;
    return this;
  }

  /**
   * Mailing address of the polling place (formatted for display purposes).
   * @return displayAddress
   */
  @javax.annotation.Nullable
  public String getDisplayAddress() {
    return displayAddress;
  }

  public void setDisplayAddress(String displayAddress) {
    this.displayAddress = displayAddress;
  }


  public Features division(String division) {
    this.division = division;
    return this;
  }

  /**
   * The number of the electoral section that houses the polling place.
   * @return division
   */
  @javax.annotation.Nullable
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }


  public Features lat(Float lat) {
    this.lat = lat;
    return this;
  }

  /**
   * Latitudinal coordinates of the polling place.
   * @return lat
   */
  @javax.annotation.Nullable
  public Float getLat() {
    return lat;
  }

  public void setLat(Float lat) {
    this.lat = lat;
  }


  public Features lng(Float lng) {
    this.lng = lng;
    return this;
  }

  /**
   * Longitudinal coordinates of the polling place.
   * @return lng
   */
  @javax.annotation.Nullable
  public Float getLng() {
    return lng;
  }

  public void setLng(Float lng) {
    this.lng = lng;
  }


  public Features location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The name of the polling place.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Features parking(String parking) {
    this.parking = parking;
    return this;
  }

  /**
   * Assigned code to denote the availability of parking. See above for details of the codes. N &#x3D; No Parking; G &#x3D; General Parking; L &#x3D; Loading Zone; H &#x3D; Handicap Parking 
   * @return parking
   */
  @javax.annotation.Nullable
  public String getParking() {
    return parking;
  }

  public void setParking(String parking) {
    this.parking = parking;
  }


  public Features pinAddress(String pinAddress) {
    this.pinAddress = pinAddress;
    return this;
  }

  /**
   * Mailing address of the polling place.
   * @return pinAddress
   */
  @javax.annotation.Nullable
  public String getPinAddress() {
    return pinAddress;
  }

  public void setPinAddress(String pinAddress) {
    this.pinAddress = pinAddress;
  }


  public Features ward(String ward) {
    this.ward = ward;
    return this;
  }

  /**
   * The number of the electoral subdivision that houses the polling place.
   * @return ward
   */
  @javax.annotation.Nullable
  public String getWard() {
    return ward;
  }

  public void setWard(String ward) {
    this.ward = ward;
  }


  public Features zipCode(Integer zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Zipcode of the polling place.
   * @return zipCode
   */
  @javax.annotation.Nullable
  public Integer getZipCode() {
    return zipCode;
  }

  public void setZipCode(Integer zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Features features = (Features) o;
    return Objects.equals(this.building, features.building) &&
        Objects.equals(this.displayAddress, features.displayAddress) &&
        Objects.equals(this.division, features.division) &&
        Objects.equals(this.lat, features.lat) &&
        Objects.equals(this.lng, features.lng) &&
        Objects.equals(this.location, features.location) &&
        Objects.equals(this.parking, features.parking) &&
        Objects.equals(this.pinAddress, features.pinAddress) &&
        Objects.equals(this.ward, features.ward) &&
        Objects.equals(this.zipCode, features.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(building, displayAddress, division, lat, lng, location, parking, pinAddress, ward, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Features {\n");
    sb.append("    building: ").append(toIndentedString(building)).append("\n");
    sb.append("    displayAddress: ").append(toIndentedString(displayAddress)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    parking: ").append(toIndentedString(parking)).append("\n");
    sb.append("    pinAddress: ").append(toIndentedString(pinAddress)).append("\n");
    sb.append("    ward: ").append(toIndentedString(ward)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("building");
    openapiFields.add("display_address");
    openapiFields.add("division");
    openapiFields.add("lat");
    openapiFields.add("lng");
    openapiFields.add("location");
    openapiFields.add("parking");
    openapiFields.add("pin_address");
    openapiFields.add("ward");
    openapiFields.add("zip_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Features
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Features.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Features is not found in the empty JSON string", Features.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Features.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Features` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("building") != null && !jsonObj.get("building").isJsonNull()) && !jsonObj.get("building").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `building` to be a primitive type in the JSON string but got `%s`", jsonObj.get("building").toString()));
      }
      if ((jsonObj.get("display_address") != null && !jsonObj.get("display_address").isJsonNull()) && !jsonObj.get("display_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_address").toString()));
      }
      if ((jsonObj.get("division") != null && !jsonObj.get("division").isJsonNull()) && !jsonObj.get("division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("division").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("parking") != null && !jsonObj.get("parking").isJsonNull()) && !jsonObj.get("parking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parking").toString()));
      }
      if ((jsonObj.get("pin_address") != null && !jsonObj.get("pin_address").isJsonNull()) && !jsonObj.get("pin_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pin_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pin_address").toString()));
      }
      if ((jsonObj.get("ward") != null && !jsonObj.get("ward").isJsonNull()) && !jsonObj.get("ward").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ward` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ward").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Features.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Features' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Features> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Features.class));

       return (TypeAdapter<T>) new TypeAdapter<Features>() {
           @Override
           public void write(JsonWriter out, Features value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Features read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Features given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Features
   * @throws IOException if the JSON string is invalid with respect to Features
   */
  public static Features fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Features.class);
  }

  /**
   * Convert an instance of Features to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

