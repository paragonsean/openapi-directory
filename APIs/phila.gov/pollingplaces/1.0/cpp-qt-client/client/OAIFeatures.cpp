/**
 * Polling Places API
 *  This data set contains the list of polling places. It can be organized by ward/division, accessibility rating, or type of building.  This list is used to assign poll workers, send the machines and necessary accessibility materials, etc.  **Endpoint:** http://api.phila.gov/polling-places/v1 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatures::OAIFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatures::OAIFeatures() {
    this->initializeModel();
}

OAIFeatures::~OAIFeatures() {}

void OAIFeatures::initializeModel() {

    m_building_isSet = false;
    m_building_isValid = false;

    m_display_address_isSet = false;
    m_display_address_isValid = false;

    m_division_isSet = false;
    m_division_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_parking_isSet = false;
    m_parking_isValid = false;

    m_pin_address_isSet = false;
    m_pin_address_isValid = false;

    m_ward_isSet = false;
    m_ward_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatures::fromJsonObject(QJsonObject json) {

    m_building_isValid = ::OpenAPI::fromJsonValue(m_building, json[QString("building")]);
    m_building_isSet = !json[QString("building")].isNull() && m_building_isValid;

    m_display_address_isValid = ::OpenAPI::fromJsonValue(m_display_address, json[QString("display_address")]);
    m_display_address_isSet = !json[QString("display_address")].isNull() && m_display_address_isValid;

    m_division_isValid = ::OpenAPI::fromJsonValue(m_division, json[QString("division")]);
    m_division_isSet = !json[QString("division")].isNull() && m_division_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_parking_isValid = ::OpenAPI::fromJsonValue(m_parking, json[QString("parking")]);
    m_parking_isSet = !json[QString("parking")].isNull() && m_parking_isValid;

    m_pin_address_isValid = ::OpenAPI::fromJsonValue(m_pin_address, json[QString("pin_address")]);
    m_pin_address_isSet = !json[QString("pin_address")].isNull() && m_pin_address_isValid;

    m_ward_isValid = ::OpenAPI::fromJsonValue(m_ward, json[QString("ward")]);
    m_ward_isSet = !json[QString("ward")].isNull() && m_ward_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;
}

QString OAIFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_building_isSet) {
        obj.insert(QString("building"), ::OpenAPI::toJsonValue(m_building));
    }
    if (m_display_address_isSet) {
        obj.insert(QString("display_address"), ::OpenAPI::toJsonValue(m_display_address));
    }
    if (m_division_isSet) {
        obj.insert(QString("division"), ::OpenAPI::toJsonValue(m_division));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_parking_isSet) {
        obj.insert(QString("parking"), ::OpenAPI::toJsonValue(m_parking));
    }
    if (m_pin_address_isSet) {
        obj.insert(QString("pin_address"), ::OpenAPI::toJsonValue(m_pin_address));
    }
    if (m_ward_isSet) {
        obj.insert(QString("ward"), ::OpenAPI::toJsonValue(m_ward));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIFeatures::getBuilding() const {
    return m_building;
}
void OAIFeatures::setBuilding(const QString &building) {
    m_building = building;
    m_building_isSet = true;
}

bool OAIFeatures::is_building_Set() const{
    return m_building_isSet;
}

bool OAIFeatures::is_building_Valid() const{
    return m_building_isValid;
}

QString OAIFeatures::getDisplayAddress() const {
    return m_display_address;
}
void OAIFeatures::setDisplayAddress(const QString &display_address) {
    m_display_address = display_address;
    m_display_address_isSet = true;
}

bool OAIFeatures::is_display_address_Set() const{
    return m_display_address_isSet;
}

bool OAIFeatures::is_display_address_Valid() const{
    return m_display_address_isValid;
}

QString OAIFeatures::getDivision() const {
    return m_division;
}
void OAIFeatures::setDivision(const QString &division) {
    m_division = division;
    m_division_isSet = true;
}

bool OAIFeatures::is_division_Set() const{
    return m_division_isSet;
}

bool OAIFeatures::is_division_Valid() const{
    return m_division_isValid;
}

float OAIFeatures::getLat() const {
    return m_lat;
}
void OAIFeatures::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIFeatures::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIFeatures::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAIFeatures::getLng() const {
    return m_lng;
}
void OAIFeatures::setLng(const float &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIFeatures::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIFeatures::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIFeatures::getLocation() const {
    return m_location;
}
void OAIFeatures::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIFeatures::is_location_Set() const{
    return m_location_isSet;
}

bool OAIFeatures::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIFeatures::getParking() const {
    return m_parking;
}
void OAIFeatures::setParking(const QString &parking) {
    m_parking = parking;
    m_parking_isSet = true;
}

bool OAIFeatures::is_parking_Set() const{
    return m_parking_isSet;
}

bool OAIFeatures::is_parking_Valid() const{
    return m_parking_isValid;
}

QString OAIFeatures::getPinAddress() const {
    return m_pin_address;
}
void OAIFeatures::setPinAddress(const QString &pin_address) {
    m_pin_address = pin_address;
    m_pin_address_isSet = true;
}

bool OAIFeatures::is_pin_address_Set() const{
    return m_pin_address_isSet;
}

bool OAIFeatures::is_pin_address_Valid() const{
    return m_pin_address_isValid;
}

QString OAIFeatures::getWard() const {
    return m_ward;
}
void OAIFeatures::setWard(const QString &ward) {
    m_ward = ward;
    m_ward_isSet = true;
}

bool OAIFeatures::is_ward_Set() const{
    return m_ward_isSet;
}

bool OAIFeatures::is_ward_Valid() const{
    return m_ward_isValid;
}

qint32 OAIFeatures::getZipCode() const {
    return m_zip_code;
}
void OAIFeatures::setZipCode(const qint32 &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIFeatures::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIFeatures::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_building_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
