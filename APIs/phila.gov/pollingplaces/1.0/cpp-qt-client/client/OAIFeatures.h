/**
 * Polling Places API
 *  This data set contains the list of polling places. It can be organized by ward/division, accessibility rating, or type of building.  This list is used to assign poll workers, send the machines and necessary accessibility materials, etc.  **Endpoint:** http://api.phila.gov/polling-places/v1 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFeatures.h
 *
 * 
 */

#ifndef OAIFeatures_H
#define OAIFeatures_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFeatures : public OAIObject {
public:
    OAIFeatures();
    OAIFeatures(QString json);
    ~OAIFeatures() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBuilding() const;
    void setBuilding(const QString &building);
    bool is_building_Set() const;
    bool is_building_Valid() const;

    QString getDisplayAddress() const;
    void setDisplayAddress(const QString &display_address);
    bool is_display_address_Set() const;
    bool is_display_address_Valid() const;

    QString getDivision() const;
    void setDivision(const QString &division);
    bool is_division_Set() const;
    bool is_division_Valid() const;

    float getLat() const;
    void setLat(const float &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    float getLng() const;
    void setLng(const float &lng);
    bool is_lng_Set() const;
    bool is_lng_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getParking() const;
    void setParking(const QString &parking);
    bool is_parking_Set() const;
    bool is_parking_Valid() const;

    QString getPinAddress() const;
    void setPinAddress(const QString &pin_address);
    bool is_pin_address_Set() const;
    bool is_pin_address_Valid() const;

    QString getWard() const;
    void setWard(const QString &ward);
    bool is_ward_Set() const;
    bool is_ward_Valid() const;

    qint32 getZipCode() const;
    void setZipCode(const qint32 &zip_code);
    bool is_zip_code_Set() const;
    bool is_zip_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_building;
    bool m_building_isSet;
    bool m_building_isValid;

    QString m_display_address;
    bool m_display_address_isSet;
    bool m_display_address_isValid;

    QString m_division;
    bool m_division_isSet;
    bool m_division_isValid;

    float m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    float m_lng;
    bool m_lng_isSet;
    bool m_lng_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_parking;
    bool m_parking_isSet;
    bool m_parking_isValid;

    QString m_pin_address;
    bool m_pin_address_isSet;
    bool m_pin_address_isValid;

    QString m_ward;
    bool m_ward_isSet;
    bool m_ward_isValid;

    qint32 m_zip_code;
    bool m_zip_code_isSet;
    bool m_zip_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFeatures)

#endif // OAIFeatures_H
