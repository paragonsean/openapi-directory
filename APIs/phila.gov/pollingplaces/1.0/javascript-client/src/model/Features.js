/**
 * Polling Places API
 *  This data set contains the list of polling places. It can be organized by ward/division, accessibility rating, or type of building.  This list is used to assign poll workers, send the machines and necessary accessibility materials, etc.  **Endpoint:** http://api.phila.gov/polling-places/v1 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Features model module.
 * @module model/Features
 * @version 1.0
 */
class Features {
    /**
     * Constructs a new <code>Features</code>.
     * @alias module:model/Features
     */
    constructor() { 
        
        Features.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Features</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Features} obj Optional instance to populate.
     * @return {module:model/Features} The populated <code>Features</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Features();

            if (data.hasOwnProperty('building')) {
                obj['building'] = ApiClient.convertToType(data['building'], 'String');
            }
            if (data.hasOwnProperty('display_address')) {
                obj['display_address'] = ApiClient.convertToType(data['display_address'], 'String');
            }
            if (data.hasOwnProperty('division')) {
                obj['division'] = ApiClient.convertToType(data['division'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('parking')) {
                obj['parking'] = ApiClient.convertToType(data['parking'], 'String');
            }
            if (data.hasOwnProperty('pin_address')) {
                obj['pin_address'] = ApiClient.convertToType(data['pin_address'], 'String');
            }
            if (data.hasOwnProperty('ward')) {
                obj['ward'] = ApiClient.convertToType(data['ward'], 'String');
            }
            if (data.hasOwnProperty('zip_code')) {
                obj['zip_code'] = ApiClient.convertToType(data['zip_code'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Features</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Features</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['building'] && !(typeof data['building'] === 'string' || data['building'] instanceof String)) {
            throw new Error("Expected the field `building` to be a primitive type in the JSON string but got " + data['building']);
        }
        // ensure the json data is a string
        if (data['display_address'] && !(typeof data['display_address'] === 'string' || data['display_address'] instanceof String)) {
            throw new Error("Expected the field `display_address` to be a primitive type in the JSON string but got " + data['display_address']);
        }
        // ensure the json data is a string
        if (data['division'] && !(typeof data['division'] === 'string' || data['division'] instanceof String)) {
            throw new Error("Expected the field `division` to be a primitive type in the JSON string but got " + data['division']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['parking'] && !(typeof data['parking'] === 'string' || data['parking'] instanceof String)) {
            throw new Error("Expected the field `parking` to be a primitive type in the JSON string but got " + data['parking']);
        }
        // ensure the json data is a string
        if (data['pin_address'] && !(typeof data['pin_address'] === 'string' || data['pin_address'] instanceof String)) {
            throw new Error("Expected the field `pin_address` to be a primitive type in the JSON string but got " + data['pin_address']);
        }
        // ensure the json data is a string
        if (data['ward'] && !(typeof data['ward'] === 'string' || data['ward'] instanceof String)) {
            throw new Error("Expected the field `ward` to be a primitive type in the JSON string but got " + data['ward']);
        }

        return true;
    }


}



/**
 * Assigned code to denote the accessibility of the polling place. See above for details of the codes. F = Building Fully Accessible; B = Building Substantially Accessible; M = Building Accessibilty Modified; A = Alternate Entrance; R = Building Accessible With Ramp; N = Building Not Accessible 
 * @member {String} building
 */
Features.prototype['building'] = undefined;

/**
 * Mailing address of the polling place (formatted for display purposes).
 * @member {String} display_address
 */
Features.prototype['display_address'] = undefined;

/**
 * The number of the electoral section that houses the polling place.
 * @member {String} division
 */
Features.prototype['division'] = undefined;

/**
 * Latitudinal coordinates of the polling place.
 * @member {Number} lat
 */
Features.prototype['lat'] = undefined;

/**
 * Longitudinal coordinates of the polling place.
 * @member {Number} lng
 */
Features.prototype['lng'] = undefined;

/**
 * The name of the polling place.
 * @member {String} location
 */
Features.prototype['location'] = undefined;

/**
 * Assigned code to denote the availability of parking. See above for details of the codes. N = No Parking; G = General Parking; L = Loading Zone; H = Handicap Parking 
 * @member {String} parking
 */
Features.prototype['parking'] = undefined;

/**
 * Mailing address of the polling place.
 * @member {String} pin_address
 */
Features.prototype['pin_address'] = undefined;

/**
 * The number of the electoral subdivision that houses the polling place.
 * @member {String} ward
 */
Features.prototype['ward'] = undefined;

/**
 * Zipcode of the polling place.
 * @member {Number} zip_code
 */
Features.prototype['zip_code'] = undefined;






export default Features;

