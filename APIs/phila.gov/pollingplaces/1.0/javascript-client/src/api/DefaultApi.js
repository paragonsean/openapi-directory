/**
 * Polling Places API
 *  This data set contains the list of polling places. It can be organized by ward/division, accessibility rating, or type of building.  This list is used to assign poll workers, send the machines and necessary accessibility materials, etc.  **Endpoint:** http://api.phila.gov/polling-places/v1 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Features from '../model/Features';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the rootGet operation.
     * @callback module:api/DefaultApi~rootGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Features} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Polling Places Data
     * @param {Number} ward Ward Number
     * @param {Number} division Division Number
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Optional parameter for jsonp support.
     * @param {module:api/DefaultApi~rootGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Features}
     */
    rootGet(ward, division, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ward' is set
      if (ward === undefined || ward === null) {
        throw new Error("Missing the required parameter 'ward' when calling rootGet");
      }
      // verify the required parameter 'division' is set
      if (division === undefined || division === null) {
        throw new Error("Missing the required parameter 'division' when calling rootGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'ward': ward,
        'division': division,
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Features;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
