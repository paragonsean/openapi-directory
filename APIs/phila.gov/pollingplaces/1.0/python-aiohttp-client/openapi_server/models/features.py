# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Features(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, building: str=None, display_address: str=None, division: str=None, lat: float=None, lng: float=None, location: str=None, parking: str=None, pin_address: str=None, ward: str=None, zip_code: int=None):
        """Features - a model defined in OpenAPI

        :param building: The building of this Features.
        :param display_address: The display_address of this Features.
        :param division: The division of this Features.
        :param lat: The lat of this Features.
        :param lng: The lng of this Features.
        :param location: The location of this Features.
        :param parking: The parking of this Features.
        :param pin_address: The pin_address of this Features.
        :param ward: The ward of this Features.
        :param zip_code: The zip_code of this Features.
        """
        self.openapi_types = {
            'building': str,
            'display_address': str,
            'division': str,
            'lat': float,
            'lng': float,
            'location': str,
            'parking': str,
            'pin_address': str,
            'ward': str,
            'zip_code': int
        }

        self.attribute_map = {
            'building': 'building',
            'display_address': 'display_address',
            'division': 'division',
            'lat': 'lat',
            'lng': 'lng',
            'location': 'location',
            'parking': 'parking',
            'pin_address': 'pin_address',
            'ward': 'ward',
            'zip_code': 'zip_code'
        }

        self._building = building
        self._display_address = display_address
        self._division = division
        self._lat = lat
        self._lng = lng
        self._location = location
        self._parking = parking
        self._pin_address = pin_address
        self._ward = ward
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Features':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The features of this Features.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building(self):
        """Gets the building of this Features.

        Assigned code to denote the accessibility of the polling place. See above for details of the codes. F = Building Fully Accessible; B = Building Substantially Accessible; M = Building Accessibilty Modified; A = Alternate Entrance; R = Building Accessible With Ramp; N = Building Not Accessible 

        :return: The building of this Features.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building):
        """Sets the building of this Features.

        Assigned code to denote the accessibility of the polling place. See above for details of the codes. F = Building Fully Accessible; B = Building Substantially Accessible; M = Building Accessibilty Modified; A = Alternate Entrance; R = Building Accessible With Ramp; N = Building Not Accessible 

        :param building: The building of this Features.
        :type building: str
        """

        self._building = building

    @property
    def display_address(self):
        """Gets the display_address of this Features.

        Mailing address of the polling place (formatted for display purposes).

        :return: The display_address of this Features.
        :rtype: str
        """
        return self._display_address

    @display_address.setter
    def display_address(self, display_address):
        """Sets the display_address of this Features.

        Mailing address of the polling place (formatted for display purposes).

        :param display_address: The display_address of this Features.
        :type display_address: str
        """

        self._display_address = display_address

    @property
    def division(self):
        """Gets the division of this Features.

        The number of the electoral section that houses the polling place.

        :return: The division of this Features.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Features.

        The number of the electoral section that houses the polling place.

        :param division: The division of this Features.
        :type division: str
        """

        self._division = division

    @property
    def lat(self):
        """Gets the lat of this Features.

        Latitudinal coordinates of the polling place.

        :return: The lat of this Features.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Features.

        Latitudinal coordinates of the polling place.

        :param lat: The lat of this Features.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Features.

        Longitudinal coordinates of the polling place.

        :return: The lng of this Features.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Features.

        Longitudinal coordinates of the polling place.

        :param lng: The lng of this Features.
        :type lng: float
        """

        self._lng = lng

    @property
    def location(self):
        """Gets the location of this Features.

        The name of the polling place.

        :return: The location of this Features.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Features.

        The name of the polling place.

        :param location: The location of this Features.
        :type location: str
        """

        self._location = location

    @property
    def parking(self):
        """Gets the parking of this Features.

        Assigned code to denote the availability of parking. See above for details of the codes. N = No Parking; G = General Parking; L = Loading Zone; H = Handicap Parking 

        :return: The parking of this Features.
        :rtype: str
        """
        return self._parking

    @parking.setter
    def parking(self, parking):
        """Sets the parking of this Features.

        Assigned code to denote the availability of parking. See above for details of the codes. N = No Parking; G = General Parking; L = Loading Zone; H = Handicap Parking 

        :param parking: The parking of this Features.
        :type parking: str
        """

        self._parking = parking

    @property
    def pin_address(self):
        """Gets the pin_address of this Features.

        Mailing address of the polling place.

        :return: The pin_address of this Features.
        :rtype: str
        """
        return self._pin_address

    @pin_address.setter
    def pin_address(self, pin_address):
        """Sets the pin_address of this Features.

        Mailing address of the polling place.

        :param pin_address: The pin_address of this Features.
        :type pin_address: str
        """

        self._pin_address = pin_address

    @property
    def ward(self):
        """Gets the ward of this Features.

        The number of the electoral subdivision that houses the polling place.

        :return: The ward of this Features.
        :rtype: str
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this Features.

        The number of the electoral subdivision that houses the polling place.

        :param ward: The ward of this Features.
        :type ward: str
        """

        self._ward = ward

    @property
    def zip_code(self):
        """Gets the zip_code of this Features.

        Zipcode of the polling place.

        :return: The zip_code of this Features.
        :rtype: int
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Features.

        Zipcode of the polling place.

        :param zip_code: The zip_code of this Features.
        :type zip_code: int
        """

        self._zip_code = zip_code
