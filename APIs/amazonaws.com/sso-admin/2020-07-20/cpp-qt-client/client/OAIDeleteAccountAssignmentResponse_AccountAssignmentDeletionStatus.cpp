/**
 * AWS Single Sign-On Admin
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) helps you securely create, or connect, your workforce identities and manage their access centrally across AWS accounts and applications. IAM Identity Center is the recommended approach for workforce authentication and authorization in AWS, for organizations of any size and type.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide provides information on single sign-on operations which could be used for access management of AWS accounts. For information about IAM Identity Center features, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">IAM Identity Center User Guide</a>.</p> <p>Many operations in the IAM Identity Center APIs rely on identifiers for users and groups, known as principals. For more information about how to work with principals and principal IDs in IAM Identity Center, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/welcome.html\">Identity Store API Reference</a>.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, and more). The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2020-07-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus() {
    this->initializeModel();
}

OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::~OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus() {}

void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_permission_set_arn_isSet = false;
    m_permission_set_arn_isValid = false;

    m_principal_type_isSet = false;
    m_principal_type_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;
}

void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("TargetId")]);
    m_target_id_isSet = !json[QString("TargetId")].isNull() && m_target_id_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("TargetType")]);
    m_target_type_isSet = !json[QString("TargetType")].isNull() && m_target_type_isValid;

    m_permission_set_arn_isValid = ::OpenAPI::fromJsonValue(m_permission_set_arn, json[QString("PermissionSetArn")]);
    m_permission_set_arn_isSet = !json[QString("PermissionSetArn")].isNull() && m_permission_set_arn_isValid;

    m_principal_type_isValid = ::OpenAPI::fromJsonValue(m_principal_type, json[QString("PrincipalType")]);
    m_principal_type_isSet = !json[QString("PrincipalType")].isNull() && m_principal_type_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("PrincipalId")]);
    m_principal_id_isSet = !json[QString("PrincipalId")].isNull() && m_principal_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("CreatedDate")]);
    m_created_date_isSet = !json[QString("CreatedDate")].isNull() && m_created_date_isValid;
}

QString OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("TargetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_type.isSet()) {
        obj.insert(QString("TargetType"), ::OpenAPI::toJsonValue(m_target_type));
    }
    if (m_permission_set_arn_isSet) {
        obj.insert(QString("PermissionSetArn"), ::OpenAPI::toJsonValue(m_permission_set_arn));
    }
    if (m_principal_type.isSet()) {
        obj.insert(QString("PrincipalType"), ::OpenAPI::toJsonValue(m_principal_type));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("PrincipalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("CreatedDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    return obj;
}

OAIStatusValues OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getStatus() const {
    return m_status;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setStatus(const OAIStatusValues &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getRequestId() const {
    return m_request_id;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getFailureReason() const {
    return m_failure_reason;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getTargetId() const {
    return m_target_id;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_target_id_Valid() const{
    return m_target_id_isValid;
}

OAITargetType OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getTargetType() const {
    return m_target_type;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setTargetType(const OAITargetType &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_target_type_Valid() const{
    return m_target_type_isValid;
}

QString OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getPermissionSetArn() const {
    return m_permission_set_arn;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setPermissionSetArn(const QString &permission_set_arn) {
    m_permission_set_arn = permission_set_arn;
    m_permission_set_arn_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_permission_set_arn_Set() const{
    return m_permission_set_arn_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_permission_set_arn_Valid() const{
    return m_permission_set_arn_isValid;
}

OAIPrincipalType OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getPrincipalType() const {
    return m_principal_type;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setPrincipalType(const OAIPrincipalType &principal_type) {
    m_principal_type = principal_type;
    m_principal_type_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_principal_type_Set() const{
    return m_principal_type_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_principal_type_Valid() const{
    return m_principal_type_isValid;
}

QString OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getPrincipalId() const {
    return m_principal_id;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QDateTime OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::getCreatedDate() const {
    return m_created_date;
}
void OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::is_created_date_Valid() const{
    return m_created_date_isValid;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAccountAssignmentResponse_AccountAssignmentDeletionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
