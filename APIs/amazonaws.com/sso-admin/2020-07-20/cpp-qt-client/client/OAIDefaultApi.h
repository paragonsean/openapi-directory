/**
 * AWS Single Sign-On Admin
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) helps you securely create, or connect, your workforce identities and manage their access centrally across AWS accounts and applications. IAM Identity Center is the recommended approach for workforce authentication and authorization in AWS, for organizations of any size and type.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide provides information on single sign-on operations which could be used for access management of AWS accounts. For information about IAM Identity Center features, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">IAM Identity Center User Guide</a>.</p> <p>Many operations in the IAM Identity Center APIs rely on identifiers for users and groups, known as principals. For more information about how to work with principals and principal IDs in IAM Identity Center, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/welcome.html\">Identity Store API Reference</a>.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, and more). The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2020-07-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttachCustomerManagedPolicyReferenceToPermissionSetRequest.h"
#include "OAIAttachManagedPolicyToPermissionSetRequest.h"
#include "OAICreateAccountAssignmentRequest.h"
#include "OAICreateAccountAssignmentResponse.h"
#include "OAICreateInstanceAccessControlAttributeConfigurationRequest.h"
#include "OAICreatePermissionSetRequest.h"
#include "OAICreatePermissionSetResponse.h"
#include "OAIDeleteAccountAssignmentRequest.h"
#include "OAIDeleteAccountAssignmentResponse.h"
#include "OAIDeleteInlinePolicyFromPermissionSetRequest.h"
#include "OAIDeleteInstanceAccessControlAttributeConfigurationRequest.h"
#include "OAIDeletePermissionSetRequest.h"
#include "OAIDeletePermissionsBoundaryFromPermissionSetRequest.h"
#include "OAIDescribeAccountAssignmentCreationStatusRequest.h"
#include "OAIDescribeAccountAssignmentCreationStatusResponse.h"
#include "OAIDescribeAccountAssignmentDeletionStatusRequest.h"
#include "OAIDescribeAccountAssignmentDeletionStatusResponse.h"
#include "OAIDescribeInstanceAccessControlAttributeConfigurationRequest.h"
#include "OAIDescribeInstanceAccessControlAttributeConfigurationResponse.h"
#include "OAIDescribePermissionSetProvisioningStatusRequest.h"
#include "OAIDescribePermissionSetProvisioningStatusResponse.h"
#include "OAIDescribePermissionSetRequest.h"
#include "OAIDescribePermissionSetResponse.h"
#include "OAIDetachCustomerManagedPolicyReferenceFromPermissionSetRequest.h"
#include "OAIDetachManagedPolicyFromPermissionSetRequest.h"
#include "OAIGetInlinePolicyForPermissionSetRequest.h"
#include "OAIGetInlinePolicyForPermissionSetResponse.h"
#include "OAIGetPermissionsBoundaryForPermissionSetRequest.h"
#include "OAIGetPermissionsBoundaryForPermissionSetResponse.h"
#include "OAIListAccountAssignmentCreationStatusRequest.h"
#include "OAIListAccountAssignmentCreationStatusResponse.h"
#include "OAIListAccountAssignmentDeletionStatusRequest.h"
#include "OAIListAccountAssignmentDeletionStatusResponse.h"
#include "OAIListAccountAssignmentsRequest.h"
#include "OAIListAccountAssignmentsResponse.h"
#include "OAIListAccountsForProvisionedPermissionSetRequest.h"
#include "OAIListAccountsForProvisionedPermissionSetResponse.h"
#include "OAIListCustomerManagedPolicyReferencesInPermissionSetRequest.h"
#include "OAIListCustomerManagedPolicyReferencesInPermissionSetResponse.h"
#include "OAIListInstancesRequest.h"
#include "OAIListInstancesResponse.h"
#include "OAIListManagedPoliciesInPermissionSetRequest.h"
#include "OAIListManagedPoliciesInPermissionSetResponse.h"
#include "OAIListPermissionSetProvisioningStatusRequest.h"
#include "OAIListPermissionSetProvisioningStatusResponse.h"
#include "OAIListPermissionSetsProvisionedToAccountRequest.h"
#include "OAIListPermissionSetsProvisionedToAccountResponse.h"
#include "OAIListPermissionSetsRequest.h"
#include "OAIListPermissionSetsResponse.h"
#include "OAIListTagsForResourceRequest.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIObject.h"
#include "OAIProvisionPermissionSetRequest.h"
#include "OAIProvisionPermissionSetResponse.h"
#include "OAIPutInlinePolicyToPermissionSetRequest.h"
#include "OAIPutPermissionsBoundaryToPermissionSetRequest.h"
#include "OAITagResourceRequest.h"
#include "OAIUntagResourceRequest.h"
#include "OAIUpdateInstanceAccessControlAttributeConfigurationRequest.h"
#include "OAIUpdatePermissionSetRequest.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_attach_customer_managed_policy_reference_to_permission_set_request OAIAttachCustomerManagedPolicyReferenceToPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void attachCustomerManagedPolicyReferenceToPermissionSet(const QString &x_amz_target, const OAIAttachCustomerManagedPolicyReferenceToPermissionSetRequest &oai_attach_customer_managed_policy_reference_to_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_attach_managed_policy_to_permission_set_request OAIAttachManagedPolicyToPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void attachManagedPolicyToPermissionSet(const QString &x_amz_target, const OAIAttachManagedPolicyToPermissionSetRequest &oai_attach_managed_policy_to_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_account_assignment_request OAICreateAccountAssignmentRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAccountAssignment(const QString &x_amz_target, const OAICreateAccountAssignmentRequest &oai_create_account_assignment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_instance_access_control_attribute_configuration_request OAICreateInstanceAccessControlAttributeConfigurationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createInstanceAccessControlAttributeConfiguration(const QString &x_amz_target, const OAICreateInstanceAccessControlAttributeConfigurationRequest &oai_create_instance_access_control_attribute_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_permission_set_request OAICreatePermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPermissionSet(const QString &x_amz_target, const OAICreatePermissionSetRequest &oai_create_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_account_assignment_request OAIDeleteAccountAssignmentRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAccountAssignment(const QString &x_amz_target, const OAIDeleteAccountAssignmentRequest &oai_delete_account_assignment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_inline_policy_from_permission_set_request OAIDeleteInlinePolicyFromPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteInlinePolicyFromPermissionSet(const QString &x_amz_target, const OAIDeleteInlinePolicyFromPermissionSetRequest &oai_delete_inline_policy_from_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_instance_access_control_attribute_configuration_request OAIDeleteInstanceAccessControlAttributeConfigurationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteInstanceAccessControlAttributeConfiguration(const QString &x_amz_target, const OAIDeleteInstanceAccessControlAttributeConfigurationRequest &oai_delete_instance_access_control_attribute_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_permission_set_request OAIDeletePermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePermissionSet(const QString &x_amz_target, const OAIDeletePermissionSetRequest &oai_delete_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_permissions_boundary_from_permission_set_request OAIDeletePermissionsBoundaryFromPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePermissionsBoundaryFromPermissionSet(const QString &x_amz_target, const OAIDeletePermissionsBoundaryFromPermissionSetRequest &oai_delete_permissions_boundary_from_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_account_assignment_creation_status_request OAIDescribeAccountAssignmentCreationStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAccountAssignmentCreationStatus(const QString &x_amz_target, const OAIDescribeAccountAssignmentCreationStatusRequest &oai_describe_account_assignment_creation_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_account_assignment_deletion_status_request OAIDescribeAccountAssignmentDeletionStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAccountAssignmentDeletionStatus(const QString &x_amz_target, const OAIDescribeAccountAssignmentDeletionStatusRequest &oai_describe_account_assignment_deletion_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_instance_access_control_attribute_configuration_request OAIDescribeInstanceAccessControlAttributeConfigurationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeInstanceAccessControlAttributeConfiguration(const QString &x_amz_target, const OAIDescribeInstanceAccessControlAttributeConfigurationRequest &oai_describe_instance_access_control_attribute_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_permission_set_request OAIDescribePermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describePermissionSet(const QString &x_amz_target, const OAIDescribePermissionSetRequest &oai_describe_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_permission_set_provisioning_status_request OAIDescribePermissionSetProvisioningStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describePermissionSetProvisioningStatus(const QString &x_amz_target, const OAIDescribePermissionSetProvisioningStatusRequest &oai_describe_permission_set_provisioning_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_detach_customer_managed_policy_reference_from_permission_set_request OAIDetachCustomerManagedPolicyReferenceFromPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void detachCustomerManagedPolicyReferenceFromPermissionSet(const QString &x_amz_target, const OAIDetachCustomerManagedPolicyReferenceFromPermissionSetRequest &oai_detach_customer_managed_policy_reference_from_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_detach_managed_policy_from_permission_set_request OAIDetachManagedPolicyFromPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void detachManagedPolicyFromPermissionSet(const QString &x_amz_target, const OAIDetachManagedPolicyFromPermissionSetRequest &oai_detach_managed_policy_from_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_inline_policy_for_permission_set_request OAIGetInlinePolicyForPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInlinePolicyForPermissionSet(const QString &x_amz_target, const OAIGetInlinePolicyForPermissionSetRequest &oai_get_inline_policy_for_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_permissions_boundary_for_permission_set_request OAIGetPermissionsBoundaryForPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPermissionsBoundaryForPermissionSet(const QString &x_amz_target, const OAIGetPermissionsBoundaryForPermissionSetRequest &oai_get_permissions_boundary_for_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_account_assignment_creation_status_request OAIListAccountAssignmentCreationStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAccountAssignmentCreationStatus(const QString &x_amz_target, const OAIListAccountAssignmentCreationStatusRequest &oai_list_account_assignment_creation_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_account_assignment_deletion_status_request OAIListAccountAssignmentDeletionStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAccountAssignmentDeletionStatus(const QString &x_amz_target, const OAIListAccountAssignmentDeletionStatusRequest &oai_list_account_assignment_deletion_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_account_assignments_request OAIListAccountAssignmentsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAccountAssignments(const QString &x_amz_target, const OAIListAccountAssignmentsRequest &oai_list_account_assignments_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_accounts_for_provisioned_permission_set_request OAIListAccountsForProvisionedPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listAccountsForProvisionedPermissionSet(const QString &x_amz_target, const OAIListAccountsForProvisionedPermissionSetRequest &oai_list_accounts_for_provisioned_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_customer_managed_policy_references_in_permission_set_request OAIListCustomerManagedPolicyReferencesInPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listCustomerManagedPolicyReferencesInPermissionSet(const QString &x_amz_target, const OAIListCustomerManagedPolicyReferencesInPermissionSetRequest &oai_list_customer_managed_policy_references_in_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_instances_request OAIListInstancesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listInstances(const QString &x_amz_target, const OAIListInstancesRequest &oai_list_instances_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_managed_policies_in_permission_set_request OAIListManagedPoliciesInPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listManagedPoliciesInPermissionSet(const QString &x_amz_target, const OAIListManagedPoliciesInPermissionSetRequest &oai_list_managed_policies_in_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_permission_set_provisioning_status_request OAIListPermissionSetProvisioningStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listPermissionSetProvisioningStatus(const QString &x_amz_target, const OAIListPermissionSetProvisioningStatusRequest &oai_list_permission_set_provisioning_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_permission_sets_request OAIListPermissionSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listPermissionSets(const QString &x_amz_target, const OAIListPermissionSetsRequest &oai_list_permission_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_permission_sets_provisioned_to_account_request OAIListPermissionSetsProvisionedToAccountRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listPermissionSetsProvisionedToAccount(const QString &x_amz_target, const OAIListPermissionSetsProvisionedToAccountRequest &oai_list_permission_sets_provisioned_to_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tags_for_resource_request OAIListTagsForResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listTagsForResource(const QString &x_amz_target, const OAIListTagsForResourceRequest &oai_list_tags_for_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_provision_permission_set_request OAIProvisionPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void provisionPermissionSet(const QString &x_amz_target, const OAIProvisionPermissionSetRequest &oai_provision_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_inline_policy_to_permission_set_request OAIPutInlinePolicyToPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putInlinePolicyToPermissionSet(const QString &x_amz_target, const OAIPutInlinePolicyToPermissionSetRequest &oai_put_inline_policy_to_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_permissions_boundary_to_permission_set_request OAIPutPermissionsBoundaryToPermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putPermissionsBoundaryToPermissionSet(const QString &x_amz_target, const OAIPutPermissionsBoundaryToPermissionSetRequest &oai_put_permissions_boundary_to_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_tag_resource_request OAITagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &x_amz_target, const OAITagResourceRequest &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_untag_resource_request OAIUntagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &x_amz_target, const OAIUntagResourceRequest &oai_untag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_instance_access_control_attribute_configuration_request OAIUpdateInstanceAccessControlAttributeConfigurationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateInstanceAccessControlAttributeConfiguration(const QString &x_amz_target, const OAIUpdateInstanceAccessControlAttributeConfigurationRequest &oai_update_instance_access_control_attribute_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_permission_set_request OAIUpdatePermissionSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updatePermissionSet(const QString &x_amz_target, const OAIUpdatePermissionSetRequest &oai_update_permission_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attachCustomerManagedPolicyReferenceToPermissionSetCallback(OAIHttpRequestWorker *worker);
    void attachManagedPolicyToPermissionSetCallback(OAIHttpRequestWorker *worker);
    void createAccountAssignmentCallback(OAIHttpRequestWorker *worker);
    void createInstanceAccessControlAttributeConfigurationCallback(OAIHttpRequestWorker *worker);
    void createPermissionSetCallback(OAIHttpRequestWorker *worker);
    void deleteAccountAssignmentCallback(OAIHttpRequestWorker *worker);
    void deleteInlinePolicyFromPermissionSetCallback(OAIHttpRequestWorker *worker);
    void deleteInstanceAccessControlAttributeConfigurationCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSetCallback(OAIHttpRequestWorker *worker);
    void deletePermissionsBoundaryFromPermissionSetCallback(OAIHttpRequestWorker *worker);
    void describeAccountAssignmentCreationStatusCallback(OAIHttpRequestWorker *worker);
    void describeAccountAssignmentDeletionStatusCallback(OAIHttpRequestWorker *worker);
    void describeInstanceAccessControlAttributeConfigurationCallback(OAIHttpRequestWorker *worker);
    void describePermissionSetCallback(OAIHttpRequestWorker *worker);
    void describePermissionSetProvisioningStatusCallback(OAIHttpRequestWorker *worker);
    void detachCustomerManagedPolicyReferenceFromPermissionSetCallback(OAIHttpRequestWorker *worker);
    void detachManagedPolicyFromPermissionSetCallback(OAIHttpRequestWorker *worker);
    void getInlinePolicyForPermissionSetCallback(OAIHttpRequestWorker *worker);
    void getPermissionsBoundaryForPermissionSetCallback(OAIHttpRequestWorker *worker);
    void listAccountAssignmentCreationStatusCallback(OAIHttpRequestWorker *worker);
    void listAccountAssignmentDeletionStatusCallback(OAIHttpRequestWorker *worker);
    void listAccountAssignmentsCallback(OAIHttpRequestWorker *worker);
    void listAccountsForProvisionedPermissionSetCallback(OAIHttpRequestWorker *worker);
    void listCustomerManagedPolicyReferencesInPermissionSetCallback(OAIHttpRequestWorker *worker);
    void listInstancesCallback(OAIHttpRequestWorker *worker);
    void listManagedPoliciesInPermissionSetCallback(OAIHttpRequestWorker *worker);
    void listPermissionSetProvisioningStatusCallback(OAIHttpRequestWorker *worker);
    void listPermissionSetsCallback(OAIHttpRequestWorker *worker);
    void listPermissionSetsProvisionedToAccountCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void provisionPermissionSetCallback(OAIHttpRequestWorker *worker);
    void putInlinePolicyToPermissionSetCallback(OAIHttpRequestWorker *worker);
    void putPermissionsBoundaryToPermissionSetCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateInstanceAccessControlAttributeConfigurationCallback(OAIHttpRequestWorker *worker);
    void updatePermissionSetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attachCustomerManagedPolicyReferenceToPermissionSetSignal(OAIObject summary);
    void attachManagedPolicyToPermissionSetSignal(OAIObject summary);
    void createAccountAssignmentSignal(OAICreateAccountAssignmentResponse summary);
    void createInstanceAccessControlAttributeConfigurationSignal(OAIObject summary);
    void createPermissionSetSignal(OAICreatePermissionSetResponse summary);
    void deleteAccountAssignmentSignal(OAIDeleteAccountAssignmentResponse summary);
    void deleteInlinePolicyFromPermissionSetSignal(OAIObject summary);
    void deleteInstanceAccessControlAttributeConfigurationSignal(OAIObject summary);
    void deletePermissionSetSignal(OAIObject summary);
    void deletePermissionsBoundaryFromPermissionSetSignal(OAIObject summary);
    void describeAccountAssignmentCreationStatusSignal(OAIDescribeAccountAssignmentCreationStatusResponse summary);
    void describeAccountAssignmentDeletionStatusSignal(OAIDescribeAccountAssignmentDeletionStatusResponse summary);
    void describeInstanceAccessControlAttributeConfigurationSignal(OAIDescribeInstanceAccessControlAttributeConfigurationResponse summary);
    void describePermissionSetSignal(OAIDescribePermissionSetResponse summary);
    void describePermissionSetProvisioningStatusSignal(OAIDescribePermissionSetProvisioningStatusResponse summary);
    void detachCustomerManagedPolicyReferenceFromPermissionSetSignal(OAIObject summary);
    void detachManagedPolicyFromPermissionSetSignal(OAIObject summary);
    void getInlinePolicyForPermissionSetSignal(OAIGetInlinePolicyForPermissionSetResponse summary);
    void getPermissionsBoundaryForPermissionSetSignal(OAIGetPermissionsBoundaryForPermissionSetResponse summary);
    void listAccountAssignmentCreationStatusSignal(OAIListAccountAssignmentCreationStatusResponse summary);
    void listAccountAssignmentDeletionStatusSignal(OAIListAccountAssignmentDeletionStatusResponse summary);
    void listAccountAssignmentsSignal(OAIListAccountAssignmentsResponse summary);
    void listAccountsForProvisionedPermissionSetSignal(OAIListAccountsForProvisionedPermissionSetResponse summary);
    void listCustomerManagedPolicyReferencesInPermissionSetSignal(OAIListCustomerManagedPolicyReferencesInPermissionSetResponse summary);
    void listInstancesSignal(OAIListInstancesResponse summary);
    void listManagedPoliciesInPermissionSetSignal(OAIListManagedPoliciesInPermissionSetResponse summary);
    void listPermissionSetProvisioningStatusSignal(OAIListPermissionSetProvisioningStatusResponse summary);
    void listPermissionSetsSignal(OAIListPermissionSetsResponse summary);
    void listPermissionSetsProvisionedToAccountSignal(OAIListPermissionSetsProvisionedToAccountResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void provisionPermissionSetSignal(OAIProvisionPermissionSetResponse summary);
    void putInlinePolicyToPermissionSetSignal(OAIObject summary);
    void putPermissionsBoundaryToPermissionSetSignal(OAIObject summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateInstanceAccessControlAttributeConfigurationSignal(OAIObject summary);
    void updatePermissionSetSignal(OAIObject summary);


    void attachCustomerManagedPolicyReferenceToPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void attachManagedPolicyToPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createAccountAssignmentSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountAssignmentResponse summary);
    void createInstanceAccessControlAttributeConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void createPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAICreatePermissionSetResponse summary);
    void deleteAccountAssignmentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAccountAssignmentResponse summary);
    void deleteInlinePolicyFromPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteInstanceAccessControlAttributeConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deletePermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deletePermissionsBoundaryFromPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void describeAccountAssignmentCreationStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountAssignmentCreationStatusResponse summary);
    void describeAccountAssignmentDeletionStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountAssignmentDeletionStatusResponse summary);
    void describeInstanceAccessControlAttributeConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeInstanceAccessControlAttributeConfigurationResponse summary);
    void describePermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribePermissionSetResponse summary);
    void describePermissionSetProvisioningStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribePermissionSetProvisioningStatusResponse summary);
    void detachCustomerManagedPolicyReferenceFromPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void detachManagedPolicyFromPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getInlinePolicyForPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIGetInlinePolicyForPermissionSetResponse summary);
    void getPermissionsBoundaryForPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIGetPermissionsBoundaryForPermissionSetResponse summary);
    void listAccountAssignmentCreationStatusSignalFull(OAIHttpRequestWorker *worker, OAIListAccountAssignmentCreationStatusResponse summary);
    void listAccountAssignmentDeletionStatusSignalFull(OAIHttpRequestWorker *worker, OAIListAccountAssignmentDeletionStatusResponse summary);
    void listAccountAssignmentsSignalFull(OAIHttpRequestWorker *worker, OAIListAccountAssignmentsResponse summary);
    void listAccountsForProvisionedPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIListAccountsForProvisionedPermissionSetResponse summary);
    void listCustomerManagedPolicyReferencesInPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIListCustomerManagedPolicyReferencesInPermissionSetResponse summary);
    void listInstancesSignalFull(OAIHttpRequestWorker *worker, OAIListInstancesResponse summary);
    void listManagedPoliciesInPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIListManagedPoliciesInPermissionSetResponse summary);
    void listPermissionSetProvisioningStatusSignalFull(OAIHttpRequestWorker *worker, OAIListPermissionSetProvisioningStatusResponse summary);
    void listPermissionSetsSignalFull(OAIHttpRequestWorker *worker, OAIListPermissionSetsResponse summary);
    void listPermissionSetsProvisionedToAccountSignalFull(OAIHttpRequestWorker *worker, OAIListPermissionSetsProvisionedToAccountResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void provisionPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIProvisionPermissionSetResponse summary);
    void putInlinePolicyToPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void putPermissionsBoundaryToPermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateInstanceAccessControlAttributeConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updatePermissionSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use attachCustomerManagedPolicyReferenceToPermissionSetSignalError() instead")
    void attachCustomerManagedPolicyReferenceToPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachCustomerManagedPolicyReferenceToPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachManagedPolicyToPermissionSetSignalError() instead")
    void attachManagedPolicyToPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachManagedPolicyToPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountAssignmentSignalError() instead")
    void createAccountAssignmentSignalE(OAICreateAccountAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountAssignmentSignalError(OAICreateAccountAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInstanceAccessControlAttributeConfigurationSignalError() instead")
    void createInstanceAccessControlAttributeConfigurationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInstanceAccessControlAttributeConfigurationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionSetSignalError() instead")
    void createPermissionSetSignalE(OAICreatePermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionSetSignalError(OAICreatePermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountAssignmentSignalError() instead")
    void deleteAccountAssignmentSignalE(OAIDeleteAccountAssignmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountAssignmentSignalError(OAIDeleteAccountAssignmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInlinePolicyFromPermissionSetSignalError() instead")
    void deleteInlinePolicyFromPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInlinePolicyFromPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInstanceAccessControlAttributeConfigurationSignalError() instead")
    void deleteInstanceAccessControlAttributeConfigurationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInstanceAccessControlAttributeConfigurationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSetSignalError() instead")
    void deletePermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionsBoundaryFromPermissionSetSignalError() instead")
    void deletePermissionsBoundaryFromPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionsBoundaryFromPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountAssignmentCreationStatusSignalError() instead")
    void describeAccountAssignmentCreationStatusSignalE(OAIDescribeAccountAssignmentCreationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountAssignmentCreationStatusSignalError(OAIDescribeAccountAssignmentCreationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountAssignmentDeletionStatusSignalError() instead")
    void describeAccountAssignmentDeletionStatusSignalE(OAIDescribeAccountAssignmentDeletionStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountAssignmentDeletionStatusSignalError(OAIDescribeAccountAssignmentDeletionStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeInstanceAccessControlAttributeConfigurationSignalError() instead")
    void describeInstanceAccessControlAttributeConfigurationSignalE(OAIDescribeInstanceAccessControlAttributeConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeInstanceAccessControlAttributeConfigurationSignalError(OAIDescribeInstanceAccessControlAttributeConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePermissionSetSignalError() instead")
    void describePermissionSetSignalE(OAIDescribePermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePermissionSetSignalError(OAIDescribePermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePermissionSetProvisioningStatusSignalError() instead")
    void describePermissionSetProvisioningStatusSignalE(OAIDescribePermissionSetProvisioningStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePermissionSetProvisioningStatusSignalError(OAIDescribePermissionSetProvisioningStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detachCustomerManagedPolicyReferenceFromPermissionSetSignalError() instead")
    void detachCustomerManagedPolicyReferenceFromPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detachCustomerManagedPolicyReferenceFromPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detachManagedPolicyFromPermissionSetSignalError() instead")
    void detachManagedPolicyFromPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detachManagedPolicyFromPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInlinePolicyForPermissionSetSignalError() instead")
    void getInlinePolicyForPermissionSetSignalE(OAIGetInlinePolicyForPermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInlinePolicyForPermissionSetSignalError(OAIGetInlinePolicyForPermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsBoundaryForPermissionSetSignalError() instead")
    void getPermissionsBoundaryForPermissionSetSignalE(OAIGetPermissionsBoundaryForPermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsBoundaryForPermissionSetSignalError(OAIGetPermissionsBoundaryForPermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountAssignmentCreationStatusSignalError() instead")
    void listAccountAssignmentCreationStatusSignalE(OAIListAccountAssignmentCreationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountAssignmentCreationStatusSignalError(OAIListAccountAssignmentCreationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountAssignmentDeletionStatusSignalError() instead")
    void listAccountAssignmentDeletionStatusSignalE(OAIListAccountAssignmentDeletionStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountAssignmentDeletionStatusSignalError(OAIListAccountAssignmentDeletionStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountAssignmentsSignalError() instead")
    void listAccountAssignmentsSignalE(OAIListAccountAssignmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountAssignmentsSignalError(OAIListAccountAssignmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsForProvisionedPermissionSetSignalError() instead")
    void listAccountsForProvisionedPermissionSetSignalE(OAIListAccountsForProvisionedPermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsForProvisionedPermissionSetSignalError(OAIListAccountsForProvisionedPermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomerManagedPolicyReferencesInPermissionSetSignalError() instead")
    void listCustomerManagedPolicyReferencesInPermissionSetSignalE(OAIListCustomerManagedPolicyReferencesInPermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomerManagedPolicyReferencesInPermissionSetSignalError(OAIListCustomerManagedPolicyReferencesInPermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInstancesSignalError() instead")
    void listInstancesSignalE(OAIListInstancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInstancesSignalError(OAIListInstancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagedPoliciesInPermissionSetSignalError() instead")
    void listManagedPoliciesInPermissionSetSignalE(OAIListManagedPoliciesInPermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagedPoliciesInPermissionSetSignalError(OAIListManagedPoliciesInPermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionSetProvisioningStatusSignalError() instead")
    void listPermissionSetProvisioningStatusSignalE(OAIListPermissionSetProvisioningStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionSetProvisioningStatusSignalError(OAIListPermissionSetProvisioningStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionSetsSignalError() instead")
    void listPermissionSetsSignalE(OAIListPermissionSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionSetsSignalError(OAIListPermissionSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionSetsProvisionedToAccountSignalError() instead")
    void listPermissionSetsProvisionedToAccountSignalE(OAIListPermissionSetsProvisionedToAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionSetsProvisionedToAccountSignalError(OAIListPermissionSetsProvisionedToAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionPermissionSetSignalError() instead")
    void provisionPermissionSetSignalE(OAIProvisionPermissionSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionPermissionSetSignalError(OAIProvisionPermissionSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putInlinePolicyToPermissionSetSignalError() instead")
    void putInlinePolicyToPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putInlinePolicyToPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionsBoundaryToPermissionSetSignalError() instead")
    void putPermissionsBoundaryToPermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionsBoundaryToPermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstanceAccessControlAttributeConfigurationSignalError() instead")
    void updateInstanceAccessControlAttributeConfigurationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstanceAccessControlAttributeConfigurationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionSetSignalError() instead")
    void updatePermissionSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attachCustomerManagedPolicyReferenceToPermissionSetSignalErrorFull() instead")
    void attachCustomerManagedPolicyReferenceToPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachCustomerManagedPolicyReferenceToPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachManagedPolicyToPermissionSetSignalErrorFull() instead")
    void attachManagedPolicyToPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachManagedPolicyToPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountAssignmentSignalErrorFull() instead")
    void createAccountAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInstanceAccessControlAttributeConfigurationSignalErrorFull() instead")
    void createInstanceAccessControlAttributeConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInstanceAccessControlAttributeConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPermissionSetSignalErrorFull() instead")
    void createPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountAssignmentSignalErrorFull() instead")
    void deleteAccountAssignmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountAssignmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInlinePolicyFromPermissionSetSignalErrorFull() instead")
    void deleteInlinePolicyFromPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInlinePolicyFromPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInstanceAccessControlAttributeConfigurationSignalErrorFull() instead")
    void deleteInstanceAccessControlAttributeConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInstanceAccessControlAttributeConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSetSignalErrorFull() instead")
    void deletePermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionsBoundaryFromPermissionSetSignalErrorFull() instead")
    void deletePermissionsBoundaryFromPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionsBoundaryFromPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountAssignmentCreationStatusSignalErrorFull() instead")
    void describeAccountAssignmentCreationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountAssignmentCreationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAccountAssignmentDeletionStatusSignalErrorFull() instead")
    void describeAccountAssignmentDeletionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAccountAssignmentDeletionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeInstanceAccessControlAttributeConfigurationSignalErrorFull() instead")
    void describeInstanceAccessControlAttributeConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeInstanceAccessControlAttributeConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePermissionSetSignalErrorFull() instead")
    void describePermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePermissionSetProvisioningStatusSignalErrorFull() instead")
    void describePermissionSetProvisioningStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePermissionSetProvisioningStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detachCustomerManagedPolicyReferenceFromPermissionSetSignalErrorFull() instead")
    void detachCustomerManagedPolicyReferenceFromPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detachCustomerManagedPolicyReferenceFromPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detachManagedPolicyFromPermissionSetSignalErrorFull() instead")
    void detachManagedPolicyFromPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detachManagedPolicyFromPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInlinePolicyForPermissionSetSignalErrorFull() instead")
    void getInlinePolicyForPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInlinePolicyForPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsBoundaryForPermissionSetSignalErrorFull() instead")
    void getPermissionsBoundaryForPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsBoundaryForPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountAssignmentCreationStatusSignalErrorFull() instead")
    void listAccountAssignmentCreationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountAssignmentCreationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountAssignmentDeletionStatusSignalErrorFull() instead")
    void listAccountAssignmentDeletionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountAssignmentDeletionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountAssignmentsSignalErrorFull() instead")
    void listAccountAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsForProvisionedPermissionSetSignalErrorFull() instead")
    void listAccountsForProvisionedPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsForProvisionedPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomerManagedPolicyReferencesInPermissionSetSignalErrorFull() instead")
    void listCustomerManagedPolicyReferencesInPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomerManagedPolicyReferencesInPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInstancesSignalErrorFull() instead")
    void listInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagedPoliciesInPermissionSetSignalErrorFull() instead")
    void listManagedPoliciesInPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagedPoliciesInPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionSetProvisioningStatusSignalErrorFull() instead")
    void listPermissionSetProvisioningStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionSetProvisioningStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionSetsSignalErrorFull() instead")
    void listPermissionSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionSetsProvisionedToAccountSignalErrorFull() instead")
    void listPermissionSetsProvisionedToAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionSetsProvisionedToAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisionPermissionSetSignalErrorFull() instead")
    void provisionPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisionPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putInlinePolicyToPermissionSetSignalErrorFull() instead")
    void putInlinePolicyToPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putInlinePolicyToPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionsBoundaryToPermissionSetSignalErrorFull() instead")
    void putPermissionsBoundaryToPermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionsBoundaryToPermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInstanceAccessControlAttributeConfigurationSignalErrorFull() instead")
    void updateInstanceAccessControlAttributeConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInstanceAccessControlAttributeConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionSetSignalErrorFull() instead")
    void updatePermissionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
