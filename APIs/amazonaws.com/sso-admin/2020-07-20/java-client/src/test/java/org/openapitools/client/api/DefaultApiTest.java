/*
 * AWS Single Sign-On Admin
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) helps you securely create, or connect, your workforce identities and manage their access centrally across AWS accounts and applications. IAM Identity Center is the recommended approach for workforce authentication and authorization in AWS, for organizations of any size and type.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide provides information on single sign-on operations which could be used for access management of AWS accounts. For information about IAM Identity Center features, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">IAM Identity Center User Guide</a>.</p> <p>Many operations in the IAM Identity Center APIs rely on identifiers for users and groups, known as principals. For more information about how to work with principals and principal IDs in IAM Identity Center, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/welcome.html\">Identity Store API Reference</a>.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, and more). The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2020-07-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttachCustomerManagedPolicyReferenceToPermissionSetRequest;
import org.openapitools.client.model.AttachManagedPolicyToPermissionSetRequest;
import org.openapitools.client.model.CreateAccountAssignmentRequest;
import org.openapitools.client.model.CreateAccountAssignmentResponse;
import org.openapitools.client.model.CreateInstanceAccessControlAttributeConfigurationRequest;
import org.openapitools.client.model.CreatePermissionSetRequest;
import org.openapitools.client.model.CreatePermissionSetResponse;
import org.openapitools.client.model.DeleteAccountAssignmentRequest;
import org.openapitools.client.model.DeleteAccountAssignmentResponse;
import org.openapitools.client.model.DeleteInlinePolicyFromPermissionSetRequest;
import org.openapitools.client.model.DeleteInstanceAccessControlAttributeConfigurationRequest;
import org.openapitools.client.model.DeletePermissionSetRequest;
import org.openapitools.client.model.DeletePermissionsBoundaryFromPermissionSetRequest;
import org.openapitools.client.model.DescribeAccountAssignmentCreationStatusRequest;
import org.openapitools.client.model.DescribeAccountAssignmentCreationStatusResponse;
import org.openapitools.client.model.DescribeAccountAssignmentDeletionStatusRequest;
import org.openapitools.client.model.DescribeAccountAssignmentDeletionStatusResponse;
import org.openapitools.client.model.DescribeInstanceAccessControlAttributeConfigurationRequest;
import org.openapitools.client.model.DescribeInstanceAccessControlAttributeConfigurationResponse;
import org.openapitools.client.model.DescribePermissionSetProvisioningStatusRequest;
import org.openapitools.client.model.DescribePermissionSetProvisioningStatusResponse;
import org.openapitools.client.model.DescribePermissionSetRequest;
import org.openapitools.client.model.DescribePermissionSetResponse;
import org.openapitools.client.model.DetachCustomerManagedPolicyReferenceFromPermissionSetRequest;
import org.openapitools.client.model.DetachManagedPolicyFromPermissionSetRequest;
import org.openapitools.client.model.GetInlinePolicyForPermissionSetRequest;
import org.openapitools.client.model.GetInlinePolicyForPermissionSetResponse;
import org.openapitools.client.model.GetPermissionsBoundaryForPermissionSetRequest;
import org.openapitools.client.model.GetPermissionsBoundaryForPermissionSetResponse;
import org.openapitools.client.model.ListAccountAssignmentCreationStatusRequest;
import org.openapitools.client.model.ListAccountAssignmentCreationStatusResponse;
import org.openapitools.client.model.ListAccountAssignmentDeletionStatusRequest;
import org.openapitools.client.model.ListAccountAssignmentDeletionStatusResponse;
import org.openapitools.client.model.ListAccountAssignmentsRequest;
import org.openapitools.client.model.ListAccountAssignmentsResponse;
import org.openapitools.client.model.ListAccountsForProvisionedPermissionSetRequest;
import org.openapitools.client.model.ListAccountsForProvisionedPermissionSetResponse;
import org.openapitools.client.model.ListCustomerManagedPolicyReferencesInPermissionSetRequest;
import org.openapitools.client.model.ListCustomerManagedPolicyReferencesInPermissionSetResponse;
import org.openapitools.client.model.ListInstancesRequest;
import org.openapitools.client.model.ListInstancesResponse;
import org.openapitools.client.model.ListManagedPoliciesInPermissionSetRequest;
import org.openapitools.client.model.ListManagedPoliciesInPermissionSetResponse;
import org.openapitools.client.model.ListPermissionSetProvisioningStatusRequest;
import org.openapitools.client.model.ListPermissionSetProvisioningStatusResponse;
import org.openapitools.client.model.ListPermissionSetsProvisionedToAccountRequest;
import org.openapitools.client.model.ListPermissionSetsProvisionedToAccountResponse;
import org.openapitools.client.model.ListPermissionSetsRequest;
import org.openapitools.client.model.ListPermissionSetsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ProvisionPermissionSetRequest;
import org.openapitools.client.model.ProvisionPermissionSetResponse;
import org.openapitools.client.model.PutInlinePolicyToPermissionSetRequest;
import org.openapitools.client.model.PutPermissionsBoundaryToPermissionSetRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateInstanceAccessControlAttributeConfigurationRequest;
import org.openapitools.client.model.UpdatePermissionSetRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Attaches the specified customer managed policy to the specified &lt;a&gt;PermissionSet&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachCustomerManagedPolicyReferenceToPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        AttachCustomerManagedPolicyReferenceToPermissionSetRequest attachCustomerManagedPolicyReferenceToPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.attachCustomerManagedPolicyReferenceToPermissionSet(xAmzTarget, attachCustomerManagedPolicyReferenceToPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches an AWS managed policy ARN to a permission set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the permission set is already referenced by one or more account assignments, you will need to call &lt;code&gt; &lt;a&gt;ProvisionPermissionSet&lt;/a&gt; &lt;/code&gt; after this operation. Calling &lt;code&gt;ProvisionPermissionSet&lt;/code&gt; applies the corresponding IAM policy updates to all assigned accounts.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachManagedPolicyToPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        AttachManagedPolicyToPermissionSetRequest attachManagedPolicyToPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.attachManagedPolicyToPermissionSet(xAmzTarget, attachManagedPolicyToPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns access to a principal for a specified AWS account using a specified permission set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The term &lt;i&gt;principal&lt;/i&gt; here refers to a user or group that is defined in IAM Identity Center.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;As part of a successful &lt;code&gt;CreateAccountAssignment&lt;/code&gt; call, the specified permission set will automatically be provisioned to the account in the form of an IAM policy. That policy is attached to the IAM role created in IAM Identity Center. If the permission set is subsequently updated, the corresponding IAM policies attached to roles in your accounts will not be updated automatically. In this case, you must call &lt;code&gt; &lt;a&gt;ProvisionPermissionSet&lt;/a&gt; &lt;/code&gt; to make these updates.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt; After a successful response, call &lt;code&gt;DescribeAccountAssignmentCreationStatus&lt;/code&gt; to describe the status of an assignment creation request. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountAssignmentTest() throws ApiException {
        String xAmzTarget = null;
        CreateAccountAssignmentRequest createAccountAssignmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAccountAssignmentResponse response = api.createAccountAssignment(xAmzTarget, createAccountAssignmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables the attributes-based access control (ABAC) feature for the specified IAM Identity Center instance. You can also specify new attributes to add to your ABAC configuration during the enabling process. For more information about ABAC, see &lt;a href&#x3D;\&quot;/singlesignon/latest/userguide/abac.html\&quot;&gt;Attribute-Based Access Control&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After a successful response, call &lt;code&gt;DescribeInstanceAccessControlAttributeConfiguration&lt;/code&gt; to validate that &lt;code&gt;InstanceAccessControlAttributeConfiguration&lt;/code&gt; was created.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstanceAccessControlAttributeConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateInstanceAccessControlAttributeConfigurationRequest createInstanceAccessControlAttributeConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createInstanceAccessControlAttributeConfiguration(xAmzTarget, createInstanceAccessControlAttributeConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a permission set within a specified IAM Identity Center instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To grant users and groups access to AWS account resources, use &lt;code&gt; &lt;a&gt;CreateAccountAssignment&lt;/a&gt; &lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        CreatePermissionSetRequest createPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePermissionSetResponse response = api.createPermissionSet(xAmzTarget, createPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a principal&#39;s access from a specified AWS account using a specified permission set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After a successful response, call &lt;code&gt;DescribeAccountAssignmentCreationStatus&lt;/code&gt; to describe the status of an assignment deletion request.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountAssignmentTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAccountAssignmentRequest deleteAccountAssignmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAccountAssignmentResponse response = api.deleteAccountAssignment(xAmzTarget, deleteAccountAssignmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the inline policy from a specified permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInlinePolicyFromPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        DeleteInlinePolicyFromPermissionSetRequest deleteInlinePolicyFromPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteInlinePolicyFromPermissionSet(xAmzTarget, deleteInlinePolicyFromPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the attributes-based access control (ABAC) feature for the specified IAM Identity Center instance and deletes all of the attribute mappings that have been configured. Once deleted, any attributes that are received from an identity source and any custom attributes you have previously configured will not be passed. For more information about ABAC, see &lt;a href&#x3D;\&quot;/singlesignon/latest/userguide/abac.html\&quot;&gt;Attribute-Based Access Control&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInstanceAccessControlAttributeConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteInstanceAccessControlAttributeConfigurationRequest deleteInstanceAccessControlAttributeConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteInstanceAccessControlAttributeConfiguration(xAmzTarget, deleteInstanceAccessControlAttributeConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        DeletePermissionSetRequest deletePermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePermissionSet(xAmzTarget, deletePermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the permissions boundary from a specified &lt;a&gt;PermissionSet&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionsBoundaryFromPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        DeletePermissionsBoundaryFromPermissionSetRequest deletePermissionsBoundaryFromPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePermissionsBoundaryFromPermissionSet(xAmzTarget, deletePermissionsBoundaryFromPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the status of the assignment creation request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountAssignmentCreationStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAccountAssignmentCreationStatusRequest describeAccountAssignmentCreationStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountAssignmentCreationStatusResponse response = api.describeAccountAssignmentCreationStatus(xAmzTarget, describeAccountAssignmentCreationStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the status of the assignment deletion request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountAssignmentDeletionStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAccountAssignmentDeletionStatusRequest describeAccountAssignmentDeletionStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountAssignmentDeletionStatusResponse response = api.describeAccountAssignmentDeletionStatus(xAmzTarget, describeAccountAssignmentDeletionStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the list of IAM Identity Center identity store attributes that have been configured to work with attributes-based access control (ABAC) for the specified IAM Identity Center instance. This will not return attributes configured and sent by an external identity provider. For more information about ABAC, see &lt;a href&#x3D;\&quot;/singlesignon/latest/userguide/abac.html\&quot;&gt;Attribute-Based Access Control&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInstanceAccessControlAttributeConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeInstanceAccessControlAttributeConfigurationRequest describeInstanceAccessControlAttributeConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInstanceAccessControlAttributeConfigurationResponse response = api.describeInstanceAccessControlAttributeConfiguration(xAmzTarget, describeInstanceAccessControlAttributeConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details of the permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        DescribePermissionSetRequest describePermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePermissionSetResponse response = api.describePermissionSet(xAmzTarget, describePermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the status for the given permission set provisioning request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePermissionSetProvisioningStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribePermissionSetProvisioningStatusRequest describePermissionSetProvisioningStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePermissionSetProvisioningStatusResponse response = api.describePermissionSetProvisioningStatus(xAmzTarget, describePermissionSetProvisioningStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detaches the specified customer managed policy from the specified &lt;a&gt;PermissionSet&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachCustomerManagedPolicyReferenceFromPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        DetachCustomerManagedPolicyReferenceFromPermissionSetRequest detachCustomerManagedPolicyReferenceFromPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.detachCustomerManagedPolicyReferenceFromPermissionSet(xAmzTarget, detachCustomerManagedPolicyReferenceFromPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detaches the attached AWS managed policy ARN from the specified permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachManagedPolicyFromPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        DetachManagedPolicyFromPermissionSetRequest detachManagedPolicyFromPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.detachManagedPolicyFromPermissionSet(xAmzTarget, detachManagedPolicyFromPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Obtains the inline policy assigned to the permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInlinePolicyForPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        GetInlinePolicyForPermissionSetRequest getInlinePolicyForPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInlinePolicyForPermissionSetResponse response = api.getInlinePolicyForPermissionSet(xAmzTarget, getInlinePolicyForPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Obtains the permissions boundary for a specified &lt;a&gt;PermissionSet&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionsBoundaryForPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        GetPermissionsBoundaryForPermissionSetRequest getPermissionsBoundaryForPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPermissionsBoundaryForPermissionSetResponse response = api.getPermissionsBoundaryForPermissionSet(xAmzTarget, getPermissionsBoundaryForPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the status of the AWS account assignment creation requests for a specified IAM Identity Center instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountAssignmentCreationStatusTest() throws ApiException {
        String xAmzTarget = null;
        ListAccountAssignmentCreationStatusRequest listAccountAssignmentCreationStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccountAssignmentCreationStatusResponse response = api.listAccountAssignmentCreationStatus(xAmzTarget, listAccountAssignmentCreationStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the status of the AWS account assignment deletion requests for a specified IAM Identity Center instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountAssignmentDeletionStatusTest() throws ApiException {
        String xAmzTarget = null;
        ListAccountAssignmentDeletionStatusRequest listAccountAssignmentDeletionStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccountAssignmentDeletionStatusResponse response = api.listAccountAssignmentDeletionStatus(xAmzTarget, listAccountAssignmentDeletionStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the assignee of the specified AWS account with the specified permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountAssignmentsTest() throws ApiException {
        String xAmzTarget = null;
        ListAccountAssignmentsRequest listAccountAssignmentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccountAssignmentsResponse response = api.listAccountAssignments(xAmzTarget, listAccountAssignmentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the AWS accounts where the specified permission set is provisioned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountsForProvisionedPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        ListAccountsForProvisionedPermissionSetRequest listAccountsForProvisionedPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccountsForProvisionedPermissionSetResponse response = api.listAccountsForProvisionedPermissionSet(xAmzTarget, listAccountsForProvisionedPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all customer managed policies attached to a specified &lt;a&gt;PermissionSet&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomerManagedPolicyReferencesInPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        ListCustomerManagedPolicyReferencesInPermissionSetRequest listCustomerManagedPolicyReferencesInPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCustomerManagedPolicyReferencesInPermissionSetResponse response = api.listCustomerManagedPolicyReferencesInPermissionSet(xAmzTarget, listCustomerManagedPolicyReferencesInPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the IAM Identity Center instances that the caller has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstancesTest() throws ApiException {
        String xAmzTarget = null;
        ListInstancesRequest listInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInstancesResponse response = api.listInstances(xAmzTarget, listInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the AWS managed policy that is attached to a specified permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listManagedPoliciesInPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        ListManagedPoliciesInPermissionSetRequest listManagedPoliciesInPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListManagedPoliciesInPermissionSetResponse response = api.listManagedPoliciesInPermissionSet(xAmzTarget, listManagedPoliciesInPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the status of the permission set provisioning requests for a specified IAM Identity Center instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPermissionSetProvisioningStatusTest() throws ApiException {
        String xAmzTarget = null;
        ListPermissionSetProvisioningStatusRequest listPermissionSetProvisioningStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPermissionSetProvisioningStatusResponse response = api.listPermissionSetProvisioningStatus(xAmzTarget, listPermissionSetProvisioningStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the &lt;a&gt;PermissionSet&lt;/a&gt;s in an IAM Identity Center instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPermissionSetsTest() throws ApiException {
        String xAmzTarget = null;
        ListPermissionSetsRequest listPermissionSetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPermissionSetsResponse response = api.listPermissionSets(xAmzTarget, listPermissionSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the permission sets that are provisioned to a specified AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPermissionSetsProvisionedToAccountTest() throws ApiException {
        String xAmzTarget = null;
        ListPermissionSetsProvisionedToAccountRequest listPermissionSetsProvisionedToAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPermissionSetsProvisionedToAccountResponse response = api.listPermissionSetsProvisionedToAccount(xAmzTarget, listPermissionSetsProvisionedToAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags that are attached to a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * The process by which a specified permission set is provisioned to the specified target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        ProvisionPermissionSetRequest provisionPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ProvisionPermissionSetResponse response = api.provisionPermissionSet(xAmzTarget, provisionPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches an inline policy to a permission set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the permission set is already referenced by one or more account assignments, you will need to call &lt;code&gt; &lt;a&gt;ProvisionPermissionSet&lt;/a&gt; &lt;/code&gt; after this action to apply the corresponding IAM policy updates to all assigned accounts.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putInlinePolicyToPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        PutInlinePolicyToPermissionSetRequest putInlinePolicyToPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putInlinePolicyToPermissionSet(xAmzTarget, putInlinePolicyToPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attaches an AWS managed or customer managed policy to the specified &lt;a&gt;PermissionSet&lt;/a&gt; as a permissions boundary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPermissionsBoundaryToPermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        PutPermissionsBoundaryToPermissionSetRequest putPermissionsBoundaryToPermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putPermissionsBoundaryToPermissionSet(xAmzTarget, putPermissionsBoundaryToPermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a set of tags with a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a set of tags from a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the IAM Identity Center identity store attributes that you can use with the IAM Identity Center instance for attributes-based access control (ABAC). When using an external identity provider as an identity source, you can pass attributes through the SAML assertion as an alternative to configuring attributes from the IAM Identity Center identity store. If a SAML assertion passes any of these attributes, IAM Identity Center replaces the attribute value with the value from the IAM Identity Center identity store. For more information about ABAC, see &lt;a href&#x3D;\&quot;/singlesignon/latest/userguide/abac.html\&quot;&gt;Attribute-Based Access Control&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceAccessControlAttributeConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateInstanceAccessControlAttributeConfigurationRequest updateInstanceAccessControlAttributeConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateInstanceAccessControlAttributeConfiguration(xAmzTarget, updateInstanceAccessControlAttributeConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing permission set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePermissionSetTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePermissionSetRequest updatePermissionSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updatePermissionSet(xAmzTarget, updatePermissionSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
